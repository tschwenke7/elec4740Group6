
d:/UoN/ELEC4470/Repo/elec4740Group6/sensorNode1/target/1.5.2/argon/sensorNode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005e40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9e60  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  2003e280  000d9e64  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004e8  2003e308  2003e308  0002e308  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9eec  000d9eec  00029eec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9f14  000d9f14  00029f14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001082d8  00000000  00000000  00029f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000143fb  00000000  00000000  001321f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000229e4  00000000  00000000  001465eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c78  00000000  00000000  00168fcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005218  00000000  00000000  0016bc47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003a005  00000000  00000000  00170e5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002fe73  00000000  00000000  001aae64  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010e20d  00000000  00000000  001dacd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e3b4  00000000  00000000  002e8ee4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f964 	bl	d92fe <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f984 	bl	d934a <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e280 	.word	0x2003e280
   d404c:	000d9e64 	.word	0x000d9e64
   d4050:	2003e308 	.word	0x2003e308
   d4054:	2003e308 	.word	0x2003e308
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 fb03 	bl	d7668 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9e58 	.word	0x000d9e58
   d4084:	000d9e18 	.word	0x000d9e18

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 b86a 	b.w	d4160 <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f9cf 	bl	d4430 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 baa9 	b.w	d75ec <_post_loop>

000d409a <_Znwj>:
   d409a:	f001 b817 	b.w	d50cc <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b81d 	b.w	d50dc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b81b 	b.w	d50dc <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 ff28 	bl	d4f04 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d4bb1 	.word	0x000d4bb1

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40da:	6800      	ldr	r0, [r0, #0]
   d40dc:	b108      	cbz	r0, d40e2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40de:	f000 fffd 	bl	d50dc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e2:	4620      	mov	r0, r4
   d40e4:	bd10      	pop	{r4, pc}
	...

000d40e8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ea:	b510      	push	{r4, lr}
   d40ec:	4604      	mov	r4, r0
   d40ee:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40f0:	f002 fb6e 	bl	d67d0 <_ZN5spark10LogManager8instanceEv>
   d40f4:	4621      	mov	r1, r4
   d40f6:	f002 fd5b 	bl	d6bb0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40fa:	f003 fe7d 	bl	d7df8 <_Z16_fetch_usbserialv>
   d40fe:	f003 fe6f 	bl	d7de0 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4102:	4620      	mov	r0, r4
   d4104:	4b04      	ldr	r3, [pc, #16]	; (d4118 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4106:	f840 3b04 	str.w	r3, [r0], #4
   d410a:	f002 fc57 	bl	d69bc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d410e:	4620      	mov	r0, r4
   d4110:	bd10      	pop	{r4, pc}
   d4112:	bf00      	nop
   d4114:	000d95f4 	.word	0x000d95f4
   d4118:	000d95dc 	.word	0x000d95dc

000d411c <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	2124      	movs	r1, #36	; 0x24
   d4128:	f004 fb84 	bl	d8834 <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4130:	b40e      	push	{r1, r2, r3}
   d4132:	b500      	push	{lr}
   d4134:	b08c      	sub	sp, #48	; 0x30
   d4136:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4138:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d413a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d413e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4140:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4144:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4146:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4148:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d414a:	aa04      	add	r2, sp, #16
   d414c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d414e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4150:	f000 fee8 	bl	d4f24 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4154:	b00c      	add	sp, #48	; 0x30
   d4156:	f85d eb04 	ldr.w	lr, [sp], #4
   d415a:	b003      	add	sp, #12
   d415c:	4770      	bx	lr
	...

000d4160 <setup>:
const char* moistureSensorUuid("ea5248a4-43cc-4198-a4aa-79200a750835");
BleCharacteristic moistureSensorCharacteristic("moisture",
BleCharacteristicProperty::NOTIFY, moistureSensorUuid, sensorNode1ServiceUuid);

/* Initial setup */
void setup() {
   d4160:	b510      	push	{r4, lr}
   d4162:	b092      	sub	sp, #72	; 0x48
    const uint8_t val = 0x01;
   d4164:	a812      	add	r0, sp, #72	; 0x48
   d4166:	2201      	movs	r2, #1
   d4168:	f800 2d3b 	strb.w	r2, [r0, #-59]!
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d416c:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d4170:	f000 fe80 	bl	d4e74 <dct_write_app_data>
    
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning
    
    /* Setup bluetooth characteristics and advertise sensorNode1Service to be connected to by the clusterhead */
    BLE.on();//activate BT
   d4174:	f001 fbe6 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4178:	f001 fc2a 	bl	d59d0 <_ZNK8particle14BleLocalDevice2onEv>

    //add characteristics
    BLE.addCharacteristic(temperatureSensorCharacteristic);
   d417c:	f001 fbe2 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4180:	4a29      	ldr	r2, [pc, #164]	; (d4228 <setup+0xc8>)
   d4182:	4601      	mov	r1, r0
   d4184:	a809      	add	r0, sp, #36	; 0x24
   d4186:	f002 f83f 	bl	d6208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d418a:	a809      	add	r0, sp, #36	; 0x24
   d418c:	f001 fc99 	bl	d5ac2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(humiditySensorCharacteristic);
   d4190:	f001 fbd8 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4194:	4a25      	ldr	r2, [pc, #148]	; (d422c <setup+0xcc>)
   d4196:	4601      	mov	r1, r0
   d4198:	a809      	add	r0, sp, #36	; 0x24
   d419a:	f002 f835 	bl	d6208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d419e:	a809      	add	r0, sp, #36	; 0x24
   d41a0:	f001 fc8f 	bl	d5ac2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(lightSensorCharacteristic);
   d41a4:	f001 fbce 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41a8:	4a21      	ldr	r2, [pc, #132]	; (d4230 <setup+0xd0>)
   d41aa:	4601      	mov	r1, r0
   d41ac:	a809      	add	r0, sp, #36	; 0x24
   d41ae:	f002 f82b 	bl	d6208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d41b2:	a809      	add	r0, sp, #36	; 0x24
   d41b4:	f001 fc85 	bl	d5ac2 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(moistureSensorCharacteristic);
   d41b8:	f001 fbc4 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41bc:	4a1d      	ldr	r2, [pc, #116]	; (d4234 <setup+0xd4>)
   d41be:	4601      	mov	r1, r0
   d41c0:	a809      	add	r0, sp, #36	; 0x24
   d41c2:	f002 f821 	bl	d6208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d41c6:	a809      	add	r0, sp, #36	; 0x24
   d41c8:	f001 fc7b 	bl	d5ac2 <_ZN8particle17BleCharacteristicD1Ev>

    //data to be advertised
    BleAdvertisingData advData;
   d41cc:	a809      	add	r0, sp, #36	; 0x24
   d41ce:	f001 fa9f 	bl	d5710 <_ZN8particle18BleAdvertisingDataC1Ev>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d41d2:	4b19      	ldr	r3, [pc, #100]	; (d4238 <setup+0xd8>)
   d41d4:	a804      	add	r0, sp, #16
   d41d6:	6819      	ldr	r1, [r3, #0]
   d41d8:	f001 fa30 	bl	d563c <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41dc:	a804      	add	r0, sp, #16
   d41de:	f001 f979 	bl	d54d4 <_ZNK8particle7BleUuid4typeEv>
   d41e2:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d41e4:	a804      	add	r0, sp, #16
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d41e6:	b944      	cbnz	r4, d41fa <setup+0x9a>
            uint16_t uuid16 = tempUUID.shorted();
   d41e8:	f001 f992 	bl	d5510 <_ZNK8particle7BleUuid7shortedEv>
   d41ec:	aa12      	add	r2, sp, #72	; 0x48
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41ee:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d41f0:	f822 0d3a 	strh.w	r0, [r2, #-58]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d41f4:	2103      	movs	r1, #3
   d41f6:	9400      	str	r4, [sp, #0]
   d41f8:	e006      	b.n	d4208 <setup+0xa8>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d41fa:	f001 f98e 	bl	d551a <_ZNK8particle7BleUuid8rawBytesEv>
   d41fe:	2300      	movs	r3, #0
   d4200:	9300      	str	r3, [sp, #0]
   d4202:	4602      	mov	r2, r0
   d4204:	2310      	movs	r3, #16
   d4206:	2107      	movs	r1, #7
   d4208:	a809      	add	r0, sp, #36	; 0x24
   d420a:	f001 fa3a 	bl	d5682 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendServiceUUID(sensorNode1ServiceUuid);

    // Continuously advertise when not connected to clusterhead
    Log.info("Start advertising");
   d420e:	490b      	ldr	r1, [pc, #44]	; (d423c <setup+0xdc>)
   d4210:	480b      	ldr	r0, [pc, #44]	; (d4240 <setup+0xe0>)
   d4212:	f7ff ff8d 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    BLE.advertise(&advData);
   d4216:	f001 fb95 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d421a:	2200      	movs	r2, #0
   d421c:	a909      	add	r1, sp, #36	; 0x24
   d421e:	f001 fc0d 	bl	d5a3c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
    //Initialises rangefinder
    //rangefinder.init();
    //setup fan pin as PWM output
    //pinMode(fanSpeedPin, OUTPUT);

}
   d4222:	b012      	add	sp, #72	; 0x48
   d4224:	bd10      	pop	{r4, pc}
   d4226:	bf00      	nop
   d4228:	2003e32c 	.word	0x2003e32c
   d422c:	2003e364 	.word	0x2003e364
   d4230:	2003e318 	.word	0x2003e318
   d4234:	2003e338 	.word	0x2003e338
   d4238:	2003e288 	.word	0x2003e288
   d423c:	000d9604 	.word	0x000d9604
   d4240:	2003e3e8 	.word	0x2003e3e8

000d4244 <_Z15readTemperaturev>:
    // return std::chrono::duration_cast<std::chrono::microseconds>(std::chrono::system_clock::now().time_since_epoch()).count();
}

/* Read the temperature in degrees celcius
*/
int8_t readTemperature(){
   d4244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Read temperature as Celsius
	int8_t t = (int8_t) dht.getTempCelcius();   //Normally returns float
   d4246:	480b      	ldr	r0, [pc, #44]	; (d4274 <_Z15readTemperaturev+0x30>)
   d4248:	f000 fc36 	bl	d4ab8 <_ZN3DHT14getTempCelciusEv>
   d424c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    Log.info("Read temperature: %u", t);
   d4250:	4909      	ldr	r1, [pc, #36]	; (d4278 <_Z15readTemperaturev+0x34>)

/* Read the temperature in degrees celcius
*/
int8_t readTemperature(){
    // Read temperature as Celsius
	int8_t t = (int8_t) dht.getTempCelcius();   //Normally returns float
   d4252:	edcd 7a01 	vstr	s15, [sp, #4]
   d4256:	f99d 4004 	ldrsb.w	r4, [sp, #4]
    Log.info("Read temperature: %u", t);
   d425a:	4808      	ldr	r0, [pc, #32]	; (d427c <_Z15readTemperaturev+0x38>)
   d425c:	4622      	mov	r2, r4
   d425e:	f7ff ff67 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>

    //cloud data - can delete when not testing
	char str[2];
    sprintf(str, "%u", t);
   d4262:	4622      	mov	r2, r4
   d4264:	4906      	ldr	r1, [pc, #24]	; (d4280 <_Z15readTemperaturev+0x3c>)
   d4266:	a803      	add	r0, sp, #12
   d4268:	f000 ff48 	bl	d50fc <sprintf>
	//Particle.publish("temperature", str, PUBLIC);
	
	return t;
}
   d426c:	4620      	mov	r0, r4
   d426e:	b004      	add	sp, #16
   d4270:	bd10      	pop	{r4, pc}
   d4272:	bf00      	nop
   d4274:	2003e370 	.word	0x2003e370
   d4278:	000d9616 	.word	0x000d9616
   d427c:	2003e3e8 	.word	0x2003e3e8
   d4280:	000d9667 	.word	0x000d9667

000d4284 <_Z12readHumidityv>:

/* Read the humidity in % */
uint8_t readHumidity(){
   d4284:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    //Read Humidity
	uint8_t h = (uint8_t) dht.getHumidity(); //normally returns float, casted to uint16_t
   d4286:	480b      	ldr	r0, [pc, #44]	; (d42b4 <_Z12readHumidityv+0x30>)
   d4288:	f000 fc28 	bl	d4adc <_ZN3DHT11getHumidityEv>
   d428c:	eefc 7ac0 	vcvt.u32.f32	s15, s0
	Log.info("Read humidity: %u", h);
   d4290:	4909      	ldr	r1, [pc, #36]	; (d42b8 <_Z12readHumidityv+0x34>)
}

/* Read the humidity in % */
uint8_t readHumidity(){
    //Read Humidity
	uint8_t h = (uint8_t) dht.getHumidity(); //normally returns float, casted to uint16_t
   d4292:	edcd 7a01 	vstr	s15, [sp, #4]
   d4296:	f89d 4004 	ldrb.w	r4, [sp, #4]
	Log.info("Read humidity: %u", h);
   d429a:	4808      	ldr	r0, [pc, #32]	; (d42bc <_Z12readHumidityv+0x38>)
   d429c:	4622      	mov	r2, r4
   d429e:	f7ff ff47 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
	
    //cloud data - can delete when not testing
    char str[2];
    sprintf(str, "%u", h);
   d42a2:	4622      	mov	r2, r4
   d42a4:	4906      	ldr	r1, [pc, #24]	; (d42c0 <_Z12readHumidityv+0x3c>)
   d42a6:	a803      	add	r0, sp, #12
   d42a8:	f000 ff28 	bl	d50fc <sprintf>
	//Particle.publish("humidity", str, PUBLIC);

    return  h;
}
   d42ac:	4620      	mov	r0, r4
   d42ae:	b004      	add	sp, #16
   d42b0:	bd10      	pop	{r4, pc}
   d42b2:	bf00      	nop
   d42b4:	2003e370 	.word	0x2003e370
   d42b8:	000d962b 	.word	0x000d962b
   d42bc:	2003e3e8 	.word	0x2003e3e8
   d42c0:	000d9667 	.word	0x000d9667

000d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42c6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42c8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d42ca:	b17c      	cbz	r4, d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42cc:	6863      	ldr	r3, [r4, #4]
   d42ce:	3b01      	subs	r3, #1
   d42d0:	6063      	str	r3, [r4, #4]
   d42d2:	b95b      	cbnz	r3, d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d42d4:	6823      	ldr	r3, [r4, #0]
   d42d6:	4620      	mov	r0, r4
   d42d8:	689b      	ldr	r3, [r3, #8]
   d42da:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42dc:	68a3      	ldr	r3, [r4, #8]
   d42de:	3b01      	subs	r3, #1
   d42e0:	60a3      	str	r3, [r4, #8]
   d42e2:	b91b      	cbnz	r3, d42ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42e4:	6823      	ldr	r3, [r4, #0]
   d42e6:	4620      	mov	r0, r4
   d42e8:	68db      	ldr	r3, [r3, #12]
   d42ea:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d42ec:	4628      	mov	r0, r5
   d42ee:	bd38      	pop	{r3, r4, r5, pc}

000d42f0 <_Z9readLightv>:
}

/* Read the value on the light sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
uint16_t readLight(){
   d42f0:	b510      	push	{r4, lr}
    //do any transformation logic we might want
    uint16_t getL = analogRead(lightPin);
   d42f2:	2011      	movs	r0, #17
}

/* Read the value on the light sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
uint16_t readLight(){
   d42f4:	b086      	sub	sp, #24
    //do any transformation logic we might want
    uint16_t getL = analogRead(lightPin);
   d42f6:	f004 fa38 	bl	d876a <analogRead>
   d42fa:	b284      	uxth	r4, r0

    //cloud debug stuff - can delete after testing
	char str[2];
	sprintf(str, "%u", getL);
   d42fc:	4622      	mov	r2, r4
   d42fe:	491e      	ldr	r1, [pc, #120]	; (d4378 <_Z9readLightv+0x88>)
   d4300:	a803      	add	r0, sp, #12
   d4302:	f000 fefb 	bl	d50fc <sprintf>
   d4306:	4b1d      	ldr	r3, [pc, #116]	; (d437c <_Z9readLightv+0x8c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4308:	491d      	ldr	r1, [pc, #116]	; (d4380 <_Z9readLightv+0x90>)
   d430a:	781b      	ldrb	r3, [r3, #0]
   d430c:	f88d 3000 	strb.w	r3, [sp]
   d4310:	aa03      	add	r2, sp, #12
   d4312:	233c      	movs	r3, #60	; 0x3c
   d4314:	a804      	add	r0, sp, #16
   d4316:	f003 fb15 	bl	d7944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d431a:	a805      	add	r0, sp, #20
   d431c:	f7ff ffd2 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Particle.publish("light", str, PUBLIC);
    
    //convert to lux
	uint16_t lux =  (uint16_t) (getL - 1382.758621)/3.793103448 + 30;
   d4320:	4620      	mov	r0, r4
   d4322:	f004 fd37 	bl	d8d94 <__aeabi_i2d>
   d4326:	a310      	add	r3, pc, #64	; (adr r3, d4368 <_Z9readLightv+0x78>)
   d4328:	e9d3 2300 	ldrd	r2, r3, [r3]
   d432c:	f004 fbe4 	bl	d8af8 <__aeabi_dsub>
   d4330:	f004 ffa8 	bl	d9284 <__aeabi_d2uiz>
   d4334:	b280      	uxth	r0, r0
   d4336:	f004 fd2d 	bl	d8d94 <__aeabi_i2d>
   d433a:	a30d      	add	r3, pc, #52	; (adr r3, d4370 <_Z9readLightv+0x80>)
   d433c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4340:	f004 feb8 	bl	d90b4 <__aeabi_ddiv>
   d4344:	4b0f      	ldr	r3, [pc, #60]	; (d4384 <_Z9readLightv+0x94>)
   d4346:	2200      	movs	r2, #0
   d4348:	f004 fbd8 	bl	d8afc <__adddf3>
   d434c:	f004 ff9a 	bl	d9284 <__aeabi_d2uiz>
   d4350:	b284      	uxth	r4, r0
    Log.info("Read light: %u lux", lux);
   d4352:	4622      	mov	r2, r4
   d4354:	490c      	ldr	r1, [pc, #48]	; (d4388 <_Z9readLightv+0x98>)
   d4356:	480d      	ldr	r0, [pc, #52]	; (d438c <_Z9readLightv+0x9c>)
   d4358:	f7ff feea 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    return lux;
}
   d435c:	4620      	mov	r0, r4
   d435e:	b006      	add	sp, #24
   d4360:	bd10      	pop	{r4, pc}
   d4362:	bf00      	nop
   d4364:	f3af 8000 	nop.w
   d4368:	d3f1843c 	.word	0xd3f1843c
   d436c:	40959b08 	.word	0x40959b08
   d4370:	9edc09e8 	.word	0x9edc09e8
   d4374:	400e5846 	.word	0x400e5846
   d4378:	000d9667 	.word	0x000d9667
   d437c:	2003e314 	.word	0x2003e314
   d4380:	000d966a 	.word	0x000d966a
   d4384:	403e0000 	.word	0x403e0000
   d4388:	000d9670 	.word	0x000d9670
   d438c:	2003e3e8 	.word	0x2003e3e8

000d4390 <_Z12readMoisturev>:

/* Read the value on the moisture sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
uint16_t readMoisture(){
   d4390:	b510      	push	{r4, lr}
    //do any transformation logic we might want
    uint16_t getL = analogRead(moisturePin);
   d4392:	2012      	movs	r0, #18
}

/* Read the value on the moisture sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
uint16_t readMoisture(){
   d4394:	b086      	sub	sp, #24
    //do any transformation logic we might want
    uint16_t getL = analogRead(moisturePin);
   d4396:	f004 f9e8 	bl	d876a <analogRead>
   d439a:	b284      	uxth	r4, r0

    //cloud debug stuff - can delete after testing
	char str[2];
	sprintf(str, "%u", getL);
   d439c:	4622      	mov	r2, r4
   d439e:	491e      	ldr	r1, [pc, #120]	; (d4418 <_Z12readMoisturev+0x88>)
   d43a0:	a803      	add	r0, sp, #12
   d43a2:	f000 feab 	bl	d50fc <sprintf>
   d43a6:	4b1d      	ldr	r3, [pc, #116]	; (d441c <_Z12readMoisturev+0x8c>)
   d43a8:	491d      	ldr	r1, [pc, #116]	; (d4420 <_Z12readMoisturev+0x90>)
   d43aa:	781b      	ldrb	r3, [r3, #0]
   d43ac:	f88d 3000 	strb.w	r3, [sp]
   d43b0:	aa03      	add	r2, sp, #12
   d43b2:	233c      	movs	r3, #60	; 0x3c
   d43b4:	a804      	add	r0, sp, #16
   d43b6:	f003 fac5 	bl	d7944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d43ba:	a805      	add	r0, sp, #20
   d43bc:	f7ff ff82 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Particle.publish("moisture", str, PUBLIC);
    
    //convert to lux
	uint16_t lux =  (uint16_t) (getL - 1382.758621)/3.793103448 + 30;
   d43c0:	4620      	mov	r0, r4
   d43c2:	f004 fce7 	bl	d8d94 <__aeabi_i2d>
   d43c6:	a310      	add	r3, pc, #64	; (adr r3, d4408 <_Z12readMoisturev+0x78>)
   d43c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43cc:	f004 fb94 	bl	d8af8 <__aeabi_dsub>
   d43d0:	f004 ff58 	bl	d9284 <__aeabi_d2uiz>
   d43d4:	b280      	uxth	r0, r0
   d43d6:	f004 fcdd 	bl	d8d94 <__aeabi_i2d>
   d43da:	a30d      	add	r3, pc, #52	; (adr r3, d4410 <_Z12readMoisturev+0x80>)
   d43dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43e0:	f004 fe68 	bl	d90b4 <__aeabi_ddiv>
   d43e4:	4b0f      	ldr	r3, [pc, #60]	; (d4424 <_Z12readMoisturev+0x94>)
   d43e6:	2200      	movs	r2, #0
   d43e8:	f004 fb88 	bl	d8afc <__adddf3>
   d43ec:	f004 ff4a 	bl	d9284 <__aeabi_d2uiz>
   d43f0:	b284      	uxth	r4, r0
    Log.info("Read moisture: %u lux", lux);
   d43f2:	4622      	mov	r2, r4
   d43f4:	490c      	ldr	r1, [pc, #48]	; (d4428 <_Z12readMoisturev+0x98>)
   d43f6:	480d      	ldr	r0, [pc, #52]	; (d442c <_Z12readMoisturev+0x9c>)
   d43f8:	f7ff fe9a 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    return lux;
   d43fc:	4620      	mov	r0, r4
   d43fe:	b006      	add	sp, #24
   d4400:	bd10      	pop	{r4, pc}
   d4402:	bf00      	nop
   d4404:	f3af 8000 	nop.w
   d4408:	d3f1843c 	.word	0xd3f1843c
   d440c:	40959b08 	.word	0x40959b08
   d4410:	9edc09e8 	.word	0x9edc09e8
   d4414:	400e5846 	.word	0x400e5846
   d4418:	000d9667 	.word	0x000d9667
   d441c:	2003e314 	.word	0x2003e314
   d4420:	000d9683 	.word	0x000d9683
   d4424:	403e0000 	.word	0x403e0000
   d4428:	000d968c 	.word	0x000d968c
   d442c:	2003e3e8 	.word	0x2003e3e8

000d4430 <loop>:
    //setup fan pin as PWM output
    //pinMode(fanSpeedPin, OUTPUT);

}

void loop() {
   d4430:	b530      	push	{r4, r5, lr}
   d4432:	b08f      	sub	sp, #60	; 0x3c
    //only begin using sensors when this node has connected to a cluster head
    if(BLE.connected()){
   d4434:	f001 fa86 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4438:	f001 fb1d 	bl	d5a76 <_ZNK8particle14BleLocalDevice9connectedEv>
   d443c:	2800      	cmp	r0, #0
   d443e:	f000 8090 	beq.w	d4562 <loop+0x132>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4442:	f000 fbbd 	bl	d4bc0 <HAL_Timer_Get_Milli_Seconds>
           If it is, update "lastUpdate" time, then read and update the appropriate characteristic
           A change in the characteristic will notify the connected cluster head
        */

        //temperature and humidity
        if(currentTime - lastTemperatureUpdate >= TEMPERATURE_READ_DELAY){
   d4446:	4a4a      	ldr	r2, [pc, #296]	; (d4570 <loop+0x140>)
   d4448:	6813      	ldr	r3, [r2, #0]
   d444a:	1ac3      	subs	r3, r0, r3
   d444c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d4450:	4604      	mov	r4, r0
   d4452:	d315      	bcc.n	d4480 <loop+0x50>
            //reset read delay timer
            lastTemperatureUpdate = currentTime;
   d4454:	6010      	str	r0, [r2, #0]
            //read temp
            int8_t temp = readTemperature();
   d4456:	f7ff fef5 	bl	d4244 <_Z15readTemperaturev>
            */
            //2: returns the average to the clusterhead.
            //package together with send time in a buffer
            uint8_t* transmission[9];
            //memcpy(transmission, &tempAverage, sizeof(tempAverage));
            memcpy(transmission, &temp, sizeof(temp));
   d445a:	f88d 0010 	strb.w	r0, [sp, #16]
}
*/

/** Returns the current temperature in microseconds */
uint64_t getCurrentTime(){
    return Time.now();
   d445e:	f003 f865 	bl	d752c <_ZN9TimeClass3nowEv>
            //package together with send time in a buffer
            uint8_t* transmission[9];
            //memcpy(transmission, &tempAverage, sizeof(tempAverage));
            memcpy(transmission, &temp, sizeof(temp));
            //record and append the sending time
            uint64_t sendTime = getCurrentTime();
   d4462:	17c1      	asrs	r1, r0, #31
   d4464:	e9cd 0102 	strd	r0, r1, [sp, #8]
            //memcpy(transmission + sizeof(tempAverage), &sendTime, sizeof(sendTime));
            memcpy(transmission + sizeof(temp), &sendTime, sizeof(sendTime));
   d4468:	aa02      	add	r2, sp, #8
   d446a:	e892 0003 	ldmia.w	r2, {r0, r1}
   d446e:	ab05      	add	r3, sp, #20
   d4470:	e883 0003 	stmia.w	r3, {r0, r1}
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4474:	2224      	movs	r2, #36	; 0x24
   d4476:	2300      	movs	r3, #0
   d4478:	a904      	add	r1, sp, #16
   d447a:	483e      	ldr	r0, [pc, #248]	; (d4574 <loop+0x144>)
   d447c:	f001 f9b0 	bl	d57e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            }
            */
        }
        
        //light
        if(currentTime - lastLightUpdate >= LIGHT_READ_DELAY){
   d4480:	4a3d      	ldr	r2, [pc, #244]	; (d4578 <loop+0x148>)
   d4482:	6813      	ldr	r3, [r2, #0]
   d4484:	1ae3      	subs	r3, r4, r3
   d4486:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d448a:	d31b      	bcc.n	d44c4 <loop+0x94>
            lastLightUpdate = currentTime;
   d448c:	6014      	str	r4, [r2, #0]
            uint16_t getValue = readLight();
   d448e:	f7ff ff2f 	bl	d42f0 <_Z9readLightv>
   d4492:	4605      	mov	r5, r0

            //store data in buffer
            uint8_t* transmission[10];
            memcpy(transmission, &getValue, sizeof(getValue));
   d4494:	f8ad 0010 	strh.w	r0, [sp, #16]
}
*/

/** Returns the current temperature in microseconds */
uint64_t getCurrentTime(){
    return Time.now();
   d4498:	f003 f848 	bl	d752c <_ZN9TimeClass3nowEv>

            //store data in buffer
            uint8_t* transmission[10];
            memcpy(transmission, &getValue, sizeof(getValue));
            //record and append the sending time
            uint64_t sendTime = getCurrentTime();
   d449c:	17c1      	asrs	r1, r0, #31
   d449e:	e9cd 0102 	strd	r0, r1, [sp, #8]
            memcpy(transmission + sizeof(getValue), &sendTime, sizeof(sendTime));
   d44a2:	aa02      	add	r2, sp, #8
   d44a4:	e892 0003 	ldmia.w	r2, {r0, r1}
   d44a8:	ab06      	add	r3, sp, #24
   d44aa:	e883 0003 	stmia.w	r3, {r0, r1}
   d44ae:	2228      	movs	r2, #40	; 0x28
   d44b0:	a904      	add	r1, sp, #16
   d44b2:	2300      	movs	r3, #0
   d44b4:	4831      	ldr	r0, [pc, #196]	; (d457c <loop+0x14c>)
   d44b6:	f001 f993 	bl	d57e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

            lightSensorCharacteristic.setValue(transmission);
            Log.info("Light: %u", getValue);
   d44ba:	462a      	mov	r2, r5
   d44bc:	4930      	ldr	r1, [pc, #192]	; (d4580 <loop+0x150>)
   d44be:	4831      	ldr	r0, [pc, #196]	; (d4584 <loop+0x154>)
   d44c0:	f7ff fe36 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
        }
        
        //Moisture
        if(currentTime - lastMoistureUpdate >= MOISTURE_READ_DELAY){
   d44c4:	4a30      	ldr	r2, [pc, #192]	; (d4588 <loop+0x158>)
   d44c6:	6813      	ldr	r3, [r2, #0]
   d44c8:	1ae3      	subs	r3, r4, r3
   d44ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d44ce:	d31b      	bcc.n	d4508 <loop+0xd8>
            lastMoistureUpdate = currentTime;
   d44d0:	6014      	str	r4, [r2, #0]
            uint16_t getValue = readMoisture();
   d44d2:	f7ff ff5d 	bl	d4390 <_Z12readMoisturev>
   d44d6:	4605      	mov	r5, r0

            //store data in buffer
            uint8_t* transmission[10];
            memcpy(transmission, &getValue, sizeof(getValue));
   d44d8:	f8ad 0010 	strh.w	r0, [sp, #16]
}
*/

/** Returns the current temperature in microseconds */
uint64_t getCurrentTime(){
    return Time.now();
   d44dc:	f003 f826 	bl	d752c <_ZN9TimeClass3nowEv>

            //store data in buffer
            uint8_t* transmission[10];
            memcpy(transmission, &getValue, sizeof(getValue));
            //record and append the sending time
            uint64_t sendTime = getCurrentTime();
   d44e0:	17c1      	asrs	r1, r0, #31
   d44e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
            memcpy(transmission + sizeof(getValue), &sendTime, sizeof(sendTime));
   d44e6:	aa02      	add	r2, sp, #8
   d44e8:	e892 0003 	ldmia.w	r2, {r0, r1}
   d44ec:	ab06      	add	r3, sp, #24
   d44ee:	e883 0003 	stmia.w	r3, {r0, r1}
   d44f2:	2228      	movs	r2, #40	; 0x28
   d44f4:	a904      	add	r1, sp, #16
   d44f6:	2300      	movs	r3, #0
   d44f8:	4824      	ldr	r0, [pc, #144]	; (d458c <loop+0x15c>)
   d44fa:	f001 f971 	bl	d57e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

            moistureSensorCharacteristic.setValue(transmission);
            Log.info("moisture: %u", getValue);
   d44fe:	462a      	mov	r2, r5
   d4500:	4923      	ldr	r1, [pc, #140]	; (d4590 <loop+0x160>)
   d4502:	4820      	ldr	r0, [pc, #128]	; (d4584 <loop+0x154>)
   d4504:	f7ff fe14 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
        }
        //humidity
        if(currentTime - lastHumidityUpdate >= HUMIDITY_READ_DELAY){
   d4508:	4a22      	ldr	r2, [pc, #136]	; (d4594 <loop+0x164>)
   d450a:	6813      	ldr	r3, [r2, #0]
   d450c:	1ae3      	subs	r3, r4, r3
   d450e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d4512:	d322      	bcc.n	d455a <loop+0x12a>
           lastHumidityUpdate = currentTime;
   d4514:	6014      	str	r4, [r2, #0]
           uint8_t humidity = readHumidity();
   d4516:	f7ff feb5 	bl	d4284 <_Z12readHumidityv>
   d451a:	a90e      	add	r1, sp, #56	; 0x38
   d451c:	2201      	movs	r2, #1
   d451e:	f801 0d31 	strb.w	r0, [r1, #-49]!
   d4522:	2300      	movs	r3, #0
   d4524:	481c      	ldr	r0, [pc, #112]	; (d4598 <loop+0x168>)
   d4526:	f001 f95b 	bl	d57e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
                */
                //2: returns the average to the clusterhead.
                //package together with send time in a buffer
            uint8_t* transmission[9];
            //memcpy(transmission, &humidityAverage, sizeof(humidityAverage));.
            memcpy(transmission, &humidity, sizeof(humidity));
   d452a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d452e:	f88d 3010 	strb.w	r3, [sp, #16]
}
*/

/** Returns the current temperature in microseconds */
uint64_t getCurrentTime(){
    return Time.now();
   d4532:	f002 fffb 	bl	d752c <_ZN9TimeClass3nowEv>
            uint8_t* transmission[9];
            //memcpy(transmission, &humidityAverage, sizeof(humidityAverage));.
            memcpy(transmission, &humidity, sizeof(humidity));

            //record and append the sending time
            uint64_t sendTime = getCurrentTime();
   d4536:	17c1      	asrs	r1, r0, #31
   d4538:	e9cd 0102 	strd	r0, r1, [sp, #8]
            //memcpy(transmission + sizeof(humidityAverage), &sendTime, sizeof(sendTime));
            memcpy(transmission + sizeof(humidity), &sendTime, sizeof(sendTime));
   d453c:	aa02      	add	r2, sp, #8
   d453e:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4542:	ab05      	add	r3, sp, #20
   d4544:	e883 0003 	stmia.w	r3, {r0, r1}
   d4548:	2224      	movs	r2, #36	; 0x24
   d454a:	2300      	movs	r3, #0
   d454c:	a904      	add	r1, sp, #16
   d454e:	4812      	ldr	r0, [pc, #72]	; (d4598 <loop+0x168>)
   d4550:	f001 f946 	bl	d57e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

            //send bluetooth transmission
            humiditySensorCharacteristic.setValue(transmission);
            //resets humidityAssigned.
            humidityAssigned = 0;
   d4554:	4b11      	ldr	r3, [pc, #68]	; (d459c <loop+0x16c>)
   d4556:	2200      	movs	r2, #0
   d4558:	701a      	strb	r2, [r3, #0]
                humidityArray[humidityAssigned] = humidity;
                humidityAssigned++;
            }
                */
        }
        delay(100);
   d455a:	2064      	movs	r0, #100	; 0x64
   d455c:	f002 fff8 	bl	d7550 <delay>
   d4560:	e003      	b.n	d456a <loop+0x13a>
    }
    else{
        Log.info("not connected yet... ");
   d4562:	490f      	ldr	r1, [pc, #60]	; (d45a0 <loop+0x170>)
   d4564:	4807      	ldr	r0, [pc, #28]	; (d4584 <loop+0x154>)
   d4566:	f7ff fde3 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    }
}
   d456a:	b00f      	add	sp, #60	; 0x3c
   d456c:	bd30      	pop	{r4, r5, pc}
   d456e:	bf00      	nop
   d4570:	2003e36c 	.word	0x2003e36c
   d4574:	2003e32c 	.word	0x2003e32c
   d4578:	2003e310 	.word	0x2003e310
   d457c:	2003e318 	.word	0x2003e318
   d4580:	000d96a2 	.word	0x000d96a2
   d4584:	2003e3e8 	.word	0x2003e3e8
   d4588:	2003e30c 	.word	0x2003e30c
   d458c:	2003e338 	.word	0x2003e338
   d4590:	000d96ac 	.word	0x000d96ac
   d4594:	2003e384 	.word	0x2003e384
   d4598:	2003e364 	.word	0x2003e364
   d459c:	2003e334 	.word	0x2003e334
   d45a0:	000d96b9 	.word	0x000d96b9

000d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d45a4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d45a6:	6804      	ldr	r4, [r0, #0]
   d45a8:	6843      	ldr	r3, [r0, #4]
   d45aa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d45ac:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d45ae:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d45b2:	42a6      	cmp	r6, r4
   d45b4:	d004      	beq.n	d45c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d45b6:	4620      	mov	r0, r4
   d45b8:	f000 fe36 	bl	d5228 <_ZN6StringD1Ev>
   d45bc:	3414      	adds	r4, #20
   d45be:	e7f8      	b.n	d45b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d45c0:	6828      	ldr	r0, [r5, #0]
   d45c2:	f000 fd8b 	bl	d50dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d45c6:	4628      	mov	r0, r5
   d45c8:	bd70      	pop	{r4, r5, r6, pc}

000d45ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d45ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   d45cc:	460e      	mov	r6, r1
   d45ce:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d45d0:	2100      	movs	r1, #0
   d45d2:	4604      	mov	r4, r0
   d45d4:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d45d6:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d45d8:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d45da:	4619      	mov	r1, r3
   d45dc:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d45de:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d45e0:	f001 f82c 	bl	d563c <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d45e4:	9916      	ldr	r1, [sp, #88]	; 0x58
   d45e6:	4628      	mov	r0, r5
   d45e8:	f001 f828 	bl	d563c <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d45ec:	aa10      	add	r2, sp, #64	; 0x40
   d45ee:	783b      	ldrb	r3, [r7, #0]
   d45f0:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d45f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d45f6:	9302      	str	r3, [sp, #8]
   d45f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d45fa:	9301      	str	r3, [sp, #4]
   d45fc:	4620      	mov	r0, r4
   d45fe:	9500      	str	r5, [sp, #0]
   d4600:	ab06      	add	r3, sp, #24
   d4602:	4631      	mov	r1, r6
   d4604:	f001 fd4c 	bl	d60a0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d4608:	4620      	mov	r0, r4
   d460a:	b011      	add	sp, #68	; 0x44
   d460c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d460e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d460e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4612:	4606      	mov	r6, r0
   d4614:	460c      	mov	r4, r1
   d4616:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4618:	d916      	bls.n	d4648 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d461a:	4290      	cmp	r0, r2
   d461c:	d215      	bcs.n	d464a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d461e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4622:	1a6c      	subs	r4, r5, r1
   d4624:	f1a1 0714 	sub.w	r7, r1, #20
   d4628:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d462a:	42af      	cmp	r7, r5
   d462c:	d01c      	beq.n	d4668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d462e:	b12c      	cbz	r4, d463c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4630:	4629      	mov	r1, r5
   d4632:	4620      	mov	r0, r4
   d4634:	f000 fde8 	bl	d5208 <_ZN6StringC1EOS_>
   d4638:	7c2b      	ldrb	r3, [r5, #16]
   d463a:	7423      	strb	r3, [r4, #16]
   d463c:	4628      	mov	r0, r5
   d463e:	f000 fdf3 	bl	d5228 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4642:	3d14      	subs	r5, #20
   d4644:	3c14      	subs	r4, #20
   d4646:	e7f0      	b.n	d462a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4648:	d00e      	beq.n	d4668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d464a:	42ac      	cmp	r4, r5
   d464c:	d00c      	beq.n	d4668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d464e:	b12e      	cbz	r6, d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4650:	4621      	mov	r1, r4
   d4652:	4630      	mov	r0, r6
   d4654:	f000 fdd8 	bl	d5208 <_ZN6StringC1EOS_>
   d4658:	7c23      	ldrb	r3, [r4, #16]
   d465a:	7433      	strb	r3, [r6, #16]
   d465c:	4620      	mov	r0, r4
   d465e:	f000 fde3 	bl	d5228 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4662:	3414      	adds	r4, #20
   d4664:	3614      	adds	r6, #20
   d4666:	e7f0      	b.n	d464a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4668:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d466a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d466e:	2300      	movs	r3, #0
   d4670:	6003      	str	r3, [r0, #0]
   d4672:	6043      	str	r3, [r0, #4]
   d4674:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4676:	684e      	ldr	r6, [r1, #4]
   d4678:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d467a:	4604      	mov	r4, r0
   d467c:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d467e:	dd24      	ble.n	d46ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4680:	f04f 0814 	mov.w	r8, #20
   d4684:	fb08 f006 	mul.w	r0, r8, r6
   d4688:	f000 fd20 	bl	d50cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d468c:	4605      	mov	r5, r0
   d468e:	b1e0      	cbz	r0, d46ca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4690:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4694:	fb08 1202 	mla	r2, r8, r2, r1
   d4698:	f7ff ffb9 	bl	d460e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d469c:	6820      	ldr	r0, [r4, #0]
   d469e:	f000 fd1d 	bl	d50dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d46a2:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d46a4:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d46a6:	683e      	ldr	r6, [r7, #0]
   d46a8:	687b      	ldr	r3, [r7, #4]
   d46aa:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d46ae:	4546      	cmp	r6, r8
   d46b0:	d009      	beq.n	d46c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d46b2:	b12d      	cbz	r5, d46c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d46b4:	4631      	mov	r1, r6
   d46b6:	4628      	mov	r0, r5
   d46b8:	f000 fe1f 	bl	d52fa <_ZN6StringC1ERKS_>
   d46bc:	7c33      	ldrb	r3, [r6, #16]
   d46be:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d46c0:	3614      	adds	r6, #20
   d46c2:	3514      	adds	r5, #20
   d46c4:	e7f3      	b.n	d46ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d46c6:	687b      	ldr	r3, [r7, #4]
   d46c8:	6063      	str	r3, [r4, #4]
    }
}
   d46ca:	4620      	mov	r0, r4
   d46cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d46d0 <_GLOBAL__sub_I_dht>:
    
    //convert to lux
	uint16_t lux =  (uint16_t) (getL - 1382.758621)/3.793103448 + 30;
    Log.info("Read moisture: %u lux", lux);
    return lux;
   d46d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d46d4:	4b58      	ldr	r3, [pc, #352]	; (d4838 <_GLOBAL__sub_I_dht+0x168>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d46d6:	4e59      	ldr	r6, [pc, #356]	; (d483c <_GLOBAL__sub_I_dht+0x16c>)
 * Date: 20/05/2020
 */

DHT dht(D0);        //DHT for temperature/humidity 

SYSTEM_MODE(AUTOMATIC); //Put into Automatic mode so the argon can connect to the cloud
   d46d8:	4d59      	ldr	r5, [pc, #356]	; (d4840 <_GLOBAL__sub_I_dht+0x170>)
//duration in millis to wait between reads
const uint16_t TEMPERATURE_READ_DELAY = 1000;
unsigned long lastTemperatureUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* temperatureSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic temperatureSensorCharacteristic("temp",
   d46da:	f8df 91ac 	ldr.w	r9, [pc, #428]	; d4888 <_GLOBAL__sub_I_dht+0x1b8>
    
    //convert to lux
	uint16_t lux =  (uint16_t) (getL - 1382.758621)/3.793103448 + 30;
    Log.info("Read moisture: %u lux", lux);
    return lux;
   d46de:	b091      	sub	sp, #68	; 0x44
   d46e0:	2400      	movs	r4, #0
   d46e2:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d46e4:	f000 fa1c 	bl	d4b20 <HAL_Pin_Map>
 * Description: code to flash to the "sensor node 1" argon for assignment 2
 * Author: Tom Schwenke, Edward Ingle
 * Date: 20/05/2020
 */

DHT dht(D0);        //DHT for temperature/humidity 
   d46e8:	4621      	mov	r1, r4
   d46ea:	2206      	movs	r2, #6
   d46ec:	4855      	ldr	r0, [pc, #340]	; (d4844 <_GLOBAL__sub_I_dht+0x174>)
   d46ee:	f000 f90b 	bl	d4908 <_ZN3DHTC1Ehh>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d46f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d46f6:	8173      	strh	r3, [r6, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d46f8:	6034      	str	r4, [r6, #0]
   d46fa:	80b4      	strh	r4, [r6, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d46fc:	71b4      	strb	r4, [r6, #6]
   d46fe:	8134      	strh	r4, [r6, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4700:	2001      	movs	r0, #1
   d4702:	f000 fc2f 	bl	d4f64 <set_system_mode>

SYSTEM_MODE(AUTOMATIC); //Put into Automatic mode so the argon can connect to the cloud
   d4706:	462a      	mov	r2, r5
   d4708:	494f      	ldr	r1, [pc, #316]	; (d4848 <_GLOBAL__sub_I_dht+0x178>)
   d470a:	4630      	mov	r0, r6
   d470c:	f004 f884 	bl	d8818 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4710:	9404      	str	r4, [sp, #16]
   d4712:	9405      	str	r4, [sp, #20]
   d4714:	9406      	str	r4, [sp, #24]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4716:	f003 fb6f 	bl	d7df8 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d471a:	4e4c      	ldr	r6, [pc, #304]	; (d484c <_GLOBAL__sub_I_dht+0x17c>)
   d471c:	4680      	mov	r8, r0
   d471e:	a904      	add	r1, sp, #16
   d4720:	a807      	add	r0, sp, #28
   d4722:	f7ff ffa2 	bl	d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4726:	4637      	mov	r7, r6
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4728:	a907      	add	r1, sp, #28
   d472a:	a80a      	add	r0, sp, #40	; 0x28
   d472c:	f7ff ff9d 	bl	d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4730:	4b47      	ldr	r3, [pc, #284]	; (d4850 <_GLOBAL__sub_I_dht+0x180>)
   d4732:	f847 3b04 	str.w	r3, [r7], #4
   d4736:	a90a      	add	r1, sp, #40	; 0x28
   d4738:	a80d      	add	r0, sp, #52	; 0x34
   d473a:	f7ff ff96 	bl	d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d473e:	aa0d      	add	r2, sp, #52	; 0x34
   d4740:	2101      	movs	r1, #1
   d4742:	4638      	mov	r0, r7
   d4744:	f002 fb9b 	bl	d6e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4748:	a80d      	add	r0, sp, #52	; 0x34
   d474a:	f7ff ff2b 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d474e:	a80a      	add	r0, sp, #40	; 0x28
   d4750:	f7ff ff28 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4754:	4b3f      	ldr	r3, [pc, #252]	; (d4854 <_GLOBAL__sub_I_dht+0x184>)
   d4756:	6033      	str	r3, [r6, #0]
   d4758:	f8c6 8020 	str.w	r8, [r6, #32]
   d475c:	a807      	add	r0, sp, #28
   d475e:	f7ff ff21 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4762:	4b3d      	ldr	r3, [pc, #244]	; (d4858 <_GLOBAL__sub_I_dht+0x188>)
   d4764:	6033      	str	r3, [r6, #0]
        Serial.begin();
   d4766:	f003 fb47 	bl	d7df8 <_Z16_fetch_usbserialv>
   d476a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d476e:	f003 fb33 	bl	d7dd8 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4772:	f002 f82d 	bl	d67d0 <_ZN5spark10LogManager8instanceEv>
   d4776:	4631      	mov	r1, r6
   d4778:	f002 fb14 	bl	d6da4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d477c:	a804      	add	r0, sp, #16
   d477e:	f7ff ff11 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
//duration in millis to wait between reads
const uint16_t TEMPERATURE_READ_DELAY = 1000;
unsigned long lastTemperatureUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* temperatureSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic temperatureSensorCharacteristic("temp",
   d4782:	4f36      	ldr	r7, [pc, #216]	; (d485c <_GLOBAL__sub_I_dht+0x18c>)

DHT dht(D0);        //DHT for temperature/humidity 

SYSTEM_MODE(AUTOMATIC); //Put into Automatic mode so the argon can connect to the cloud

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4784:	4936      	ldr	r1, [pc, #216]	; (d4860 <_GLOBAL__sub_I_dht+0x190>)
   d4786:	462a      	mov	r2, r5
   d4788:	4630      	mov	r0, r6
   d478a:	f004 f845 	bl	d8818 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t TEMPERATURE_READ_DELAY = 1000;
unsigned long lastTemperatureUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* temperatureSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic temperatureSensorCharacteristic("temp",
   d478e:	9402      	str	r4, [sp, #8]
   d4790:	9401      	str	r4, [sp, #4]
   d4792:	683b      	ldr	r3, [r7, #0]
   d4794:	9300      	str	r3, [sp, #0]
   d4796:	4b33      	ldr	r3, [pc, #204]	; (d4864 <_GLOBAL__sub_I_dht+0x194>)
   d4798:	4e33      	ldr	r6, [pc, #204]	; (d4868 <_GLOBAL__sub_I_dht+0x198>)
   d479a:	681b      	ldr	r3, [r3, #0]
   d479c:	4933      	ldr	r1, [pc, #204]	; (d486c <_GLOBAL__sub_I_dht+0x19c>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d479e:	f04f 0810 	mov.w	r8, #16
   d47a2:	aa0d      	add	r2, sp, #52	; 0x34
   d47a4:	4648      	mov	r0, r9
   d47a6:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
   d47aa:	f7ff ff0e 	bl	d45ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d47ae:	462a      	mov	r2, r5
   d47b0:	4631      	mov	r1, r6
   d47b2:	4648      	mov	r0, r9
   d47b4:	f004 f830 	bl	d8818 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t HUMIDITY_READ_DELAY = 1000;
unsigned long lastHumidityUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* humiditySensorUuid("99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
BleCharacteristic humiditySensorCharacteristic("humid",
   d47b8:	9402      	str	r4, [sp, #8]
   d47ba:	9401      	str	r4, [sp, #4]
   d47bc:	683b      	ldr	r3, [r7, #0]
   d47be:	9300      	str	r3, [sp, #0]
   d47c0:	f8df 90c8 	ldr.w	r9, [pc, #200]	; d488c <_GLOBAL__sub_I_dht+0x1bc>
   d47c4:	4b2a      	ldr	r3, [pc, #168]	; (d4870 <_GLOBAL__sub_I_dht+0x1a0>)
   d47c6:	492b      	ldr	r1, [pc, #172]	; (d4874 <_GLOBAL__sub_I_dht+0x1a4>)
   d47c8:	681b      	ldr	r3, [r3, #0]
   d47ca:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
   d47ce:	aa0d      	add	r2, sp, #52	; 0x34
   d47d0:	4648      	mov	r0, r9
   d47d2:	f7ff fefa 	bl	d45ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d47d6:	462a      	mov	r2, r5
   d47d8:	4631      	mov	r1, r6
   d47da:	4648      	mov	r0, r9
   d47dc:	f004 f81c 	bl	d8818 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t LIGHT_READ_DELAY = 1000;
unsigned long lastLightUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* lightSensorUuid("ea5248a4-43cc-4198-a4aa-79200a750835");
BleCharacteristic lightSensorCharacteristic("light",
   d47e0:	9402      	str	r4, [sp, #8]
   d47e2:	9401      	str	r4, [sp, #4]
   d47e4:	683b      	ldr	r3, [r7, #0]
   d47e6:	9300      	str	r3, [sp, #0]
   d47e8:	f8df 90a4 	ldr.w	r9, [pc, #164]	; d4890 <_GLOBAL__sub_I_dht+0x1c0>
   d47ec:	4b22      	ldr	r3, [pc, #136]	; (d4878 <_GLOBAL__sub_I_dht+0x1a8>)
   d47ee:	4923      	ldr	r1, [pc, #140]	; (d487c <_GLOBAL__sub_I_dht+0x1ac>)
   d47f0:	681b      	ldr	r3, [r3, #0]
   d47f2:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
   d47f6:	aa0d      	add	r2, sp, #52	; 0x34
   d47f8:	4648      	mov	r0, r9
   d47fa:	f7ff fee6 	bl	d45ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d47fe:	462a      	mov	r2, r5
   d4800:	4631      	mov	r1, r6
   d4802:	4648      	mov	r0, r9
   d4804:	f004 f808 	bl	d8818 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t MOISTURE_READ_DELAY = 1000;
unsigned long lastMoistureUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* moistureSensorUuid("ea5248a4-43cc-4198-a4aa-79200a750835");
BleCharacteristic moistureSensorCharacteristic("moisture",
   d4808:	9402      	str	r4, [sp, #8]
   d480a:	9401      	str	r4, [sp, #4]
   d480c:	683b      	ldr	r3, [r7, #0]
   d480e:	9300      	str	r3, [sp, #0]
   d4810:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
   d4814:	4b1a      	ldr	r3, [pc, #104]	; (d4880 <_GLOBAL__sub_I_dht+0x1b0>)
   d4816:	f8df 807c 	ldr.w	r8, [pc, #124]	; d4894 <_GLOBAL__sub_I_dht+0x1c4>
   d481a:	681b      	ldr	r3, [r3, #0]
   d481c:	4919      	ldr	r1, [pc, #100]	; (d4884 <_GLOBAL__sub_I_dht+0x1b4>)
   d481e:	aa0d      	add	r2, sp, #52	; 0x34
   d4820:	4640      	mov	r0, r8
   d4822:	f7ff fed2 	bl	d45ca <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d4826:	462a      	mov	r2, r5
   d4828:	4631      	mov	r1, r6
   d482a:	4640      	mov	r0, r8
   d482c:	f003 fff4 	bl	d8818 <__aeabi_atexit>
    
    //convert to lux
	uint16_t lux =  (uint16_t) (getL - 1382.758621)/3.793103448 + 30;
    Log.info("Read moisture: %u lux", lux);
    return lux;
   d4830:	b011      	add	sp, #68	; 0x44
   d4832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4836:	bf00      	nop
   d4838:	2003e314 	.word	0x2003e314
   d483c:	2003e320 	.word	0x2003e320
   d4840:	2003e308 	.word	0x2003e308
   d4844:	2003e370 	.word	0x2003e370
   d4848:	000d40d7 	.word	0x000d40d7
   d484c:	2003e340 	.word	0x2003e340
   d4850:	000d95dc 	.word	0x000d95dc
   d4854:	000d9acc 	.word	0x000d9acc
   d4858:	000d95f4 	.word	0x000d95f4
   d485c:	2003e288 	.word	0x2003e288
   d4860:	000d40e9 	.word	0x000d40e9
   d4864:	2003e290 	.word	0x2003e290
   d4868:	000d5ac3 	.word	0x000d5ac3
   d486c:	000d96cf 	.word	0x000d96cf
   d4870:	2003e28c 	.word	0x2003e28c
   d4874:	000d96d4 	.word	0x000d96d4
   d4878:	2003e284 	.word	0x2003e284
   d487c:	000d966a 	.word	0x000d966a
   d4880:	2003e280 	.word	0x2003e280
   d4884:	000d9683 	.word	0x000d9683
   d4888:	2003e32c 	.word	0x2003e32c
   d488c:	2003e364 	.word	0x2003e364
   d4890:	2003e318 	.word	0x2003e318
   d4894:	2003e338 	.word	0x2003e338

000d4898 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d4898:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d489a:	6803      	ldr	r3, [r0, #0]
   d489c:	2b2f      	cmp	r3, #47	; 0x2f
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d489e:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d48a0:	d904      	bls.n	d48ac <nrf_gpio_pin_port_decode+0x14>
   d48a2:	4a07      	ldr	r2, [pc, #28]	; (d48c0 <nrf_gpio_pin_port_decode+0x28>)
   d48a4:	2100      	movs	r1, #0
   d48a6:	200a      	movs	r0, #10
   d48a8:	f000 fb2c 	bl	d4f04 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d48ac:	6823      	ldr	r3, [r4, #0]
   d48ae:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d48b0:	bf83      	ittte	hi
   d48b2:	f003 031f 	andhi.w	r3, r3, #31
   d48b6:	6023      	strhi	r3, [r4, #0]
        return NRF_P1;
   d48b8:	4802      	ldrhi	r0, [pc, #8]	; (d48c4 <nrf_gpio_pin_port_decode+0x2c>)
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
    {
        return NRF_P0;
   d48ba:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
        return NRF_P1;
    }
#endif
}
   d48be:	bd10      	pop	{r4, pc}
   d48c0:	000d4bb1 	.word	0x000d4bb1
   d48c4:	50000300 	.word	0x50000300

000d48c8 <nrf_gpio_pin_set>:
    }
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
   d48c8:	b507      	push	{r0, r1, r2, lr}
   d48ca:	ab02      	add	r3, sp, #8
   d48cc:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d48d0:	4618      	mov	r0, r3
   d48d2:	f7ff ffe1 	bl	d4898 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d48d6:	9a01      	ldr	r2, [sp, #4]
   d48d8:	2301      	movs	r3, #1
   d48da:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d48dc:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
}
   d48e0:	b003      	add	sp, #12
   d48e2:	f85d fb04 	ldr.w	pc, [sp], #4

000d48e6 <nrf_gpio_pin_read>:
    }
}


__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
   d48e6:	b507      	push	{r0, r1, r2, lr}
   d48e8:	ab02      	add	r3, sp, #8
   d48ea:	f843 0d04 	str.w	r0, [r3, #-4]!
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d48ee:	4618      	mov	r0, r3
   d48f0:	f7ff ffd2 	bl	d4898 <nrf_gpio_pin_port_decode>
}


__STATIC_INLINE uint32_t nrf_gpio_port_in_read(NRF_GPIO_Type const * p_reg)
{
    return p_reg->IN;
   d48f4:	f8d0 3510 	ldr.w	r3, [r0, #1296]	; 0x510

__STATIC_INLINE uint32_t nrf_gpio_pin_read(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);

    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   d48f8:	9801      	ldr	r0, [sp, #4]
   d48fa:	fa23 f000 	lsr.w	r0, r3, r0
}
   d48fe:	f000 0001 	and.w	r0, r0, #1
   d4902:	b003      	add	sp, #12
   d4904:	f85d fb04 	ldr.w	pc, [sp], #4

000d4908 <_ZN3DHTC1Ehh>:
#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
	_count = count;
   d4908:	7202      	strb	r2, [r0, #8]
	firstreading = true;
   d490a:	2201      	movs	r2, #1

#include "Grove_Temperature_And_Humidity_Sensor.h"

DHT::DHT(u8 pin, u8 count)
{
	_pin = pin;
   d490c:	7181      	strb	r1, [r0, #6]
	_count = count;
	firstreading = true;
   d490e:	7402      	strb	r2, [r0, #16]
}
   d4910:	4770      	bx	lr
	...

000d4914 <_ZN3DHT4readEv>:
	return NAN;
}


boolean DHT::read(void)
{
   d4914:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4918:	4604      	mov	r4, r0
   d491a:	f000 f951 	bl	d4bc0 <HAL_Timer_Get_Milli_Seconds>
	u32 currenttime;

// Check if sensor was read less than two seconds ago and return early
// to use last reading.
	currenttime = millis();
	if (currenttime < _lastreadtime)
   d491e:	68e3      	ldr	r3, [r4, #12]
   d4920:	4283      	cmp	r3, r0
	{
// ie there was a rollover
		_lastreadtime = 0;
   d4922:	bf84      	itt	hi
   d4924:	2300      	movhi	r3, #0
   d4926:	60e3      	strhi	r3, [r4, #12]
	}
	if (!firstreading && ((currenttime - _lastreadtime) < 2000)) {
   d4928:	7c23      	ldrb	r3, [r4, #16]
   d492a:	b933      	cbnz	r3, d493a <_ZN3DHT4readEv+0x26>
   d492c:	68e3      	ldr	r3, [r4, #12]
   d492e:	1ac0      	subs	r0, r0, r3
   d4930:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d4934:	d201      	bcs.n	d493a <_ZN3DHT4readEv+0x26>
		return true; // return last correct measurement
   d4936:	2001      	movs	r0, #1
   d4938:	e0a8      	b.n	d4a8c <_ZN3DHT4readEv+0x178>
//		delay(2000 - (currenttime - _lastreadtime));
	}
	firstreading = false;
   d493a:	2500      	movs	r5, #0

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d493c:	4e55      	ldr	r6, [pc, #340]	; (d4a94 <_ZN3DHT4readEv+0x180>)
   d493e:	7425      	strb	r5, [r4, #16]
   d4940:	f000 f93e 	bl	d4bc0 <HAL_Timer_Get_Milli_Seconds>
   d4944:	79a3      	ldrb	r3, [r4, #6]
   d4946:	6832      	ldr	r2, [r6, #0]
/*
	Serial.print("Currtime: "); Serial.print(currenttime);
	Serial.print(" Lasttime: "); Serial.print(_lastreadtime);
*/
	_lastreadtime = millis();
   d4948:	60e0      	str	r0, [r4, #12]
   d494a:	011b      	lsls	r3, r3, #4
   d494c:	18d1      	adds	r1, r2, r3

	data[0] = data[1] = data[2] = data[3] = data[4] = 0;
   d494e:	7125      	strb	r5, [r4, #4]
   d4950:	70e5      	strb	r5, [r4, #3]
   d4952:	70a5      	strb	r5, [r4, #2]
   d4954:	7065      	strb	r5, [r4, #1]
   d4956:	7025      	strb	r5, [r4, #0]
    nrf_gpio_pin_set(nrf_pin);
   d4958:	5cd0      	ldrb	r0, [r2, r3]
   d495a:	784b      	ldrb	r3, [r1, #1]
   d495c:	f003 031f 	and.w	r3, r3, #31
   d4960:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d4964:	f7ff ffb0 	bl	d48c8 <nrf_gpio_pin_set>

// pull the pin high and wait 250 milliseconds
	pinSetFast(_pin);
	delay(250);
   d4968:	20fa      	movs	r0, #250	; 0xfa
   d496a:	f002 fdf1 	bl	d7550 <delay>

// send begin signal
	pinMode(_pin, OUTPUT);
   d496e:	2101      	movs	r1, #1
   d4970:	79a0      	ldrb	r0, [r4, #6]
   d4972:	f003 fee9 	bl	d8748 <pinMode>
}

inline void pinResetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4976:	79a3      	ldrb	r3, [r4, #6]
   d4978:	6832      	ldr	r2, [r6, #0]
   d497a:	011b      	lsls	r3, r3, #4
   d497c:	18d1      	adds	r1, r2, r3
   d497e:	5cd2      	ldrb	r2, [r2, r3]
   d4980:	784b      	ldrb	r3, [r1, #1]
   d4982:	a802      	add	r0, sp, #8
   d4984:	f003 031f 	and.w	r3, r3, #31
   d4988:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   d498c:	f840 3d04 	str.w	r3, [r0, #-4]!
}


__STATIC_INLINE void nrf_gpio_pin_clear(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d4990:	f7ff ff82 	bl	d4898 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d4994:	9b01      	ldr	r3, [sp, #4]
   d4996:	f04f 0801 	mov.w	r8, #1
   d499a:	fa08 f303 	lsl.w	r3, r8, r3
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d499e:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
	pinResetFast(_pin);
	delay(20);
   d49a2:	2014      	movs	r0, #20
   d49a4:	f002 fdd4 	bl	d7550 <delay>
	noInterrupts();
   d49a8:	f003 fa4c 	bl	d7e44 <_Z12noInterruptsv>

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();

inline void pinSetFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d49ac:	79a3      	ldrb	r3, [r4, #6]
   d49ae:	6832      	ldr	r2, [r6, #0]
   d49b0:	011b      	lsls	r3, r3, #4
   d49b2:	18d1      	adds	r1, r2, r3
    nrf_gpio_pin_set(nrf_pin);
   d49b4:	5cd0      	ldrb	r0, [r2, r3]
   d49b6:	784b      	ldrb	r3, [r1, #1]
   d49b8:	f003 031f 	and.w	r3, r3, #31
   d49bc:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   d49c0:	f7ff ff82 	bl	d48c8 <nrf_gpio_pin_set>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d49c4:	2028      	movs	r0, #40	; 0x28
   d49c6:	f000 f8f3 	bl	d4bb0 <HAL_Delay_Microseconds>
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);
   d49ca:	4629      	mov	r1, r5
   d49cc:	79a0      	ldrb	r0, [r4, #6]
   d49ce:	f003 febb 	bl	d8748 <pinMode>

boolean DHT::read(void)
{
	u8 laststate = HIGH;
	u8 counter = 0;
	u8 j = 0, i;
   d49d2:	462f      	mov	r7, r5
}


boolean DHT::read(void)
{
	u8 laststate = HIGH;
   d49d4:	f04f 0b00 	mov.w	fp, #0
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d49d8:	79a3      	ldrb	r3, [r4, #6]
   d49da:	6832      	ldr	r2, [r6, #0]
   d49dc:	011b      	lsls	r3, r3, #4
   d49de:	18d1      	adds	r1, r2, r3
   d49e0:	f812 a003 	ldrb.w	sl, [r2, r3]
   d49e4:	784b      	ldrb	r3, [r1, #1]
   d49e6:	f003 031f 	and.w	r3, r3, #31
   d49ea:	ea43 1a4a 	orr.w	sl, r3, sl, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d49ee:	4650      	mov	r0, sl
   d49f0:	f7ff ff79 	bl	d48e6 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d49f4:	4650      	mov	r0, sl
   d49f6:	f7ff ff76 	bl	d48e6 <nrf_gpio_pin_read>
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
		counter = 0;
		while (pinReadFast(_pin) == laststate) {
   d49fa:	4580      	cmp	r8, r0
   d49fc:	fa5f f98b 	uxtb.w	r9, fp
   d4a00:	d108      	bne.n	d4a14 <_ZN3DHT4readEv+0x100>
   d4a02:	2001      	movs	r0, #1
   d4a04:	f10b 0b01 	add.w	fp, fp, #1
   d4a08:	f000 f8d2 	bl	d4bb0 <HAL_Delay_Microseconds>
			counter++;
			delayMicroseconds(1);
			if (counter == 255) {
   d4a0c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   d4a10:	d1e2      	bne.n	d49d8 <_ZN3DHT4readEv+0xc4>
   d4a12:	46d9      	mov	r9, fp
    nrf_gpio_pin_clear(nrf_pin);
}

inline int32_t pinReadFast(pin_t _pin)
{
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(PIN_MAP[_pin].gpio_port, PIN_MAP[_pin].gpio_pin);
   d4a14:	79a3      	ldrb	r3, [r4, #6]
   d4a16:	6832      	ldr	r2, [r6, #0]
   d4a18:	011b      	lsls	r3, r3, #4
   d4a1a:	18d1      	adds	r1, r2, r3
   d4a1c:	f812 8003 	ldrb.w	r8, [r2, r3]
   d4a20:	784b      	ldrb	r3, [r1, #1]
   d4a22:	f003 031f 	and.w	r3, r3, #31
   d4a26:	ea43 1848 	orr.w	r8, r3, r8, lsl #5
    // Dummy read is needed because peripherals run at 16 MHz while the CPU runs at 64 MHz.
    (void)nrf_gpio_pin_read(nrf_pin);
   d4a2a:	4640      	mov	r0, r8
   d4a2c:	f7ff ff5b 	bl	d48e6 <nrf_gpio_pin_read>
    return nrf_gpio_pin_read(nrf_pin);
   d4a30:	4640      	mov	r0, r8
   d4a32:	f7ff ff58 	bl	d48e6 <nrf_gpio_pin_read>
				break;
			}
		}
		laststate = pinReadFast(_pin);

		if (counter == 255) break;
   d4a36:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
			delayMicroseconds(1);
			if (counter == 255) {
				break;
			}
		}
		laststate = pinReadFast(_pin);
   d4a3a:	fa5f f880 	uxtb.w	r8, r0

		if (counter == 255) break;
   d4a3e:	d014      	beq.n	d4a6a <_ZN3DHT4readEv+0x156>

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
   d4a40:	2d03      	cmp	r5, #3
   d4a42:	d90e      	bls.n	d4a62 <_ZN3DHT4readEv+0x14e>
   d4a44:	07eb      	lsls	r3, r5, #31
   d4a46:	d40c      	bmi.n	d4a62 <_ZN3DHT4readEv+0x14e>
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4a48:	08fa      	lsrs	r2, r7, #3
			if (counter > _count)
				data[j/8] |= 1;
			j++;
   d4a4a:	3701      	adds	r7, #1
		if (counter == 255) break;

// ignore first 3 transitions,it's response signal
		if ((i >= 4) && (i%2 == 0)) {
// shove each bit into the storage bytes
			data[j/8] <<= 1;
   d4a4c:	5ca3      	ldrb	r3, [r4, r2]
   d4a4e:	005b      	lsls	r3, r3, #1
   d4a50:	b2db      	uxtb	r3, r3
   d4a52:	54a3      	strb	r3, [r4, r2]
			if (counter > _count)
   d4a54:	7a21      	ldrb	r1, [r4, #8]
   d4a56:	4549      	cmp	r1, r9
				data[j/8] |= 1;
   d4a58:	bf3c      	itt	cc
   d4a5a:	f043 0301 	orrcc.w	r3, r3, #1
   d4a5e:	54a3      	strbcc	r3, [r4, r2]
			j++;
   d4a60:	b2ff      	uxtb	r7, r7
	pinSetFast(_pin);
	delayMicroseconds(40);
	pinMode(_pin, INPUT);

// read high/low status
	for ( i=0; i< MAXTIMINGS; i++) {
   d4a62:	3501      	adds	r5, #1
   d4a64:	b2ed      	uxtb	r5, r5
   d4a66:	2d55      	cmp	r5, #85	; 0x55
   d4a68:	d1b4      	bne.n	d49d4 <_ZN3DHT4readEv+0xc0>
			j++;
		}

	}

	interrupts();
   d4a6a:	f003 f9ed 	bl	d7e48 <_Z10interruptsv>
	Serial.print(data[4], HEX); Serial.print(" =? ");
	Serial.println(data[0] + data[1] + data[2] + data[3], HEX);
*/

// Verify that the data is correct
	if ((j >= 40) &&
   d4a6e:	2f27      	cmp	r7, #39	; 0x27
   d4a70:	d90b      	bls.n	d4a8a <_ZN3DHT4readEv+0x176>
   d4a72:	7822      	ldrb	r2, [r4, #0]
   d4a74:	7863      	ldrb	r3, [r4, #1]
   d4a76:	7921      	ldrb	r1, [r4, #4]
   d4a78:	4413      	add	r3, r2
   d4a7a:	78a2      	ldrb	r2, [r4, #2]
   d4a7c:	4413      	add	r3, r2
   d4a7e:	78e2      	ldrb	r2, [r4, #3]
   d4a80:	4413      	add	r3, r2
   d4a82:	b2db      	uxtb	r3, r3
   d4a84:	4299      	cmp	r1, r3
   d4a86:	f43f af56 	beq.w	d4936 <_ZN3DHT4readEv+0x22>
	   (data[4] == ((data[0] + data[1] + data[2] + data[3]) & 0xFF)) ) {
		return true;
	}

	return false;
   d4a8a:	2000      	movs	r0, #0

}
   d4a8c:	b003      	add	sp, #12
   d4a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a92:	bf00      	nop
   d4a94:	2003e388 	.word	0x2003e388

000d4a98 <_ZN3DHT15readTemperatureEv>:
	pinSetFast(_pin);
	_lastreadtime = 0;
}

float DHT::readTemperature()
{
   d4a98:	b510      	push	{r4, lr}
   d4a9a:	4604      	mov	r4, r0
	float f;

	if (read())
   d4a9c:	f7ff ff3a 	bl	d4914 <_ZN3DHT4readEv>
   d4aa0:	b128      	cbz	r0, d4aae <_ZN3DHT15readTemperatureEv+0x16>
	{
		f = data[2];
   d4aa2:	78a3      	ldrb	r3, [r4, #2]
   d4aa4:	ee00 3a10 	vmov	s0, r3
   d4aa8:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4aac:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4aae:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ab4 <_ZN3DHT15readTemperatureEv+0x1c>
}
   d4ab2:	bd10      	pop	{r4, pc}
   d4ab4:	7fc00000 	.word	0x7fc00000

000d4ab8 <_ZN3DHT14getTempCelciusEv>:
	return readHumidity();
}

float DHT::getTempCelcius()
{
	return readTemperature();
   d4ab8:	f7ff bfee 	b.w	d4a98 <_ZN3DHT15readTemperatureEv>

000d4abc <_ZN3DHT12readHumidityEv>:
{
	return c * 9 / 5 + 32;
}

float DHT::readHumidity(void)
{
   d4abc:	b510      	push	{r4, lr}
   d4abe:	4604      	mov	r4, r0
	float f;

	if (read())
   d4ac0:	f7ff ff28 	bl	d4914 <_ZN3DHT4readEv>
   d4ac4:	b128      	cbz	r0, d4ad2 <_ZN3DHT12readHumidityEv+0x16>
	{
		f = data[0];
   d4ac6:	7823      	ldrb	r3, [r4, #0]
   d4ac8:	ee00 3a10 	vmov	s0, r3
   d4acc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
		return f;
   d4ad0:	bd10      	pop	{r4, pc}
	}
	return NAN;
   d4ad2:	ed9f 0a01 	vldr	s0, [pc, #4]	; d4ad8 <_ZN3DHT12readHumidityEv+0x1c>
}
   d4ad6:	bd10      	pop	{r4, pc}
   d4ad8:	7fc00000 	.word	0x7fc00000

000d4adc <_ZN3DHT11getHumidityEv>:
	return NAN;
}

float DHT::getHumidity()
{
	return readHumidity();
   d4adc:	f7ff bfee 	b.w	d4abc <_ZN3DHT12readHumidityEv>

000d4ae0 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d4ae0:	b508      	push	{r3, lr}

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4ae2:	f000 f81d 	bl	d4b20 <HAL_Pin_Map>
   d4ae6:	4b01      	ldr	r3, [pc, #4]	; (d4aec <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d4ae8:	6018      	str	r0, [r3, #0]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	2003e388 	.word	0x2003e388

000d4af0 <_GLOBAL__sub_I__ZN7HC_SR04C2Eii>:
                return 0;
            }
        }
        return duration;
    }
}
   d4af0:	b508      	push	{r3, lr}
   d4af2:	f000 f815 	bl	d4b20 <HAL_Pin_Map>
   d4af6:	4b01      	ldr	r3, [pc, #4]	; (d4afc <_GLOBAL__sub_I__ZN7HC_SR04C2Eii+0xc>)
   d4af8:	6018      	str	r0, [r3, #0]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	2003e38c 	.word	0x2003e38c

000d4b00 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <netdb_freeaddrinfo+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	689b      	ldr	r3, [r3, #8]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030268 	.word	0x00030268

000d4b10 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <netdb_getaddrinfo+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	68db      	ldr	r3, [r3, #12]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030268 	.word	0x00030268

000d4b20 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_Pin_Map+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	681b      	ldr	r3, [r3, #0]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003022c 	.word	0x0003022c

000d4b30 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_Validate_Pin_Function+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	685b      	ldr	r3, [r3, #4]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003022c 	.word	0x0003022c

000d4b40 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <HAL_Pin_Mode+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	689b      	ldr	r3, [r3, #8]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003022c 	.word	0x0003022c

000d4b50 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <HAL_Interrupts_Enable_All+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	6a1b      	ldr	r3, [r3, #32]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003022c 	.word	0x0003022c

000d4b60 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <HAL_Interrupts_Disable_All+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003022c 	.word	0x0003022c

000d4b70 <HAL_ADC_Read>:

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <HAL_ADC_Read+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003022c 	.word	0x0003022c

000d4b80 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <HAL_SPI_Init+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	69db      	ldr	r3, [r3, #28]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030230 	.word	0x00030230

000d4b90 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <HAL_SPI_Is_Enabled+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	6a1b      	ldr	r3, [r3, #32]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030230 	.word	0x00030230

000d4ba0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <HAL_RNG_GetRandomNumber+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	685b      	ldr	r3, [r3, #4]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030218 	.word	0x00030218

000d4bb0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <HAL_Delay_Microseconds+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	68db      	ldr	r3, [r3, #12]
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030218 	.word	0x00030218

000d4bc0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	695b      	ldr	r3, [r3, #20]
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030218 	.word	0x00030218

000d4bd0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <HAL_RTC_Get_UnixTime+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	69db      	ldr	r3, [r3, #28]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030218 	.word	0x00030218

000d4be0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <HAL_RTC_Time_Is_Valid+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	00030218 	.word	0x00030218

000d4bf0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <hal_ble_stack_init+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	689b      	ldr	r3, [r3, #8]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	00030278 	.word	0x00030278

000d4c00 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <hal_ble_gap_set_advertising_data+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	00030278 	.word	0x00030278

000d4c10 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <hal_ble_gap_set_scan_response_data+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	00030278 	.word	0x00030278

000d4c20 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <hal_ble_gap_start_advertising+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	00030278 	.word	0x00030278

000d4c30 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b03      	ldr	r3, [pc, #12]	; (d4c40 <hal_ble_gap_disconnect+0x10>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4c3a:	9301      	str	r3, [sp, #4]
   d4c3c:	bd08      	pop	{r3, pc}
   d4c3e:	0000      	.short	0x0000
   d4c40:	00030278 	.word	0x00030278

000d4c44 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4c44:	b508      	push	{r3, lr}
   d4c46:	4b03      	ldr	r3, [pc, #12]	; (d4c54 <hal_ble_gatt_server_add_service+0x10>)
   d4c48:	681b      	ldr	r3, [r3, #0]
   d4c4a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4c4e:	9301      	str	r3, [sp, #4]
   d4c50:	bd08      	pop	{r3, pc}
   d4c52:	0000      	.short	0x0000
   d4c54:	00030278 	.word	0x00030278

000d4c58 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b03      	ldr	r3, [pc, #12]	; (d4c68 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4c62:	9301      	str	r3, [sp, #4]
   d4c64:	bd08      	pop	{r3, pc}
   d4c66:	0000      	.short	0x0000
   d4c68:	00030278 	.word	0x00030278

000d4c6c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b03      	ldr	r3, [pc, #12]	; (d4c7c <hal_ble_gatt_client_write_with_response+0x10>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4c76:	9301      	str	r3, [sp, #4]
   d4c78:	bd08      	pop	{r3, pc}
   d4c7a:	0000      	.short	0x0000
   d4c7c:	00030278 	.word	0x00030278

000d4c80 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b03      	ldr	r3, [pc, #12]	; (d4c90 <hal_ble_gatt_client_write_without_response+0x10>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4c8a:	9301      	str	r3, [sp, #4]
   d4c8c:	bd08      	pop	{r3, pc}
   d4c8e:	0000      	.short	0x0000
   d4c90:	00030278 	.word	0x00030278

000d4c94 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4c94:	b508      	push	{r3, lr}
   d4c96:	4b03      	ldr	r3, [pc, #12]	; (d4ca4 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4c98:	681b      	ldr	r3, [r3, #0]
   d4c9a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4c9e:	9301      	str	r3, [sp, #4]
   d4ca0:	bd08      	pop	{r3, pc}
   d4ca2:	0000      	.short	0x0000
   d4ca4:	00030278 	.word	0x00030278

000d4ca8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b03      	ldr	r3, [pc, #12]	; (d4cb8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4cb2:	9301      	str	r3, [sp, #4]
   d4cb4:	bd08      	pop	{r3, pc}
   d4cb6:	0000      	.short	0x0000
   d4cb8:	00030278 	.word	0x00030278

000d4cbc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b03      	ldr	r3, [pc, #12]	; (d4ccc <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d4cc6:	9301      	str	r3, [sp, #4]
   d4cc8:	bd08      	pop	{r3, pc}
   d4cca:	0000      	.short	0x0000
   d4ccc:	00030278 	.word	0x00030278

000d4cd0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b03      	ldr	r3, [pc, #12]	; (d4ce0 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4cda:	9301      	str	r3, [sp, #4]
   d4cdc:	bd08      	pop	{r3, pc}
   d4cde:	0000      	.short	0x0000
   d4ce0:	00030278 	.word	0x00030278

000d4ce4 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <os_thread_is_current+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	689b      	ldr	r3, [r3, #8]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030248 	.word	0x00030248

000d4cf4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <os_thread_join+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	691b      	ldr	r3, [r3, #16]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030248 	.word	0x00030248

000d4d04 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <os_thread_cleanup+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	695b      	ldr	r3, [r3, #20]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030248 	.word	0x00030248

000d4d14 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <os_mutex_recursive_create+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030248 	.word	0x00030248

000d4d24 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <os_mutex_recursive_destroy+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030248 	.word	0x00030248

000d4d34 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <os_mutex_recursive_lock+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030248 	.word	0x00030248

000d4d44 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <os_mutex_recursive_unlock+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030248 	.word	0x00030248

000d4d54 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <inet_inet_ntop+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	695b      	ldr	r3, [r3, #20]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030264 	.word	0x00030264

000d4d64 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <HAL_USART_Init+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	681b      	ldr	r3, [r3, #0]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	0003023c 	.word	0x0003023c

000d4d74 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <HAL_USART_End+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	689b      	ldr	r3, [r3, #8]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	0003023c 	.word	0x0003023c

000d4d84 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <HAL_USART_Write_Data+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	68db      	ldr	r3, [r3, #12]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	0003023c 	.word	0x0003023c

000d4d94 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <HAL_USART_Available_Data+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	691b      	ldr	r3, [r3, #16]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	0003023c 	.word	0x0003023c

000d4da4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <HAL_USART_Read_Data+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	695b      	ldr	r3, [r3, #20]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	0003023c 	.word	0x0003023c

000d4db4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <HAL_USART_Peek_Data+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	699b      	ldr	r3, [r3, #24]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	0003023c 	.word	0x0003023c

000d4dc4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <HAL_USART_Flush_Data+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	69db      	ldr	r3, [r3, #28]
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	0003023c 	.word	0x0003023c

000d4dd4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <HAL_USART_Is_Enabled+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6a1b      	ldr	r3, [r3, #32]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	0003023c 	.word	0x0003023c

000d4de4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003023c 	.word	0x0003023c

000d4df4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <HAL_USART_BeginConfig+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	0003023c 	.word	0x0003023c

000d4e04 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_I2C_Write_Data+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6a1b      	ldr	r3, [r3, #32]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030228 	.word	0x00030228

000d4e14 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_I2C_Available_Data+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030228 	.word	0x00030228

000d4e24 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_I2C_Read_Data+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030228 	.word	0x00030228

000d4e34 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_I2C_Peek_Data+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030228 	.word	0x00030228

000d4e44 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_I2C_Flush_Data+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030228 	.word	0x00030228

000d4e54 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_I2C_Is_Enabled+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030228 	.word	0x00030228

000d4e64 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_I2C_Init+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	00030228 	.word	0x00030228

000d4e74 <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <dct_write_app_data+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	685b      	ldr	r3, [r3, #4]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030258 	.word	0x00030258

000d4e84 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_USB_USART_Init+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	681b      	ldr	r3, [r3, #0]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003024c 	.word	0x0003024c

000d4e94 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_USB_USART_Begin+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	685b      	ldr	r3, [r3, #4]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	0003024c 	.word	0x0003024c

000d4ea4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_USB_USART_End+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	689b      	ldr	r3, [r3, #8]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	0003024c 	.word	0x0003024c

000d4eb4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_USB_USART_Available_Data+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	691b      	ldr	r3, [r3, #16]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	0003024c 	.word	0x0003024c

000d4ec4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	695b      	ldr	r3, [r3, #20]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	0003024c 	.word	0x0003024c

000d4ed4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_USB_USART_Receive_Data+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	699b      	ldr	r3, [r3, #24]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	0003024c 	.word	0x0003024c

000d4ee4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_USB_USART_Send_Data+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	69db      	ldr	r3, [r3, #28]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	0003024c 	.word	0x0003024c

000d4ef4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_USB_USART_Flush_Data+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6a1b      	ldr	r3, [r3, #32]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003024c 	.word	0x0003024c

000d4f04 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <panic_+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030260 	.word	0x00030260

000d4f14 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <log_message+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030260 	.word	0x00030260

000d4f24 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <log_message_v+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030260 	.word	0x00030260

000d4f34 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <log_level_name+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030260 	.word	0x00030260

000d4f44 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <log_set_callbacks+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030260 	.word	0x00030260

000d4f54 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <system_mode+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	681b      	ldr	r3, [r3, #0]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030220 	.word	0x00030220

000d4f64 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <set_system_mode+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	685b      	ldr	r3, [r3, #4]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030220 	.word	0x00030220

000d4f74 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <system_delay_ms+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	695b      	ldr	r3, [r3, #20]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030220 	.word	0x00030220

000d4f84 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <application_thread_current+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030220 	.word	0x00030220

000d4f94 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <application_thread_invoke+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030220 	.word	0x00030220

000d4fa4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <system_thread_get_state+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030220 	.word	0x00030220

000d4fb4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b03      	ldr	r3, [pc, #12]	; (d4fc4 <system_ctrl_set_app_request_handler+0x10>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4fbe:	9301      	str	r3, [sp, #4]
   d4fc0:	bd08      	pop	{r3, pc}
   d4fc2:	0000      	.short	0x0000
   d4fc4:	00030220 	.word	0x00030220

000d4fc8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b03      	ldr	r3, [pc, #12]	; (d4fd8 <system_ctrl_set_result+0x10>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4fd2:	9301      	str	r3, [sp, #4]
   d4fd4:	bd08      	pop	{r3, pc}
   d4fd6:	0000      	.short	0x0000
   d4fd8:	00030220 	.word	0x00030220

000d4fdc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <network_connect+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	685b      	ldr	r3, [r3, #4]
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030240 	.word	0x00030240

000d4fec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <network_connecting+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	689b      	ldr	r3, [r3, #8]
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030240 	.word	0x00030240

000d4ffc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <network_disconnect+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	68db      	ldr	r3, [r3, #12]
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030240 	.word	0x00030240

000d500c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <network_ready+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	691b      	ldr	r3, [r3, #16]
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030240 	.word	0x00030240

000d501c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <network_on+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	695b      	ldr	r3, [r3, #20]
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030240 	.word	0x00030240

000d502c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <network_off+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	699b      	ldr	r3, [r3, #24]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030240 	.word	0x00030240

000d503c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <network_listen+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	69db      	ldr	r3, [r3, #28]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030240 	.word	0x00030240

000d504c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <network_listening+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6a1b      	ldr	r3, [r3, #32]
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030240 	.word	0x00030240

000d505c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <network_set_listen_timeout+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	00030240 	.word	0x00030240

000d506c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <network_get_listen_timeout+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	00030240 	.word	0x00030240

000d507c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <spark_process+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	689b      	ldr	r3, [r3, #8]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	00030244 	.word	0x00030244

000d508c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <spark_cloud_flag_connected+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	695b      	ldr	r3, [r3, #20]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	00030244 	.word	0x00030244

000d509c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <spark_send_event+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	6a1b      	ldr	r3, [r3, #32]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	00030244 	.word	0x00030244

000d50ac <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <spark_sync_time_pending+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	00030244 	.word	0x00030244

000d50bc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	00030244 	.word	0x00030244

000d50cc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <malloc+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	681b      	ldr	r3, [r3, #0]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	0003021c 	.word	0x0003021c

000d50dc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <free+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	685b      	ldr	r3, [r3, #4]
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	0003021c 	.word	0x0003021c

000d50ec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <realloc+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	689b      	ldr	r3, [r3, #8]
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	0003021c 	.word	0x0003021c

000d50fc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <sprintf+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	68db      	ldr	r3, [r3, #12]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	0003021c 	.word	0x0003021c

000d510c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <vsnprintf+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	0003021c 	.word	0x0003021c

000d511c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <abort+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	0003021c 	.word	0x0003021c

000d512c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <_malloc_r+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	0003021c 	.word	0x0003021c

000d513c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d513c:	2200      	movs	r2, #0
   d513e:	4611      	mov	r1, r2
   d5140:	6840      	ldr	r0, [r0, #4]
   d5142:	f7ff bf83 	b.w	d504c <network_listening>

000d5146 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5146:	2200      	movs	r2, #0
   d5148:	4611      	mov	r1, r2
   d514a:	6840      	ldr	r0, [r0, #4]
   d514c:	f7ff bf8e 	b.w	d506c <network_get_listen_timeout>

000d5150 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5150:	2200      	movs	r2, #0
   d5152:	6840      	ldr	r0, [r0, #4]
   d5154:	f7ff bf82 	b.w	d505c <network_set_listen_timeout>

000d5158 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5158:	2200      	movs	r2, #0
   d515a:	f081 0101 	eor.w	r1, r1, #1
   d515e:	6840      	ldr	r0, [r0, #4]
   d5160:	f7ff bf6c 	b.w	d503c <network_listen>

000d5164 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5164:	2300      	movs	r3, #0
   d5166:	461a      	mov	r2, r3
   d5168:	4619      	mov	r1, r3
   d516a:	6840      	ldr	r0, [r0, #4]
   d516c:	f7ff bf5e 	b.w	d502c <network_off>

000d5170 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5170:	2300      	movs	r3, #0
   d5172:	461a      	mov	r2, r3
   d5174:	4619      	mov	r1, r3
   d5176:	6840      	ldr	r0, [r0, #4]
   d5178:	f7ff bf50 	b.w	d501c <network_on>

000d517c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d517c:	2200      	movs	r2, #0
   d517e:	4611      	mov	r1, r2
   d5180:	6840      	ldr	r0, [r0, #4]
   d5182:	f7ff bf43 	b.w	d500c <network_ready>

000d5186 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5186:	2200      	movs	r2, #0
   d5188:	4611      	mov	r1, r2
   d518a:	6840      	ldr	r0, [r0, #4]
   d518c:	f7ff bf2e 	b.w	d4fec <network_connecting>

000d5190 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5190:	2200      	movs	r2, #0
   d5192:	2102      	movs	r1, #2
   d5194:	6840      	ldr	r0, [r0, #4]
   d5196:	f7ff bf31 	b.w	d4ffc <network_disconnect>

000d519a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d519a:	2300      	movs	r3, #0
   d519c:	461a      	mov	r2, r3
   d519e:	6840      	ldr	r0, [r0, #4]
   d51a0:	f7ff bf1c 	b.w	d4fdc <network_connect>

000d51a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d51a4:	4b02      	ldr	r3, [pc, #8]	; (d51b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d51a6:	2203      	movs	r2, #3
   d51a8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d51aa:	4a02      	ldr	r2, [pc, #8]	; (d51b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d51ac:	601a      	str	r2, [r3, #0]
   d51ae:	4770      	bx	lr
   d51b0:	2003e390 	.word	0x2003e390
   d51b4:	000d9778 	.word	0x000d9778

000d51b8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d51b8:	b510      	push	{r4, lr}
   d51ba:	4604      	mov	r4, r0
{
    _spi = spi;
   d51bc:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d51be:	4608      	mov	r0, r1
   d51c0:	f7ff fcde 	bl	d4b80 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d51c4:	2300      	movs	r3, #0
   d51c6:	6063      	str	r3, [r4, #4]
}
   d51c8:	4620      	mov	r0, r4
   d51ca:	bd10      	pop	{r4, pc}

000d51cc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d51cc:	7800      	ldrb	r0, [r0, #0]
   d51ce:	f7ff bcdf 	b.w	d4b90 <HAL_SPI_Is_Enabled>
	...

000d51d4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d51d4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d51d6:	4c09      	ldr	r4, [pc, #36]	; (d51fc <_GLOBAL__sub_I_System+0x28>)
   d51d8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d51da:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d51de:	6020      	str	r0, [r4, #0]
   d51e0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d51e2:	71a0      	strb	r0, [r4, #6]
   d51e4:	8120      	strh	r0, [r4, #8]
   d51e6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d51e8:	f7ff febc 	bl	d4f64 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d51ec:	4620      	mov	r0, r4
   d51ee:	4a04      	ldr	r2, [pc, #16]	; (d5200 <_GLOBAL__sub_I_System+0x2c>)
   d51f0:	4904      	ldr	r1, [pc, #16]	; (d5204 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d51f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d51f6:	f003 bb0f 	b.w	d8818 <__aeabi_atexit>
   d51fa:	bf00      	nop
   d51fc:	2003e398 	.word	0x2003e398
   d5200:	2003e308 	.word	0x2003e308
   d5204:	000d40d7 	.word	0x000d40d7

000d5208 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5208:	2300      	movs	r3, #0
   d520a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d520c:	6043      	str	r3, [r0, #4]
	len = 0;
   d520e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5210:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d5212:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d5214:	680c      	ldr	r4, [r1, #0]
   d5216:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d5218:	684c      	ldr	r4, [r1, #4]
   d521a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d521c:	688c      	ldr	r4, [r1, #8]
   d521e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d5220:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d5222:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5224:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d5226:	bd10      	pop	{r4, pc}

000d5228 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5228:	b510      	push	{r4, lr}
   d522a:	4604      	mov	r4, r0
{
	free(buffer);
   d522c:	6800      	ldr	r0, [r0, #0]
   d522e:	f7ff ff55 	bl	d50dc <free>
}
   d5232:	4620      	mov	r0, r4
   d5234:	bd10      	pop	{r4, pc}

000d5236 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5236:	b510      	push	{r4, lr}
   d5238:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d523a:	6800      	ldr	r0, [r0, #0]
   d523c:	b108      	cbz	r0, d5242 <_ZN6String10invalidateEv+0xc>
   d523e:	f7ff ff4d 	bl	d50dc <free>
	buffer = NULL;
   d5242:	2300      	movs	r3, #0
   d5244:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5246:	60a3      	str	r3, [r4, #8]
   d5248:	6063      	str	r3, [r4, #4]
   d524a:	bd10      	pop	{r4, pc}

000d524c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d524c:	b538      	push	{r3, r4, r5, lr}
   d524e:	4604      	mov	r4, r0
   d5250:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5252:	6800      	ldr	r0, [r0, #0]
   d5254:	3101      	adds	r1, #1
   d5256:	f7ff ff49 	bl	d50ec <realloc>
	if (newbuffer) {
   d525a:	b110      	cbz	r0, d5262 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d525c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5260:	2001      	movs	r0, #1
	}
	return 0;
}
   d5262:	bd38      	pop	{r3, r4, r5, pc}

000d5264 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5264:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5266:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5268:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d526a:	b113      	cbz	r3, d5272 <_ZN6String7reserveEj+0xe>
   d526c:	6843      	ldr	r3, [r0, #4]
   d526e:	428b      	cmp	r3, r1
   d5270:	d207      	bcs.n	d5282 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5272:	4620      	mov	r0, r4
   d5274:	f7ff ffea 	bl	d524c <_ZN6String12changeBufferEj>
   d5278:	b120      	cbz	r0, d5284 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d527a:	68a3      	ldr	r3, [r4, #8]
   d527c:	b90b      	cbnz	r3, d5282 <_ZN6String7reserveEj+0x1e>
   d527e:	6822      	ldr	r2, [r4, #0]
   d5280:	7013      	strb	r3, [r2, #0]
   d5282:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5284:	bd10      	pop	{r4, pc}

000d5286 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5286:	b570      	push	{r4, r5, r6, lr}
   d5288:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d528a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d528c:	4604      	mov	r4, r0
   d528e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5290:	f7ff ffe8 	bl	d5264 <_ZN6String7reserveEj>
   d5294:	b918      	cbnz	r0, d529e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5296:	4620      	mov	r0, r4
   d5298:	f7ff ffcd 	bl	d5236 <_ZN6String10invalidateEv>
		return *this;
   d529c:	e009      	b.n	d52b2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d529e:	462a      	mov	r2, r5
   d52a0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d52a2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d52a4:	6820      	ldr	r0, [r4, #0]
   d52a6:	f004 f82a 	bl	d92fe <memcpy>
	buffer[len] = 0;
   d52aa:	6822      	ldr	r2, [r4, #0]
   d52ac:	68a3      	ldr	r3, [r4, #8]
   d52ae:	2100      	movs	r1, #0
   d52b0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d52b2:	4620      	mov	r0, r4
   d52b4:	bd70      	pop	{r4, r5, r6, pc}

000d52b6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d52b6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52b8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d52ba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52bc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d52be:	6043      	str	r3, [r0, #4]
	len = 0;
   d52c0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d52c2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d52c4:	460d      	mov	r5, r1
   d52c6:	b139      	cbz	r1, d52d8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d52c8:	4608      	mov	r0, r1
   d52ca:	f004 f8ac 	bl	d9426 <strlen>
   d52ce:	4629      	mov	r1, r5
   d52d0:	4602      	mov	r2, r0
   d52d2:	4620      	mov	r0, r4
   d52d4:	f7ff ffd7 	bl	d5286 <_ZN6String4copyEPKcj>
}
   d52d8:	4620      	mov	r0, r4
   d52da:	bd38      	pop	{r3, r4, r5, pc}

000d52dc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d52dc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d52de:	b510      	push	{r4, lr}
   d52e0:	460b      	mov	r3, r1
   d52e2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d52e4:	d007      	beq.n	d52f6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d52e6:	6809      	ldr	r1, [r1, #0]
   d52e8:	b119      	cbz	r1, d52f2 <_ZN6StringaSERKS_+0x16>
   d52ea:	689a      	ldr	r2, [r3, #8]
   d52ec:	f7ff ffcb 	bl	d5286 <_ZN6String4copyEPKcj>
   d52f0:	e001      	b.n	d52f6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d52f2:	f7ff ffa0 	bl	d5236 <_ZN6String10invalidateEv>

	return *this;
}
   d52f6:	4620      	mov	r0, r4
   d52f8:	bd10      	pop	{r4, pc}

000d52fa <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d52fa:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52fc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d52fe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5300:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5302:	6043      	str	r3, [r0, #4]
	len = 0;
   d5304:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5306:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5308:	f7ff ffe8 	bl	d52dc <_ZN6StringaSERKS_>
}
   d530c:	4620      	mov	r0, r4
   d530e:	bd10      	pop	{r4, pc}

000d5310 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5310:	b538      	push	{r3, r4, r5, lr}
   d5312:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5314:	460c      	mov	r4, r1
   d5316:	b141      	cbz	r1, d532a <_ZN6StringaSEPKc+0x1a>
   d5318:	4608      	mov	r0, r1
   d531a:	f004 f884 	bl	d9426 <strlen>
   d531e:	4621      	mov	r1, r4
   d5320:	4602      	mov	r2, r0
   d5322:	4628      	mov	r0, r5
   d5324:	f7ff ffaf 	bl	d5286 <_ZN6String4copyEPKcj>
   d5328:	e001      	b.n	d532e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d532a:	f7ff ff84 	bl	d5236 <_ZN6String10invalidateEv>

	return *this;
}
   d532e:	4628      	mov	r0, r5
   d5330:	bd38      	pop	{r3, r4, r5, pc}

000d5332 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5332:	4770      	bx	lr

000d5334 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5334:	2000      	movs	r0, #0
   d5336:	4770      	bx	lr

000d5338 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5338:	4770      	bx	lr

000d533a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d533a:	2000      	movs	r0, #0
   d533c:	4770      	bx	lr

000d533e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d533e:	4770      	bx	lr

000d5340 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5340:	2000      	movs	r0, #0
   d5342:	4770      	bx	lr

000d5344 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5344:	b510      	push	{r4, lr}
   d5346:	2114      	movs	r1, #20
   d5348:	4604      	mov	r4, r0
   d534a:	f003 fa73 	bl	d8834 <_ZdlPvj>
   d534e:	4620      	mov	r0, r4
   d5350:	bd10      	pop	{r4, pc}

000d5352 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5352:	b510      	push	{r4, lr}
   d5354:	2114      	movs	r1, #20
   d5356:	4604      	mov	r4, r0
   d5358:	f003 fa6c 	bl	d8834 <_ZdlPvj>
   d535c:	4620      	mov	r0, r4
   d535e:	bd10      	pop	{r4, pc}

000d5360 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5360:	b510      	push	{r4, lr}
   d5362:	2114      	movs	r1, #20
   d5364:	4604      	mov	r4, r0
   d5366:	f003 fa65 	bl	d8834 <_ZdlPvj>
   d536a:	4620      	mov	r0, r4
   d536c:	bd10      	pop	{r4, pc}

000d536e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d536e:	f7fe be96 	b.w	d409e <_ZdlPv>

000d5372 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5372:	f7fe be94 	b.w	d409e <_ZdlPv>

000d5376 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5376:	f7fe be92 	b.w	d409e <_ZdlPv>

000d537a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d537a:	b510      	push	{r4, lr}
   d537c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d537e:	6800      	ldr	r0, [r0, #0]
   d5380:	b108      	cbz	r0, d5386 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5382:	f7ff fccf 	bl	d4d24 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5386:	4620      	mov	r0, r4
   d5388:	bd10      	pop	{r4, pc}
	...

000d538c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d538c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d538e:	200a      	movs	r0, #10
   d5390:	4a02      	ldr	r2, [pc, #8]	; (d539c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d5392:	2100      	movs	r1, #0
   d5394:	f7ff fdb6 	bl	d4f04 <panic_>
    }
}
   d5398:	bd08      	pop	{r3, pc}
   d539a:	bf00      	nop
   d539c:	000d4bb1 	.word	0x000d4bb1

000d53a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d53a0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d53a2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d53a4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d53a6:	689b      	ldr	r3, [r3, #8]
   d53a8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d53aa:	68a3      	ldr	r3, [r4, #8]
   d53ac:	3b01      	subs	r3, #1
   d53ae:	60a3      	str	r3, [r4, #8]
   d53b0:	b92b      	cbnz	r3, d53be <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d53b2:	6823      	ldr	r3, [r4, #0]
   d53b4:	4620      	mov	r0, r4
   d53b6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d53b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d53bc:	4718      	bx	r3
   d53be:	bd10      	pop	{r4, pc}

000d53c0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d53c0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d53c4:	b2da      	uxtb	r2, r3
   d53c6:	2a09      	cmp	r2, #9
   d53c8:	d801      	bhi.n	d53ce <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d53ca:	4618      	mov	r0, r3
   d53cc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d53ce:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d53d2:	2b05      	cmp	r3, #5
   d53d4:	d801      	bhi.n	d53da <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d53d6:	3857      	subs	r0, #87	; 0x57
   d53d8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d53da:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d53de:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d53e0:	bf94      	ite	ls
   d53e2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d53e4:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d53e8:	4770      	bx	lr
	...

000d53ec <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d53ec:	b510      	push	{r4, lr}
            locked_(false) {
   d53ee:	2300      	movs	r3, #0
   d53f0:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d53f2:	4b04      	ldr	r3, [pc, #16]	; (d5404 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d53f4:	4604      	mov	r4, r0
   d53f6:	6818      	ldr	r0, [r3, #0]
   d53f8:	f7ff fc9c 	bl	d4d34 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d53fc:	2301      	movs	r3, #1
   d53fe:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5400:	4620      	mov	r0, r4
   d5402:	bd10      	pop	{r4, pc}
   d5404:	2003e3b0 	.word	0x2003e3b0

000d5408 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5408:	b510      	push	{r4, lr}
        if (locked_) {
   d540a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d540c:	4604      	mov	r4, r0
        if (locked_) {
   d540e:	b11b      	cbz	r3, d5418 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5410:	4b02      	ldr	r3, [pc, #8]	; (d541c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5412:	6818      	ldr	r0, [r3, #0]
   d5414:	f7ff fc96 	bl	d4d44 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5418:	4620      	mov	r0, r4
   d541a:	bd10      	pop	{r4, pc}
   d541c:	2003e3b0 	.word	0x2003e3b0

000d5420 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5420:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5422:	7982      	ldrb	r2, [r0, #6]
   d5424:	798b      	ldrb	r3, [r1, #6]
   d5426:	429a      	cmp	r2, r3
   d5428:	d106      	bne.n	d5438 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d542a:	2206      	movs	r2, #6
   d542c:	f003 ff58 	bl	d92e0 <memcmp>
   d5430:	fab0 f080 	clz	r0, r0
   d5434:	0940      	lsrs	r0, r0, #5
   d5436:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5438:	2000      	movs	r0, #0
}
   d543a:	bd08      	pop	{r3, pc}

000d543c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d543c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d543e:	2301      	movs	r3, #1
   d5440:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5442:	4b05      	ldr	r3, [pc, #20]	; (d5458 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d5444:	4602      	mov	r2, r0
   d5446:	f103 0110 	add.w	r1, r3, #16
   d544a:	f853 4b04 	ldr.w	r4, [r3], #4
   d544e:	f842 4b04 	str.w	r4, [r2], #4
   d5452:	428b      	cmp	r3, r1
   d5454:	d1f9      	bne.n	d544a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d5456:	bd10      	pop	{r4, pc}
   d5458:	000d99a8 	.word	0x000d99a8

000d545c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d545c:	b510      	push	{r4, lr}
    if (uuid128) {
   d545e:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5460:	4604      	mov	r4, r0
    if (uuid128) {
   d5462:	b1b9      	cbz	r1, d5494 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d5464:	2a01      	cmp	r2, #1
   d5466:	d109      	bne.n	d547c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5468:	4603      	mov	r3, r0
   d546a:	f101 0210 	add.w	r2, r1, #16
   d546e:	f851 0b04 	ldr.w	r0, [r1], #4
   d5472:	f843 0b04 	str.w	r0, [r3], #4
   d5476:	4291      	cmp	r1, r2
   d5478:	d1f9      	bne.n	d546e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d547a:	e008      	b.n	d548e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d547c:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d547e:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d5480:	5c98      	ldrb	r0, [r3, r2]
   d5482:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5486:	3a01      	subs	r2, #1
   d5488:	b2d2      	uxtb	r2, r2
   d548a:	2aff      	cmp	r2, #255	; 0xff
   d548c:	d1f8      	bne.n	d5480 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d548e:	2301      	movs	r3, #1
   d5490:	6123      	str	r3, [r4, #16]
   d5492:	e002      	b.n	d549a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5494:	2210      	movs	r2, #16
   d5496:	f003 ff58 	bl	d934a <memset>
    }
}
   d549a:	4620      	mov	r0, r4
   d549c:	bd10      	pop	{r4, pc}

000d549e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d549e:	b538      	push	{r3, r4, r5, lr}
   d54a0:	4605      	mov	r5, r0
   d54a2:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d54a4:	461a      	mov	r2, r3
   d54a6:	f7ff ffd9 	bl	d545c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d54aa:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d54ac:	0a24      	lsrs	r4, r4, #8
   d54ae:	736c      	strb	r4, [r5, #13]
}
   d54b0:	4628      	mov	r0, r5
   d54b2:	bd38      	pop	{r3, r4, r5, pc}

000d54b4 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d54b4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d54b6:	6902      	ldr	r2, [r0, #16]
   d54b8:	b90a      	cbnz	r2, d54be <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d54ba:	8980      	ldrh	r0, [r0, #12]
   d54bc:	e003      	b.n	d54c6 <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d54be:	2210      	movs	r2, #16
   d54c0:	4903      	ldr	r1, [pc, #12]	; (d54d0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d54c2:	f003 ff0d 	bl	d92e0 <memcmp>
   d54c6:	3000      	adds	r0, #0
   d54c8:	bf18      	it	ne
   d54ca:	2001      	movne	r0, #1
    }
}
   d54cc:	bd08      	pop	{r3, pc}
   d54ce:	bf00      	nop
   d54d0:	000d99a8 	.word	0x000d99a8

000d54d4 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d54d4:	6900      	ldr	r0, [r0, #16]
   d54d6:	4770      	bx	lr

000d54d8 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d54d8:	b538      	push	{r3, r4, r5, lr}
   d54da:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d54dc:	2214      	movs	r2, #20
   d54de:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d54e0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d54e2:	f003 ff32 	bl	d934a <memset>
    if (type_ == BleUuidType::SHORT) {
   d54e6:	6923      	ldr	r3, [r4, #16]
   d54e8:	b92b      	cbnz	r3, d54f6 <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d54ea:	7b62      	ldrb	r2, [r4, #13]
   d54ec:	7b23      	ldrb	r3, [r4, #12]
   d54ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d54f2:	802b      	strh	r3, [r5, #0]
   d54f4:	e00a      	b.n	d550c <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d54f6:	2301      	movs	r3, #1
   d54f8:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d54fa:	f104 0210 	add.w	r2, r4, #16
   d54fe:	462b      	mov	r3, r5
   d5500:	f854 1b04 	ldr.w	r1, [r4], #4
   d5504:	f843 1b04 	str.w	r1, [r3], #4
   d5508:	4294      	cmp	r4, r2
   d550a:	d1f9      	bne.n	d5500 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d550c:	4628      	mov	r0, r5
   d550e:	bd38      	pop	{r3, r4, r5, pc}

000d5510 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d5510:	7b42      	ldrb	r2, [r0, #13]
   d5512:	7b00      	ldrb	r0, [r0, #12]
}
   d5514:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d5518:	4770      	bx	lr

000d551a <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d551a:	4770      	bx	lr

000d551c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d551c:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d551e:	690b      	ldr	r3, [r1, #16]
   d5520:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5522:	f101 0210 	add.w	r2, r1, #16
   d5526:	4603      	mov	r3, r0
   d5528:	f851 4b04 	ldr.w	r4, [r1], #4
   d552c:	f843 4b04 	str.w	r4, [r3], #4
   d5530:	4291      	cmp	r1, r2
   d5532:	d1f9      	bne.n	d5528 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d5534:	bd10      	pop	{r4, pc}

000d5536 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5536:	b510      	push	{r4, lr}
   d5538:	b086      	sub	sp, #24
   d553a:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d553c:	2201      	movs	r2, #1
   d553e:	a801      	add	r0, sp, #4
   d5540:	f7ff ff8c 	bl	d545c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5544:	a901      	add	r1, sp, #4
   d5546:	4620      	mov	r0, r4
   d5548:	f7ff ffe8 	bl	d551c <_ZN8particle7BleUuidaSERKS0_>
}
   d554c:	b006      	add	sp, #24
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5550:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5552:	6902      	ldr	r2, [r0, #16]
   d5554:	690b      	ldr	r3, [r1, #16]
   d5556:	429a      	cmp	r2, r3
   d5558:	d106      	bne.n	d5568 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d555a:	2210      	movs	r2, #16
   d555c:	f003 fec0 	bl	d92e0 <memcmp>
   d5560:	fab0 f080 	clz	r0, r0
   d5564:	0940      	lsrs	r0, r0, #5
   d5566:	bd08      	pop	{r3, pc}
   d5568:	2000      	movs	r0, #0
}
   d556a:	bd08      	pop	{r3, pc}

000d556c <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d556c:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d556e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d5570:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5572:	4b31      	ldr	r3, [pc, #196]	; (d5638 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5574:	460e      	mov	r6, r1
   d5576:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5578:	4602      	mov	r2, r0
   d557a:	f103 0110 	add.w	r1, r3, #16
   d557e:	f853 0b04 	ldr.w	r0, [r3], #4
   d5582:	f842 0b04 	str.w	r0, [r2], #4
   d5586:	428b      	cmp	r3, r1
   d5588:	d1f9      	bne.n	d557e <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d558a:	2e00      	cmp	r6, #0
   d558c:	d051      	beq.n	d5632 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d558e:	2124      	movs	r1, #36	; 0x24
   d5590:	4630      	mov	r0, r6
   d5592:	f003 ff65 	bl	d9460 <strnlen>
   d5596:	2804      	cmp	r0, #4
   d5598:	d010      	beq.n	d55bc <_ZN8particle7BleUuid9constructEPKc+0x50>
   d559a:	2700      	movs	r7, #0
   d559c:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d559e:	2124      	movs	r1, #36	; 0x24
   d55a0:	4630      	mov	r0, r6
   d55a2:	f003 ff5d 	bl	d9460 <strnlen>
   d55a6:	42b8      	cmp	r0, r7
   d55a8:	d901      	bls.n	d55ae <_ZN8particle7BleUuid9constructEPKc+0x42>
   d55aa:	bb44      	cbnz	r4, d55fe <_ZN8particle7BleUuid9constructEPKc+0x92>
   d55ac:	e041      	b.n	d5632 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d55ae:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d55b0:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d55b2:	42a5      	cmp	r5, r4
   d55b4:	d03d      	beq.n	d5632 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d55b6:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d55ba:	e7fa      	b.n	d55b2 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d55bc:	7830      	ldrb	r0, [r6, #0]
   d55be:	f7ff feff 	bl	d53c0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d55c2:	1e04      	subs	r4, r0, #0
   d55c4:	db18      	blt.n	d55f8 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d55c6:	7870      	ldrb	r0, [r6, #1]
   d55c8:	f7ff fefa 	bl	d53c0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d55cc:	2800      	cmp	r0, #0
   d55ce:	db13      	blt.n	d55f8 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d55d0:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d55d4:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d55d8:	78b0      	ldrb	r0, [r6, #2]
   d55da:	f7ff fef1 	bl	d53c0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d55de:	1e04      	subs	r4, r0, #0
   d55e0:	db0a      	blt.n	d55f8 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d55e2:	78f0      	ldrb	r0, [r6, #3]
   d55e4:	f7ff feec 	bl	d53c0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d55e8:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d55ea:	bfa1      	itttt	ge
   d55ec:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d55f0:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d55f4:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d55f6:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d55f8:	2300      	movs	r3, #0
   d55fa:	612b      	str	r3, [r5, #16]
   d55fc:	e019      	b.n	d5632 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d55fe:	5df0      	ldrb	r0, [r6, r7]
   d5600:	f7ff fede 	bl	d53c0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5604:	0603      	lsls	r3, r0, #24
   d5606:	d412      	bmi.n	d562e <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d5608:	3c01      	subs	r4, #1
   d560a:	0100      	lsls	r0, r0, #4
   d560c:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d560e:	2124      	movs	r1, #36	; 0x24
   d5610:	4630      	mov	r0, r6
   d5612:	f003 ff25 	bl	d9460 <strnlen>
   d5616:	3701      	adds	r7, #1
   d5618:	4287      	cmp	r7, r0
   d561a:	d208      	bcs.n	d562e <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d561c:	5df0      	ldrb	r0, [r6, r7]
   d561e:	f7ff fecf 	bl	d53c0 <_ZN8particle11hexToNibbleEc>
   d5622:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5624:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5626:	bfa2      	ittt	ge
   d5628:	5d2b      	ldrbge	r3, [r5, r4]
   d562a:	4318      	orrge	r0, r3
   d562c:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d562e:	3701      	adds	r7, #1
   d5630:	e7b5      	b.n	d559e <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d5632:	b003      	add	sp, #12
   d5634:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5636:	bf00      	nop
   d5638:	000d99a8 	.word	0x000d99a8

000d563c <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d563c:	b538      	push	{r3, r4, r5, lr}
   d563e:	4604      	mov	r4, r0
   d5640:	460d      	mov	r5, r1
        : BleUuid() {
   d5642:	f7ff fefb 	bl	d543c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5646:	4620      	mov	r0, r4
   d5648:	4629      	mov	r1, r5
   d564a:	f7ff ff8f 	bl	d556c <_ZN8particle7BleUuid9constructEPKc>
}
   d564e:	4620      	mov	r0, r4
   d5650:	bd38      	pop	{r3, r4, r5, pc}

000d5652 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5652:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5654:	b18b      	cbz	r3, d567a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5656:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5658:	1ce5      	adds	r5, r4, #3
   d565a:	428d      	cmp	r5, r1
   d565c:	d80f      	bhi.n	d567e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d565e:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5660:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5662:	5d87      	ldrb	r7, [r0, r6]
   d5664:	4297      	cmp	r7, r2
   d5666:	d105      	bne.n	d5674 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5668:	442e      	add	r6, r5
   d566a:	42b1      	cmp	r1, r6
   d566c:	d307      	bcc.n	d567e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d566e:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5670:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5672:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5674:	3501      	adds	r5, #1
   d5676:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5678:	e7ee      	b.n	d5658 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d567a:	4618      	mov	r0, r3
   d567c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d567e:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5680:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5682 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5682:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5686:	4604      	mov	r4, r0
   d5688:	460e      	mov	r6, r1
   d568a:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d568c:	4617      	mov	r7, r2
   d568e:	2a00      	cmp	r2, #0
   d5690:	d03a      	beq.n	d5708 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5692:	460a      	mov	r2, r1
   d5694:	ab01      	add	r3, sp, #4
   d5696:	6a01      	ldr	r1, [r0, #32]
   d5698:	f7ff ffdb 	bl	d5652 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d569c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d56a0:	6a22      	ldr	r2, [r4, #32]
   d56a2:	bb03      	cbnz	r3, d56e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d56a4:	b1f8      	cbz	r0, d56e6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d56a6:	1c96      	adds	r6, r2, #2
   d56a8:	442e      	add	r6, r5
   d56aa:	1a36      	subs	r6, r6, r0
   d56ac:	2e1f      	cmp	r6, #31
   d56ae:	d82b      	bhi.n	d5708 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d56b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d56b4:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d56b8:	ebc8 0202 	rsb	r2, r8, r2
   d56bc:	1a12      	subs	r2, r2, r0
   d56be:	eb00 0108 	add.w	r1, r0, r8
   d56c2:	eb05 0009 	add.w	r0, r5, r9
   d56c6:	b292      	uxth	r2, r2
   d56c8:	4421      	add	r1, r4
   d56ca:	4420      	add	r0, r4
   d56cc:	f003 fe22 	bl	d9314 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d56d0:	1c6b      	adds	r3, r5, #1
   d56d2:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d56d6:	462a      	mov	r2, r5
   d56d8:	4639      	mov	r1, r7
   d56da:	eb04 0009 	add.w	r0, r4, r9
   d56de:	f003 fe0e 	bl	d92fe <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d56e2:	6226      	str	r6, [r4, #32]
   d56e4:	e010      	b.n	d5708 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d56e6:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d56e8:	182b      	adds	r3, r5, r0
   d56ea:	2b1f      	cmp	r3, #31
   d56ec:	d80c      	bhi.n	d5708 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d56ee:	1c6b      	adds	r3, r5, #1
   d56f0:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d56f2:	4422      	add	r2, r4
   d56f4:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d56f6:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d56f8:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d56fa:	4420      	add	r0, r4
   d56fc:	462a      	mov	r2, r5
   d56fe:	f003 fdfe 	bl	d92fe <memcpy>
        selfLen_ += len;
   d5702:	6a22      	ldr	r2, [r4, #32]
   d5704:	442a      	add	r2, r5
   d5706:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5708:	6a20      	ldr	r0, [r4, #32]
}
   d570a:	b003      	add	sp, #12
   d570c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5710 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5712:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5714:	4603      	mov	r3, r0
   d5716:	f100 021f 	add.w	r2, r0, #31
   d571a:	2000      	movs	r0, #0
   d571c:	f803 0b01 	strb.w	r0, [r3], #1
   d5720:	4293      	cmp	r3, r2
   d5722:	f04f 0100 	mov.w	r1, #0
   d5726:	d1f9      	bne.n	d571c <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5728:	aa04      	add	r2, sp, #16
   d572a:	2306      	movs	r3, #6
   d572c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5730:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5732:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5734:	9100      	str	r1, [sp, #0]
   d5736:	4620      	mov	r0, r4
   d5738:	4619      	mov	r1, r3
   d573a:	f7ff ffa2 	bl	d5682 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d573e:	4620      	mov	r0, r4
   d5740:	b004      	add	sp, #16
   d5742:	bd10      	pop	{r4, pc}

000d5744 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5744:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5746:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5748:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d574a:	ab01      	add	r3, sp, #4
   d574c:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d574e:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5750:	f7ff ff7f 	bl	d5652 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5754:	4605      	mov	r5, r0
   d5756:	b178      	cbz	r0, d5778 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5758:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d575a:	6a22      	ldr	r2, [r4, #32]
   d575c:	1829      	adds	r1, r5, r0
   d575e:	1a12      	subs	r2, r2, r0
   d5760:	1b52      	subs	r2, r2, r5
   d5762:	4421      	add	r1, r4
   d5764:	4420      	add	r0, r4
   d5766:	f003 fdca 	bl	d92fe <memcpy>
        selfLen_ -= len;
   d576a:	6a23      	ldr	r3, [r4, #32]
   d576c:	1b5d      	subs	r5, r3, r5
   d576e:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5770:	4631      	mov	r1, r6
   d5772:	4620      	mov	r0, r4
   d5774:	f7ff ffe6 	bl	d5744 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5778:	b002      	add	sp, #8
   d577a:	bd70      	pop	{r4, r5, r6, pc}

000d577c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d577c:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d577e:	2500      	movs	r5, #0
   d5780:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5784:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5786:	8043      	strh	r3, [r0, #2]
   d5788:	220e      	movs	r2, #14
   d578a:	4629      	mov	r1, r5
   d578c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d578e:	7105      	strb	r5, [r0, #4]
   d5790:	3006      	adds	r0, #6
   d5792:	f003 fdda 	bl	d934a <memset>
   d5796:	f104 0014 	add.w	r0, r4, #20
   d579a:	f7ff fe4f 	bl	d543c <_ZN8particle7BleUuidC1Ev>
   d579e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d57a2:	f7ff fe4b 	bl	d543c <_ZN8particle7BleUuidC1Ev>
   d57a6:	4904      	ldr	r1, [pc, #16]	; (d57b8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d57a8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d57ac:	f7ff fd83 	bl	d52b6 <_ZN6StringC1EPK19__FlashStringHelper>
   d57b0:	64e5      	str	r5, [r4, #76]	; 0x4c
   d57b2:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d57b4:	4620      	mov	r0, r4
   d57b6:	bd38      	pop	{r3, r4, r5, pc}
   d57b8:	000d9a8c 	.word	0x000d9a8c

000d57bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d57bc:	b510      	push	{r4, lr}
   d57be:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d57c0:	69c2      	ldr	r2, [r0, #28]
   d57c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d57c6:	4293      	cmp	r3, r2
   d57c8:	4618      	mov	r0, r3
   d57ca:	d006      	beq.n	d57da <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d57cc:	6804      	ldr	r4, [r0, #0]
   d57ce:	8824      	ldrh	r4, [r4, #0]
   d57d0:	428c      	cmp	r4, r1
   d57d2:	f103 0308 	add.w	r3, r3, #8
   d57d6:	d1f6      	bne.n	d57c6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d57d8:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d57da:	2000      	movs	r0, #0
    }
   d57dc:	bd10      	pop	{r4, pc}
	...

000d57e0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d57e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d57e4:	4680      	mov	r8, r0
   d57e6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d57e8:	460e      	mov	r6, r1
   d57ea:	b369      	cbz	r1, d5848 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d57ec:	b362      	cbz	r2, d5848 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d57ee:	2af4      	cmp	r2, #244	; 0xf4
   d57f0:	6805      	ldr	r5, [r0, #0]
   d57f2:	bf28      	it	cs
   d57f4:	22f4      	movcs	r2, #244	; 0xf4
   d57f6:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d57f8:	782a      	ldrb	r2, [r5, #0]
   d57fa:	b1a2      	cbz	r2, d5826 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d57fc:	792b      	ldrb	r3, [r5, #4]
   d57fe:	0798      	lsls	r0, r3, #30
   d5800:	d507      	bpl.n	d5812 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5802:	2300      	movs	r3, #0
   d5804:	4622      	mov	r2, r4
   d5806:	89a8      	ldrh	r0, [r5, #12]
   d5808:	f7ff fa26 	bl	d4c58 <hal_ble_gatt_server_set_characteristic_value>
   d580c:	2800      	cmp	r0, #0
   d580e:	da02      	bge.n	d5816 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5810:	e043      	b.n	d589a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5812:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5816:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d581a:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d581c:	06da      	lsls	r2, r3, #27
   d581e:	d518      	bpl.n	d5852 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5820:	2f01      	cmp	r7, #1
   d5822:	d123      	bne.n	d586c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5824:	e015      	b.n	d5852 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5826:	8868      	ldrh	r0, [r5, #2]
   d5828:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d582c:	4298      	cmp	r0, r3
   d582e:	d00d      	beq.n	d584c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d5830:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5832:	0759      	lsls	r1, r3, #29
   d5834:	d523      	bpl.n	d587e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5836:	2f01      	cmp	r7, #1
   d5838:	d021      	beq.n	d587e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d583a:	89a9      	ldrh	r1, [r5, #12]
   d583c:	9200      	str	r2, [sp, #0]
   d583e:	4623      	mov	r3, r4
   d5840:	4632      	mov	r2, r6
   d5842:	f7ff fa1d 	bl	d4c80 <hal_ble_gatt_client_write_without_response>
   d5846:	e028      	b.n	d589a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5848:	4815      	ldr	r0, [pc, #84]	; (d58a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d584a:	e026      	b.n	d589a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d584c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5850:	e023      	b.n	d589a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5852:	069a      	lsls	r2, r3, #26
   d5854:	d521      	bpl.n	d589a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5856:	2f02      	cmp	r7, #2
   d5858:	d01f      	beq.n	d589a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d585a:	89a8      	ldrh	r0, [r5, #12]
   d585c:	2300      	movs	r3, #0
   d585e:	4622      	mov	r2, r4
   d5860:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5862:	b002      	add	sp, #8
   d5864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5868:	f7ff ba32 	b.w	d4cd0 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d586c:	89a8      	ldrh	r0, [r5, #12]
   d586e:	2300      	movs	r3, #0
   d5870:	4622      	mov	r2, r4
   d5872:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5874:	b002      	add	sp, #8
   d5876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d587a:	f7ff ba1f 	b.w	d4cbc <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d587e:	071b      	lsls	r3, r3, #28
   d5880:	d501      	bpl.n	d5886 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5882:	2f02      	cmp	r7, #2
   d5884:	d102      	bne.n	d588c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5886:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d588a:	e006      	b.n	d589a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d588c:	2300      	movs	r3, #0
   d588e:	89a9      	ldrh	r1, [r5, #12]
   d5890:	9300      	str	r3, [sp, #0]
   d5892:	4632      	mov	r2, r6
   d5894:	4623      	mov	r3, r4
   d5896:	f7ff f9e9 	bl	d4c6c <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d589a:	b002      	add	sp, #8
   d589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58a0:	fffffef2 	.word	0xfffffef2

000d58a4 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d58a4:	b510      	push	{r4, lr}
    return impl()->address();
   d58a6:	680a      	ldr	r2, [r1, #0]
   d58a8:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d58ac:	6003      	str	r3, [r0, #0]
   d58ae:	6853      	ldr	r3, [r2, #4]
   d58b0:	6043      	str	r3, [r0, #4]
}
   d58b2:	bd10      	pop	{r4, pc}

000d58b4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d58b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d58b6:	6802      	ldr	r2, [r0, #0]
   d58b8:	680b      	ldr	r3, [r1, #0]
   d58ba:	8812      	ldrh	r2, [r2, #0]
   d58bc:	881b      	ldrh	r3, [r3, #0]
   d58be:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d58c0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d58c2:	d10c      	bne.n	d58de <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d58c4:	4601      	mov	r1, r0
   d58c6:	4668      	mov	r0, sp
   d58c8:	f7ff ffec 	bl	d58a4 <_ZNK8particle13BlePeerDevice7addressEv>
   d58cc:	4621      	mov	r1, r4
   d58ce:	a802      	add	r0, sp, #8
   d58d0:	f7ff ffe8 	bl	d58a4 <_ZNK8particle13BlePeerDevice7addressEv>
   d58d4:	a902      	add	r1, sp, #8
   d58d6:	4668      	mov	r0, sp
   d58d8:	f7ff fda2 	bl	d5420 <_ZNK8particle10BleAddresseqERKS0_>
   d58dc:	b900      	cbnz	r0, d58e0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d58de:	2000      	movs	r0, #0
}
   d58e0:	b004      	add	sp, #16
   d58e2:	bd10      	pop	{r4, pc}

000d58e4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d58e4:	b510      	push	{r4, lr}
   d58e6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d58e8:	2034      	movs	r0, #52	; 0x34
   d58ea:	f7fe fbd6 	bl	d409a <_Znwj>
   d58ee:	4601      	mov	r1, r0
   d58f0:	b168      	cbz	r0, d590e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d58f2:	2300      	movs	r3, #0
   d58f4:	6003      	str	r3, [r0, #0]
   d58f6:	6043      	str	r3, [r0, #4]
   d58f8:	6083      	str	r3, [r0, #8]
   d58fa:	60c3      	str	r3, [r0, #12]
   d58fc:	6103      	str	r3, [r0, #16]
   d58fe:	6143      	str	r3, [r0, #20]
   d5900:	6183      	str	r3, [r0, #24]
   d5902:	61c3      	str	r3, [r0, #28]
   d5904:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5906:	6243      	str	r3, [r0, #36]	; 0x24
   d5908:	6283      	str	r3, [r0, #40]	; 0x28
   d590a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d590c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d590e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5910:	b919      	cbnz	r1, d591a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5912:	4a0a      	ldr	r2, [pc, #40]	; (d593c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5914:	200a      	movs	r0, #10
   d5916:	f7ff faf5 	bl	d4f04 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d591a:	2000      	movs	r0, #0
   d591c:	f7ff f968 	bl	d4bf0 <hal_ble_stack_init>
   d5920:	b120      	cbz	r0, d592c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5922:	4a06      	ldr	r2, [pc, #24]	; (d593c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5924:	2100      	movs	r1, #0
   d5926:	200a      	movs	r0, #10
   d5928:	f7ff faec 	bl	d4f04 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d592c:	2200      	movs	r2, #0
   d592e:	6821      	ldr	r1, [r4, #0]
   d5930:	4803      	ldr	r0, [pc, #12]	; (d5940 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5932:	f7ff f9b9 	bl	d4ca8 <hal_ble_set_callback_on_periph_link_events>
}
   d5936:	4620      	mov	r0, r4
   d5938:	bd10      	pop	{r4, pc}
   d593a:	bf00      	nop
   d593c:	000d4bb1 	.word	0x000d4bb1
   d5940:	000d5d4d 	.word	0x000d5d4d

000d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5944:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5946:	4c0a      	ldr	r4, [pc, #40]	; (d5970 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5948:	6823      	ldr	r3, [r4, #0]
   d594a:	07db      	lsls	r3, r3, #31
   d594c:	d40e      	bmi.n	d596c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d594e:	4620      	mov	r0, r4
   d5950:	f7fe fbb4 	bl	d40bc <__cxa_guard_acquire>
   d5954:	b150      	cbz	r0, d596c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5956:	4807      	ldr	r0, [pc, #28]	; (d5974 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5958:	f7ff ffc4 	bl	d58e4 <_ZN8particle14BleLocalDeviceC1Ev>
   d595c:	4620      	mov	r0, r4
   d595e:	f7fe fbb2 	bl	d40c6 <__cxa_guard_release>
   d5962:	4a05      	ldr	r2, [pc, #20]	; (d5978 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5964:	4905      	ldr	r1, [pc, #20]	; (d597c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5966:	4803      	ldr	r0, [pc, #12]	; (d5974 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5968:	f002 ff56 	bl	d8818 <__aeabi_atexit>
    return instance;
}
   d596c:	4801      	ldr	r0, [pc, #4]	; (d5974 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d596e:	bd10      	pop	{r4, pc}
   d5970:	2003e3a8 	.word	0x2003e3a8
   d5974:	2003e3a4 	.word	0x2003e3a4
   d5978:	2003e308 	.word	0x2003e308
   d597c:	000d5b37 	.word	0x000d5b37

000d5980 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5980:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5982:	6803      	ldr	r3, [r0, #0]
   d5984:	3b09      	subs	r3, #9
   d5986:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5988:	b08a      	sub	sp, #40	; 0x28
   d598a:	4604      	mov	r4, r0
   d598c:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d598e:	d819      	bhi.n	d59c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5990:	f7ff ffd8 	bl	d5944 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5994:	88a1      	ldrh	r1, [r4, #4]
   d5996:	6800      	ldr	r0, [r0, #0]
   d5998:	f7ff ff10 	bl	d57bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d599c:	4602      	mov	r2, r0
   d599e:	b958      	cbnz	r0, d59b8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d59a0:	2320      	movs	r3, #32
   d59a2:	9302      	str	r3, [sp, #8]
   d59a4:	4b08      	ldr	r3, [pc, #32]	; (d59c8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d59a6:	9003      	str	r0, [sp, #12]
   d59a8:	9300      	str	r3, [sp, #0]
   d59aa:	aa02      	add	r2, sp, #8
   d59ac:	4603      	mov	r3, r0
   d59ae:	4907      	ldr	r1, [pc, #28]	; (d59cc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d59b0:	2032      	movs	r0, #50	; 0x32
   d59b2:	f7ff faaf 	bl	d4f14 <log_message>
   d59b6:	e005      	b.n	d59c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d59b8:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d59ba:	b11d      	cbz	r5, d59c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d59bc:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d59be:	68e1      	ldr	r1, [r4, #12]
   d59c0:	6920      	ldr	r0, [r4, #16]
   d59c2:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d59c4:	b00a      	add	sp, #40	; 0x28
   d59c6:	bd70      	pop	{r4, r5, r6, pc}
   d59c8:	000d9852 	.word	0x000d9852
   d59cc:	000d9808 	.word	0x000d9808

000d59d0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d59d0:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d59d2:	a801      	add	r0, sp, #4
   d59d4:	f7ff fd0a 	bl	d53ec <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d59d8:	2000      	movs	r0, #0
   d59da:	f7ff f909 	bl	d4bf0 <hal_ble_stack_init>
   d59de:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d59e0:	a801      	add	r0, sp, #4
   d59e2:	f7ff fd11 	bl	d5408 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d59e6:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d59ea:	b002      	add	sp, #8
   d59ec:	bd10      	pop	{r4, pc}

000d59ee <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d59ee:	4608      	mov	r0, r1
   d59f0:	b909      	cbnz	r1, d59f6 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d59f2:	460a      	mov	r2, r1
   d59f4:	e001      	b.n	d59fa <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d59f6:	6a09      	ldr	r1, [r1, #32]
   d59f8:	2200      	movs	r2, #0
   d59fa:	f7ff b901 	b.w	d4c00 <hal_ble_gap_set_advertising_data>

000d59fe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d59fe:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5a00:	460c      	mov	r4, r1
   d5a02:	b911      	cbnz	r1, d5a0a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5a04:	460a      	mov	r2, r1
   d5a06:	4608      	mov	r0, r1
   d5a08:	e006      	b.n	d5a18 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5a0a:	2101      	movs	r1, #1
   d5a0c:	4620      	mov	r0, r4
   d5a0e:	f7ff fe99 	bl	d5744 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5a12:	6a21      	ldr	r1, [r4, #32]
   d5a14:	2200      	movs	r2, #0
   d5a16:	4620      	mov	r0, r4
    }
}
   d5a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5a1c:	f7ff b8f8 	b.w	d4c10 <hal_ble_gap_set_scan_response_data>

000d5a20 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5a20:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5a22:	a801      	add	r0, sp, #4
   d5a24:	f7ff fce2 	bl	d53ec <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5a28:	2000      	movs	r0, #0
   d5a2a:	f7ff f8f9 	bl	d4c20 <hal_ble_gap_start_advertising>
   d5a2e:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5a30:	a801      	add	r0, sp, #4
   d5a32:	f7ff fce9 	bl	d5408 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5a36:	4620      	mov	r0, r4
   d5a38:	b002      	add	sp, #8
   d5a3a:	bd10      	pop	{r4, pc}

000d5a3c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5a3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5a3e:	4605      	mov	r5, r0
   d5a40:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5a42:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5a44:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5a46:	f7ff fcd1 	bl	d53ec <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5a4a:	4621      	mov	r1, r4
   d5a4c:	4628      	mov	r0, r5
   d5a4e:	f7ff ffce 	bl	d59ee <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5a52:	2800      	cmp	r0, #0
   d5a54:	db08      	blt.n	d5a68 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5a56:	4631      	mov	r1, r6
   d5a58:	4628      	mov	r0, r5
   d5a5a:	f7ff ffd0 	bl	d59fe <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5a5e:	2800      	cmp	r0, #0
   d5a60:	db02      	blt.n	d5a68 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5a62:	4628      	mov	r0, r5
   d5a64:	f7ff ffdc 	bl	d5a20 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5a68:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5a6a:	a801      	add	r0, sp, #4
   d5a6c:	f7ff fccc 	bl	d5408 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5a70:	4620      	mov	r0, r4
   d5a72:	b002      	add	sp, #8
   d5a74:	bd70      	pop	{r4, r5, r6, pc}

000d5a76 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d5a76:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5a78:	69d8      	ldr	r0, [r3, #28]
}
   d5a7a:	2800      	cmp	r0, #0
   d5a7c:	bfd4      	ite	le
   d5a7e:	2000      	movle	r0, #0
   d5a80:	2001      	movgt	r0, #1
   d5a82:	4770      	bx	lr

000d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5a84:	680b      	ldr	r3, [r1, #0]
   d5a86:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5a88:	b113      	cbz	r3, d5a90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5a8a:	685a      	ldr	r2, [r3, #4]
   d5a8c:	3201      	adds	r2, #1
   d5a8e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5a90:	4770      	bx	lr

000d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5a92:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5a94:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a98:	4604      	mov	r4, r0
   d5a9a:	f840 3b04 	str.w	r3, [r0], #4
   d5a9e:	f7ff fff1 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5aa2:	6823      	ldr	r3, [r4, #0]
   d5aa4:	b90b      	cbnz	r3, d5aaa <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5aa6:	f7ff fc71 	bl	d538c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5aaa:	4620      	mov	r0, r4
   d5aac:	bd10      	pop	{r4, pc}

000d5aae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5aae:	b510      	push	{r4, lr}
   d5ab0:	f851 3b04 	ldr.w	r3, [r1], #4
   d5ab4:	4604      	mov	r4, r0
   d5ab6:	f840 3b04 	str.w	r3, [r0], #4
   d5aba:	f7ff ffe3 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5abe:	4620      	mov	r0, r4
   d5ac0:	bd10      	pop	{r4, pc}

000d5ac2 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5ac2:	b510      	push	{r4, lr}
   d5ac4:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ac6:	3004      	adds	r0, #4
   d5ac8:	f7fe fbfc 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5acc:	4620      	mov	r0, r4
   d5ace:	bd10      	pop	{r4, pc}

000d5ad0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ad0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ad2:	6804      	ldr	r4, [r0, #0]
   d5ad4:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ad6:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ad8:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5adc:	42a6      	cmp	r6, r4
   d5ade:	d004      	beq.n	d5aea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5ae0:	1d20      	adds	r0, r4, #4
   d5ae2:	f7fe fbef 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ae6:	3408      	adds	r4, #8
   d5ae8:	e7f8      	b.n	d5adc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5aea:	6828      	ldr	r0, [r5, #0]
   d5aec:	f7ff faf6 	bl	d50dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5af0:	4628      	mov	r0, r5
   d5af2:	bd70      	pop	{r4, r5, r6, pc}

000d5af4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5af4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5af6:	6804      	ldr	r4, [r0, #0]
   d5af8:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5afa:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5afc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b00:	42a6      	cmp	r6, r4
   d5b02:	d004      	beq.n	d5b0e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5b04:	1d20      	adds	r0, r4, #4
   d5b06:	f7fe fbdd 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b0a:	3408      	adds	r4, #8
   d5b0c:	e7f8      	b.n	d5b00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b0e:	6828      	ldr	r0, [r5, #0]
   d5b10:	f7ff fae4 	bl	d50dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5b14:	4628      	mov	r0, r5
   d5b16:	bd70      	pop	{r4, r5, r6, pc}

000d5b18 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5b18:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5b1a:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5b1c:	f104 0018 	add.w	r0, r4, #24
   d5b20:	f7ff ffe8 	bl	d5af4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5b24:	f104 000c 	add.w	r0, r4, #12
   d5b28:	f7ff ffd2 	bl	d5ad0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b32:	f7fe bab4 	b.w	d409e <_ZdlPv>

000d5b36 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5b36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b38:	6804      	ldr	r4, [r0, #0]
   d5b3a:	4607      	mov	r7, r0
   d5b3c:	b1c4      	cbz	r4, d5b70 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5b3e:	69a5      	ldr	r5, [r4, #24]
   d5b40:	69e3      	ldr	r3, [r4, #28]
   d5b42:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b46:	42ae      	cmp	r6, r5
   d5b48:	d004      	beq.n	d5b54 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b4a:	1d28      	adds	r0, r5, #4
   d5b4c:	f7fe fbba 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b50:	3508      	adds	r5, #8
   d5b52:	e7f8      	b.n	d5b46 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b54:	69a0      	ldr	r0, [r4, #24]
   d5b56:	f7ff fac1 	bl	d50dc <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5b5a:	f104 000c 	add.w	r0, r4, #12
   d5b5e:	f7ff ffc9 	bl	d5af4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5b62:	4620      	mov	r0, r4
   d5b64:	f7ff ffb4 	bl	d5ad0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b68:	2134      	movs	r1, #52	; 0x34
   d5b6a:	4620      	mov	r0, r4
   d5b6c:	f002 fe62 	bl	d8834 <_ZdlPvj>
   d5b70:	4638      	mov	r0, r7
   d5b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b74 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5b74:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5b76:	2500      	movs	r5, #0
   d5b78:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b7a:	6045      	str	r5, [r0, #4]
   d5b7c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5b7e:	2024      	movs	r0, #36	; 0x24
   d5b80:	f7fe fa8b 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5b84:	4604      	mov	r4, r0
   d5b86:	b178      	cbz	r0, d5ba8 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5b88:	4603      	mov	r3, r0
   d5b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b8e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5b92:	f8c0 5002 	str.w	r5, [r0, #2]
   d5b96:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5b98:	7285      	strb	r5, [r0, #10]
   d5b9a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5b9c:	60c5      	str	r5, [r0, #12]
   d5b9e:	6105      	str	r5, [r0, #16]
   d5ba0:	6145      	str	r5, [r0, #20]
   d5ba2:	6185      	str	r5, [r0, #24]
   d5ba4:	61c5      	str	r5, [r0, #28]
   d5ba6:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5ba8:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5baa:	2014      	movs	r0, #20
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	f7fe fa74 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5bb2:	4603      	mov	r3, r0
   d5bb4:	b128      	cbz	r0, d5bc2 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5bb6:	2201      	movs	r2, #1
   d5bb8:	6042      	str	r2, [r0, #4]
   d5bba:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5bbc:	4a08      	ldr	r2, [pc, #32]	; (d5be0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5bbe:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5bc0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5bc2:	a802      	add	r0, sp, #8
   d5bc4:	6872      	ldr	r2, [r6, #4]
   d5bc6:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5bca:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5bcc:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5bce:	f7fe fb79 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5bd2:	6833      	ldr	r3, [r6, #0]
   d5bd4:	b90b      	cbnz	r3, d5bda <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5bd6:	f7ff fbd9 	bl	d538c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5bda:	4630      	mov	r0, r6
   d5bdc:	b002      	add	sp, #8
   d5bde:	bd70      	pop	{r4, r5, r6, pc}
   d5be0:	000d97e4 	.word	0x000d97e4

000d5be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5be4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5be6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5be8:	6803      	ldr	r3, [r0, #0]
   d5bea:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5bec:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5bee:	d00c      	beq.n	d5c0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5bf0:	b114      	cbz	r4, d5bf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5bf2:	6863      	ldr	r3, [r4, #4]
   d5bf4:	3301      	adds	r3, #1
   d5bf6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5bf8:	6828      	ldr	r0, [r5, #0]
   d5bfa:	b128      	cbz	r0, d5c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5bfc:	6843      	ldr	r3, [r0, #4]
   d5bfe:	3b01      	subs	r3, #1
   d5c00:	6043      	str	r3, [r0, #4]
   d5c02:	b90b      	cbnz	r3, d5c08 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5c04:	f7ff fbcc 	bl	d53a0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d5c08:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d5c0a:	4628      	mov	r0, r5
   d5c0c:	bd38      	pop	{r3, r4, r5, pc}

000d5c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5c0e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5c10:	b570      	push	{r4, r5, r6, lr}
   d5c12:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5c14:	d91a      	bls.n	d5c4c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5c16:	4290      	cmp	r0, r2
   d5c18:	d219      	bcs.n	d5c4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5c1a:	f1a1 0608 	sub.w	r6, r1, #8
   d5c1e:	1a51      	subs	r1, r2, r1
   d5c20:	3904      	subs	r1, #4
   d5c22:	1f15      	subs	r5, r2, #4
   d5c24:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5c26:	1f2b      	subs	r3, r5, #4
   d5c28:	429e      	cmp	r6, r3
   d5c2a:	d025      	beq.n	d5c78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5c2c:	2c04      	cmp	r4, #4
   d5c2e:	d007      	beq.n	d5c40 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c30:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5c34:	f844 3c04 	str.w	r3, [r4, #-4]
   d5c38:	4629      	mov	r1, r5
   d5c3a:	4620      	mov	r0, r4
   d5c3c:	f7ff ff22 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c40:	4628      	mov	r0, r5
   d5c42:	f7fe fb3f 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c46:	3d08      	subs	r5, #8
   d5c48:	3c08      	subs	r4, #8
   d5c4a:	e7ec      	b.n	d5c26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5c4c:	d014      	beq.n	d5c78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5c4e:	1d0c      	adds	r4, r1, #4
   d5c50:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5c52:	1f23      	subs	r3, r4, #4
   d5c54:	429d      	cmp	r5, r3
   d5c56:	d00f      	beq.n	d5c78 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5c58:	2e04      	cmp	r6, #4
   d5c5a:	d007      	beq.n	d5c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c5c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5c60:	f846 3c04 	str.w	r3, [r6, #-4]
   d5c64:	4621      	mov	r1, r4
   d5c66:	4630      	mov	r0, r6
   d5c68:	f7ff ff0c 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5c6c:	4620      	mov	r0, r4
   d5c6e:	f7fe fb29 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c72:	3408      	adds	r4, #8
   d5c74:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c76:	e7ec      	b.n	d5c52 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5c78:	bd70      	pop	{r4, r5, r6, pc}

000d5c7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5c7e:	6804      	ldr	r4, [r0, #0]
   d5c80:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5c82:	4605      	mov	r5, r0
   d5c84:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5c86:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5c8a:	42a7      	cmp	r7, r4
   d5c8c:	d018      	beq.n	d5cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5c8e:	4641      	mov	r1, r8
   d5c90:	4620      	mov	r0, r4
   d5c92:	f7ff fe0f 	bl	d58b4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5c96:	4606      	mov	r6, r0
   d5c98:	b908      	cbnz	r0, d5c9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5c9a:	3408      	adds	r4, #8
   d5c9c:	e7f5      	b.n	d5c8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5c9e:	b18c      	cbz	r4, d5cc4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5ca0:	1d20      	adds	r0, r4, #4
   d5ca2:	f7fe fb0f 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5ca6:	682b      	ldr	r3, [r5, #0]
   d5ca8:	686a      	ldr	r2, [r5, #4]
   d5caa:	f104 0108 	add.w	r1, r4, #8
   d5cae:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5cb2:	4620      	mov	r0, r4
   d5cb4:	f7ff ffab 	bl	d5c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5cb8:	686b      	ldr	r3, [r5, #4]
   d5cba:	3b01      	subs	r3, #1
   d5cbc:	606b      	str	r3, [r5, #4]
    return true;
   d5cbe:	e002      	b.n	d5cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5cc0:	2600      	movs	r6, #0
   d5cc2:	e000      	b.n	d5cc6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5cc4:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5cc6:	4630      	mov	r0, r6
   d5cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5ccc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5cce:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5cd0:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5cd4:	6847      	ldr	r7, [r0, #4]
   d5cd6:	9300      	str	r3, [sp, #0]
   d5cd8:	a801      	add	r0, sp, #4
   d5cda:	f7ff fed3 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5cde:	6866      	ldr	r6, [r4, #4]
   d5ce0:	68a3      	ldr	r3, [r4, #8]
   d5ce2:	429e      	cmp	r6, r3
   d5ce4:	db14      	blt.n	d5d10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5ce6:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5ce8:	2e00      	cmp	r6, #0
   d5cea:	dd0b      	ble.n	d5d04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5cec:	00f0      	lsls	r0, r6, #3
   d5cee:	f7ff f9ed 	bl	d50cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5cf2:	4605      	mov	r5, r0
   d5cf4:	b318      	cbz	r0, d5d3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5cf6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5cfa:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5cfe:	f7ff ff86 	bl	d5c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5d02:	e000      	b.n	d5d06 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5d04:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d06:	6820      	ldr	r0, [r4, #0]
   d5d08:	f7ff f9e8 	bl	d50dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5d0c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5d0e:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5d10:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5d12:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5d14:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5d18:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5d1c:	4629      	mov	r1, r5
   d5d1e:	f105 0008 	add.w	r0, r5, #8
   d5d22:	f7ff ff74 	bl	d5c0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5d26:	b135      	cbz	r5, d5d36 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5d28:	9b00      	ldr	r3, [sp, #0]
   d5d2a:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5d2e:	a901      	add	r1, sp, #4
   d5d30:	1d28      	adds	r0, r5, #4
   d5d32:	f7ff fea7 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5d36:	6863      	ldr	r3, [r4, #4]
   d5d38:	3301      	adds	r3, #1
   d5d3a:	6063      	str	r3, [r4, #4]
   d5d3c:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d3e:	a801      	add	r0, sp, #4
   d5d40:	f7fe fac0 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5d44:	4628      	mov	r0, r5
   d5d46:	b003      	add	sp, #12
   d5d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5d4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d50:	4604      	mov	r4, r0
   d5d52:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5d54:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5d56:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5d58:	f7ff fb48 	bl	d53ec <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5d5c:	6823      	ldr	r3, [r4, #0]
   d5d5e:	2b03      	cmp	r3, #3
   d5d60:	d002      	beq.n	d5d68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5d62:	2b04      	cmp	r3, #4
   d5d64:	d042      	beq.n	d5dec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5d66:	e087      	b.n	d5e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5d68:	a804      	add	r0, sp, #16
   d5d6a:	f7ff ff03 	bl	d5b74 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5d6e:	9b04      	ldr	r3, [sp, #16]
   d5d70:	8922      	ldrh	r2, [r4, #8]
   d5d72:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5d74:	6862      	ldr	r2, [r4, #4]
   d5d76:	9904      	ldr	r1, [sp, #16]
   d5d78:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5d7c:	f8c1 3002 	str.w	r3, [r1, #2]
   d5d80:	6853      	ldr	r3, [r2, #4]
   d5d82:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d86:	a807      	add	r0, sp, #28
   d5d88:	9b04      	ldr	r3, [sp, #16]
   d5d8a:	9306      	str	r3, [sp, #24]
   d5d8c:	a905      	add	r1, sp, #20
   d5d8e:	f7ff fe79 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5d92:	a906      	add	r1, sp, #24
   d5d94:	f105 0018 	add.w	r0, r5, #24
   d5d98:	f7ff ff98 	bl	d5ccc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5d9c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d9e:	a807      	add	r0, sp, #28
   d5da0:	f7fe fa90 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5da4:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5da6:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5da8:	b974      	cbnz	r4, d5dc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5daa:	4b36      	ldr	r3, [pc, #216]	; (d5e84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5dac:	9300      	str	r3, [sp, #0]
   d5dae:	aa06      	add	r2, sp, #24
   d5db0:	4623      	mov	r3, r4
   d5db2:	4935      	ldr	r1, [pc, #212]	; (d5e88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5db4:	9407      	str	r4, [sp, #28]
   d5db6:	2032      	movs	r0, #50	; 0x32
   d5db8:	f7ff f8ac 	bl	d4f14 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5dbc:	9b04      	ldr	r3, [sp, #16]
   d5dbe:	4621      	mov	r1, r4
   d5dc0:	8818      	ldrh	r0, [r3, #0]
   d5dc2:	f7fe ff35 	bl	d4c30 <hal_ble_gap_disconnect>
   d5dc6:	e00d      	b.n	d5de4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5dc8:	4a30      	ldr	r2, [pc, #192]	; (d5e8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5dca:	9200      	str	r2, [sp, #0]
   d5dcc:	2300      	movs	r3, #0
   d5dce:	aa06      	add	r2, sp, #24
   d5dd0:	492d      	ldr	r1, [pc, #180]	; (d5e88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5dd2:	9307      	str	r3, [sp, #28]
   d5dd4:	2001      	movs	r0, #1
   d5dd6:	f7ff f89d 	bl	d4f14 <log_message>
                if (impl->connectedCb_) {
   d5dda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5ddc:	b113      	cbz	r3, d5de4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5dde:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5de0:	a804      	add	r0, sp, #16
   d5de2:	4798      	blx	r3
   d5de4:	a805      	add	r0, sp, #20
   d5de6:	f7fe fa6d 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5dea:	e045      	b.n	d5e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5dec:	8921      	ldrh	r1, [r4, #8]
   d5dee:	4628      	mov	r0, r5
   d5df0:	f7ff fce4 	bl	d57bc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5df4:	4607      	mov	r7, r0
   d5df6:	2800      	cmp	r0, #0
   d5df8:	d03e      	beq.n	d5e78 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5dfa:	6804      	ldr	r4, [r0, #0]
   d5dfc:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5dfe:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5e00:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5e04:	8022      	strh	r2, [r4, #0]
   d5e06:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5e0a:	4299      	cmp	r1, r3
   d5e0c:	d003      	beq.n	d5e16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5e0e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5e12:	8042      	strh	r2, [r0, #2]
   d5e14:	e7f9      	b.n	d5e0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5e16:	68e6      	ldr	r6, [r4, #12]
   d5e18:	6923      	ldr	r3, [r4, #16]
   d5e1a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5e1e:	45b0      	cmp	r8, r6
   d5e20:	d004      	beq.n	d5e2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5e22:	1d30      	adds	r0, r6, #4
   d5e24:	f7fe fa4e 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e28:	3608      	adds	r6, #8
   d5e2a:	e7f8      	b.n	d5e1e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5e2c:	2300      	movs	r3, #0
   d5e2e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5e30:	69a6      	ldr	r6, [r4, #24]
   d5e32:	69e3      	ldr	r3, [r4, #28]
   d5e34:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5e38:	45b0      	cmp	r8, r6
   d5e3a:	d004      	beq.n	d5e46 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5e3c:	1d30      	adds	r0, r6, #4
   d5e3e:	f7fe fa41 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e42:	3608      	adds	r6, #8
   d5e44:	e7f8      	b.n	d5e38 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5e46:	2300      	movs	r3, #0
   d5e48:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5e4a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5e4c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5e4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5e50:	b113      	cbz	r3, d5e58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5e52:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5e54:	4638      	mov	r0, r7
   d5e56:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5e58:	2320      	movs	r3, #32
   d5e5a:	4a0d      	ldr	r2, [pc, #52]	; (d5e90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5e5c:	9306      	str	r3, [sp, #24]
   d5e5e:	9200      	str	r2, [sp, #0]
   d5e60:	2300      	movs	r3, #0
   d5e62:	4909      	ldr	r1, [pc, #36]	; (d5e88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5e64:	9307      	str	r3, [sp, #28]
   d5e66:	2001      	movs	r0, #1
   d5e68:	aa06      	add	r2, sp, #24
   d5e6a:	f7ff f853 	bl	d4f14 <log_message>
                    impl->peers_.removeOne(*peer);
   d5e6e:	4639      	mov	r1, r7
   d5e70:	f105 0018 	add.w	r0, r5, #24
   d5e74:	f7ff ff01 	bl	d5c7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5e78:	a803      	add	r0, sp, #12
   d5e7a:	f7ff fac5 	bl	d5408 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5e7e:	b00e      	add	sp, #56	; 0x38
   d5e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e84:	000d986a 	.word	0x000d986a
   d5e88:	000d9808 	.word	0x000d9808
   d5e8c:	000d9890 	.word	0x000d9890
   d5e90:	000d98ad 	.word	0x000d98ad

000d5e94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5e94:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e98:	4606      	mov	r6, r0
   d5e9a:	460c      	mov	r4, r1
   d5e9c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5e9e:	d914      	bls.n	d5eca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5ea0:	4290      	cmp	r0, r2
   d5ea2:	d213      	bcs.n	d5ecc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5ea4:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5ea8:	1a6c      	subs	r4, r5, r1
   d5eaa:	f1a1 0708 	sub.w	r7, r1, #8
   d5eae:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5eb0:	42af      	cmp	r7, r5
   d5eb2:	d018      	beq.n	d5ee6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5eb4:	b11c      	cbz	r4, d5ebe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5eb6:	4629      	mov	r1, r5
   d5eb8:	4620      	mov	r0, r4
   d5eba:	f7ff fdf8 	bl	d5aae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5ebe:	1d28      	adds	r0, r5, #4
   d5ec0:	f7fe fa00 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5ec4:	3d08      	subs	r5, #8
   d5ec6:	3c08      	subs	r4, #8
   d5ec8:	e7f2      	b.n	d5eb0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5eca:	d00c      	beq.n	d5ee6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5ecc:	42ac      	cmp	r4, r5
   d5ece:	d00a      	beq.n	d5ee6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5ed0:	b11e      	cbz	r6, d5eda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5ed2:	4621      	mov	r1, r4
   d5ed4:	4630      	mov	r0, r6
   d5ed6:	f7ff fdea 	bl	d5aae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5eda:	1d20      	adds	r0, r4, #4
   d5edc:	f7fe f9f2 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5ee0:	3408      	adds	r4, #8
   d5ee2:	3608      	adds	r6, #8
   d5ee4:	e7f2      	b.n	d5ecc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5ee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ee8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5ee8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5eea:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5eec:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5eee:	dd0b      	ble.n	d5f08 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5ef0:	00f0      	lsls	r0, r6, #3
   d5ef2:	f7ff f8eb 	bl	d50cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5ef6:	4604      	mov	r4, r0
   d5ef8:	b170      	cbz	r0, d5f18 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5efa:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5efe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5f02:	f7ff ffc7 	bl	d5e94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5f06:	e000      	b.n	d5f0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5f08:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f0a:	6828      	ldr	r0, [r5, #0]
   d5f0c:	f7ff f8e6 	bl	d50dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5f10:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5f12:	60ae      	str	r6, [r5, #8]
        return true;
   d5f14:	2001      	movs	r0, #1
   d5f16:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5f18:	bd70      	pop	{r4, r5, r6, pc}

000d5f1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5f1c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5f1e:	6845      	ldr	r5, [r0, #4]
   d5f20:	4668      	mov	r0, sp
   d5f22:	f7ff fdc4 	bl	d5aae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5f26:	6861      	ldr	r1, [r4, #4]
   d5f28:	68a3      	ldr	r3, [r4, #8]
   d5f2a:	4299      	cmp	r1, r3
   d5f2c:	db05      	blt.n	d5f3a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5f2e:	3101      	adds	r1, #1
   d5f30:	4620      	mov	r0, r4
   d5f32:	f7ff ffd9 	bl	d5ee8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5f36:	4606      	mov	r6, r0
   d5f38:	b198      	cbz	r0, d5f62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5f3a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5f3c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5f3e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5f42:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5f46:	4629      	mov	r1, r5
   d5f48:	f105 0008 	add.w	r0, r5, #8
   d5f4c:	f7ff ffa2 	bl	d5e94 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5f50:	b11d      	cbz	r5, d5f5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5f52:	4669      	mov	r1, sp
   d5f54:	4628      	mov	r0, r5
   d5f56:	f7ff fdaa 	bl	d5aae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5f5a:	6863      	ldr	r3, [r4, #4]
   d5f5c:	3301      	adds	r3, #1
   d5f5e:	6063      	str	r3, [r4, #4]
   d5f60:	2601      	movs	r6, #1
   d5f62:	a801      	add	r0, sp, #4
   d5f64:	f7fe f9ae 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5f68:	4630      	mov	r0, r6
   d5f6a:	b002      	add	sp, #8
   d5f6c:	bd70      	pop	{r4, r5, r6, pc}

000d5f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5f6e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f72:	4606      	mov	r6, r0
   d5f74:	460c      	mov	r4, r1
   d5f76:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5f78:	d914      	bls.n	d5fa4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5f7a:	4290      	cmp	r0, r2
   d5f7c:	d213      	bcs.n	d5fa6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5f7e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5f82:	1a6c      	subs	r4, r5, r1
   d5f84:	f1a1 0708 	sub.w	r7, r1, #8
   d5f88:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5f8a:	42af      	cmp	r7, r5
   d5f8c:	d018      	beq.n	d5fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5f8e:	b11c      	cbz	r4, d5f98 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5f90:	4629      	mov	r1, r5
   d5f92:	4620      	mov	r0, r4
   d5f94:	f7ff fd7d 	bl	d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5f98:	1d28      	adds	r0, r5, #4
   d5f9a:	f7fe f993 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5f9e:	3d08      	subs	r5, #8
   d5fa0:	3c08      	subs	r4, #8
   d5fa2:	e7f2      	b.n	d5f8a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5fa4:	d00c      	beq.n	d5fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5fa6:	42ac      	cmp	r4, r5
   d5fa8:	d00a      	beq.n	d5fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5faa:	b11e      	cbz	r6, d5fb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5fac:	4621      	mov	r1, r4
   d5fae:	4630      	mov	r0, r6
   d5fb0:	f7ff fd6f 	bl	d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5fb4:	1d20      	adds	r0, r4, #4
   d5fb6:	f7fe f985 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5fba:	3408      	adds	r4, #8
   d5fbc:	3608      	adds	r6, #8
   d5fbe:	e7f2      	b.n	d5fa6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5fc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5fc2:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5fc4:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5fc6:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5fc8:	dd0b      	ble.n	d5fe2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5fca:	00f0      	lsls	r0, r6, #3
   d5fcc:	f7ff f87e 	bl	d50cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5fd0:	4604      	mov	r4, r0
   d5fd2:	b170      	cbz	r0, d5ff2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5fd4:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5fd8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5fdc:	f7ff ffc7 	bl	d5f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5fe0:	e000      	b.n	d5fe4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5fe2:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5fe4:	6828      	ldr	r0, [r5, #0]
   d5fe6:	f7ff f879 	bl	d50dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5fea:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5fec:	60ae      	str	r6, [r5, #8]
        return true;
   d5fee:	2001      	movs	r0, #1
   d5ff0:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5ff2:	bd70      	pop	{r4, r5, r6, pc}

000d5ff4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5ff6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5ff8:	6845      	ldr	r5, [r0, #4]
   d5ffa:	4668      	mov	r0, sp
   d5ffc:	f7ff fd49 	bl	d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6000:	6861      	ldr	r1, [r4, #4]
   d6002:	68a3      	ldr	r3, [r4, #8]
   d6004:	4299      	cmp	r1, r3
   d6006:	db05      	blt.n	d6014 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6008:	3101      	adds	r1, #1
   d600a:	4620      	mov	r0, r4
   d600c:	f7ff ffd9 	bl	d5fc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6010:	4606      	mov	r6, r0
   d6012:	b198      	cbz	r0, d603c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6014:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6016:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6018:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d601c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6020:	4629      	mov	r1, r5
   d6022:	f105 0008 	add.w	r0, r5, #8
   d6026:	f7ff ffa2 	bl	d5f6e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d602a:	b11d      	cbz	r5, d6034 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d602c:	4669      	mov	r1, sp
   d602e:	4628      	mov	r0, r5
   d6030:	f7ff fd2f 	bl	d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6034:	6863      	ldr	r3, [r4, #4]
   d6036:	3301      	adds	r3, #1
   d6038:	6063      	str	r3, [r4, #4]
   d603a:	2601      	movs	r6, #1
   d603c:	a801      	add	r0, sp, #4
   d603e:	f7fe f941 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6042:	4630      	mov	r0, r6
   d6044:	b002      	add	sp, #8
   d6046:	bd70      	pop	{r4, r5, r6, pc}

000d6048 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6048:	b510      	push	{r4, lr}
   d604a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d604c:	6840      	ldr	r0, [r0, #4]
   d604e:	b108      	cbz	r0, d6054 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6050:	f7fe f825 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6054:	4620      	mov	r0, r4
   d6056:	bd10      	pop	{r4, pc}

000d6058 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6058:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d605a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d605c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d605e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6062:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6066:	f7ff f8df 	bl	d5228 <_ZN6StringD1Ev>
   d606a:	4668      	mov	r0, sp
   d606c:	f7ff ffec 	bl	d6048 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6070:	b003      	add	sp, #12
   d6072:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6078:	b538      	push	{r3, r4, r5, lr}
   d607a:	2300      	movs	r3, #0
   d607c:	4604      	mov	r4, r0
   d607e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6080:	2014      	movs	r0, #20
   d6082:	460d      	mov	r5, r1
   d6084:	f7fe f809 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6088:	b128      	cbz	r0, d6096 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d608a:	2301      	movs	r3, #1
   d608c:	6043      	str	r3, [r0, #4]
   d608e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6090:	4b02      	ldr	r3, [pc, #8]	; (d609c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6092:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6094:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6096:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6098:	4620      	mov	r0, r4
   d609a:	bd38      	pop	{r3, r4, r5, pc}
   d609c:	000d97ac 	.word	0x000d97ac

000d60a0 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d60a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d60a4:	b088      	sub	sp, #32
   d60a6:	4605      	mov	r5, r0
   d60a8:	461e      	mov	r6, r3
   d60aa:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d60ac:	2300      	movs	r3, #0
   d60ae:	460f      	mov	r7, r1
   d60b0:	4690      	mov	r8, r2
   d60b2:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d60b4:	9305      	str	r3, [sp, #20]
   d60b6:	f7fd fff0 	bl	d409a <_Znwj>
   d60ba:	f8cd d018 	str.w	sp, [sp, #24]
   d60be:	4604      	mov	r4, r0
   d60c0:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d60c2:	b1c0      	cbz	r0, d60f6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d60c4:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d60c8:	f7ff fb58 	bl	d577c <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d60cc:	4639      	mov	r1, r7
   d60ce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d60d2:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d60d6:	f7ff f91b 	bl	d5310 <_ZN6StringaSEPKc>
        callback_ = callback;
   d60da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d60dc:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d60de:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d60e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d60e2:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d60e4:	f104 0014 	add.w	r0, r4, #20
   d60e8:	f7ff fa18 	bl	d551c <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d60ec:	990e      	ldr	r1, [sp, #56]	; 0x38
   d60ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d60f2:	f7ff fa13 	bl	d551c <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d60f6:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d60f8:	2600      	movs	r6, #0
   d60fa:	ab01      	add	r3, sp, #4
   d60fc:	aa02      	add	r2, sp, #8
   d60fe:	a803      	add	r0, sp, #12
   d6100:	9607      	str	r6, [sp, #28]
   d6102:	f7ff ffb9 	bl	d6078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6106:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6108:	9a05      	ldr	r2, [sp, #20]
   d610a:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d610c:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d610e:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6110:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6112:	f7fe f8d7 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6116:	a806      	add	r0, sp, #24
   d6118:	f7ff ff96 	bl	d6048 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d611c:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d611e:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6120:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6122:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6124:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6126:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6128:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d612a:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d612c:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6130:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6132:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6134:	f7fe f8c6 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6138:	a805      	add	r0, sp, #20
   d613a:	f7fe f8c3 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d613e:	6829      	ldr	r1, [r5, #0]
   d6140:	b919      	cbnz	r1, d614a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d6142:	4a03      	ldr	r2, [pc, #12]	; (d6150 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d6144:	200a      	movs	r0, #10
   d6146:	f7fe fedd 	bl	d4f04 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d614a:	b008      	add	sp, #32
   d614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6150:	000d4bb1 	.word	0x000d4bb1

000d6154 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6154:	b510      	push	{r4, lr}
   d6156:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6158:	6840      	ldr	r0, [r0, #4]
   d615a:	b108      	cbz	r0, d6160 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d615c:	f7fd ff9f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6160:	4620      	mov	r0, r4
   d6162:	bd10      	pop	{r4, pc}

000d6164 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6164:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6166:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6168:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d616a:	e88d 0009 	stmia.w	sp, {r0, r3}
   d616e:	4668      	mov	r0, sp
   d6170:	f7ff fff0 	bl	d6154 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6174:	b003      	add	sp, #12
   d6176:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d617c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d617c:	b538      	push	{r3, r4, r5, lr}
   d617e:	2300      	movs	r3, #0
   d6180:	4604      	mov	r4, r0
   d6182:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6184:	2014      	movs	r0, #20
   d6186:	460d      	mov	r5, r1
   d6188:	f7fd ff87 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d618c:	b128      	cbz	r0, d619a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d618e:	2301      	movs	r3, #1
   d6190:	6043      	str	r3, [r0, #4]
   d6192:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6194:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6196:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6198:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d619a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d619c:	4620      	mov	r0, r4
   d619e:	bd38      	pop	{r3, r4, r5, pc}
   d61a0:	000d97c8 	.word	0x000d97c8

000d61a4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d61a4:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d61a6:	2600      	movs	r6, #0
   d61a8:	b087      	sub	sp, #28
   d61aa:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d61ac:	6046      	str	r6, [r0, #4]
   d61ae:	4604      	mov	r4, r0
   d61b0:	2018      	movs	r0, #24
   d61b2:	460f      	mov	r7, r1
   d61b4:	f7fd ff71 	bl	d409a <_Znwj>
   d61b8:	f8cd d010 	str.w	sp, [sp, #16]
   d61bc:	4605      	mov	r5, r0
   d61be:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d61c0:	b138      	cbz	r0, d61d2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d61c2:	f7ff f93b 	bl	d543c <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d61c6:	4639      	mov	r1, r7
   d61c8:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d61ca:	82ae      	strh	r6, [r5, #20]
   d61cc:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d61ce:	f7ff f9a5 	bl	d551c <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d61d2:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d61d4:	4629      	mov	r1, r5
   d61d6:	9305      	str	r3, [sp, #20]
   d61d8:	aa02      	add	r2, sp, #8
   d61da:	ab01      	add	r3, sp, #4
   d61dc:	a803      	add	r0, sp, #12
   d61de:	f7ff ffcd 	bl	d617c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d61e2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d61e4:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d61e6:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d61e8:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d61ea:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d61ec:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d61ee:	f7fe f869 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d61f2:	a804      	add	r0, sp, #16
   d61f4:	f7ff ffae 	bl	d6154 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d61f8:	6823      	ldr	r3, [r4, #0]
   d61fa:	b90b      	cbnz	r3, d6200 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d61fc:	f7ff f8c6 	bl	d538c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6200:	4620      	mov	r0, r4
   d6202:	b007      	add	sp, #28
   d6204:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6208 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d620c:	4617      	mov	r7, r2
   d620e:	b0a1      	sub	sp, #132	; 0x84
   d6210:	4680      	mov	r8, r0
    WiringBleLock lk;
   d6212:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6214:	460e      	mov	r6, r1
    WiringBleLock lk;
   d6216:	f7ff f8e9 	bl	d53ec <_ZN8particle3ble13WiringBleLockC1Ev>
   d621a:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d621c:	7923      	ldrb	r3, [r4, #4]
   d621e:	2b00      	cmp	r3, #0
   d6220:	f000 80de 	beq.w	d63e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6224:	6833      	ldr	r3, [r6, #0]
   d6226:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6228:	691b      	ldr	r3, [r3, #16]
   d622a:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d622e:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6230:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d6234:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6238:	9b03      	ldr	r3, [sp, #12]
   d623a:	42ab      	cmp	r3, r5
   d623c:	d023      	beq.n	d6286 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d623e:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d6242:	4650      	mov	r0, sl
   d6244:	f109 0114 	add.w	r1, r9, #20
   d6248:	f7ff f982 	bl	d5550 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d624c:	2800      	cmp	r0, #0
   d624e:	f000 80cc 	beq.w	d63ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d6252:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d6256:	4658      	mov	r0, fp
   d6258:	f7ff f97a 	bl	d5550 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d625c:	2800      	cmp	r0, #0
   d625e:	f000 80c4 	beq.w	d63ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d6262:	6823      	ldr	r3, [r4, #0]
   d6264:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d6268:	f8d9 3000 	ldr.w	r3, [r9]
   d626c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d6270:	4299      	cmp	r1, r3
   d6272:	f040 80ba 	bne.w	d63ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6276:	2320      	movs	r3, #32
   d6278:	4a60      	ldr	r2, [pc, #384]	; (d63fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d627a:	9315      	str	r3, [sp, #84]	; 0x54
   d627c:	2300      	movs	r3, #0
   d627e:	9200      	str	r2, [sp, #0]
   d6280:	9316      	str	r3, [sp, #88]	; 0x58
   d6282:	aa15      	add	r2, sp, #84	; 0x54
   d6284:	e0a8      	b.n	d63d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d6286:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d628a:	4648      	mov	r0, r9
   d628c:	f7ff f912 	bl	d54b4 <_ZNK8particle7BleUuid7isValidEv>
   d6290:	b918      	cbnz	r0, d629a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d6292:	495b      	ldr	r1, [pc, #364]	; (d6400 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d6294:	4648      	mov	r0, r9
   d6296:	f7ff f94e 	bl	d5536 <_ZN8particle7BleUuidaSEPKh>
   d629a:	6833      	ldr	r3, [r6, #0]
   d629c:	681d      	ldr	r5, [r3, #0]
   d629e:	685b      	ldr	r3, [r3, #4]
   d62a0:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d62a4:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d62a6:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d62a8:	d005      	beq.n	d62b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d62aa:	6828      	ldr	r0, [r5, #0]
   d62ac:	f7ff f950 	bl	d5550 <_ZNK8particle7BleUuideqERKS0_>
   d62b0:	bb58      	cbnz	r0, d630a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d62b2:	3508      	adds	r5, #8
   d62b4:	e7f6      	b.n	d62a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d62b6:	a80b      	add	r0, sp, #44	; 0x2c
   d62b8:	f7ff ff74 	bl	d61a4 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d62bc:	4649      	mov	r1, r9
   d62be:	a815      	add	r0, sp, #84	; 0x54
   d62c0:	f7ff f90a 	bl	d54d8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d62c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d62c6:	2300      	movs	r3, #0
   d62c8:	3214      	adds	r2, #20
   d62ca:	a915      	add	r1, sp, #84	; 0x54
   d62cc:	2001      	movs	r0, #1
   d62ce:	f7fe fcb9 	bl	d4c44 <hal_ble_gatt_server_add_service>
   d62d2:	2800      	cmp	r0, #0
   d62d4:	d178      	bne.n	d63c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d62d6:	6835      	ldr	r5, [r6, #0]
   d62d8:	a90b      	add	r1, sp, #44	; 0x2c
   d62da:	a80d      	add	r0, sp, #52	; 0x34
   d62dc:	f7ff fbe7 	bl	d5aae <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d62e0:	4628      	mov	r0, r5
   d62e2:	a90d      	add	r1, sp, #52	; 0x34
   d62e4:	f7ff fe19 	bl	d5f1a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d62e8:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d62ea:	a80e      	add	r0, sp, #56	; 0x38
   d62ec:	f7fd ffea 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62f0:	2d00      	cmp	r5, #0
   d62f2:	d069      	beq.n	d63c8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d62f4:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d62f6:	6855      	ldr	r5, [r2, #4]
   d62f8:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d62fc:	6815      	ldr	r5, [r2, #0]
   d62fe:	3b01      	subs	r3, #1
   d6300:	a80c      	add	r0, sp, #48	; 0x30
   d6302:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d6306:	f7fd ffdd 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d630a:	f104 0914 	add.w	r9, r4, #20
   d630e:	4648      	mov	r0, r9
   d6310:	f7ff f8d0 	bl	d54b4 <_ZNK8particle7BleUuid7isValidEv>
   d6314:	b968      	cbnz	r0, d6332 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d6316:	4b3b      	ldr	r3, [pc, #236]	; (d6404 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6318:	4939      	ldr	r1, [pc, #228]	; (d6400 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d631a:	881a      	ldrh	r2, [r3, #0]
   d631c:	3201      	adds	r2, #1
   d631e:	b292      	uxth	r2, r2
   d6320:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6322:	a815      	add	r0, sp, #84	; 0x54
   d6324:	2301      	movs	r3, #1
   d6326:	f7ff f8ba 	bl	d549e <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d632a:	a915      	add	r1, sp, #84	; 0x54
   d632c:	4648      	mov	r0, r9
   d632e:	f7ff f8f5 	bl	d551c <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d6332:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d6336:	4652      	mov	r2, sl
   d6338:	2100      	movs	r1, #0
   d633a:	a815      	add	r0, sp, #84	; 0x54
   d633c:	f003 f805 	bl	d934a <memset>
    charInit.version = BLE_API_VERSION;
   d6340:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d6342:	4649      	mov	r1, r9
   d6344:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d6346:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d634a:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d634e:	f7ff f8c3 	bl	d54d8 <_ZN8particle7BleUuid7halUUIDEv>
   d6352:	ab04      	add	r3, sp, #16
   d6354:	aa18      	add	r2, sp, #96	; 0x60
   d6356:	f10d 0c20 	add.w	ip, sp, #32
   d635a:	6818      	ldr	r0, [r3, #0]
   d635c:	6859      	ldr	r1, [r3, #4]
   d635e:	4696      	mov	lr, r2
   d6360:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d6364:	3308      	adds	r3, #8
   d6366:	4563      	cmp	r3, ip
   d6368:	4672      	mov	r2, lr
   d636a:	d1f6      	bne.n	d635a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d636c:	6818      	ldr	r0, [r3, #0]
   d636e:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d6372:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d6374:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d6378:	682b      	ldr	r3, [r5, #0]
   d637a:	8a9b      	ldrh	r3, [r3, #20]
   d637c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d6380:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6382:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6384:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d6386:	4b20      	ldr	r3, [pc, #128]	; (d6408 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d6388:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d638a:	1da1      	adds	r1, r4, #6
   d638c:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d638e:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6390:	f7fe fc80 	bl	d4c94 <hal_ble_gatt_server_add_characteristic>
   d6394:	bb20      	cbnz	r0, d63e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d6396:	2301      	movs	r3, #1
   d6398:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d639a:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d639c:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d639e:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d63a0:	a80d      	add	r0, sp, #52	; 0x34
   d63a2:	f7ff fb76 	bl	d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d63a6:	4620      	mov	r0, r4
   d63a8:	a90d      	add	r1, sp, #52	; 0x34
   d63aa:	f7ff fe23 	bl	d5ff4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d63ae:	4604      	mov	r4, r0
   d63b0:	a80e      	add	r0, sp, #56	; 0x38
   d63b2:	f7fd ff87 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63b6:	b99c      	cbnz	r4, d63e0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d63b8:	2320      	movs	r3, #32
   d63ba:	930d      	str	r3, [sp, #52]	; 0x34
   d63bc:	4b13      	ldr	r3, [pc, #76]	; (d640c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d63be:	9300      	str	r3, [sp, #0]
   d63c0:	940e      	str	r4, [sp, #56]	; 0x38
   d63c2:	4623      	mov	r3, r4
   d63c4:	aa0d      	add	r2, sp, #52	; 0x34
   d63c6:	e007      	b.n	d63d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d63c8:	4639      	mov	r1, r7
   d63ca:	4640      	mov	r0, r8
   d63cc:	f7ff fb61 	bl	d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d63d0:	a80c      	add	r0, sp, #48	; 0x30
   d63d2:	f7fd ff77 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63d6:	e00a      	b.n	d63ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d63d8:	490d      	ldr	r1, [pc, #52]	; (d6410 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d63da:	2032      	movs	r0, #50	; 0x32
   d63dc:	f7fe fd9a 	bl	d4f14 <log_message>
            return characteristic;
   d63e0:	4639      	mov	r1, r7
   d63e2:	4640      	mov	r0, r8
   d63e4:	f7ff fb55 	bl	d5a92 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d63e8:	e001      	b.n	d63ee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d63ea:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d63ec:	e724      	b.n	d6238 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d63ee:	a80a      	add	r0, sp, #40	; 0x28
   d63f0:	f7ff f80a 	bl	d5408 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d63f4:	4640      	mov	r0, r8
   d63f6:	b021      	add	sp, #132	; 0x84
   d63f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63fc:	000d997d 	.word	0x000d997d
   d6400:	000d97f8 	.word	0x000d97f8
   d6404:	2003e3ac 	.word	0x2003e3ac
   d6408:	000d5981 	.word	0x000d5981
   d640c:	000d9956 	.word	0x000d9956
   d6410:	000d9808 	.word	0x000d9808

000d6414 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6414:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6416:	4c06      	ldr	r4, [pc, #24]	; (d6430 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6418:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d641a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d641c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d641e:	f7fe fc79 	bl	d4d14 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6422:	4620      	mov	r0, r4
   d6424:	4a03      	ldr	r2, [pc, #12]	; (d6434 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6426:	4904      	ldr	r1, [pc, #16]	; (d6438 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d642c:	f002 b9f4 	b.w	d8818 <__aeabi_atexit>
   d6430:	2003e3b0 	.word	0x2003e3b0
   d6434:	2003e308 	.word	0x2003e308
   d6438:	000d537b 	.word	0x000d537b

000d643c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d643e:	4606      	mov	r6, r0
   d6440:	460d      	mov	r5, r1
   d6442:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6444:	2400      	movs	r4, #0
  while (size--) {
   d6446:	42bd      	cmp	r5, r7
   d6448:	d00c      	beq.n	d6464 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d644a:	6833      	ldr	r3, [r6, #0]
   d644c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6450:	689b      	ldr	r3, [r3, #8]
   d6452:	4630      	mov	r0, r6
   d6454:	4798      	blx	r3
     if (chunk>=0)
   d6456:	2800      	cmp	r0, #0
   d6458:	db01      	blt.n	d645e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d645a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d645c:	e7f3      	b.n	d6446 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d645e:	2c00      	cmp	r4, #0
   d6460:	bf08      	it	eq
   d6462:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6464:	4620      	mov	r0, r4
   d6466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6468 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6468:	b570      	push	{r4, r5, r6, lr}
   d646a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d646c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d646e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6470:	b149      	cbz	r1, d6486 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6472:	f002 ffd8 	bl	d9426 <strlen>
   d6476:	682b      	ldr	r3, [r5, #0]
   d6478:	4602      	mov	r2, r0
   d647a:	4621      	mov	r1, r4
   d647c:	4628      	mov	r0, r5
   d647e:	68db      	ldr	r3, [r3, #12]
    }
   d6480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6484:	4718      	bx	r3
    }
   d6486:	bd70      	pop	{r4, r5, r6, pc}

000d6488 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6488:	6803      	ldr	r3, [r0, #0]
   d648a:	689b      	ldr	r3, [r3, #8]
   d648c:	4718      	bx	r3

000d648e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d648e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6490:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6492:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6494:	f7ff fff8 	bl	d6488 <_ZN5Print5printEc>
  n += print('\n');
   d6498:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d649a:	4604      	mov	r4, r0
  n += print('\n');
   d649c:	4628      	mov	r0, r5
   d649e:	f7ff fff3 	bl	d6488 <_ZN5Print5printEc>
  return n;
}
   d64a2:	4420      	add	r0, r4
   d64a4:	bd38      	pop	{r3, r4, r5, pc}

000d64a6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d64a6:	b530      	push	{r4, r5, lr}
   d64a8:	b08b      	sub	sp, #44	; 0x2c
   d64aa:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d64ac:	2100      	movs	r1, #0
   d64ae:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d64b2:	2a01      	cmp	r2, #1
   d64b4:	bf98      	it	ls
   d64b6:	220a      	movls	r2, #10
   d64b8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d64bc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d64c0:	fb05 3312 	mls	r3, r5, r2, r3
   d64c4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d64c8:	2b09      	cmp	r3, #9
   d64ca:	bf94      	ite	ls
   d64cc:	3330      	addls	r3, #48	; 0x30
   d64ce:	3337      	addhi	r3, #55	; 0x37
   d64d0:	b2db      	uxtb	r3, r3
   d64d2:	4621      	mov	r1, r4
   d64d4:	f804 3901 	strb.w	r3, [r4], #-1
   d64d8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d64da:	2d00      	cmp	r5, #0
   d64dc:	d1ee      	bne.n	d64bc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d64de:	f7ff ffc3 	bl	d6468 <_ZN5Print5writeEPKc>
}
   d64e2:	b00b      	add	sp, #44	; 0x2c
   d64e4:	bd30      	pop	{r4, r5, pc}

000d64e6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d64e6:	b40c      	push	{r2, r3}
   d64e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d64ec:	b087      	sub	sp, #28
   d64ee:	af00      	add	r7, sp, #0
   d64f0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d64f4:	4605      	mov	r5, r0
   d64f6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d64fa:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d64fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d64fe:	4623      	mov	r3, r4
   d6500:	464a      	mov	r2, r9
   d6502:	2114      	movs	r1, #20
   d6504:	1d38      	adds	r0, r7, #4
   d6506:	f7fe fe01 	bl	d510c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d650a:	2813      	cmp	r0, #19
   d650c:	d805      	bhi.n	d651a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d650e:	1d39      	adds	r1, r7, #4
   d6510:	4628      	mov	r0, r5
   d6512:	f7ff ffa9 	bl	d6468 <_ZN5Print5writeEPKc>
   d6516:	4604      	mov	r4, r0
   d6518:	e013      	b.n	d6542 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d651a:	f100 0308 	add.w	r3, r0, #8
   d651e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6522:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6524:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6528:	1c41      	adds	r1, r0, #1
   d652a:	4623      	mov	r3, r4
   d652c:	464a      	mov	r2, r9
   d652e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6530:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6532:	f7fe fdeb 	bl	d510c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6536:	4669      	mov	r1, sp
   d6538:	4628      	mov	r0, r5
   d653a:	f7ff ff95 	bl	d6468 <_ZN5Print5writeEPKc>
   d653e:	4604      	mov	r4, r0
   d6540:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6542:	b11e      	cbz	r6, d654c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6544:	4628      	mov	r0, r5
   d6546:	f7ff ffa2 	bl	d648e <_ZN5Print7printlnEv>
   d654a:	4404      	add	r4, r0
    return n;
}
   d654c:	4620      	mov	r0, r4
   d654e:	371c      	adds	r7, #28
   d6550:	46bd      	mov	sp, r7
   d6552:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6556:	b002      	add	sp, #8
   d6558:	4770      	bx	lr

000d655a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d655a:	6880      	ldr	r0, [r0, #8]
   d655c:	6803      	ldr	r3, [r0, #0]
   d655e:	68db      	ldr	r3, [r3, #12]
   d6560:	4718      	bx	r3

000d6562 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6562:	4770      	bx	lr

000d6564 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6564:	b119      	cbz	r1, d656e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6566:	680b      	ldr	r3, [r1, #0]
   d6568:	4608      	mov	r0, r1
   d656a:	685b      	ldr	r3, [r3, #4]
   d656c:	4718      	bx	r3
   d656e:	4770      	bx	lr

000d6570 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6570:	b119      	cbz	r1, d657a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6572:	680b      	ldr	r3, [r1, #0]
   d6574:	4608      	mov	r0, r1
   d6576:	685b      	ldr	r3, [r3, #4]
   d6578:	4718      	bx	r3
   d657a:	4770      	bx	lr

000d657c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d657c:	4770      	bx	lr

000d657e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d657e:	4770      	bx	lr

000d6580 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d6580:	4770      	bx	lr

000d6582 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6582:	b538      	push	{r3, r4, r5, lr}
   d6584:	4604      	mov	r4, r0
   d6586:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6588:	6800      	ldr	r0, [r0, #0]
   d658a:	212e      	movs	r1, #46	; 0x2e
   d658c:	f002 ff1c 	bl	d93c8 <strchrnul>
    size = s - category;
   d6590:	6823      	ldr	r3, [r4, #0]
   d6592:	1ac3      	subs	r3, r0, r3
   d6594:	602b      	str	r3, [r5, #0]
    if (size) {
   d6596:	b123      	cbz	r3, d65a2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6598:	7803      	ldrb	r3, [r0, #0]
   d659a:	b103      	cbz	r3, d659e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d659c:	3001      	adds	r0, #1
   d659e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d65a0:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d65a2:	4618      	mov	r0, r3
}
   d65a4:	bd38      	pop	{r3, r4, r5, pc}

000d65a6 <_ZN5spark16JSONStreamWriterD0Ev>:
   d65a6:	b510      	push	{r4, lr}
   d65a8:	210c      	movs	r1, #12
   d65aa:	4604      	mov	r4, r0
   d65ac:	f002 f942 	bl	d8834 <_ZdlPvj>
   d65b0:	4620      	mov	r0, r4
   d65b2:	bd10      	pop	{r4, pc}

000d65b4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d65b4:	b510      	push	{r4, lr}
   d65b6:	2104      	movs	r1, #4
   d65b8:	4604      	mov	r4, r0
   d65ba:	f002 f93b 	bl	d8834 <_ZdlPvj>
   d65be:	4620      	mov	r0, r4
   d65c0:	bd10      	pop	{r4, pc}

000d65c2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d65c2:	b510      	push	{r4, lr}
   d65c4:	2104      	movs	r1, #4
   d65c6:	4604      	mov	r4, r0
   d65c8:	f002 f934 	bl	d8834 <_ZdlPvj>
   d65cc:	4620      	mov	r0, r4
   d65ce:	bd10      	pop	{r4, pc}

000d65d0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d65d0:	b538      	push	{r3, r4, r5, lr}
   d65d2:	460c      	mov	r4, r1
   d65d4:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d65d6:	f001 fc0f 	bl	d7df8 <_Z16_fetch_usbserialv>
   d65da:	4284      	cmp	r4, r0
   d65dc:	d00d      	beq.n	d65fa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d65de:	f001 fc9b 	bl	d7f18 <_Z22__fetch_global_Serial1v>
   d65e2:	4284      	cmp	r4, r0
   d65e4:	d105      	bne.n	d65f2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d65e6:	f001 fc97 	bl	d7f18 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d65ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d65ee:	f001 bc8c 	b.w	d7f0a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d65f2:	4621      	mov	r1, r4
   d65f4:	4628      	mov	r0, r5
   d65f6:	f7ff ffbb 	bl	d6570 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d65fa:	bd38      	pop	{r3, r4, r5, pc}

000d65fc <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d65fc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d65fe:	f002 feed 	bl	d93dc <strcmp>
}
   d6602:	fab0 f080 	clz	r0, r0
   d6606:	0940      	lsrs	r0, r0, #5
   d6608:	bd08      	pop	{r3, pc}

000d660a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d660a:	b538      	push	{r3, r4, r5, lr}
   d660c:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d660e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6610:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d6612:	f002 ff08 	bl	d9426 <strlen>
   d6616:	4621      	mov	r1, r4
   d6618:	4602      	mov	r2, r0
   d661a:	4628      	mov	r0, r5
}
   d661c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6620:	f001 bff9 	b.w	d8616 <_ZN5spark10JSONWriter5valueEPKcj>

000d6624 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6624:	6800      	ldr	r0, [r0, #0]
   d6626:	f7fe bb85 	b.w	d4d34 <os_mutex_recursive_lock>

000d662a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d662a:	b570      	push	{r4, r5, r6, lr}
   d662c:	4604      	mov	r4, r0
    write(str, strlen(str));
   d662e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6630:	460d      	mov	r5, r1
    write(str, strlen(str));
   d6632:	f002 fef8 	bl	d9426 <strlen>
   d6636:	6823      	ldr	r3, [r4, #0]
   d6638:	4602      	mov	r2, r0
   d663a:	4629      	mov	r1, r5
   d663c:	4620      	mov	r0, r4
   d663e:	68db      	ldr	r3, [r3, #12]
}
   d6640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6644:	4718      	bx	r3

000d6646 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6646:	b513      	push	{r0, r1, r4, lr}
   d6648:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d664a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d664c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6650:	68d4      	ldr	r4, [r2, #12]
   d6652:	4619      	mov	r1, r3
   d6654:	2201      	movs	r2, #1
   d6656:	47a0      	blx	r4
}
   d6658:	b002      	add	sp, #8
   d665a:	bd10      	pop	{r4, pc}

000d665c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d665c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6660:	6845      	ldr	r5, [r0, #4]
   d6662:	6807      	ldr	r7, [r0, #0]
   d6664:	b085      	sub	sp, #20
   d6666:	4691      	mov	r9, r2
   d6668:	2214      	movs	r2, #20
   d666a:	4355      	muls	r5, r2
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	10ab      	asrs	r3, r5, #2
   d6670:	4d19      	ldr	r5, [pc, #100]	; (d66d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6672:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6674:	435d      	muls	r5, r3
   d6676:	468b      	mov	fp, r1
   d6678:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d667a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d667c:	2d00      	cmp	r5, #0
   d667e:	9303      	str	r3, [sp, #12]
   d6680:	dd23      	ble.n	d66ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6682:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6684:	106e      	asrs	r6, r5, #1
   d6686:	fb03 f006 	mul.w	r0, r3, r6
   d668a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d668e:	464a      	mov	r2, r9
   d6690:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6694:	5820      	ldr	r0, [r4, r0]
   d6696:	45d1      	cmp	r9, sl
   d6698:	bf28      	it	cs
   d669a:	4652      	movcs	r2, sl
   d669c:	4659      	mov	r1, fp
   d669e:	f002 feca 	bl	d9436 <strncmp>
                if (cmp == 0) {
   d66a2:	9b03      	ldr	r3, [sp, #12]
   d66a4:	b948      	cbnz	r0, d66ba <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d66a6:	45d1      	cmp	r9, sl
   d66a8:	d103      	bne.n	d66b2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d66aa:	9a01      	ldr	r2, [sp, #4]
   d66ac:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d66ae:	4635      	mov	r5, r6
   d66b0:	e7e4      	b.n	d667c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d66b2:	bf8c      	ite	hi
   d66b4:	2001      	movhi	r0, #1
   d66b6:	2000      	movls	r0, #0
   d66b8:	e000      	b.n	d66bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d66ba:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d66bc:	2800      	cmp	r0, #0
   d66be:	d0f6      	beq.n	d66ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d66c0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d66c2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d66c6:	3e01      	subs	r6, #1
   d66c8:	e7f1      	b.n	d66ae <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d66ca:	1be4      	subs	r4, r4, r7
}
   d66cc:	4802      	ldr	r0, [pc, #8]	; (d66d8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d66ce:	10a4      	asrs	r4, r4, #2
}
   d66d0:	4360      	muls	r0, r4
   d66d2:	b005      	add	sp, #20
   d66d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66d8:	cccccccd 	.word	0xcccccccd

000d66dc <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d66dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d66de:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d66e0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d66e2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d66e4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d66e6:	b313      	cbz	r3, d672e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d66e8:	b309      	cbz	r1, d672e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d66ea:	af04      	add	r7, sp, #16
   d66ec:	2300      	movs	r3, #0
   d66ee:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d66f2:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d66f6:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d66f8:	4639      	mov	r1, r7
   d66fa:	a801      	add	r0, sp, #4
   d66fc:	f7ff ff41 	bl	d6582 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6700:	4601      	mov	r1, r0
   d6702:	b1a0      	cbz	r0, d672e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6704:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d6706:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6708:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d670c:	4620      	mov	r0, r4
   d670e:	f7ff ffa5 	bl	d665c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6712:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6716:	b153      	cbz	r3, d672e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6718:	6823      	ldr	r3, [r4, #0]
   d671a:	2414      	movs	r4, #20
   d671c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6720:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6722:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6726:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6728:	bfa8      	it	ge
   d672a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d672c:	e7e4      	b.n	d66f8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d672e:	4630      	mov	r0, r6
   d6730:	b005      	add	sp, #20
   d6732:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6734 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6734:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6736:	4c09      	ldr	r4, [pc, #36]	; (d675c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6738:	6823      	ldr	r3, [r4, #0]
   d673a:	07db      	lsls	r3, r3, #31
   d673c:	d40b      	bmi.n	d6756 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d673e:	4620      	mov	r0, r4
   d6740:	f7fd fcbc 	bl	d40bc <__cxa_guard_acquire>
   d6744:	b138      	cbz	r0, d6756 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6746:	4620      	mov	r0, r4
   d6748:	f7fd fcbd 	bl	d40c6 <__cxa_guard_release>
   d674c:	4a04      	ldr	r2, [pc, #16]	; (d6760 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d674e:	4905      	ldr	r1, [pc, #20]	; (d6764 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6750:	4805      	ldr	r0, [pc, #20]	; (d6768 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6752:	f002 f861 	bl	d8818 <__aeabi_atexit>
    return &factory;
}
   d6756:	4804      	ldr	r0, [pc, #16]	; (d6768 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6758:	bd10      	pop	{r4, pc}
   d675a:	bf00      	nop
   d675c:	2003e3b4 	.word	0x2003e3b4
   d6760:	2003e308 	.word	0x2003e308
   d6764:	000d657f 	.word	0x000d657f
   d6768:	2003e298 	.word	0x2003e298

000d676c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d676c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d676e:	4c09      	ldr	r4, [pc, #36]	; (d6794 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6770:	6823      	ldr	r3, [r4, #0]
   d6772:	07db      	lsls	r3, r3, #31
   d6774:	d40b      	bmi.n	d678e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6776:	4620      	mov	r0, r4
   d6778:	f7fd fca0 	bl	d40bc <__cxa_guard_acquire>
   d677c:	b138      	cbz	r0, d678e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d677e:	4620      	mov	r0, r4
   d6780:	f7fd fca1 	bl	d40c6 <__cxa_guard_release>
   d6784:	4a04      	ldr	r2, [pc, #16]	; (d6798 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6786:	4905      	ldr	r1, [pc, #20]	; (d679c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6788:	4805      	ldr	r0, [pc, #20]	; (d67a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d678a:	f002 f845 	bl	d8818 <__aeabi_atexit>
    return &factory;
}
   d678e:	4804      	ldr	r0, [pc, #16]	; (d67a0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6790:	bd10      	pop	{r4, pc}
   d6792:	bf00      	nop
   d6794:	2003e3e4 	.word	0x2003e3e4
   d6798:	2003e308 	.word	0x2003e308
   d679c:	000d657d 	.word	0x000d657d
   d67a0:	2003e294 	.word	0x2003e294

000d67a4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d67a4:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d67a6:	2500      	movs	r5, #0
   d67a8:	4604      	mov	r4, r0
   d67aa:	6005      	str	r5, [r0, #0]
   d67ac:	6045      	str	r5, [r0, #4]
   d67ae:	6085      	str	r5, [r0, #8]
   d67b0:	6105      	str	r5, [r0, #16]
   d67b2:	6145      	str	r5, [r0, #20]
   d67b4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d67b6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d67ba:	f7fe faab 	bl	d4d14 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d67be:	f7ff ffb9 	bl	d6734 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d67c2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d67c4:	f7ff ffd2 	bl	d676c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d67c8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d67ca:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d67cc:	4620      	mov	r0, r4
   d67ce:	bd38      	pop	{r3, r4, r5, pc}

000d67d0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d67d0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d67d2:	4c0a      	ldr	r4, [pc, #40]	; (d67fc <_ZN5spark10LogManager8instanceEv+0x2c>)
   d67d4:	6823      	ldr	r3, [r4, #0]
   d67d6:	07db      	lsls	r3, r3, #31
   d67d8:	d40e      	bmi.n	d67f8 <_ZN5spark10LogManager8instanceEv+0x28>
   d67da:	4620      	mov	r0, r4
   d67dc:	f7fd fc6e 	bl	d40bc <__cxa_guard_acquire>
   d67e0:	b150      	cbz	r0, d67f8 <_ZN5spark10LogManager8instanceEv+0x28>
   d67e2:	4807      	ldr	r0, [pc, #28]	; (d6800 <_ZN5spark10LogManager8instanceEv+0x30>)
   d67e4:	f7ff ffde 	bl	d67a4 <_ZN5spark10LogManagerC1Ev>
   d67e8:	4620      	mov	r0, r4
   d67ea:	f7fd fc6c 	bl	d40c6 <__cxa_guard_release>
   d67ee:	4a05      	ldr	r2, [pc, #20]	; (d6804 <_ZN5spark10LogManager8instanceEv+0x34>)
   d67f0:	4905      	ldr	r1, [pc, #20]	; (d6808 <_ZN5spark10LogManager8instanceEv+0x38>)
   d67f2:	4803      	ldr	r0, [pc, #12]	; (d6800 <_ZN5spark10LogManager8instanceEv+0x30>)
   d67f4:	f002 f810 	bl	d8818 <__aeabi_atexit>
    return &mgr;
}
   d67f8:	4801      	ldr	r0, [pc, #4]	; (d6800 <_ZN5spark10LogManager8instanceEv+0x30>)
   d67fa:	bd10      	pop	{r4, pc}
   d67fc:	2003e3b8 	.word	0x2003e3b8
   d6800:	2003e3bc 	.word	0x2003e3bc
   d6804:	2003e308 	.word	0x2003e308
   d6808:	000d6c3b 	.word	0x000d6c3b

000d680c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d680c:	2300      	movs	r3, #0
   d680e:	4a02      	ldr	r2, [pc, #8]	; (d6818 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6810:	4902      	ldr	r1, [pc, #8]	; (d681c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6812:	4803      	ldr	r0, [pc, #12]	; (d6820 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6814:	f7fe bb96 	b.w	d4f44 <log_set_callbacks>
   d6818:	000d6b1d 	.word	0x000d6b1d
   d681c:	000d6aad 	.word	0x000d6aad
   d6820:	000d6a35 	.word	0x000d6a35

000d6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6824:	2300      	movs	r3, #0
   d6826:	461a      	mov	r2, r3
   d6828:	4619      	mov	r1, r3
   d682a:	4618      	mov	r0, r3
   d682c:	f7fe bb8a 	b.w	d4f44 <log_set_callbacks>

000d6830 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6830:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6832:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6834:	688e      	ldr	r6, [r1, #8]
   d6836:	f851 3b04 	ldr.w	r3, [r1], #4
   d683a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d683e:	4605      	mov	r5, r0
   d6840:	a801      	add	r0, sp, #4
   d6842:	f7ff f91f 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6846:	4622      	mov	r2, r4
   d6848:	4631      	mov	r1, r6
   d684a:	4628      	mov	r0, r5
   d684c:	f001 ff1a 	bl	d8684 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6850:	a801      	add	r0, sp, #4
   d6852:	f7fd fd37 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6856:	4628      	mov	r0, r5
   d6858:	b002      	add	sp, #8
   d685a:	bd70      	pop	{r4, r5, r6, pc}

000d685c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d685c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d685e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6860:	690e      	ldr	r6, [r1, #16]
   d6862:	f851 3b04 	ldr.w	r3, [r1], #4
   d6866:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d686a:	4605      	mov	r5, r0
   d686c:	a801      	add	r0, sp, #4
   d686e:	f7ff f909 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6872:	4622      	mov	r2, r4
   d6874:	4631      	mov	r1, r6
   d6876:	4628      	mov	r0, r5
   d6878:	f001 ff1f 	bl	d86ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d687c:	a801      	add	r0, sp, #4
   d687e:	f7fd fd21 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6882:	4628      	mov	r0, r5
   d6884:	b002      	add	sp, #8
   d6886:	bd70      	pop	{r4, r5, r6, pc}

000d6888 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6888:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d688a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d688c:	68ce      	ldr	r6, [r1, #12]
   d688e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6892:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6896:	4605      	mov	r5, r0
   d6898:	a801      	add	r0, sp, #4
   d689a:	f7ff f8f3 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d689e:	4622      	mov	r2, r4
   d68a0:	4631      	mov	r1, r6
   d68a2:	4628      	mov	r0, r5
   d68a4:	f001 fec6 	bl	d8634 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d68a8:	a801      	add	r0, sp, #4
   d68aa:	f7fd fd0b 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d68ae:	4628      	mov	r0, r5
   d68b0:	b002      	add	sp, #8
   d68b2:	bd70      	pop	{r4, r5, r6, pc}

000d68b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d68b4:	b530      	push	{r4, r5, lr}
   d68b6:	b08b      	sub	sp, #44	; 0x2c
   d68b8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d68ba:	4601      	mov	r1, r0
   d68bc:	a804      	add	r0, sp, #16
   d68be:	f7ff ffb7 	bl	d6830 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d68c2:	a804      	add	r0, sp, #16
   d68c4:	f001 fde9 	bl	d849a <_ZN5spark18JSONObjectIterator4nextEv>
   d68c8:	b1e8      	cbz	r0, d6906 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d68ca:	a904      	add	r1, sp, #16
   d68cc:	4668      	mov	r0, sp
   d68ce:	f7ff ffdb 	bl	d6888 <_ZNK5spark18JSONObjectIterator4nameEv>
   d68d2:	490f      	ldr	r1, [pc, #60]	; (d6910 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d68d4:	9802      	ldr	r0, [sp, #8]
   d68d6:	f7ff fe91 	bl	d65fc <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d68da:	4604      	mov	r4, r0
   d68dc:	b110      	cbz	r0, d68e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d68de:	1c2c      	adds	r4, r5, #0
   d68e0:	bf18      	it	ne
   d68e2:	2401      	movne	r4, #1
   d68e4:	a801      	add	r0, sp, #4
   d68e6:	f7fd fced 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68ea:	2c00      	cmp	r4, #0
   d68ec:	d0e9      	beq.n	d68c2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d68ee:	a904      	add	r1, sp, #16
   d68f0:	4668      	mov	r0, sp
   d68f2:	f7ff ffb3 	bl	d685c <_ZNK5spark18JSONObjectIterator5valueEv>
   d68f6:	4668      	mov	r0, sp
   d68f8:	f001 fdaf 	bl	d845a <_ZNK5spark9JSONValue5toIntEv>
   d68fc:	6028      	str	r0, [r5, #0]
   d68fe:	a801      	add	r0, sp, #4
   d6900:	f7fd fce0 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6904:	e7dd      	b.n	d68c2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6906:	a805      	add	r0, sp, #20
   d6908:	f7fd fcdc 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d690c:	b00b      	add	sp, #44	; 0x2c
   d690e:	bd30      	pop	{r4, r5, pc}
   d6910:	000d99e8 	.word	0x000d99e8

000d6914 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6914:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6916:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6918:	4620      	mov	r0, r4
   d691a:	4913      	ldr	r1, [pc, #76]	; (d6968 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d691c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d691e:	f002 fd5d 	bl	d93dc <strcmp>
   d6922:	b940      	cbnz	r0, d6936 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6924:	f001 fa68 	bl	d7df8 <_Z16_fetch_usbserialv>
   d6928:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d692c:	f001 fa54 	bl	d7dd8 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6930:	f001 fa62 	bl	d7df8 <_Z16_fetch_usbserialv>
   d6934:	e015      	b.n	d6962 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6936:	490d      	ldr	r1, [pc, #52]	; (d696c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6938:	4620      	mov	r0, r4
   d693a:	f002 fd4f 	bl	d93dc <strcmp>
   d693e:	b978      	cbnz	r0, d6960 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6940:	a902      	add	r1, sp, #8
   d6942:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6946:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d694a:	4628      	mov	r0, r5
   d694c:	f7ff ffb2 	bl	d68b4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6950:	f001 fae2 	bl	d7f18 <_Z22__fetch_global_Serial1v>
   d6954:	9901      	ldr	r1, [sp, #4]
   d6956:	f001 fad5 	bl	d7f04 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d695a:	f001 fadd 	bl	d7f18 <_Z22__fetch_global_Serial1v>
   d695e:	e000      	b.n	d6962 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6960:	2000      	movs	r0, #0
}
   d6962:	b003      	add	sp, #12
   d6964:	bd30      	pop	{r4, r5, pc}
   d6966:	bf00      	nop
   d6968:	000d99ed 	.word	0x000d99ed
   d696c:	000d99f4 	.word	0x000d99f4

000d6970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6970:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6972:	6804      	ldr	r4, [r0, #0]
   d6974:	6843      	ldr	r3, [r0, #4]
   d6976:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6978:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d697a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d697e:	42a6      	cmp	r6, r4
   d6980:	d005      	beq.n	d698e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6982:	f104 0008 	add.w	r0, r4, #8
   d6986:	f7ff fff3 	bl	d6970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d698a:	3414      	adds	r4, #20
   d698c:	e7f7      	b.n	d697e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d698e:	6828      	ldr	r0, [r5, #0]
   d6990:	f7fe fba4 	bl	d50dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6994:	4628      	mov	r0, r5
   d6996:	bd70      	pop	{r4, r5, r6, pc}

000d6998 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6998:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d699a:	6804      	ldr	r4, [r0, #0]
   d699c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d699e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d69a0:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d69a4:	42a6      	cmp	r6, r4
   d69a6:	d004      	beq.n	d69b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d69a8:	4620      	mov	r0, r4
   d69aa:	f7fe fc3d 	bl	d5228 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d69ae:	3410      	adds	r4, #16
   d69b0:	e7f8      	b.n	d69a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d69b2:	6828      	ldr	r0, [r5, #0]
   d69b4:	f7fe fb92 	bl	d50dc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d69b8:	4628      	mov	r0, r5
   d69ba:	bd70      	pop	{r4, r5, r6, pc}

000d69bc <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d69bc:	b510      	push	{r4, lr}
   d69be:	4604      	mov	r4, r0
   d69c0:	300c      	adds	r0, #12
   d69c2:	f7ff ffd5 	bl	d6970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d69c6:	4620      	mov	r0, r4
   d69c8:	f7ff ffe6 	bl	d6998 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d69cc:	4620      	mov	r0, r4
   d69ce:	bd10      	pop	{r4, pc}

000d69d0 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d69d0:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d69d2:	4b04      	ldr	r3, [pc, #16]	; (d69e4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d69d4:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d69d6:	f840 3b04 	str.w	r3, [r0], #4
   d69da:	f7ff ffef 	bl	d69bc <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d69de:	4620      	mov	r0, r4
   d69e0:	bd10      	pop	{r4, pc}
   d69e2:	bf00      	nop
   d69e4:	000d95dc 	.word	0x000d95dc

000d69e8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d69e8:	b510      	push	{r4, lr}
   d69ea:	4604      	mov	r4, r0
   d69ec:	f7ff fff0 	bl	d69d0 <_ZN5spark16StreamLogHandlerD1Ev>
   d69f0:	4620      	mov	r0, r4
   d69f2:	2124      	movs	r1, #36	; 0x24
   d69f4:	f001 ff1e 	bl	d8834 <_ZdlPvj>
   d69f8:	4620      	mov	r0, r4
   d69fa:	bd10      	pop	{r4, pc}

000d69fc <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d69fc:	b510      	push	{r4, lr}
   d69fe:	4b03      	ldr	r3, [pc, #12]	; (d6a0c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6a00:	6003      	str	r3, [r0, #0]
   d6a02:	4604      	mov	r4, r0
   d6a04:	f7ff ffe4 	bl	d69d0 <_ZN5spark16StreamLogHandlerD1Ev>
   d6a08:	4620      	mov	r0, r4
   d6a0a:	bd10      	pop	{r4, pc}
   d6a0c:	000d99d8 	.word	0x000d99d8

000d6a10 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6a10:	b510      	push	{r4, lr}
   d6a12:	4604      	mov	r4, r0
   d6a14:	f7ff fff2 	bl	d69fc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6a18:	4620      	mov	r0, r4
   d6a1a:	2124      	movs	r1, #36	; 0x24
   d6a1c:	f001 ff0a 	bl	d8834 <_ZdlPvj>
   d6a20:	4620      	mov	r0, r4
   d6a22:	bd10      	pop	{r4, pc}

000d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6a24:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6a26:	6803      	ldr	r3, [r0, #0]
   d6a28:	4604      	mov	r4, r0
   d6a2a:	6818      	ldr	r0, [r3, #0]
   d6a2c:	f7fe f98a 	bl	d4d44 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6a30:	4620      	mov	r0, r4
   d6a32:	bd10      	pop	{r4, pc}

000d6a34 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6a38:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6a3a:	4b1b      	ldr	r3, [pc, #108]	; (d6aa8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6a3c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6a42:	b085      	sub	sp, #20
   d6a44:	4682      	mov	sl, r0
   d6a46:	460e      	mov	r6, r1
   d6a48:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6a4a:	bb53      	cbnz	r3, d6aa2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6a4c:	f7ff fec0 	bl	d67d0 <_ZN5spark10LogManager8instanceEv>
   d6a50:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6a52:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6a54:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6a56:	f7ff fde5 	bl	d6624 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6a5a:	7b23      	ldrb	r3, [r4, #12]
   d6a5c:	b9f3      	cbnz	r3, d6a9c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6a5e:	2301      	movs	r3, #1
   d6a60:	7323      	strb	r3, [r4, #12]
   d6a62:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6a64:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6a66:	b2f6      	uxtb	r6, r6
   d6a68:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6a6c:	454d      	cmp	r5, r9
   d6a6e:	d013      	beq.n	d6a98 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6a70:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6a74:	4641      	mov	r1, r8
   d6a76:	1d38      	adds	r0, r7, #4
   d6a78:	f7ff fe30 	bl	d66dc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6a7c:	4286      	cmp	r6, r0
   d6a7e:	d3f5      	bcc.n	d6a6c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6a80:	683b      	ldr	r3, [r7, #0]
   d6a82:	f8cd b000 	str.w	fp, [sp]
   d6a86:	689b      	ldr	r3, [r3, #8]
   d6a88:	469e      	mov	lr, r3
   d6a8a:	4638      	mov	r0, r7
   d6a8c:	4643      	mov	r3, r8
   d6a8e:	4632      	mov	r2, r6
   d6a90:	4651      	mov	r1, sl
   d6a92:	4677      	mov	r7, lr
   d6a94:	47b8      	blx	r7
   d6a96:	e7e9      	b.n	d6a6c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6a98:	2300      	movs	r3, #0
   d6a9a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6a9c:	a803      	add	r0, sp, #12
   d6a9e:	f7ff ffc1 	bl	d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6aa2:	b005      	add	sp, #20
   d6aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6aa8:	e000ed00 	.word	0xe000ed00

000d6aac <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6aac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ab0:	4699      	mov	r9, r3
   d6ab2:	4b19      	ldr	r3, [pc, #100]	; (d6b18 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6ab4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6ab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6aba:	4607      	mov	r7, r0
   d6abc:	4688      	mov	r8, r1
   d6abe:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6ac0:	bb33      	cbnz	r3, d6b10 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6ac2:	f7ff fe85 	bl	d67d0 <_ZN5spark10LogManager8instanceEv>
   d6ac6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6ac8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6aca:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6acc:	f7ff fdaa 	bl	d6624 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6ad0:	7b23      	ldrb	r3, [r4, #12]
   d6ad2:	b9d3      	cbnz	r3, d6b0a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6ad4:	2301      	movs	r3, #1
   d6ad6:	7323      	strb	r3, [r4, #12]
   d6ad8:	6825      	ldr	r5, [r4, #0]
   d6ada:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6adc:	fa5f fb86 	uxtb.w	fp, r6
   d6ae0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6ae4:	4555      	cmp	r5, sl
   d6ae6:	d00e      	beq.n	d6b06 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6ae8:	f855 6b04 	ldr.w	r6, [r5], #4
   d6aec:	4649      	mov	r1, r9
   d6aee:	1d30      	adds	r0, r6, #4
   d6af0:	f7ff fdf4 	bl	d66dc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6af4:	4583      	cmp	fp, r0
   d6af6:	d3f5      	bcc.n	d6ae4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6af8:	6833      	ldr	r3, [r6, #0]
   d6afa:	4642      	mov	r2, r8
   d6afc:	68db      	ldr	r3, [r3, #12]
   d6afe:	4639      	mov	r1, r7
   d6b00:	4630      	mov	r0, r6
   d6b02:	4798      	blx	r3
   d6b04:	e7ee      	b.n	d6ae4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6b06:	2300      	movs	r3, #0
   d6b08:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6b0a:	a801      	add	r0, sp, #4
   d6b0c:	f7ff ff8a 	bl	d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6b10:	b003      	add	sp, #12
   d6b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6b16:	bf00      	nop
   d6b18:	e000ed00 	.word	0xe000ed00

000d6b1c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6b1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6b20:	4b15      	ldr	r3, [pc, #84]	; (d6b78 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6b22:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6b28:	4604      	mov	r4, r0
   d6b2a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6b2c:	b9fb      	cbnz	r3, d6b6e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6b2e:	f7ff fe4f 	bl	d67d0 <_ZN5spark10LogManager8instanceEv>
   d6b32:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6b34:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6b36:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6b38:	f7ff fd74 	bl	d6624 <_ZN14RecursiveMutex4lockEv>
   d6b3c:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6b40:	2646      	movs	r6, #70	; 0x46
   d6b42:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6b46:	42af      	cmp	r7, r5
   d6b48:	d107      	bne.n	d6b5a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6b4a:	a801      	add	r0, sp, #4
   d6b4c:	f7ff ff6a 	bl	d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6b50:	42b4      	cmp	r4, r6
   d6b52:	bfb4      	ite	lt
   d6b54:	2000      	movlt	r0, #0
   d6b56:	2001      	movge	r0, #1
   d6b58:	e00a      	b.n	d6b70 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6b5a:	f855 0b04 	ldr.w	r0, [r5], #4
   d6b5e:	4641      	mov	r1, r8
   d6b60:	3004      	adds	r0, #4
   d6b62:	f7ff fdbb 	bl	d66dc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6b66:	4286      	cmp	r6, r0
   d6b68:	bfa8      	it	ge
   d6b6a:	4606      	movge	r6, r0
   d6b6c:	e7eb      	b.n	d6b46 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6b6e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6b70:	b002      	add	sp, #8
   d6b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b76:	bf00      	nop
   d6b78:	e000ed00 	.word	0xe000ed00

000d6b7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6b7c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d6b7e:	6803      	ldr	r3, [r0, #0]
   d6b80:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6b82:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6b84:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6b88:	429a      	cmp	r2, r3
   d6b8a:	4618      	mov	r0, r3
   d6b8c:	d00e      	beq.n	d6bac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d6b8e:	6806      	ldr	r6, [r0, #0]
   d6b90:	680d      	ldr	r5, [r1, #0]
   d6b92:	42ae      	cmp	r6, r5
   d6b94:	f103 0304 	add.w	r3, r3, #4
   d6b98:	d1f6      	bne.n	d6b88 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6b9a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6b9c:	1a52      	subs	r2, r2, r1
   d6b9e:	f002 fbb9 	bl	d9314 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6ba2:	6863      	ldr	r3, [r4, #4]
   d6ba4:	3b01      	subs	r3, #1
   d6ba6:	6063      	str	r3, [r4, #4]
    return true;
   d6ba8:	2001      	movs	r0, #1
}
   d6baa:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6bac:	2000      	movs	r0, #0
   d6bae:	bd70      	pop	{r4, r5, r6, pc}

000d6bb0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6bb2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6bb4:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6bb6:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6bb8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6bba:	f7ff fd33 	bl	d6624 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6bbe:	a901      	add	r1, sp, #4
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	f7ff ffdb 	bl	d6b7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6bc6:	b920      	cbnz	r0, d6bd2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6bc8:	a803      	add	r0, sp, #12
   d6bca:	f7ff ff2b 	bl	d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6bce:	b004      	add	sp, #16
   d6bd0:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6bd2:	6863      	ldr	r3, [r4, #4]
   d6bd4:	2b00      	cmp	r3, #0
   d6bd6:	d1f7      	bne.n	d6bc8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6bd8:	f7ff fe24 	bl	d6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6bdc:	e7f4      	b.n	d6bc8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6bde <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6bde:	b570      	push	{r4, r5, r6, lr}
   d6be0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6be2:	6943      	ldr	r3, [r0, #20]
   d6be4:	2618      	movs	r6, #24
   d6be6:	4604      	mov	r4, r0
   d6be8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6bec:	42ae      	cmp	r6, r5
   d6bee:	d015      	beq.n	d6c1c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6bf0:	f105 0110 	add.w	r1, r5, #16
   d6bf4:	4620      	mov	r0, r4
   d6bf6:	f7ff ffc1 	bl	d6b7c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6bfa:	6863      	ldr	r3, [r4, #4]
   d6bfc:	b90b      	cbnz	r3, d6c02 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6bfe:	f7ff fe11 	bl	d6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6c02:	69e0      	ldr	r0, [r4, #28]
   d6c04:	6929      	ldr	r1, [r5, #16]
   d6c06:	6803      	ldr	r3, [r0, #0]
   d6c08:	68db      	ldr	r3, [r3, #12]
   d6c0a:	4798      	blx	r3
        if (h.stream) {
   d6c0c:	6969      	ldr	r1, [r5, #20]
   d6c0e:	b119      	cbz	r1, d6c18 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6c10:	6a20      	ldr	r0, [r4, #32]
   d6c12:	6803      	ldr	r3, [r0, #0]
   d6c14:	68db      	ldr	r3, [r3, #12]
   d6c16:	4798      	blx	r3
   d6c18:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6c1a:	e7e7      	b.n	d6bec <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6c1c:	6925      	ldr	r5, [r4, #16]
   d6c1e:	6963      	ldr	r3, [r4, #20]
   d6c20:	2618      	movs	r6, #24
   d6c22:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c26:	42b5      	cmp	r5, r6
   d6c28:	d004      	beq.n	d6c34 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6c2a:	4628      	mov	r0, r5
   d6c2c:	f7fe fafc 	bl	d5228 <_ZN6StringD1Ev>
   d6c30:	3518      	adds	r5, #24
   d6c32:	e7f8      	b.n	d6c26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6c34:	2300      	movs	r3, #0
   d6c36:	6163      	str	r3, [r4, #20]
   d6c38:	bd70      	pop	{r4, r5, r6, pc}

000d6c3a <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6c3a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6c3c:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6c3e:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6c40:	f7ff fdf0 	bl	d6824 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6c44:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6c48:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6c4c:	f7ff fcea 	bl	d6624 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6c50:	4620      	mov	r0, r4
   d6c52:	f7ff ffc4 	bl	d6bde <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6c56:	4628      	mov	r0, r5
   d6c58:	f7ff fee4 	bl	d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6c5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6c5e:	b108      	cbz	r0, d6c64 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6c60:	f7fe f860 	bl	d4d24 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6c64:	6925      	ldr	r5, [r4, #16]
   d6c66:	6963      	ldr	r3, [r4, #20]
   d6c68:	2618      	movs	r6, #24
   d6c6a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c6e:	42b5      	cmp	r5, r6
   d6c70:	d004      	beq.n	d6c7c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6c72:	4628      	mov	r0, r5
   d6c74:	f7fe fad8 	bl	d5228 <_ZN6StringD1Ev>
   d6c78:	3518      	adds	r5, #24
   d6c7a:	e7f8      	b.n	d6c6e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6c7c:	6920      	ldr	r0, [r4, #16]
   d6c7e:	f7fe fa2d 	bl	d50dc <free>
   d6c82:	6820      	ldr	r0, [r4, #0]
   d6c84:	f7fe fa2a 	bl	d50dc <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6c88:	4620      	mov	r0, r4
   d6c8a:	b002      	add	sp, #8
   d6c8c:	bd70      	pop	{r4, r5, r6, pc}

000d6c8e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c8e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6c90:	680a      	ldr	r2, [r1, #0]
   d6c92:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c94:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c96:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6c98:	684a      	ldr	r2, [r1, #4]
   d6c9a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c9c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6c9e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6ca0:	688a      	ldr	r2, [r1, #8]
   d6ca2:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ca4:	608b      	str	r3, [r1, #8]
   d6ca6:	4770      	bx	lr

000d6ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6ca8:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6caa:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6cac:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6cae:	6003      	str	r3, [r0, #0]
   d6cb0:	6043      	str	r3, [r0, #4]
   d6cb2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6cb4:	f7ff ffeb 	bl	d6c8e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6cb8:	4620      	mov	r0, r4
   d6cba:	bd10      	pop	{r4, pc}

000d6cbc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6cbc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cc0:	4604      	mov	r4, r0
   d6cc2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6cc4:	d925      	bls.n	d6d12 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6cc6:	4290      	cmp	r0, r2
   d6cc8:	d224      	bcs.n	d6d14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6cca:	1a55      	subs	r5, r2, r1
   d6ccc:	3d14      	subs	r5, #20
   d6cce:	442c      	add	r4, r5
   d6cd0:	f1a1 0714 	sub.w	r7, r1, #20
   d6cd4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6cd8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6cda:	f1a5 0308 	sub.w	r3, r5, #8
   d6cde:	429f      	cmp	r7, r3
   d6ce0:	d037      	beq.n	d6d52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6ce2:	b184      	cbz	r4, d6d06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6ce4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6ce8:	6023      	str	r3, [r4, #0]
   d6cea:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6cee:	80a3      	strh	r3, [r4, #4]
   d6cf0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6cf4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6cf6:	60a6      	str	r6, [r4, #8]
   d6cf8:	60e6      	str	r6, [r4, #12]
   d6cfa:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6cfc:	4629      	mov	r1, r5
   d6cfe:	f104 0008 	add.w	r0, r4, #8
   d6d02:	f7ff ffc4 	bl	d6c8e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6d06:	4628      	mov	r0, r5
   d6d08:	f7ff fe32 	bl	d6970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6d0c:	3c14      	subs	r4, #20
   d6d0e:	3d14      	subs	r5, #20
   d6d10:	e7e3      	b.n	d6cda <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6d12:	d01e      	beq.n	d6d52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6d14:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d18:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6d1a:	f1a5 0308 	sub.w	r3, r5, #8
   d6d1e:	429e      	cmp	r6, r3
   d6d20:	d017      	beq.n	d6d52 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6d22:	b184      	cbz	r4, d6d46 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6d24:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6d28:	6023      	str	r3, [r4, #0]
   d6d2a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6d2e:	80a3      	strh	r3, [r4, #4]
   d6d30:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6d34:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d36:	60a7      	str	r7, [r4, #8]
   d6d38:	60e7      	str	r7, [r4, #12]
   d6d3a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6d3c:	4629      	mov	r1, r5
   d6d3e:	f104 0008 	add.w	r0, r4, #8
   d6d42:	f7ff ffa4 	bl	d6c8e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6d46:	4628      	mov	r0, r5
   d6d48:	f7ff fe12 	bl	d6970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6d4c:	3414      	adds	r4, #20
   d6d4e:	3514      	adds	r5, #20
   d6d50:	e7e3      	b.n	d6d1a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d56:	6845      	ldr	r5, [r0, #4]
   d6d58:	6883      	ldr	r3, [r0, #8]
   d6d5a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6d5c:	4604      	mov	r4, r0
   d6d5e:	460e      	mov	r6, r1
   d6d60:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d62:	db0e      	blt.n	d6d82 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6d64:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6d66:	2d00      	cmp	r5, #0
   d6d68:	dd05      	ble.n	d6d76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6d6a:	00a9      	lsls	r1, r5, #2
   d6d6c:	6800      	ldr	r0, [r0, #0]
   d6d6e:	f7fe f9bd 	bl	d50ec <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6d72:	b920      	cbnz	r0, d6d7e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d76:	6800      	ldr	r0, [r0, #0]
   d6d78:	f7fe f9b0 	bl	d50dc <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6d7c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6d7e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6d80:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d82:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6d84:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d86:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6d8a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d6d8e:	1a52      	subs	r2, r2, r1
   d6d90:	1d08      	adds	r0, r1, #4
   d6d92:	f002 fabf 	bl	d9314 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6d96:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6d9a:	6863      	ldr	r3, [r4, #4]
   d6d9c:	3301      	adds	r3, #1
   d6d9e:	6063      	str	r3, [r4, #4]
   d6da0:	2001      	movs	r0, #1
    return true;
}
   d6da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6da4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6da6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6da8:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6daa:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6dac:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6dae:	f7ff fc39 	bl	d6624 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6db2:	6823      	ldr	r3, [r4, #0]
   d6db4:	6861      	ldr	r1, [r4, #4]
   d6db6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6dba:	4283      	cmp	r3, r0
   d6dbc:	461a      	mov	r2, r3
   d6dbe:	d009      	beq.n	d6dd4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6dc0:	6812      	ldr	r2, [r2, #0]
   d6dc2:	42aa      	cmp	r2, r5
   d6dc4:	f103 0304 	add.w	r3, r3, #4
   d6dc8:	d1f7      	bne.n	d6dba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d6dca:	a801      	add	r0, sp, #4
   d6dcc:	f7ff fe2a 	bl	d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6dd0:	2500      	movs	r5, #0
   d6dd2:	e00e      	b.n	d6df2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6dd4:	462a      	mov	r2, r5
   d6dd6:	4620      	mov	r0, r4
   d6dd8:	f7ff ffbc 	bl	d6d54 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6ddc:	4605      	mov	r5, r0
   d6dde:	2800      	cmp	r0, #0
   d6de0:	d0f3      	beq.n	d6dca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6de2:	6863      	ldr	r3, [r4, #4]
   d6de4:	2b01      	cmp	r3, #1
   d6de6:	d101      	bne.n	d6dec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6de8:	f7ff fd10 	bl	d680c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6dec:	a801      	add	r0, sp, #4
   d6dee:	f7ff fe19 	bl	d6a24 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6df2:	4628      	mov	r0, r5
   d6df4:	b003      	add	sp, #12
   d6df6:	bd30      	pop	{r4, r5, pc}

000d6df8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6df8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6dfc:	4606      	mov	r6, r0
   d6dfe:	460c      	mov	r4, r1
   d6e00:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6e02:	d914      	bls.n	d6e2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6e04:	4290      	cmp	r0, r2
   d6e06:	d213      	bcs.n	d6e30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6e08:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6e0c:	1a6c      	subs	r4, r5, r1
   d6e0e:	f1a1 0710 	sub.w	r7, r1, #16
   d6e12:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6e14:	42af      	cmp	r7, r5
   d6e16:	d018      	beq.n	d6e4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6e18:	b11c      	cbz	r4, d6e22 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6e1a:	4629      	mov	r1, r5
   d6e1c:	4620      	mov	r0, r4
   d6e1e:	f7fe f9f3 	bl	d5208 <_ZN6StringC1EOS_>
                end->~T();
   d6e22:	4628      	mov	r0, r5
   d6e24:	f7fe fa00 	bl	d5228 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6e28:	3d10      	subs	r5, #16
   d6e2a:	3c10      	subs	r4, #16
   d6e2c:	e7f2      	b.n	d6e14 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6e2e:	d00c      	beq.n	d6e4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6e30:	42ac      	cmp	r4, r5
   d6e32:	d00a      	beq.n	d6e4a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6e34:	b11e      	cbz	r6, d6e3e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6e36:	4621      	mov	r1, r4
   d6e38:	4630      	mov	r0, r6
   d6e3a:	f7fe f9e5 	bl	d5208 <_ZN6StringC1EOS_>
                p->~T();
   d6e3e:	4620      	mov	r0, r4
   d6e40:	f7fe f9f2 	bl	d5228 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6e44:	3410      	adds	r4, #16
   d6e46:	3610      	adds	r6, #16
   d6e48:	e7f2      	b.n	d6e30 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6e4c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6e4e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6e50:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6e52:	dd0b      	ble.n	d6e6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6e54:	0130      	lsls	r0, r6, #4
   d6e56:	f7fe f939 	bl	d50cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6e5a:	4604      	mov	r4, r0
   d6e5c:	b170      	cbz	r0, d6e7c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6e5e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6e62:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6e66:	f7ff ffc7 	bl	d6df8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6e6a:	e000      	b.n	d6e6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6e6c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6e6e:	6828      	ldr	r0, [r5, #0]
   d6e70:	f7fe f934 	bl	d50dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6e74:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6e76:	60ae      	str	r6, [r5, #8]
        return true;
   d6e78:	2001      	movs	r0, #1
   d6e7a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6e7c:	bd70      	pop	{r4, r5, r6, pc}

000d6e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6e7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6e82:	2300      	movs	r3, #0
   d6e84:	b095      	sub	sp, #84	; 0x54
   d6e86:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6e88:	2246      	movs	r2, #70	; 0x46
   d6e8a:	6003      	str	r3, [r0, #0]
   d6e8c:	6043      	str	r3, [r0, #4]
   d6e8e:	6083      	str	r3, [r0, #8]
   d6e90:	60c3      	str	r3, [r0, #12]
   d6e92:	6103      	str	r3, [r0, #16]
   d6e94:	6143      	str	r3, [r0, #20]
   d6e96:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6e98:	9102      	str	r1, [sp, #8]
   d6e9a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d6e9e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6ea0:	4299      	cmp	r1, r3
   d6ea2:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6ea4:	9309      	str	r3, [sp, #36]	; 0x24
   d6ea6:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6ea8:	f340 809d 	ble.w	d6fe6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6eac:	a808      	add	r0, sp, #32
   d6eae:	f7ff ffcd 	bl	d6e4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6eb2:	2800      	cmp	r0, #0
   d6eb4:	f040 8097 	bne.w	d6fe6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6eb8:	e08e      	b.n	d6fd8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d6eba:	4621      	mov	r1, r4
   d6ebc:	a80b      	add	r0, sp, #44	; 0x2c
   d6ebe:	f7fe f9a3 	bl	d5208 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6ec2:	a90b      	add	r1, sp, #44	; 0x2c
   d6ec4:	a80f      	add	r0, sp, #60	; 0x3c
   d6ec6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6ec8:	f7fe f99e 	bl	d5208 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6ecc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6ed0:	4299      	cmp	r1, r3
   d6ed2:	f2c0 80ce 	blt.w	d7072 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6ed6:	3101      	adds	r1, #1
   d6ed8:	a808      	add	r0, sp, #32
   d6eda:	f7ff ffb7 	bl	d6e4c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6ede:	2800      	cmp	r0, #0
   d6ee0:	f040 80c7 	bne.w	d7072 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6ee4:	a80f      	add	r0, sp, #60	; 0x3c
   d6ee6:	f7fe f99f 	bl	d5228 <_ZN6StringD1Ev>
   d6eea:	a80b      	add	r0, sp, #44	; 0x2c
   d6eec:	f7fe f99c 	bl	d5228 <_ZN6StringD1Ev>
   d6ef0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6ef2:	42a7      	cmp	r7, r4
   d6ef4:	d1e1      	bne.n	d6eba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6ef6:	2600      	movs	r6, #0
   d6ef8:	960b      	str	r6, [sp, #44]	; 0x2c
   d6efa:	960c      	str	r6, [sp, #48]	; 0x30
   d6efc:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6efe:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6f02:	429e      	cmp	r6, r3
   d6f04:	f280 80a8 	bge.w	d7058 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6f08:	0133      	lsls	r3, r6, #4
   d6f0a:	9a08      	ldr	r2, [sp, #32]
   d6f0c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6f0e:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6f10:	2b00      	cmp	r3, #0
   d6f12:	f000 809f 	beq.w	d7054 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6f16:	2314      	movs	r3, #20
   d6f18:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6f1a:	f8cd 901c 	str.w	r9, [sp, #28]
   d6f1e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6f20:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6f22:	a907      	add	r1, sp, #28
   d6f24:	a806      	add	r0, sp, #24
   d6f26:	f7ff fb2c 	bl	d6582 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6f2a:	4607      	mov	r7, r0
   d6f2c:	2800      	cmp	r0, #0
   d6f2e:	f000 8091 	beq.w	d7054 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6f32:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f34:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6f36:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f3a:	9a07      	ldr	r2, [sp, #28]
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	f7ff fb8d 	bl	d665c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6f42:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f46:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6f48:	f1b8 0f00 	cmp.w	r8, #0
   d6f4c:	d153      	bne.n	d6ff6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6f4e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6f52:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6f56:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6f5a:	970f      	str	r7, [sp, #60]	; 0x3c
   d6f5c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6f60:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6f64:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6f68:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6f6c:	6867      	ldr	r7, [r4, #4]
   d6f6e:	68a3      	ldr	r3, [r4, #8]
   d6f70:	429f      	cmp	r7, r3
   d6f72:	da4f      	bge.n	d7014 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6f74:	9b00      	ldr	r3, [sp, #0]
   d6f76:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d6f7a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f7c:	2214      	movs	r2, #20
   d6f7e:	4353      	muls	r3, r2
   d6f80:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6f84:	fb02 b201 	mla	r2, r2, r1, fp
   d6f88:	f107 0014 	add.w	r0, r7, #20
   d6f8c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6f8e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6f90:	f7ff fe94 	bl	d6cbc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6f94:	b1a7      	cbz	r7, d6fc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6f96:	9b03      	ldr	r3, [sp, #12]
   d6f98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d6f9a:	f84b 2003 	str.w	r2, [fp, r3]
   d6f9e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6fa2:	80bb      	strh	r3, [r7, #4]
   d6fa4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6fa8:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6faa:	f8c7 9008 	str.w	r9, [r7, #8]
   d6fae:	f8c7 900c 	str.w	r9, [r7, #12]
   d6fb2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6fb6:	a911      	add	r1, sp, #68	; 0x44
   d6fb8:	f107 0008 	add.w	r0, r7, #8
   d6fbc:	f7ff fe67 	bl	d6c8e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6fc0:	6863      	ldr	r3, [r4, #4]
   d6fc2:	3301      	adds	r3, #1
   d6fc4:	6063      	str	r3, [r4, #4]
   d6fc6:	a811      	add	r0, sp, #68	; 0x44
   d6fc8:	f7ff fcd2 	bl	d6970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6fcc:	f1b8 0f00 	cmp.w	r8, #0
   d6fd0:	d011      	beq.n	d6ff6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6fd2:	a80b      	add	r0, sp, #44	; 0x2c
   d6fd4:	f7ff fccc 	bl	d6970 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6fd8:	a808      	add	r0, sp, #32
   d6fda:	f7ff fcdd 	bl	d6998 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d6fde:	4628      	mov	r0, r5
   d6fe0:	b015      	add	sp, #84	; 0x54
   d6fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6fe6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6fea:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6fee:	2714      	movs	r7, #20
   d6ff0:	fb07 4703 	mla	r7, r7, r3, r4
   d6ff4:	e77d      	b.n	d6ef2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6ff6:	6823      	ldr	r3, [r4, #0]
   d6ff8:	9a00      	ldr	r2, [sp, #0]
   d6ffa:	2414      	movs	r4, #20
   d6ffc:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7000:	9b06      	ldr	r3, [sp, #24]
   d7002:	781b      	ldrb	r3, [r3, #0]
   d7004:	bb23      	cbnz	r3, d7050 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d7006:	f8da 3000 	ldr.w	r3, [sl]
   d700a:	9a01      	ldr	r2, [sp, #4]
   d700c:	4413      	add	r3, r2
   d700e:	7c1b      	ldrb	r3, [r3, #16]
   d7010:	80e3      	strh	r3, [r4, #6]
   d7012:	e01d      	b.n	d7050 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7014:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7016:	2f00      	cmp	r7, #0
   d7018:	dd0f      	ble.n	d703a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d701a:	2314      	movs	r3, #20
   d701c:	fb03 f007 	mul.w	r0, r3, r7
   d7020:	9303      	str	r3, [sp, #12]
   d7022:	f7fe f853 	bl	d50cc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7026:	4683      	mov	fp, r0
   d7028:	b178      	cbz	r0, d704a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d702a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d702e:	9b03      	ldr	r3, [sp, #12]
   d7030:	fb03 1202 	mla	r2, r3, r2, r1
   d7034:	f7ff fe42 	bl	d6cbc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7038:	e000      	b.n	d703c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d703a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d703c:	6820      	ldr	r0, [r4, #0]
   d703e:	f7fe f84d 	bl	d50dc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7042:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7046:	60a7      	str	r7, [r4, #8]
   d7048:	e794      	b.n	d6f74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d704a:	f04f 0801 	mov.w	r8, #1
   d704e:	e7ba      	b.n	d6fc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7050:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7052:	e766      	b.n	d6f22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7054:	3601      	adds	r6, #1
   d7056:	e753      	b.n	d6f00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7058:	a908      	add	r1, sp, #32
   d705a:	4628      	mov	r0, r5
   d705c:	f7ff fe17 	bl	d6c8e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7060:	a90b      	add	r1, sp, #44	; 0x2c
   d7062:	f105 000c 	add.w	r0, r5, #12
   d7066:	f7ff fe12 	bl	d6c8e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d706a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d706e:	762b      	strb	r3, [r5, #24]
   d7070:	e7af      	b.n	d6fd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7072:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7074:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7076:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d707a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d707e:	4631      	mov	r1, r6
   d7080:	f106 0010 	add.w	r0, r6, #16
   d7084:	f7ff feb8 	bl	d6df8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7088:	b11e      	cbz	r6, d7092 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d708a:	a90f      	add	r1, sp, #60	; 0x3c
   d708c:	4630      	mov	r0, r6
   d708e:	f7fe f8bb 	bl	d5208 <_ZN6StringC1EOS_>
    ++size_;
   d7092:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7094:	3301      	adds	r3, #1
   d7096:	9309      	str	r3, [sp, #36]	; 0x24
   d7098:	e724      	b.n	d6ee4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d709c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d709c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d709e:	4604      	mov	r4, r0
   d70a0:	4b09      	ldr	r3, [pc, #36]	; (d70c8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d70a2:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d70a6:	4605      	mov	r5, r0
   d70a8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d70aa:	a801      	add	r0, sp, #4
   d70ac:	4611      	mov	r1, r2
   d70ae:	f7fd fadc 	bl	d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d70b2:	aa01      	add	r2, sp, #4
   d70b4:	4631      	mov	r1, r6
   d70b6:	4620      	mov	r0, r4
   d70b8:	f7ff fee1 	bl	d6e7e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d70bc:	a801      	add	r0, sp, #4
   d70be:	f7fd fa71 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d70c2:	4628      	mov	r0, r5
   d70c4:	b004      	add	sp, #16
   d70c6:	bd70      	pop	{r4, r5, r6, pc}
   d70c8:	000d95dc 	.word	0x000d95dc

000d70cc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d70cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d70ce:	460f      	mov	r7, r1
   d70d0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d70d2:	492b      	ldr	r1, [pc, #172]	; (d7180 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d70d4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d70d6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d70d8:	4616      	mov	r6, r2
   d70da:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d70dc:	f002 f97e 	bl	d93dc <strcmp>
   d70e0:	bb28      	cbnz	r0, d712e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d70e2:	2c00      	cmp	r4, #0
   d70e4:	d049      	beq.n	d717a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d70e6:	4629      	mov	r1, r5
   d70e8:	a801      	add	r0, sp, #4
   d70ea:	f7ff fddd 	bl	d6ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d70ee:	4925      	ldr	r1, [pc, #148]	; (d7184 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d70f0:	2024      	movs	r0, #36	; 0x24
   d70f2:	f001 fba3 	bl	d883c <_ZnwjRKSt9nothrow_t>
   d70f6:	4605      	mov	r5, r0
   d70f8:	b1b8      	cbz	r0, d712a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d70fa:	a901      	add	r1, sp, #4
   d70fc:	a804      	add	r0, sp, #16
   d70fe:	f7ff fdd3 	bl	d6ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7102:	a904      	add	r1, sp, #16
   d7104:	a807      	add	r0, sp, #28
   d7106:	f7fd fab0 	bl	d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d710a:	aa07      	add	r2, sp, #28
   d710c:	4631      	mov	r1, r6
   d710e:	4628      	mov	r0, r5
   d7110:	f7ff ffc4 	bl	d709c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7114:	a807      	add	r0, sp, #28
   d7116:	f7fd fa45 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d711a:	4b1b      	ldr	r3, [pc, #108]	; (d7188 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d711c:	602b      	str	r3, [r5, #0]
   d711e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7120:	a804      	add	r0, sp, #16
   d7122:	f7fd fa3f 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7126:	4b19      	ldr	r3, [pc, #100]	; (d718c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d7128:	602b      	str	r3, [r5, #0]
   d712a:	a801      	add	r0, sp, #4
   d712c:	e01f      	b.n	d716e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d712e:	4918      	ldr	r1, [pc, #96]	; (d7190 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7130:	4638      	mov	r0, r7
   d7132:	f002 f953 	bl	d93dc <strcmp>
   d7136:	b9f0      	cbnz	r0, d7176 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d7138:	b1fc      	cbz	r4, d717a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d713a:	4629      	mov	r1, r5
   d713c:	a804      	add	r0, sp, #16
   d713e:	f7ff fdb3 	bl	d6ca8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7142:	4910      	ldr	r1, [pc, #64]	; (d7184 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7144:	2024      	movs	r0, #36	; 0x24
   d7146:	f001 fb79 	bl	d883c <_ZnwjRKSt9nothrow_t>
   d714a:	4605      	mov	r5, r0
   d714c:	b170      	cbz	r0, d716c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d714e:	a904      	add	r1, sp, #16
   d7150:	a807      	add	r0, sp, #28
   d7152:	f7fd fa8a 	bl	d466a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7156:	aa07      	add	r2, sp, #28
   d7158:	4631      	mov	r1, r6
   d715a:	4628      	mov	r0, r5
   d715c:	f7ff ff9e 	bl	d709c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7160:	a807      	add	r0, sp, #28
   d7162:	f7fd fa1f 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7166:	4b08      	ldr	r3, [pc, #32]	; (d7188 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7168:	602b      	str	r3, [r5, #0]
   d716a:	622c      	str	r4, [r5, #32]
   d716c:	a804      	add	r0, sp, #16
   d716e:	f7fd fa19 	bl	d45a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7172:	4628      	mov	r0, r5
   d7174:	e002      	b.n	d717c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7176:	2000      	movs	r0, #0
   d7178:	e000      	b.n	d717c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d717a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d717c:	b00b      	add	sp, #44	; 0x2c
   d717e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7180:	000d9a43 	.word	0x000d9a43
   d7184:	000d9caf 	.word	0x000d9caf
   d7188:	000d9acc 	.word	0x000d9acc
   d718c:	000d99d8 	.word	0x000d99d8
   d7190:	000d9a47 	.word	0x000d9a47

000d7194 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7194:	4b01      	ldr	r3, [pc, #4]	; (d719c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7196:	4a02      	ldr	r2, [pc, #8]	; (d71a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7198:	601a      	str	r2, [r3, #0]
   d719a:	4770      	bx	lr
   d719c:	2003e3e8 	.word	0x2003e3e8
   d71a0:	000d9a58 	.word	0x000d9a58

000d71a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d71a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d71a8:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d71aa:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d71ae:	4604      	mov	r4, r0
   d71b0:	460e      	mov	r6, r1
   d71b2:	4617      	mov	r7, r2
   d71b4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d71b6:	f000 fe1f 	bl	d7df8 <_Z16_fetch_usbserialv>
   d71ba:	4581      	cmp	r9, r0
   d71bc:	d105      	bne.n	d71ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d71be:	485a      	ldr	r0, [pc, #360]	; (d7328 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d71c0:	f001 f851 	bl	d8266 <_ZN5spark12NetworkClass9listeningEv>
   d71c4:	2800      	cmp	r0, #0
   d71c6:	f040 80ac 	bne.w	d7322 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d71ca:	792b      	ldrb	r3, [r5, #4]
   d71cc:	071b      	lsls	r3, r3, #28
   d71ce:	d505      	bpl.n	d71dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d71d0:	696b      	ldr	r3, [r5, #20]
   d71d2:	4a56      	ldr	r2, [pc, #344]	; (d732c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d71d4:	6a20      	ldr	r0, [r4, #32]
   d71d6:	2100      	movs	r1, #0
   d71d8:	f7ff f985 	bl	d64e6 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d71dc:	f1b8 0f00 	cmp.w	r8, #0
   d71e0:	d00d      	beq.n	d71fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d71e2:	215b      	movs	r1, #91	; 0x5b
   d71e4:	4620      	mov	r0, r4
   d71e6:	f7ff fa2e 	bl	d6646 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d71ea:	4641      	mov	r1, r8
   d71ec:	4620      	mov	r0, r4
   d71ee:	f7ff fa1c 	bl	d662a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d71f2:	6823      	ldr	r3, [r4, #0]
   d71f4:	494e      	ldr	r1, [pc, #312]	; (d7330 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d71f6:	68db      	ldr	r3, [r3, #12]
   d71f8:	2202      	movs	r2, #2
   d71fa:	4620      	mov	r0, r4
   d71fc:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d71fe:	792b      	ldrb	r3, [r5, #4]
   d7200:	07d9      	lsls	r1, r3, #31
   d7202:	d525      	bpl.n	d7250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d7204:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7208:	212f      	movs	r1, #47	; 0x2f
   d720a:	4640      	mov	r0, r8
   d720c:	f002 f934 	bl	d9478 <strrchr>
    if (s1) {
   d7210:	b108      	cbz	r0, d7216 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d7212:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d7216:	4641      	mov	r1, r8
   d7218:	4620      	mov	r0, r4
   d721a:	f7ff fa06 	bl	d662a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d721e:	792b      	ldrb	r3, [r5, #4]
   d7220:	079a      	lsls	r2, r3, #30
   d7222:	d509      	bpl.n	d7238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7224:	213a      	movs	r1, #58	; 0x3a
   d7226:	4620      	mov	r0, r4
   d7228:	f7ff fa0d 	bl	d6646 <_ZN5spark16StreamLogHandler5writeEc>
   d722c:	68eb      	ldr	r3, [r5, #12]
   d722e:	4a41      	ldr	r2, [pc, #260]	; (d7334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7230:	6a20      	ldr	r0, [r4, #32]
   d7232:	2100      	movs	r1, #0
   d7234:	f7ff f957 	bl	d64e6 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d7238:	792b      	ldrb	r3, [r5, #4]
   d723a:	f013 0f04 	tst.w	r3, #4
   d723e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7240:	bf18      	it	ne
   d7242:	493d      	ldrne	r1, [pc, #244]	; (d7338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7244:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d7246:	bf08      	it	eq
   d7248:	493c      	ldreq	r1, [pc, #240]	; (d733c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d724a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d724c:	4620      	mov	r0, r4
   d724e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7250:	792b      	ldrb	r3, [r5, #4]
   d7252:	075b      	lsls	r3, r3, #29
   d7254:	d518      	bpl.n	d7288 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7256:	6929      	ldr	r1, [r5, #16]
   d7258:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d725a:	4613      	mov	r3, r2
   d725c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7260:	b138      	cbz	r0, d7272 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7262:	2820      	cmp	r0, #32
   d7264:	d101      	bne.n	d726a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d7266:	4619      	mov	r1, r3
   d7268:	e001      	b.n	d726e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d726a:	2828      	cmp	r0, #40	; 0x28
   d726c:	d001      	beq.n	d7272 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d726e:	461a      	mov	r2, r3
   d7270:	e7f3      	b.n	d725a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7272:	6823      	ldr	r3, [r4, #0]
   d7274:	1a52      	subs	r2, r2, r1
   d7276:	68db      	ldr	r3, [r3, #12]
   d7278:	4620      	mov	r0, r4
   d727a:	4798      	blx	r3
        write("(): ", 4);
   d727c:	6823      	ldr	r3, [r4, #0]
   d727e:	4930      	ldr	r1, [pc, #192]	; (d7340 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7280:	68db      	ldr	r3, [r3, #12]
   d7282:	2204      	movs	r2, #4
   d7284:	4620      	mov	r0, r4
   d7286:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7288:	2100      	movs	r1, #0
   d728a:	4638      	mov	r0, r7
   d728c:	f7fd fe52 	bl	d4f34 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7290:	4601      	mov	r1, r0
   d7292:	4620      	mov	r0, r4
   d7294:	f7ff f9c9 	bl	d662a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7298:	6823      	ldr	r3, [r4, #0]
   d729a:	4928      	ldr	r1, [pc, #160]	; (d733c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d729c:	68db      	ldr	r3, [r3, #12]
   d729e:	2202      	movs	r2, #2
   d72a0:	4620      	mov	r0, r4
   d72a2:	4798      	blx	r3
    // Message
    if (msg) {
   d72a4:	b11e      	cbz	r6, d72ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d72a6:	4631      	mov	r1, r6
   d72a8:	4620      	mov	r0, r4
   d72aa:	f7ff f9be 	bl	d662a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d72ae:	792b      	ldrb	r3, [r5, #4]
   d72b0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d72b4:	d02d      	beq.n	d7312 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d72b6:	6823      	ldr	r3, [r4, #0]
   d72b8:	4922      	ldr	r1, [pc, #136]	; (d7344 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d72ba:	68db      	ldr	r3, [r3, #12]
   d72bc:	4620      	mov	r0, r4
   d72be:	2202      	movs	r2, #2
   d72c0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d72c2:	792b      	ldrb	r3, [r5, #4]
   d72c4:	06d8      	lsls	r0, r3, #27
   d72c6:	d50b      	bpl.n	d72e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d72c8:	6823      	ldr	r3, [r4, #0]
   d72ca:	491f      	ldr	r1, [pc, #124]	; (d7348 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d72cc:	68db      	ldr	r3, [r3, #12]
   d72ce:	2207      	movs	r2, #7
   d72d0:	4620      	mov	r0, r4
   d72d2:	4798      	blx	r3
   d72d4:	69ab      	ldr	r3, [r5, #24]
   d72d6:	4a1d      	ldr	r2, [pc, #116]	; (d734c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d72d8:	6a20      	ldr	r0, [r4, #32]
   d72da:	2100      	movs	r1, #0
   d72dc:	f7ff f903 	bl	d64e6 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d72e0:	792b      	ldrb	r3, [r5, #4]
   d72e2:	0699      	lsls	r1, r3, #26
   d72e4:	d511      	bpl.n	d730a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d72e6:	06da      	lsls	r2, r3, #27
   d72e8:	d505      	bpl.n	d72f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d72ea:	6823      	ldr	r3, [r4, #0]
   d72ec:	4912      	ldr	r1, [pc, #72]	; (d7338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d72ee:	68db      	ldr	r3, [r3, #12]
   d72f0:	2202      	movs	r2, #2
   d72f2:	4620      	mov	r0, r4
   d72f4:	4798      	blx	r3
            }
            write("details = ", 10);
   d72f6:	6823      	ldr	r3, [r4, #0]
   d72f8:	4915      	ldr	r1, [pc, #84]	; (d7350 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d72fa:	68db      	ldr	r3, [r3, #12]
   d72fc:	4620      	mov	r0, r4
   d72fe:	220a      	movs	r2, #10
   d7300:	4798      	blx	r3
            write(attr.details);
   d7302:	69e9      	ldr	r1, [r5, #28]
   d7304:	4620      	mov	r0, r4
   d7306:	f7ff f990 	bl	d662a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d730a:	215d      	movs	r1, #93	; 0x5d
   d730c:	4620      	mov	r0, r4
   d730e:	f7ff f99a 	bl	d6646 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7312:	6823      	ldr	r3, [r4, #0]
   d7314:	490f      	ldr	r1, [pc, #60]	; (d7354 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7316:	68db      	ldr	r3, [r3, #12]
   d7318:	4620      	mov	r0, r4
   d731a:	2202      	movs	r2, #2
}
   d731c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7320:	4718      	bx	r3
   d7322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7326:	bf00      	nop
   d7328:	2003e71c 	.word	0x2003e71c
   d732c:	000d9a5c 	.word	0x000d9a5c
   d7330:	000d9a63 	.word	0x000d9a63
   d7334:	000d9a66 	.word	0x000d9a66
   d7338:	000d9a69 	.word	0x000d9a69
   d733c:	000d9a6e 	.word	0x000d9a6e
   d7340:	000d9a6c 	.word	0x000d9a6c
   d7344:	000d9a71 	.word	0x000d9a71
   d7348:	000d9a74 	.word	0x000d9a74
   d734c:	000d9a7c 	.word	0x000d9a7c
   d7350:	000d9a7f 	.word	0x000d9a7f
   d7354:	000d9a8a 	.word	0x000d9a8a

000d7358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7358:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d735c:	b085      	sub	sp, #20
   d735e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7362:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7364:	4606      	mov	r6, r0
   d7366:	460f      	mov	r7, r1
   d7368:	4691      	mov	r9, r2
   d736a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d736c:	f000 fd44 	bl	d7df8 <_Z16_fetch_usbserialv>
   d7370:	4580      	cmp	r8, r0
   d7372:	d105      	bne.n	d7380 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7374:	484a      	ldr	r0, [pc, #296]	; (d74a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7376:	f000 ff76 	bl	d8266 <_ZN5spark12NetworkClass9listeningEv>
   d737a:	2800      	cmp	r0, #0
   d737c:	f040 808c 	bne.w	d7498 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7380:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7382:	4a48      	ldr	r2, [pc, #288]	; (d74a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7384:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7386:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d738a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d738c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d738e:	f88d 8008 	strb.w	r8, [sp, #8]
   d7392:	f001 f8ac 	bl	d84ee <_ZN5spark10JSONWriter11beginObjectEv>
   d7396:	4641      	mov	r1, r8
   d7398:	4648      	mov	r0, r9
   d739a:	f7fd fdcb 	bl	d4f34 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d739e:	4942      	ldr	r1, [pc, #264]	; (d74a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d73a0:	4680      	mov	r8, r0
   d73a2:	2201      	movs	r2, #1
   d73a4:	a801      	add	r0, sp, #4
   d73a6:	f001 f927 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d73aa:	4641      	mov	r1, r8
   d73ac:	f7ff f92d 	bl	d660a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d73b0:	b13f      	cbz	r7, d73c2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d73b2:	493e      	ldr	r1, [pc, #248]	; (d74ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d73b4:	2201      	movs	r2, #1
   d73b6:	a801      	add	r0, sp, #4
   d73b8:	f001 f91e 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d73bc:	4639      	mov	r1, r7
   d73be:	f7ff f924 	bl	d660a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d73c2:	b13d      	cbz	r5, d73d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d73c4:	493a      	ldr	r1, [pc, #232]	; (d74b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d73c6:	2201      	movs	r2, #1
   d73c8:	a801      	add	r0, sp, #4
   d73ca:	f001 f915 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d73ce:	4629      	mov	r1, r5
   d73d0:	f7ff f91b 	bl	d660a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d73d4:	7923      	ldrb	r3, [r4, #4]
   d73d6:	07df      	lsls	r7, r3, #31
   d73d8:	d50e      	bpl.n	d73f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d73da:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d73dc:	212f      	movs	r1, #47	; 0x2f
   d73de:	4628      	mov	r0, r5
   d73e0:	f002 f84a 	bl	d9478 <strrchr>
    if (s1) {
   d73e4:	b100      	cbz	r0, d73e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d73e6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d73e8:	4932      	ldr	r1, [pc, #200]	; (d74b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d73ea:	2201      	movs	r2, #1
   d73ec:	a801      	add	r0, sp, #4
   d73ee:	f001 f903 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d73f2:	4629      	mov	r1, r5
   d73f4:	f7ff f909 	bl	d660a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d73f8:	7923      	ldrb	r3, [r4, #4]
   d73fa:	079d      	lsls	r5, r3, #30
   d73fc:	d507      	bpl.n	d740e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d73fe:	492e      	ldr	r1, [pc, #184]	; (d74b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7400:	2202      	movs	r2, #2
   d7402:	a801      	add	r0, sp, #4
   d7404:	f001 f8f8 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7408:	68e1      	ldr	r1, [r4, #12]
   d740a:	f001 f87d 	bl	d8508 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d740e:	7923      	ldrb	r3, [r4, #4]
   d7410:	0758      	lsls	r0, r3, #29
   d7412:	d516      	bpl.n	d7442 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7414:	6925      	ldr	r5, [r4, #16]
   d7416:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7418:	463b      	mov	r3, r7
   d741a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d741e:	b13a      	cbz	r2, d7430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7420:	2a20      	cmp	r2, #32
   d7422:	d101      	bne.n	d7428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7424:	461d      	mov	r5, r3
   d7426:	e001      	b.n	d742c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7428:	2a28      	cmp	r2, #40	; 0x28
   d742a:	d001      	beq.n	d7430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d742c:	461f      	mov	r7, r3
   d742e:	e7f3      	b.n	d7418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7430:	2202      	movs	r2, #2
   d7432:	4922      	ldr	r1, [pc, #136]	; (d74bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7434:	a801      	add	r0, sp, #4
   d7436:	f001 f8df 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d743a:	1b7a      	subs	r2, r7, r5
   d743c:	4629      	mov	r1, r5
   d743e:	f001 f8ea 	bl	d8616 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7442:	7923      	ldrb	r3, [r4, #4]
   d7444:	0719      	lsls	r1, r3, #28
   d7446:	d507      	bpl.n	d7458 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7448:	491d      	ldr	r1, [pc, #116]	; (d74c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d744a:	2201      	movs	r2, #1
   d744c:	a801      	add	r0, sp, #4
   d744e:	f001 f8d3 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7452:	6961      	ldr	r1, [r4, #20]
   d7454:	f001 f86a 	bl	d852c <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7458:	7923      	ldrb	r3, [r4, #4]
   d745a:	06da      	lsls	r2, r3, #27
   d745c:	d508      	bpl.n	d7470 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d745e:	2204      	movs	r2, #4
   d7460:	4918      	ldr	r1, [pc, #96]	; (d74c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7462:	eb0d 0002 	add.w	r0, sp, r2
   d7466:	f001 f8c7 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d746a:	69a1      	ldr	r1, [r4, #24]
   d746c:	f001 f84c 	bl	d8508 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7470:	7923      	ldrb	r3, [r4, #4]
   d7472:	069b      	lsls	r3, r3, #26
   d7474:	d507      	bpl.n	d7486 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7476:	4914      	ldr	r1, [pc, #80]	; (d74c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7478:	2206      	movs	r2, #6
   d747a:	a801      	add	r0, sp, #4
   d747c:	f001 f8bc 	bl	d85f8 <_ZN5spark10JSONWriter4nameEPKcj>
   d7480:	69e1      	ldr	r1, [r4, #28]
   d7482:	f7ff f8c2 	bl	d660a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7486:	a801      	add	r0, sp, #4
   d7488:	f001 f81b 	bl	d84c2 <_ZN5spark10JSONWriter9endObjectEv>
   d748c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d748e:	490f      	ldr	r1, [pc, #60]	; (d74cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7490:	6803      	ldr	r3, [r0, #0]
   d7492:	2202      	movs	r2, #2
   d7494:	68db      	ldr	r3, [r3, #12]
   d7496:	4798      	blx	r3
}
   d7498:	b005      	add	sp, #20
   d749a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d749e:	bf00      	nop
   d74a0:	2003e71c 	.word	0x2003e71c
   d74a4:	000d99c0 	.word	0x000d99c0
   d74a8:	000d99f2 	.word	0x000d99f2
   d74ac:	000d9a05 	.word	0x000d9a05
   d74b0:	000d9747 	.word	0x000d9747
   d74b4:	000d9722 	.word	0x000d9722
   d74b8:	000d9a8d 	.word	0x000d9a8d
   d74bc:	000d9a90 	.word	0x000d9a90
   d74c0:	000d966e 	.word	0x000d966e
   d74c4:	000d9a93 	.word	0x000d9a93
   d74c8:	000d9a98 	.word	0x000d9a98
   d74cc:	000d9a8a 	.word	0x000d9a8a

000d74d0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d74d0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d74d2:	2000      	movs	r0, #0
   d74d4:	f7fd fdea 	bl	d50ac <spark_sync_time_pending>
   d74d8:	b128      	cbz	r0, d74e6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d74da:	f7fd fdd7 	bl	d508c <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d74de:	f080 0001 	eor.w	r0, r0, #1
   d74e2:	b2c0      	uxtb	r0, r0
   d74e4:	bd08      	pop	{r3, pc}
   d74e6:	2001      	movs	r0, #1
    }
   d74e8:	bd08      	pop	{r3, pc}

000d74ea <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d74ea:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d74ec:	2000      	movs	r0, #0
   d74ee:	f7fd fb77 	bl	d4be0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d74f2:	4604      	mov	r4, r0
   d74f4:	b968      	cbnz	r0, d7512 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d74f6:	f7fd fd2d 	bl	d4f54 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d74fa:	2801      	cmp	r0, #1
   d74fc:	d10b      	bne.n	d7516 <_ZN9TimeClass7isValidEv+0x2c>
   d74fe:	4620      	mov	r0, r4
   d7500:	f7fd fd50 	bl	d4fa4 <system_thread_get_state>
   d7504:	b938      	cbnz	r0, d7516 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7506:	f7ff ffe3 	bl	d74d0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d750a:	b930      	cbnz	r0, d751a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d750c:	f7fd fdb6 	bl	d507c <spark_process>
   d7510:	e7f9      	b.n	d7506 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7512:	2001      	movs	r0, #1
   d7514:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7516:	2000      	movs	r0, #0
   d7518:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d751a:	f7ff ffd9 	bl	d74d0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d751e:	2000      	movs	r0, #0
   d7520:	f7fd fb5e 	bl	d4be0 <HAL_RTC_Time_Is_Valid>
   d7524:	3000      	adds	r0, #0
   d7526:	bf18      	it	ne
   d7528:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d752a:	bd10      	pop	{r4, pc}

000d752c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d752c:	b508      	push	{r3, lr}
    (void)isValid();
   d752e:	f7ff ffdc 	bl	d74ea <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7536:	f7fd bb4b 	b.w	d4bd0 <HAL_RTC_Get_UnixTime>
	...

000d753c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d753c:	4b02      	ldr	r3, [pc, #8]	; (d7548 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d753e:	681a      	ldr	r2, [r3, #0]
   d7540:	4b02      	ldr	r3, [pc, #8]	; (d754c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7542:	601a      	str	r2, [r3, #0]
   d7544:	4770      	bx	lr
   d7546:	bf00      	nop
   d7548:	2003e29c 	.word	0x2003e29c
   d754c:	2003e3ec 	.word	0x2003e3ec

000d7550 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7550:	2100      	movs	r1, #0
   d7552:	f7fd bd0f 	b.w	d4f74 <system_delay_ms>

000d7556 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7556:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7558:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d755a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d755c:	b113      	cbz	r3, d7564 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d755e:	2203      	movs	r2, #3
   d7560:	4601      	mov	r1, r0
   d7562:	4798      	blx	r3
    }
   d7564:	4620      	mov	r0, r4
   d7566:	bd10      	pop	{r4, pc}

000d7568 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7568:	b510      	push	{r4, lr}
   d756a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d756c:	f7ff fff3 	bl	d7556 <_ZNSt14_Function_baseD1Ev>
   d7570:	4620      	mov	r0, r4
   d7572:	bd10      	pop	{r4, pc}

000d7574 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7574:	b513      	push	{r0, r1, r4, lr}
   d7576:	460b      	mov	r3, r1
   d7578:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d757a:	c803      	ldmia	r0, {r0, r1}
   d757c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7580:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7584:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7588:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d758c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7590:	b002      	add	sp, #8
   d7592:	bd10      	pop	{r4, pc}

000d7594 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7594:	4803      	ldr	r0, [pc, #12]	; (d75a4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7596:	4a04      	ldr	r2, [pc, #16]	; (d75a8 <_GLOBAL__sub_I_RGB+0x14>)
   d7598:	4904      	ldr	r1, [pc, #16]	; (d75ac <_GLOBAL__sub_I_RGB+0x18>)
   d759a:	2300      	movs	r3, #0
   d759c:	6083      	str	r3, [r0, #8]
   d759e:	f001 b93b 	b.w	d8818 <__aeabi_atexit>
   d75a2:	bf00      	nop
   d75a4:	2003e3f0 	.word	0x2003e3f0
   d75a8:	2003e308 	.word	0x2003e308
   d75ac:	000d7569 	.word	0x000d7569

000d75b0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d75b0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d75b2:	4b0c      	ldr	r3, [pc, #48]	; (d75e4 <serialEventRun+0x34>)
   d75b4:	b133      	cbz	r3, d75c4 <serialEventRun+0x14>
   d75b6:	f000 fc1f 	bl	d7df8 <_Z16_fetch_usbserialv>
   d75ba:	6803      	ldr	r3, [r0, #0]
   d75bc:	691b      	ldr	r3, [r3, #16]
   d75be:	4798      	blx	r3
   d75c0:	2800      	cmp	r0, #0
   d75c2:	dc09      	bgt.n	d75d8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d75c4:	4b08      	ldr	r3, [pc, #32]	; (d75e8 <serialEventRun+0x38>)
   d75c6:	b163      	cbz	r3, d75e2 <serialEventRun+0x32>
   d75c8:	f000 fca6 	bl	d7f18 <_Z22__fetch_global_Serial1v>
   d75cc:	6803      	ldr	r3, [r0, #0]
   d75ce:	691b      	ldr	r3, [r3, #16]
   d75d0:	4798      	blx	r3
   d75d2:	2800      	cmp	r0, #0
   d75d4:	dc03      	bgt.n	d75de <serialEventRun+0x2e>
   d75d6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d75d8:	f3af 8000 	nop.w
   d75dc:	e7f2      	b.n	d75c4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d75de:	f3af 8000 	nop.w
   d75e2:	bd08      	pop	{r3, pc}
	...

000d75ec <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d75ec:	b508      	push	{r3, lr}
	serialEventRun();
   d75ee:	f7ff ffdf 	bl	d75b0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d75f2:	f7fd fae5 	bl	d4bc0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d75f6:	4b01      	ldr	r3, [pc, #4]	; (d75fc <_post_loop+0x10>)
   d75f8:	6018      	str	r0, [r3, #0]
   d75fa:	bd08      	pop	{r3, pc}
   d75fc:	2003e730 	.word	0x2003e730

000d7600 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7600:	4802      	ldr	r0, [pc, #8]	; (d760c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7602:	4a03      	ldr	r2, [pc, #12]	; (d7610 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7604:	4903      	ldr	r1, [pc, #12]	; (d7614 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7606:	1a12      	subs	r2, r2, r0
   d7608:	f001 be79 	b.w	d92fe <memcpy>
   d760c:	2003f400 	.word	0x2003f400
   d7610:	2003f404 	.word	0x2003f404
   d7614:	000d9e60 	.word	0x000d9e60

000d7618 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7618:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d761a:	2300      	movs	r3, #0
   d761c:	9300      	str	r3, [sp, #0]
   d761e:	461a      	mov	r2, r3
   d7620:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7624:	f7fd fcd0 	bl	d4fc8 <system_ctrl_set_result>
}
   d7628:	b003      	add	sp, #12
   d762a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7630 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7630:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7632:	8843      	ldrh	r3, [r0, #2]
   d7634:	2b0a      	cmp	r3, #10
   d7636:	d008      	beq.n	d764a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7638:	2b50      	cmp	r3, #80	; 0x50
   d763a:	d109      	bne.n	d7650 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d763c:	4b09      	ldr	r3, [pc, #36]	; (d7664 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d763e:	681b      	ldr	r3, [r3, #0]
   d7640:	b13b      	cbz	r3, d7652 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7642:	b003      	add	sp, #12
   d7644:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7648:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d764a:	f7ff ffe5 	bl	d7618 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d764e:	e006      	b.n	d765e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7650:	2300      	movs	r3, #0
   d7652:	9300      	str	r3, [sp, #0]
   d7654:	461a      	mov	r2, r3
   d7656:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d765a:	f7fd fcb5 	bl	d4fc8 <system_ctrl_set_result>
        break;
    }
}
   d765e:	b003      	add	sp, #12
   d7660:	f85d fb04 	ldr.w	pc, [sp], #4
   d7664:	2003e400 	.word	0x2003e400

000d7668 <module_user_init_hook>:

void module_user_init_hook()
{
   d7668:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d766a:	4c10      	ldr	r4, [pc, #64]	; (d76ac <module_user_init_hook+0x44>)
   d766c:	4d10      	ldr	r5, [pc, #64]	; (d76b0 <module_user_init_hook+0x48>)
   d766e:	6823      	ldr	r3, [r4, #0]
   d7670:	42ab      	cmp	r3, r5
   d7672:	4b10      	ldr	r3, [pc, #64]	; (d76b4 <module_user_init_hook+0x4c>)
   d7674:	bf0c      	ite	eq
   d7676:	2201      	moveq	r2, #1
   d7678:	2200      	movne	r2, #0
   d767a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d767c:	d002      	beq.n	d7684 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d767e:	f7ff ffbf 	bl	d7600 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7682:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7684:	f7fd fa8c 	bl	d4ba0 <HAL_RNG_GetRandomNumber>
   d7688:	4604      	mov	r4, r0
    srand(seed);
   d768a:	f001 fe67 	bl	d935c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d768e:	4b0a      	ldr	r3, [pc, #40]	; (d76b8 <module_user_init_hook+0x50>)
   d7690:	b113      	cbz	r3, d7698 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7692:	4620      	mov	r0, r4
   d7694:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7698:	2100      	movs	r1, #0
   d769a:	4807      	ldr	r0, [pc, #28]	; (d76b8 <module_user_init_hook+0x50>)
   d769c:	f7fd fd0e 	bl	d50bc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d76a0:	2100      	movs	r1, #0
   d76a2:	4806      	ldr	r0, [pc, #24]	; (d76bc <module_user_init_hook+0x54>)
}
   d76a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d76a8:	f7fd bc84 	b.w	d4fb4 <system_ctrl_set_app_request_handler>
   d76ac:	2003f400 	.word	0x2003f400
   d76b0:	9a271c1e 	.word	0x9a271c1e
   d76b4:	2003e404 	.word	0x2003e404
   d76b8:	00000000 	.word	0x00000000
   d76bc:	000d7631 	.word	0x000d7631

000d76c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d76c0:	4770      	bx	lr

000d76c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d76c2:	2000      	movs	r0, #0
   d76c4:	4770      	bx	lr

000d76c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d76c6:	b510      	push	{r4, lr}
   d76c8:	2110      	movs	r1, #16
   d76ca:	4604      	mov	r4, r0
   d76cc:	f001 f8b2 	bl	d8834 <_ZdlPvj>
   d76d0:	4620      	mov	r0, r4
   d76d2:	bd10      	pop	{r4, pc}

000d76d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d76d4:	b508      	push	{r3, lr}
      { delete this; }
   d76d6:	b108      	cbz	r0, d76dc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d76d8:	f7ff fff5 	bl	d76c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d76dc:	bd08      	pop	{r3, pc}

000d76de <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d76de:	2200      	movs	r2, #0
   d76e0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d76e2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d76e4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d76e8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d76ea:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d76ee:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d76f0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d76f2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d76f4:	680c      	ldr	r4, [r1, #0]
   d76f6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d76f8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d76fa:	bd10      	pop	{r4, pc}

000d76fc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d76fc:	b510      	push	{r4, lr}
   d76fe:	4604      	mov	r4, r0
    free((void*)msg_);
   d7700:	6800      	ldr	r0, [r0, #0]
   d7702:	f7fd fceb 	bl	d50dc <free>
}
   d7706:	4620      	mov	r0, r4
   d7708:	bd10      	pop	{r4, pc}

000d770a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d770a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d770c:	68c4      	ldr	r4, [r0, #12]
   d770e:	b1f4      	cbz	r4, d774e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7710:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7712:	2b02      	cmp	r3, #2
   d7714:	d103      	bne.n	d771e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7716:	f104 000c 	add.w	r0, r4, #12
   d771a:	f7ff ffef 	bl	d76fc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d771e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7720:	b135      	cbz	r5, d7730 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7722:	4628      	mov	r0, r5
   d7724:	f7ff ff17 	bl	d7556 <_ZNSt14_Function_baseD1Ev>
   d7728:	2110      	movs	r1, #16
   d772a:	4628      	mov	r0, r5
   d772c:	f001 f882 	bl	d8834 <_ZdlPvj>
   d7730:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7732:	b135      	cbz	r5, d7742 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7734:	4628      	mov	r0, r5
   d7736:	f7ff ff0e 	bl	d7556 <_ZNSt14_Function_baseD1Ev>
   d773a:	2110      	movs	r1, #16
   d773c:	4628      	mov	r0, r5
   d773e:	f001 f879 	bl	d8834 <_ZdlPvj>
   d7742:	4620      	mov	r0, r4
   d7744:	2114      	movs	r1, #20
   d7746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d774a:	f001 b873 	b.w	d8834 <_ZdlPvj>
   d774e:	bd38      	pop	{r3, r4, r5, pc}

000d7750 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7750:	b513      	push	{r0, r1, r4, lr}
   d7752:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7754:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d7758:	2300      	movs	r3, #0
   d775a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d775c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d775e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7760:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7762:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7764:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7766:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7768:	f7fc fdac 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d776c:	4620      	mov	r0, r4
   d776e:	b002      	add	sp, #8
   d7770:	bd10      	pop	{r4, pc}

000d7772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7772:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7774:	460c      	mov	r4, r1
   d7776:	ad02      	add	r5, sp, #8
   d7778:	f854 3b04 	ldr.w	r3, [r4], #4
   d777c:	f845 3d08 	str.w	r3, [r5, #-8]!
   d7780:	4606      	mov	r6, r0
   d7782:	460f      	mov	r7, r1
   d7784:	a801      	add	r0, sp, #4
   d7786:	4621      	mov	r1, r4
   d7788:	f7fe f97c 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d778c:	4629      	mov	r1, r5
   d778e:	4630      	mov	r0, r6
   d7790:	f7ff ffde 	bl	d7750 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7794:	a801      	add	r0, sp, #4
   d7796:	f7fc fd95 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d779a:	4620      	mov	r0, r4
   d779c:	f7fc fd92 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d77a0:	4638      	mov	r0, r7
   d77a2:	2108      	movs	r1, #8
   d77a4:	f001 f846 	bl	d8834 <_ZdlPvj>
        return p;
    }
   d77a8:	4630      	mov	r0, r6
   d77aa:	b003      	add	sp, #12
   d77ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d77b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d77b0:	b538      	push	{r3, r4, r5, lr}
   d77b2:	2300      	movs	r3, #0
   d77b4:	4604      	mov	r4, r0
   d77b6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77b8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d77ba:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77bc:	f7fc fc6d 	bl	d409a <_Znwj>
   d77c0:	b128      	cbz	r0, d77ce <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d77c2:	2301      	movs	r3, #1
   d77c4:	6043      	str	r3, [r0, #4]
   d77c6:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d77c8:	4b02      	ldr	r3, [pc, #8]	; (d77d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d77ca:	6003      	str	r3, [r0, #0]
   d77cc:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d77ce:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d77d0:	4620      	mov	r0, r4
   d77d2:	bd38      	pop	{r3, r4, r5, pc}
   d77d4:	000d9b40 	.word	0x000d9b40

000d77d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d77d8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d77da:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d77dc:	b90a      	cbnz	r2, d77e2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d77de:	f001 f83c 	bl	d885a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d77e2:	68c3      	ldr	r3, [r0, #12]
    }
   d77e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d77e8:	4718      	bx	r3

000d77ea <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d77ea:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d77ec:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d77ee:	f100 0110 	add.w	r1, r0, #16
   d77f2:	f7ff fff1 	bl	d77d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d77f6:	bd08      	pop	{r3, pc}

000d77f8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d77f8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d77fa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d77fc:	b90a      	cbnz	r2, d7802 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d77fe:	f001 f82c 	bl	d885a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7802:	68c3      	ldr	r3, [r0, #12]
    }
   d7804:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7808:	4718      	bx	r3

000d780a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d780a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d780c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d780e:	f100 0110 	add.w	r1, r0, #16
   d7812:	f7ff fff1 	bl	d77f8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7816:	bd08      	pop	{r3, pc}

000d7818 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7818:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d781a:	2300      	movs	r3, #0
   d781c:	6083      	str	r3, [r0, #8]
   d781e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7820:	4604      	mov	r4, r0
   d7822:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7824:	b12b      	cbz	r3, d7832 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7826:	2202      	movs	r2, #2
   d7828:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d782a:	68eb      	ldr	r3, [r5, #12]
   d782c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d782e:	68ab      	ldr	r3, [r5, #8]
   d7830:	60a3      	str	r3, [r4, #8]
	}
    }
   d7832:	4620      	mov	r0, r4
   d7834:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d7838:	b5f0      	push	{r4, r5, r6, r7, lr}
   d783a:	b089      	sub	sp, #36	; 0x24
   d783c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d783e:	4668      	mov	r0, sp
   d7840:	f7ff ff4d 	bl	d76de <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7844:	2300      	movs	r3, #0
   d7846:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d784a:	f04f 0202 	mov.w	r2, #2
   d784e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7852:	2b00      	cmp	r3, #0
   d7854:	d103      	bne.n	d785e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d7856:	e8c4 2f41 	strexb	r1, r2, [r4]
   d785a:	2900      	cmp	r1, #0
   d785c:	d1f7      	bne.n	d784e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d785e:	d002      	beq.n	d7866 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7860:	f88d 3008 	strb.w	r3, [sp, #8]
   d7864:	e063      	b.n	d792e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d7866:	f114 050c 	adds.w	r5, r4, #12
   d786a:	d003      	beq.n	d7874 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d786c:	4669      	mov	r1, sp
   d786e:	4628      	mov	r0, r5
   d7870:	f7ff ff35 	bl	d76de <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7874:	f3bf 8f5f 	dmb	sy
   d7878:	2301      	movs	r3, #1
   d787a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d787c:	2000      	movs	r0, #0
   d787e:	f104 0308 	add.w	r3, r4, #8
   d7882:	f3bf 8f5f 	dmb	sy
   d7886:	e853 6f00 	ldrex	r6, [r3]
   d788a:	e843 0200 	strex	r2, r0, [r3]
   d788e:	2a00      	cmp	r2, #0
   d7890:	d1f9      	bne.n	d7886 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d7892:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7896:	2e00      	cmp	r6, #0
   d7898:	d049      	beq.n	d792e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d789a:	f7fd fb73 	bl	d4f84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d789e:	b120      	cbz	r0, d78aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d78a0:	4629      	mov	r1, r5
   d78a2:	4630      	mov	r0, r6
   d78a4:	f7ff ff98 	bl	d77d8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d78a8:	e03a      	b.n	d7920 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d78aa:	4631      	mov	r1, r6
   d78ac:	a802      	add	r0, sp, #8
   d78ae:	f7ff ffb3 	bl	d7818 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d78b2:	68e0      	ldr	r0, [r4, #12]
   d78b4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d78b8:	b108      	cbz	r0, d78be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d78ba:	f001 fd99 	bl	d93f0 <strdup>
   d78be:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d78c0:	2010      	movs	r0, #16
   d78c2:	f8ad 501c 	strh.w	r5, [sp, #28]
   d78c6:	f7fc fbe8 	bl	d409a <_Znwj>
   d78ca:	4605      	mov	r5, r0
   d78cc:	b1e8      	cbz	r0, d790a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78ce:	2700      	movs	r7, #0
   d78d0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78d2:	2018      	movs	r0, #24
   d78d4:	f7fc fbe1 	bl	d409a <_Znwj>
   d78d8:	4604      	mov	r4, r0
   d78da:	b188      	cbz	r0, d7900 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d78dc:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d78de:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d78e0:	a802      	add	r0, sp, #8
   d78e2:	f7ff fe47 	bl	d7574 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78e6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78e8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78ea:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78ec:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d78ee:	9204      	str	r2, [sp, #16]
   d78f0:	a906      	add	r1, sp, #24
   d78f2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d78f4:	60e3      	str	r3, [r4, #12]
   d78f6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d78fa:	9205      	str	r2, [sp, #20]
   d78fc:	f7ff feef 	bl	d76de <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7900:	4b0d      	ldr	r3, [pc, #52]	; (d7938 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d7902:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7904:	4b0d      	ldr	r3, [pc, #52]	; (d793c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7906:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7908:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d790a:	a806      	add	r0, sp, #24
   d790c:	f7ff fef6 	bl	d76fc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7910:	a802      	add	r0, sp, #8
   d7912:	f7ff fe20 	bl	d7556 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7916:	2200      	movs	r2, #0
   d7918:	4629      	mov	r1, r5
   d791a:	4809      	ldr	r0, [pc, #36]	; (d7940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d791c:	f7fd fb3a 	bl	d4f94 <application_thread_invoke>
   d7920:	4630      	mov	r0, r6
   d7922:	f7ff fe18 	bl	d7556 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7926:	2110      	movs	r1, #16
   d7928:	4630      	mov	r0, r6
   d792a:	f000 ff83 	bl	d8834 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d792e:	4668      	mov	r0, sp
   d7930:	f7ff fee4 	bl	d76fc <_ZN8particle5ErrorD1Ev>
    }
   d7934:	b009      	add	sp, #36	; 0x24
   d7936:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7938:	000d77eb 	.word	0x000d77eb
   d793c:	000d7a61 	.word	0x000d7a61
   d7940:	000d7f65 	.word	0x000d7f65

000d7944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7948:	b08b      	sub	sp, #44	; 0x2c
   d794a:	4606      	mov	r6, r0
   d794c:	460f      	mov	r7, r1
   d794e:	4690      	mov	r8, r2
   d7950:	4699      	mov	r9, r3
   d7952:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7956:	f7fd fb99 	bl	d508c <spark_cloud_flag_connected>
   d795a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d795c:	4683      	mov	fp, r0
   d795e:	bb30      	cbnz	r0, d79ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7960:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7964:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7966:	a905      	add	r1, sp, #20
   d7968:	4628      	mov	r0, r5
   d796a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d796e:	f7ff feb6 	bl	d76de <_ZN8particle5ErrorC1EOS0_>
   d7972:	2014      	movs	r0, #20
   d7974:	f7fc fb91 	bl	d409a <_Znwj>
   d7978:	4604      	mov	r4, r0
   d797a:	b158      	cbz	r0, d7994 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d797c:	2302      	movs	r3, #2
   d797e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7980:	2301      	movs	r3, #1
   d7982:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7984:	f8c0 b004 	str.w	fp, [r0, #4]
   d7988:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d798c:	4629      	mov	r1, r5
   d798e:	300c      	adds	r0, #12
   d7990:	f7ff fea5 	bl	d76de <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d7994:	4630      	mov	r0, r6
   d7996:	4621      	mov	r1, r4
   d7998:	f840 4b04 	str.w	r4, [r0], #4
   d799c:	f7ff ff08 	bl	d77b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d79a0:	4628      	mov	r0, r5
   d79a2:	f7ff feab 	bl	d76fc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d79a6:	a805      	add	r0, sp, #20
   d79a8:	f7ff fea8 	bl	d76fc <_ZN8particle5ErrorD1Ev>
   d79ac:	e052      	b.n	d7a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d79ae:	2400      	movs	r4, #0
   d79b0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d79b2:	2014      	movs	r0, #20
   d79b4:	606c      	str	r4, [r5, #4]
   d79b6:	60ac      	str	r4, [r5, #8]
   d79b8:	9307      	str	r3, [sp, #28]
   d79ba:	f7fc fb6e 	bl	d409a <_Znwj>
   d79be:	4601      	mov	r1, r0
   d79c0:	b118      	cbz	r0, d79ca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d79c2:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d79c4:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d79c6:	6044      	str	r4, [r0, #4]
   d79c8:	6084      	str	r4, [r0, #8]
   d79ca:	a804      	add	r0, sp, #16
   d79cc:	9103      	str	r1, [sp, #12]
   d79ce:	f7ff feef 	bl	d77b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d79d2:	4b22      	ldr	r3, [pc, #136]	; (d7a5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d79d4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d79d6:	2008      	movs	r0, #8
   d79d8:	f7fc fb5f 	bl	d409a <_Znwj>
   d79dc:	4604      	mov	r4, r0
   d79de:	b128      	cbz	r0, d79ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79e0:	9b03      	ldr	r3, [sp, #12]
   d79e2:	f840 3b04 	str.w	r3, [r0], #4
   d79e6:	a904      	add	r1, sp, #16
   d79e8:	f7fe f84c 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d79ec:	9500      	str	r5, [sp, #0]
   d79ee:	fa5f f38a 	uxtb.w	r3, sl
   d79f2:	464a      	mov	r2, r9
   d79f4:	4641      	mov	r1, r8
   d79f6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d79f8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d79fa:	f7fd fb4f 	bl	d509c <spark_send_event>
   d79fe:	b920      	cbnz	r0, d7a0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7a00:	9b03      	ldr	r3, [sp, #12]
   d7a02:	785b      	ldrb	r3, [r3, #1]
   d7a04:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7a08:	b183      	cbz	r3, d7a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d7a0a:	9b03      	ldr	r3, [sp, #12]
   d7a0c:	9305      	str	r3, [sp, #20]
   d7a0e:	a904      	add	r1, sp, #16
   d7a10:	a806      	add	r0, sp, #24
   d7a12:	f7fe f837 	bl	d5a84 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d7a16:	a905      	add	r1, sp, #20
   d7a18:	4630      	mov	r0, r6
   d7a1a:	f7ff fe99 	bl	d7750 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7a1e:	a806      	add	r0, sp, #24
   d7a20:	f7fc fc50 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a24:	a804      	add	r0, sp, #16
   d7a26:	f7fc fc4d 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a2a:	e013      	b.n	d7a54 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7a2c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7a30:	a905      	add	r1, sp, #20
   d7a32:	a803      	add	r0, sp, #12
   d7a34:	9205      	str	r2, [sp, #20]
   d7a36:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7a3a:	f7ff fefd 	bl	d7838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7a3e:	a805      	add	r0, sp, #20
   d7a40:	f7ff fe5c 	bl	d76fc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7a44:	a805      	add	r0, sp, #20
   d7a46:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7a48:	f7ff fe93 	bl	d7772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7a4c:	a806      	add	r0, sp, #24
   d7a4e:	f7fc fc39 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a52:	e7da      	b.n	d7a0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7a54:	4630      	mov	r0, r6
   d7a56:	b00b      	add	sp, #44	; 0x2c
   d7a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a5c:	000d7bd1 	.word	0x000d7bd1

000d7a60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7a60:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7a62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a64:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7a66:	d006      	beq.n	d7a76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d7a68:	2a03      	cmp	r2, #3
   d7a6a:	d017      	beq.n	d7a9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7a6c:	2a01      	cmp	r2, #1
   d7a6e:	d122      	bne.n	d7ab6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7a70:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7a72:	6003      	str	r3, [r0, #0]
	      break;
   d7a74:	e01f      	b.n	d7ab6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7a76:	2018      	movs	r0, #24
   d7a78:	680e      	ldr	r6, [r1, #0]
   d7a7a:	f7fc fb0e 	bl	d409a <_Znwj>
   d7a7e:	4605      	mov	r5, r0
   d7a80:	b150      	cbz	r0, d7a98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7a82:	4631      	mov	r1, r6
   d7a84:	f7ff fec8 	bl	d7818 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d7a88:	6930      	ldr	r0, [r6, #16]
   d7a8a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d7a8e:	b108      	cbz	r0, d7a94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d7a90:	f001 fcae 	bl	d93f0 <strdup>
   d7a94:	6128      	str	r0, [r5, #16]
   d7a96:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7a98:	6025      	str	r5, [r4, #0]
   d7a9a:	e00c      	b.n	d7ab6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7a9c:	6804      	ldr	r4, [r0, #0]
   d7a9e:	b154      	cbz	r4, d7ab6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d7aa0:	f104 0010 	add.w	r0, r4, #16
   d7aa4:	f7ff fe2a 	bl	d76fc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7aa8:	4620      	mov	r0, r4
   d7aaa:	f7ff fd54 	bl	d7556 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7aae:	2118      	movs	r1, #24
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	f000 febf 	bl	d8834 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7ab6:	2000      	movs	r0, #0
   d7ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7aba <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7aba:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7abc:	2300      	movs	r3, #0
   d7abe:	6083      	str	r3, [r0, #8]
   d7ac0:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7ac2:	4604      	mov	r4, r0
   d7ac4:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7ac6:	b12b      	cbz	r3, d7ad4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7ac8:	2202      	movs	r2, #2
   d7aca:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7acc:	68eb      	ldr	r3, [r5, #12]
   d7ace:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7ad0:	68ab      	ldr	r3, [r5, #8]
   d7ad2:	60a3      	str	r3, [r4, #8]
	}
    }
   d7ad4:	4620      	mov	r0, r4
   d7ad6:	bd38      	pop	{r3, r4, r5, pc}

000d7ad8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7ad8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7ada:	b570      	push	{r4, r5, r6, lr}
   d7adc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7ade:	d006      	beq.n	d7aee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7ae0:	2a03      	cmp	r2, #3
   d7ae2:	d011      	beq.n	d7b08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7ae4:	2a01      	cmp	r2, #1
   d7ae6:	d118      	bne.n	d7b1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7ae8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7aea:	6003      	str	r3, [r0, #0]
	      break;
   d7aec:	e015      	b.n	d7b1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7aee:	2014      	movs	r0, #20
   d7af0:	680e      	ldr	r6, [r1, #0]
   d7af2:	f7fc fad2 	bl	d409a <_Znwj>
   d7af6:	4605      	mov	r5, r0
   d7af8:	b120      	cbz	r0, d7b04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7afa:	4631      	mov	r1, r6
   d7afc:	f7ff ffdd 	bl	d7aba <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7b00:	7c33      	ldrb	r3, [r6, #16]
   d7b02:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7b04:	6025      	str	r5, [r4, #0]
   d7b06:	e008      	b.n	d7b1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7b08:	6804      	ldr	r4, [r0, #0]
   d7b0a:	b134      	cbz	r4, d7b1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7b0c:	4620      	mov	r0, r4
   d7b0e:	f7ff fd22 	bl	d7556 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7b12:	2114      	movs	r1, #20
   d7b14:	4620      	mov	r0, r4
   d7b16:	f000 fe8d 	bl	d8834 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d7b1a:	2000      	movs	r0, #0
   d7b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7b20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7b20:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7b22:	2300      	movs	r3, #0
   d7b24:	b087      	sub	sp, #28
   d7b26:	460c      	mov	r4, r1
   d7b28:	f3bf 8f5f 	dmb	sy
   d7b2c:	e850 6f00 	ldrex	r6, [r0]
   d7b30:	e840 3200 	strex	r2, r3, [r0]
   d7b34:	2a00      	cmp	r2, #0
   d7b36:	d1f9      	bne.n	d7b2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d7b38:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7b3c:	2e00      	cmp	r6, #0
   d7b3e:	d03f      	beq.n	d7bc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7b40:	4618      	mov	r0, r3
   d7b42:	f7fd fa1f 	bl	d4f84 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d7b46:	4607      	mov	r7, r0
   d7b48:	b120      	cbz	r0, d7b54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7b4a:	4621      	mov	r1, r4
   d7b4c:	4630      	mov	r0, r6
   d7b4e:	f7ff fe53 	bl	d77f8 <_ZNKSt8functionIFvRKbEEclES1_>
   d7b52:	e02e      	b.n	d7bb2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7b54:	4631      	mov	r1, r6
   d7b56:	a801      	add	r0, sp, #4
   d7b58:	f7ff ffaf 	bl	d7aba <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7b5c:	7823      	ldrb	r3, [r4, #0]
   d7b5e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7b62:	2010      	movs	r0, #16
   d7b64:	f7fc fa99 	bl	d409a <_Znwj>
   d7b68:	4605      	mov	r5, r0
   d7b6a:	b1d0      	cbz	r0, d7ba2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7b6c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b6e:	2014      	movs	r0, #20
   d7b70:	f7fc fa93 	bl	d409a <_Znwj>
   d7b74:	4604      	mov	r4, r0
   d7b76:	b178      	cbz	r0, d7b98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7b78:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7b7a:	4601      	mov	r1, r0
   d7b7c:	a801      	add	r0, sp, #4
   d7b7e:	f7ff fcf9 	bl	d7574 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b82:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7b84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b86:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b88:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7b8a:	9203      	str	r2, [sp, #12]
   d7b8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b8e:	60e3      	str	r3, [r4, #12]
   d7b90:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7b94:	9204      	str	r2, [sp, #16]
   d7b96:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7b98:	4b0a      	ldr	r3, [pc, #40]	; (d7bc4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d7b9a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7b9c:	4b0a      	ldr	r3, [pc, #40]	; (d7bc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7b9e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d7ba0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7ba2:	a801      	add	r0, sp, #4
   d7ba4:	f7ff fcd7 	bl	d7556 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7ba8:	2200      	movs	r2, #0
   d7baa:	4629      	mov	r1, r5
   d7bac:	4807      	ldr	r0, [pc, #28]	; (d7bcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d7bae:	f7fd f9f1 	bl	d4f94 <application_thread_invoke>
   d7bb2:	4630      	mov	r0, r6
   d7bb4:	f7ff fccf 	bl	d7556 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d7bb8:	2110      	movs	r1, #16
   d7bba:	4630      	mov	r0, r6
   d7bbc:	f000 fe3a 	bl	d8834 <_ZdlPvj>
        }
    }
   d7bc0:	b007      	add	sp, #28
   d7bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7bc4:	000d780b 	.word	0x000d780b
   d7bc8:	000d7ad9 	.word	0x000d7ad9
   d7bcc:	000d7f65 	.word	0x000d7f65

000d7bd0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7bd0:	b530      	push	{r4, r5, lr}
   d7bd2:	b085      	sub	sp, #20
   d7bd4:	4604      	mov	r4, r0
   d7bd6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7bd8:	4668      	mov	r0, sp
   d7bda:	4611      	mov	r1, r2
   d7bdc:	f7ff fdc9 	bl	d7772 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7be0:	b17c      	cbz	r4, d7c02 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7be2:	b224      	sxth	r4, r4
   d7be4:	4628      	mov	r0, r5
   d7be6:	b10d      	cbz	r5, d7bec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d7be8:	f001 fc02 	bl	d93f0 <strdup>
   d7bec:	9002      	str	r0, [sp, #8]
   d7bee:	a902      	add	r1, sp, #8
   d7bf0:	4668      	mov	r0, sp
   d7bf2:	f8ad 400c 	strh.w	r4, [sp, #12]
   d7bf6:	f7ff fe1f 	bl	d7838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7bfa:	a802      	add	r0, sp, #8
   d7bfc:	f7ff fd7e 	bl	d76fc <_ZN8particle5ErrorD1Ev>
   d7c00:	e01d      	b.n	d7c3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7c02:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7c04:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d7c08:	f04f 0201 	mov.w	r2, #1
   d7c0c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7c10:	42a3      	cmp	r3, r4
   d7c12:	d103      	bne.n	d7c1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7c14:	e8c0 2f41 	strexb	r1, r2, [r0]
   d7c18:	2900      	cmp	r1, #0
   d7c1a:	d1f7      	bne.n	d7c0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7c1c:	d002      	beq.n	d7c24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7c1e:	f88d 3008 	strb.w	r3, [sp, #8]
   d7c22:	e00c      	b.n	d7c3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7c24:	f110 010c 	adds.w	r1, r0, #12
   d7c28:	f04f 0301 	mov.w	r3, #1
   d7c2c:	bf18      	it	ne
   d7c2e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7c30:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7c34:	3004      	adds	r0, #4
   d7c36:	f800 3c03 	strb.w	r3, [r0, #-3]
   d7c3a:	f7ff ff71 	bl	d7b20 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7c3e:	a801      	add	r0, sp, #4
   d7c40:	f7fc fb40 	bl	d42c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7c44:	b005      	add	sp, #20
   d7c46:	bd30      	pop	{r4, r5, pc}

000d7c48 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7c48:	4770      	bx	lr

000d7c4a <_ZN9IPAddressD0Ev>:
   d7c4a:	b510      	push	{r4, lr}
   d7c4c:	2118      	movs	r1, #24
   d7c4e:	4604      	mov	r4, r0
   d7c50:	f000 fdf0 	bl	d8834 <_ZdlPvj>
   d7c54:	4620      	mov	r0, r4
   d7c56:	bd10      	pop	{r4, pc}

000d7c58 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7c58:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7c5a:	7d03      	ldrb	r3, [r0, #20]
   d7c5c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7c5e:	b08d      	sub	sp, #52	; 0x34
   d7c60:	460e      	mov	r6, r1
   d7c62:	f100 0704 	add.w	r7, r0, #4
   d7c66:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7c6a:	d002      	beq.n	d7c72 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7c6c:	f100 0508 	add.w	r5, r0, #8
   d7c70:	e018      	b.n	d7ca4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c72:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c74:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7c76:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7c7a:	232f      	movs	r3, #47	; 0x2f
   d7c7c:	462a      	mov	r2, r5
   d7c7e:	200a      	movs	r0, #10
   d7c80:	f7fd f868 	bl	d4d54 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7c84:	4628      	mov	r0, r5
   d7c86:	f001 fbce 	bl	d9426 <strlen>
   d7c8a:	6833      	ldr	r3, [r6, #0]
   d7c8c:	4602      	mov	r2, r0
   d7c8e:	68db      	ldr	r3, [r3, #12]
   d7c90:	4629      	mov	r1, r5
   d7c92:	4630      	mov	r0, r6
   d7c94:	4798      	blx	r3
   d7c96:	e00f      	b.n	d7cb8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7c98:	b124      	cbz	r4, d7ca4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7c9a:	212e      	movs	r1, #46	; 0x2e
   d7c9c:	4630      	mov	r0, r6
   d7c9e:	f7fe fbf3 	bl	d6488 <_ZN5Print5printEc>
   d7ca2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7ca4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7ca8:	220a      	movs	r2, #10
   d7caa:	4630      	mov	r0, r6
   d7cac:	f7fe fbfb 	bl	d64a6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7cb0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7cb2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7cb4:	d1f0      	bne.n	d7c98 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7cb6:	4620      	mov	r0, r4
    }
    return n;
}
   d7cb8:	b00d      	add	sp, #52	; 0x34
   d7cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7cbc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7cbc:	b510      	push	{r4, lr}
   d7cbe:	4b05      	ldr	r3, [pc, #20]	; (d7cd4 <_ZN9IPAddressC1Ev+0x18>)
   d7cc0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7cc2:	2211      	movs	r2, #17
   d7cc4:	f840 3b04 	str.w	r3, [r0], #4
   d7cc8:	2100      	movs	r1, #0
   d7cca:	f001 fb3e 	bl	d934a <memset>
{
    clear();
}
   d7cce:	4620      	mov	r0, r4
   d7cd0:	bd10      	pop	{r4, pc}
   d7cd2:	bf00      	nop
   d7cd4:	000d9b5c 	.word	0x000d9b5c

000d7cd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7cd8:	4603      	mov	r3, r0
   d7cda:	4a07      	ldr	r2, [pc, #28]	; (d7cf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7cdc:	b510      	push	{r4, lr}
   d7cde:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7ce2:	f101 0210 	add.w	r2, r1, #16
   d7ce6:	f851 4b04 	ldr.w	r4, [r1], #4
   d7cea:	f843 4b04 	str.w	r4, [r3], #4
   d7cee:	4291      	cmp	r1, r2
   d7cf0:	d1f9      	bne.n	d7ce6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7cf2:	780a      	ldrb	r2, [r1, #0]
   d7cf4:	701a      	strb	r2, [r3, #0]
}
   d7cf6:	bd10      	pop	{r4, pc}
   d7cf8:	000d9b5c 	.word	0x000d9b5c

000d7cfc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7cfc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7cfe:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7d02:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7d06:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7d0a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7d0e:	2304      	movs	r3, #4
   d7d10:	6041      	str	r1, [r0, #4]
   d7d12:	7503      	strb	r3, [r0, #20]
   d7d14:	bd10      	pop	{r4, pc}

000d7d16 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7d16:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7d18:	780d      	ldrb	r5, [r1, #0]
   d7d1a:	788b      	ldrb	r3, [r1, #2]
   d7d1c:	784a      	ldrb	r2, [r1, #1]
   d7d1e:	78c9      	ldrb	r1, [r1, #3]
   d7d20:	9100      	str	r1, [sp, #0]
   d7d22:	4629      	mov	r1, r5
   d7d24:	f7ff ffea 	bl	d7cfc <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7d28:	b003      	add	sp, #12
   d7d2a:	bd30      	pop	{r4, r5, pc}

000d7d2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d2c:	7441      	strb	r1, [r0, #17]
   d7d2e:	4770      	bx	lr

000d7d30 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7d30:	4770      	bx	lr

000d7d32 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7d32:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7d34:	2100      	movs	r1, #0
   d7d36:	7c00      	ldrb	r0, [r0, #16]
   d7d38:	f7fd f8cc 	bl	d4ed4 <HAL_USB_USART_Receive_Data>
}
   d7d3c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d40:	bf28      	it	cs
   d7d42:	f04f 30ff 	movcs.w	r0, #4294967295
   d7d46:	bd08      	pop	{r3, pc}

000d7d48 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7d48:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7d4a:	2101      	movs	r1, #1
   d7d4c:	7c00      	ldrb	r0, [r0, #16]
   d7d4e:	f7fd f8c1 	bl	d4ed4 <HAL_USB_USART_Receive_Data>
}
   d7d52:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7d56:	bf28      	it	cs
   d7d58:	f04f 30ff 	movcs.w	r0, #4294967295
   d7d5c:	bd08      	pop	{r3, pc}

000d7d5e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7d5e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7d60:	7c00      	ldrb	r0, [r0, #16]
   d7d62:	f7fd f8af 	bl	d4ec4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7d66:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d6a:	bd08      	pop	{r3, pc}

000d7d6c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7d6c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7d6e:	7c00      	ldrb	r0, [r0, #16]
   d7d70:	f7fd f8a0 	bl	d4eb4 <HAL_USB_USART_Available_Data>
}
   d7d74:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d78:	bd08      	pop	{r3, pc}

000d7d7a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7d7a:	7c00      	ldrb	r0, [r0, #16]
   d7d7c:	f7fd b8ba 	b.w	d4ef4 <HAL_USB_USART_Flush_Data>

000d7d80 <_ZN9USBSerialD0Ev>:
   d7d80:	b510      	push	{r4, lr}
   d7d82:	2114      	movs	r1, #20
   d7d84:	4604      	mov	r4, r0
   d7d86:	f000 fd55 	bl	d8834 <_ZdlPvj>
   d7d8a:	4620      	mov	r0, r4
   d7d8c:	bd10      	pop	{r4, pc}

000d7d8e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7d8e:	b538      	push	{r3, r4, r5, lr}
   d7d90:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d92:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7d94:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d96:	f7fd f895 	bl	d4ec4 <HAL_USB_USART_Available_Data_For_Write>
   d7d9a:	2800      	cmp	r0, #0
   d7d9c:	dc01      	bgt.n	d7da2 <_ZN9USBSerial5writeEh+0x14>
   d7d9e:	7c60      	ldrb	r0, [r4, #17]
   d7da0:	b128      	cbz	r0, d7dae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7da2:	4629      	mov	r1, r5
   d7da4:	7c20      	ldrb	r0, [r4, #16]
   d7da6:	f7fd f89d 	bl	d4ee4 <HAL_USB_USART_Send_Data>
   d7daa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7dae:	bd38      	pop	{r3, r4, r5, pc}

000d7db0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7db0:	b510      	push	{r4, lr}
   d7db2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7db4:	2300      	movs	r3, #0
   d7db6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7db8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7dbc:	60a3      	str	r3, [r4, #8]
   d7dbe:	4b05      	ldr	r3, [pc, #20]	; (d7dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7dc0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7dc2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7dc4:	4608      	mov	r0, r1
{
  _serial = serial;
   d7dc6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7dc8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7dca:	4611      	mov	r1, r2
   d7dcc:	f7fd f85a 	bl	d4e84 <HAL_USB_USART_Init>
}
   d7dd0:	4620      	mov	r0, r4
   d7dd2:	bd10      	pop	{r4, pc}
   d7dd4:	000d9b70 	.word	0x000d9b70

000d7dd8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7dd8:	2200      	movs	r2, #0
   d7dda:	7c00      	ldrb	r0, [r0, #16]
   d7ddc:	f7fd b85a 	b.w	d4e94 <HAL_USB_USART_Begin>

000d7de0 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7de0:	7c00      	ldrb	r0, [r0, #16]
   d7de2:	f7fd b85f 	b.w	d4ea4 <HAL_USB_USART_End>

000d7de6 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7de6:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7de8:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7dea:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7dec:	2100      	movs	r1, #0
   d7dee:	f001 faac 	bl	d934a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7df2:	4620      	mov	r0, r4
   d7df4:	bd10      	pop	{r4, pc}
	...

000d7df8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7df8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7dfa:	4d0e      	ldr	r5, [pc, #56]	; (d7e34 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7dfc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7dfe:	a801      	add	r0, sp, #4
   d7e00:	f7ff fff1 	bl	d7de6 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e04:	6829      	ldr	r1, [r5, #0]
   d7e06:	f011 0401 	ands.w	r4, r1, #1
   d7e0a:	d110      	bne.n	d7e2e <_Z16_fetch_usbserialv+0x36>
   d7e0c:	4628      	mov	r0, r5
   d7e0e:	f7fc f955 	bl	d40bc <__cxa_guard_acquire>
   d7e12:	b160      	cbz	r0, d7e2e <_Z16_fetch_usbserialv+0x36>
   d7e14:	aa01      	add	r2, sp, #4
   d7e16:	4621      	mov	r1, r4
   d7e18:	4807      	ldr	r0, [pc, #28]	; (d7e38 <_Z16_fetch_usbserialv+0x40>)
   d7e1a:	f7ff ffc9 	bl	d7db0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7e1e:	4628      	mov	r0, r5
   d7e20:	f7fc f951 	bl	d40c6 <__cxa_guard_release>
   d7e24:	4a05      	ldr	r2, [pc, #20]	; (d7e3c <_Z16_fetch_usbserialv+0x44>)
   d7e26:	4906      	ldr	r1, [pc, #24]	; (d7e40 <_Z16_fetch_usbserialv+0x48>)
   d7e28:	4803      	ldr	r0, [pc, #12]	; (d7e38 <_Z16_fetch_usbserialv+0x40>)
   d7e2a:	f000 fcf5 	bl	d8818 <__aeabi_atexit>
	return _usbserial;
}
   d7e2e:	4802      	ldr	r0, [pc, #8]	; (d7e38 <_Z16_fetch_usbserialv+0x40>)
   d7e30:	b007      	add	sp, #28
   d7e32:	bd30      	pop	{r4, r5, pc}
   d7e34:	2003e408 	.word	0x2003e408
   d7e38:	2003e40c 	.word	0x2003e40c
   d7e3c:	2003e308 	.word	0x2003e308
   d7e40:	000d7d31 	.word	0x000d7d31

000d7e44 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
   d7e44:	f7fc be8c 	b.w	d4b60 <HAL_Interrupts_Disable_All>

000d7e48 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
   d7e48:	f7fc be82 	b.w	d4b50 <HAL_Interrupts_Enable_All>

000d7e4c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7e4c:	4770      	bx	lr

000d7e4e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e4e:	7441      	strb	r1, [r0, #17]
   d7e50:	4770      	bx	lr

000d7e52 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7e52:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7e54:	7c00      	ldrb	r0, [r0, #16]
   d7e56:	f7fc ffc5 	bl	d4de4 <HAL_USART_Available_Data_For_Write>
}
   d7e5a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e5e:	bd08      	pop	{r3, pc}

000d7e60 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7e60:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7e62:	7c00      	ldrb	r0, [r0, #16]
   d7e64:	f7fc ff96 	bl	d4d94 <HAL_USART_Available_Data>
}
   d7e68:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e6c:	bd08      	pop	{r3, pc}

000d7e6e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7e6e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7e70:	7c00      	ldrb	r0, [r0, #16]
   d7e72:	f7fc ff9f 	bl	d4db4 <HAL_USART_Peek_Data>
}
   d7e76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e7a:	bf28      	it	cs
   d7e7c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7e80:	bd08      	pop	{r3, pc}

000d7e82 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7e82:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7e84:	7c00      	ldrb	r0, [r0, #16]
   d7e86:	f7fc ff8d 	bl	d4da4 <HAL_USART_Read_Data>
}
   d7e8a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7e8e:	bf28      	it	cs
   d7e90:	f04f 30ff 	movcs.w	r0, #4294967295
   d7e94:	bd08      	pop	{r3, pc}

000d7e96 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7e96:	7c00      	ldrb	r0, [r0, #16]
   d7e98:	f7fc bf94 	b.w	d4dc4 <HAL_USART_Flush_Data>

000d7e9c <_ZN11USARTSerialD0Ev>:
   d7e9c:	b510      	push	{r4, lr}
   d7e9e:	2114      	movs	r1, #20
   d7ea0:	4604      	mov	r4, r0
   d7ea2:	f000 fcc7 	bl	d8834 <_ZdlPvj>
   d7ea6:	4620      	mov	r0, r4
   d7ea8:	bd10      	pop	{r4, pc}

000d7eaa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7eaa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7eac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7eae:	4604      	mov	r4, r0
   d7eb0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7eb2:	b925      	cbnz	r5, d7ebe <_ZN11USARTSerial5writeEh+0x14>
   d7eb4:	7c00      	ldrb	r0, [r0, #16]
   d7eb6:	f7fc ff95 	bl	d4de4 <HAL_USART_Available_Data_For_Write>
   d7eba:	2800      	cmp	r0, #0
   d7ebc:	dd05      	ble.n	d7eca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7ebe:	4631      	mov	r1, r6
   d7ec0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7ec6:	f7fc bf5d 	b.w	d4d84 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7eca:	4628      	mov	r0, r5
   d7ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7ed0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7ed0:	b510      	push	{r4, lr}
   d7ed2:	4604      	mov	r4, r0
   d7ed4:	4608      	mov	r0, r1
   d7ed6:	4611      	mov	r1, r2
   d7ed8:	2200      	movs	r2, #0
   d7eda:	6062      	str	r2, [r4, #4]
   d7edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7ee0:	60a2      	str	r2, [r4, #8]
   d7ee2:	4a05      	ldr	r2, [pc, #20]	; (d7ef8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7ee4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7ee6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7ee8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7eea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7eec:	461a      	mov	r2, r3
   d7eee:	f7fc ff39 	bl	d4d64 <HAL_USART_Init>
}
   d7ef2:	4620      	mov	r0, r4
   d7ef4:	bd10      	pop	{r4, pc}
   d7ef6:	bf00      	nop
   d7ef8:	000d9ba0 	.word	0x000d9ba0

000d7efc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7efc:	2300      	movs	r3, #0
   d7efe:	7c00      	ldrb	r0, [r0, #16]
   d7f00:	f7fc bf78 	b.w	d4df4 <HAL_USART_BeginConfig>

000d7f04 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7f04:	2200      	movs	r2, #0
   d7f06:	f7ff bff9 	b.w	d7efc <_ZN11USARTSerial5beginEmm>

000d7f0a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7f0a:	7c00      	ldrb	r0, [r0, #16]
   d7f0c:	f7fc bf32 	b.w	d4d74 <HAL_USART_End>

000d7f10 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7f10:	7c00      	ldrb	r0, [r0, #16]
   d7f12:	f7fc bf5f 	b.w	d4dd4 <HAL_USART_Is_Enabled>
	...

000d7f18 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7f18:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7f1a:	4d0c      	ldr	r5, [pc, #48]	; (d7f4c <_Z22__fetch_global_Serial1v+0x34>)
   d7f1c:	6829      	ldr	r1, [r5, #0]
   d7f1e:	f011 0401 	ands.w	r4, r1, #1
   d7f22:	d111      	bne.n	d7f48 <_Z22__fetch_global_Serial1v+0x30>
   d7f24:	4628      	mov	r0, r5
   d7f26:	f7fc f8c9 	bl	d40bc <__cxa_guard_acquire>
   d7f2a:	b168      	cbz	r0, d7f48 <_Z22__fetch_global_Serial1v+0x30>
   d7f2c:	4a08      	ldr	r2, [pc, #32]	; (d7f50 <_Z22__fetch_global_Serial1v+0x38>)
   d7f2e:	4b09      	ldr	r3, [pc, #36]	; (d7f54 <_Z22__fetch_global_Serial1v+0x3c>)
   d7f30:	4809      	ldr	r0, [pc, #36]	; (d7f58 <_Z22__fetch_global_Serial1v+0x40>)
   d7f32:	4621      	mov	r1, r4
   d7f34:	f7ff ffcc 	bl	d7ed0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7f38:	4628      	mov	r0, r5
   d7f3a:	f7fc f8c4 	bl	d40c6 <__cxa_guard_release>
   d7f3e:	4a07      	ldr	r2, [pc, #28]	; (d7f5c <_Z22__fetch_global_Serial1v+0x44>)
   d7f40:	4907      	ldr	r1, [pc, #28]	; (d7f60 <_Z22__fetch_global_Serial1v+0x48>)
   d7f42:	4805      	ldr	r0, [pc, #20]	; (d7f58 <_Z22__fetch_global_Serial1v+0x40>)
   d7f44:	f000 fc68 	bl	d8818 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7f48:	4803      	ldr	r0, [pc, #12]	; (d7f58 <_Z22__fetch_global_Serial1v+0x40>)
   d7f4a:	bd38      	pop	{r3, r4, r5, pc}
   d7f4c:	2003e4b8 	.word	0x2003e4b8
   d7f50:	2003e4bc 	.word	0x2003e4bc
   d7f54:	2003e434 	.word	0x2003e434
   d7f58:	2003e420 	.word	0x2003e420
   d7f5c:	2003e308 	.word	0x2003e308
   d7f60:	000d7e4d 	.word	0x000d7e4d

000d7f64 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7f64:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7f66:	6883      	ldr	r3, [r0, #8]
   d7f68:	4604      	mov	r4, r0
   d7f6a:	b90b      	cbnz	r3, d7f70 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7f6c:	f000 fc75 	bl	d885a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7f70:	68c3      	ldr	r3, [r0, #12]
   d7f72:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7f74:	68a3      	ldr	r3, [r4, #8]
   d7f76:	b11b      	cbz	r3, d7f80 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7f78:	2203      	movs	r2, #3
   d7f7a:	4621      	mov	r1, r4
   d7f7c:	4620      	mov	r0, r4
   d7f7e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7f80:	4620      	mov	r0, r4
   d7f82:	2110      	movs	r1, #16
}
   d7f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7f88:	f000 bc54 	b.w	d8834 <_ZdlPvj>

000d7f8c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7f8c:	4770      	bx	lr

000d7f8e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7f90:	4606      	mov	r6, r0
   d7f92:	4615      	mov	r5, r2
   d7f94:	460c      	mov	r4, r1
   d7f96:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7f98:	42bc      	cmp	r4, r7
   d7f9a:	d006      	beq.n	d7faa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7f9c:	6833      	ldr	r3, [r6, #0]
   d7f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7fa2:	689b      	ldr	r3, [r3, #8]
   d7fa4:	4630      	mov	r0, r6
   d7fa6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7fa8:	e7f6      	b.n	d7f98 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7faa:	4628      	mov	r0, r5
   d7fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7fae <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7fae:	2200      	movs	r2, #0
   d7fb0:	7c00      	ldrb	r0, [r0, #16]
   d7fb2:	f7fc bf27 	b.w	d4e04 <HAL_I2C_Write_Data>

000d7fb6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7fb6:	2100      	movs	r1, #0
   d7fb8:	7c00      	ldrb	r0, [r0, #16]
   d7fba:	f7fc bf2b 	b.w	d4e14 <HAL_I2C_Available_Data>

000d7fbe <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7fbe:	2100      	movs	r1, #0
   d7fc0:	7c00      	ldrb	r0, [r0, #16]
   d7fc2:	f7fc bf2f 	b.w	d4e24 <HAL_I2C_Read_Data>

000d7fc6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7fc6:	2100      	movs	r1, #0
   d7fc8:	7c00      	ldrb	r0, [r0, #16]
   d7fca:	f7fc bf33 	b.w	d4e34 <HAL_I2C_Peek_Data>

000d7fce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7fce:	2100      	movs	r1, #0
   d7fd0:	7c00      	ldrb	r0, [r0, #16]
   d7fd2:	f7fc bf37 	b.w	d4e44 <HAL_I2C_Flush_Data>

000d7fd6 <_ZN7TwoWireD0Ev>:
   d7fd6:	b510      	push	{r4, lr}
   d7fd8:	2114      	movs	r1, #20
   d7fda:	4604      	mov	r4, r0
   d7fdc:	f000 fc2a 	bl	d8834 <_ZdlPvj>
   d7fe0:	4620      	mov	r0, r4
   d7fe2:	bd10      	pop	{r4, pc}

000d7fe4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7fe4:	b510      	push	{r4, lr}
   d7fe6:	4604      	mov	r4, r0
   d7fe8:	2300      	movs	r3, #0
   d7fea:	6063      	str	r3, [r4, #4]
   d7fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7ff0:	60a3      	str	r3, [r4, #8]
   d7ff2:	4b04      	ldr	r3, [pc, #16]	; (d8004 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7ff4:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7ff6:	4608      	mov	r0, r1
   d7ff8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7ffa:	4611      	mov	r1, r2
   d7ffc:	f7fc ff32 	bl	d4e64 <HAL_I2C_Init>
}
   d8000:	4620      	mov	r0, r4
   d8002:	bd10      	pop	{r4, pc}
   d8004:	000d9bd0 	.word	0x000d9bd0

000d8008 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8008:	2100      	movs	r1, #0
   d800a:	7c00      	ldrb	r0, [r0, #16]
   d800c:	f7fc bf22 	b.w	d4e54 <HAL_I2C_Is_Enabled>

000d8010 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8010:	2200      	movs	r2, #0
   d8012:	4611      	mov	r1, r2
   d8014:	6840      	ldr	r0, [r0, #4]
   d8016:	f7fd b819 	b.w	d504c <network_listening>

000d801a <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d801a:	2200      	movs	r2, #0
   d801c:	4611      	mov	r1, r2
   d801e:	6840      	ldr	r0, [r0, #4]
   d8020:	f7fd b824 	b.w	d506c <network_get_listen_timeout>

000d8024 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8024:	2200      	movs	r2, #0
   d8026:	6840      	ldr	r0, [r0, #4]
   d8028:	f7fd b818 	b.w	d505c <network_set_listen_timeout>

000d802c <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d802c:	2200      	movs	r2, #0
   d802e:	f081 0101 	eor.w	r1, r1, #1
   d8032:	6840      	ldr	r0, [r0, #4]
   d8034:	f7fd b802 	b.w	d503c <network_listen>

000d8038 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8038:	2300      	movs	r3, #0
   d803a:	461a      	mov	r2, r3
   d803c:	2101      	movs	r1, #1
   d803e:	6840      	ldr	r0, [r0, #4]
   d8040:	f7fc bff4 	b.w	d502c <network_off>

000d8044 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8044:	2300      	movs	r3, #0
   d8046:	461a      	mov	r2, r3
   d8048:	4619      	mov	r1, r3
   d804a:	6840      	ldr	r0, [r0, #4]
   d804c:	f7fc bfe6 	b.w	d501c <network_on>

000d8050 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8050:	2200      	movs	r2, #0
   d8052:	4611      	mov	r1, r2
   d8054:	6840      	ldr	r0, [r0, #4]
   d8056:	f7fc bfd9 	b.w	d500c <network_ready>

000d805a <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d805a:	2200      	movs	r2, #0
   d805c:	4611      	mov	r1, r2
   d805e:	6840      	ldr	r0, [r0, #4]
   d8060:	f7fc bfc4 	b.w	d4fec <network_connecting>

000d8064 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8064:	2200      	movs	r2, #0
   d8066:	2102      	movs	r1, #2
   d8068:	6840      	ldr	r0, [r0, #4]
   d806a:	f7fc bfc7 	b.w	d4ffc <network_disconnect>

000d806e <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d806e:	2300      	movs	r3, #0
   d8070:	461a      	mov	r2, r3
   d8072:	6840      	ldr	r0, [r0, #4]
   d8074:	f7fc bfb2 	b.w	d4fdc <network_connect>

000d8078 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8078:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d807a:	4605      	mov	r5, r0
   d807c:	b188      	cbz	r0, d80a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d807e:	6804      	ldr	r4, [r0, #0]
   d8080:	b14c      	cbz	r4, d8096 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d8082:	68a3      	ldr	r3, [r4, #8]
   d8084:	b11b      	cbz	r3, d808e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8086:	2203      	movs	r2, #3
   d8088:	4621      	mov	r1, r4
   d808a:	4620      	mov	r0, r4
   d808c:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d808e:	2110      	movs	r1, #16
   d8090:	4620      	mov	r0, r4
   d8092:	f000 fbcf 	bl	d8834 <_ZdlPvj>
   d8096:	4628      	mov	r0, r5
   d8098:	2114      	movs	r1, #20
      }
   d809a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d809e:	f000 bbc9 	b.w	d8834 <_ZdlPvj>
   d80a2:	bd38      	pop	{r3, r4, r5, pc}

000d80a4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d80a4:	b110      	cbz	r0, d80ac <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d80a6:	6803      	ldr	r3, [r0, #0]
   d80a8:	685b      	ldr	r3, [r3, #4]
   d80aa:	4718      	bx	r3
   d80ac:	4770      	bx	lr

000d80ae <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d80ae:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d80b0:	6803      	ldr	r3, [r0, #0]
   d80b2:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d80b4:	b1bb      	cbz	r3, d80e6 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d80b6:	6858      	ldr	r0, [r3, #4]
   d80b8:	f7fc fe14 	bl	d4ce4 <os_thread_is_current>
   d80bc:	b978      	cbnz	r0, d80de <_ZN6ThreadD1Ev+0x30>
   d80be:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d80c0:	7c5a      	ldrb	r2, [r3, #17]
   d80c2:	b912      	cbnz	r2, d80ca <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d80c4:	6858      	ldr	r0, [r3, #4]
   d80c6:	f7fc fe15 	bl	d4cf4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d80ca:	6823      	ldr	r3, [r4, #0]
   d80cc:	6858      	ldr	r0, [r3, #4]
   d80ce:	f7fc fe19 	bl	d4d04 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d80d2:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d80d4:	2300      	movs	r3, #0
   d80d6:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d80d8:	b128      	cbz	r0, d80e6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d80da:	f7ff ffcd 	bl	d8078 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d80de:	6820      	ldr	r0, [r4, #0]
   d80e0:	b108      	cbz	r0, d80e6 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d80e2:	f7ff ffc9 	bl	d8078 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d80e6:	4620      	mov	r0, r4
   d80e8:	bd10      	pop	{r4, pc}

000d80ea <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d80ea:	b538      	push	{r3, r4, r5, lr}
   d80ec:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d80ee:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d80f2:	b108      	cbz	r0, d80f8 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d80f4:	f7fb ffd5 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d80f8:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d80fc:	b108      	cbz	r0, d8102 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d80fe:	f7fc fe11 	bl	d4d24 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8102:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8106:	b135      	cbz	r5, d8116 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8108:	4628      	mov	r0, r5
   d810a:	f7ff ffd0 	bl	d80ae <_ZN6ThreadD1Ev>
   d810e:	2104      	movs	r1, #4
   d8110:	4628      	mov	r0, r5
   d8112:	f000 fb8f 	bl	d8834 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8116:	6820      	ldr	r0, [r4, #0]
   d8118:	b108      	cbz	r0, d811e <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d811a:	f7ff ffc3 	bl	d80a4 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d811e:	4620      	mov	r0, r4
   d8120:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8124 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8124:	b510      	push	{r4, lr}
   d8126:	4b04      	ldr	r3, [pc, #16]	; (d8138 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8128:	4604      	mov	r4, r0
   d812a:	f840 3b08 	str.w	r3, [r0], #8
   d812e:	f7ff ffdc 	bl	d80ea <_ZN5spark11MeshPublishD1Ev>
   d8132:	4620      	mov	r0, r4
   d8134:	bd10      	pop	{r4, pc}
   d8136:	bf00      	nop
   d8138:	000d9bf8 	.word	0x000d9bf8

000d813c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d813c:	b538      	push	{r3, r4, r5, lr}
   d813e:	4c0e      	ldr	r4, [pc, #56]	; (d8178 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8140:	4b0e      	ldr	r3, [pc, #56]	; (d817c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8142:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8144:	2500      	movs	r5, #0
   d8146:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8148:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d814c:	6063      	str	r3, [r4, #4]
   d814e:	60a5      	str	r5, [r4, #8]
   d8150:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8154:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8158:	f7fc fddc 	bl	d4d14 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d815c:	4b08      	ldr	r3, [pc, #32]	; (d8180 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d815e:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8162:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8166:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8168:	4620      	mov	r0, r4
   d816a:	4a06      	ldr	r2, [pc, #24]	; (d8184 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d816c:	4906      	ldr	r1, [pc, #24]	; (d8188 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d816e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8172:	f000 bb51 	b.w	d8818 <__aeabi_atexit>
   d8176:	bf00      	nop
   d8178:	2003e540 	.word	0x2003e540
   d817c:	000d9c60 	.word	0x000d9c60
   d8180:	000d9bf8 	.word	0x000d9bf8
   d8184:	2003e308 	.word	0x2003e308
   d8188:	000d8125 	.word	0x000d8125

000d818c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d818c:	2200      	movs	r2, #0
   d818e:	4611      	mov	r1, r2
   d8190:	6840      	ldr	r0, [r0, #4]
   d8192:	f7fc bf3b 	b.w	d500c <network_ready>

000d8196 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8196:	2200      	movs	r2, #0
   d8198:	4611      	mov	r1, r2
   d819a:	6840      	ldr	r0, [r0, #4]
   d819c:	f7fc bf56 	b.w	d504c <network_listening>

000d81a0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d81a0:	2200      	movs	r2, #0
   d81a2:	4611      	mov	r1, r2
   d81a4:	6840      	ldr	r0, [r0, #4]
   d81a6:	f7fc bf61 	b.w	d506c <network_get_listen_timeout>

000d81aa <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d81aa:	2200      	movs	r2, #0
   d81ac:	6840      	ldr	r0, [r0, #4]
   d81ae:	f7fc bf55 	b.w	d505c <network_set_listen_timeout>

000d81b2 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d81b2:	2200      	movs	r2, #0
   d81b4:	f081 0101 	eor.w	r1, r1, #1
   d81b8:	6840      	ldr	r0, [r0, #4]
   d81ba:	f7fc bf3f 	b.w	d503c <network_listen>

000d81be <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d81be:	2300      	movs	r3, #0
   d81c0:	461a      	mov	r2, r3
   d81c2:	4619      	mov	r1, r3
   d81c4:	6840      	ldr	r0, [r0, #4]
   d81c6:	f7fc bf31 	b.w	d502c <network_off>

000d81ca <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d81ca:	2300      	movs	r3, #0
   d81cc:	461a      	mov	r2, r3
   d81ce:	4619      	mov	r1, r3
   d81d0:	6840      	ldr	r0, [r0, #4]
   d81d2:	f7fc bf23 	b.w	d501c <network_on>

000d81d6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d81d6:	2200      	movs	r2, #0
   d81d8:	4611      	mov	r1, r2
   d81da:	6840      	ldr	r0, [r0, #4]
   d81dc:	f7fc bf06 	b.w	d4fec <network_connecting>

000d81e0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d81e0:	2200      	movs	r2, #0
   d81e2:	2102      	movs	r1, #2
   d81e4:	6840      	ldr	r0, [r0, #4]
   d81e6:	f7fc bf09 	b.w	d4ffc <network_disconnect>

000d81ea <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d81ea:	2300      	movs	r3, #0
   d81ec:	461a      	mov	r2, r3
   d81ee:	6840      	ldr	r0, [r0, #4]
   d81f0:	f7fc bef4 	b.w	d4fdc <network_connect>

000d81f4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d81f4:	4b02      	ldr	r3, [pc, #8]	; (d8200 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d81f6:	2204      	movs	r2, #4
   d81f8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d81fa:	4a02      	ldr	r2, [pc, #8]	; (d8204 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d81fc:	601a      	str	r2, [r3, #0]
   d81fe:	4770      	bx	lr
   d8200:	2003e714 	.word	0x2003e714
   d8204:	000d9c2c 	.word	0x000d9c2c

000d8208 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8208:	2300      	movs	r3, #0
   d820a:	461a      	mov	r2, r3
   d820c:	6840      	ldr	r0, [r0, #4]
   d820e:	f7fc bee5 	b.w	d4fdc <network_connect>

000d8212 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8212:	2200      	movs	r2, #0
   d8214:	2102      	movs	r1, #2
   d8216:	6840      	ldr	r0, [r0, #4]
   d8218:	f7fc bef0 	b.w	d4ffc <network_disconnect>

000d821c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d821c:	2200      	movs	r2, #0
   d821e:	4611      	mov	r1, r2
   d8220:	6840      	ldr	r0, [r0, #4]
   d8222:	f7fc bee3 	b.w	d4fec <network_connecting>

000d8226 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8226:	2200      	movs	r2, #0
   d8228:	4611      	mov	r1, r2
   d822a:	6840      	ldr	r0, [r0, #4]
   d822c:	f7fc beee 	b.w	d500c <network_ready>

000d8230 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8230:	2300      	movs	r3, #0
   d8232:	461a      	mov	r2, r3
   d8234:	4619      	mov	r1, r3
   d8236:	6840      	ldr	r0, [r0, #4]
   d8238:	f7fc bef0 	b.w	d501c <network_on>

000d823c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d823c:	2300      	movs	r3, #0
   d823e:	461a      	mov	r2, r3
   d8240:	4619      	mov	r1, r3
   d8242:	6840      	ldr	r0, [r0, #4]
   d8244:	f7fc bef2 	b.w	d502c <network_off>

000d8248 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8248:	2200      	movs	r2, #0
   d824a:	f081 0101 	eor.w	r1, r1, #1
   d824e:	6840      	ldr	r0, [r0, #4]
   d8250:	f7fc bef4 	b.w	d503c <network_listen>

000d8254 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8254:	2200      	movs	r2, #0
   d8256:	6840      	ldr	r0, [r0, #4]
   d8258:	f7fc bf00 	b.w	d505c <network_set_listen_timeout>

000d825c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d825c:	2200      	movs	r2, #0
   d825e:	4611      	mov	r1, r2
   d8260:	6840      	ldr	r0, [r0, #4]
   d8262:	f7fc bf03 	b.w	d506c <network_get_listen_timeout>

000d8266 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8266:	2200      	movs	r2, #0
   d8268:	4611      	mov	r1, r2
   d826a:	6840      	ldr	r0, [r0, #4]
   d826c:	f7fc beee 	b.w	d504c <network_listening>

000d8270 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8274:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8276:	b095      	sub	sp, #84	; 0x54
   d8278:	4616      	mov	r6, r2
   d827a:	460d      	mov	r5, r1
   d827c:	4607      	mov	r7, r0
    IPAddress addr;
   d827e:	f7ff fd1d 	bl	d7cbc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8282:	4621      	mov	r1, r4
   d8284:	2220      	movs	r2, #32
   d8286:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8288:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d828a:	f001 f85e 	bl	d934a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d828e:	2340      	movs	r3, #64	; 0x40
   d8290:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8292:	4621      	mov	r1, r4
   d8294:	466b      	mov	r3, sp
   d8296:	aa0c      	add	r2, sp, #48	; 0x30
   d8298:	4630      	mov	r0, r6
   d829a:	f7fc fc39 	bl	d4b10 <netdb_getaddrinfo>
    if (!r) {
   d829e:	4604      	mov	r4, r0
   d82a0:	2800      	cmp	r0, #0
   d82a2:	d144      	bne.n	d832e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d82a4:	4602      	mov	r2, r0
   d82a6:	2101      	movs	r1, #1
   d82a8:	6868      	ldr	r0, [r5, #4]
   d82aa:	f7fc feaf 	bl	d500c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d82ae:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d82b0:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d82b2:	4622      	mov	r2, r4
   d82b4:	6868      	ldr	r0, [r5, #4]
   d82b6:	f7fc fea9 	bl	d500c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82ba:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d82bc:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d82be:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d82c0:	2e00      	cmp	r6, #0
   d82c2:	d034      	beq.n	d832e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d82c4:	2900      	cmp	r1, #0
   d82c6:	d132      	bne.n	d832e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d82c8:	6873      	ldr	r3, [r6, #4]
   d82ca:	2b02      	cmp	r3, #2
   d82cc:	d002      	beq.n	d82d4 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d82ce:	2b0a      	cmp	r3, #10
   d82d0:	d009      	beq.n	d82e6 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d82d2:	e02a      	b.n	d832a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d82d4:	f1b8 0f00 	cmp.w	r8, #0
   d82d8:	d027      	beq.n	d832a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d82da:	6971      	ldr	r1, [r6, #20]
   d82dc:	4638      	mov	r0, r7
   d82de:	3104      	adds	r1, #4
   d82e0:	f7ff fd19 	bl	d7d16 <_ZN9IPAddressaSEPKh>
   d82e4:	e020      	b.n	d8328 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d82e6:	f1b9 0f00 	cmp.w	r9, #0
   d82ea:	d01e      	beq.n	d832a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d82ec:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d82ee:	2211      	movs	r2, #17
   d82f0:	a801      	add	r0, sp, #4
   d82f2:	f001 f82a 	bl	d934a <memset>
                    a.v = 6;
   d82f6:	2306      	movs	r3, #6
   d82f8:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d82fc:	ad01      	add	r5, sp, #4
   d82fe:	f104 0308 	add.w	r3, r4, #8
   d8302:	3418      	adds	r4, #24
   d8304:	6818      	ldr	r0, [r3, #0]
   d8306:	6859      	ldr	r1, [r3, #4]
   d8308:	462a      	mov	r2, r5
   d830a:	c203      	stmia	r2!, {r0, r1}
   d830c:	3308      	adds	r3, #8
   d830e:	42a3      	cmp	r3, r4
   d8310:	4615      	mov	r5, r2
   d8312:	d1f7      	bne.n	d8304 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8314:	a901      	add	r1, sp, #4
   d8316:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8318:	ad07      	add	r5, sp, #28
   d831a:	f7ff fcdd 	bl	d7cd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d831e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8320:	1d3c      	adds	r4, r7, #4
   d8322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8324:	682b      	ldr	r3, [r5, #0]
   d8326:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8328:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d832a:	69f6      	ldr	r6, [r6, #28]
   d832c:	e7c8      	b.n	d82c0 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d832e:	9800      	ldr	r0, [sp, #0]
   d8330:	f7fc fbe6 	bl	d4b00 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8334:	4638      	mov	r0, r7
   d8336:	b015      	add	sp, #84	; 0x54
   d8338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d833c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d833c:	4b02      	ldr	r3, [pc, #8]	; (d8348 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d833e:	4a03      	ldr	r2, [pc, #12]	; (d834c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8340:	601a      	str	r2, [r3, #0]
   d8342:	2200      	movs	r2, #0
   d8344:	605a      	str	r2, [r3, #4]
   d8346:	4770      	bx	lr
   d8348:	2003e71c 	.word	0x2003e71c
   d834c:	000d9c60 	.word	0x000d9c60

000d8350 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d8350:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d8354:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8356:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d835a:	2901      	cmp	r1, #1
   d835c:	4610      	mov	r0, r2
   d835e:	d104      	bne.n	d836a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d8360:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d8364:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d8368:	e004      	b.n	d8374 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d836a:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d836c:	bf04      	itt	eq
   d836e:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d8372:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d8374:	3b01      	subs	r3, #1
   d8376:	f102 0210 	add.w	r2, r2, #16
   d837a:	d1ec      	bne.n	d8356 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d837c:	4770      	bx	lr

000d837e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d837e:	b40e      	push	{r1, r2, r3}
   d8380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8384:	b087      	sub	sp, #28
   d8386:	af00      	add	r7, sp, #0
   d8388:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d838c:	4605      	mov	r5, r0
   d838e:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d8392:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8394:	4623      	mov	r3, r4
   d8396:	4632      	mov	r2, r6
   d8398:	2110      	movs	r1, #16
   d839a:	f107 0008 	add.w	r0, r7, #8
   d839e:	f7fc feb5 	bl	d510c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d83a2:	280f      	cmp	r0, #15
   d83a4:	d916      	bls.n	d83d4 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d83a6:	f100 0308 	add.w	r3, r0, #8
   d83aa:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d83ae:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d83b0:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d83b4:	4632      	mov	r2, r6
   d83b6:	1c41      	adds	r1, r0, #1
   d83b8:	4623      	mov	r3, r4
   d83ba:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d83bc:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d83be:	f7fc fea5 	bl	d510c <vsnprintf>
        va_end(args);
        if (n > 0) {
   d83c2:	1e02      	subs	r2, r0, #0
   d83c4:	dd04      	ble.n	d83d0 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d83c6:	682b      	ldr	r3, [r5, #0]
   d83c8:	4669      	mov	r1, sp
   d83ca:	689b      	ldr	r3, [r3, #8]
   d83cc:	4628      	mov	r0, r5
   d83ce:	4798      	blx	r3
   d83d0:	46c5      	mov	sp, r8
   d83d2:	e007      	b.n	d83e4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d83d4:	b130      	cbz	r0, d83e4 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d83d6:	682b      	ldr	r3, [r5, #0]
   d83d8:	4602      	mov	r2, r0
   d83da:	689b      	ldr	r3, [r3, #8]
   d83dc:	f107 0108 	add.w	r1, r7, #8
   d83e0:	4628      	mov	r0, r5
   d83e2:	4798      	blx	r3
    }
}
   d83e4:	371c      	adds	r7, #28
   d83e6:	46bd      	mov	sp, r7
   d83e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d83ec:	b003      	add	sp, #12
   d83ee:	4770      	bx	lr

000d83f0 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d83f0:	b513      	push	{r0, r1, r4, lr}
   d83f2:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d83f4:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d83f6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d83fa:	6894      	ldr	r4, [r2, #8]
   d83fc:	4619      	mov	r1, r3
   d83fe:	2201      	movs	r2, #1
   d8400:	47a0      	blx	r4
}
   d8402:	b002      	add	sp, #8
   d8404:	bd10      	pop	{r4, pc}

000d8406 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d8406:	6883      	ldr	r3, [r0, #8]
   d8408:	b1fb      	cbz	r3, d844a <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d840a:	781a      	ldrb	r2, [r3, #0]
   d840c:	2a03      	cmp	r2, #3
   d840e:	d81a      	bhi.n	d8446 <_ZNK5spark9JSONValue4typeEv+0x40>
   d8410:	e8df f002 	tbb	[pc, r2]
   d8414:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d8418:	2005      	movs	r0, #5
   d841a:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d841c:	6802      	ldr	r2, [r0, #0]
   d841e:	685b      	ldr	r3, [r3, #4]
   d8420:	6852      	ldr	r2, [r2, #4]
   d8422:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8424:	282d      	cmp	r0, #45	; 0x2d
   d8426:	d014      	beq.n	d8452 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8428:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d842c:	2b09      	cmp	r3, #9
   d842e:	d910      	bls.n	d8452 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8430:	2874      	cmp	r0, #116	; 0x74
   d8432:	d010      	beq.n	d8456 <_ZNK5spark9JSONValue4typeEv+0x50>
   d8434:	2866      	cmp	r0, #102	; 0x66
   d8436:	d00e      	beq.n	d8456 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8438:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d843c:	4258      	negs	r0, r3
   d843e:	4158      	adcs	r0, r3
   d8440:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d8442:	2006      	movs	r0, #6
   d8444:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8446:	2000      	movs	r0, #0
   d8448:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d844a:	4618      	mov	r0, r3
   d844c:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d844e:	2004      	movs	r0, #4
   d8450:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d8452:	2003      	movs	r0, #3
   d8454:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d8456:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d8458:	4770      	bx	lr

000d845a <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d845a:	b510      	push	{r4, lr}
   d845c:	4604      	mov	r4, r0
    switch (type()) {
   d845e:	f7ff ffd2 	bl	d8406 <_ZNK5spark9JSONValue4typeEv>
   d8462:	2802      	cmp	r0, #2
   d8464:	d00d      	beq.n	d8482 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d8466:	d316      	bcc.n	d8496 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d8468:	2804      	cmp	r0, #4
   d846a:	d814      	bhi.n	d8496 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d846c:	6822      	ldr	r2, [r4, #0]
   d846e:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d8470:	6850      	ldr	r0, [r2, #4]
   d8472:	685b      	ldr	r3, [r3, #4]
   d8474:	220a      	movs	r2, #10
   d8476:	2100      	movs	r1, #0
   d8478:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d847a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d847e:	f001 b895 	b.w	d95ac <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d8482:	6822      	ldr	r2, [r4, #0]
   d8484:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8486:	6852      	ldr	r2, [r2, #4]
   d8488:	685b      	ldr	r3, [r3, #4]
   d848a:	5cd0      	ldrb	r0, [r2, r3]
   d848c:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d8490:	4258      	negs	r0, r3
   d8492:	4158      	adcs	r0, r3
   d8494:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d8496:	2000      	movs	r0, #0
    }
}
   d8498:	bd10      	pop	{r4, pc}

000d849a <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d849a:	b510      	push	{r4, lr}
    if (!n_) {
   d849c:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d849e:	4604      	mov	r4, r0
    if (!n_) {
   d84a0:	b15b      	cbz	r3, d84ba <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d84a2:	6880      	ldr	r0, [r0, #8]
   d84a4:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d84a6:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d84a8:	3010      	adds	r0, #16
   d84aa:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d84ac:	6120      	str	r0, [r4, #16]
    --n_;
   d84ae:	6163      	str	r3, [r4, #20]
    if (n_) {
   d84b0:	b12b      	cbz	r3, d84be <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d84b2:	f7ff ff4d 	bl	d8350 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d84b6:	60a0      	str	r0, [r4, #8]
   d84b8:	e001      	b.n	d84be <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d84ba:	4618      	mov	r0, r3
   d84bc:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d84be:	2001      	movs	r0, #1
}
   d84c0:	bd10      	pop	{r4, pc}

000d84c2 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d84c2:	b510      	push	{r4, lr}
    write('}');
   d84c4:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d84c6:	4604      	mov	r4, r0
    write('}');
   d84c8:	f7ff ff92 	bl	d83f0 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d84cc:	2301      	movs	r3, #1
   d84ce:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d84d0:	4620      	mov	r0, r4
   d84d2:	bd10      	pop	{r4, pc}

000d84d4 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d84d4:	b508      	push	{r3, lr}
    switch (state_) {
   d84d6:	7903      	ldrb	r3, [r0, #4]
   d84d8:	2b01      	cmp	r3, #1
   d84da:	d002      	beq.n	d84e2 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d84dc:	2b02      	cmp	r3, #2
   d84de:	d002      	beq.n	d84e6 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d84e0:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d84e2:	212c      	movs	r1, #44	; 0x2c
   d84e4:	e000      	b.n	d84e8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d84e6:	213a      	movs	r1, #58	; 0x3a
   d84e8:	f7ff ff82 	bl	d83f0 <_ZN5spark10JSONWriter5writeEc>
   d84ec:	bd08      	pop	{r3, pc}

000d84ee <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d84ee:	b510      	push	{r4, lr}
   d84f0:	4604      	mov	r4, r0
    writeSeparator();
   d84f2:	f7ff ffef 	bl	d84d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d84f6:	4620      	mov	r0, r4
   d84f8:	217b      	movs	r1, #123	; 0x7b
   d84fa:	f7ff ff79 	bl	d83f0 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d84fe:	2300      	movs	r3, #0
   d8500:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8502:	4620      	mov	r0, r4
   d8504:	bd10      	pop	{r4, pc}
	...

000d8508 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8508:	b538      	push	{r3, r4, r5, lr}
   d850a:	4604      	mov	r4, r0
   d850c:	460d      	mov	r5, r1
    writeSeparator();
   d850e:	f7ff ffe1 	bl	d84d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8512:	6823      	ldr	r3, [r4, #0]
   d8514:	4904      	ldr	r1, [pc, #16]	; (d8528 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8516:	68db      	ldr	r3, [r3, #12]
   d8518:	4620      	mov	r0, r4
   d851a:	462a      	mov	r2, r5
   d851c:	4798      	blx	r3
    state_ = NEXT;
   d851e:	2301      	movs	r3, #1
   d8520:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8522:	4620      	mov	r0, r4
   d8524:	bd38      	pop	{r3, r4, r5, pc}
   d8526:	bf00      	nop
   d8528:	000d9a66 	.word	0x000d9a66

000d852c <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d852c:	b538      	push	{r3, r4, r5, lr}
   d852e:	4604      	mov	r4, r0
   d8530:	460d      	mov	r5, r1
    writeSeparator();
   d8532:	f7ff ffcf 	bl	d84d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8536:	6823      	ldr	r3, [r4, #0]
   d8538:	4904      	ldr	r1, [pc, #16]	; (d854c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d853a:	68db      	ldr	r3, [r3, #12]
   d853c:	4620      	mov	r0, r4
   d853e:	462a      	mov	r2, r5
   d8540:	4798      	blx	r3
    state_ = NEXT;
   d8542:	2301      	movs	r3, #1
   d8544:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8546:	4620      	mov	r0, r4
   d8548:	bd38      	pop	{r3, r4, r5, pc}
   d854a:	bf00      	nop
   d854c:	000d9667 	.word	0x000d9667

000d8550 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8552:	460d      	mov	r5, r1
   d8554:	4617      	mov	r7, r2
    write('"');
   d8556:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8558:	4604      	mov	r4, r0
   d855a:	442f      	add	r7, r5
    write('"');
   d855c:	f7ff ff48 	bl	d83f0 <_ZN5spark10JSONWriter5writeEc>
   d8560:	462a      	mov	r2, r5
    const char* const end = str + size;
   d8562:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d8564:	42ba      	cmp	r2, r7
   d8566:	d038      	beq.n	d85da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d8568:	4616      	mov	r6, r2
   d856a:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d856e:	2d22      	cmp	r5, #34	; 0x22
   d8570:	d003      	beq.n	d857a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8572:	2d5c      	cmp	r5, #92	; 0x5c
   d8574:	d001      	beq.n	d857a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8576:	2d1f      	cmp	r5, #31
   d8578:	d82d      	bhi.n	d85d6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d857a:	6823      	ldr	r3, [r4, #0]
   d857c:	1a52      	subs	r2, r2, r1
   d857e:	689b      	ldr	r3, [r3, #8]
   d8580:	4620      	mov	r0, r4
   d8582:	4798      	blx	r3
            write('\\');
   d8584:	215c      	movs	r1, #92	; 0x5c
   d8586:	4620      	mov	r0, r4
   d8588:	f7ff ff32 	bl	d83f0 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d858c:	2d0c      	cmp	r5, #12
   d858e:	d019      	beq.n	d85c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d8590:	d807      	bhi.n	d85a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d8592:	2d09      	cmp	r5, #9
   d8594:	d00f      	beq.n	d85b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d8596:	2d0a      	cmp	r5, #10
   d8598:	d012      	beq.n	d85c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d859a:	2d08      	cmp	r5, #8
   d859c:	d114      	bne.n	d85c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d859e:	2162      	movs	r1, #98	; 0x62
   d85a0:	e00a      	b.n	d85b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d85a2:	2d22      	cmp	r5, #34	; 0x22
   d85a4:	d005      	beq.n	d85b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d85a6:	2d5c      	cmp	r5, #92	; 0x5c
   d85a8:	d003      	beq.n	d85b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d85aa:	2d0d      	cmp	r5, #13
   d85ac:	d10c      	bne.n	d85c8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d85ae:	2172      	movs	r1, #114	; 0x72
   d85b0:	e002      	b.n	d85b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d85b2:	4629      	mov	r1, r5
   d85b4:	e000      	b.n	d85b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d85b6:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d85b8:	4620      	mov	r0, r4
   d85ba:	f7ff ff19 	bl	d83f0 <_ZN5spark10JSONWriter5writeEc>
                break;
   d85be:	e009      	b.n	d85d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d85c0:	216e      	movs	r1, #110	; 0x6e
   d85c2:	e7f9      	b.n	d85b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d85c4:	2166      	movs	r1, #102	; 0x66
   d85c6:	e7f7      	b.n	d85b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d85c8:	6823      	ldr	r3, [r4, #0]
   d85ca:	490a      	ldr	r1, [pc, #40]	; (d85f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d85cc:	68db      	ldr	r3, [r3, #12]
   d85ce:	462a      	mov	r2, r5
   d85d0:	4620      	mov	r0, r4
   d85d2:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d85d4:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d85d6:	4632      	mov	r2, r6
   d85d8:	e7c4      	b.n	d8564 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d85da:	4291      	cmp	r1, r2
   d85dc:	d004      	beq.n	d85e8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d85de:	6823      	ldr	r3, [r4, #0]
   d85e0:	1a52      	subs	r2, r2, r1
   d85e2:	689d      	ldr	r5, [r3, #8]
   d85e4:	4620      	mov	r0, r4
   d85e6:	47a8      	blx	r5
    }
    write('"');
   d85e8:	2122      	movs	r1, #34	; 0x22
   d85ea:	4620      	mov	r0, r4
   d85ec:	f7ff ff00 	bl	d83f0 <_ZN5spark10JSONWriter5writeEc>
   d85f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d85f2:	bf00      	nop
   d85f4:	000d9ca9 	.word	0x000d9ca9

000d85f8 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d85f8:	b570      	push	{r4, r5, r6, lr}
   d85fa:	4604      	mov	r4, r0
   d85fc:	460d      	mov	r5, r1
   d85fe:	4616      	mov	r6, r2
    writeSeparator();
   d8600:	f7ff ff68 	bl	d84d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8604:	4620      	mov	r0, r4
   d8606:	4632      	mov	r2, r6
   d8608:	4629      	mov	r1, r5
   d860a:	f7ff ffa1 	bl	d8550 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d860e:	2302      	movs	r3, #2
   d8610:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8612:	4620      	mov	r0, r4
   d8614:	bd70      	pop	{r4, r5, r6, pc}

000d8616 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8616:	b570      	push	{r4, r5, r6, lr}
   d8618:	4604      	mov	r4, r0
   d861a:	460d      	mov	r5, r1
   d861c:	4616      	mov	r6, r2
    writeSeparator();
   d861e:	f7ff ff59 	bl	d84d4 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8622:	4620      	mov	r0, r4
   d8624:	4632      	mov	r2, r6
   d8626:	4629      	mov	r1, r5
   d8628:	f7ff ff92 	bl	d8550 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d862c:	2301      	movs	r3, #1
   d862e:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8630:	4620      	mov	r0, r4
   d8632:	bd70      	pop	{r4, r5, r6, pc}

000d8634 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8634:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8636:	2300      	movs	r3, #0
   d8638:	4604      	mov	r4, r0
   d863a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d863c:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d863e:	4810      	ldr	r0, [pc, #64]	; (d8680 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d8640:	60a0      	str	r0, [r4, #8]
   d8642:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8644:	b1d1      	cbz	r1, d867c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d8646:	780b      	ldrb	r3, [r1, #0]
   d8648:	2b03      	cmp	r3, #3
   d864a:	d006      	beq.n	d865a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d864c:	b9b3      	cbnz	r3, d867c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d864e:	6813      	ldr	r3, [r2, #0]
   d8650:	6858      	ldr	r0, [r3, #4]
   d8652:	684b      	ldr	r3, [r1, #4]
   d8654:	5cc3      	ldrb	r3, [r0, r3]
   d8656:	2b6e      	cmp	r3, #110	; 0x6e
   d8658:	d008      	beq.n	d866c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d865a:	6813      	ldr	r3, [r2, #0]
   d865c:	6858      	ldr	r0, [r3, #4]
   d865e:	684b      	ldr	r3, [r1, #4]
   d8660:	4403      	add	r3, r0
   d8662:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d8664:	688b      	ldr	r3, [r1, #8]
   d8666:	6849      	ldr	r1, [r1, #4]
   d8668:	1a5b      	subs	r3, r3, r1
   d866a:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d866c:	4611      	mov	r1, r2
   d866e:	4620      	mov	r0, r4
   d8670:	f851 3b04 	ldr.w	r3, [r1], #4
   d8674:	f840 3b04 	str.w	r3, [r0], #4
   d8678:	f7fd fab4 	bl	d5be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d867c:	4620      	mov	r0, r4
   d867e:	bd10      	pop	{r4, pc}
   d8680:	000d9a8c 	.word	0x000d9a8c

000d8684 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8684:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8686:	b510      	push	{r4, lr}
   d8688:	4604      	mov	r4, r0
   d868a:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d868c:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d868e:	6083      	str	r3, [r0, #8]
   d8690:	60c3      	str	r3, [r0, #12]
   d8692:	6103      	str	r3, [r0, #16]
   d8694:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d8696:	b171      	cbz	r1, d86b6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d8698:	780b      	ldrb	r3, [r1, #0]
   d869a:	2b01      	cmp	r3, #1
   d869c:	d10b      	bne.n	d86b6 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d869e:	f101 0310 	add.w	r3, r1, #16
   d86a2:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d86a4:	68cb      	ldr	r3, [r1, #12]
   d86a6:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d86a8:	4611      	mov	r1, r2
   d86aa:	f851 3b04 	ldr.w	r3, [r1], #4
   d86ae:	f840 3b04 	str.w	r3, [r0], #4
   d86b2:	f7fd fa97 	bl	d5be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d86b6:	4620      	mov	r0, r4
   d86b8:	bd10      	pop	{r4, pc}

000d86ba <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d86ba:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d86bc:	b510      	push	{r4, lr}
   d86be:	4604      	mov	r4, r0
   d86c0:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d86c2:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d86c4:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d86c6:	b131      	cbz	r1, d86d6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d86c8:	4611      	mov	r1, r2
   d86ca:	f851 3b04 	ldr.w	r3, [r1], #4
   d86ce:	f840 3b04 	str.w	r3, [r0], #4
   d86d2:	f7fd fa87 	bl	d5be4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d86d6:	4620      	mov	r0, r4
   d86d8:	bd10      	pop	{r4, pc}
	...

000d86dc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d86dc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d86de:	4e18      	ldr	r6, [pc, #96]	; (d8740 <pinAvailable+0x64>)
   d86e0:	6831      	ldr	r1, [r6, #0]
   d86e2:	f011 0501 	ands.w	r5, r1, #1
   d86e6:	4604      	mov	r4, r0
   d86e8:	d10a      	bne.n	d8700 <pinAvailable+0x24>
   d86ea:	4630      	mov	r0, r6
   d86ec:	f7fb fce6 	bl	d40bc <__cxa_guard_acquire>
   d86f0:	b130      	cbz	r0, d8700 <pinAvailable+0x24>
   d86f2:	4629      	mov	r1, r5
   d86f4:	4813      	ldr	r0, [pc, #76]	; (d8744 <pinAvailable+0x68>)
   d86f6:	f7fc fd5f 	bl	d51b8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d86fa:	4630      	mov	r0, r6
   d86fc:	f7fb fce3 	bl	d40c6 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d8700:	4810      	ldr	r0, [pc, #64]	; (d8744 <pinAvailable+0x68>)
   d8702:	f7fc fd63 	bl	d51cc <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8706:	b128      	cbz	r0, d8714 <pinAvailable+0x38>
   d8708:	f1a4 030b 	sub.w	r3, r4, #11
   d870c:	2b02      	cmp	r3, #2
   d870e:	d801      	bhi.n	d8714 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d8710:	2000      	movs	r0, #0
   d8712:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8714:	f000 f85a 	bl	d87cc <_Z19__fetch_global_Wirev>
   d8718:	f7ff fc76 	bl	d8008 <_ZN7TwoWire9isEnabledEv>
   d871c:	b108      	cbz	r0, d8722 <pinAvailable+0x46>
   d871e:	2c01      	cmp	r4, #1
   d8720:	d9f6      	bls.n	d8710 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8722:	f7ff fbf9 	bl	d7f18 <_Z22__fetch_global_Serial1v>
   d8726:	f7ff fbf3 	bl	d7f10 <_ZN11USARTSerial9isEnabledEv>
   d872a:	b118      	cbz	r0, d8734 <pinAvailable+0x58>
   d872c:	f1a4 0309 	sub.w	r3, r4, #9
   d8730:	2b01      	cmp	r3, #1
   d8732:	d9ed      	bls.n	d8710 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8734:	2c23      	cmp	r4, #35	; 0x23
   d8736:	bf8c      	ite	hi
   d8738:	2000      	movhi	r0, #0
   d873a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d873c:	bd70      	pop	{r4, r5, r6, pc}
   d873e:	bf00      	nop
   d8740:	2003e724 	.word	0x2003e724
   d8744:	2003e728 	.word	0x2003e728

000d8748 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8748:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d874a:	b538      	push	{r3, r4, r5, lr}
   d874c:	4604      	mov	r4, r0
   d874e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8750:	d80a      	bhi.n	d8768 <pinMode+0x20>
   d8752:	29ff      	cmp	r1, #255	; 0xff
   d8754:	d008      	beq.n	d8768 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8756:	f7ff ffc1 	bl	d86dc <pinAvailable>
   d875a:	b128      	cbz	r0, d8768 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d875c:	4629      	mov	r1, r5
   d875e:	4620      	mov	r0, r4
}
   d8760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8764:	f7fc b9ec 	b.w	d4b40 <HAL_Pin_Mode>
   d8768:	bd38      	pop	{r3, r4, r5, pc}

000d876a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d876a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d876c:	b510      	push	{r4, lr}
   d876e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8770:	bf9c      	itt	ls
   d8772:	340e      	addls	r4, #14
   d8774:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8776:	4620      	mov	r0, r4
   d8778:	f7ff ffb0 	bl	d86dc <pinAvailable>
   d877c:	b150      	cbz	r0, d8794 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d877e:	2103      	movs	r1, #3
   d8780:	4620      	mov	r0, r4
   d8782:	f7fc f9d5 	bl	d4b30 <HAL_Validate_Pin_Function>
   d8786:	2803      	cmp	r0, #3
   d8788:	d104      	bne.n	d8794 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d878a:	4620      	mov	r0, r4
}
   d878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8790:	f7fc b9ee 	b.w	d4b70 <HAL_ADC_Read>
}
   d8794:	2000      	movs	r0, #0
   d8796:	bd10      	pop	{r4, pc}

000d8798 <_Z17acquireWireBufferv>:
   d8798:	b570      	push	{r4, r5, r6, lr}
   d879a:	4604      	mov	r4, r0
   d879c:	2514      	movs	r5, #20
   d879e:	462a      	mov	r2, r5
   d87a0:	4e09      	ldr	r6, [pc, #36]	; (d87c8 <_Z17acquireWireBufferv+0x30>)
   d87a2:	2100      	movs	r1, #0
   d87a4:	f000 fdd1 	bl	d934a <memset>
   d87a8:	8025      	strh	r5, [r4, #0]
   d87aa:	2520      	movs	r5, #32
   d87ac:	4631      	mov	r1, r6
   d87ae:	60a5      	str	r5, [r4, #8]
   d87b0:	6125      	str	r5, [r4, #16]
   d87b2:	4628      	mov	r0, r5
   d87b4:	f000 f840 	bl	d8838 <_ZnajRKSt9nothrow_t>
   d87b8:	4631      	mov	r1, r6
   d87ba:	6060      	str	r0, [r4, #4]
   d87bc:	4628      	mov	r0, r5
   d87be:	f000 f83b 	bl	d8838 <_ZnajRKSt9nothrow_t>
   d87c2:	60e0      	str	r0, [r4, #12]
   d87c4:	4620      	mov	r0, r4
   d87c6:	bd70      	pop	{r4, r5, r6, pc}
   d87c8:	000d9caf 	.word	0x000d9caf

000d87cc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d87cc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87ce:	4d0e      	ldr	r5, [pc, #56]	; (d8808 <_Z19__fetch_global_Wirev+0x3c>)
   d87d0:	6829      	ldr	r1, [r5, #0]
   d87d2:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d87d6:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d87d8:	d113      	bne.n	d8802 <_Z19__fetch_global_Wirev+0x36>
   d87da:	4628      	mov	r0, r5
   d87dc:	f7fb fc6e 	bl	d40bc <__cxa_guard_acquire>
   d87e0:	b178      	cbz	r0, d8802 <_Z19__fetch_global_Wirev+0x36>
   d87e2:	a801      	add	r0, sp, #4
   d87e4:	f7ff ffd8 	bl	d8798 <_Z17acquireWireBufferv>
   d87e8:	aa01      	add	r2, sp, #4
   d87ea:	4621      	mov	r1, r4
   d87ec:	4807      	ldr	r0, [pc, #28]	; (d880c <_Z19__fetch_global_Wirev+0x40>)
   d87ee:	f7ff fbf9 	bl	d7fe4 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d87f2:	4628      	mov	r0, r5
   d87f4:	f7fb fc67 	bl	d40c6 <__cxa_guard_release>
   d87f8:	4a05      	ldr	r2, [pc, #20]	; (d8810 <_Z19__fetch_global_Wirev+0x44>)
   d87fa:	4906      	ldr	r1, [pc, #24]	; (d8814 <_Z19__fetch_global_Wirev+0x48>)
   d87fc:	4803      	ldr	r0, [pc, #12]	; (d880c <_Z19__fetch_global_Wirev+0x40>)
   d87fe:	f000 f80b 	bl	d8818 <__aeabi_atexit>
	return wire;
}
   d8802:	4802      	ldr	r0, [pc, #8]	; (d880c <_Z19__fetch_global_Wirev+0x40>)
   d8804:	b007      	add	sp, #28
   d8806:	bd30      	pop	{r4, r5, pc}
   d8808:	2003e734 	.word	0x2003e734
   d880c:	2003e738 	.word	0x2003e738
   d8810:	2003e308 	.word	0x2003e308
   d8814:	000d7f8d 	.word	0x000d7f8d

000d8818 <__aeabi_atexit>:
   d8818:	460b      	mov	r3, r1
   d881a:	4601      	mov	r1, r0
   d881c:	4618      	mov	r0, r3
   d881e:	f000 bd51 	b.w	d92c4 <__cxa_atexit>
	...

000d8824 <_ZSt15get_new_handlerv>:
   d8824:	4b02      	ldr	r3, [pc, #8]	; (d8830 <_ZSt15get_new_handlerv+0xc>)
   d8826:	6818      	ldr	r0, [r3, #0]
   d8828:	f3bf 8f5f 	dmb	sy
   d882c:	4770      	bx	lr
   d882e:	bf00      	nop
   d8830:	2003e74c 	.word	0x2003e74c

000d8834 <_ZdlPvj>:
   d8834:	f7fb bc33 	b.w	d409e <_ZdlPv>

000d8838 <_ZnajRKSt9nothrow_t>:
   d8838:	f000 b800 	b.w	d883c <_ZnwjRKSt9nothrow_t>

000d883c <_ZnwjRKSt9nothrow_t>:
   d883c:	b510      	push	{r4, lr}
   d883e:	2800      	cmp	r0, #0
   d8840:	bf14      	ite	ne
   d8842:	4604      	movne	r4, r0
   d8844:	2401      	moveq	r4, #1
   d8846:	4620      	mov	r0, r4
   d8848:	f7fc fc40 	bl	d50cc <malloc>
   d884c:	b920      	cbnz	r0, d8858 <_ZnwjRKSt9nothrow_t+0x1c>
   d884e:	f7ff ffe9 	bl	d8824 <_ZSt15get_new_handlerv>
   d8852:	b108      	cbz	r0, d8858 <_ZnwjRKSt9nothrow_t+0x1c>
   d8854:	4780      	blx	r0
   d8856:	e7f6      	b.n	d8846 <_ZnwjRKSt9nothrow_t+0xa>
   d8858:	bd10      	pop	{r4, pc}

000d885a <_ZSt25__throw_bad_function_callv>:
   d885a:	b508      	push	{r3, lr}
   d885c:	f7fc fc5e 	bl	d511c <abort>

000d8860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8860:	4b18      	ldr	r3, [pc, #96]	; (d88c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8862:	681a      	ldr	r2, [r3, #0]
   d8864:	07d1      	lsls	r1, r2, #31
   d8866:	bf5c      	itt	pl
   d8868:	2201      	movpl	r2, #1
   d886a:	601a      	strpl	r2, [r3, #0]
   d886c:	4b16      	ldr	r3, [pc, #88]	; (d88c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d886e:	681a      	ldr	r2, [r3, #0]
   d8870:	07d2      	lsls	r2, r2, #31
   d8872:	bf5c      	itt	pl
   d8874:	2201      	movpl	r2, #1
   d8876:	601a      	strpl	r2, [r3, #0]
   d8878:	4b14      	ldr	r3, [pc, #80]	; (d88cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d887a:	681a      	ldr	r2, [r3, #0]
   d887c:	07d0      	lsls	r0, r2, #31
   d887e:	bf5c      	itt	pl
   d8880:	2201      	movpl	r2, #1
   d8882:	601a      	strpl	r2, [r3, #0]
   d8884:	4b12      	ldr	r3, [pc, #72]	; (d88d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8886:	681a      	ldr	r2, [r3, #0]
   d8888:	07d1      	lsls	r1, r2, #31
   d888a:	bf5c      	itt	pl
   d888c:	2201      	movpl	r2, #1
   d888e:	601a      	strpl	r2, [r3, #0]
   d8890:	4b10      	ldr	r3, [pc, #64]	; (d88d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8892:	681a      	ldr	r2, [r3, #0]
   d8894:	07d2      	lsls	r2, r2, #31
   d8896:	bf5c      	itt	pl
   d8898:	2201      	movpl	r2, #1
   d889a:	601a      	strpl	r2, [r3, #0]
   d889c:	4b0e      	ldr	r3, [pc, #56]	; (d88d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d889e:	681a      	ldr	r2, [r3, #0]
   d88a0:	07d0      	lsls	r0, r2, #31
   d88a2:	bf5c      	itt	pl
   d88a4:	2201      	movpl	r2, #1
   d88a6:	601a      	strpl	r2, [r3, #0]
   d88a8:	4b0c      	ldr	r3, [pc, #48]	; (d88dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d88aa:	681a      	ldr	r2, [r3, #0]
   d88ac:	07d1      	lsls	r1, r2, #31
   d88ae:	bf5c      	itt	pl
   d88b0:	2201      	movpl	r2, #1
   d88b2:	601a      	strpl	r2, [r3, #0]
   d88b4:	4b0a      	ldr	r3, [pc, #40]	; (d88e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d88b6:	681a      	ldr	r2, [r3, #0]
   d88b8:	07d2      	lsls	r2, r2, #31
   d88ba:	bf5c      	itt	pl
   d88bc:	2201      	movpl	r2, #1
   d88be:	601a      	strpl	r2, [r3, #0]
   d88c0:	4770      	bx	lr
   d88c2:	bf00      	nop
   d88c4:	2003e76c 	.word	0x2003e76c
   d88c8:	2003e768 	.word	0x2003e768
   d88cc:	2003e764 	.word	0x2003e764
   d88d0:	2003e760 	.word	0x2003e760
   d88d4:	2003e75c 	.word	0x2003e75c
   d88d8:	2003e758 	.word	0x2003e758
   d88dc:	2003e754 	.word	0x2003e754
   d88e0:	2003e750 	.word	0x2003e750

000d88e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d88e4:	4b24      	ldr	r3, [pc, #144]	; (d8978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d88e6:	681a      	ldr	r2, [r3, #0]
   d88e8:	07d0      	lsls	r0, r2, #31
   d88ea:	bf5c      	itt	pl
   d88ec:	2201      	movpl	r2, #1
   d88ee:	601a      	strpl	r2, [r3, #0]
   d88f0:	4b22      	ldr	r3, [pc, #136]	; (d897c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d88f2:	681a      	ldr	r2, [r3, #0]
   d88f4:	07d1      	lsls	r1, r2, #31
   d88f6:	bf5c      	itt	pl
   d88f8:	2201      	movpl	r2, #1
   d88fa:	601a      	strpl	r2, [r3, #0]
   d88fc:	4b20      	ldr	r3, [pc, #128]	; (d8980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d88fe:	681a      	ldr	r2, [r3, #0]
   d8900:	07d2      	lsls	r2, r2, #31
   d8902:	bf5c      	itt	pl
   d8904:	2201      	movpl	r2, #1
   d8906:	601a      	strpl	r2, [r3, #0]
   d8908:	4b1e      	ldr	r3, [pc, #120]	; (d8984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d890a:	681a      	ldr	r2, [r3, #0]
   d890c:	07d0      	lsls	r0, r2, #31
   d890e:	bf5c      	itt	pl
   d8910:	2201      	movpl	r2, #1
   d8912:	601a      	strpl	r2, [r3, #0]
   d8914:	4b1c      	ldr	r3, [pc, #112]	; (d8988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8916:	681a      	ldr	r2, [r3, #0]
   d8918:	07d1      	lsls	r1, r2, #31
   d891a:	bf5c      	itt	pl
   d891c:	2201      	movpl	r2, #1
   d891e:	601a      	strpl	r2, [r3, #0]
   d8920:	4b1a      	ldr	r3, [pc, #104]	; (d898c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8922:	681a      	ldr	r2, [r3, #0]
   d8924:	07d2      	lsls	r2, r2, #31
   d8926:	bf5c      	itt	pl
   d8928:	2201      	movpl	r2, #1
   d892a:	601a      	strpl	r2, [r3, #0]
   d892c:	4b18      	ldr	r3, [pc, #96]	; (d8990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d892e:	681a      	ldr	r2, [r3, #0]
   d8930:	07d0      	lsls	r0, r2, #31
   d8932:	bf5c      	itt	pl
   d8934:	2201      	movpl	r2, #1
   d8936:	601a      	strpl	r2, [r3, #0]
   d8938:	4b16      	ldr	r3, [pc, #88]	; (d8994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d893a:	681a      	ldr	r2, [r3, #0]
   d893c:	07d1      	lsls	r1, r2, #31
   d893e:	bf5c      	itt	pl
   d8940:	2201      	movpl	r2, #1
   d8942:	601a      	strpl	r2, [r3, #0]
   d8944:	4b14      	ldr	r3, [pc, #80]	; (d8998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8946:	681a      	ldr	r2, [r3, #0]
   d8948:	07d2      	lsls	r2, r2, #31
   d894a:	bf5c      	itt	pl
   d894c:	2201      	movpl	r2, #1
   d894e:	601a      	strpl	r2, [r3, #0]
   d8950:	4b12      	ldr	r3, [pc, #72]	; (d899c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8952:	681a      	ldr	r2, [r3, #0]
   d8954:	07d0      	lsls	r0, r2, #31
   d8956:	bf5c      	itt	pl
   d8958:	2201      	movpl	r2, #1
   d895a:	601a      	strpl	r2, [r3, #0]
   d895c:	4b10      	ldr	r3, [pc, #64]	; (d89a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d895e:	681a      	ldr	r2, [r3, #0]
   d8960:	07d1      	lsls	r1, r2, #31
   d8962:	bf5c      	itt	pl
   d8964:	2201      	movpl	r2, #1
   d8966:	601a      	strpl	r2, [r3, #0]
   d8968:	4b0e      	ldr	r3, [pc, #56]	; (d89a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d896a:	681a      	ldr	r2, [r3, #0]
   d896c:	07d2      	lsls	r2, r2, #31
   d896e:	bf5c      	itt	pl
   d8970:	2201      	movpl	r2, #1
   d8972:	601a      	strpl	r2, [r3, #0]
   d8974:	4770      	bx	lr
   d8976:	bf00      	nop
   d8978:	2003e79c 	.word	0x2003e79c
   d897c:	2003e798 	.word	0x2003e798
   d8980:	2003e794 	.word	0x2003e794
   d8984:	2003e790 	.word	0x2003e790
   d8988:	2003e78c 	.word	0x2003e78c
   d898c:	2003e788 	.word	0x2003e788
   d8990:	2003e784 	.word	0x2003e784
   d8994:	2003e780 	.word	0x2003e780
   d8998:	2003e77c 	.word	0x2003e77c
   d899c:	2003e778 	.word	0x2003e778
   d89a0:	2003e774 	.word	0x2003e774
   d89a4:	2003e770 	.word	0x2003e770

000d89a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d89a8:	4b24      	ldr	r3, [pc, #144]	; (d8a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d89aa:	681a      	ldr	r2, [r3, #0]
   d89ac:	07d0      	lsls	r0, r2, #31
   d89ae:	bf5c      	itt	pl
   d89b0:	2201      	movpl	r2, #1
   d89b2:	601a      	strpl	r2, [r3, #0]
   d89b4:	4b22      	ldr	r3, [pc, #136]	; (d8a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d89b6:	681a      	ldr	r2, [r3, #0]
   d89b8:	07d1      	lsls	r1, r2, #31
   d89ba:	bf5c      	itt	pl
   d89bc:	2201      	movpl	r2, #1
   d89be:	601a      	strpl	r2, [r3, #0]
   d89c0:	4b20      	ldr	r3, [pc, #128]	; (d8a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d89c2:	681a      	ldr	r2, [r3, #0]
   d89c4:	07d2      	lsls	r2, r2, #31
   d89c6:	bf5c      	itt	pl
   d89c8:	2201      	movpl	r2, #1
   d89ca:	601a      	strpl	r2, [r3, #0]
   d89cc:	4b1e      	ldr	r3, [pc, #120]	; (d8a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d89ce:	681a      	ldr	r2, [r3, #0]
   d89d0:	07d0      	lsls	r0, r2, #31
   d89d2:	bf5c      	itt	pl
   d89d4:	2201      	movpl	r2, #1
   d89d6:	601a      	strpl	r2, [r3, #0]
   d89d8:	4b1c      	ldr	r3, [pc, #112]	; (d8a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d89da:	681a      	ldr	r2, [r3, #0]
   d89dc:	07d1      	lsls	r1, r2, #31
   d89de:	bf5c      	itt	pl
   d89e0:	2201      	movpl	r2, #1
   d89e2:	601a      	strpl	r2, [r3, #0]
   d89e4:	4b1a      	ldr	r3, [pc, #104]	; (d8a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d89e6:	681a      	ldr	r2, [r3, #0]
   d89e8:	07d2      	lsls	r2, r2, #31
   d89ea:	bf5c      	itt	pl
   d89ec:	2201      	movpl	r2, #1
   d89ee:	601a      	strpl	r2, [r3, #0]
   d89f0:	4b18      	ldr	r3, [pc, #96]	; (d8a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d89f2:	681a      	ldr	r2, [r3, #0]
   d89f4:	07d0      	lsls	r0, r2, #31
   d89f6:	bf5c      	itt	pl
   d89f8:	2201      	movpl	r2, #1
   d89fa:	601a      	strpl	r2, [r3, #0]
   d89fc:	4b16      	ldr	r3, [pc, #88]	; (d8a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d89fe:	681a      	ldr	r2, [r3, #0]
   d8a00:	07d1      	lsls	r1, r2, #31
   d8a02:	bf5c      	itt	pl
   d8a04:	2201      	movpl	r2, #1
   d8a06:	601a      	strpl	r2, [r3, #0]
   d8a08:	4b14      	ldr	r3, [pc, #80]	; (d8a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8a0a:	681a      	ldr	r2, [r3, #0]
   d8a0c:	07d2      	lsls	r2, r2, #31
   d8a0e:	bf5c      	itt	pl
   d8a10:	2201      	movpl	r2, #1
   d8a12:	601a      	strpl	r2, [r3, #0]
   d8a14:	4b12      	ldr	r3, [pc, #72]	; (d8a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8a16:	681a      	ldr	r2, [r3, #0]
   d8a18:	07d0      	lsls	r0, r2, #31
   d8a1a:	bf5c      	itt	pl
   d8a1c:	2201      	movpl	r2, #1
   d8a1e:	601a      	strpl	r2, [r3, #0]
   d8a20:	4b10      	ldr	r3, [pc, #64]	; (d8a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8a22:	681a      	ldr	r2, [r3, #0]
   d8a24:	07d1      	lsls	r1, r2, #31
   d8a26:	bf5c      	itt	pl
   d8a28:	2201      	movpl	r2, #1
   d8a2a:	601a      	strpl	r2, [r3, #0]
   d8a2c:	4b0e      	ldr	r3, [pc, #56]	; (d8a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8a2e:	681a      	ldr	r2, [r3, #0]
   d8a30:	07d2      	lsls	r2, r2, #31
   d8a32:	bf5c      	itt	pl
   d8a34:	2201      	movpl	r2, #1
   d8a36:	601a      	strpl	r2, [r3, #0]
   d8a38:	4770      	bx	lr
   d8a3a:	bf00      	nop
   d8a3c:	2003e7cc 	.word	0x2003e7cc
   d8a40:	2003e7c8 	.word	0x2003e7c8
   d8a44:	2003e7c4 	.word	0x2003e7c4
   d8a48:	2003e7c0 	.word	0x2003e7c0
   d8a4c:	2003e7bc 	.word	0x2003e7bc
   d8a50:	2003e7b8 	.word	0x2003e7b8
   d8a54:	2003e7b4 	.word	0x2003e7b4
   d8a58:	2003e7b0 	.word	0x2003e7b0
   d8a5c:	2003e7ac 	.word	0x2003e7ac
   d8a60:	2003e7a8 	.word	0x2003e7a8
   d8a64:	2003e7a4 	.word	0x2003e7a4
   d8a68:	2003e7a0 	.word	0x2003e7a0

000d8a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8a6c:	4b18      	ldr	r3, [pc, #96]	; (d8ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8a6e:	681a      	ldr	r2, [r3, #0]
   d8a70:	07d1      	lsls	r1, r2, #31
   d8a72:	bf5c      	itt	pl
   d8a74:	2201      	movpl	r2, #1
   d8a76:	601a      	strpl	r2, [r3, #0]
   d8a78:	4b16      	ldr	r3, [pc, #88]	; (d8ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8a7a:	681a      	ldr	r2, [r3, #0]
   d8a7c:	07d2      	lsls	r2, r2, #31
   d8a7e:	bf5c      	itt	pl
   d8a80:	2201      	movpl	r2, #1
   d8a82:	601a      	strpl	r2, [r3, #0]
   d8a84:	4b14      	ldr	r3, [pc, #80]	; (d8ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8a86:	681a      	ldr	r2, [r3, #0]
   d8a88:	07d0      	lsls	r0, r2, #31
   d8a8a:	bf5c      	itt	pl
   d8a8c:	2201      	movpl	r2, #1
   d8a8e:	601a      	strpl	r2, [r3, #0]
   d8a90:	4b12      	ldr	r3, [pc, #72]	; (d8adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8a92:	681a      	ldr	r2, [r3, #0]
   d8a94:	07d1      	lsls	r1, r2, #31
   d8a96:	bf5c      	itt	pl
   d8a98:	2201      	movpl	r2, #1
   d8a9a:	601a      	strpl	r2, [r3, #0]
   d8a9c:	4b10      	ldr	r3, [pc, #64]	; (d8ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8a9e:	681a      	ldr	r2, [r3, #0]
   d8aa0:	07d2      	lsls	r2, r2, #31
   d8aa2:	bf5c      	itt	pl
   d8aa4:	2201      	movpl	r2, #1
   d8aa6:	601a      	strpl	r2, [r3, #0]
   d8aa8:	4b0e      	ldr	r3, [pc, #56]	; (d8ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8aaa:	681a      	ldr	r2, [r3, #0]
   d8aac:	07d0      	lsls	r0, r2, #31
   d8aae:	bf5c      	itt	pl
   d8ab0:	2201      	movpl	r2, #1
   d8ab2:	601a      	strpl	r2, [r3, #0]
   d8ab4:	4b0c      	ldr	r3, [pc, #48]	; (d8ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8ab6:	681a      	ldr	r2, [r3, #0]
   d8ab8:	07d1      	lsls	r1, r2, #31
   d8aba:	bf5c      	itt	pl
   d8abc:	2201      	movpl	r2, #1
   d8abe:	601a      	strpl	r2, [r3, #0]
   d8ac0:	4b0a      	ldr	r3, [pc, #40]	; (d8aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8ac2:	681a      	ldr	r2, [r3, #0]
   d8ac4:	07d2      	lsls	r2, r2, #31
   d8ac6:	bf5c      	itt	pl
   d8ac8:	2201      	movpl	r2, #1
   d8aca:	601a      	strpl	r2, [r3, #0]
   d8acc:	4770      	bx	lr
   d8ace:	bf00      	nop
   d8ad0:	2003e7ec 	.word	0x2003e7ec
   d8ad4:	2003e7e8 	.word	0x2003e7e8
   d8ad8:	2003e7e4 	.word	0x2003e7e4
   d8adc:	2003e7e0 	.word	0x2003e7e0
   d8ae0:	2003e7dc 	.word	0x2003e7dc
   d8ae4:	2003e7d8 	.word	0x2003e7d8
   d8ae8:	2003e7d4 	.word	0x2003e7d4
   d8aec:	2003e7d0 	.word	0x2003e7d0

000d8af0 <__aeabi_drsub>:
   d8af0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8af4:	e002      	b.n	d8afc <__adddf3>
   d8af6:	bf00      	nop

000d8af8 <__aeabi_dsub>:
   d8af8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8afc <__adddf3>:
   d8afc:	b530      	push	{r4, r5, lr}
   d8afe:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8b02:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8b06:	ea94 0f05 	teq	r4, r5
   d8b0a:	bf08      	it	eq
   d8b0c:	ea90 0f02 	teqeq	r0, r2
   d8b10:	bf1f      	itttt	ne
   d8b12:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8b16:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8b1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8b1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b22:	f000 80e2 	beq.w	d8cea <__adddf3+0x1ee>
   d8b26:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8b2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8b2e:	bfb8      	it	lt
   d8b30:	426d      	neglt	r5, r5
   d8b32:	dd0c      	ble.n	d8b4e <__adddf3+0x52>
   d8b34:	442c      	add	r4, r5
   d8b36:	ea80 0202 	eor.w	r2, r0, r2
   d8b3a:	ea81 0303 	eor.w	r3, r1, r3
   d8b3e:	ea82 0000 	eor.w	r0, r2, r0
   d8b42:	ea83 0101 	eor.w	r1, r3, r1
   d8b46:	ea80 0202 	eor.w	r2, r0, r2
   d8b4a:	ea81 0303 	eor.w	r3, r1, r3
   d8b4e:	2d36      	cmp	r5, #54	; 0x36
   d8b50:	bf88      	it	hi
   d8b52:	bd30      	pophi	{r4, r5, pc}
   d8b54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8b58:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8b5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8b60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8b64:	d002      	beq.n	d8b6c <__adddf3+0x70>
   d8b66:	4240      	negs	r0, r0
   d8b68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8b70:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8b74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8b78:	d002      	beq.n	d8b80 <__adddf3+0x84>
   d8b7a:	4252      	negs	r2, r2
   d8b7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8b80:	ea94 0f05 	teq	r4, r5
   d8b84:	f000 80a7 	beq.w	d8cd6 <__adddf3+0x1da>
   d8b88:	f1a4 0401 	sub.w	r4, r4, #1
   d8b8c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8b90:	db0d      	blt.n	d8bae <__adddf3+0xb2>
   d8b92:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8b96:	fa22 f205 	lsr.w	r2, r2, r5
   d8b9a:	1880      	adds	r0, r0, r2
   d8b9c:	f141 0100 	adc.w	r1, r1, #0
   d8ba0:	fa03 f20e 	lsl.w	r2, r3, lr
   d8ba4:	1880      	adds	r0, r0, r2
   d8ba6:	fa43 f305 	asr.w	r3, r3, r5
   d8baa:	4159      	adcs	r1, r3
   d8bac:	e00e      	b.n	d8bcc <__adddf3+0xd0>
   d8bae:	f1a5 0520 	sub.w	r5, r5, #32
   d8bb2:	f10e 0e20 	add.w	lr, lr, #32
   d8bb6:	2a01      	cmp	r2, #1
   d8bb8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8bbc:	bf28      	it	cs
   d8bbe:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8bc2:	fa43 f305 	asr.w	r3, r3, r5
   d8bc6:	18c0      	adds	r0, r0, r3
   d8bc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8bcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8bd0:	d507      	bpl.n	d8be2 <__adddf3+0xe6>
   d8bd2:	f04f 0e00 	mov.w	lr, #0
   d8bd6:	f1dc 0c00 	rsbs	ip, ip, #0
   d8bda:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8bde:	eb6e 0101 	sbc.w	r1, lr, r1
   d8be2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8be6:	d31b      	bcc.n	d8c20 <__adddf3+0x124>
   d8be8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8bec:	d30c      	bcc.n	d8c08 <__adddf3+0x10c>
   d8bee:	0849      	lsrs	r1, r1, #1
   d8bf0:	ea5f 0030 	movs.w	r0, r0, rrx
   d8bf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8bf8:	f104 0401 	add.w	r4, r4, #1
   d8bfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8c00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8c04:	f080 809a 	bcs.w	d8d3c <__adddf3+0x240>
   d8c08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8c0c:	bf08      	it	eq
   d8c0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8c12:	f150 0000 	adcs.w	r0, r0, #0
   d8c16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c1a:	ea41 0105 	orr.w	r1, r1, r5
   d8c1e:	bd30      	pop	{r4, r5, pc}
   d8c20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8c24:	4140      	adcs	r0, r0
   d8c26:	eb41 0101 	adc.w	r1, r1, r1
   d8c2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8c2e:	f1a4 0401 	sub.w	r4, r4, #1
   d8c32:	d1e9      	bne.n	d8c08 <__adddf3+0x10c>
   d8c34:	f091 0f00 	teq	r1, #0
   d8c38:	bf04      	itt	eq
   d8c3a:	4601      	moveq	r1, r0
   d8c3c:	2000      	moveq	r0, #0
   d8c3e:	fab1 f381 	clz	r3, r1
   d8c42:	bf08      	it	eq
   d8c44:	3320      	addeq	r3, #32
   d8c46:	f1a3 030b 	sub.w	r3, r3, #11
   d8c4a:	f1b3 0220 	subs.w	r2, r3, #32
   d8c4e:	da0c      	bge.n	d8c6a <__adddf3+0x16e>
   d8c50:	320c      	adds	r2, #12
   d8c52:	dd08      	ble.n	d8c66 <__adddf3+0x16a>
   d8c54:	f102 0c14 	add.w	ip, r2, #20
   d8c58:	f1c2 020c 	rsb	r2, r2, #12
   d8c5c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8c60:	fa21 f102 	lsr.w	r1, r1, r2
   d8c64:	e00c      	b.n	d8c80 <__adddf3+0x184>
   d8c66:	f102 0214 	add.w	r2, r2, #20
   d8c6a:	bfd8      	it	le
   d8c6c:	f1c2 0c20 	rsble	ip, r2, #32
   d8c70:	fa01 f102 	lsl.w	r1, r1, r2
   d8c74:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8c78:	bfdc      	itt	le
   d8c7a:	ea41 010c 	orrle.w	r1, r1, ip
   d8c7e:	4090      	lslle	r0, r2
   d8c80:	1ae4      	subs	r4, r4, r3
   d8c82:	bfa2      	ittt	ge
   d8c84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8c88:	4329      	orrge	r1, r5
   d8c8a:	bd30      	popge	{r4, r5, pc}
   d8c8c:	ea6f 0404 	mvn.w	r4, r4
   d8c90:	3c1f      	subs	r4, #31
   d8c92:	da1c      	bge.n	d8cce <__adddf3+0x1d2>
   d8c94:	340c      	adds	r4, #12
   d8c96:	dc0e      	bgt.n	d8cb6 <__adddf3+0x1ba>
   d8c98:	f104 0414 	add.w	r4, r4, #20
   d8c9c:	f1c4 0220 	rsb	r2, r4, #32
   d8ca0:	fa20 f004 	lsr.w	r0, r0, r4
   d8ca4:	fa01 f302 	lsl.w	r3, r1, r2
   d8ca8:	ea40 0003 	orr.w	r0, r0, r3
   d8cac:	fa21 f304 	lsr.w	r3, r1, r4
   d8cb0:	ea45 0103 	orr.w	r1, r5, r3
   d8cb4:	bd30      	pop	{r4, r5, pc}
   d8cb6:	f1c4 040c 	rsb	r4, r4, #12
   d8cba:	f1c4 0220 	rsb	r2, r4, #32
   d8cbe:	fa20 f002 	lsr.w	r0, r0, r2
   d8cc2:	fa01 f304 	lsl.w	r3, r1, r4
   d8cc6:	ea40 0003 	orr.w	r0, r0, r3
   d8cca:	4629      	mov	r1, r5
   d8ccc:	bd30      	pop	{r4, r5, pc}
   d8cce:	fa21 f004 	lsr.w	r0, r1, r4
   d8cd2:	4629      	mov	r1, r5
   d8cd4:	bd30      	pop	{r4, r5, pc}
   d8cd6:	f094 0f00 	teq	r4, #0
   d8cda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8cde:	bf06      	itte	eq
   d8ce0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8ce4:	3401      	addeq	r4, #1
   d8ce6:	3d01      	subne	r5, #1
   d8ce8:	e74e      	b.n	d8b88 <__adddf3+0x8c>
   d8cea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8cee:	bf18      	it	ne
   d8cf0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8cf4:	d029      	beq.n	d8d4a <__adddf3+0x24e>
   d8cf6:	ea94 0f05 	teq	r4, r5
   d8cfa:	bf08      	it	eq
   d8cfc:	ea90 0f02 	teqeq	r0, r2
   d8d00:	d005      	beq.n	d8d0e <__adddf3+0x212>
   d8d02:	ea54 0c00 	orrs.w	ip, r4, r0
   d8d06:	bf04      	itt	eq
   d8d08:	4619      	moveq	r1, r3
   d8d0a:	4610      	moveq	r0, r2
   d8d0c:	bd30      	pop	{r4, r5, pc}
   d8d0e:	ea91 0f03 	teq	r1, r3
   d8d12:	bf1e      	ittt	ne
   d8d14:	2100      	movne	r1, #0
   d8d16:	2000      	movne	r0, #0
   d8d18:	bd30      	popne	{r4, r5, pc}
   d8d1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8d1e:	d105      	bne.n	d8d2c <__adddf3+0x230>
   d8d20:	0040      	lsls	r0, r0, #1
   d8d22:	4149      	adcs	r1, r1
   d8d24:	bf28      	it	cs
   d8d26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8d2a:	bd30      	pop	{r4, r5, pc}
   d8d2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8d30:	bf3c      	itt	cc
   d8d32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8d36:	bd30      	popcc	{r4, r5, pc}
   d8d38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8d40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d44:	f04f 0000 	mov.w	r0, #0
   d8d48:	bd30      	pop	{r4, r5, pc}
   d8d4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8d4e:	bf1a      	itte	ne
   d8d50:	4619      	movne	r1, r3
   d8d52:	4610      	movne	r0, r2
   d8d54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8d58:	bf1c      	itt	ne
   d8d5a:	460b      	movne	r3, r1
   d8d5c:	4602      	movne	r2, r0
   d8d5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8d62:	bf06      	itte	eq
   d8d64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8d68:	ea91 0f03 	teqeq	r1, r3
   d8d6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8d70:	bd30      	pop	{r4, r5, pc}
   d8d72:	bf00      	nop

000d8d74 <__aeabi_ui2d>:
   d8d74:	f090 0f00 	teq	r0, #0
   d8d78:	bf04      	itt	eq
   d8d7a:	2100      	moveq	r1, #0
   d8d7c:	4770      	bxeq	lr
   d8d7e:	b530      	push	{r4, r5, lr}
   d8d80:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8d84:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d88:	f04f 0500 	mov.w	r5, #0
   d8d8c:	f04f 0100 	mov.w	r1, #0
   d8d90:	e750      	b.n	d8c34 <__adddf3+0x138>
   d8d92:	bf00      	nop

000d8d94 <__aeabi_i2d>:
   d8d94:	f090 0f00 	teq	r0, #0
   d8d98:	bf04      	itt	eq
   d8d9a:	2100      	moveq	r1, #0
   d8d9c:	4770      	bxeq	lr
   d8d9e:	b530      	push	{r4, r5, lr}
   d8da0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8da4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8da8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8dac:	bf48      	it	mi
   d8dae:	4240      	negmi	r0, r0
   d8db0:	f04f 0100 	mov.w	r1, #0
   d8db4:	e73e      	b.n	d8c34 <__adddf3+0x138>
   d8db6:	bf00      	nop

000d8db8 <__aeabi_f2d>:
   d8db8:	0042      	lsls	r2, r0, #1
   d8dba:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8dbe:	ea4f 0131 	mov.w	r1, r1, rrx
   d8dc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8dc6:	bf1f      	itttt	ne
   d8dc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8dcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8dd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8dd4:	4770      	bxne	lr
   d8dd6:	f092 0f00 	teq	r2, #0
   d8dda:	bf14      	ite	ne
   d8ddc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8de0:	4770      	bxeq	lr
   d8de2:	b530      	push	{r4, r5, lr}
   d8de4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8de8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8dec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8df0:	e720      	b.n	d8c34 <__adddf3+0x138>
   d8df2:	bf00      	nop

000d8df4 <__aeabi_ul2d>:
   d8df4:	ea50 0201 	orrs.w	r2, r0, r1
   d8df8:	bf08      	it	eq
   d8dfa:	4770      	bxeq	lr
   d8dfc:	b530      	push	{r4, r5, lr}
   d8dfe:	f04f 0500 	mov.w	r5, #0
   d8e02:	e00a      	b.n	d8e1a <__aeabi_l2d+0x16>

000d8e04 <__aeabi_l2d>:
   d8e04:	ea50 0201 	orrs.w	r2, r0, r1
   d8e08:	bf08      	it	eq
   d8e0a:	4770      	bxeq	lr
   d8e0c:	b530      	push	{r4, r5, lr}
   d8e0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8e12:	d502      	bpl.n	d8e1a <__aeabi_l2d+0x16>
   d8e14:	4240      	negs	r0, r0
   d8e16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8e1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8e1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8e22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8e26:	f43f aedc 	beq.w	d8be2 <__adddf3+0xe6>
   d8e2a:	f04f 0203 	mov.w	r2, #3
   d8e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e32:	bf18      	it	ne
   d8e34:	3203      	addne	r2, #3
   d8e36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e3a:	bf18      	it	ne
   d8e3c:	3203      	addne	r2, #3
   d8e3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8e42:	f1c2 0320 	rsb	r3, r2, #32
   d8e46:	fa00 fc03 	lsl.w	ip, r0, r3
   d8e4a:	fa20 f002 	lsr.w	r0, r0, r2
   d8e4e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8e52:	ea40 000e 	orr.w	r0, r0, lr
   d8e56:	fa21 f102 	lsr.w	r1, r1, r2
   d8e5a:	4414      	add	r4, r2
   d8e5c:	e6c1      	b.n	d8be2 <__adddf3+0xe6>
   d8e5e:	bf00      	nop

000d8e60 <__aeabi_dmul>:
   d8e60:	b570      	push	{r4, r5, r6, lr}
   d8e62:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8e6e:	bf1d      	ittte	ne
   d8e70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8e74:	ea94 0f0c 	teqne	r4, ip
   d8e78:	ea95 0f0c 	teqne	r5, ip
   d8e7c:	f000 f8de 	bleq	d903c <__aeabi_dmul+0x1dc>
   d8e80:	442c      	add	r4, r5
   d8e82:	ea81 0603 	eor.w	r6, r1, r3
   d8e86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8e8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8e8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8e92:	bf18      	it	ne
   d8e94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8e98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8ea0:	d038      	beq.n	d8f14 <__aeabi_dmul+0xb4>
   d8ea2:	fba0 ce02 	umull	ip, lr, r0, r2
   d8ea6:	f04f 0500 	mov.w	r5, #0
   d8eaa:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8eae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8eb2:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8eb6:	f04f 0600 	mov.w	r6, #0
   d8eba:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8ebe:	f09c 0f00 	teq	ip, #0
   d8ec2:	bf18      	it	ne
   d8ec4:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ec8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ecc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8ed0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8ed4:	d204      	bcs.n	d8ee0 <__aeabi_dmul+0x80>
   d8ed6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8eda:	416d      	adcs	r5, r5
   d8edc:	eb46 0606 	adc.w	r6, r6, r6
   d8ee0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8ee4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8ee8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8eec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8ef0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8ef4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8ef8:	bf88      	it	hi
   d8efa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8efe:	d81e      	bhi.n	d8f3e <__aeabi_dmul+0xde>
   d8f00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8f04:	bf08      	it	eq
   d8f06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8f0a:	f150 0000 	adcs.w	r0, r0, #0
   d8f0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f12:	bd70      	pop	{r4, r5, r6, pc}
   d8f14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8f18:	ea46 0101 	orr.w	r1, r6, r1
   d8f1c:	ea40 0002 	orr.w	r0, r0, r2
   d8f20:	ea81 0103 	eor.w	r1, r1, r3
   d8f24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8f28:	bfc2      	ittt	gt
   d8f2a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f32:	bd70      	popgt	{r4, r5, r6, pc}
   d8f34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f38:	f04f 0e00 	mov.w	lr, #0
   d8f3c:	3c01      	subs	r4, #1
   d8f3e:	f300 80ab 	bgt.w	d9098 <__aeabi_dmul+0x238>
   d8f42:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8f46:	bfde      	ittt	le
   d8f48:	2000      	movle	r0, #0
   d8f4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8f4e:	bd70      	pople	{r4, r5, r6, pc}
   d8f50:	f1c4 0400 	rsb	r4, r4, #0
   d8f54:	3c20      	subs	r4, #32
   d8f56:	da35      	bge.n	d8fc4 <__aeabi_dmul+0x164>
   d8f58:	340c      	adds	r4, #12
   d8f5a:	dc1b      	bgt.n	d8f94 <__aeabi_dmul+0x134>
   d8f5c:	f104 0414 	add.w	r4, r4, #20
   d8f60:	f1c4 0520 	rsb	r5, r4, #32
   d8f64:	fa00 f305 	lsl.w	r3, r0, r5
   d8f68:	fa20 f004 	lsr.w	r0, r0, r4
   d8f6c:	fa01 f205 	lsl.w	r2, r1, r5
   d8f70:	ea40 0002 	orr.w	r0, r0, r2
   d8f74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8f78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8f7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8f80:	fa21 f604 	lsr.w	r6, r1, r4
   d8f84:	eb42 0106 	adc.w	r1, r2, r6
   d8f88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8f8c:	bf08      	it	eq
   d8f8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8f92:	bd70      	pop	{r4, r5, r6, pc}
   d8f94:	f1c4 040c 	rsb	r4, r4, #12
   d8f98:	f1c4 0520 	rsb	r5, r4, #32
   d8f9c:	fa00 f304 	lsl.w	r3, r0, r4
   d8fa0:	fa20 f005 	lsr.w	r0, r0, r5
   d8fa4:	fa01 f204 	lsl.w	r2, r1, r4
   d8fa8:	ea40 0002 	orr.w	r0, r0, r2
   d8fac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8fb4:	f141 0100 	adc.w	r1, r1, #0
   d8fb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8fbc:	bf08      	it	eq
   d8fbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8fc2:	bd70      	pop	{r4, r5, r6, pc}
   d8fc4:	f1c4 0520 	rsb	r5, r4, #32
   d8fc8:	fa00 f205 	lsl.w	r2, r0, r5
   d8fcc:	ea4e 0e02 	orr.w	lr, lr, r2
   d8fd0:	fa20 f304 	lsr.w	r3, r0, r4
   d8fd4:	fa01 f205 	lsl.w	r2, r1, r5
   d8fd8:	ea43 0302 	orr.w	r3, r3, r2
   d8fdc:	fa21 f004 	lsr.w	r0, r1, r4
   d8fe0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fe4:	fa21 f204 	lsr.w	r2, r1, r4
   d8fe8:	ea20 0002 	bic.w	r0, r0, r2
   d8fec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ff4:	bf08      	it	eq
   d8ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ffa:	bd70      	pop	{r4, r5, r6, pc}
   d8ffc:	f094 0f00 	teq	r4, #0
   d9000:	d10f      	bne.n	d9022 <__aeabi_dmul+0x1c2>
   d9002:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9006:	0040      	lsls	r0, r0, #1
   d9008:	eb41 0101 	adc.w	r1, r1, r1
   d900c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9010:	bf08      	it	eq
   d9012:	3c01      	subeq	r4, #1
   d9014:	d0f7      	beq.n	d9006 <__aeabi_dmul+0x1a6>
   d9016:	ea41 0106 	orr.w	r1, r1, r6
   d901a:	f095 0f00 	teq	r5, #0
   d901e:	bf18      	it	ne
   d9020:	4770      	bxne	lr
   d9022:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d9026:	0052      	lsls	r2, r2, #1
   d9028:	eb43 0303 	adc.w	r3, r3, r3
   d902c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9030:	bf08      	it	eq
   d9032:	3d01      	subeq	r5, #1
   d9034:	d0f7      	beq.n	d9026 <__aeabi_dmul+0x1c6>
   d9036:	ea43 0306 	orr.w	r3, r3, r6
   d903a:	4770      	bx	lr
   d903c:	ea94 0f0c 	teq	r4, ip
   d9040:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9044:	bf18      	it	ne
   d9046:	ea95 0f0c 	teqne	r5, ip
   d904a:	d00c      	beq.n	d9066 <__aeabi_dmul+0x206>
   d904c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9050:	bf18      	it	ne
   d9052:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9056:	d1d1      	bne.n	d8ffc <__aeabi_dmul+0x19c>
   d9058:	ea81 0103 	eor.w	r1, r1, r3
   d905c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9060:	f04f 0000 	mov.w	r0, #0
   d9064:	bd70      	pop	{r4, r5, r6, pc}
   d9066:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d906a:	bf06      	itte	eq
   d906c:	4610      	moveq	r0, r2
   d906e:	4619      	moveq	r1, r3
   d9070:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9074:	d019      	beq.n	d90aa <__aeabi_dmul+0x24a>
   d9076:	ea94 0f0c 	teq	r4, ip
   d907a:	d102      	bne.n	d9082 <__aeabi_dmul+0x222>
   d907c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9080:	d113      	bne.n	d90aa <__aeabi_dmul+0x24a>
   d9082:	ea95 0f0c 	teq	r5, ip
   d9086:	d105      	bne.n	d9094 <__aeabi_dmul+0x234>
   d9088:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d908c:	bf1c      	itt	ne
   d908e:	4610      	movne	r0, r2
   d9090:	4619      	movne	r1, r3
   d9092:	d10a      	bne.n	d90aa <__aeabi_dmul+0x24a>
   d9094:	ea81 0103 	eor.w	r1, r1, r3
   d9098:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d909c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d90a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d90a4:	f04f 0000 	mov.w	r0, #0
   d90a8:	bd70      	pop	{r4, r5, r6, pc}
   d90aa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d90ae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d90b2:	bd70      	pop	{r4, r5, r6, pc}

000d90b4 <__aeabi_ddiv>:
   d90b4:	b570      	push	{r4, r5, r6, lr}
   d90b6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d90ba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d90be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d90c2:	bf1d      	ittte	ne
   d90c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d90c8:	ea94 0f0c 	teqne	r4, ip
   d90cc:	ea95 0f0c 	teqne	r5, ip
   d90d0:	f000 f8a7 	bleq	d9222 <__aeabi_ddiv+0x16e>
   d90d4:	eba4 0405 	sub.w	r4, r4, r5
   d90d8:	ea81 0e03 	eor.w	lr, r1, r3
   d90dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d90e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d90e4:	f000 8088 	beq.w	d91f8 <__aeabi_ddiv+0x144>
   d90e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d90ec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d90f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d90f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d90f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d90fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9100:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9104:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9108:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d910c:	429d      	cmp	r5, r3
   d910e:	bf08      	it	eq
   d9110:	4296      	cmpeq	r6, r2
   d9112:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9116:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d911a:	d202      	bcs.n	d9122 <__aeabi_ddiv+0x6e>
   d911c:	085b      	lsrs	r3, r3, #1
   d911e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9122:	1ab6      	subs	r6, r6, r2
   d9124:	eb65 0503 	sbc.w	r5, r5, r3
   d9128:	085b      	lsrs	r3, r3, #1
   d912a:	ea4f 0232 	mov.w	r2, r2, rrx
   d912e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9132:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9136:	ebb6 0e02 	subs.w	lr, r6, r2
   d913a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d913e:	bf22      	ittt	cs
   d9140:	1ab6      	subcs	r6, r6, r2
   d9142:	4675      	movcs	r5, lr
   d9144:	ea40 000c 	orrcs.w	r0, r0, ip
   d9148:	085b      	lsrs	r3, r3, #1
   d914a:	ea4f 0232 	mov.w	r2, r2, rrx
   d914e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9152:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9156:	bf22      	ittt	cs
   d9158:	1ab6      	subcs	r6, r6, r2
   d915a:	4675      	movcs	r5, lr
   d915c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9160:	085b      	lsrs	r3, r3, #1
   d9162:	ea4f 0232 	mov.w	r2, r2, rrx
   d9166:	ebb6 0e02 	subs.w	lr, r6, r2
   d916a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d916e:	bf22      	ittt	cs
   d9170:	1ab6      	subcs	r6, r6, r2
   d9172:	4675      	movcs	r5, lr
   d9174:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9178:	085b      	lsrs	r3, r3, #1
   d917a:	ea4f 0232 	mov.w	r2, r2, rrx
   d917e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9182:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9186:	bf22      	ittt	cs
   d9188:	1ab6      	subcs	r6, r6, r2
   d918a:	4675      	movcs	r5, lr
   d918c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9190:	ea55 0e06 	orrs.w	lr, r5, r6
   d9194:	d018      	beq.n	d91c8 <__aeabi_ddiv+0x114>
   d9196:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d919a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d919e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d91a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d91a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d91aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d91ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d91b2:	d1c0      	bne.n	d9136 <__aeabi_ddiv+0x82>
   d91b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91b8:	d10b      	bne.n	d91d2 <__aeabi_ddiv+0x11e>
   d91ba:	ea41 0100 	orr.w	r1, r1, r0
   d91be:	f04f 0000 	mov.w	r0, #0
   d91c2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d91c6:	e7b6      	b.n	d9136 <__aeabi_ddiv+0x82>
   d91c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91cc:	bf04      	itt	eq
   d91ce:	4301      	orreq	r1, r0
   d91d0:	2000      	moveq	r0, #0
   d91d2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d91d6:	bf88      	it	hi
   d91d8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d91dc:	f63f aeaf 	bhi.w	d8f3e <__aeabi_dmul+0xde>
   d91e0:	ebb5 0c03 	subs.w	ip, r5, r3
   d91e4:	bf04      	itt	eq
   d91e6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d91ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d91ee:	f150 0000 	adcs.w	r0, r0, #0
   d91f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d91f6:	bd70      	pop	{r4, r5, r6, pc}
   d91f8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d91fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9200:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9204:	bfc2      	ittt	gt
   d9206:	ebd4 050c 	rsbsgt	r5, r4, ip
   d920a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d920e:	bd70      	popgt	{r4, r5, r6, pc}
   d9210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9214:	f04f 0e00 	mov.w	lr, #0
   d9218:	3c01      	subs	r4, #1
   d921a:	e690      	b.n	d8f3e <__aeabi_dmul+0xde>
   d921c:	ea45 0e06 	orr.w	lr, r5, r6
   d9220:	e68d      	b.n	d8f3e <__aeabi_dmul+0xde>
   d9222:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9226:	ea94 0f0c 	teq	r4, ip
   d922a:	bf08      	it	eq
   d922c:	ea95 0f0c 	teqeq	r5, ip
   d9230:	f43f af3b 	beq.w	d90aa <__aeabi_dmul+0x24a>
   d9234:	ea94 0f0c 	teq	r4, ip
   d9238:	d10a      	bne.n	d9250 <__aeabi_ddiv+0x19c>
   d923a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d923e:	f47f af34 	bne.w	d90aa <__aeabi_dmul+0x24a>
   d9242:	ea95 0f0c 	teq	r5, ip
   d9246:	f47f af25 	bne.w	d9094 <__aeabi_dmul+0x234>
   d924a:	4610      	mov	r0, r2
   d924c:	4619      	mov	r1, r3
   d924e:	e72c      	b.n	d90aa <__aeabi_dmul+0x24a>
   d9250:	ea95 0f0c 	teq	r5, ip
   d9254:	d106      	bne.n	d9264 <__aeabi_ddiv+0x1b0>
   d9256:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d925a:	f43f aefd 	beq.w	d9058 <__aeabi_dmul+0x1f8>
   d925e:	4610      	mov	r0, r2
   d9260:	4619      	mov	r1, r3
   d9262:	e722      	b.n	d90aa <__aeabi_dmul+0x24a>
   d9264:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9268:	bf18      	it	ne
   d926a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d926e:	f47f aec5 	bne.w	d8ffc <__aeabi_dmul+0x19c>
   d9272:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9276:	f47f af0d 	bne.w	d9094 <__aeabi_dmul+0x234>
   d927a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d927e:	f47f aeeb 	bne.w	d9058 <__aeabi_dmul+0x1f8>
   d9282:	e712      	b.n	d90aa <__aeabi_dmul+0x24a>

000d9284 <__aeabi_d2uiz>:
   d9284:	004a      	lsls	r2, r1, #1
   d9286:	d211      	bcs.n	d92ac <__aeabi_d2uiz+0x28>
   d9288:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d928c:	d211      	bcs.n	d92b2 <__aeabi_d2uiz+0x2e>
   d928e:	d50d      	bpl.n	d92ac <__aeabi_d2uiz+0x28>
   d9290:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9294:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9298:	d40e      	bmi.n	d92b8 <__aeabi_d2uiz+0x34>
   d929a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d929e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d92a2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d92a6:	fa23 f002 	lsr.w	r0, r3, r2
   d92aa:	4770      	bx	lr
   d92ac:	f04f 0000 	mov.w	r0, #0
   d92b0:	4770      	bx	lr
   d92b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d92b6:	d102      	bne.n	d92be <__aeabi_d2uiz+0x3a>
   d92b8:	f04f 30ff 	mov.w	r0, #4294967295
   d92bc:	4770      	bx	lr
   d92be:	f04f 0000 	mov.w	r0, #0
   d92c2:	4770      	bx	lr

000d92c4 <__cxa_atexit>:
   d92c4:	b510      	push	{r4, lr}
   d92c6:	4c05      	ldr	r4, [pc, #20]	; (d92dc <__cxa_atexit+0x18>)
   d92c8:	4613      	mov	r3, r2
   d92ca:	b12c      	cbz	r4, d92d8 <__cxa_atexit+0x14>
   d92cc:	460a      	mov	r2, r1
   d92ce:	4601      	mov	r1, r0
   d92d0:	2002      	movs	r0, #2
   d92d2:	f3af 8000 	nop.w
   d92d6:	bd10      	pop	{r4, pc}
   d92d8:	4620      	mov	r0, r4
   d92da:	bd10      	pop	{r4, pc}
   d92dc:	00000000 	.word	0x00000000

000d92e0 <memcmp>:
   d92e0:	b510      	push	{r4, lr}
   d92e2:	3901      	subs	r1, #1
   d92e4:	4402      	add	r2, r0
   d92e6:	4290      	cmp	r0, r2
   d92e8:	d007      	beq.n	d92fa <memcmp+0x1a>
   d92ea:	f810 3b01 	ldrb.w	r3, [r0], #1
   d92ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d92f2:	42a3      	cmp	r3, r4
   d92f4:	d0f7      	beq.n	d92e6 <memcmp+0x6>
   d92f6:	1b18      	subs	r0, r3, r4
   d92f8:	bd10      	pop	{r4, pc}
   d92fa:	2000      	movs	r0, #0
   d92fc:	bd10      	pop	{r4, pc}

000d92fe <memcpy>:
   d92fe:	b510      	push	{r4, lr}
   d9300:	1e43      	subs	r3, r0, #1
   d9302:	440a      	add	r2, r1
   d9304:	4291      	cmp	r1, r2
   d9306:	d004      	beq.n	d9312 <memcpy+0x14>
   d9308:	f811 4b01 	ldrb.w	r4, [r1], #1
   d930c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9310:	e7f8      	b.n	d9304 <memcpy+0x6>
   d9312:	bd10      	pop	{r4, pc}

000d9314 <memmove>:
   d9314:	4288      	cmp	r0, r1
   d9316:	b510      	push	{r4, lr}
   d9318:	eb01 0302 	add.w	r3, r1, r2
   d931c:	d801      	bhi.n	d9322 <memmove+0xe>
   d931e:	1e42      	subs	r2, r0, #1
   d9320:	e00b      	b.n	d933a <memmove+0x26>
   d9322:	4298      	cmp	r0, r3
   d9324:	d2fb      	bcs.n	d931e <memmove+0xa>
   d9326:	1881      	adds	r1, r0, r2
   d9328:	1ad2      	subs	r2, r2, r3
   d932a:	42d3      	cmn	r3, r2
   d932c:	d004      	beq.n	d9338 <memmove+0x24>
   d932e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9332:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9336:	e7f8      	b.n	d932a <memmove+0x16>
   d9338:	bd10      	pop	{r4, pc}
   d933a:	4299      	cmp	r1, r3
   d933c:	d004      	beq.n	d9348 <memmove+0x34>
   d933e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9342:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9346:	e7f8      	b.n	d933a <memmove+0x26>
   d9348:	bd10      	pop	{r4, pc}

000d934a <memset>:
   d934a:	4402      	add	r2, r0
   d934c:	4603      	mov	r3, r0
   d934e:	4293      	cmp	r3, r2
   d9350:	d002      	beq.n	d9358 <memset+0xe>
   d9352:	f803 1b01 	strb.w	r1, [r3], #1
   d9356:	e7fa      	b.n	d934e <memset+0x4>
   d9358:	4770      	bx	lr
	...

000d935c <srand>:
   d935c:	b538      	push	{r3, r4, r5, lr}
   d935e:	4b12      	ldr	r3, [pc, #72]	; (d93a8 <srand+0x4c>)
   d9360:	681c      	ldr	r4, [r3, #0]
   d9362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9364:	4605      	mov	r5, r0
   d9366:	b9d3      	cbnz	r3, d939e <srand+0x42>
   d9368:	2018      	movs	r0, #24
   d936a:	f7fb feaf 	bl	d50cc <malloc>
   d936e:	f243 330e 	movw	r3, #13070	; 0x330e
   d9372:	63a0      	str	r0, [r4, #56]	; 0x38
   d9374:	8003      	strh	r3, [r0, #0]
   d9376:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d937a:	8043      	strh	r3, [r0, #2]
   d937c:	f241 2334 	movw	r3, #4660	; 0x1234
   d9380:	8083      	strh	r3, [r0, #4]
   d9382:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9386:	80c3      	strh	r3, [r0, #6]
   d9388:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d938c:	8103      	strh	r3, [r0, #8]
   d938e:	2305      	movs	r3, #5
   d9390:	8143      	strh	r3, [r0, #10]
   d9392:	230b      	movs	r3, #11
   d9394:	8183      	strh	r3, [r0, #12]
   d9396:	2201      	movs	r2, #1
   d9398:	2300      	movs	r3, #0
   d939a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d939e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d93a0:	2200      	movs	r2, #0
   d93a2:	611d      	str	r5, [r3, #16]
   d93a4:	615a      	str	r2, [r3, #20]
   d93a6:	bd38      	pop	{r3, r4, r5, pc}
   d93a8:	2003e304 	.word	0x2003e304

000d93ac <strchr>:
   d93ac:	b2c9      	uxtb	r1, r1
   d93ae:	4603      	mov	r3, r0
   d93b0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d93b4:	b11a      	cbz	r2, d93be <strchr+0x12>
   d93b6:	4291      	cmp	r1, r2
   d93b8:	d1f9      	bne.n	d93ae <strchr+0x2>
   d93ba:	4618      	mov	r0, r3
   d93bc:	4770      	bx	lr
   d93be:	2900      	cmp	r1, #0
   d93c0:	bf0c      	ite	eq
   d93c2:	4618      	moveq	r0, r3
   d93c4:	2000      	movne	r0, #0
   d93c6:	4770      	bx	lr

000d93c8 <strchrnul>:
   d93c8:	b510      	push	{r4, lr}
   d93ca:	4604      	mov	r4, r0
   d93cc:	f7ff ffee 	bl	d93ac <strchr>
   d93d0:	b918      	cbnz	r0, d93da <strchrnul+0x12>
   d93d2:	4620      	mov	r0, r4
   d93d4:	f000 f827 	bl	d9426 <strlen>
   d93d8:	4420      	add	r0, r4
   d93da:	bd10      	pop	{r4, pc}

000d93dc <strcmp>:
   d93dc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d93e0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d93e4:	2a01      	cmp	r2, #1
   d93e6:	bf28      	it	cs
   d93e8:	429a      	cmpcs	r2, r3
   d93ea:	d0f7      	beq.n	d93dc <strcmp>
   d93ec:	1ad0      	subs	r0, r2, r3
   d93ee:	4770      	bx	lr

000d93f0 <strdup>:
   d93f0:	4b02      	ldr	r3, [pc, #8]	; (d93fc <strdup+0xc>)
   d93f2:	4601      	mov	r1, r0
   d93f4:	6818      	ldr	r0, [r3, #0]
   d93f6:	f000 b803 	b.w	d9400 <_strdup_r>
   d93fa:	bf00      	nop
   d93fc:	2003e304 	.word	0x2003e304

000d9400 <_strdup_r>:
   d9400:	b570      	push	{r4, r5, r6, lr}
   d9402:	4606      	mov	r6, r0
   d9404:	4608      	mov	r0, r1
   d9406:	460c      	mov	r4, r1
   d9408:	f000 f80d 	bl	d9426 <strlen>
   d940c:	1c45      	adds	r5, r0, #1
   d940e:	4629      	mov	r1, r5
   d9410:	4630      	mov	r0, r6
   d9412:	f7fb fe8b 	bl	d512c <_malloc_r>
   d9416:	4606      	mov	r6, r0
   d9418:	b118      	cbz	r0, d9422 <_strdup_r+0x22>
   d941a:	462a      	mov	r2, r5
   d941c:	4621      	mov	r1, r4
   d941e:	f7ff ff6e 	bl	d92fe <memcpy>
   d9422:	4630      	mov	r0, r6
   d9424:	bd70      	pop	{r4, r5, r6, pc}

000d9426 <strlen>:
   d9426:	4603      	mov	r3, r0
   d9428:	f813 2b01 	ldrb.w	r2, [r3], #1
   d942c:	2a00      	cmp	r2, #0
   d942e:	d1fb      	bne.n	d9428 <strlen+0x2>
   d9430:	1a18      	subs	r0, r3, r0
   d9432:	3801      	subs	r0, #1
   d9434:	4770      	bx	lr

000d9436 <strncmp>:
   d9436:	b530      	push	{r4, r5, lr}
   d9438:	b182      	cbz	r2, d945c <strncmp+0x26>
   d943a:	1e45      	subs	r5, r0, #1
   d943c:	3901      	subs	r1, #1
   d943e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9442:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9446:	42a3      	cmp	r3, r4
   d9448:	d106      	bne.n	d9458 <strncmp+0x22>
   d944a:	43ec      	mvns	r4, r5
   d944c:	4414      	add	r4, r2
   d944e:	42e0      	cmn	r0, r4
   d9450:	d001      	beq.n	d9456 <strncmp+0x20>
   d9452:	2b00      	cmp	r3, #0
   d9454:	d1f3      	bne.n	d943e <strncmp+0x8>
   d9456:	461c      	mov	r4, r3
   d9458:	1b18      	subs	r0, r3, r4
   d945a:	bd30      	pop	{r4, r5, pc}
   d945c:	4610      	mov	r0, r2
   d945e:	bd30      	pop	{r4, r5, pc}

000d9460 <strnlen>:
   d9460:	b510      	push	{r4, lr}
   d9462:	4603      	mov	r3, r0
   d9464:	4401      	add	r1, r0
   d9466:	428b      	cmp	r3, r1
   d9468:	d004      	beq.n	d9474 <strnlen+0x14>
   d946a:	781a      	ldrb	r2, [r3, #0]
   d946c:	1c5c      	adds	r4, r3, #1
   d946e:	b10a      	cbz	r2, d9474 <strnlen+0x14>
   d9470:	4623      	mov	r3, r4
   d9472:	e7f8      	b.n	d9466 <strnlen+0x6>
   d9474:	1a18      	subs	r0, r3, r0
   d9476:	bd10      	pop	{r4, pc}

000d9478 <strrchr>:
   d9478:	b538      	push	{r3, r4, r5, lr}
   d947a:	4603      	mov	r3, r0
   d947c:	460d      	mov	r5, r1
   d947e:	b141      	cbz	r1, d9492 <strrchr+0x1a>
   d9480:	2400      	movs	r4, #0
   d9482:	4629      	mov	r1, r5
   d9484:	4618      	mov	r0, r3
   d9486:	f7ff ff91 	bl	d93ac <strchr>
   d948a:	b130      	cbz	r0, d949a <strrchr+0x22>
   d948c:	1c43      	adds	r3, r0, #1
   d948e:	4604      	mov	r4, r0
   d9490:	e7f7      	b.n	d9482 <strrchr+0xa>
   d9492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9496:	f7ff bf89 	b.w	d93ac <strchr>
   d949a:	4620      	mov	r0, r4
   d949c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d94a0 <_strtol_r>:
   d94a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d94a4:	4680      	mov	r8, r0
   d94a6:	4840      	ldr	r0, [pc, #256]	; (d95a8 <_strtol_r+0x108>)
   d94a8:	f8d0 9000 	ldr.w	r9, [r0]
   d94ac:	460f      	mov	r7, r1
   d94ae:	463d      	mov	r5, r7
   d94b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d94b4:	eb09 0004 	add.w	r0, r9, r4
   d94b8:	7840      	ldrb	r0, [r0, #1]
   d94ba:	f000 0008 	and.w	r0, r0, #8
   d94be:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d94c2:	b108      	cbz	r0, d94c8 <_strtol_r+0x28>
   d94c4:	462f      	mov	r7, r5
   d94c6:	e7f2      	b.n	d94ae <_strtol_r+0xe>
   d94c8:	2c2d      	cmp	r4, #45	; 0x2d
   d94ca:	d103      	bne.n	d94d4 <_strtol_r+0x34>
   d94cc:	1cbd      	adds	r5, r7, #2
   d94ce:	787c      	ldrb	r4, [r7, #1]
   d94d0:	2601      	movs	r6, #1
   d94d2:	e003      	b.n	d94dc <_strtol_r+0x3c>
   d94d4:	2c2b      	cmp	r4, #43	; 0x2b
   d94d6:	bf04      	itt	eq
   d94d8:	787c      	ldrbeq	r4, [r7, #1]
   d94da:	1cbd      	addeq	r5, r7, #2
   d94dc:	b113      	cbz	r3, d94e4 <_strtol_r+0x44>
   d94de:	2b10      	cmp	r3, #16
   d94e0:	d10a      	bne.n	d94f8 <_strtol_r+0x58>
   d94e2:	e05b      	b.n	d959c <_strtol_r+0xfc>
   d94e4:	2c30      	cmp	r4, #48	; 0x30
   d94e6:	d157      	bne.n	d9598 <_strtol_r+0xf8>
   d94e8:	7828      	ldrb	r0, [r5, #0]
   d94ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d94ee:	2858      	cmp	r0, #88	; 0x58
   d94f0:	d14d      	bne.n	d958e <_strtol_r+0xee>
   d94f2:	786c      	ldrb	r4, [r5, #1]
   d94f4:	2310      	movs	r3, #16
   d94f6:	3502      	adds	r5, #2
   d94f8:	2e00      	cmp	r6, #0
   d94fa:	bf14      	ite	ne
   d94fc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9500:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9504:	2700      	movs	r7, #0
   d9506:	fbbc faf3 	udiv	sl, ip, r3
   d950a:	4638      	mov	r0, r7
   d950c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9510:	eb09 0e04 	add.w	lr, r9, r4
   d9514:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9518:	f01e 0f04 	tst.w	lr, #4
   d951c:	d001      	beq.n	d9522 <_strtol_r+0x82>
   d951e:	3c30      	subs	r4, #48	; 0x30
   d9520:	e00b      	b.n	d953a <_strtol_r+0x9a>
   d9522:	f01e 0e03 	ands.w	lr, lr, #3
   d9526:	d01b      	beq.n	d9560 <_strtol_r+0xc0>
   d9528:	f1be 0f01 	cmp.w	lr, #1
   d952c:	bf0c      	ite	eq
   d952e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9532:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9536:	ebce 0404 	rsb	r4, lr, r4
   d953a:	42a3      	cmp	r3, r4
   d953c:	dd10      	ble.n	d9560 <_strtol_r+0xc0>
   d953e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d9542:	d00a      	beq.n	d955a <_strtol_r+0xba>
   d9544:	4550      	cmp	r0, sl
   d9546:	d806      	bhi.n	d9556 <_strtol_r+0xb6>
   d9548:	d101      	bne.n	d954e <_strtol_r+0xae>
   d954a:	4564      	cmp	r4, ip
   d954c:	dc03      	bgt.n	d9556 <_strtol_r+0xb6>
   d954e:	fb03 4000 	mla	r0, r3, r0, r4
   d9552:	2701      	movs	r7, #1
   d9554:	e001      	b.n	d955a <_strtol_r+0xba>
   d9556:	f04f 37ff 	mov.w	r7, #4294967295
   d955a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d955e:	e7d7      	b.n	d9510 <_strtol_r+0x70>
   d9560:	1c7b      	adds	r3, r7, #1
   d9562:	d10c      	bne.n	d957e <_strtol_r+0xde>
   d9564:	2e00      	cmp	r6, #0
   d9566:	f04f 0322 	mov.w	r3, #34	; 0x22
   d956a:	bf14      	ite	ne
   d956c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9570:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9574:	f8c8 3000 	str.w	r3, [r8]
   d9578:	b92a      	cbnz	r2, d9586 <_strtol_r+0xe6>
   d957a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d957e:	b106      	cbz	r6, d9582 <_strtol_r+0xe2>
   d9580:	4240      	negs	r0, r0
   d9582:	b172      	cbz	r2, d95a2 <_strtol_r+0x102>
   d9584:	b107      	cbz	r7, d9588 <_strtol_r+0xe8>
   d9586:	1e69      	subs	r1, r5, #1
   d9588:	6011      	str	r1, [r2, #0]
   d958a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d958e:	2430      	movs	r4, #48	; 0x30
   d9590:	2b00      	cmp	r3, #0
   d9592:	d1b1      	bne.n	d94f8 <_strtol_r+0x58>
   d9594:	2308      	movs	r3, #8
   d9596:	e7af      	b.n	d94f8 <_strtol_r+0x58>
   d9598:	230a      	movs	r3, #10
   d959a:	e7ad      	b.n	d94f8 <_strtol_r+0x58>
   d959c:	2c30      	cmp	r4, #48	; 0x30
   d959e:	d0a3      	beq.n	d94e8 <_strtol_r+0x48>
   d95a0:	e7aa      	b.n	d94f8 <_strtol_r+0x58>
   d95a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95a6:	bf00      	nop
   d95a8:	2003e2a0 	.word	0x2003e2a0

000d95ac <strtol>:
   d95ac:	4613      	mov	r3, r2
   d95ae:	460a      	mov	r2, r1
   d95b0:	4601      	mov	r1, r0
   d95b2:	4802      	ldr	r0, [pc, #8]	; (d95bc <strtol+0x10>)
   d95b4:	6800      	ldr	r0, [r0, #0]
   d95b6:	f7ff bf73 	b.w	d94a0 <_strtol_r>
   d95ba:	bf00      	nop
   d95bc:	2003e304 	.word	0x2003e304

000d95c0 <dynalib_user>:
   d95c0:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d95d0:	00000000                                ....

000d95d4 <_ZTVN5spark10LogHandlerE>:
	...
   d95e4:	000d40a9 000d40cd                       .@...@..

000d95ec <_ZTVN5spark16SerialLogHandlerE>:
	...
   d95f4:	000d40e9 000d411d 000d71a5 000d40cf     .@...A...q...@..
   d9604:	72617453 64612074 74726576 6e697369     Start advertisin
   d9614:	65520067 74206461 65706d65 75746172     g.Read temperatu
   d9624:	203a6572 52007525 20646165 696d7568     re: %u.Read humi
   d9634:	79746964 7525203a 61655200 75632064     dity: %u.Read cu
   d9644:	6e657272 6e282074 6320746f 65727275     rrent (not curre
   d9654:	796c746e 706d6920 656d656c 6465746e     ntly implemented
   d9664:	25203a29 696c0075 00746867 64616552     ): %u.light.Read
   d9674:	67696c20 203a7468 6c207525 6d007875      light: %u lux.m
   d9684:	7473696f 00657275 64616552 696f6d20     oisture.Read moi
   d9694:	72757473 25203a65 756c2075 694c0078     sture: %u lux.Li
   d96a4:	3a746867 00752520 73696f6d 65727574     ght: %u.moisture
   d96b4:	7525203a 746f6e00 6e6f6320 7463656e     : %u.not connect
   d96c4:	79206465 2e2e7465 7400202e 00706d65     ed yet... .temp.
   d96d4:	696d7568 61650064 38343235 342d3461     humid.ea5248a4-4
   d96e4:	2d636333 38393134 6134612d 39372d61     3cc-4198-a4aa-79
   d96f4:	61303032 38303537 39003533 64306139     200a750835.99a0d
   d9704:	2d396632 61666331 6232342d 35622d33     2f9-1cfa-42b3-b5
   d9714:	312d6162 34643462 33313433 00663239     ba-1b4d4341392f.
   d9724:	66376362 39643831 3463322d 30342d33     bc7f18d9-2c43-40
   d9734:	622d6538 2d353265 34663236 35343630     8e-be25-62f40645
   d9744:	63373839 34353700 35666265 65632d65     987c.754ebf5e-ce
   d9754:	342d3133 2d303033 35646639 6638612d     31-4300-9fd5-a8f
   d9764:	65653462 31386134 00000031              b4ee4a811...

000d9770 <_ZTVN5spark13EthernetClassE>:
	...
   d9778:	000d519b 000d5191 000d5187 000d517d     .Q...Q...Q..}Q..
   d9788:	000d5171 000d5165 000d5159 000d5151     qQ..eQ..YQ..QQ..
   d9798:	000d5147 000d513d 000d8271              GQ..=Q..q...

000d97a4 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d97ac:	000d533f 000d5345 000d6059 000d536f     ?S..ES..Y`..oS..
   d97bc:	000d5341                                AS..

000d97c0 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d97c8:	000d5339 000d5353 000d6165 000d5373     9S..SS..ea..sS..
   d97d8:	000d533b                                ;S..

000d97dc <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d97e4:	000d5333 000d5361 000d5b19 000d5377     3S..aS...[..wS..
   d97f4:	000d5335                                5S..

000d97f8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d97f8:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d9808:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d9818:	73696420 65766f63 676e6972 72657320      discovering ser
   d9828:	65636976 53002e73 74726174 73696420     vices..Start dis
   d9838:	65766f63 676e6972 61686320 74636172     covering charact
   d9848:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d9858:	63697665 73692065 73696d20 676e6973     evice is missing
   d9868:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d9878:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d9888:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d9898:	79622064 6e654320 6c617274 76656420     d by Central dev
   d98a8:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d98b8:	79622064 6d657220 2065746f 69766564     d by remote devi
   d98c8:	002e6563 6e6e6143 6120746f 6e206464     ce..Cannot add n
   d98d8:	70207765 20726565 69766564 002e6563     ew peer device..
   d98e8:	2077654e 69726570 72656870 69206c61     New peripheral i
   d98f8:	6f632073 63656e6e 2e646574 69614600     s connected..Fai
   d9908:	2064656c 61206f74 6e657070 69642064     led to append di
   d9918:	766f6373 64657265 61686320 74636172     scovered charact
   d9928:	73697265 2e636974 69614600 2064656c     eristic..Failed 
   d9938:	61206f74 6e657070 69642064 766f6373     to append discov
   d9948:	64657265 72657320 65636976 6146002e     ered service..Fa
   d9958:	64656c69 206f7420 65707061 6c20646e     iled to append l
   d9968:	6c61636f 61686320 74636172 73697265     ocal characteris
   d9978:	2e636974 70754400 6163696c 20646574     tic..Duplicated 
   d9988:	72616863 65746361 74736972 63206369     characteristic c
   d9998:	6f6e6e61 65622074 64646120 002e6465     annot be added..

000d99a8 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d99a8:	5f9b34fb 80000080 00001000 00000000     .4._............

000d99b8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d99c0:	000d6581 000d65a7 000d655b 000d837f     .e...e..[e......

000d99d0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d99d8:	000d69fd 000d6a11 000d7359 000d6563     .i...j..Ys..ce..
   d99e8:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d99f8:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d9a08:	6800646d 7300646e 006d7274 746c6966     md.hnd.strm.filt
   d9a18:	6c766c00 64646100 646e6148 0072656c     .lvl.addHandler.
   d9a28:	6f6d6572 61486576 656c646e 6e650072     removeHandler.en
   d9a38:	61486d75 656c646e 4a007372 534e4f53     umHandlers.JSONS
   d9a48:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
   d9a58:	00707061 30313025 5d002075 64250020     app.%010u .] .%d
   d9a68:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d9a78:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d9a88:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d9a98:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d9aa8:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d9ab8:	61700072 0063696e 006c6c61              r.panic.all.

000d9ac4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9acc:	000d69d1 000d69e9 000d71a5 000d40cf     .i...i...q...@..

000d9adc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9ae4:	000d657f 000d65b5 000d70cd 000d6565     .e...e...p..ee..

000d9af4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9afc:	000d657d 000d65c3 000d6915 000d65d1     }e...e...i...e..
   d9b0c:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d9b1c:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d9b2c:	63736100 656d6974 00000000              .asctime....

000d9b38 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9b40:	000d76c1 000d76c7 000d770b 000d76d5     .v...v...w...v..
   d9b50:	000d76c3                                .v..

000d9b54 <_ZTV9IPAddress>:
	...
   d9b5c:	000d7c59 000d7c49 000d7c4b              Y|..I|..K|..

000d9b68 <_ZTV9USBSerial>:
	...
   d9b70:	000d7d31 000d7d81 000d7d8f 000d643d     1}...}...}..=d..
   d9b80:	000d7d6d 000d7d33 000d7d49 000d7d7b     m}..3}..I}..{}..
   d9b90:	000d7d5f 000d7d2d                       _}..-}..

000d9b98 <_ZTV11USARTSerial>:
	...
   d9ba0:	000d7e4d 000d7e9d 000d7eab 000d643d     M~...~...~..=d..
   d9bb0:	000d7e61 000d7e83 000d7e6f 000d7e97     a~...~..o~...~..
   d9bc0:	000d7e4f 000d7e53                       O~..S~..

000d9bc8 <_ZTV7TwoWire>:
	...
   d9bd0:	000d7f8d 000d7fd7 000d7faf 000d7f8f     ................
   d9be0:	000d7fb7 000d7fbf 000d7fc7 000d7fcf     ................

000d9bf0 <_ZTVN5spark9MeshClassE>:
	...
   d9bf8:	000d806f 000d8065 000d805b 000d8051     o...e...[...Q...
   d9c08:	000d8045 000d8039 000d802d 000d8025     E...9...-...%...
   d9c18:	000d801b 000d8011 000d8271              ........q...

000d9c24 <_ZTVN5spark9WiFiClassE>:
	...
   d9c2c:	000d81eb 000d81e1 000d81d7 000d818d     ................
   d9c3c:	000d81cb 000d81bf 000d81b3 000d81ab     ................
   d9c4c:	000d81a1 000d8197 000d8271              ........q...

000d9c58 <_ZTVN5spark12NetworkClassE>:
	...
   d9c60:	000d8209 000d8213 000d821d 000d8227     ............'...
   d9c70:	000d8231 000d823d 000d8249 000d8255     1...=...I...U...
   d9c80:	000d825d 000d8267 000d8271 00302e30     ]...g...q...0.0.
   d9c90:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   d9ca0:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000d9caf <_ZSt7nothrow>:
	...

000d9cb0 <_ctype_>:
   d9cb0:	20202000 20202020 28282020 20282828     .         ((((( 
   d9cc0:	20202020 20202020 20202020 20202020                     
   d9cd0:	10108820 10101010 10101010 10101010      ...............
   d9ce0:	04040410 04040404 10040404 10101010     ................
   d9cf0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9d00:	01010101 01010101 01010101 10101010     ................
   d9d10:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9d20:	02020202 02020202 02020202 10101010     ................
   d9d30:	00000020 00000000 00000000 00000000      ...............
	...

000d9db4 <__sf_fake_stdin>:
	...

000d9dd4 <__sf_fake_stdout>:
	...

000d9df4 <__sf_fake_stderr>:
	...
   d9e14:	00000043                                         C.

000d9e16 <link_const_variable_data_end>:
	...

000d9e18 <link_constructors_location>:
   d9e18:	000d46d1 	.word	0x000d46d1
   d9e1c:	000d4ae1 	.word	0x000d4ae1
   d9e20:	000d4af1 	.word	0x000d4af1
   d9e24:	000d51a5 	.word	0x000d51a5
   d9e28:	000d51d5 	.word	0x000d51d5
   d9e2c:	000d6415 	.word	0x000d6415
   d9e30:	000d7195 	.word	0x000d7195
   d9e34:	000d753d 	.word	0x000d753d
   d9e38:	000d7595 	.word	0x000d7595
   d9e3c:	000d813d 	.word	0x000d813d
   d9e40:	000d81f5 	.word	0x000d81f5
   d9e44:	000d833d 	.word	0x000d833d
   d9e48:	000d8861 	.word	0x000d8861
   d9e4c:	000d88e5 	.word	0x000d88e5
   d9e50:	000d89a9 	.word	0x000d89a9
   d9e54:	000d8a6d 	.word	0x000d8a6d

000d9e58 <link_constructors_end>:
	...
