
c:/Users/tschw/repos/elec4740Group6/sensorNode1/target/1.5.0/argon/sensorNode1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004ad4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8af0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000088  2003e2ac  000d8af4  0001e2ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004bc  2003e338  2003e338  0002e338  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d8b7c  000d8b7c  00028b7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8ba4  000d8ba4  00028ba4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c1d02  00000000  00000000  00028ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000dc15  00000000  00000000  000ea8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001cd9b  00000000  00000000  000f84bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002518  00000000  00000000  0011525a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000045e8  00000000  00000000  00117772  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f46e  00000000  00000000  0011bd5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f245  00000000  00000000  0014b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101b24  00000000  00000000  0016a40d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cdf0  00000000  00000000  0026bf34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f806 	bl	d803e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f826 	bl	d808a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e2ac 	.word	0x2003e2ac
   d4048:	000d8af4 	.word	0x000d8af4
   d404c:	2003e334 	.word	0x2003e334
   d4050:	2003e338 	.word	0x2003e338
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 ff9d 	bl	d6f98 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d8ae4 	.word	0x000d8ae4
   d4080:	000d8aac 	.word	0x000d8aac

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b89a 	b.w	d41bc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f925 	bl	d42d8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bf43 	b.w	d6f1c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bd03 	b.w	d4aa0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 bd09 	b.w	d4ab0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 bd07 	b.w	d4ab0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fc54 	bl	d4958 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d46b5 	.word	0x000d46b5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
   d40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40dc:	f002 f858 	bl	d6190 <_ZN5spark10LogManager8instanceEv>
   d40e0:	4621      	mov	r1, r4
   d40e2:	f002 fa45 	bl	d6570 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e6:	f003 f85b 	bl	d71a0 <_Z16_fetch_usbserialv>
   d40ea:	f003 f84d 	bl	d7188 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40ee:	4620      	mov	r0, r4
   d40f0:	4b04      	ldr	r3, [pc, #16]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f2:	f840 3b04 	str.w	r3, [r0], #4
   d40f6:	f002 f941 	bl	d637c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	000d82fc 	.word	0x000d82fc
   d4104:	000d82e4 	.word	0x000d82e4

000d4108 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d410c:	f7ff ffe2 	bl	d40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4110:	4620      	mov	r0, r4
   d4112:	2124      	movs	r1, #36	; 0x24
   d4114:	f003 fc64 	bl	d79e0 <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d411c:	b40e      	push	{r1, r2, r3}
   d411e:	b500      	push	{lr}
   d4120:	b08c      	sub	sp, #48	; 0x30
   d4122:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4124:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4126:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d412a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d412c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4130:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4132:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4134:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4136:	aa04      	add	r2, sp, #16
   d4138:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d413a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d413c:	f000 fc1c 	bl	d4978 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4140:	b00c      	add	sp, #48	; 0x30
   d4142:	f85d eb04 	ldr.w	lr, [sp], #4
   d4146:	b003      	add	sp, #12
   d4148:	4770      	bx	lr

000d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d414a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d414c:	6804      	ldr	r4, [r0, #0]
   d414e:	6843      	ldr	r3, [r0, #4]
   d4150:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4152:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4154:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4158:	42a6      	cmp	r6, r4
   d415a:	d004      	beq.n	d4166 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d415c:	4620      	mov	r0, r4
   d415e:	f000 fd37 	bl	d4bd0 <_ZN6StringD1Ev>
   d4162:	3414      	adds	r4, #20
   d4164:	e7f8      	b.n	d4158 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4166:	6828      	ldr	r0, [r5, #0]
   d4168:	f000 fca2 	bl	d4ab0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d416c:	4628      	mov	r0, r5
   d416e:	bd70      	pop	{r4, r5, r6, pc}

000d4170 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4170:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4172:	460e      	mov	r6, r1
   d4174:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4176:	2100      	movs	r1, #0
   d4178:	4604      	mov	r4, r0
   d417a:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d417c:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d417e:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d4180:	4619      	mov	r1, r3
   d4182:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4184:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4186:	f000 ff2d 	bl	d4fe4 <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d418a:	9916      	ldr	r1, [sp, #88]	; 0x58
   d418c:	4628      	mov	r0, r5
   d418e:	f000 ff29 	bl	d4fe4 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4192:	aa10      	add	r2, sp, #64	; 0x40
   d4194:	783b      	ldrb	r3, [r7, #0]
   d4196:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d419a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d419c:	9302      	str	r3, [sp, #8]
   d419e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d41a0:	9301      	str	r3, [sp, #4]
   d41a2:	4620      	mov	r0, r4
   d41a4:	9500      	str	r5, [sp, #0]
   d41a6:	ab06      	add	r3, sp, #24
   d41a8:	4631      	mov	r1, r6
   d41aa:	f001 fc59 	bl	d5a60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d41ae:	4620      	mov	r0, r4
   d41b0:	b011      	add	sp, #68	; 0x44
   d41b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d41b4 <_ZN10CloudClass8variableIA9_cIRdEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41b4:	2300      	movs	r3, #0
   d41b6:	2209      	movs	r2, #9
   d41b8:	f000 bc62 	b.w	d4a80 <spark_variable>

000d41bc <setup>:
double lightCloud = 0;
double humidityCloud = 0;
double distanceCloud = 0;

/* Initial setup */
void setup() {
   d41bc:	b510      	push	{r4, lr}
    
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning
    
    /* setup debug variables */
    Particle.variable("temperature", temperatureCloud);
   d41be:	4935      	ldr	r1, [pc, #212]	; (d4294 <setup+0xd8>)
   d41c0:	4835      	ldr	r0, [pc, #212]	; (d4298 <setup+0xdc>)
double lightCloud = 0;
double humidityCloud = 0;
double distanceCloud = 0;

/* Initial setup */
void setup() {
   d41c2:	b092      	sub	sp, #72	; 0x48
    
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning
    
    /* setup debug variables */
    Particle.variable("temperature", temperatureCloud);
   d41c4:	f7ff fff6 	bl	d41b4 <_ZN10CloudClass8variableIA9_cIRdEEEbRKT_DpOT0_>
    Particle.variable("light", lightCloud);
   d41c8:	4934      	ldr	r1, [pc, #208]	; (d429c <setup+0xe0>)
   d41ca:	4835      	ldr	r0, [pc, #212]	; (d42a0 <setup+0xe4>)
   d41cc:	f7ff fff2 	bl	d41b4 <_ZN10CloudClass8variableIA9_cIRdEEEbRKT_DpOT0_>
    Particle.variable("humidity", humidityCloud);
   d41d0:	4934      	ldr	r1, [pc, #208]	; (d42a4 <setup+0xe8>)
   d41d2:	4835      	ldr	r0, [pc, #212]	; (d42a8 <setup+0xec>)
   d41d4:	f7ff ffee 	bl	d41b4 <_ZN10CloudClass8variableIA9_cIRdEEEbRKT_DpOT0_>
    Particle.variable("distance", distanceCloud);
   d41d8:	4934      	ldr	r1, [pc, #208]	; (d42ac <setup+0xf0>)
   d41da:	4835      	ldr	r0, [pc, #212]	; (d42b0 <setup+0xf4>)
   d41dc:	f7ff ffea 	bl	d41b4 <_ZN10CloudClass8variableIA9_cIRdEEEbRKT_DpOT0_>

    
    /* Setup bluetooth characteristics and advertise sensorNode1Service to be connected to by the clusterhead */
    BLE.on();//activate BT
   d41e0:	f001 f884 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41e4:	f001 f8c8 	bl	d5378 <_ZNK8particle14BleLocalDevice2onEv>

    //add characteristics
    BLE.addCharacteristic(temperatureSensorCharacteristic);
   d41e8:	f001 f880 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41ec:	4a31      	ldr	r2, [pc, #196]	; (d42b4 <setup+0xf8>)
   d41ee:	4601      	mov	r1, r0
   d41f0:	a809      	add	r0, sp, #36	; 0x24
   d41f2:	f001 fce9 	bl	d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d41f6:	a809      	add	r0, sp, #36	; 0x24
   d41f8:	f001 f943 	bl	d5482 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(lightSensorCharacteristic);
   d41fc:	f001 f876 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4200:	4a2d      	ldr	r2, [pc, #180]	; (d42b8 <setup+0xfc>)
   d4202:	4601      	mov	r1, r0
   d4204:	a809      	add	r0, sp, #36	; 0x24
   d4206:	f001 fcdf 	bl	d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d420a:	a809      	add	r0, sp, #36	; 0x24
   d420c:	f001 f939 	bl	d5482 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(humiditySensorCharacteristic);
   d4210:	f001 f86c 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4214:	4a29      	ldr	r2, [pc, #164]	; (d42bc <setup+0x100>)
   d4216:	4601      	mov	r1, r0
   d4218:	a809      	add	r0, sp, #36	; 0x24
   d421a:	f001 fcd5 	bl	d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d421e:	a809      	add	r0, sp, #36	; 0x24
   d4220:	f001 f92f 	bl	d5482 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(distanceSensorCharacteristic);
   d4224:	f001 f862 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4228:	4a25      	ldr	r2, [pc, #148]	; (d42c0 <setup+0x104>)
   d422a:	4601      	mov	r1, r0
   d422c:	a809      	add	r0, sp, #36	; 0x24
   d422e:	f001 fccb 	bl	d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4232:	a809      	add	r0, sp, #36	; 0x24
   d4234:	f001 f925 	bl	d5482 <_ZN8particle17BleCharacteristicD1Ev>

    //data to be advertised
    BleAdvertisingData advData;
   d4238:	a809      	add	r0, sp, #36	; 0x24
   d423a:	f000 ff3d 	bl	d50b8 <_ZN8particle18BleAdvertisingDataC1Ev>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d423e:	4b21      	ldr	r3, [pc, #132]	; (d42c4 <setup+0x108>)
   d4240:	a804      	add	r0, sp, #16
   d4242:	6819      	ldr	r1, [r3, #0]
   d4244:	f000 fece 	bl	d4fe4 <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4248:	a804      	add	r0, sp, #16
   d424a:	f000 fe17 	bl	d4e7c <_ZNK8particle7BleUuid4typeEv>
   d424e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4250:	a804      	add	r0, sp, #16
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4252:	b944      	cbnz	r4, d4266 <setup+0xaa>
            uint16_t uuid16 = tempUUID.shorted();
   d4254:	f000 fe30 	bl	d4eb8 <_ZNK8particle7BleUuid7shortedEv>
   d4258:	aa12      	add	r2, sp, #72	; 0x48
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d425a:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d425c:	f822 0d3a 	strh.w	r0, [r2, #-58]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4260:	2103      	movs	r1, #3
   d4262:	9400      	str	r4, [sp, #0]
   d4264:	e006      	b.n	d4274 <setup+0xb8>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4266:	f000 fe2c 	bl	d4ec2 <_ZNK8particle7BleUuid8rawBytesEv>
   d426a:	2300      	movs	r3, #0
   d426c:	9300      	str	r3, [sp, #0]
   d426e:	4602      	mov	r2, r0
   d4270:	2310      	movs	r3, #16
   d4272:	2107      	movs	r1, #7
   d4274:	a809      	add	r0, sp, #36	; 0x24
   d4276:	f000 fed8 	bl	d502a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendServiceUUID(sensorNode1ServiceUuid);

    // Continuously advertise when not connected to clusterhead
    Log.info("Start advertising");
   d427a:	4913      	ldr	r1, [pc, #76]	; (d42c8 <setup+0x10c>)
   d427c:	4813      	ldr	r0, [pc, #76]	; (d42cc <setup+0x110>)
   d427e:	f7ff ff4d 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
    BLE.advertise(&advData);
   d4282:	f001 f833 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4286:	2200      	movs	r2, #0
   d4288:	a909      	add	r1, sp, #36	; 0x24
   d428a:	f001 f8ab 	bl	d53e4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   d428e:	b012      	add	sp, #72	; 0x48
   d4290:	bd10      	pop	{r4, pc}
   d4292:	bf00      	nop
   d4294:	2003e3a0 	.word	0x2003e3a0
   d4298:	000d830c 	.word	0x000d830c
   d429c:	2003e358 	.word	0x2003e358
   d42a0:	000d8318 	.word	0x000d8318
   d42a4:	2003e340 	.word	0x2003e340
   d42a8:	000d831e 	.word	0x000d831e
   d42ac:	2003e368 	.word	0x2003e368
   d42b0:	000d8327 	.word	0x000d8327
   d42b4:	2003e370 	.word	0x2003e370
   d42b8:	2003e360 	.word	0x2003e360
   d42bc:	2003e3a8 	.word	0x2003e3a8
   d42c0:	2003e34c 	.word	0x2003e34c
   d42c4:	2003e2ac 	.word	0x2003e2ac
   d42c8:	000d8330 	.word	0x000d8330
   d42cc:	2003e410 	.word	0x2003e410

000d42d0 <_ZN8particle17BleCharacteristic8setValueItEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>:
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d42d0:	4613      	mov	r3, r2
   d42d2:	2202      	movs	r2, #2
   d42d4:	f000 bf58 	b.w	d5188 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

000d42d8 <loop>:

void loop() {
   d42d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    //only begin using sensors when this node has connected to a cluster head
    if(BLE.connected()){
   d42da:	f001 f807 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42de:	f001 f89e 	bl	d541e <_ZNK8particle14BleLocalDevice9connectedEv>
   d42e2:	2800      	cmp	r0, #0
   d42e4:	d076      	beq.n	d43d4 <loop+0xfc>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42e6:	f000 f9ed 	bl	d46c4 <HAL_Timer_Get_Milli_Seconds>
        /* Check if it's time to take another reading for each sensor 
           If it is, update "lastUpdate" time, then read and update the appropriate characteristic
           A change in the characteristic will notify the connected cluster head
        */
        //temperature
        if(currentTime - lastTemperatureUpdate >= TEMPERATURE_READ_DELAY){
   d42ea:	4a3d      	ldr	r2, [pc, #244]	; (d43e0 <loop+0x108>)
   d42ec:	6813      	ldr	r3, [r2, #0]
   d42ee:	f241 3187 	movw	r1, #4999	; 0x1387
   d42f2:	1ac3      	subs	r3, r0, r3
   d42f4:	428b      	cmp	r3, r1
   d42f6:	4604      	mov	r4, r0
   d42f8:	d915      	bls.n	d4326 <loop+0x4e>
            lastTemperatureUpdate = currentTime;
            uint16_t getValue = readTemperature();
   d42fa:	a902      	add	r1, sp, #8
   d42fc:	2302      	movs	r3, #2
           If it is, update "lastUpdate" time, then read and update the appropriate characteristic
           A change in the characteristic will notify the connected cluster head
        */
        //temperature
        if(currentTime - lastTemperatureUpdate >= TEMPERATURE_READ_DELAY){
            lastTemperatureUpdate = currentTime;
   d42fe:	6010      	str	r0, [r2, #0]
            uint16_t getValue = readTemperature();
   d4300:	f821 3d02 	strh.w	r3, [r1, #-2]!
            temperatureSensorCharacteristic.setValue(getValue);
   d4304:	2200      	movs	r2, #0
   d4306:	4837      	ldr	r0, [pc, #220]	; (d43e4 <loop+0x10c>)
   d4308:	f7ff ffe2 	bl	d42d0 <_ZN8particle17BleCharacteristic8setValueItEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
            temperatureCloud = getValue;
   d430c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   d4310:	4628      	mov	r0, r5
   d4312:	f003 fe01 	bl	d7f18 <__aeabi_ui2d>
   d4316:	4b34      	ldr	r3, [pc, #208]	; (d43e8 <loop+0x110>)
   d4318:	e9c3 0100 	strd	r0, r1, [r3]
            Log.info("Temperature: " + getValue);
   d431c:	4933      	ldr	r1, [pc, #204]	; (d43ec <loop+0x114>)
   d431e:	4834      	ldr	r0, [pc, #208]	; (d43f0 <loop+0x118>)
   d4320:	4429      	add	r1, r5
   d4322:	f7ff fefb 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
        }
        //light
        if(currentTime - lastLightUpdate >= LIGHT_READ_DELAY){
   d4326:	4a33      	ldr	r2, [pc, #204]	; (d43f4 <loop+0x11c>)
   d4328:	6813      	ldr	r3, [r2, #0]
   d432a:	f241 3187 	movw	r1, #4999	; 0x1387
   d432e:	1ae3      	subs	r3, r4, r3
   d4330:	428b      	cmp	r3, r1
   d4332:	d916      	bls.n	d4362 <loop+0x8a>
            lastLightUpdate = currentTime;
            uint16_t getValue = readLight();
   d4334:	a902      	add	r1, sp, #8
   d4336:	f640 73d5 	movw	r3, #4053	; 0xfd5
   d433a:	f821 3d02 	strh.w	r3, [r1, #-2]!
            temperatureCloud = getValue;
            Log.info("Temperature: " + getValue);
        }
        //light
        if(currentTime - lastLightUpdate >= LIGHT_READ_DELAY){
            lastLightUpdate = currentTime;
   d433e:	6014      	str	r4, [r2, #0]
            uint16_t getValue = readLight();
            lightSensorCharacteristic.setValue(getValue);
   d4340:	482d      	ldr	r0, [pc, #180]	; (d43f8 <loop+0x120>)
   d4342:	2200      	movs	r2, #0
   d4344:	f7ff ffc4 	bl	d42d0 <_ZN8particle17BleCharacteristic8setValueItEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
            lightCloud = getValue;
   d4348:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   d434c:	4628      	mov	r0, r5
   d434e:	f003 fde3 	bl	d7f18 <__aeabi_ui2d>
   d4352:	4b2a      	ldr	r3, [pc, #168]	; (d43fc <loop+0x124>)
   d4354:	e9c3 0100 	strd	r0, r1, [r3]
            Log.info("Light: " + getValue);
   d4358:	4929      	ldr	r1, [pc, #164]	; (d4400 <loop+0x128>)
   d435a:	4825      	ldr	r0, [pc, #148]	; (d43f0 <loop+0x118>)
   d435c:	4429      	add	r1, r5
   d435e:	f7ff fedd 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
        }
        //humidity
        if(currentTime - lastHumidityUpdate >= HUMIDITY_READ_DELAY){
   d4362:	4a28      	ldr	r2, [pc, #160]	; (d4404 <loop+0x12c>)
   d4364:	6813      	ldr	r3, [r2, #0]
   d4366:	f241 3187 	movw	r1, #4999	; 0x1387
   d436a:	1ae3      	subs	r3, r4, r3
   d436c:	428b      	cmp	r3, r1
   d436e:	d915      	bls.n	d439c <loop+0xc4>
            lastHumidityUpdate = currentTime;
            uint16_t getValue = readHumidity();
   d4370:	a902      	add	r1, sp, #8
   d4372:	2302      	movs	r3, #2
   d4374:	f821 3d02 	strh.w	r3, [r1, #-2]!
            lightCloud = getValue;
            Log.info("Light: " + getValue);
        }
        //humidity
        if(currentTime - lastHumidityUpdate >= HUMIDITY_READ_DELAY){
            lastHumidityUpdate = currentTime;
   d4378:	6014      	str	r4, [r2, #0]
            uint16_t getValue = readHumidity();
            humiditySensorCharacteristic.setValue(getValue);
   d437a:	4823      	ldr	r0, [pc, #140]	; (d4408 <loop+0x130>)
   d437c:	2200      	movs	r2, #0
   d437e:	f7ff ffa7 	bl	d42d0 <_ZN8particle17BleCharacteristic8setValueItEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
            humidityCloud = getValue;
   d4382:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   d4386:	4628      	mov	r0, r5
   d4388:	f003 fdc6 	bl	d7f18 <__aeabi_ui2d>
   d438c:	4b1f      	ldr	r3, [pc, #124]	; (d440c <loop+0x134>)
   d438e:	e9c3 0100 	strd	r0, r1, [r3]
            Log.info("Humidity: " + getValue);
   d4392:	491f      	ldr	r1, [pc, #124]	; (d4410 <loop+0x138>)
   d4394:	4816      	ldr	r0, [pc, #88]	; (d43f0 <loop+0x118>)
   d4396:	4429      	add	r1, r5
   d4398:	f7ff fec0 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
        }
        //distance
        if(currentTime - lastDistanceUpdate >= DISTANCE_READ_DELAY){
   d439c:	4a1d      	ldr	r2, [pc, #116]	; (d4414 <loop+0x13c>)
   d439e:	6813      	ldr	r3, [r2, #0]
   d43a0:	f241 3187 	movw	r1, #4999	; 0x1387
   d43a4:	1ae3      	subs	r3, r4, r3
   d43a6:	428b      	cmp	r3, r1
   d43a8:	d918      	bls.n	d43dc <loop+0x104>
            lastDistanceUpdate = currentTime;
            uint16_t getValue = readDistance();
   d43aa:	a902      	add	r1, sp, #8
   d43ac:	f640 73f2 	movw	r3, #4082	; 0xff2
            humidityCloud = getValue;
            Log.info("Humidity: " + getValue);
        }
        //distance
        if(currentTime - lastDistanceUpdate >= DISTANCE_READ_DELAY){
            lastDistanceUpdate = currentTime;
   d43b0:	6014      	str	r4, [r2, #0]
            uint16_t getValue = readDistance();
   d43b2:	f821 3d02 	strh.w	r3, [r1, #-2]!
            distanceSensorCharacteristic.setValue(getValue);
   d43b6:	2200      	movs	r2, #0
   d43b8:	4817      	ldr	r0, [pc, #92]	; (d4418 <loop+0x140>)
   d43ba:	f7ff ff89 	bl	d42d0 <_ZN8particle17BleCharacteristic8setValueItEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE>
            distanceCloud = getValue;
   d43be:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d43c2:	4620      	mov	r0, r4
   d43c4:	f003 fda8 	bl	d7f18 <__aeabi_ui2d>
   d43c8:	4b14      	ldr	r3, [pc, #80]	; (d441c <loop+0x144>)
   d43ca:	e9c3 0100 	strd	r0, r1, [r3]
            Log.info("Distance: " + getValue);
   d43ce:	4914      	ldr	r1, [pc, #80]	; (d4420 <loop+0x148>)
   d43d0:	4421      	add	r1, r4
   d43d2:	e000      	b.n	d43d6 <loop+0xfe>
        }
    }
    else{
        Log.info("not connected yet... ");
   d43d4:	4913      	ldr	r1, [pc, #76]	; (d4424 <loop+0x14c>)
   d43d6:	4806      	ldr	r0, [pc, #24]	; (d43f0 <loop+0x118>)
   d43d8:	f7ff fea0 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
    }
}
   d43dc:	b003      	add	sp, #12
   d43de:	bd30      	pop	{r4, r5, pc}
   d43e0:	2003e33c 	.word	0x2003e33c
   d43e4:	2003e370 	.word	0x2003e370
   d43e8:	2003e3a0 	.word	0x2003e3a0
   d43ec:	000d8342 	.word	0x000d8342
   d43f0:	2003e410 	.word	0x2003e410
   d43f4:	2003e348 	.word	0x2003e348
   d43f8:	2003e360 	.word	0x2003e360
   d43fc:	2003e358 	.word	0x2003e358
   d4400:	000d8350 	.word	0x000d8350
   d4404:	2003e3b4 	.word	0x2003e3b4
   d4408:	2003e3a8 	.word	0x2003e3a8
   d440c:	2003e340 	.word	0x2003e340
   d4410:	000d8358 	.word	0x000d8358
   d4414:	2003e3b0 	.word	0x2003e3b0
   d4418:	2003e34c 	.word	0x2003e34c
   d441c:	2003e368 	.word	0x2003e368
   d4420:	000d8363 	.word	0x000d8363
   d4424:	000d836e 	.word	0x000d836e

000d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4428:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d442a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d442c:	4606      	mov	r6, r0
   d442e:	460c      	mov	r4, r1
   d4430:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4432:	d916      	bls.n	d4462 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4434:	4290      	cmp	r0, r2
   d4436:	d215      	bcs.n	d4464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4438:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d443c:	1a6c      	subs	r4, r5, r1
   d443e:	f1a1 0714 	sub.w	r7, r1, #20
   d4442:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4444:	42af      	cmp	r7, r5
   d4446:	d01c      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4448:	b12c      	cbz	r4, d4456 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d444a:	4629      	mov	r1, r5
   d444c:	4620      	mov	r0, r4
   d444e:	f000 fbaf 	bl	d4bb0 <_ZN6StringC1EOS_>
   d4452:	7c2b      	ldrb	r3, [r5, #16]
   d4454:	7423      	strb	r3, [r4, #16]
   d4456:	4628      	mov	r0, r5
   d4458:	f000 fbba 	bl	d4bd0 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d445c:	3d14      	subs	r5, #20
   d445e:	3c14      	subs	r4, #20
   d4460:	e7f0      	b.n	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4462:	d00e      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4464:	42ac      	cmp	r4, r5
   d4466:	d00c      	beq.n	d4482 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4468:	b12e      	cbz	r6, d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d446a:	4621      	mov	r1, r4
   d446c:	4630      	mov	r0, r6
   d446e:	f000 fb9f 	bl	d4bb0 <_ZN6StringC1EOS_>
   d4472:	7c23      	ldrb	r3, [r4, #16]
   d4474:	7433      	strb	r3, [r6, #16]
   d4476:	4620      	mov	r0, r4
   d4478:	f000 fbaa 	bl	d4bd0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d447c:	3414      	adds	r4, #20
   d447e:	3614      	adds	r6, #20
   d4480:	e7f0      	b.n	d4464 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4488:	2300      	movs	r3, #0
   d448a:	6003      	str	r3, [r0, #0]
   d448c:	6043      	str	r3, [r0, #4]
   d448e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4490:	684e      	ldr	r6, [r1, #4]
   d4492:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4494:	4604      	mov	r4, r0
   d4496:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4498:	dd24      	ble.n	d44e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d449a:	f04f 0814 	mov.w	r8, #20
   d449e:	fb08 f006 	mul.w	r0, r8, r6
   d44a2:	f000 fafd 	bl	d4aa0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d44a6:	4605      	mov	r5, r0
   d44a8:	b1e0      	cbz	r0, d44e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d44aa:	e894 0006 	ldmia.w	r4, {r1, r2}
   d44ae:	fb08 1202 	mla	r2, r8, r2, r1
   d44b2:	f7ff ffb9 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d44b6:	6820      	ldr	r0, [r4, #0]
   d44b8:	f000 fafa 	bl	d4ab0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d44bc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d44be:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44c0:	683e      	ldr	r6, [r7, #0]
   d44c2:	687b      	ldr	r3, [r7, #4]
   d44c4:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d44c8:	4546      	cmp	r6, r8
   d44ca:	d009      	beq.n	d44e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d44cc:	b12d      	cbz	r5, d44da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d44ce:	4631      	mov	r1, r6
   d44d0:	4628      	mov	r0, r5
   d44d2:	f000 fbe6 	bl	d4ca2 <_ZN6StringC1ERKS_>
   d44d6:	7c33      	ldrb	r3, [r6, #16]
   d44d8:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d44da:	3614      	adds	r6, #20
   d44dc:	3514      	adds	r5, #20
   d44de:	e7f3      	b.n	d44c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d44e0:	687b      	ldr	r3, [r7, #4]
   d44e2:	6063      	str	r3, [r4, #4]
    }
}
   d44e4:	4620      	mov	r0, r4
   d44e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d44ec <_GLOBAL__sub_I_logHandler>:
    //use API call to activate sensor and get distance back
    //disable pin to save power
    
    //do any transformation logic we might want
   return 0x0FF2;//placeholder output value to use if sensor isnt connected
   d44ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d44f0:	b090      	sub	sp, #64	; 0x40
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d44f2:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d44f4:	f000 f8ce 	bl	d4694 <HAL_Pin_Map>
   d44f8:	9404      	str	r4, [sp, #16]
   d44fa:	9405      	str	r4, [sp, #20]
   d44fc:	9406      	str	r4, [sp, #24]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d44fe:	f002 fe4f 	bl	d71a0 <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4502:	4d4b      	ldr	r5, [pc, #300]	; (d4630 <_GLOBAL__sub_I_logHandler+0x144>)
//duration in millis to wait between reads
const uint16_t TEMPERATURE_READ_DELAY = 5000;
unsigned long lastTemperatureUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* temperatureSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic temperatureSensorCharacteristic("temp",
   d4504:	f8df 8158 	ldr.w	r8, [pc, #344]	; d4660 <_GLOBAL__sub_I_logHandler+0x174>
   d4508:	f8df a158 	ldr.w	sl, [pc, #344]	; d4664 <_GLOBAL__sub_I_logHandler+0x178>
   d450c:	4607      	mov	r7, r0
   d450e:	a904      	add	r1, sp, #16
   d4510:	a807      	add	r0, sp, #28
   d4512:	f7ff ffb7 	bl	d4484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4516:	462e      	mov	r6, r5
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4518:	a907      	add	r1, sp, #28
   d451a:	a80a      	add	r0, sp, #40	; 0x28
   d451c:	f7ff ffb2 	bl	d4484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4520:	4b44      	ldr	r3, [pc, #272]	; (d4634 <_GLOBAL__sub_I_logHandler+0x148>)
   d4522:	f846 3b04 	str.w	r3, [r6], #4
   d4526:	a90a      	add	r1, sp, #40	; 0x28
   d4528:	a80d      	add	r0, sp, #52	; 0x34
   d452a:	f7ff ffab 	bl	d4484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d452e:	aa0d      	add	r2, sp, #52	; 0x34
   d4530:	2101      	movs	r1, #1
   d4532:	4630      	mov	r0, r6
   d4534:	f002 f983 	bl	d683e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4538:	a80d      	add	r0, sp, #52	; 0x34
   d453a:	f7ff fe06 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d453e:	a80a      	add	r0, sp, #40	; 0x28
   d4540:	f7ff fe03 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4544:	4b3c      	ldr	r3, [pc, #240]	; (d4638 <_GLOBAL__sub_I_logHandler+0x14c>)
   d4546:	602b      	str	r3, [r5, #0]
   d4548:	622f      	str	r7, [r5, #32]
   d454a:	a807      	add	r0, sp, #28
   d454c:	f7ff fdfd 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4550:	4b3a      	ldr	r3, [pc, #232]	; (d463c <_GLOBAL__sub_I_logHandler+0x150>)
   d4552:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4554:	f002 fe24 	bl	d71a0 <_Z16_fetch_usbserialv>
   d4558:	f44f 5116 	mov.w	r1, #9600	; 0x2580

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
// SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d455c:	4e38      	ldr	r6, [pc, #224]	; (d4640 <_GLOBAL__sub_I_logHandler+0x154>)
//duration in millis to wait between reads
const uint16_t TEMPERATURE_READ_DELAY = 5000;
unsigned long lastTemperatureUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* temperatureSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic temperatureSensorCharacteristic("temp",
   d455e:	4f39      	ldr	r7, [pc, #228]	; (d4644 <_GLOBAL__sub_I_logHandler+0x158>)
   d4560:	f002 fe0e 	bl	d7180 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4564:	f001 fe14 	bl	d6190 <_ZN5spark10LogManager8instanceEv>
   d4568:	4629      	mov	r1, r5
   d456a:	f002 f8fb 	bl	d6764 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
// SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d456e:	a804      	add	r0, sp, #16
   d4570:	f7ff fdeb 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4574:	4632      	mov	r2, r6
   d4576:	4934      	ldr	r1, [pc, #208]	; (d4648 <_GLOBAL__sub_I_logHandler+0x15c>)
   d4578:	4628      	mov	r0, r5
   d457a:	f003 fa24 	bl	d79c6 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t TEMPERATURE_READ_DELAY = 5000;
unsigned long lastTemperatureUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* temperatureSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic temperatureSensorCharacteristic("temp",
   d457e:	f8d8 3000 	ldr.w	r3, [r8]
   d4582:	9300      	str	r3, [sp, #0]
   d4584:	4b31      	ldr	r3, [pc, #196]	; (d464c <_GLOBAL__sub_I_logHandler+0x160>)
   d4586:	4d32      	ldr	r5, [pc, #200]	; (d4650 <_GLOBAL__sub_I_logHandler+0x164>)
   d4588:	9402      	str	r4, [sp, #8]
   d458a:	9401      	str	r4, [sp, #4]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d458c:	f04f 0910 	mov.w	r9, #16
   d4590:	681b      	ldr	r3, [r3, #0]
   d4592:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
   d4596:	aa0d      	add	r2, sp, #52	; 0x34
   d4598:	4639      	mov	r1, r7
   d459a:	4650      	mov	r0, sl
   d459c:	f7ff fde8 	bl	d4170 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d45a0:	4632      	mov	r2, r6
   d45a2:	4629      	mov	r1, r5
   d45a4:	4650      	mov	r0, sl
   d45a6:	f003 fa0e 	bl	d79c6 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t LIGHT_READ_DELAY = 5000;
unsigned long lastLightUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* lightSensorUuid("ea5248a4-43cc-4198-a4aa-79200a750835");
BleCharacteristic lightSensorCharacteristic("temp",
   d45aa:	f8d8 3000 	ldr.w	r3, [r8]
   d45ae:	9300      	str	r3, [sp, #0]
   d45b0:	f8df a0b4 	ldr.w	sl, [pc, #180]	; d4668 <_GLOBAL__sub_I_logHandler+0x17c>
   d45b4:	4b27      	ldr	r3, [pc, #156]	; (d4654 <_GLOBAL__sub_I_logHandler+0x168>)
   d45b6:	9402      	str	r4, [sp, #8]
   d45b8:	9401      	str	r4, [sp, #4]
   d45ba:	681b      	ldr	r3, [r3, #0]
   d45bc:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
   d45c0:	aa0d      	add	r2, sp, #52	; 0x34
   d45c2:	4639      	mov	r1, r7
   d45c4:	4650      	mov	r0, sl
   d45c6:	f7ff fdd3 	bl	d4170 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d45ca:	4632      	mov	r2, r6
   d45cc:	4629      	mov	r1, r5
   d45ce:	4650      	mov	r0, sl
   d45d0:	f003 f9f9 	bl	d79c6 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t HUMIDITY_READ_DELAY = 5000;
unsigned long lastHumidityUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* humiditySensorUuid("99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
BleCharacteristic humiditySensorCharacteristic("temp",
   d45d4:	f8d8 3000 	ldr.w	r3, [r8]
   d45d8:	9300      	str	r3, [sp, #0]
   d45da:	f8df a090 	ldr.w	sl, [pc, #144]	; d466c <_GLOBAL__sub_I_logHandler+0x180>
   d45de:	4b1e      	ldr	r3, [pc, #120]	; (d4658 <_GLOBAL__sub_I_logHandler+0x16c>)
   d45e0:	9402      	str	r4, [sp, #8]
   d45e2:	9401      	str	r4, [sp, #4]
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
   d45ea:	aa0d      	add	r2, sp, #52	; 0x34
   d45ec:	4639      	mov	r1, r7
   d45ee:	4650      	mov	r0, sl
   d45f0:	f7ff fdbe 	bl	d4170 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d45f4:	4632      	mov	r2, r6
   d45f6:	4629      	mov	r1, r5
   d45f8:	4650      	mov	r0, sl
   d45fa:	f003 f9e4 	bl	d79c6 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t DISTANCE_READ_DELAY = 5000;
unsigned long lastDistanceUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* distanceSensorUuid("45be4a56-48f5-483c-8bb1-d3fee433c23c");
BleCharacteristic distanceSensorCharacteristic("temp",
   d45fe:	f8d8 3000 	ldr.w	r3, [r8]
   d4602:	9300      	str	r3, [sp, #0]
   d4604:	f88d 9034 	strb.w	r9, [sp, #52]	; 0x34
   d4608:	4b14      	ldr	r3, [pc, #80]	; (d465c <_GLOBAL__sub_I_logHandler+0x170>)
   d460a:	f8df 9064 	ldr.w	r9, [pc, #100]	; d4670 <_GLOBAL__sub_I_logHandler+0x184>
   d460e:	9402      	str	r4, [sp, #8]
   d4610:	9401      	str	r4, [sp, #4]
   d4612:	681b      	ldr	r3, [r3, #0]
   d4614:	aa0d      	add	r2, sp, #52	; 0x34
   d4616:	4639      	mov	r1, r7
   d4618:	4648      	mov	r0, r9
   d461a:	f7ff fda9 	bl	d4170 <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d461e:	4632      	mov	r2, r6
   d4620:	4629      	mov	r1, r5
   d4622:	4648      	mov	r0, r9
   d4624:	f003 f9cf 	bl	d79c6 <__aeabi_atexit>
    //use API call to activate sensor and get distance back
    //disable pin to save power
    
    //do any transformation logic we might want
   return 0x0FF2;//placeholder output value to use if sensor isnt connected
   d4628:	b010      	add	sp, #64	; 0x40
   d462a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d462e:	bf00      	nop
   d4630:	2003e378 	.word	0x2003e378
   d4634:	000d82e4 	.word	0x000d82e4
   d4638:	000d87a4 	.word	0x000d87a4
   d463c:	000d82fc 	.word	0x000d82fc
   d4640:	2003e338 	.word	0x2003e338
   d4644:	000d8384 	.word	0x000d8384
   d4648:	000d40d5 	.word	0x000d40d5
   d464c:	2003e2b0 	.word	0x2003e2b0
   d4650:	000d5483 	.word	0x000d5483
   d4654:	2003e2b8 	.word	0x2003e2b8
   d4658:	2003e2b4 	.word	0x2003e2b4
   d465c:	2003e2bc 	.word	0x2003e2bc
   d4660:	2003e2ac 	.word	0x2003e2ac
   d4664:	2003e370 	.word	0x2003e370
   d4668:	2003e360 	.word	0x2003e360
   d466c:	2003e3a8 	.word	0x2003e3a8
   d4670:	2003e34c 	.word	0x2003e34c

000d4674 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4674:	b508      	push	{r3, lr}
   d4676:	4b02      	ldr	r3, [pc, #8]	; (d4680 <netdb_freeaddrinfo+0xc>)
   d4678:	681b      	ldr	r3, [r3, #0]
   d467a:	689b      	ldr	r3, [r3, #8]
   d467c:	9301      	str	r3, [sp, #4]
   d467e:	bd08      	pop	{r3, pc}
   d4680:	00030268 	.word	0x00030268

000d4684 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4684:	b508      	push	{r3, lr}
   d4686:	4b02      	ldr	r3, [pc, #8]	; (d4690 <netdb_getaddrinfo+0xc>)
   d4688:	681b      	ldr	r3, [r3, #0]
   d468a:	68db      	ldr	r3, [r3, #12]
   d468c:	9301      	str	r3, [sp, #4]
   d468e:	bd08      	pop	{r3, pc}
   d4690:	00030268 	.word	0x00030268

000d4694 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4694:	b508      	push	{r3, lr}
   d4696:	4b02      	ldr	r3, [pc, #8]	; (d46a0 <HAL_Pin_Map+0xc>)
   d4698:	681b      	ldr	r3, [r3, #0]
   d469a:	681b      	ldr	r3, [r3, #0]
   d469c:	9301      	str	r3, [sp, #4]
   d469e:	bd08      	pop	{r3, pc}
   d46a0:	0003022c 	.word	0x0003022c

000d46a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46a4:	b508      	push	{r3, lr}
   d46a6:	4b02      	ldr	r3, [pc, #8]	; (d46b0 <HAL_RNG_GetRandomNumber+0xc>)
   d46a8:	681b      	ldr	r3, [r3, #0]
   d46aa:	685b      	ldr	r3, [r3, #4]
   d46ac:	9301      	str	r3, [sp, #4]
   d46ae:	bd08      	pop	{r3, pc}
   d46b0:	00030218 	.word	0x00030218

000d46b4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d46b4:	b508      	push	{r3, lr}
   d46b6:	4b02      	ldr	r3, [pc, #8]	; (d46c0 <HAL_Delay_Microseconds+0xc>)
   d46b8:	681b      	ldr	r3, [r3, #0]
   d46ba:	68db      	ldr	r3, [r3, #12]
   d46bc:	9301      	str	r3, [sp, #4]
   d46be:	bd08      	pop	{r3, pc}
   d46c0:	00030218 	.word	0x00030218

000d46c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46c4:	b508      	push	{r3, lr}
   d46c6:	4b02      	ldr	r3, [pc, #8]	; (d46d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46c8:	681b      	ldr	r3, [r3, #0]
   d46ca:	695b      	ldr	r3, [r3, #20]
   d46cc:	9301      	str	r3, [sp, #4]
   d46ce:	bd08      	pop	{r3, pc}
   d46d0:	00030218 	.word	0x00030218

000d46d4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d46d4:	b508      	push	{r3, lr}
   d46d6:	4b02      	ldr	r3, [pc, #8]	; (d46e0 <hal_ble_stack_init+0xc>)
   d46d8:	681b      	ldr	r3, [r3, #0]
   d46da:	689b      	ldr	r3, [r3, #8]
   d46dc:	9301      	str	r3, [sp, #4]
   d46de:	bd08      	pop	{r3, pc}
   d46e0:	00030278 	.word	0x00030278

000d46e4 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d46e4:	b508      	push	{r3, lr}
   d46e6:	4b02      	ldr	r3, [pc, #8]	; (d46f0 <hal_ble_gap_set_advertising_data+0xc>)
   d46e8:	681b      	ldr	r3, [r3, #0]
   d46ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d46ec:	9301      	str	r3, [sp, #4]
   d46ee:	bd08      	pop	{r3, pc}
   d46f0:	00030278 	.word	0x00030278

000d46f4 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d46f4:	b508      	push	{r3, lr}
   d46f6:	4b02      	ldr	r3, [pc, #8]	; (d4700 <hal_ble_gap_set_scan_response_data+0xc>)
   d46f8:	681b      	ldr	r3, [r3, #0]
   d46fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d46fc:	9301      	str	r3, [sp, #4]
   d46fe:	bd08      	pop	{r3, pc}
   d4700:	00030278 	.word	0x00030278

000d4704 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4704:	b508      	push	{r3, lr}
   d4706:	4b02      	ldr	r3, [pc, #8]	; (d4710 <hal_ble_gap_start_advertising+0xc>)
   d4708:	681b      	ldr	r3, [r3, #0]
   d470a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d470c:	9301      	str	r3, [sp, #4]
   d470e:	bd08      	pop	{r3, pc}
   d4710:	00030278 	.word	0x00030278

000d4714 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4714:	b508      	push	{r3, lr}
   d4716:	4b03      	ldr	r3, [pc, #12]	; (d4724 <hal_ble_gap_disconnect+0x10>)
   d4718:	681b      	ldr	r3, [r3, #0]
   d471a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d471e:	9301      	str	r3, [sp, #4]
   d4720:	bd08      	pop	{r3, pc}
   d4722:	0000      	.short	0x0000
   d4724:	00030278 	.word	0x00030278

000d4728 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b03      	ldr	r3, [pc, #12]	; (d4738 <hal_ble_gatt_server_add_service+0x10>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4732:	9301      	str	r3, [sp, #4]
   d4734:	bd08      	pop	{r3, pc}
   d4736:	0000      	.short	0x0000
   d4738:	00030278 	.word	0x00030278

000d473c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d473c:	b508      	push	{r3, lr}
   d473e:	4b03      	ldr	r3, [pc, #12]	; (d474c <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4740:	681b      	ldr	r3, [r3, #0]
   d4742:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4746:	9301      	str	r3, [sp, #4]
   d4748:	bd08      	pop	{r3, pc}
   d474a:	0000      	.short	0x0000
   d474c:	00030278 	.word	0x00030278

000d4750 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4750:	b508      	push	{r3, lr}
   d4752:	4b03      	ldr	r3, [pc, #12]	; (d4760 <hal_ble_gatt_client_write_with_response+0x10>)
   d4754:	681b      	ldr	r3, [r3, #0]
   d4756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d475a:	9301      	str	r3, [sp, #4]
   d475c:	bd08      	pop	{r3, pc}
   d475e:	0000      	.short	0x0000
   d4760:	00030278 	.word	0x00030278

000d4764 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4764:	b508      	push	{r3, lr}
   d4766:	4b03      	ldr	r3, [pc, #12]	; (d4774 <hal_ble_gatt_client_write_without_response+0x10>)
   d4768:	681b      	ldr	r3, [r3, #0]
   d476a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d476e:	9301      	str	r3, [sp, #4]
   d4770:	bd08      	pop	{r3, pc}
   d4772:	0000      	.short	0x0000
   d4774:	00030278 	.word	0x00030278

000d4778 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b03      	ldr	r3, [pc, #12]	; (d4788 <hal_ble_gatt_server_add_characteristic+0x10>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4782:	9301      	str	r3, [sp, #4]
   d4784:	bd08      	pop	{r3, pc}
   d4786:	0000      	.short	0x0000
   d4788:	00030278 	.word	0x00030278

000d478c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d478c:	b508      	push	{r3, lr}
   d478e:	4b03      	ldr	r3, [pc, #12]	; (d479c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4790:	681b      	ldr	r3, [r3, #0]
   d4792:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4796:	9301      	str	r3, [sp, #4]
   d4798:	bd08      	pop	{r3, pc}
   d479a:	0000      	.short	0x0000
   d479c:	00030278 	.word	0x00030278

000d47a0 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d47a0:	b508      	push	{r3, lr}
   d47a2:	4b03      	ldr	r3, [pc, #12]	; (d47b0 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d47a4:	681b      	ldr	r3, [r3, #0]
   d47a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d47aa:	9301      	str	r3, [sp, #4]
   d47ac:	bd08      	pop	{r3, pc}
   d47ae:	0000      	.short	0x0000
   d47b0:	00030278 	.word	0x00030278

000d47b4 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d47b4:	b508      	push	{r3, lr}
   d47b6:	4b03      	ldr	r3, [pc, #12]	; (d47c4 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d47b8:	681b      	ldr	r3, [r3, #0]
   d47ba:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d47be:	9301      	str	r3, [sp, #4]
   d47c0:	bd08      	pop	{r3, pc}
   d47c2:	0000      	.short	0x0000
   d47c4:	00030278 	.word	0x00030278

000d47c8 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <os_thread_is_current+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	689b      	ldr	r3, [r3, #8]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030248 	.word	0x00030248

000d47d8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <os_thread_join+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	691b      	ldr	r3, [r3, #16]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030248 	.word	0x00030248

000d47e8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <os_thread_cleanup+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	695b      	ldr	r3, [r3, #20]
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030248 	.word	0x00030248

000d47f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <os_mutex_recursive_create+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030248 	.word	0x00030248

000d4808 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <os_mutex_recursive_destroy+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030248 	.word	0x00030248

000d4818 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <os_mutex_recursive_lock+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030248 	.word	0x00030248

000d4828 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <os_mutex_recursive_unlock+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030248 	.word	0x00030248

000d4838 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <inet_inet_ntop+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	695b      	ldr	r3, [r3, #20]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030264 	.word	0x00030264

000d4848 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_USART_Init+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	681b      	ldr	r3, [r3, #0]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003023c 	.word	0x0003023c

000d4858 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_USART_End+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	689b      	ldr	r3, [r3, #8]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003023c 	.word	0x0003023c

000d4868 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_USART_Write_Data+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	68db      	ldr	r3, [r3, #12]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003023c 	.word	0x0003023c

000d4878 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_USART_Available_Data+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	691b      	ldr	r3, [r3, #16]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003023c 	.word	0x0003023c

000d4888 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_USART_Read_Data+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	695b      	ldr	r3, [r3, #20]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	0003023c 	.word	0x0003023c

000d4898 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_USART_Peek_Data+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	699b      	ldr	r3, [r3, #24]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	0003023c 	.word	0x0003023c

000d48a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_USART_Flush_Data+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	69db      	ldr	r3, [r3, #28]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	0003023c 	.word	0x0003023c

000d48b8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_USART_Available_Data_For_Write+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	0003023c 	.word	0x0003023c

000d48c8 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_USART_BeginConfig+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	0003023c 	.word	0x0003023c

000d48d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_USB_USART_Init+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	681b      	ldr	r3, [r3, #0]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	0003024c 	.word	0x0003024c

000d48e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_USB_USART_Begin+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	685b      	ldr	r3, [r3, #4]
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	0003024c 	.word	0x0003024c

000d48f8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_USB_USART_End+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	689b      	ldr	r3, [r3, #8]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	0003024c 	.word	0x0003024c

000d4908 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_USB_USART_Available_Data+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	691b      	ldr	r3, [r3, #16]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	0003024c 	.word	0x0003024c

000d4918 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	695b      	ldr	r3, [r3, #20]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	0003024c 	.word	0x0003024c

000d4928 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_USB_USART_Receive_Data+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	699b      	ldr	r3, [r3, #24]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	0003024c 	.word	0x0003024c

000d4938 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_USB_USART_Send_Data+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	69db      	ldr	r3, [r3, #28]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	0003024c 	.word	0x0003024c

000d4948 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_USB_USART_Flush_Data+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	6a1b      	ldr	r3, [r3, #32]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003024c 	.word	0x0003024c

000d4958 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <panic_+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	00030260 	.word	0x00030260

000d4968 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <log_message+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030260 	.word	0x00030260

000d4978 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <log_message_v+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030260 	.word	0x00030260

000d4988 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b02      	ldr	r3, [pc, #8]	; (d4994 <log_level_name+0xc>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4990:	9301      	str	r3, [sp, #4]
   d4992:	bd08      	pop	{r3, pc}
   d4994:	00030260 	.word	0x00030260

000d4998 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4998:	b508      	push	{r3, lr}
   d499a:	4b02      	ldr	r3, [pc, #8]	; (d49a4 <log_set_callbacks+0xc>)
   d499c:	681b      	ldr	r3, [r3, #0]
   d499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d49a0:	9301      	str	r3, [sp, #4]
   d49a2:	bd08      	pop	{r3, pc}
   d49a4:	00030260 	.word	0x00030260

000d49a8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d49a8:	b508      	push	{r3, lr}
   d49aa:	4b02      	ldr	r3, [pc, #8]	; (d49b4 <set_system_mode+0xc>)
   d49ac:	681b      	ldr	r3, [r3, #0]
   d49ae:	685b      	ldr	r3, [r3, #4]
   d49b0:	9301      	str	r3, [sp, #4]
   d49b2:	bd08      	pop	{r3, pc}
   d49b4:	00030220 	.word	0x00030220

000d49b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d49b8:	b508      	push	{r3, lr}
   d49ba:	4b03      	ldr	r3, [pc, #12]	; (d49c8 <system_ctrl_set_app_request_handler+0x10>)
   d49bc:	681b      	ldr	r3, [r3, #0]
   d49be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d49c2:	9301      	str	r3, [sp, #4]
   d49c4:	bd08      	pop	{r3, pc}
   d49c6:	0000      	.short	0x0000
   d49c8:	00030220 	.word	0x00030220

000d49cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d49cc:	b508      	push	{r3, lr}
   d49ce:	4b03      	ldr	r3, [pc, #12]	; (d49dc <system_ctrl_set_result+0x10>)
   d49d0:	681b      	ldr	r3, [r3, #0]
   d49d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49d6:	9301      	str	r3, [sp, #4]
   d49d8:	bd08      	pop	{r3, pc}
   d49da:	0000      	.short	0x0000
   d49dc:	00030220 	.word	0x00030220

000d49e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <network_connect+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	685b      	ldr	r3, [r3, #4]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030240 	.word	0x00030240

000d49f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <network_connecting+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	689b      	ldr	r3, [r3, #8]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030240 	.word	0x00030240

000d4a00 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <network_disconnect+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	68db      	ldr	r3, [r3, #12]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030240 	.word	0x00030240

000d4a10 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <network_ready+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	691b      	ldr	r3, [r3, #16]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030240 	.word	0x00030240

000d4a20 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <network_on+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	695b      	ldr	r3, [r3, #20]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030240 	.word	0x00030240

000d4a30 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_off+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	699b      	ldr	r3, [r3, #24]
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_listen+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	69db      	ldr	r3, [r3, #28]
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_listening+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6a1b      	ldr	r3, [r3, #32]
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_set_listen_timeout+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <network_get_listen_timeout+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030240 	.word	0x00030240

000d4a80 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <spark_variable+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	681b      	ldr	r3, [r3, #0]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	00030244 	.word	0x00030244

000d4a90 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	00030244 	.word	0x00030244

000d4aa0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <malloc+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	681b      	ldr	r3, [r3, #0]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003021c 	.word	0x0003021c

000d4ab0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <free+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	685b      	ldr	r3, [r3, #4]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003021c 	.word	0x0003021c

000d4ac0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <realloc+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	689b      	ldr	r3, [r3, #8]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003021c 	.word	0x0003021c

000d4ad0 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <vsnprintf+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003021c 	.word	0x0003021c

000d4ae0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ae0:	2200      	movs	r2, #0
   d4ae2:	4611      	mov	r1, r2
   d4ae4:	6840      	ldr	r0, [r0, #4]
   d4ae6:	f7ff bfb3 	b.w	d4a50 <network_listening>

000d4aea <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4aea:	2200      	movs	r2, #0
   d4aec:	4611      	mov	r1, r2
   d4aee:	6840      	ldr	r0, [r0, #4]
   d4af0:	f7ff bfbe 	b.w	d4a70 <network_get_listen_timeout>

000d4af4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4af4:	2200      	movs	r2, #0
   d4af6:	6840      	ldr	r0, [r0, #4]
   d4af8:	f7ff bfb2 	b.w	d4a60 <network_set_listen_timeout>

000d4afc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4afc:	2200      	movs	r2, #0
   d4afe:	f081 0101 	eor.w	r1, r1, #1
   d4b02:	6840      	ldr	r0, [r0, #4]
   d4b04:	f7ff bf9c 	b.w	d4a40 <network_listen>

000d4b08 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4b08:	2300      	movs	r3, #0
   d4b0a:	461a      	mov	r2, r3
   d4b0c:	4619      	mov	r1, r3
   d4b0e:	6840      	ldr	r0, [r0, #4]
   d4b10:	f7ff bf8e 	b.w	d4a30 <network_off>

000d4b14 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4b14:	2300      	movs	r3, #0
   d4b16:	461a      	mov	r2, r3
   d4b18:	4619      	mov	r1, r3
   d4b1a:	6840      	ldr	r0, [r0, #4]
   d4b1c:	f7ff bf80 	b.w	d4a20 <network_on>

000d4b20 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4b20:	2200      	movs	r2, #0
   d4b22:	4611      	mov	r1, r2
   d4b24:	6840      	ldr	r0, [r0, #4]
   d4b26:	f7ff bf73 	b.w	d4a10 <network_ready>

000d4b2a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4b2a:	2200      	movs	r2, #0
   d4b2c:	4611      	mov	r1, r2
   d4b2e:	6840      	ldr	r0, [r0, #4]
   d4b30:	f7ff bf5e 	b.w	d49f0 <network_connecting>

000d4b34 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b34:	2200      	movs	r2, #0
   d4b36:	2102      	movs	r1, #2
   d4b38:	6840      	ldr	r0, [r0, #4]
   d4b3a:	f7ff bf61 	b.w	d4a00 <network_disconnect>

000d4b3e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4b3e:	2300      	movs	r3, #0
   d4b40:	461a      	mov	r2, r3
   d4b42:	6840      	ldr	r0, [r0, #4]
   d4b44:	f7ff bf4c 	b.w	d49e0 <network_connect>

000d4b48 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b48:	4b02      	ldr	r3, [pc, #8]	; (d4b54 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b4a:	2203      	movs	r2, #3
   d4b4c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b4e:	4a02      	ldr	r2, [pc, #8]	; (d4b58 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b50:	601a      	str	r2, [r3, #0]
   d4b52:	4770      	bx	lr
   d4b54:	2003e3b8 	.word	0x2003e3b8
   d4b58:	000d844c 	.word	0x000d844c

000d4b5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4b5c:	b510      	push	{r4, lr}
   d4b5e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4b60:	6800      	ldr	r0, [r0, #0]
   d4b62:	b118      	cbz	r0, d4b6c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4b64:	f7ff ffa4 	bl	d4ab0 <free>
            wakeupSource_ = nullptr;
   d4b68:	2300      	movs	r3, #0
   d4b6a:	6023      	str	r3, [r4, #0]
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b6e:	b510      	push	{r4, lr}
   d4b70:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4b72:	f7ff fff3 	bl	d4b5c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4b76:	4620      	mov	r0, r4
   d4b78:	bd10      	pop	{r4, pc}
	...

000d4b7c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b7c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b7e:	4c09      	ldr	r4, [pc, #36]	; (d4ba4 <_GLOBAL__sub_I_System+0x28>)
   d4b80:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b82:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b86:	6020      	str	r0, [r4, #0]
   d4b88:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b8a:	71a0      	strb	r0, [r4, #6]
   d4b8c:	8120      	strh	r0, [r4, #8]
   d4b8e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b90:	f7ff ff0a 	bl	d49a8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4b94:	4620      	mov	r0, r4
   d4b96:	4a04      	ldr	r2, [pc, #16]	; (d4ba8 <_GLOBAL__sub_I_System+0x2c>)
   d4b98:	4904      	ldr	r1, [pc, #16]	; (d4bac <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4b9e:	f002 bf12 	b.w	d79c6 <__aeabi_atexit>
   d4ba2:	bf00      	nop
   d4ba4:	2003e3c0 	.word	0x2003e3c0
   d4ba8:	2003e338 	.word	0x2003e338
   d4bac:	000d4b6f 	.word	0x000d4b6f

000d4bb0 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4bb0:	2300      	movs	r3, #0
   d4bb2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4bb4:	6043      	str	r3, [r0, #4]
	len = 0;
   d4bb6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4bb8:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d4bba:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d4bbc:	680c      	ldr	r4, [r1, #0]
   d4bbe:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d4bc0:	684c      	ldr	r4, [r1, #4]
   d4bc2:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d4bc4:	688c      	ldr	r4, [r1, #8]
   d4bc6:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d4bc8:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d4bca:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d4bcc:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d4bce:	bd10      	pop	{r4, pc}

000d4bd0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4bd0:	b510      	push	{r4, lr}
   d4bd2:	4604      	mov	r4, r0
{
	free(buffer);
   d4bd4:	6800      	ldr	r0, [r0, #0]
   d4bd6:	f7ff ff6b 	bl	d4ab0 <free>
}
   d4bda:	4620      	mov	r0, r4
   d4bdc:	bd10      	pop	{r4, pc}

000d4bde <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4bde:	b510      	push	{r4, lr}
   d4be0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4be2:	6800      	ldr	r0, [r0, #0]
   d4be4:	b108      	cbz	r0, d4bea <_ZN6String10invalidateEv+0xc>
   d4be6:	f7ff ff63 	bl	d4ab0 <free>
	buffer = NULL;
   d4bea:	2300      	movs	r3, #0
   d4bec:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4bee:	60a3      	str	r3, [r4, #8]
   d4bf0:	6063      	str	r3, [r4, #4]
   d4bf2:	bd10      	pop	{r4, pc}

000d4bf4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4bf4:	b538      	push	{r3, r4, r5, lr}
   d4bf6:	4604      	mov	r4, r0
   d4bf8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4bfa:	6800      	ldr	r0, [r0, #0]
   d4bfc:	3101      	adds	r1, #1
   d4bfe:	f7ff ff5f 	bl	d4ac0 <realloc>
	if (newbuffer) {
   d4c02:	b110      	cbz	r0, d4c0a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4c04:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4c08:	2001      	movs	r0, #1
	}
	return 0;
}
   d4c0a:	bd38      	pop	{r3, r4, r5, pc}

000d4c0c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4c0c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4c0e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4c10:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4c12:	b113      	cbz	r3, d4c1a <_ZN6String7reserveEj+0xe>
   d4c14:	6843      	ldr	r3, [r0, #4]
   d4c16:	428b      	cmp	r3, r1
   d4c18:	d207      	bcs.n	d4c2a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4c1a:	4620      	mov	r0, r4
   d4c1c:	f7ff ffea 	bl	d4bf4 <_ZN6String12changeBufferEj>
   d4c20:	b120      	cbz	r0, d4c2c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4c22:	68a3      	ldr	r3, [r4, #8]
   d4c24:	b90b      	cbnz	r3, d4c2a <_ZN6String7reserveEj+0x1e>
   d4c26:	6822      	ldr	r2, [r4, #0]
   d4c28:	7013      	strb	r3, [r2, #0]
   d4c2a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4c2c:	bd10      	pop	{r4, pc}

000d4c2e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c2e:	b570      	push	{r4, r5, r6, lr}
   d4c30:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4c32:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4c34:	4604      	mov	r4, r0
   d4c36:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4c38:	f7ff ffe8 	bl	d4c0c <_ZN6String7reserveEj>
   d4c3c:	b918      	cbnz	r0, d4c46 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4c3e:	4620      	mov	r0, r4
   d4c40:	f7ff ffcd 	bl	d4bde <_ZN6String10invalidateEv>
		return *this;
   d4c44:	e009      	b.n	d4c5a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4c46:	462a      	mov	r2, r5
   d4c48:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4c4a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4c4c:	6820      	ldr	r0, [r4, #0]
   d4c4e:	f003 f9f6 	bl	d803e <memcpy>
	buffer[len] = 0;
   d4c52:	6822      	ldr	r2, [r4, #0]
   d4c54:	68a3      	ldr	r3, [r4, #8]
   d4c56:	2100      	movs	r1, #0
   d4c58:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4c5a:	4620      	mov	r0, r4
   d4c5c:	bd70      	pop	{r4, r5, r6, pc}

000d4c5e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c5e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c60:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4c62:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4c64:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4c66:	6043      	str	r3, [r0, #4]
	len = 0;
   d4c68:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4c6a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4c6c:	460d      	mov	r5, r1
   d4c6e:	b139      	cbz	r1, d4c80 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4c70:	4608      	mov	r0, r1
   d4c72:	f003 fa5d 	bl	d8130 <strlen>
   d4c76:	4629      	mov	r1, r5
   d4c78:	4602      	mov	r2, r0
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	f7ff ffd7 	bl	d4c2e <_ZN6String4copyEPKcj>
}
   d4c80:	4620      	mov	r0, r4
   d4c82:	bd38      	pop	{r3, r4, r5, pc}

000d4c84 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4c84:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4c86:	b510      	push	{r4, lr}
   d4c88:	460b      	mov	r3, r1
   d4c8a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4c8c:	d007      	beq.n	d4c9e <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4c8e:	6809      	ldr	r1, [r1, #0]
   d4c90:	b119      	cbz	r1, d4c9a <_ZN6StringaSERKS_+0x16>
   d4c92:	689a      	ldr	r2, [r3, #8]
   d4c94:	f7ff ffcb 	bl	d4c2e <_ZN6String4copyEPKcj>
   d4c98:	e001      	b.n	d4c9e <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4c9a:	f7ff ffa0 	bl	d4bde <_ZN6String10invalidateEv>

	return *this;
}
   d4c9e:	4620      	mov	r0, r4
   d4ca0:	bd10      	pop	{r4, pc}

000d4ca2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4ca2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ca4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4ca6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ca8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4caa:	6043      	str	r3, [r0, #4]
	len = 0;
   d4cac:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4cae:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4cb0:	f7ff ffe8 	bl	d4c84 <_ZN6StringaSERKS_>
}
   d4cb4:	4620      	mov	r0, r4
   d4cb6:	bd10      	pop	{r4, pc}

000d4cb8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4cb8:	b538      	push	{r3, r4, r5, lr}
   d4cba:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4cbc:	460c      	mov	r4, r1
   d4cbe:	b141      	cbz	r1, d4cd2 <_ZN6StringaSEPKc+0x1a>
   d4cc0:	4608      	mov	r0, r1
   d4cc2:	f003 fa35 	bl	d8130 <strlen>
   d4cc6:	4621      	mov	r1, r4
   d4cc8:	4602      	mov	r2, r0
   d4cca:	4628      	mov	r0, r5
   d4ccc:	f7ff ffaf 	bl	d4c2e <_ZN6String4copyEPKcj>
   d4cd0:	e001      	b.n	d4cd6 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4cd2:	f7ff ff84 	bl	d4bde <_ZN6String10invalidateEv>

	return *this;
}
   d4cd6:	4628      	mov	r0, r5
   d4cd8:	bd38      	pop	{r3, r4, r5, pc}

000d4cda <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4cda:	4770      	bx	lr

000d4cdc <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4cdc:	2000      	movs	r0, #0
   d4cde:	4770      	bx	lr

000d4ce0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ce0:	4770      	bx	lr

000d4ce2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4ce2:	2000      	movs	r0, #0
   d4ce4:	4770      	bx	lr

000d4ce6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4ce6:	4770      	bx	lr

000d4ce8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4ce8:	2000      	movs	r0, #0
   d4cea:	4770      	bx	lr

000d4cec <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4cec:	b510      	push	{r4, lr}
   d4cee:	2114      	movs	r1, #20
   d4cf0:	4604      	mov	r4, r0
   d4cf2:	f002 fe75 	bl	d79e0 <_ZdlPvj>
   d4cf6:	4620      	mov	r0, r4
   d4cf8:	bd10      	pop	{r4, pc}

000d4cfa <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4cfa:	b510      	push	{r4, lr}
   d4cfc:	2114      	movs	r1, #20
   d4cfe:	4604      	mov	r4, r0
   d4d00:	f002 fe6e 	bl	d79e0 <_ZdlPvj>
   d4d04:	4620      	mov	r0, r4
   d4d06:	bd10      	pop	{r4, pc}

000d4d08 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4d08:	b510      	push	{r4, lr}
   d4d0a:	2114      	movs	r1, #20
   d4d0c:	4604      	mov	r4, r0
   d4d0e:	f002 fe67 	bl	d79e0 <_ZdlPvj>
   d4d12:	4620      	mov	r0, r4
   d4d14:	bd10      	pop	{r4, pc}

000d4d16 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4d16:	f7ff b9c0 	b.w	d409a <_ZdlPv>

000d4d1a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4d1a:	f7ff b9be 	b.w	d409a <_ZdlPv>

000d4d1e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4d1e:	f7ff b9bc 	b.w	d409a <_ZdlPv>

000d4d22 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4d22:	b510      	push	{r4, lr}
   d4d24:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4d26:	6800      	ldr	r0, [r0, #0]
   d4d28:	b108      	cbz	r0, d4d2e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4d2a:	f7ff fd6d 	bl	d4808 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4d2e:	4620      	mov	r0, r4
   d4d30:	bd10      	pop	{r4, pc}
	...

000d4d34 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4d34:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4d36:	200a      	movs	r0, #10
   d4d38:	4a02      	ldr	r2, [pc, #8]	; (d4d44 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4d3a:	2100      	movs	r1, #0
   d4d3c:	f7ff fe0c 	bl	d4958 <panic_>
    }
}
   d4d40:	bd08      	pop	{r3, pc}
   d4d42:	bf00      	nop
   d4d44:	000d46b5 	.word	0x000d46b5

000d4d48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d48:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d4a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4d4c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4d4e:	689b      	ldr	r3, [r3, #8]
   d4d50:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4d52:	68a3      	ldr	r3, [r4, #8]
   d4d54:	3b01      	subs	r3, #1
   d4d56:	60a3      	str	r3, [r4, #8]
   d4d58:	b92b      	cbnz	r3, d4d66 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4d5a:	6823      	ldr	r3, [r4, #0]
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4d64:	4718      	bx	r3
   d4d66:	bd10      	pop	{r4, pc}

000d4d68 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4d68:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4d6c:	b2da      	uxtb	r2, r3
   d4d6e:	2a09      	cmp	r2, #9
   d4d70:	d801      	bhi.n	d4d76 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4d72:	4618      	mov	r0, r3
   d4d74:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4d76:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4d7a:	2b05      	cmp	r3, #5
   d4d7c:	d801      	bhi.n	d4d82 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d4d7e:	3857      	subs	r0, #87	; 0x57
   d4d80:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d4d82:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4d86:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d4d88:	bf94      	ite	ls
   d4d8a:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d4d8c:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d4d90:	4770      	bx	lr
	...

000d4d94 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4d94:	b510      	push	{r4, lr}
            locked_(false) {
   d4d96:	2300      	movs	r3, #0
   d4d98:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d4d9a:	4b04      	ldr	r3, [pc, #16]	; (d4dac <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d4d9c:	4604      	mov	r4, r0
   d4d9e:	6818      	ldr	r0, [r3, #0]
   d4da0:	f7ff fd3a 	bl	d4818 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d4da4:	2301      	movs	r3, #1
   d4da6:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d4da8:	4620      	mov	r0, r4
   d4daa:	bd10      	pop	{r4, pc}
   d4dac:	2003e3d8 	.word	0x2003e3d8

000d4db0 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d4db0:	b510      	push	{r4, lr}
        if (locked_) {
   d4db2:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d4db4:	4604      	mov	r4, r0
        if (locked_) {
   d4db6:	b11b      	cbz	r3, d4dc0 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d4db8:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d4dba:	6818      	ldr	r0, [r3, #0]
   d4dbc:	f7ff fd34 	bl	d4828 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d4dc0:	4620      	mov	r0, r4
   d4dc2:	bd10      	pop	{r4, pc}
   d4dc4:	2003e3d8 	.word	0x2003e3d8

000d4dc8 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d4dc8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d4dca:	7982      	ldrb	r2, [r0, #6]
   d4dcc:	798b      	ldrb	r3, [r1, #6]
   d4dce:	429a      	cmp	r2, r3
   d4dd0:	d106      	bne.n	d4de0 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d4dd2:	2206      	movs	r2, #6
   d4dd4:	f003 f924 	bl	d8020 <memcmp>
   d4dd8:	fab0 f080 	clz	r0, r0
   d4ddc:	0940      	lsrs	r0, r0, #5
   d4dde:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d4de0:	2000      	movs	r0, #0
}
   d4de2:	bd08      	pop	{r3, pc}

000d4de4 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d4de4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d4de6:	2301      	movs	r3, #1
   d4de8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4dea:	4b05      	ldr	r3, [pc, #20]	; (d4e00 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d4dec:	4602      	mov	r2, r0
   d4dee:	f103 0110 	add.w	r1, r3, #16
   d4df2:	f853 4b04 	ldr.w	r4, [r3], #4
   d4df6:	f842 4b04 	str.w	r4, [r2], #4
   d4dfa:	428b      	cmp	r3, r1
   d4dfc:	d1f9      	bne.n	d4df2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d4dfe:	bd10      	pop	{r4, pc}
   d4e00:	000d867c 	.word	0x000d867c

000d4e04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e04:	b510      	push	{r4, lr}
    if (uuid128) {
   d4e06:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d4e08:	4604      	mov	r4, r0
    if (uuid128) {
   d4e0a:	b1b9      	cbz	r1, d4e3c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d4e0c:	2a01      	cmp	r2, #1
   d4e0e:	d109      	bne.n	d4e24 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d4e10:	4603      	mov	r3, r0
   d4e12:	f101 0210 	add.w	r2, r1, #16
   d4e16:	f851 0b04 	ldr.w	r0, [r1], #4
   d4e1a:	f843 0b04 	str.w	r0, [r3], #4
   d4e1e:	4291      	cmp	r1, r2
   d4e20:	d1f9      	bne.n	d4e16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d4e22:	e008      	b.n	d4e36 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d4e24:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d4e26:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d4e28:	5c98      	ldrb	r0, [r3, r2]
   d4e2a:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d4e2e:	3a01      	subs	r2, #1
   d4e30:	b2d2      	uxtb	r2, r2
   d4e32:	2aff      	cmp	r2, #255	; 0xff
   d4e34:	d1f8      	bne.n	d4e28 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d4e36:	2301      	movs	r3, #1
   d4e38:	6123      	str	r3, [r4, #16]
   d4e3a:	e002      	b.n	d4e42 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d4e3c:	2210      	movs	r2, #16
   d4e3e:	f003 f924 	bl	d808a <memset>
    }
}
   d4e42:	4620      	mov	r0, r4
   d4e44:	bd10      	pop	{r4, pc}

000d4e46 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d4e46:	b538      	push	{r3, r4, r5, lr}
   d4e48:	4605      	mov	r5, r0
   d4e4a:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d4e4c:	461a      	mov	r2, r3
   d4e4e:	f7ff ffd9 	bl	d4e04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d4e52:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d4e54:	0a24      	lsrs	r4, r4, #8
   d4e56:	736c      	strb	r4, [r5, #13]
}
   d4e58:	4628      	mov	r0, r5
   d4e5a:	bd38      	pop	{r3, r4, r5, pc}

000d4e5c <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d4e5c:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d4e5e:	6902      	ldr	r2, [r0, #16]
   d4e60:	b90a      	cbnz	r2, d4e66 <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d4e62:	8980      	ldrh	r0, [r0, #12]
   d4e64:	e003      	b.n	d4e6e <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4e66:	2210      	movs	r2, #16
   d4e68:	4903      	ldr	r1, [pc, #12]	; (d4e78 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d4e6a:	f003 f8d9 	bl	d8020 <memcmp>
   d4e6e:	3000      	adds	r0, #0
   d4e70:	bf18      	it	ne
   d4e72:	2001      	movne	r0, #1
    }
}
   d4e74:	bd08      	pop	{r3, pc}
   d4e76:	bf00      	nop
   d4e78:	000d867c 	.word	0x000d867c

000d4e7c <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d4e7c:	6900      	ldr	r0, [r0, #16]
   d4e7e:	4770      	bx	lr

000d4e80 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d4e80:	b538      	push	{r3, r4, r5, lr}
   d4e82:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d4e84:	2214      	movs	r2, #20
   d4e86:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d4e88:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d4e8a:	f003 f8fe 	bl	d808a <memset>
    if (type_ == BleUuidType::SHORT) {
   d4e8e:	6923      	ldr	r3, [r4, #16]
   d4e90:	b92b      	cbnz	r3, d4e9e <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d4e92:	7b62      	ldrb	r2, [r4, #13]
   d4e94:	7b23      	ldrb	r3, [r4, #12]
   d4e96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4e9a:	802b      	strh	r3, [r5, #0]
   d4e9c:	e00a      	b.n	d4eb4 <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d4e9e:	2301      	movs	r3, #1
   d4ea0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4ea2:	f104 0210 	add.w	r2, r4, #16
   d4ea6:	462b      	mov	r3, r5
   d4ea8:	f854 1b04 	ldr.w	r1, [r4], #4
   d4eac:	f843 1b04 	str.w	r1, [r3], #4
   d4eb0:	4294      	cmp	r4, r2
   d4eb2:	d1f9      	bne.n	d4ea8 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d4eb4:	4628      	mov	r0, r5
   d4eb6:	bd38      	pop	{r3, r4, r5, pc}

000d4eb8 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d4eb8:	7b42      	ldrb	r2, [r0, #13]
   d4eba:	7b00      	ldrb	r0, [r0, #12]
}
   d4ebc:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d4ec0:	4770      	bx	lr

000d4ec2 <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d4ec2:	4770      	bx	lr

000d4ec4 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d4ec4:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d4ec6:	690b      	ldr	r3, [r1, #16]
   d4ec8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d4eca:	f101 0210 	add.w	r2, r1, #16
   d4ece:	4603      	mov	r3, r0
   d4ed0:	f851 4b04 	ldr.w	r4, [r1], #4
   d4ed4:	f843 4b04 	str.w	r4, [r3], #4
   d4ed8:	4291      	cmp	r1, r2
   d4eda:	d1f9      	bne.n	d4ed0 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d4edc:	bd10      	pop	{r4, pc}

000d4ede <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d4ede:	b510      	push	{r4, lr}
   d4ee0:	b086      	sub	sp, #24
   d4ee2:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d4ee4:	2201      	movs	r2, #1
   d4ee6:	a801      	add	r0, sp, #4
   d4ee8:	f7ff ff8c 	bl	d4e04 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d4eec:	a901      	add	r1, sp, #4
   d4eee:	4620      	mov	r0, r4
   d4ef0:	f7ff ffe8 	bl	d4ec4 <_ZN8particle7BleUuidaSERKS0_>
}
   d4ef4:	b006      	add	sp, #24
   d4ef6:	bd10      	pop	{r4, pc}

000d4ef8 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d4ef8:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d4efa:	6902      	ldr	r2, [r0, #16]
   d4efc:	690b      	ldr	r3, [r1, #16]
   d4efe:	429a      	cmp	r2, r3
   d4f00:	d106      	bne.n	d4f10 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d4f02:	2210      	movs	r2, #16
   d4f04:	f003 f88c 	bl	d8020 <memcmp>
   d4f08:	fab0 f080 	clz	r0, r0
   d4f0c:	0940      	lsrs	r0, r0, #5
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	2000      	movs	r0, #0
}
   d4f12:	bd08      	pop	{r3, pc}

000d4f14 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d4f14:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4f16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d4f18:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4f1a:	4b31      	ldr	r3, [pc, #196]	; (d4fe0 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d4f1c:	460e      	mov	r6, r1
   d4f1e:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d4f20:	4602      	mov	r2, r0
   d4f22:	f103 0110 	add.w	r1, r3, #16
   d4f26:	f853 0b04 	ldr.w	r0, [r3], #4
   d4f2a:	f842 0b04 	str.w	r0, [r2], #4
   d4f2e:	428b      	cmp	r3, r1
   d4f30:	d1f9      	bne.n	d4f26 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d4f32:	2e00      	cmp	r6, #0
   d4f34:	d051      	beq.n	d4fda <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d4f36:	2124      	movs	r1, #36	; 0x24
   d4f38:	4630      	mov	r0, r6
   d4f3a:	f003 f916 	bl	d816a <strnlen>
   d4f3e:	2804      	cmp	r0, #4
   d4f40:	d010      	beq.n	d4f64 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d4f42:	2700      	movs	r7, #0
   d4f44:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4f46:	2124      	movs	r1, #36	; 0x24
   d4f48:	4630      	mov	r0, r6
   d4f4a:	f003 f90e 	bl	d816a <strnlen>
   d4f4e:	42b8      	cmp	r0, r7
   d4f50:	d901      	bls.n	d4f56 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d4f52:	bb44      	cbnz	r4, d4fa6 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d4f54:	e041      	b.n	d4fda <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d4f56:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d4f58:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d4f5a:	42a5      	cmp	r5, r4
   d4f5c:	d03d      	beq.n	d4fda <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d4f5e:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d4f62:	e7fa      	b.n	d4f5a <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4f64:	7830      	ldrb	r0, [r6, #0]
   d4f66:	f7ff feff 	bl	d4d68 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4f6a:	1e04      	subs	r4, r0, #0
   d4f6c:	db18      	blt.n	d4fa0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4f6e:	7870      	ldrb	r0, [r6, #1]
   d4f70:	f7ff fefa 	bl	d4d68 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4f74:	2800      	cmp	r0, #0
   d4f76:	db13      	blt.n	d4fa0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4f78:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d4f7c:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d4f80:	78b0      	ldrb	r0, [r6, #2]
   d4f82:	f7ff fef1 	bl	d4d68 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d4f86:	1e04      	subs	r4, r0, #0
   d4f88:	db0a      	blt.n	d4fa0 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d4f8a:	78f0      	ldrb	r0, [r6, #3]
   d4f8c:	f7ff feec 	bl	d4d68 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d4f90:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d4f92:	bfa1      	itttt	ge
   d4f94:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d4f98:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d4f9c:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d4f9e:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d4fa0:	2300      	movs	r3, #0
   d4fa2:	612b      	str	r3, [r5, #16]
   d4fa4:	e019      	b.n	d4fda <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d4fa6:	5df0      	ldrb	r0, [r6, r7]
   d4fa8:	f7ff fede 	bl	d4d68 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d4fac:	0603      	lsls	r3, r0, #24
   d4fae:	d412      	bmi.n	d4fd6 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d4fb0:	3c01      	subs	r4, #1
   d4fb2:	0100      	lsls	r0, r0, #4
   d4fb4:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d4fb6:	2124      	movs	r1, #36	; 0x24
   d4fb8:	4630      	mov	r0, r6
   d4fba:	f003 f8d6 	bl	d816a <strnlen>
   d4fbe:	3701      	adds	r7, #1
   d4fc0:	4287      	cmp	r7, r0
   d4fc2:	d208      	bcs.n	d4fd6 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d4fc4:	5df0      	ldrb	r0, [r6, r7]
   d4fc6:	f7ff fecf 	bl	d4d68 <_ZN8particle11hexToNibbleEc>
   d4fca:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d4fcc:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d4fce:	bfa2      	ittt	ge
   d4fd0:	5d2b      	ldrbge	r3, [r5, r4]
   d4fd2:	4318      	orrge	r0, r3
   d4fd4:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d4fd6:	3701      	adds	r7, #1
   d4fd8:	e7b5      	b.n	d4f46 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d4fda:	b003      	add	sp, #12
   d4fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fde:	bf00      	nop
   d4fe0:	000d867c 	.word	0x000d867c

000d4fe4 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d4fe4:	b538      	push	{r3, r4, r5, lr}
   d4fe6:	4604      	mov	r4, r0
   d4fe8:	460d      	mov	r5, r1
        : BleUuid() {
   d4fea:	f7ff fefb 	bl	d4de4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d4fee:	4620      	mov	r0, r4
   d4ff0:	4629      	mov	r1, r5
   d4ff2:	f7ff ff8f 	bl	d4f14 <_ZN8particle7BleUuid9constructEPKc>
}
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	bd38      	pop	{r3, r4, r5, pc}

000d4ffa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d4ffc:	b18b      	cbz	r3, d5022 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d4ffe:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5000:	1ce5      	adds	r5, r4, #3
   d5002:	428d      	cmp	r5, r1
   d5004:	d80f      	bhi.n	d5026 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5006:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5008:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d500a:	5d87      	ldrb	r7, [r0, r6]
   d500c:	4297      	cmp	r7, r2
   d500e:	d105      	bne.n	d501c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5010:	442e      	add	r6, r5
   d5012:	42b1      	cmp	r1, r6
   d5014:	d307      	bcc.n	d5026 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5016:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5018:	1c68      	adds	r0, r5, #1
                return adsLen;
   d501a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d501c:	3501      	adds	r5, #1
   d501e:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5020:	e7ee      	b.n	d5000 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5022:	4618      	mov	r0, r3
   d5024:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5026:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5028:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d502a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d502a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d502e:	4604      	mov	r4, r0
   d5030:	460e      	mov	r6, r1
   d5032:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5034:	4617      	mov	r7, r2
   d5036:	2a00      	cmp	r2, #0
   d5038:	d03a      	beq.n	d50b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d503a:	460a      	mov	r2, r1
   d503c:	ab01      	add	r3, sp, #4
   d503e:	6a01      	ldr	r1, [r0, #32]
   d5040:	f7ff ffdb 	bl	d4ffa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5044:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5048:	6a22      	ldr	r2, [r4, #32]
   d504a:	bb03      	cbnz	r3, d508e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d504c:	b1f8      	cbz	r0, d508e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d504e:	1c96      	adds	r6, r2, #2
   d5050:	442e      	add	r6, r5
   d5052:	1a36      	subs	r6, r6, r0
   d5054:	2e1f      	cmp	r6, #31
   d5056:	d82b      	bhi.n	d50b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5058:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d505c:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5060:	ebc8 0202 	rsb	r2, r8, r2
   d5064:	1a12      	subs	r2, r2, r0
   d5066:	eb00 0108 	add.w	r1, r0, r8
   d506a:	eb05 0009 	add.w	r0, r5, r9
   d506e:	b292      	uxth	r2, r2
   d5070:	4421      	add	r1, r4
   d5072:	4420      	add	r0, r4
   d5074:	f002 ffee 	bl	d8054 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5078:	1c6b      	adds	r3, r5, #1
   d507a:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d507e:	462a      	mov	r2, r5
   d5080:	4639      	mov	r1, r7
   d5082:	eb04 0009 	add.w	r0, r4, r9
   d5086:	f002 ffda 	bl	d803e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d508a:	6226      	str	r6, [r4, #32]
   d508c:	e010      	b.n	d50b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d508e:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5090:	182b      	adds	r3, r5, r0
   d5092:	2b1f      	cmp	r3, #31
   d5094:	d80c      	bhi.n	d50b0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5096:	1c6b      	adds	r3, r5, #1
   d5098:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d509a:	4422      	add	r2, r4
   d509c:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d509e:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d50a0:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d50a2:	4420      	add	r0, r4
   d50a4:	462a      	mov	r2, r5
   d50a6:	f002 ffca 	bl	d803e <memcpy>
        selfLen_ += len;
   d50aa:	6a22      	ldr	r2, [r4, #32]
   d50ac:	442a      	add	r2, r5
   d50ae:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d50b0:	6a20      	ldr	r0, [r4, #32]
}
   d50b2:	b003      	add	sp, #12
   d50b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50b8 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d50b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d50ba:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d50bc:	4603      	mov	r3, r0
   d50be:	f100 021f 	add.w	r2, r0, #31
   d50c2:	2000      	movs	r0, #0
   d50c4:	f803 0b01 	strb.w	r0, [r3], #1
   d50c8:	4293      	cmp	r3, r2
   d50ca:	f04f 0100 	mov.w	r1, #0
   d50ce:	d1f9      	bne.n	d50c4 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d50d0:	aa04      	add	r2, sp, #16
   d50d2:	2306      	movs	r3, #6
   d50d4:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d50d8:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d50da:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d50dc:	9100      	str	r1, [sp, #0]
   d50de:	4620      	mov	r0, r4
   d50e0:	4619      	mov	r1, r3
   d50e2:	f7ff ffa2 	bl	d502a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d50e6:	4620      	mov	r0, r4
   d50e8:	b004      	add	sp, #16
   d50ea:	bd10      	pop	{r4, pc}

000d50ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d50ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d50ee:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d50f0:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d50f2:	ab01      	add	r3, sp, #4
   d50f4:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d50f6:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d50f8:	f7ff ff7f 	bl	d4ffa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d50fc:	4605      	mov	r5, r0
   d50fe:	b178      	cbz	r0, d5120 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5100:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5102:	6a22      	ldr	r2, [r4, #32]
   d5104:	1829      	adds	r1, r5, r0
   d5106:	1a12      	subs	r2, r2, r0
   d5108:	1b52      	subs	r2, r2, r5
   d510a:	4421      	add	r1, r4
   d510c:	4420      	add	r0, r4
   d510e:	f002 ff96 	bl	d803e <memcpy>
        selfLen_ -= len;
   d5112:	6a23      	ldr	r3, [r4, #32]
   d5114:	1b5d      	subs	r5, r3, r5
   d5116:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d5118:	4631      	mov	r1, r6
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff ffe6 	bl	d50ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d5120:	b002      	add	sp, #8
   d5122:	bd70      	pop	{r4, r5, r6, pc}

000d5124 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5124:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5126:	2500      	movs	r5, #0
   d5128:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d512c:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d512e:	8043      	strh	r3, [r0, #2]
   d5130:	220e      	movs	r2, #14
   d5132:	4629      	mov	r1, r5
   d5134:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5136:	7105      	strb	r5, [r0, #4]
   d5138:	3006      	adds	r0, #6
   d513a:	f002 ffa6 	bl	d808a <memset>
   d513e:	f104 0014 	add.w	r0, r4, #20
   d5142:	f7ff fe4f 	bl	d4de4 <_ZN8particle7BleUuidC1Ev>
   d5146:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d514a:	f7ff fe4b 	bl	d4de4 <_ZN8particle7BleUuidC1Ev>
   d514e:	4904      	ldr	r1, [pc, #16]	; (d5160 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5150:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5154:	f7ff fd83 	bl	d4c5e <_ZN6StringC1EPK19__FlashStringHelper>
   d5158:	64e5      	str	r5, [r4, #76]	; 0x4c
   d515a:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d515c:	4620      	mov	r0, r4
   d515e:	bd38      	pop	{r3, r4, r5, pc}
   d5160:	000d8763 	.word	0x000d8763

000d5164 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5164:	b510      	push	{r4, lr}
   d5166:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5168:	69c2      	ldr	r2, [r0, #28]
   d516a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d516e:	4293      	cmp	r3, r2
   d5170:	4618      	mov	r0, r3
   d5172:	d006      	beq.n	d5182 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5174:	6804      	ldr	r4, [r0, #0]
   d5176:	8824      	ldrh	r4, [r4, #0]
   d5178:	428c      	cmp	r4, r1
   d517a:	f103 0308 	add.w	r3, r3, #8
   d517e:	d1f6      	bne.n	d516e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5180:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5182:	2000      	movs	r0, #0
    }
   d5184:	bd10      	pop	{r4, pc}
	...

000d5188 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5188:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d518c:	4680      	mov	r8, r0
   d518e:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5190:	460e      	mov	r6, r1
   d5192:	b369      	cbz	r1, d51f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5194:	b362      	cbz	r2, d51f0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5196:	2af4      	cmp	r2, #244	; 0xf4
   d5198:	6805      	ldr	r5, [r0, #0]
   d519a:	bf28      	it	cs
   d519c:	22f4      	movcs	r2, #244	; 0xf4
   d519e:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d51a0:	782a      	ldrb	r2, [r5, #0]
   d51a2:	b1a2      	cbz	r2, d51ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d51a4:	792b      	ldrb	r3, [r5, #4]
   d51a6:	0798      	lsls	r0, r3, #30
   d51a8:	d507      	bpl.n	d51ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d51aa:	2300      	movs	r3, #0
   d51ac:	4622      	mov	r2, r4
   d51ae:	89a8      	ldrh	r0, [r5, #12]
   d51b0:	f7ff fac4 	bl	d473c <hal_ble_gatt_server_set_characteristic_value>
   d51b4:	2800      	cmp	r0, #0
   d51b6:	da02      	bge.n	d51be <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d51b8:	e043      	b.n	d5242 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d51ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d51be:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d51c2:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d51c4:	06da      	lsls	r2, r3, #27
   d51c6:	d518      	bpl.n	d51fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d51c8:	2f01      	cmp	r7, #1
   d51ca:	d123      	bne.n	d5214 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d51cc:	e015      	b.n	d51fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d51ce:	8868      	ldrh	r0, [r5, #2]
   d51d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d51d4:	4298      	cmp	r0, r3
   d51d6:	d00d      	beq.n	d51f4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d51d8:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d51da:	0759      	lsls	r1, r3, #29
   d51dc:	d523      	bpl.n	d5226 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d51de:	2f01      	cmp	r7, #1
   d51e0:	d021      	beq.n	d5226 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d51e2:	89a9      	ldrh	r1, [r5, #12]
   d51e4:	9200      	str	r2, [sp, #0]
   d51e6:	4623      	mov	r3, r4
   d51e8:	4632      	mov	r2, r6
   d51ea:	f7ff fabb 	bl	d4764 <hal_ble_gatt_client_write_without_response>
   d51ee:	e028      	b.n	d5242 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d51f0:	4815      	ldr	r0, [pc, #84]	; (d5248 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d51f2:	e026      	b.n	d5242 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d51f4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d51f8:	e023      	b.n	d5242 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d51fa:	069a      	lsls	r2, r3, #26
   d51fc:	d521      	bpl.n	d5242 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d51fe:	2f02      	cmp	r7, #2
   d5200:	d01f      	beq.n	d5242 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5202:	89a8      	ldrh	r0, [r5, #12]
   d5204:	2300      	movs	r3, #0
   d5206:	4622      	mov	r2, r4
   d5208:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d520a:	b002      	add	sp, #8
   d520c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5210:	f7ff bad0 	b.w	d47b4 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5214:	89a8      	ldrh	r0, [r5, #12]
   d5216:	2300      	movs	r3, #0
   d5218:	4622      	mov	r2, r4
   d521a:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d521c:	b002      	add	sp, #8
   d521e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5222:	f7ff babd 	b.w	d47a0 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5226:	071b      	lsls	r3, r3, #28
   d5228:	d501      	bpl.n	d522e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d522a:	2f02      	cmp	r7, #2
   d522c:	d102      	bne.n	d5234 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d522e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5232:	e006      	b.n	d5242 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5234:	2300      	movs	r3, #0
   d5236:	89a9      	ldrh	r1, [r5, #12]
   d5238:	9300      	str	r3, [sp, #0]
   d523a:	4632      	mov	r2, r6
   d523c:	4623      	mov	r3, r4
   d523e:	f7ff fa87 	bl	d4750 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5242:	b002      	add	sp, #8
   d5244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5248:	fffffef2 	.word	0xfffffef2

000d524c <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d524c:	b510      	push	{r4, lr}
    return impl()->address();
   d524e:	680a      	ldr	r2, [r1, #0]
   d5250:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5254:	6003      	str	r3, [r0, #0]
   d5256:	6853      	ldr	r3, [r2, #4]
   d5258:	6043      	str	r3, [r0, #4]
}
   d525a:	bd10      	pop	{r4, pc}

000d525c <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d525c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d525e:	6802      	ldr	r2, [r0, #0]
   d5260:	680b      	ldr	r3, [r1, #0]
   d5262:	8812      	ldrh	r2, [r2, #0]
   d5264:	881b      	ldrh	r3, [r3, #0]
   d5266:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5268:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d526a:	d10c      	bne.n	d5286 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d526c:	4601      	mov	r1, r0
   d526e:	4668      	mov	r0, sp
   d5270:	f7ff ffec 	bl	d524c <_ZNK8particle13BlePeerDevice7addressEv>
   d5274:	4621      	mov	r1, r4
   d5276:	a802      	add	r0, sp, #8
   d5278:	f7ff ffe8 	bl	d524c <_ZNK8particle13BlePeerDevice7addressEv>
   d527c:	a902      	add	r1, sp, #8
   d527e:	4668      	mov	r0, sp
   d5280:	f7ff fda2 	bl	d4dc8 <_ZNK8particle10BleAddresseqERKS0_>
   d5284:	b900      	cbnz	r0, d5288 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5286:	2000      	movs	r0, #0
}
   d5288:	b004      	add	sp, #16
   d528a:	bd10      	pop	{r4, pc}

000d528c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d528c:	b510      	push	{r4, lr}
   d528e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5290:	2034      	movs	r0, #52	; 0x34
   d5292:	f7fe ff00 	bl	d4096 <_Znwj>
   d5296:	4601      	mov	r1, r0
   d5298:	b168      	cbz	r0, d52b6 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d529a:	2300      	movs	r3, #0
   d529c:	6003      	str	r3, [r0, #0]
   d529e:	6043      	str	r3, [r0, #4]
   d52a0:	6083      	str	r3, [r0, #8]
   d52a2:	60c3      	str	r3, [r0, #12]
   d52a4:	6103      	str	r3, [r0, #16]
   d52a6:	6143      	str	r3, [r0, #20]
   d52a8:	6183      	str	r3, [r0, #24]
   d52aa:	61c3      	str	r3, [r0, #28]
   d52ac:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d52ae:	6243      	str	r3, [r0, #36]	; 0x24
   d52b0:	6283      	str	r3, [r0, #40]	; 0x28
   d52b2:	62c3      	str	r3, [r0, #44]	; 0x2c
   d52b4:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d52b6:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d52b8:	b919      	cbnz	r1, d52c2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d52ba:	4a0a      	ldr	r2, [pc, #40]	; (d52e4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d52bc:	200a      	movs	r0, #10
   d52be:	f7ff fb4b 	bl	d4958 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d52c2:	2000      	movs	r0, #0
   d52c4:	f7ff fa06 	bl	d46d4 <hal_ble_stack_init>
   d52c8:	b120      	cbz	r0, d52d4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d52ca:	4a06      	ldr	r2, [pc, #24]	; (d52e4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d52cc:	2100      	movs	r1, #0
   d52ce:	200a      	movs	r0, #10
   d52d0:	f7ff fb42 	bl	d4958 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d52d4:	2200      	movs	r2, #0
   d52d6:	6821      	ldr	r1, [r4, #0]
   d52d8:	4803      	ldr	r0, [pc, #12]	; (d52e8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d52da:	f7ff fa57 	bl	d478c <hal_ble_set_callback_on_periph_link_events>
}
   d52de:	4620      	mov	r0, r4
   d52e0:	bd10      	pop	{r4, pc}
   d52e2:	bf00      	nop
   d52e4:	000d46b5 	.word	0x000d46b5
   d52e8:	000d570d 	.word	0x000d570d

000d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d52ec:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d52ee:	4c0a      	ldr	r4, [pc, #40]	; (d5318 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d52f0:	6823      	ldr	r3, [r4, #0]
   d52f2:	07db      	lsls	r3, r3, #31
   d52f4:	d40e      	bmi.n	d5314 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d52f6:	4620      	mov	r0, r4
   d52f8:	f7fe fede 	bl	d40b8 <__cxa_guard_acquire>
   d52fc:	b150      	cbz	r0, d5314 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d52fe:	4807      	ldr	r0, [pc, #28]	; (d531c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5300:	f7ff ffc4 	bl	d528c <_ZN8particle14BleLocalDeviceC1Ev>
   d5304:	4620      	mov	r0, r4
   d5306:	f7fe fedc 	bl	d40c2 <__cxa_guard_release>
   d530a:	4a05      	ldr	r2, [pc, #20]	; (d5320 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d530c:	4905      	ldr	r1, [pc, #20]	; (d5324 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d530e:	4803      	ldr	r0, [pc, #12]	; (d531c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5310:	f002 fb59 	bl	d79c6 <__aeabi_atexit>
    return instance;
}
   d5314:	4801      	ldr	r0, [pc, #4]	; (d531c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5316:	bd10      	pop	{r4, pc}
   d5318:	2003e3d0 	.word	0x2003e3d0
   d531c:	2003e3cc 	.word	0x2003e3cc
   d5320:	2003e338 	.word	0x2003e338
   d5324:	000d54f7 	.word	0x000d54f7

000d5328 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5328:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d532a:	6803      	ldr	r3, [r0, #0]
   d532c:	3b09      	subs	r3, #9
   d532e:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5330:	b08a      	sub	sp, #40	; 0x28
   d5332:	4604      	mov	r4, r0
   d5334:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5336:	d819      	bhi.n	d536c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5338:	f7ff ffd8 	bl	d52ec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d533c:	88a1      	ldrh	r1, [r4, #4]
   d533e:	6800      	ldr	r0, [r0, #0]
   d5340:	f7ff ff10 	bl	d5164 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5344:	4602      	mov	r2, r0
   d5346:	b958      	cbnz	r0, d5360 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5348:	2320      	movs	r3, #32
   d534a:	9302      	str	r3, [sp, #8]
   d534c:	4b08      	ldr	r3, [pc, #32]	; (d5370 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d534e:	9003      	str	r0, [sp, #12]
   d5350:	9300      	str	r3, [sp, #0]
   d5352:	aa02      	add	r2, sp, #8
   d5354:	4603      	mov	r3, r0
   d5356:	4907      	ldr	r1, [pc, #28]	; (d5374 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5358:	2032      	movs	r0, #50	; 0x32
   d535a:	f7ff fb05 	bl	d4968 <log_message>
   d535e:	e005      	b.n	d536c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5360:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5362:	b11d      	cbz	r5, d536c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5364:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5366:	68e1      	ldr	r1, [r4, #12]
   d5368:	6920      	ldr	r0, [r4, #16]
   d536a:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d536c:	b00a      	add	sp, #40	; 0x28
   d536e:	bd70      	pop	{r4, r5, r6, pc}
   d5370:	000d8526 	.word	0x000d8526
   d5374:	000d84dc 	.word	0x000d84dc

000d5378 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5378:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d537a:	a801      	add	r0, sp, #4
   d537c:	f7ff fd0a 	bl	d4d94 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5380:	2000      	movs	r0, #0
   d5382:	f7ff f9a7 	bl	d46d4 <hal_ble_stack_init>
   d5386:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d5388:	a801      	add	r0, sp, #4
   d538a:	f7ff fd11 	bl	d4db0 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d538e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d5392:	b002      	add	sp, #8
   d5394:	bd10      	pop	{r4, pc}

000d5396 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5396:	4608      	mov	r0, r1
   d5398:	b909      	cbnz	r1, d539e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d539a:	460a      	mov	r2, r1
   d539c:	e001      	b.n	d53a2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d539e:	6a09      	ldr	r1, [r1, #32]
   d53a0:	2200      	movs	r2, #0
   d53a2:	f7ff b99f 	b.w	d46e4 <hal_ble_gap_set_advertising_data>

000d53a6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d53a6:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d53a8:	460c      	mov	r4, r1
   d53aa:	b911      	cbnz	r1, d53b2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d53ac:	460a      	mov	r2, r1
   d53ae:	4608      	mov	r0, r1
   d53b0:	e006      	b.n	d53c0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d53b2:	2101      	movs	r1, #1
   d53b4:	4620      	mov	r0, r4
   d53b6:	f7ff fe99 	bl	d50ec <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d53ba:	6a21      	ldr	r1, [r4, #32]
   d53bc:	2200      	movs	r2, #0
   d53be:	4620      	mov	r0, r4
    }
}
   d53c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d53c4:	f7ff b996 	b.w	d46f4 <hal_ble_gap_set_scan_response_data>

000d53c8 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d53c8:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d53ca:	a801      	add	r0, sp, #4
   d53cc:	f7ff fce2 	bl	d4d94 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d53d0:	2000      	movs	r0, #0
   d53d2:	f7ff f997 	bl	d4704 <hal_ble_gap_start_advertising>
   d53d6:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d53d8:	a801      	add	r0, sp, #4
   d53da:	f7ff fce9 	bl	d4db0 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d53de:	4620      	mov	r0, r4
   d53e0:	b002      	add	sp, #8
   d53e2:	bd10      	pop	{r4, pc}

000d53e4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d53e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d53e6:	4605      	mov	r5, r0
   d53e8:	460c      	mov	r4, r1
    WiringBleLock lk;
   d53ea:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d53ec:	4616      	mov	r6, r2
    WiringBleLock lk;
   d53ee:	f7ff fcd1 	bl	d4d94 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d53f2:	4621      	mov	r1, r4
   d53f4:	4628      	mov	r0, r5
   d53f6:	f7ff ffce 	bl	d5396 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d53fa:	2800      	cmp	r0, #0
   d53fc:	db08      	blt.n	d5410 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d53fe:	4631      	mov	r1, r6
   d5400:	4628      	mov	r0, r5
   d5402:	f7ff ffd0 	bl	d53a6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5406:	2800      	cmp	r0, #0
   d5408:	db02      	blt.n	d5410 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d540a:	4628      	mov	r0, r5
   d540c:	f7ff ffdc 	bl	d53c8 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5410:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d5412:	a801      	add	r0, sp, #4
   d5414:	f7ff fccc 	bl	d4db0 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d5418:	4620      	mov	r0, r4
   d541a:	b002      	add	sp, #8
   d541c:	bd70      	pop	{r4, r5, r6, pc}

000d541e <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.slave_latency = latency;
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
   d541e:	6803      	ldr	r3, [r0, #0]
    return (impl()->peers().size() > 0);
   d5420:	69d8      	ldr	r0, [r3, #28]
}
   d5422:	2800      	cmp	r0, #0
   d5424:	bfd4      	ite	le
   d5426:	2000      	movle	r0, #0
   d5428:	2001      	movgt	r0, #1
   d542a:	4770      	bx	lr

000d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d542c:	680b      	ldr	r3, [r1, #0]
   d542e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5430:	b113      	cbz	r3, d5438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5432:	685a      	ldr	r2, [r3, #4]
   d5434:	3201      	adds	r2, #1
   d5436:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5438:	4770      	bx	lr

000d543a <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d543a:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d543c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5440:	4604      	mov	r4, r0
   d5442:	f840 3b04 	str.w	r3, [r0], #4
   d5446:	f7ff fff1 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d544a:	6823      	ldr	r3, [r4, #0]
   d544c:	b90b      	cbnz	r3, d5452 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d544e:	f7ff fc71 	bl	d4d34 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5452:	4620      	mov	r0, r4
   d5454:	bd10      	pop	{r4, pc}

000d5456 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5456:	b510      	push	{r4, lr}
   d5458:	f851 3b04 	ldr.w	r3, [r1], #4
   d545c:	4604      	mov	r4, r0
   d545e:	f840 3b04 	str.w	r3, [r0], #4
   d5462:	f7ff ffe3 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5466:	4620      	mov	r0, r4
   d5468:	bd10      	pop	{r4, pc}

000d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d546a:	b510      	push	{r4, lr}
   d546c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d546e:	6800      	ldr	r0, [r0, #0]
   d5470:	b128      	cbz	r0, d547e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5472:	6843      	ldr	r3, [r0, #4]
   d5474:	3b01      	subs	r3, #1
   d5476:	6043      	str	r3, [r0, #4]
   d5478:	b90b      	cbnz	r3, d547e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d547a:	f7ff fc65 	bl	d4d48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d547e:	4620      	mov	r0, r4
   d5480:	bd10      	pop	{r4, pc}

000d5482 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5482:	b510      	push	{r4, lr}
   d5484:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5486:	3004      	adds	r0, #4
   d5488:	f7ff ffef 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d548c:	4620      	mov	r0, r4
   d548e:	bd10      	pop	{r4, pc}

000d5490 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5490:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5492:	6804      	ldr	r4, [r0, #0]
   d5494:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5496:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5498:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d549c:	42a6      	cmp	r6, r4
   d549e:	d004      	beq.n	d54aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d54a0:	1d20      	adds	r0, r4, #4
   d54a2:	f7ff ffe2 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54a6:	3408      	adds	r4, #8
   d54a8:	e7f8      	b.n	d549c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d54aa:	6828      	ldr	r0, [r5, #0]
   d54ac:	f7ff fb00 	bl	d4ab0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d54b0:	4628      	mov	r0, r5
   d54b2:	bd70      	pop	{r4, r5, r6, pc}

000d54b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d54b4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d54b6:	6804      	ldr	r4, [r0, #0]
   d54b8:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d54ba:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d54bc:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d54c0:	42a6      	cmp	r6, r4
   d54c2:	d004      	beq.n	d54ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d54c4:	1d20      	adds	r0, r4, #4
   d54c6:	f7ff ffd0 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d54ca:	3408      	adds	r4, #8
   d54cc:	e7f8      	b.n	d54c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d54ce:	6828      	ldr	r0, [r5, #0]
   d54d0:	f7ff faee 	bl	d4ab0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d54d4:	4628      	mov	r0, r5
   d54d6:	bd70      	pop	{r4, r5, r6, pc}

000d54d8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d54d8:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d54da:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d54dc:	f104 0018 	add.w	r0, r4, #24
   d54e0:	f7ff ffe8 	bl	d54b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d54e4:	f104 000c 	add.w	r0, r4, #12
   d54e8:	f7ff ffd2 	bl	d5490 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d54ec:	4620      	mov	r0, r4
   d54ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d54f2:	f7fe bdd2 	b.w	d409a <_ZdlPv>

000d54f6 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d54f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d54f8:	6804      	ldr	r4, [r0, #0]
   d54fa:	4607      	mov	r7, r0
   d54fc:	b1c4      	cbz	r4, d5530 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d54fe:	69a5      	ldr	r5, [r4, #24]
   d5500:	69e3      	ldr	r3, [r4, #28]
   d5502:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5506:	42ae      	cmp	r6, r5
   d5508:	d004      	beq.n	d5514 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d550a:	1d28      	adds	r0, r5, #4
   d550c:	f7ff ffad 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5510:	3508      	adds	r5, #8
   d5512:	e7f8      	b.n	d5506 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5514:	69a0      	ldr	r0, [r4, #24]
   d5516:	f7ff facb 	bl	d4ab0 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d551a:	f104 000c 	add.w	r0, r4, #12
   d551e:	f7ff ffc9 	bl	d54b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5522:	4620      	mov	r0, r4
   d5524:	f7ff ffb4 	bl	d5490 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5528:	2134      	movs	r1, #52	; 0x34
   d552a:	4620      	mov	r0, r4
   d552c:	f002 fa58 	bl	d79e0 <_ZdlPvj>
   d5530:	4638      	mov	r0, r7
   d5532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5534 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5534:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5536:	2500      	movs	r5, #0
   d5538:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d553a:	6045      	str	r5, [r0, #4]
   d553c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d553e:	2024      	movs	r0, #36	; 0x24
   d5540:	f7fe fda9 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5544:	4604      	mov	r4, r0
   d5546:	b178      	cbz	r0, d5568 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5548:	4603      	mov	r3, r0
   d554a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d554e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5552:	f8c0 5002 	str.w	r5, [r0, #2]
   d5556:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5558:	7285      	strb	r5, [r0, #10]
   d555a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d555c:	60c5      	str	r5, [r0, #12]
   d555e:	6105      	str	r5, [r0, #16]
   d5560:	6145      	str	r5, [r0, #20]
   d5562:	6185      	str	r5, [r0, #24]
   d5564:	61c5      	str	r5, [r0, #28]
   d5566:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5568:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d556a:	2014      	movs	r0, #20
   d556c:	9301      	str	r3, [sp, #4]
   d556e:	f7fe fd92 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5572:	4603      	mov	r3, r0
   d5574:	b128      	cbz	r0, d5582 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5576:	2201      	movs	r2, #1
   d5578:	6042      	str	r2, [r0, #4]
   d557a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d557c:	4a08      	ldr	r2, [pc, #32]	; (d55a0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d557e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5580:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5582:	a802      	add	r0, sp, #8
   d5584:	6872      	ldr	r2, [r6, #4]
   d5586:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d558a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d558c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d558e:	f7ff ff6c 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5592:	6833      	ldr	r3, [r6, #0]
   d5594:	b90b      	cbnz	r3, d559a <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5596:	f7ff fbcd 	bl	d4d34 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d559a:	4630      	mov	r0, r6
   d559c:	b002      	add	sp, #8
   d559e:	bd70      	pop	{r4, r5, r6, pc}
   d55a0:	000d84b8 	.word	0x000d84b8

000d55a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d55a4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d55a6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d55a8:	6803      	ldr	r3, [r0, #0]
   d55aa:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d55ac:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d55ae:	d00c      	beq.n	d55ca <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d55b0:	b114      	cbz	r4, d55b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d55b2:	6863      	ldr	r3, [r4, #4]
   d55b4:	3301      	adds	r3, #1
   d55b6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d55b8:	6828      	ldr	r0, [r5, #0]
   d55ba:	b128      	cbz	r0, d55c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d55bc:	6843      	ldr	r3, [r0, #4]
   d55be:	3b01      	subs	r3, #1
   d55c0:	6043      	str	r3, [r0, #4]
   d55c2:	b90b      	cbnz	r3, d55c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d55c4:	f7ff fbc0 	bl	d4d48 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d55c8:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d55ca:	4628      	mov	r0, r5
   d55cc:	bd38      	pop	{r3, r4, r5, pc}

000d55ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d55ce:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d55d0:	b570      	push	{r4, r5, r6, lr}
   d55d2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d55d4:	d91a      	bls.n	d560c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d55d6:	4290      	cmp	r0, r2
   d55d8:	d219      	bcs.n	d560e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d55da:	f1a1 0608 	sub.w	r6, r1, #8
   d55de:	1a51      	subs	r1, r2, r1
   d55e0:	3904      	subs	r1, #4
   d55e2:	1f15      	subs	r5, r2, #4
   d55e4:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d55e6:	1f2b      	subs	r3, r5, #4
   d55e8:	429e      	cmp	r6, r3
   d55ea:	d025      	beq.n	d5638 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d55ec:	2c04      	cmp	r4, #4
   d55ee:	d007      	beq.n	d5600 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d55f0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d55f4:	f844 3c04 	str.w	r3, [r4, #-4]
   d55f8:	4629      	mov	r1, r5
   d55fa:	4620      	mov	r0, r4
   d55fc:	f7ff ff16 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5600:	4628      	mov	r0, r5
   d5602:	f7ff ff32 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5606:	3d08      	subs	r5, #8
   d5608:	3c08      	subs	r4, #8
   d560a:	e7ec      	b.n	d55e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d560c:	d014      	beq.n	d5638 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d560e:	1d0c      	adds	r4, r1, #4
   d5610:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5612:	1f23      	subs	r3, r4, #4
   d5614:	429d      	cmp	r5, r3
   d5616:	d00f      	beq.n	d5638 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5618:	2e04      	cmp	r6, #4
   d561a:	d007      	beq.n	d562c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d561c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5620:	f846 3c04 	str.w	r3, [r6, #-4]
   d5624:	4621      	mov	r1, r4
   d5626:	4630      	mov	r0, r6
   d5628:	f7ff ff00 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d562c:	4620      	mov	r0, r4
   d562e:	f7ff ff1c 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5632:	3408      	adds	r4, #8
   d5634:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5636:	e7ec      	b.n	d5612 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5638:	bd70      	pop	{r4, r5, r6, pc}

000d563a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d563a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d563e:	6804      	ldr	r4, [r0, #0]
   d5640:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5642:	4605      	mov	r5, r0
   d5644:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5646:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d564a:	42a7      	cmp	r7, r4
   d564c:	d018      	beq.n	d5680 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d564e:	4641      	mov	r1, r8
   d5650:	4620      	mov	r0, r4
   d5652:	f7ff fe03 	bl	d525c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5656:	4606      	mov	r6, r0
   d5658:	b908      	cbnz	r0, d565e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d565a:	3408      	adds	r4, #8
   d565c:	e7f5      	b.n	d564a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d565e:	b18c      	cbz	r4, d5684 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5660:	1d20      	adds	r0, r4, #4
   d5662:	f7ff ff02 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5666:	682b      	ldr	r3, [r5, #0]
   d5668:	686a      	ldr	r2, [r5, #4]
   d566a:	f104 0108 	add.w	r1, r4, #8
   d566e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5672:	4620      	mov	r0, r4
   d5674:	f7ff ffab 	bl	d55ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5678:	686b      	ldr	r3, [r5, #4]
   d567a:	3b01      	subs	r3, #1
   d567c:	606b      	str	r3, [r5, #4]
    return true;
   d567e:	e002      	b.n	d5686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5680:	2600      	movs	r6, #0
   d5682:	e000      	b.n	d5686 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5684:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5686:	4630      	mov	r0, r6
   d5688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d568c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d568c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d568e:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5690:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5694:	6847      	ldr	r7, [r0, #4]
   d5696:	9300      	str	r3, [sp, #0]
   d5698:	a801      	add	r0, sp, #4
   d569a:	f7ff fec7 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d569e:	6866      	ldr	r6, [r4, #4]
   d56a0:	68a3      	ldr	r3, [r4, #8]
   d56a2:	429e      	cmp	r6, r3
   d56a4:	db14      	blt.n	d56d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d56a6:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d56a8:	2e00      	cmp	r6, #0
   d56aa:	dd0b      	ble.n	d56c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d56ac:	00f0      	lsls	r0, r6, #3
   d56ae:	f7ff f9f7 	bl	d4aa0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d56b2:	4605      	mov	r5, r0
   d56b4:	b318      	cbz	r0, d56fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d56b6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d56ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d56be:	f7ff ff86 	bl	d55ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d56c2:	e000      	b.n	d56c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d56c4:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d56c6:	6820      	ldr	r0, [r4, #0]
   d56c8:	f7ff f9f2 	bl	d4ab0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d56cc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d56ce:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d56d0:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d56d2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d56d4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d56d8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d56dc:	4629      	mov	r1, r5
   d56de:	f105 0008 	add.w	r0, r5, #8
   d56e2:	f7ff ff74 	bl	d55ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d56e6:	b135      	cbz	r5, d56f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d56e8:	9b00      	ldr	r3, [sp, #0]
   d56ea:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d56ee:	a901      	add	r1, sp, #4
   d56f0:	1d28      	adds	r0, r5, #4
   d56f2:	f7ff fe9b 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d56f6:	6863      	ldr	r3, [r4, #4]
   d56f8:	3301      	adds	r3, #1
   d56fa:	6063      	str	r3, [r4, #4]
   d56fc:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d56fe:	a801      	add	r0, sp, #4
   d5700:	f7ff feb3 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5704:	4628      	mov	r0, r5
   d5706:	b003      	add	sp, #12
   d5708:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d570c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d570c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5710:	4604      	mov	r4, r0
   d5712:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5714:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5716:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5718:	f7ff fb3c 	bl	d4d94 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d571c:	6823      	ldr	r3, [r4, #0]
   d571e:	2b03      	cmp	r3, #3
   d5720:	d002      	beq.n	d5728 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5722:	2b04      	cmp	r3, #4
   d5724:	d042      	beq.n	d57ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5726:	e087      	b.n	d5838 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5728:	a804      	add	r0, sp, #16
   d572a:	f7ff ff03 	bl	d5534 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d572e:	9b04      	ldr	r3, [sp, #16]
   d5730:	8922      	ldrh	r2, [r4, #8]
   d5732:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5734:	6862      	ldr	r2, [r4, #4]
   d5736:	9904      	ldr	r1, [sp, #16]
   d5738:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d573c:	f8c1 3002 	str.w	r3, [r1, #2]
   d5740:	6853      	ldr	r3, [r2, #4]
   d5742:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5746:	a807      	add	r0, sp, #28
   d5748:	9b04      	ldr	r3, [sp, #16]
   d574a:	9306      	str	r3, [sp, #24]
   d574c:	a905      	add	r1, sp, #20
   d574e:	f7ff fe6d 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5752:	a906      	add	r1, sp, #24
   d5754:	f105 0018 	add.w	r0, r5, #24
   d5758:	f7ff ff98 	bl	d568c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d575c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d575e:	a807      	add	r0, sp, #28
   d5760:	f7ff fe83 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5764:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5766:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5768:	b974      	cbnz	r4, d5788 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d576a:	4b36      	ldr	r3, [pc, #216]	; (d5844 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d576c:	9300      	str	r3, [sp, #0]
   d576e:	aa06      	add	r2, sp, #24
   d5770:	4623      	mov	r3, r4
   d5772:	4935      	ldr	r1, [pc, #212]	; (d5848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5774:	9407      	str	r4, [sp, #28]
   d5776:	2032      	movs	r0, #50	; 0x32
   d5778:	f7ff f8f6 	bl	d4968 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d577c:	9b04      	ldr	r3, [sp, #16]
   d577e:	4621      	mov	r1, r4
   d5780:	8818      	ldrh	r0, [r3, #0]
   d5782:	f7fe ffc7 	bl	d4714 <hal_ble_gap_disconnect>
   d5786:	e00d      	b.n	d57a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5788:	4a30      	ldr	r2, [pc, #192]	; (d584c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d578a:	9200      	str	r2, [sp, #0]
   d578c:	2300      	movs	r3, #0
   d578e:	aa06      	add	r2, sp, #24
   d5790:	492d      	ldr	r1, [pc, #180]	; (d5848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5792:	9307      	str	r3, [sp, #28]
   d5794:	2001      	movs	r0, #1
   d5796:	f7ff f8e7 	bl	d4968 <log_message>
                if (impl->connectedCb_) {
   d579a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d579c:	b113      	cbz	r3, d57a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d579e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d57a0:	a804      	add	r0, sp, #16
   d57a2:	4798      	blx	r3
   d57a4:	a805      	add	r0, sp, #20
   d57a6:	f7ff fe60 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57aa:	e045      	b.n	d5838 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d57ac:	8921      	ldrh	r1, [r4, #8]
   d57ae:	4628      	mov	r0, r5
   d57b0:	f7ff fcd8 	bl	d5164 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d57b4:	4607      	mov	r7, r0
   d57b6:	2800      	cmp	r0, #0
   d57b8:	d03e      	beq.n	d5838 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d57ba:	6804      	ldr	r4, [r0, #0]
   d57bc:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d57be:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d57c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d57c4:	8022      	strh	r2, [r4, #0]
   d57c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d57ca:	4299      	cmp	r1, r3
   d57cc:	d003      	beq.n	d57d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d57ce:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d57d2:	8042      	strh	r2, [r0, #2]
   d57d4:	e7f9      	b.n	d57ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d57d6:	68e6      	ldr	r6, [r4, #12]
   d57d8:	6923      	ldr	r3, [r4, #16]
   d57da:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d57de:	45b0      	cmp	r8, r6
   d57e0:	d004      	beq.n	d57ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d57e2:	1d30      	adds	r0, r6, #4
   d57e4:	f7ff fe41 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d57e8:	3608      	adds	r6, #8
   d57ea:	e7f8      	b.n	d57de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d57ec:	2300      	movs	r3, #0
   d57ee:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d57f0:	69a6      	ldr	r6, [r4, #24]
   d57f2:	69e3      	ldr	r3, [r4, #28]
   d57f4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d57f8:	45b0      	cmp	r8, r6
   d57fa:	d004      	beq.n	d5806 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d57fc:	1d30      	adds	r0, r6, #4
   d57fe:	f7ff fe34 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5802:	3608      	adds	r6, #8
   d5804:	e7f8      	b.n	d57f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5806:	2300      	movs	r3, #0
   d5808:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d580a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d580c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d580e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5810:	b113      	cbz	r3, d5818 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5812:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5814:	4638      	mov	r0, r7
   d5816:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5818:	2320      	movs	r3, #32
   d581a:	4a0d      	ldr	r2, [pc, #52]	; (d5850 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d581c:	9306      	str	r3, [sp, #24]
   d581e:	9200      	str	r2, [sp, #0]
   d5820:	2300      	movs	r3, #0
   d5822:	4909      	ldr	r1, [pc, #36]	; (d5848 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5824:	9307      	str	r3, [sp, #28]
   d5826:	2001      	movs	r0, #1
   d5828:	aa06      	add	r2, sp, #24
   d582a:	f7ff f89d 	bl	d4968 <log_message>
                    impl->peers_.removeOne(*peer);
   d582e:	4639      	mov	r1, r7
   d5830:	f105 0018 	add.w	r0, r5, #24
   d5834:	f7ff ff01 	bl	d563a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5838:	a803      	add	r0, sp, #12
   d583a:	f7ff fab9 	bl	d4db0 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d583e:	b00e      	add	sp, #56	; 0x38
   d5840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5844:	000d853e 	.word	0x000d853e
   d5848:	000d84dc 	.word	0x000d84dc
   d584c:	000d8564 	.word	0x000d8564
   d5850:	000d8581 	.word	0x000d8581

000d5854 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5854:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5858:	4606      	mov	r6, r0
   d585a:	460c      	mov	r4, r1
   d585c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d585e:	d914      	bls.n	d588a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5860:	4290      	cmp	r0, r2
   d5862:	d213      	bcs.n	d588c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5864:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5868:	1a6c      	subs	r4, r5, r1
   d586a:	f1a1 0708 	sub.w	r7, r1, #8
   d586e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5870:	42af      	cmp	r7, r5
   d5872:	d018      	beq.n	d58a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5874:	b11c      	cbz	r4, d587e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5876:	4629      	mov	r1, r5
   d5878:	4620      	mov	r0, r4
   d587a:	f7ff fdec 	bl	d5456 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d587e:	1d28      	adds	r0, r5, #4
   d5880:	f7ff fdf3 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5884:	3d08      	subs	r5, #8
   d5886:	3c08      	subs	r4, #8
   d5888:	e7f2      	b.n	d5870 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d588a:	d00c      	beq.n	d58a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d588c:	42ac      	cmp	r4, r5
   d588e:	d00a      	beq.n	d58a6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5890:	b11e      	cbz	r6, d589a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5892:	4621      	mov	r1, r4
   d5894:	4630      	mov	r0, r6
   d5896:	f7ff fdde 	bl	d5456 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d589a:	1d20      	adds	r0, r4, #4
   d589c:	f7ff fde5 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d58a0:	3408      	adds	r4, #8
   d58a2:	3608      	adds	r6, #8
   d58a4:	e7f2      	b.n	d588c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d58a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d58a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d58a8:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d58aa:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d58ac:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d58ae:	dd0b      	ble.n	d58c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d58b0:	00f0      	lsls	r0, r6, #3
   d58b2:	f7ff f8f5 	bl	d4aa0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d58b6:	4604      	mov	r4, r0
   d58b8:	b170      	cbz	r0, d58d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d58ba:	e895 0006 	ldmia.w	r5, {r1, r2}
   d58be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d58c2:	f7ff ffc7 	bl	d5854 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d58c6:	e000      	b.n	d58ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d58c8:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d58ca:	6828      	ldr	r0, [r5, #0]
   d58cc:	f7ff f8f0 	bl	d4ab0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d58d0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d58d2:	60ae      	str	r6, [r5, #8]
        return true;
   d58d4:	2001      	movs	r0, #1
   d58d6:	bd70      	pop	{r4, r5, r6, pc}
    }
   d58d8:	bd70      	pop	{r4, r5, r6, pc}

000d58da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d58da:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d58dc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d58de:	6845      	ldr	r5, [r0, #4]
   d58e0:	4668      	mov	r0, sp
   d58e2:	f7ff fdb8 	bl	d5456 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d58e6:	6861      	ldr	r1, [r4, #4]
   d58e8:	68a3      	ldr	r3, [r4, #8]
   d58ea:	4299      	cmp	r1, r3
   d58ec:	db05      	blt.n	d58fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d58ee:	3101      	adds	r1, #1
   d58f0:	4620      	mov	r0, r4
   d58f2:	f7ff ffd9 	bl	d58a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d58f6:	4606      	mov	r6, r0
   d58f8:	b198      	cbz	r0, d5922 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d58fa:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d58fc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d58fe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5902:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5906:	4629      	mov	r1, r5
   d5908:	f105 0008 	add.w	r0, r5, #8
   d590c:	f7ff ffa2 	bl	d5854 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5910:	b11d      	cbz	r5, d591a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5912:	4669      	mov	r1, sp
   d5914:	4628      	mov	r0, r5
   d5916:	f7ff fd9e 	bl	d5456 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d591a:	6863      	ldr	r3, [r4, #4]
   d591c:	3301      	adds	r3, #1
   d591e:	6063      	str	r3, [r4, #4]
   d5920:	2601      	movs	r6, #1
   d5922:	a801      	add	r0, sp, #4
   d5924:	f7ff fda1 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5928:	4630      	mov	r0, r6
   d592a:	b002      	add	sp, #8
   d592c:	bd70      	pop	{r4, r5, r6, pc}

000d592e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d592e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5932:	4606      	mov	r6, r0
   d5934:	460c      	mov	r4, r1
   d5936:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5938:	d914      	bls.n	d5964 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d593a:	4290      	cmp	r0, r2
   d593c:	d213      	bcs.n	d5966 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d593e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5942:	1a6c      	subs	r4, r5, r1
   d5944:	f1a1 0708 	sub.w	r7, r1, #8
   d5948:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d594a:	42af      	cmp	r7, r5
   d594c:	d018      	beq.n	d5980 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d594e:	b11c      	cbz	r4, d5958 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5950:	4629      	mov	r1, r5
   d5952:	4620      	mov	r0, r4
   d5954:	f7ff fd71 	bl	d543a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5958:	1d28      	adds	r0, r5, #4
   d595a:	f7ff fd86 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d595e:	3d08      	subs	r5, #8
   d5960:	3c08      	subs	r4, #8
   d5962:	e7f2      	b.n	d594a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5964:	d00c      	beq.n	d5980 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5966:	42ac      	cmp	r4, r5
   d5968:	d00a      	beq.n	d5980 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d596a:	b11e      	cbz	r6, d5974 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d596c:	4621      	mov	r1, r4
   d596e:	4630      	mov	r0, r6
   d5970:	f7ff fd63 	bl	d543a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5974:	1d20      	adds	r0, r4, #4
   d5976:	f7ff fd78 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d597a:	3408      	adds	r4, #8
   d597c:	3608      	adds	r6, #8
   d597e:	e7f2      	b.n	d5966 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5982 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5982:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5984:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5986:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5988:	dd0b      	ble.n	d59a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d598a:	00f0      	lsls	r0, r6, #3
   d598c:	f7ff f888 	bl	d4aa0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5990:	4604      	mov	r4, r0
   d5992:	b170      	cbz	r0, d59b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5994:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5998:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d599c:	f7ff ffc7 	bl	d592e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d59a0:	e000      	b.n	d59a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d59a2:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d59a4:	6828      	ldr	r0, [r5, #0]
   d59a6:	f7ff f883 	bl	d4ab0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d59aa:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d59ac:	60ae      	str	r6, [r5, #8]
        return true;
   d59ae:	2001      	movs	r0, #1
   d59b0:	bd70      	pop	{r4, r5, r6, pc}
    }
   d59b2:	bd70      	pop	{r4, r5, r6, pc}

000d59b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d59b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d59b6:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d59b8:	6845      	ldr	r5, [r0, #4]
   d59ba:	4668      	mov	r0, sp
   d59bc:	f7ff fd3d 	bl	d543a <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d59c0:	6861      	ldr	r1, [r4, #4]
   d59c2:	68a3      	ldr	r3, [r4, #8]
   d59c4:	4299      	cmp	r1, r3
   d59c6:	db05      	blt.n	d59d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d59c8:	3101      	adds	r1, #1
   d59ca:	4620      	mov	r0, r4
   d59cc:	f7ff ffd9 	bl	d5982 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d59d0:	4606      	mov	r6, r0
   d59d2:	b198      	cbz	r0, d59fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d59d4:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d59d6:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d59d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d59dc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d59e0:	4629      	mov	r1, r5
   d59e2:	f105 0008 	add.w	r0, r5, #8
   d59e6:	f7ff ffa2 	bl	d592e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d59ea:	b11d      	cbz	r5, d59f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d59ec:	4669      	mov	r1, sp
   d59ee:	4628      	mov	r0, r5
   d59f0:	f7ff fd23 	bl	d543a <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d59f4:	6863      	ldr	r3, [r4, #4]
   d59f6:	3301      	adds	r3, #1
   d59f8:	6063      	str	r3, [r4, #4]
   d59fa:	2601      	movs	r6, #1
   d59fc:	a801      	add	r0, sp, #4
   d59fe:	f7ff fd34 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5a02:	4630      	mov	r0, r6
   d5a04:	b002      	add	sp, #8
   d5a06:	bd70      	pop	{r4, r5, r6, pc}

000d5a08 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5a08:	b510      	push	{r4, lr}
   d5a0a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5a0c:	6840      	ldr	r0, [r0, #4]
   d5a0e:	b108      	cbz	r0, d5a14 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5a10:	f7fe fb43 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5a14:	4620      	mov	r0, r4
   d5a16:	bd10      	pop	{r4, pc}

000d5a18 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5a18:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5a1a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5a1c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5a1e:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5a22:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5a26:	f7ff f8d3 	bl	d4bd0 <_ZN6StringD1Ev>
   d5a2a:	4668      	mov	r0, sp
   d5a2c:	f7ff ffec 	bl	d5a08 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5a30:	b003      	add	sp, #12
   d5a32:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5a38:	b538      	push	{r3, r4, r5, lr}
   d5a3a:	2300      	movs	r3, #0
   d5a3c:	4604      	mov	r4, r0
   d5a3e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5a40:	2014      	movs	r0, #20
   d5a42:	460d      	mov	r5, r1
   d5a44:	f7fe fb27 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5a48:	b128      	cbz	r0, d5a56 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5a4a:	2301      	movs	r3, #1
   d5a4c:	6043      	str	r3, [r0, #4]
   d5a4e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5a50:	4b02      	ldr	r3, [pc, #8]	; (d5a5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5a52:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5a54:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5a56:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5a58:	4620      	mov	r0, r4
   d5a5a:	bd38      	pop	{r3, r4, r5, pc}
   d5a5c:	000d8480 	.word	0x000d8480

000d5a60 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a64:	b088      	sub	sp, #32
   d5a66:	4605      	mov	r5, r0
   d5a68:	461e      	mov	r6, r3
   d5a6a:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5a6c:	2300      	movs	r3, #0
   d5a6e:	460f      	mov	r7, r1
   d5a70:	4690      	mov	r8, r2
   d5a72:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a74:	9305      	str	r3, [sp, #20]
   d5a76:	f7fe fb0e 	bl	d4096 <_Znwj>
   d5a7a:	f8cd d018 	str.w	sp, [sp, #24]
   d5a7e:	4604      	mov	r4, r0
   d5a80:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5a82:	b1c0      	cbz	r0, d5ab6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d5a84:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d5a88:	f7ff fb4c 	bl	d5124 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5a8c:	4639      	mov	r1, r7
   d5a8e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d5a92:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d5a96:	f7ff f90f 	bl	d4cb8 <_ZN6StringaSEPKc>
        callback_ = callback;
   d5a9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5a9c:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5a9e:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d5aa0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5aa2:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5aa4:	f104 0014 	add.w	r0, r4, #20
   d5aa8:	f7ff fa0c 	bl	d4ec4 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5aac:	990e      	ldr	r1, [sp, #56]	; 0x38
   d5aae:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5ab2:	f7ff fa07 	bl	d4ec4 <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ab6:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5ab8:	2600      	movs	r6, #0
   d5aba:	ab01      	add	r3, sp, #4
   d5abc:	aa02      	add	r2, sp, #8
   d5abe:	a803      	add	r0, sp, #12
   d5ac0:	9607      	str	r6, [sp, #28]
   d5ac2:	f7ff ffb9 	bl	d5a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ac6:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5ac8:	9a05      	ldr	r2, [sp, #20]
   d5aca:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5acc:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ace:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5ad0:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ad2:	f7ff fcca 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5ad6:	a806      	add	r0, sp, #24
   d5ad8:	f7ff ff96 	bl	d5a08 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5adc:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ade:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ae0:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ae2:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ae4:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ae6:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ae8:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5aea:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5aec:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5af0:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5af2:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5af4:	f7ff fcb9 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5af8:	a805      	add	r0, sp, #20
   d5afa:	f7ff fcb6 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d5afe:	6829      	ldr	r1, [r5, #0]
   d5b00:	b919      	cbnz	r1, d5b0a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d5b02:	4a03      	ldr	r2, [pc, #12]	; (d5b10 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d5b04:	200a      	movs	r0, #10
   d5b06:	f7fe ff27 	bl	d4958 <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5b0a:	b008      	add	sp, #32
   d5b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5b10:	000d46b5 	.word	0x000d46b5

000d5b14 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5b14:	b510      	push	{r4, lr}
   d5b16:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5b18:	6840      	ldr	r0, [r0, #4]
   d5b1a:	b108      	cbz	r0, d5b20 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5b1c:	f7fe fabd 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5b20:	4620      	mov	r0, r4
   d5b22:	bd10      	pop	{r4, pc}

000d5b24 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5b24:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5b26:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5b28:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5b2a:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5b2e:	4668      	mov	r0, sp
   d5b30:	f7ff fff0 	bl	d5b14 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5b34:	b003      	add	sp, #12
   d5b36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5b3c:	b538      	push	{r3, r4, r5, lr}
   d5b3e:	2300      	movs	r3, #0
   d5b40:	4604      	mov	r4, r0
   d5b42:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5b44:	2014      	movs	r0, #20
   d5b46:	460d      	mov	r5, r1
   d5b48:	f7fe faa5 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5b4c:	b128      	cbz	r0, d5b5a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5b4e:	2301      	movs	r3, #1
   d5b50:	6043      	str	r3, [r0, #4]
   d5b52:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5b54:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5b56:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5b58:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5b5a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	bd38      	pop	{r3, r4, r5, pc}
   d5b60:	000d849c 	.word	0x000d849c

000d5b64 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5b64:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5b66:	2600      	movs	r6, #0
   d5b68:	b087      	sub	sp, #28
   d5b6a:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b6c:	6046      	str	r6, [r0, #4]
   d5b6e:	4604      	mov	r4, r0
   d5b70:	2018      	movs	r0, #24
   d5b72:	460f      	mov	r7, r1
   d5b74:	f7fe fa8f 	bl	d4096 <_Znwj>
   d5b78:	f8cd d010 	str.w	sp, [sp, #16]
   d5b7c:	4605      	mov	r5, r0
   d5b7e:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5b80:	b138      	cbz	r0, d5b92 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5b82:	f7ff f92f 	bl	d4de4 <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5b86:	4639      	mov	r1, r7
   d5b88:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5b8a:	82ae      	strh	r6, [r5, #20]
   d5b8c:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5b8e:	f7ff f999 	bl	d4ec4 <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5b92:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5b94:	4629      	mov	r1, r5
   d5b96:	9305      	str	r3, [sp, #20]
   d5b98:	aa02      	add	r2, sp, #8
   d5b9a:	ab01      	add	r3, sp, #4
   d5b9c:	a803      	add	r0, sp, #12
   d5b9e:	f7ff ffcd 	bl	d5b3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5ba2:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5ba4:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5ba6:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5ba8:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5baa:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5bac:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5bae:	f7ff fc5c 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5bb2:	a804      	add	r0, sp, #16
   d5bb4:	f7ff ffae 	bl	d5b14 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d5bb8:	6823      	ldr	r3, [r4, #0]
   d5bba:	b90b      	cbnz	r3, d5bc0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d5bbc:	f7ff f8ba 	bl	d4d34 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5bc0:	4620      	mov	r0, r4
   d5bc2:	b007      	add	sp, #28
   d5bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5bc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5bcc:	4617      	mov	r7, r2
   d5bce:	b0a1      	sub	sp, #132	; 0x84
   d5bd0:	4680      	mov	r8, r0
    WiringBleLock lk;
   d5bd2:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5bd4:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5bd6:	f7ff f8dd 	bl	d4d94 <_ZN8particle3ble13WiringBleLockC1Ev>
   d5bda:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5bdc:	7923      	ldrb	r3, [r4, #4]
   d5bde:	2b00      	cmp	r3, #0
   d5be0:	f000 80de 	beq.w	d5da0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5be4:	6833      	ldr	r3, [r6, #0]
   d5be6:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5be8:	691b      	ldr	r3, [r3, #16]
   d5bea:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5bee:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5bf0:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d5bf4:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5bf8:	9b03      	ldr	r3, [sp, #12]
   d5bfa:	42ab      	cmp	r3, r5
   d5bfc:	d023      	beq.n	d5c46 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d5bfe:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5c02:	4650      	mov	r0, sl
   d5c04:	f109 0114 	add.w	r1, r9, #20
   d5c08:	f7ff f976 	bl	d4ef8 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5c0c:	2800      	cmp	r0, #0
   d5c0e:	f000 80cc 	beq.w	d5daa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5c12:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5c16:	4658      	mov	r0, fp
   d5c18:	f7ff f96e 	bl	d4ef8 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5c1c:	2800      	cmp	r0, #0
   d5c1e:	f000 80c4 	beq.w	d5daa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5c22:	6823      	ldr	r3, [r4, #0]
   d5c24:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5c28:	f8d9 3000 	ldr.w	r3, [r9]
   d5c2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5c30:	4299      	cmp	r1, r3
   d5c32:	f040 80ba 	bne.w	d5daa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5c36:	2320      	movs	r3, #32
   d5c38:	4a60      	ldr	r2, [pc, #384]	; (d5dbc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d5c3a:	9315      	str	r3, [sp, #84]	; 0x54
   d5c3c:	2300      	movs	r3, #0
   d5c3e:	9200      	str	r2, [sp, #0]
   d5c40:	9316      	str	r3, [sp, #88]	; 0x58
   d5c42:	aa15      	add	r2, sp, #84	; 0x54
   d5c44:	e0a8      	b.n	d5d98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5c46:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5c4a:	4648      	mov	r0, r9
   d5c4c:	f7ff f906 	bl	d4e5c <_ZNK8particle7BleUuid7isValidEv>
   d5c50:	b918      	cbnz	r0, d5c5a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5c52:	495b      	ldr	r1, [pc, #364]	; (d5dc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d5c54:	4648      	mov	r0, r9
   d5c56:	f7ff f942 	bl	d4ede <_ZN8particle7BleUuidaSEPKh>
   d5c5a:	6833      	ldr	r3, [r6, #0]
   d5c5c:	681d      	ldr	r5, [r3, #0]
   d5c5e:	685b      	ldr	r3, [r3, #4]
   d5c60:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5c64:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5c66:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5c68:	d005      	beq.n	d5c76 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5c6a:	6828      	ldr	r0, [r5, #0]
   d5c6c:	f7ff f944 	bl	d4ef8 <_ZNK8particle7BleUuideqERKS0_>
   d5c70:	bb58      	cbnz	r0, d5cca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5c72:	3508      	adds	r5, #8
   d5c74:	e7f6      	b.n	d5c64 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5c76:	a80b      	add	r0, sp, #44	; 0x2c
   d5c78:	f7ff ff74 	bl	d5b64 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d5c7c:	4649      	mov	r1, r9
   d5c7e:	a815      	add	r0, sp, #84	; 0x54
   d5c80:	f7ff f8fe 	bl	d4e80 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5c86:	2300      	movs	r3, #0
   d5c88:	3214      	adds	r2, #20
   d5c8a:	a915      	add	r1, sp, #84	; 0x54
   d5c8c:	2001      	movs	r0, #1
   d5c8e:	f7fe fd4b 	bl	d4728 <hal_ble_gatt_server_add_service>
   d5c92:	2800      	cmp	r0, #0
   d5c94:	d178      	bne.n	d5d88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5c96:	6835      	ldr	r5, [r6, #0]
   d5c98:	a90b      	add	r1, sp, #44	; 0x2c
   d5c9a:	a80d      	add	r0, sp, #52	; 0x34
   d5c9c:	f7ff fbdb 	bl	d5456 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d5ca0:	4628      	mov	r0, r5
   d5ca2:	a90d      	add	r1, sp, #52	; 0x34
   d5ca4:	f7ff fe19 	bl	d58da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d5ca8:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5caa:	a80e      	add	r0, sp, #56	; 0x38
   d5cac:	f7ff fbdd 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cb0:	2d00      	cmp	r5, #0
   d5cb2:	d069      	beq.n	d5d88 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d5cb4:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d5cb6:	6855      	ldr	r5, [r2, #4]
   d5cb8:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d5cbc:	6815      	ldr	r5, [r2, #0]
   d5cbe:	3b01      	subs	r3, #1
   d5cc0:	a80c      	add	r0, sp, #48	; 0x30
   d5cc2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d5cc6:	f7ff fbd0 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d5cca:	f104 0914 	add.w	r9, r4, #20
   d5cce:	4648      	mov	r0, r9
   d5cd0:	f7ff f8c4 	bl	d4e5c <_ZNK8particle7BleUuid7isValidEv>
   d5cd4:	b968      	cbnz	r0, d5cf2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5cd6:	4b3b      	ldr	r3, [pc, #236]	; (d5dc4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5cd8:	4939      	ldr	r1, [pc, #228]	; (d5dc0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d5cda:	881a      	ldrh	r2, [r3, #0]
   d5cdc:	3201      	adds	r2, #1
   d5cde:	b292      	uxth	r2, r2
   d5ce0:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d5ce2:	a815      	add	r0, sp, #84	; 0x54
   d5ce4:	2301      	movs	r3, #1
   d5ce6:	f7ff f8ae 	bl	d4e46 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d5cea:	a915      	add	r1, sp, #84	; 0x54
   d5cec:	4648      	mov	r0, r9
   d5cee:	f7ff f8e9 	bl	d4ec4 <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d5cf2:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d5cf6:	4652      	mov	r2, sl
   d5cf8:	2100      	movs	r1, #0
   d5cfa:	a815      	add	r0, sp, #84	; 0x54
   d5cfc:	f002 f9c5 	bl	d808a <memset>
    charInit.version = BLE_API_VERSION;
   d5d00:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d5d02:	4649      	mov	r1, r9
   d5d04:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d5d06:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d5d0a:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d5d0e:	f7ff f8b7 	bl	d4e80 <_ZN8particle7BleUuid7halUUIDEv>
   d5d12:	ab04      	add	r3, sp, #16
   d5d14:	aa18      	add	r2, sp, #96	; 0x60
   d5d16:	f10d 0c20 	add.w	ip, sp, #32
   d5d1a:	6818      	ldr	r0, [r3, #0]
   d5d1c:	6859      	ldr	r1, [r3, #4]
   d5d1e:	4696      	mov	lr, r2
   d5d20:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d5d24:	3308      	adds	r3, #8
   d5d26:	4563      	cmp	r3, ip
   d5d28:	4672      	mov	r2, lr
   d5d2a:	d1f6      	bne.n	d5d1a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d5d2c:	6818      	ldr	r0, [r3, #0]
   d5d2e:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d5d32:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d5d34:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d5d38:	682b      	ldr	r3, [r5, #0]
   d5d3a:	8a9b      	ldrh	r3, [r3, #20]
   d5d3c:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d5d40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5d42:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5d44:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d5d46:	4b20      	ldr	r3, [pc, #128]	; (d5dc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d5d48:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5d4a:	1da1      	adds	r1, r4, #6
   d5d4c:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d5d4e:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d5d50:	f7fe fd12 	bl	d4778 <hal_ble_gatt_server_add_characteristic>
   d5d54:	bb20      	cbnz	r0, d5da0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d5d56:	2301      	movs	r3, #1
   d5d58:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5d5a:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5d5c:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d5d5e:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d5d60:	a80d      	add	r0, sp, #52	; 0x34
   d5d62:	f7ff fb6a 	bl	d543a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5d66:	4620      	mov	r0, r4
   d5d68:	a90d      	add	r1, sp, #52	; 0x34
   d5d6a:	f7ff fe23 	bl	d59b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d5d6e:	4604      	mov	r4, r0
   d5d70:	a80e      	add	r0, sp, #56	; 0x38
   d5d72:	f7ff fb7a 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d76:	b99c      	cbnz	r4, d5da0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d5d78:	2320      	movs	r3, #32
   d5d7a:	930d      	str	r3, [sp, #52]	; 0x34
   d5d7c:	4b13      	ldr	r3, [pc, #76]	; (d5dcc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d5d7e:	9300      	str	r3, [sp, #0]
   d5d80:	940e      	str	r4, [sp, #56]	; 0x38
   d5d82:	4623      	mov	r3, r4
   d5d84:	aa0d      	add	r2, sp, #52	; 0x34
   d5d86:	e007      	b.n	d5d98 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d5d88:	4639      	mov	r1, r7
   d5d8a:	4640      	mov	r0, r8
   d5d8c:	f7ff fb55 	bl	d543a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5d90:	a80c      	add	r0, sp, #48	; 0x30
   d5d92:	f7ff fb6a 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d96:	e00a      	b.n	d5dae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5d98:	490d      	ldr	r1, [pc, #52]	; (d5dd0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d5d9a:	2032      	movs	r0, #50	; 0x32
   d5d9c:	f7fe fde4 	bl	d4968 <log_message>
            return characteristic;
   d5da0:	4639      	mov	r1, r7
   d5da2:	4640      	mov	r0, r8
   d5da4:	f7ff fb49 	bl	d543a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5da8:	e001      	b.n	d5dae <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d5daa:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5dac:	e724      	b.n	d5bf8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d5dae:	a80a      	add	r0, sp, #40	; 0x28
   d5db0:	f7fe fffe 	bl	d4db0 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d5db4:	4640      	mov	r0, r8
   d5db6:	b021      	add	sp, #132	; 0x84
   d5db8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5dbc:	000d8651 	.word	0x000d8651
   d5dc0:	000d84cc 	.word	0x000d84cc
   d5dc4:	2003e3d4 	.word	0x2003e3d4
   d5dc8:	000d5329 	.word	0x000d5329
   d5dcc:	000d862a 	.word	0x000d862a
   d5dd0:	000d84dc 	.word	0x000d84dc

000d5dd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5dd4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5dd6:	4c06      	ldr	r4, [pc, #24]	; (d5df0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5dd8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d5dda:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5ddc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5dde:	f7fe fd0b 	bl	d47f8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5de2:	4620      	mov	r0, r4
   d5de4:	4a03      	ldr	r2, [pc, #12]	; (d5df4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5de6:	4904      	ldr	r1, [pc, #16]	; (d5df8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d5dec:	f001 bdeb 	b.w	d79c6 <__aeabi_atexit>
   d5df0:	2003e3d8 	.word	0x2003e3d8
   d5df4:	2003e338 	.word	0x2003e338
   d5df8:	000d4d23 	.word	0x000d4d23

000d5dfc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5dfe:	4606      	mov	r6, r0
   d5e00:	460d      	mov	r5, r1
   d5e02:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5e04:	2400      	movs	r4, #0
  while (size--) {
   d5e06:	42bd      	cmp	r5, r7
   d5e08:	d00c      	beq.n	d5e24 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5e0a:	6833      	ldr	r3, [r6, #0]
   d5e0c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5e10:	689b      	ldr	r3, [r3, #8]
   d5e12:	4630      	mov	r0, r6
   d5e14:	4798      	blx	r3
     if (chunk>=0)
   d5e16:	2800      	cmp	r0, #0
   d5e18:	db01      	blt.n	d5e1e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5e1a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5e1c:	e7f3      	b.n	d5e06 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5e1e:	2c00      	cmp	r4, #0
   d5e20:	bf08      	it	eq
   d5e22:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5e24:	4620      	mov	r0, r4
   d5e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e28 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5e28:	b570      	push	{r4, r5, r6, lr}
   d5e2a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5e2c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5e2e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5e30:	b149      	cbz	r1, d5e46 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5e32:	f002 f97d 	bl	d8130 <strlen>
   d5e36:	682b      	ldr	r3, [r5, #0]
   d5e38:	4602      	mov	r2, r0
   d5e3a:	4621      	mov	r1, r4
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	68db      	ldr	r3, [r3, #12]
    }
   d5e40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5e44:	4718      	bx	r3
    }
   d5e46:	bd70      	pop	{r4, r5, r6, pc}

000d5e48 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5e48:	6803      	ldr	r3, [r0, #0]
   d5e4a:	689b      	ldr	r3, [r3, #8]
   d5e4c:	4718      	bx	r3

000d5e4e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5e4e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5e50:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5e52:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5e54:	f7ff fff8 	bl	d5e48 <_ZN5Print5printEc>
  n += print('\n');
   d5e58:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5e5a:	4604      	mov	r4, r0
  n += print('\n');
   d5e5c:	4628      	mov	r0, r5
   d5e5e:	f7ff fff3 	bl	d5e48 <_ZN5Print5printEc>
  return n;
}
   d5e62:	4420      	add	r0, r4
   d5e64:	bd38      	pop	{r3, r4, r5, pc}

000d5e66 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5e66:	b530      	push	{r4, r5, lr}
   d5e68:	b08b      	sub	sp, #44	; 0x2c
   d5e6a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5e6c:	2100      	movs	r1, #0
   d5e6e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5e72:	2a01      	cmp	r2, #1
   d5e74:	bf98      	it	ls
   d5e76:	220a      	movls	r2, #10
   d5e78:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5e7c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5e80:	fb05 3312 	mls	r3, r5, r2, r3
   d5e84:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5e88:	2b09      	cmp	r3, #9
   d5e8a:	bf94      	ite	ls
   d5e8c:	3330      	addls	r3, #48	; 0x30
   d5e8e:	3337      	addhi	r3, #55	; 0x37
   d5e90:	b2db      	uxtb	r3, r3
   d5e92:	4621      	mov	r1, r4
   d5e94:	f804 3901 	strb.w	r3, [r4], #-1
   d5e98:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5e9a:	2d00      	cmp	r5, #0
   d5e9c:	d1ee      	bne.n	d5e7c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5e9e:	f7ff ffc3 	bl	d5e28 <_ZN5Print5writeEPKc>
}
   d5ea2:	b00b      	add	sp, #44	; 0x2c
   d5ea4:	bd30      	pop	{r4, r5, pc}

000d5ea6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5ea6:	b40c      	push	{r2, r3}
   d5ea8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5eac:	b087      	sub	sp, #28
   d5eae:	af00      	add	r7, sp, #0
   d5eb0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d5eb4:	4605      	mov	r5, r0
   d5eb6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5eba:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5ebc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5ebe:	4623      	mov	r3, r4
   d5ec0:	464a      	mov	r2, r9
   d5ec2:	2114      	movs	r1, #20
   d5ec4:	1d38      	adds	r0, r7, #4
   d5ec6:	f7fe fe03 	bl	d4ad0 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5eca:	2813      	cmp	r0, #19
   d5ecc:	d805      	bhi.n	d5eda <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ece:	1d39      	adds	r1, r7, #4
   d5ed0:	4628      	mov	r0, r5
   d5ed2:	f7ff ffa9 	bl	d5e28 <_ZN5Print5writeEPKc>
   d5ed6:	4604      	mov	r4, r0
   d5ed8:	e013      	b.n	d5f02 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5eda:	f100 0308 	add.w	r3, r0, #8
   d5ede:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d5ee2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5ee4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5ee8:	1c41      	adds	r1, r0, #1
   d5eea:	4623      	mov	r3, r4
   d5eec:	464a      	mov	r2, r9
   d5eee:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5ef0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d5ef2:	f7fe fded 	bl	d4ad0 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5ef6:	4669      	mov	r1, sp
   d5ef8:	4628      	mov	r0, r5
   d5efa:	f7ff ff95 	bl	d5e28 <_ZN5Print5writeEPKc>
   d5efe:	4604      	mov	r4, r0
   d5f00:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d5f02:	b11e      	cbz	r6, d5f0c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d5f04:	4628      	mov	r0, r5
   d5f06:	f7ff ffa2 	bl	d5e4e <_ZN5Print7printlnEv>
   d5f0a:	4404      	add	r4, r0
    return n;
}
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	371c      	adds	r7, #28
   d5f10:	46bd      	mov	sp, r7
   d5f12:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5f16:	b002      	add	sp, #8
   d5f18:	4770      	bx	lr

000d5f1a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5f1a:	6880      	ldr	r0, [r0, #8]
   d5f1c:	6803      	ldr	r3, [r0, #0]
   d5f1e:	68db      	ldr	r3, [r3, #12]
   d5f20:	4718      	bx	r3

000d5f22 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5f22:	4770      	bx	lr

000d5f24 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5f24:	b119      	cbz	r1, d5f2e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5f26:	680b      	ldr	r3, [r1, #0]
   d5f28:	4608      	mov	r0, r1
   d5f2a:	685b      	ldr	r3, [r3, #4]
   d5f2c:	4718      	bx	r3
   d5f2e:	4770      	bx	lr

000d5f30 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5f30:	b119      	cbz	r1, d5f3a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5f32:	680b      	ldr	r3, [r1, #0]
   d5f34:	4608      	mov	r0, r1
   d5f36:	685b      	ldr	r3, [r3, #4]
   d5f38:	4718      	bx	r3
   d5f3a:	4770      	bx	lr

000d5f3c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5f3c:	4770      	bx	lr

000d5f3e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5f3e:	4770      	bx	lr

000d5f40 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5f40:	4770      	bx	lr

000d5f42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5f42:	b538      	push	{r3, r4, r5, lr}
   d5f44:	4604      	mov	r4, r0
   d5f46:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5f48:	6800      	ldr	r0, [r0, #0]
   d5f4a:	212e      	movs	r1, #46	; 0x2e
   d5f4c:	f002 f8dc 	bl	d8108 <strchrnul>
    size = s - category;
   d5f50:	6823      	ldr	r3, [r4, #0]
   d5f52:	1ac3      	subs	r3, r0, r3
   d5f54:	602b      	str	r3, [r5, #0]
    if (size) {
   d5f56:	b123      	cbz	r3, d5f62 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5f58:	7803      	ldrb	r3, [r0, #0]
   d5f5a:	b103      	cbz	r3, d5f5e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5f5c:	3001      	adds	r0, #1
   d5f5e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f60:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5f62:	4618      	mov	r0, r3
}
   d5f64:	bd38      	pop	{r3, r4, r5, pc}

000d5f66 <_ZN5spark16JSONStreamWriterD0Ev>:
   d5f66:	b510      	push	{r4, lr}
   d5f68:	210c      	movs	r1, #12
   d5f6a:	4604      	mov	r4, r0
   d5f6c:	f001 fd38 	bl	d79e0 <_ZdlPvj>
   d5f70:	4620      	mov	r0, r4
   d5f72:	bd10      	pop	{r4, pc}

000d5f74 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5f74:	b510      	push	{r4, lr}
   d5f76:	2104      	movs	r1, #4
   d5f78:	4604      	mov	r4, r0
   d5f7a:	f001 fd31 	bl	d79e0 <_ZdlPvj>
   d5f7e:	4620      	mov	r0, r4
   d5f80:	bd10      	pop	{r4, pc}

000d5f82 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5f82:	b510      	push	{r4, lr}
   d5f84:	2104      	movs	r1, #4
   d5f86:	4604      	mov	r4, r0
   d5f88:	f001 fd2a 	bl	d79e0 <_ZdlPvj>
   d5f8c:	4620      	mov	r0, r4
   d5f8e:	bd10      	pop	{r4, pc}

000d5f90 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5f90:	b538      	push	{r3, r4, r5, lr}
   d5f92:	460c      	mov	r4, r1
   d5f94:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5f96:	f001 f903 	bl	d71a0 <_Z16_fetch_usbserialv>
   d5f9a:	4284      	cmp	r4, r0
   d5f9c:	d00d      	beq.n	d5fba <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5f9e:	f001 f987 	bl	d72b0 <_Z22__fetch_global_Serial1v>
   d5fa2:	4284      	cmp	r4, r0
   d5fa4:	d105      	bne.n	d5fb2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d5fa6:	f001 f983 	bl	d72b0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5fae:	f001 b97c 	b.w	d72aa <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5fb2:	4621      	mov	r1, r4
   d5fb4:	4628      	mov	r0, r5
   d5fb6:	f7ff ffbb 	bl	d5f30 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5fba:	bd38      	pop	{r3, r4, r5, pc}

000d5fbc <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5fbc:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5fbe:	f002 f8ad 	bl	d811c <strcmp>
}
   d5fc2:	fab0 f080 	clz	r0, r0
   d5fc6:	0940      	lsrs	r0, r0, #5
   d5fc8:	bd08      	pop	{r3, pc}

000d5fca <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5fca:	b538      	push	{r3, r4, r5, lr}
   d5fcc:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5fce:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5fd0:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5fd2:	f002 f8ad 	bl	d8130 <strlen>
   d5fd6:	4621      	mov	r1, r4
   d5fd8:	4602      	mov	r2, r0
   d5fda:	4628      	mov	r0, r5
}
   d5fdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5fe0:	f001 bc8f 	b.w	d7902 <_ZN5spark10JSONWriter5valueEPKcj>

000d5fe4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5fe4:	6800      	ldr	r0, [r0, #0]
   d5fe6:	f7fe bc17 	b.w	d4818 <os_mutex_recursive_lock>

000d5fea <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5fea:	b570      	push	{r4, r5, r6, lr}
   d5fec:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5fee:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5ff0:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5ff2:	f002 f89d 	bl	d8130 <strlen>
   d5ff6:	6823      	ldr	r3, [r4, #0]
   d5ff8:	4602      	mov	r2, r0
   d5ffa:	4629      	mov	r1, r5
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	68db      	ldr	r3, [r3, #12]
}
   d6000:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6004:	4718      	bx	r3

000d6006 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6006:	b513      	push	{r0, r1, r4, lr}
   d6008:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d600a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d600c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6010:	68d4      	ldr	r4, [r2, #12]
   d6012:	4619      	mov	r1, r3
   d6014:	2201      	movs	r2, #1
   d6016:	47a0      	blx	r4
}
   d6018:	b002      	add	sp, #8
   d601a:	bd10      	pop	{r4, pc}

000d601c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d601c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6020:	6845      	ldr	r5, [r0, #4]
   d6022:	6807      	ldr	r7, [r0, #0]
   d6024:	b085      	sub	sp, #20
   d6026:	4691      	mov	r9, r2
   d6028:	2214      	movs	r2, #20
   d602a:	4355      	muls	r5, r2
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	10ab      	asrs	r3, r5, #2
   d6030:	4d19      	ldr	r5, [pc, #100]	; (d6098 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6032:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6034:	435d      	muls	r5, r3
   d6036:	468b      	mov	fp, r1
   d6038:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d603a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d603c:	2d00      	cmp	r5, #0
   d603e:	9303      	str	r3, [sp, #12]
   d6040:	dd23      	ble.n	d608a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6042:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6044:	106e      	asrs	r6, r5, #1
   d6046:	fb03 f006 	mul.w	r0, r3, r6
   d604a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d604e:	464a      	mov	r2, r9
   d6050:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6054:	5820      	ldr	r0, [r4, r0]
   d6056:	45d1      	cmp	r9, sl
   d6058:	bf28      	it	cs
   d605a:	4652      	movcs	r2, sl
   d605c:	4659      	mov	r1, fp
   d605e:	f002 f86f 	bl	d8140 <strncmp>
                if (cmp == 0) {
   d6062:	9b03      	ldr	r3, [sp, #12]
   d6064:	b948      	cbnz	r0, d607a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d6066:	45d1      	cmp	r9, sl
   d6068:	d103      	bne.n	d6072 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d606a:	9a01      	ldr	r2, [sp, #4]
   d606c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d606e:	4635      	mov	r5, r6
   d6070:	e7e4      	b.n	d603c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d6072:	bf8c      	ite	hi
   d6074:	2001      	movhi	r0, #1
   d6076:	2000      	movls	r0, #0
   d6078:	e000      	b.n	d607c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d607a:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d607c:	2800      	cmp	r0, #0
   d607e:	d0f6      	beq.n	d606e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6080:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d6082:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d6086:	3e01      	subs	r6, #1
   d6088:	e7f1      	b.n	d606e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d608a:	1be4      	subs	r4, r4, r7
}
   d608c:	4802      	ldr	r0, [pc, #8]	; (d6098 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d608e:	10a4      	asrs	r4, r4, #2
}
   d6090:	4360      	muls	r0, r4
   d6092:	b005      	add	sp, #20
   d6094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6098:	cccccccd 	.word	0xcccccccd

000d609c <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d609c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d609e:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d60a0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d60a2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d60a4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d60a6:	b313      	cbz	r3, d60ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d60a8:	b309      	cbz	r1, d60ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d60aa:	af04      	add	r7, sp, #16
   d60ac:	2300      	movs	r3, #0
   d60ae:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d60b2:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d60b6:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d60b8:	4639      	mov	r1, r7
   d60ba:	a801      	add	r0, sp, #4
   d60bc:	f7ff ff41 	bl	d5f42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d60c0:	4601      	mov	r1, r0
   d60c2:	b1a0      	cbz	r0, d60ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d60c4:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d60c6:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d60c8:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d60cc:	4620      	mov	r0, r4
   d60ce:	f7ff ffa5 	bl	d601c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d60d2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d60d6:	b153      	cbz	r3, d60ee <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d60d8:	6823      	ldr	r3, [r4, #0]
   d60da:	2414      	movs	r4, #20
   d60dc:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d60e0:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d60e2:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d60e6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d60e8:	bfa8      	it	ge
   d60ea:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d60ec:	e7e4      	b.n	d60b8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d60ee:	4630      	mov	r0, r6
   d60f0:	b005      	add	sp, #20
   d60f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d60f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d60f4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d60f6:	4c09      	ldr	r4, [pc, #36]	; (d611c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d60f8:	6823      	ldr	r3, [r4, #0]
   d60fa:	07db      	lsls	r3, r3, #31
   d60fc:	d40b      	bmi.n	d6116 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d60fe:	4620      	mov	r0, r4
   d6100:	f7fd ffda 	bl	d40b8 <__cxa_guard_acquire>
   d6104:	b138      	cbz	r0, d6116 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6106:	4620      	mov	r0, r4
   d6108:	f7fd ffdb 	bl	d40c2 <__cxa_guard_release>
   d610c:	4a04      	ldr	r2, [pc, #16]	; (d6120 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d610e:	4905      	ldr	r1, [pc, #20]	; (d6124 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6110:	4805      	ldr	r0, [pc, #20]	; (d6128 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6112:	f001 fc58 	bl	d79c6 <__aeabi_atexit>
    return &factory;
}
   d6116:	4804      	ldr	r0, [pc, #16]	; (d6128 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6118:	bd10      	pop	{r4, pc}
   d611a:	bf00      	nop
   d611c:	2003e3dc 	.word	0x2003e3dc
   d6120:	2003e338 	.word	0x2003e338
   d6124:	000d5f3f 	.word	0x000d5f3f
   d6128:	2003e2c4 	.word	0x2003e2c4

000d612c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d612c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d612e:	4c09      	ldr	r4, [pc, #36]	; (d6154 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6130:	6823      	ldr	r3, [r4, #0]
   d6132:	07db      	lsls	r3, r3, #31
   d6134:	d40b      	bmi.n	d614e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6136:	4620      	mov	r0, r4
   d6138:	f7fd ffbe 	bl	d40b8 <__cxa_guard_acquire>
   d613c:	b138      	cbz	r0, d614e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d613e:	4620      	mov	r0, r4
   d6140:	f7fd ffbf 	bl	d40c2 <__cxa_guard_release>
   d6144:	4a04      	ldr	r2, [pc, #16]	; (d6158 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6146:	4905      	ldr	r1, [pc, #20]	; (d615c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6148:	4805      	ldr	r0, [pc, #20]	; (d6160 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d614a:	f001 fc3c 	bl	d79c6 <__aeabi_atexit>
    return &factory;
}
   d614e:	4804      	ldr	r0, [pc, #16]	; (d6160 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6150:	bd10      	pop	{r4, pc}
   d6152:	bf00      	nop
   d6154:	2003e40c 	.word	0x2003e40c
   d6158:	2003e338 	.word	0x2003e338
   d615c:	000d5f3d 	.word	0x000d5f3d
   d6160:	2003e2c0 	.word	0x2003e2c0

000d6164 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6164:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6166:	2500      	movs	r5, #0
   d6168:	4604      	mov	r4, r0
   d616a:	6005      	str	r5, [r0, #0]
   d616c:	6045      	str	r5, [r0, #4]
   d616e:	6085      	str	r5, [r0, #8]
   d6170:	6105      	str	r5, [r0, #16]
   d6172:	6145      	str	r5, [r0, #20]
   d6174:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6176:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d617a:	f7fe fb3d 	bl	d47f8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d617e:	f7ff ffb9 	bl	d60f4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d6182:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6184:	f7ff ffd2 	bl	d612c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d6188:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d618a:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d618c:	4620      	mov	r0, r4
   d618e:	bd38      	pop	{r3, r4, r5, pc}

000d6190 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d6190:	b510      	push	{r4, lr}
    static LogManager mgr;
   d6192:	4c0a      	ldr	r4, [pc, #40]	; (d61bc <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6194:	6823      	ldr	r3, [r4, #0]
   d6196:	07db      	lsls	r3, r3, #31
   d6198:	d40e      	bmi.n	d61b8 <_ZN5spark10LogManager8instanceEv+0x28>
   d619a:	4620      	mov	r0, r4
   d619c:	f7fd ff8c 	bl	d40b8 <__cxa_guard_acquire>
   d61a0:	b150      	cbz	r0, d61b8 <_ZN5spark10LogManager8instanceEv+0x28>
   d61a2:	4807      	ldr	r0, [pc, #28]	; (d61c0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d61a4:	f7ff ffde 	bl	d6164 <_ZN5spark10LogManagerC1Ev>
   d61a8:	4620      	mov	r0, r4
   d61aa:	f7fd ff8a 	bl	d40c2 <__cxa_guard_release>
   d61ae:	4a05      	ldr	r2, [pc, #20]	; (d61c4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d61b0:	4905      	ldr	r1, [pc, #20]	; (d61c8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d61b2:	4803      	ldr	r0, [pc, #12]	; (d61c0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d61b4:	f001 fc07 	bl	d79c6 <__aeabi_atexit>
    return &mgr;
}
   d61b8:	4801      	ldr	r0, [pc, #4]	; (d61c0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d61ba:	bd10      	pop	{r4, pc}
   d61bc:	2003e3e0 	.word	0x2003e3e0
   d61c0:	2003e3e4 	.word	0x2003e3e4
   d61c4:	2003e338 	.word	0x2003e338
   d61c8:	000d65fb 	.word	0x000d65fb

000d61cc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d61cc:	2300      	movs	r3, #0
   d61ce:	4a02      	ldr	r2, [pc, #8]	; (d61d8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d61d0:	4902      	ldr	r1, [pc, #8]	; (d61dc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d61d2:	4803      	ldr	r0, [pc, #12]	; (d61e0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d61d4:	f7fe bbe0 	b.w	d4998 <log_set_callbacks>
   d61d8:	000d64dd 	.word	0x000d64dd
   d61dc:	000d646d 	.word	0x000d646d
   d61e0:	000d63f5 	.word	0x000d63f5

000d61e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d61e4:	2300      	movs	r3, #0
   d61e6:	461a      	mov	r2, r3
   d61e8:	4619      	mov	r1, r3
   d61ea:	4618      	mov	r0, r3
   d61ec:	f7fe bbd4 	b.w	d4998 <log_set_callbacks>

000d61f0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d61f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61f2:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d61f4:	688e      	ldr	r6, [r1, #8]
   d61f6:	f851 3b04 	ldr.w	r3, [r1], #4
   d61fa:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d61fe:	4605      	mov	r5, r0
   d6200:	a801      	add	r0, sp, #4
   d6202:	f7ff f913 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6206:	4622      	mov	r2, r4
   d6208:	4631      	mov	r1, r6
   d620a:	4628      	mov	r0, r5
   d620c:	f001 fbb0 	bl	d7970 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6210:	a801      	add	r0, sp, #4
   d6212:	f7ff f92a 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6216:	4628      	mov	r0, r5
   d6218:	b002      	add	sp, #8
   d621a:	bd70      	pop	{r4, r5, r6, pc}

000d621c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d621c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d621e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6220:	690e      	ldr	r6, [r1, #16]
   d6222:	f851 3b04 	ldr.w	r3, [r1], #4
   d6226:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d622a:	4605      	mov	r5, r0
   d622c:	a801      	add	r0, sp, #4
   d622e:	f7ff f8fd 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6232:	4622      	mov	r2, r4
   d6234:	4631      	mov	r1, r6
   d6236:	4628      	mov	r0, r5
   d6238:	f001 fbb5 	bl	d79a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d623c:	a801      	add	r0, sp, #4
   d623e:	f7ff f914 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6242:	4628      	mov	r0, r5
   d6244:	b002      	add	sp, #8
   d6246:	bd70      	pop	{r4, r5, r6, pc}

000d6248 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6248:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d624a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d624c:	68ce      	ldr	r6, [r1, #12]
   d624e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6252:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6256:	4605      	mov	r5, r0
   d6258:	a801      	add	r0, sp, #4
   d625a:	f7ff f8e7 	bl	d542c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d625e:	4622      	mov	r2, r4
   d6260:	4631      	mov	r1, r6
   d6262:	4628      	mov	r0, r5
   d6264:	f001 fb5c 	bl	d7920 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6268:	a801      	add	r0, sp, #4
   d626a:	f7ff f8fe 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d626e:	4628      	mov	r0, r5
   d6270:	b002      	add	sp, #8
   d6272:	bd70      	pop	{r4, r5, r6, pc}

000d6274 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d6274:	b530      	push	{r4, r5, lr}
   d6276:	b08b      	sub	sp, #44	; 0x2c
   d6278:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d627a:	4601      	mov	r1, r0
   d627c:	a804      	add	r0, sp, #16
   d627e:	f7ff ffb7 	bl	d61f0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d6282:	a804      	add	r0, sp, #16
   d6284:	f001 fa7f 	bl	d7786 <_ZN5spark18JSONObjectIterator4nextEv>
   d6288:	b1e8      	cbz	r0, d62c6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d628a:	a904      	add	r1, sp, #16
   d628c:	4668      	mov	r0, sp
   d628e:	f7ff ffdb 	bl	d6248 <_ZNK5spark18JSONObjectIterator4nameEv>
   d6292:	490f      	ldr	r1, [pc, #60]	; (d62d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d6294:	9802      	ldr	r0, [sp, #8]
   d6296:	f7ff fe91 	bl	d5fbc <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d629a:	4604      	mov	r4, r0
   d629c:	b110      	cbz	r0, d62a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d629e:	1c2c      	adds	r4, r5, #0
   d62a0:	bf18      	it	ne
   d62a2:	2401      	movne	r4, #1
   d62a4:	a801      	add	r0, sp, #4
   d62a6:	f7ff f8e0 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62aa:	2c00      	cmp	r4, #0
   d62ac:	d0e9      	beq.n	d6282 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d62ae:	a904      	add	r1, sp, #16
   d62b0:	4668      	mov	r0, sp
   d62b2:	f7ff ffb3 	bl	d621c <_ZNK5spark18JSONObjectIterator5valueEv>
   d62b6:	4668      	mov	r0, sp
   d62b8:	f001 fa45 	bl	d7746 <_ZNK5spark9JSONValue5toIntEv>
   d62bc:	6028      	str	r0, [r5, #0]
   d62be:	a801      	add	r0, sp, #4
   d62c0:	f7ff f8d3 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62c4:	e7dd      	b.n	d6282 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d62c6:	a805      	add	r0, sp, #20
   d62c8:	f7ff f8cf 	bl	d546a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d62cc:	b00b      	add	sp, #44	; 0x2c
   d62ce:	bd30      	pop	{r4, r5, pc}
   d62d0:	000d86bc 	.word	0x000d86bc

000d62d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d62d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d62d6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d62d8:	4620      	mov	r0, r4
   d62da:	4913      	ldr	r1, [pc, #76]	; (d6328 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d62dc:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d62de:	f001 ff1d 	bl	d811c <strcmp>
   d62e2:	b940      	cbnz	r0, d62f6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d62e4:	f000 ff5c 	bl	d71a0 <_Z16_fetch_usbserialv>
   d62e8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d62ec:	f000 ff48 	bl	d7180 <_ZN9USBSerial5beginEl>
        return &Serial;
   d62f0:	f000 ff56 	bl	d71a0 <_Z16_fetch_usbserialv>
   d62f4:	e015      	b.n	d6322 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d62f6:	490d      	ldr	r1, [pc, #52]	; (d632c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d62f8:	4620      	mov	r0, r4
   d62fa:	f001 ff0f 	bl	d811c <strcmp>
   d62fe:	b978      	cbnz	r0, d6320 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6300:	a902      	add	r1, sp, #8
   d6302:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6306:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d630a:	4628      	mov	r0, r5
   d630c:	f7ff ffb2 	bl	d6274 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6310:	f000 ffce 	bl	d72b0 <_Z22__fetch_global_Serial1v>
   d6314:	9901      	ldr	r1, [sp, #4]
   d6316:	f000 ffc5 	bl	d72a4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d631a:	f000 ffc9 	bl	d72b0 <_Z22__fetch_global_Serial1v>
   d631e:	e000      	b.n	d6322 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6320:	2000      	movs	r0, #0
}
   d6322:	b003      	add	sp, #12
   d6324:	bd30      	pop	{r4, r5, pc}
   d6326:	bf00      	nop
   d6328:	000d86c1 	.word	0x000d86c1
   d632c:	000d86c8 	.word	0x000d86c8

000d6330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6330:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6332:	6804      	ldr	r4, [r0, #0]
   d6334:	6843      	ldr	r3, [r0, #4]
   d6336:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6338:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d633a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d633e:	42a6      	cmp	r6, r4
   d6340:	d005      	beq.n	d634e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6342:	f104 0008 	add.w	r0, r4, #8
   d6346:	f7ff fff3 	bl	d6330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d634a:	3414      	adds	r4, #20
   d634c:	e7f7      	b.n	d633e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d634e:	6828      	ldr	r0, [r5, #0]
   d6350:	f7fe fbae 	bl	d4ab0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6354:	4628      	mov	r0, r5
   d6356:	bd70      	pop	{r4, r5, r6, pc}

000d6358 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6358:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d635a:	6804      	ldr	r4, [r0, #0]
   d635c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d635e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6360:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6364:	42a6      	cmp	r6, r4
   d6366:	d004      	beq.n	d6372 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6368:	4620      	mov	r0, r4
   d636a:	f7fe fc31 	bl	d4bd0 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d636e:	3410      	adds	r4, #16
   d6370:	e7f8      	b.n	d6364 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6372:	6828      	ldr	r0, [r5, #0]
   d6374:	f7fe fb9c 	bl	d4ab0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6378:	4628      	mov	r0, r5
   d637a:	bd70      	pop	{r4, r5, r6, pc}

000d637c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d637c:	b510      	push	{r4, lr}
   d637e:	4604      	mov	r4, r0
   d6380:	300c      	adds	r0, #12
   d6382:	f7ff ffd5 	bl	d6330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6386:	4620      	mov	r0, r4
   d6388:	f7ff ffe6 	bl	d6358 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d638c:	4620      	mov	r0, r4
   d638e:	bd10      	pop	{r4, pc}

000d6390 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6390:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6392:	4b04      	ldr	r3, [pc, #16]	; (d63a4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6394:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6396:	f840 3b04 	str.w	r3, [r0], #4
   d639a:	f7ff ffef 	bl	d637c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d639e:	4620      	mov	r0, r4
   d63a0:	bd10      	pop	{r4, pc}
   d63a2:	bf00      	nop
   d63a4:	000d82e4 	.word	0x000d82e4

000d63a8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d63a8:	b510      	push	{r4, lr}
   d63aa:	4604      	mov	r4, r0
   d63ac:	f7ff fff0 	bl	d6390 <_ZN5spark16StreamLogHandlerD1Ev>
   d63b0:	4620      	mov	r0, r4
   d63b2:	2124      	movs	r1, #36	; 0x24
   d63b4:	f001 fb14 	bl	d79e0 <_ZdlPvj>
   d63b8:	4620      	mov	r0, r4
   d63ba:	bd10      	pop	{r4, pc}

000d63bc <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d63bc:	b510      	push	{r4, lr}
   d63be:	4b03      	ldr	r3, [pc, #12]	; (d63cc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d63c0:	6003      	str	r3, [r0, #0]
   d63c2:	4604      	mov	r4, r0
   d63c4:	f7ff ffe4 	bl	d6390 <_ZN5spark16StreamLogHandlerD1Ev>
   d63c8:	4620      	mov	r0, r4
   d63ca:	bd10      	pop	{r4, pc}
   d63cc:	000d86ac 	.word	0x000d86ac

000d63d0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d63d0:	b510      	push	{r4, lr}
   d63d2:	4604      	mov	r4, r0
   d63d4:	f7ff fff2 	bl	d63bc <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d63d8:	4620      	mov	r0, r4
   d63da:	2124      	movs	r1, #36	; 0x24
   d63dc:	f001 fb00 	bl	d79e0 <_ZdlPvj>
   d63e0:	4620      	mov	r0, r4
   d63e2:	bd10      	pop	{r4, pc}

000d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d63e4:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d63e6:	6803      	ldr	r3, [r0, #0]
   d63e8:	4604      	mov	r4, r0
   d63ea:	6818      	ldr	r0, [r3, #0]
   d63ec:	f7fe fa1c 	bl	d4828 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d63f0:	4620      	mov	r0, r4
   d63f2:	bd10      	pop	{r4, pc}

000d63f4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d63f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63f8:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d63fa:	4b1b      	ldr	r3, [pc, #108]	; (d6468 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d63fc:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d63fe:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6402:	b085      	sub	sp, #20
   d6404:	4682      	mov	sl, r0
   d6406:	460e      	mov	r6, r1
   d6408:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d640a:	bb53      	cbnz	r3, d6462 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d640c:	f7ff fec0 	bl	d6190 <_ZN5spark10LogManager8instanceEv>
   d6410:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6412:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6414:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6416:	f7ff fde5 	bl	d5fe4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d641a:	7b23      	ldrb	r3, [r4, #12]
   d641c:	b9f3      	cbnz	r3, d645c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d641e:	2301      	movs	r3, #1
   d6420:	7323      	strb	r3, [r4, #12]
   d6422:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6424:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6426:	b2f6      	uxtb	r6, r6
   d6428:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d642c:	454d      	cmp	r5, r9
   d642e:	d013      	beq.n	d6458 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6430:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6434:	4641      	mov	r1, r8
   d6436:	1d38      	adds	r0, r7, #4
   d6438:	f7ff fe30 	bl	d609c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d643c:	4286      	cmp	r6, r0
   d643e:	d3f5      	bcc.n	d642c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6440:	683b      	ldr	r3, [r7, #0]
   d6442:	f8cd b000 	str.w	fp, [sp]
   d6446:	689b      	ldr	r3, [r3, #8]
   d6448:	469e      	mov	lr, r3
   d644a:	4638      	mov	r0, r7
   d644c:	4643      	mov	r3, r8
   d644e:	4632      	mov	r2, r6
   d6450:	4651      	mov	r1, sl
   d6452:	4677      	mov	r7, lr
   d6454:	47b8      	blx	r7
   d6456:	e7e9      	b.n	d642c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6458:	2300      	movs	r3, #0
   d645a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d645c:	a803      	add	r0, sp, #12
   d645e:	f7ff ffc1 	bl	d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6462:	b005      	add	sp, #20
   d6464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6468:	e000ed00 	.word	0xe000ed00

000d646c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d646c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6470:	4699      	mov	r9, r3
   d6472:	4b19      	ldr	r3, [pc, #100]	; (d64d8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6474:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6476:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d647a:	4607      	mov	r7, r0
   d647c:	4688      	mov	r8, r1
   d647e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6480:	bb33      	cbnz	r3, d64d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6482:	f7ff fe85 	bl	d6190 <_ZN5spark10LogManager8instanceEv>
   d6486:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6488:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d648a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d648c:	f7ff fdaa 	bl	d5fe4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6490:	7b23      	ldrb	r3, [r4, #12]
   d6492:	b9d3      	cbnz	r3, d64ca <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6494:	2301      	movs	r3, #1
   d6496:	7323      	strb	r3, [r4, #12]
   d6498:	6825      	ldr	r5, [r4, #0]
   d649a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d649c:	fa5f fb86 	uxtb.w	fp, r6
   d64a0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d64a4:	4555      	cmp	r5, sl
   d64a6:	d00e      	beq.n	d64c6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d64a8:	f855 6b04 	ldr.w	r6, [r5], #4
   d64ac:	4649      	mov	r1, r9
   d64ae:	1d30      	adds	r0, r6, #4
   d64b0:	f7ff fdf4 	bl	d609c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d64b4:	4583      	cmp	fp, r0
   d64b6:	d3f5      	bcc.n	d64a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d64b8:	6833      	ldr	r3, [r6, #0]
   d64ba:	4642      	mov	r2, r8
   d64bc:	68db      	ldr	r3, [r3, #12]
   d64be:	4639      	mov	r1, r7
   d64c0:	4630      	mov	r0, r6
   d64c2:	4798      	blx	r3
   d64c4:	e7ee      	b.n	d64a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d64c6:	2300      	movs	r3, #0
   d64c8:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d64ca:	a801      	add	r0, sp, #4
   d64cc:	f7ff ff8a 	bl	d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d64d0:	b003      	add	sp, #12
   d64d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d64d6:	bf00      	nop
   d64d8:	e000ed00 	.word	0xe000ed00

000d64dc <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d64dc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d64e0:	4b15      	ldr	r3, [pc, #84]	; (d6538 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d64e2:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d64e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d64e8:	4604      	mov	r4, r0
   d64ea:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d64ec:	b9fb      	cbnz	r3, d652e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d64ee:	f7ff fe4f 	bl	d6190 <_ZN5spark10LogManager8instanceEv>
   d64f2:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d64f4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d64f6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d64f8:	f7ff fd74 	bl	d5fe4 <_ZN14RecursiveMutex4lockEv>
   d64fc:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6500:	2646      	movs	r6, #70	; 0x46
   d6502:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6506:	42af      	cmp	r7, r5
   d6508:	d107      	bne.n	d651a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d650a:	a801      	add	r0, sp, #4
   d650c:	f7ff ff6a 	bl	d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6510:	42b4      	cmp	r4, r6
   d6512:	bfb4      	ite	lt
   d6514:	2000      	movlt	r0, #0
   d6516:	2001      	movge	r0, #1
   d6518:	e00a      	b.n	d6530 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d651a:	f855 0b04 	ldr.w	r0, [r5], #4
   d651e:	4641      	mov	r1, r8
   d6520:	3004      	adds	r0, #4
   d6522:	f7ff fdbb 	bl	d609c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6526:	4286      	cmp	r6, r0
   d6528:	bfa8      	it	ge
   d652a:	4606      	movge	r6, r0
   d652c:	e7eb      	b.n	d6506 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d652e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6530:	b002      	add	sp, #8
   d6532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6536:	bf00      	nop
   d6538:	e000ed00 	.word	0xe000ed00

000d653c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d653c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d653e:	6803      	ldr	r3, [r0, #0]
   d6540:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6542:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6544:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6548:	429a      	cmp	r2, r3
   d654a:	4618      	mov	r0, r3
   d654c:	d00e      	beq.n	d656c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d654e:	6806      	ldr	r6, [r0, #0]
   d6550:	680d      	ldr	r5, [r1, #0]
   d6552:	42ae      	cmp	r6, r5
   d6554:	f103 0304 	add.w	r3, r3, #4
   d6558:	d1f6      	bne.n	d6548 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d655a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d655c:	1a52      	subs	r2, r2, r1
   d655e:	f001 fd79 	bl	d8054 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6562:	6863      	ldr	r3, [r4, #4]
   d6564:	3b01      	subs	r3, #1
   d6566:	6063      	str	r3, [r4, #4]
    return true;
   d6568:	2001      	movs	r0, #1
}
   d656a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d656c:	2000      	movs	r0, #0
   d656e:	bd70      	pop	{r4, r5, r6, pc}

000d6570 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6572:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6574:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6576:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6578:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d657a:	f7ff fd33 	bl	d5fe4 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d657e:	a901      	add	r1, sp, #4
   d6580:	4620      	mov	r0, r4
   d6582:	f7ff ffdb 	bl	d653c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6586:	b920      	cbnz	r0, d6592 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6588:	a803      	add	r0, sp, #12
   d658a:	f7ff ff2b 	bl	d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d658e:	b004      	add	sp, #16
   d6590:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6592:	6863      	ldr	r3, [r4, #4]
   d6594:	2b00      	cmp	r3, #0
   d6596:	d1f7      	bne.n	d6588 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6598:	f7ff fe24 	bl	d61e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d659c:	e7f4      	b.n	d6588 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d659e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d659e:	b570      	push	{r4, r5, r6, lr}
   d65a0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d65a2:	6943      	ldr	r3, [r0, #20]
   d65a4:	2618      	movs	r6, #24
   d65a6:	4604      	mov	r4, r0
   d65a8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d65ac:	42ae      	cmp	r6, r5
   d65ae:	d015      	beq.n	d65dc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d65b0:	f105 0110 	add.w	r1, r5, #16
   d65b4:	4620      	mov	r0, r4
   d65b6:	f7ff ffc1 	bl	d653c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d65ba:	6863      	ldr	r3, [r4, #4]
   d65bc:	b90b      	cbnz	r3, d65c2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d65be:	f7ff fe11 	bl	d61e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d65c2:	69e0      	ldr	r0, [r4, #28]
   d65c4:	6929      	ldr	r1, [r5, #16]
   d65c6:	6803      	ldr	r3, [r0, #0]
   d65c8:	68db      	ldr	r3, [r3, #12]
   d65ca:	4798      	blx	r3
        if (h.stream) {
   d65cc:	6969      	ldr	r1, [r5, #20]
   d65ce:	b119      	cbz	r1, d65d8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d65d0:	6a20      	ldr	r0, [r4, #32]
   d65d2:	6803      	ldr	r3, [r0, #0]
   d65d4:	68db      	ldr	r3, [r3, #12]
   d65d6:	4798      	blx	r3
   d65d8:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d65da:	e7e7      	b.n	d65ac <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d65dc:	6925      	ldr	r5, [r4, #16]
   d65de:	6963      	ldr	r3, [r4, #20]
   d65e0:	2618      	movs	r6, #24
   d65e2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d65e6:	42b5      	cmp	r5, r6
   d65e8:	d004      	beq.n	d65f4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d65ea:	4628      	mov	r0, r5
   d65ec:	f7fe faf0 	bl	d4bd0 <_ZN6StringD1Ev>
   d65f0:	3518      	adds	r5, #24
   d65f2:	e7f8      	b.n	d65e6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d65f4:	2300      	movs	r3, #0
   d65f6:	6163      	str	r3, [r4, #20]
   d65f8:	bd70      	pop	{r4, r5, r6, pc}

000d65fa <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d65fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d65fc:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d65fe:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6600:	f7ff fdf0 	bl	d61e4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6604:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6608:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d660c:	f7ff fcea 	bl	d5fe4 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6610:	4620      	mov	r0, r4
   d6612:	f7ff ffc4 	bl	d659e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6616:	4628      	mov	r0, r5
   d6618:	f7ff fee4 	bl	d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d661c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d661e:	b108      	cbz	r0, d6624 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6620:	f7fe f8f2 	bl	d4808 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6624:	6925      	ldr	r5, [r4, #16]
   d6626:	6963      	ldr	r3, [r4, #20]
   d6628:	2618      	movs	r6, #24
   d662a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d662e:	42b5      	cmp	r5, r6
   d6630:	d004      	beq.n	d663c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6632:	4628      	mov	r0, r5
   d6634:	f7fe facc 	bl	d4bd0 <_ZN6StringD1Ev>
   d6638:	3518      	adds	r5, #24
   d663a:	e7f8      	b.n	d662e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d663c:	6920      	ldr	r0, [r4, #16]
   d663e:	f7fe fa37 	bl	d4ab0 <free>
   d6642:	6820      	ldr	r0, [r4, #0]
   d6644:	f7fe fa34 	bl	d4ab0 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6648:	4620      	mov	r0, r4
   d664a:	b002      	add	sp, #8
   d664c:	bd70      	pop	{r4, r5, r6, pc}

000d664e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d664e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6650:	680a      	ldr	r2, [r1, #0]
   d6652:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6654:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6656:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6658:	684a      	ldr	r2, [r1, #4]
   d665a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d665c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d665e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6660:	688a      	ldr	r2, [r1, #8]
   d6662:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6664:	608b      	str	r3, [r1, #8]
   d6666:	4770      	bx	lr

000d6668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6668:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d666a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d666c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d666e:	6003      	str	r3, [r0, #0]
   d6670:	6043      	str	r3, [r0, #4]
   d6672:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6674:	f7ff ffeb 	bl	d664e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6678:	4620      	mov	r0, r4
   d667a:	bd10      	pop	{r4, pc}

000d667c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d667c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6680:	4604      	mov	r4, r0
   d6682:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6684:	d925      	bls.n	d66d2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6686:	4290      	cmp	r0, r2
   d6688:	d224      	bcs.n	d66d4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d668a:	1a55      	subs	r5, r2, r1
   d668c:	3d14      	subs	r5, #20
   d668e:	442c      	add	r4, r5
   d6690:	f1a1 0714 	sub.w	r7, r1, #20
   d6694:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6698:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d669a:	f1a5 0308 	sub.w	r3, r5, #8
   d669e:	429f      	cmp	r7, r3
   d66a0:	d037      	beq.n	d6712 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d66a2:	b184      	cbz	r4, d66c6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d66a4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d66a8:	6023      	str	r3, [r4, #0]
   d66aa:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d66ae:	80a3      	strh	r3, [r4, #4]
   d66b0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d66b4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d66b6:	60a6      	str	r6, [r4, #8]
   d66b8:	60e6      	str	r6, [r4, #12]
   d66ba:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d66bc:	4629      	mov	r1, r5
   d66be:	f104 0008 	add.w	r0, r4, #8
   d66c2:	f7ff ffc4 	bl	d664e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d66c6:	4628      	mov	r0, r5
   d66c8:	f7ff fe32 	bl	d6330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d66cc:	3c14      	subs	r4, #20
   d66ce:	3d14      	subs	r5, #20
   d66d0:	e7e3      	b.n	d669a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d66d2:	d01e      	beq.n	d6712 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d66d4:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d66d8:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d66da:	f1a5 0308 	sub.w	r3, r5, #8
   d66de:	429e      	cmp	r6, r3
   d66e0:	d017      	beq.n	d6712 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d66e2:	b184      	cbz	r4, d6706 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d66e4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d66e8:	6023      	str	r3, [r4, #0]
   d66ea:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d66ee:	80a3      	strh	r3, [r4, #4]
   d66f0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d66f4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d66f6:	60a7      	str	r7, [r4, #8]
   d66f8:	60e7      	str	r7, [r4, #12]
   d66fa:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d66fc:	4629      	mov	r1, r5
   d66fe:	f104 0008 	add.w	r0, r4, #8
   d6702:	f7ff ffa4 	bl	d664e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6706:	4628      	mov	r0, r5
   d6708:	f7ff fe12 	bl	d6330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d670c:	3414      	adds	r4, #20
   d670e:	3514      	adds	r5, #20
   d6710:	e7e3      	b.n	d66da <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6714 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6716:	6845      	ldr	r5, [r0, #4]
   d6718:	6883      	ldr	r3, [r0, #8]
   d671a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d671c:	4604      	mov	r4, r0
   d671e:	460e      	mov	r6, r1
   d6720:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6722:	db0e      	blt.n	d6742 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6724:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6726:	2d00      	cmp	r5, #0
   d6728:	dd05      	ble.n	d6736 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d672a:	00a9      	lsls	r1, r5, #2
   d672c:	6800      	ldr	r0, [r0, #0]
   d672e:	f7fe f9c7 	bl	d4ac0 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6732:	b920      	cbnz	r0, d673e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6736:	6800      	ldr	r0, [r0, #0]
   d6738:	f7fe f9ba 	bl	d4ab0 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d673c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d673e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6740:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6742:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6744:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6746:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d674a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d674e:	1a52      	subs	r2, r2, r1
   d6750:	1d08      	adds	r0, r1, #4
   d6752:	f001 fc7f 	bl	d8054 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6756:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d675a:	6863      	ldr	r3, [r4, #4]
   d675c:	3301      	adds	r3, #1
   d675e:	6063      	str	r3, [r4, #4]
   d6760:	2001      	movs	r0, #1
    return true;
}
   d6762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6764 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6764:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6766:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6768:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d676a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d676c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d676e:	f7ff fc39 	bl	d5fe4 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6772:	6823      	ldr	r3, [r4, #0]
   d6774:	6861      	ldr	r1, [r4, #4]
   d6776:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d677a:	4283      	cmp	r3, r0
   d677c:	461a      	mov	r2, r3
   d677e:	d009      	beq.n	d6794 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6780:	6812      	ldr	r2, [r2, #0]
   d6782:	42aa      	cmp	r2, r5
   d6784:	f103 0304 	add.w	r3, r3, #4
   d6788:	d1f7      	bne.n	d677a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d678a:	a801      	add	r0, sp, #4
   d678c:	f7ff fe2a 	bl	d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6790:	2500      	movs	r5, #0
   d6792:	e00e      	b.n	d67b2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6794:	462a      	mov	r2, r5
   d6796:	4620      	mov	r0, r4
   d6798:	f7ff ffbc 	bl	d6714 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d679c:	4605      	mov	r5, r0
   d679e:	2800      	cmp	r0, #0
   d67a0:	d0f3      	beq.n	d678a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d67a2:	6863      	ldr	r3, [r4, #4]
   d67a4:	2b01      	cmp	r3, #1
   d67a6:	d101      	bne.n	d67ac <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d67a8:	f7ff fd10 	bl	d61cc <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d67ac:	a801      	add	r0, sp, #4
   d67ae:	f7ff fe19 	bl	d63e4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d67b2:	4628      	mov	r0, r5
   d67b4:	b003      	add	sp, #12
   d67b6:	bd30      	pop	{r4, r5, pc}

000d67b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d67b8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d67ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d67bc:	4606      	mov	r6, r0
   d67be:	460c      	mov	r4, r1
   d67c0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d67c2:	d914      	bls.n	d67ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d67c4:	4290      	cmp	r0, r2
   d67c6:	d213      	bcs.n	d67f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d67c8:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d67cc:	1a6c      	subs	r4, r5, r1
   d67ce:	f1a1 0710 	sub.w	r7, r1, #16
   d67d2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d67d4:	42af      	cmp	r7, r5
   d67d6:	d018      	beq.n	d680a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d67d8:	b11c      	cbz	r4, d67e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d67da:	4629      	mov	r1, r5
   d67dc:	4620      	mov	r0, r4
   d67de:	f7fe f9e7 	bl	d4bb0 <_ZN6StringC1EOS_>
                end->~T();
   d67e2:	4628      	mov	r0, r5
   d67e4:	f7fe f9f4 	bl	d4bd0 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d67e8:	3d10      	subs	r5, #16
   d67ea:	3c10      	subs	r4, #16
   d67ec:	e7f2      	b.n	d67d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d67ee:	d00c      	beq.n	d680a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d67f0:	42ac      	cmp	r4, r5
   d67f2:	d00a      	beq.n	d680a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d67f4:	b11e      	cbz	r6, d67fe <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d67f6:	4621      	mov	r1, r4
   d67f8:	4630      	mov	r0, r6
   d67fa:	f7fe f9d9 	bl	d4bb0 <_ZN6StringC1EOS_>
                p->~T();
   d67fe:	4620      	mov	r0, r4
   d6800:	f7fe f9e6 	bl	d4bd0 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6804:	3410      	adds	r4, #16
   d6806:	3610      	adds	r6, #16
   d6808:	e7f2      	b.n	d67f0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d680a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d680c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d680c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d680e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6810:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6812:	dd0b      	ble.n	d682c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6814:	0130      	lsls	r0, r6, #4
   d6816:	f7fe f943 	bl	d4aa0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d681a:	4604      	mov	r4, r0
   d681c:	b170      	cbz	r0, d683c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d681e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6822:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6826:	f7ff ffc7 	bl	d67b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d682a:	e000      	b.n	d682e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d682c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d682e:	6828      	ldr	r0, [r5, #0]
   d6830:	f7fe f93e 	bl	d4ab0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6834:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6836:	60ae      	str	r6, [r5, #8]
        return true;
   d6838:	2001      	movs	r0, #1
   d683a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d683c:	bd70      	pop	{r4, r5, r6, pc}

000d683e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d683e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6842:	2300      	movs	r3, #0
   d6844:	b095      	sub	sp, #84	; 0x54
   d6846:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6848:	2246      	movs	r2, #70	; 0x46
   d684a:	6003      	str	r3, [r0, #0]
   d684c:	6043      	str	r3, [r0, #4]
   d684e:	6083      	str	r3, [r0, #8]
   d6850:	60c3      	str	r3, [r0, #12]
   d6852:	6103      	str	r3, [r0, #16]
   d6854:	6143      	str	r3, [r0, #20]
   d6856:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6858:	9102      	str	r1, [sp, #8]
   d685a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d685e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6860:	4299      	cmp	r1, r3
   d6862:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6864:	9309      	str	r3, [sp, #36]	; 0x24
   d6866:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6868:	f340 809d 	ble.w	d69a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d686c:	a808      	add	r0, sp, #32
   d686e:	f7ff ffcd 	bl	d680c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6872:	2800      	cmp	r0, #0
   d6874:	f040 8097 	bne.w	d69a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6878:	e08e      	b.n	d6998 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d687a:	4621      	mov	r1, r4
   d687c:	a80b      	add	r0, sp, #44	; 0x2c
   d687e:	f7fe f997 	bl	d4bb0 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6882:	a90b      	add	r1, sp, #44	; 0x2c
   d6884:	a80f      	add	r0, sp, #60	; 0x3c
   d6886:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6888:	f7fe f992 	bl	d4bb0 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d688c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d688e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6890:	4299      	cmp	r1, r3
   d6892:	f2c0 80ce 	blt.w	d6a32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6896:	3101      	adds	r1, #1
   d6898:	a808      	add	r0, sp, #32
   d689a:	f7ff ffb7 	bl	d680c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d689e:	2800      	cmp	r0, #0
   d68a0:	f040 80c7 	bne.w	d6a32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d68a4:	a80f      	add	r0, sp, #60	; 0x3c
   d68a6:	f7fe f993 	bl	d4bd0 <_ZN6StringD1Ev>
   d68aa:	a80b      	add	r0, sp, #44	; 0x2c
   d68ac:	f7fe f990 	bl	d4bd0 <_ZN6StringD1Ev>
   d68b0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d68b2:	42a7      	cmp	r7, r4
   d68b4:	d1e1      	bne.n	d687a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d68b6:	2600      	movs	r6, #0
   d68b8:	960b      	str	r6, [sp, #44]	; 0x2c
   d68ba:	960c      	str	r6, [sp, #48]	; 0x30
   d68bc:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d68be:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d68c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d68c2:	429e      	cmp	r6, r3
   d68c4:	f280 80a8 	bge.w	d6a18 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d68c8:	0133      	lsls	r3, r6, #4
   d68ca:	9a08      	ldr	r2, [sp, #32]
   d68cc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d68ce:	9306      	str	r3, [sp, #24]
        if (!category) {
   d68d0:	2b00      	cmp	r3, #0
   d68d2:	f000 809f 	beq.w	d6a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d68d6:	2314      	movs	r3, #20
   d68d8:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d68da:	f8cd 901c 	str.w	r9, [sp, #28]
   d68de:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d68e0:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d68e2:	a907      	add	r1, sp, #28
   d68e4:	a806      	add	r0, sp, #24
   d68e6:	f7ff fb2c 	bl	d5f42 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d68ea:	4607      	mov	r7, r0
   d68ec:	2800      	cmp	r0, #0
   d68ee:	f000 8091 	beq.w	d6a14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d68f2:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d68f4:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d68f6:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d68fa:	9a07      	ldr	r2, [sp, #28]
   d68fc:	4620      	mov	r0, r4
   d68fe:	f7ff fb8d 	bl	d601c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6902:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6906:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6908:	f1b8 0f00 	cmp.w	r8, #0
   d690c:	d153      	bne.n	d69b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d690e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6912:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6916:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d691a:	970f      	str	r7, [sp, #60]	; 0x3c
   d691c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6920:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6924:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6928:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d692c:	6867      	ldr	r7, [r4, #4]
   d692e:	68a3      	ldr	r3, [r4, #8]
   d6930:	429f      	cmp	r7, r3
   d6932:	da4f      	bge.n	d69d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6934:	9b00      	ldr	r3, [sp, #0]
   d6936:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d693a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d693c:	2214      	movs	r2, #20
   d693e:	4353      	muls	r3, r2
   d6940:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6944:	fb02 b201 	mla	r2, r2, r1, fp
   d6948:	f107 0014 	add.w	r0, r7, #20
   d694c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d694e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6950:	f7ff fe94 	bl	d667c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6954:	b1a7      	cbz	r7, d6980 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6956:	9b03      	ldr	r3, [sp, #12]
   d6958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d695a:	f84b 2003 	str.w	r2, [fp, r3]
   d695e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6962:	80bb      	strh	r3, [r7, #4]
   d6964:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6968:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d696a:	f8c7 9008 	str.w	r9, [r7, #8]
   d696e:	f8c7 900c 	str.w	r9, [r7, #12]
   d6972:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6976:	a911      	add	r1, sp, #68	; 0x44
   d6978:	f107 0008 	add.w	r0, r7, #8
   d697c:	f7ff fe67 	bl	d664e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6980:	6863      	ldr	r3, [r4, #4]
   d6982:	3301      	adds	r3, #1
   d6984:	6063      	str	r3, [r4, #4]
   d6986:	a811      	add	r0, sp, #68	; 0x44
   d6988:	f7ff fcd2 	bl	d6330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d698c:	f1b8 0f00 	cmp.w	r8, #0
   d6990:	d011      	beq.n	d69b6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6992:	a80b      	add	r0, sp, #44	; 0x2c
   d6994:	f7ff fccc 	bl	d6330 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6998:	a808      	add	r0, sp, #32
   d699a:	f7ff fcdd 	bl	d6358 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d699e:	4628      	mov	r0, r5
   d69a0:	b015      	add	sp, #84	; 0x54
   d69a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d69a6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d69aa:	f8da 3004 	ldr.w	r3, [sl, #4]
   d69ae:	2714      	movs	r7, #20
   d69b0:	fb07 4703 	mla	r7, r7, r3, r4
   d69b4:	e77d      	b.n	d68b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d69b6:	6823      	ldr	r3, [r4, #0]
   d69b8:	9a00      	ldr	r2, [sp, #0]
   d69ba:	2414      	movs	r4, #20
   d69bc:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d69c0:	9b06      	ldr	r3, [sp, #24]
   d69c2:	781b      	ldrb	r3, [r3, #0]
   d69c4:	bb23      	cbnz	r3, d6a10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d69c6:	f8da 3000 	ldr.w	r3, [sl]
   d69ca:	9a01      	ldr	r2, [sp, #4]
   d69cc:	4413      	add	r3, r2
   d69ce:	7c1b      	ldrb	r3, [r3, #16]
   d69d0:	80e3      	strh	r3, [r4, #6]
   d69d2:	e01d      	b.n	d6a10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d69d4:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d69d6:	2f00      	cmp	r7, #0
   d69d8:	dd0f      	ble.n	d69fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d69da:	2314      	movs	r3, #20
   d69dc:	fb03 f007 	mul.w	r0, r3, r7
   d69e0:	9303      	str	r3, [sp, #12]
   d69e2:	f7fe f85d 	bl	d4aa0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d69e6:	4683      	mov	fp, r0
   d69e8:	b178      	cbz	r0, d6a0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d69ea:	e894 0006 	ldmia.w	r4, {r1, r2}
   d69ee:	9b03      	ldr	r3, [sp, #12]
   d69f0:	fb03 1202 	mla	r2, r3, r2, r1
   d69f4:	f7ff fe42 	bl	d667c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d69f8:	e000      	b.n	d69fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d69fa:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d69fc:	6820      	ldr	r0, [r4, #0]
   d69fe:	f7fe f857 	bl	d4ab0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6a02:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6a06:	60a7      	str	r7, [r4, #8]
   d6a08:	e794      	b.n	d6934 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6a0a:	f04f 0801 	mov.w	r8, #1
   d6a0e:	e7ba      	b.n	d6986 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6a10:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6a12:	e766      	b.n	d68e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6a14:	3601      	adds	r6, #1
   d6a16:	e753      	b.n	d68c0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6a18:	a908      	add	r1, sp, #32
   d6a1a:	4628      	mov	r0, r5
   d6a1c:	f7ff fe17 	bl	d664e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6a20:	a90b      	add	r1, sp, #44	; 0x2c
   d6a22:	f105 000c 	add.w	r0, r5, #12
   d6a26:	f7ff fe12 	bl	d664e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d6a2a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6a2e:	762b      	strb	r3, [r5, #24]
   d6a30:	e7af      	b.n	d6992 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a32:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a36:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6a3a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6a3e:	4631      	mov	r1, r6
   d6a40:	f106 0010 	add.w	r0, r6, #16
   d6a44:	f7ff feb8 	bl	d67b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6a48:	b11e      	cbz	r6, d6a52 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d6a4a:	a90f      	add	r1, sp, #60	; 0x3c
   d6a4c:	4630      	mov	r0, r6
   d6a4e:	f7fe f8af 	bl	d4bb0 <_ZN6StringC1EOS_>
    ++size_;
   d6a52:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6a54:	3301      	adds	r3, #1
   d6a56:	9309      	str	r3, [sp, #36]	; 0x24
   d6a58:	e724      	b.n	d68a4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d6a5c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6a5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6a5e:	4604      	mov	r4, r0
   d6a60:	4b09      	ldr	r3, [pc, #36]	; (d6a88 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6a62:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6a66:	4605      	mov	r5, r0
   d6a68:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6a6a:	a801      	add	r0, sp, #4
   d6a6c:	4611      	mov	r1, r2
   d6a6e:	f7fd fd09 	bl	d4484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6a72:	aa01      	add	r2, sp, #4
   d6a74:	4631      	mov	r1, r6
   d6a76:	4620      	mov	r0, r4
   d6a78:	f7ff fee1 	bl	d683e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6a7c:	a801      	add	r0, sp, #4
   d6a7e:	f7fd fb64 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6a82:	4628      	mov	r0, r5
   d6a84:	b004      	add	sp, #16
   d6a86:	bd70      	pop	{r4, r5, r6, pc}
   d6a88:	000d82e4 	.word	0x000d82e4

000d6a8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a8e:	460f      	mov	r7, r1
   d6a90:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6a92:	492b      	ldr	r1, [pc, #172]	; (d6b40 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6a94:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6a96:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6a98:	4616      	mov	r6, r2
   d6a9a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6a9c:	f001 fb3e 	bl	d811c <strcmp>
   d6aa0:	bb28      	cbnz	r0, d6aee <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6aa2:	2c00      	cmp	r4, #0
   d6aa4:	d049      	beq.n	d6b3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6aa6:	4629      	mov	r1, r5
   d6aa8:	a801      	add	r0, sp, #4
   d6aaa:	f7ff fddd 	bl	d6668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6aae:	4925      	ldr	r1, [pc, #148]	; (d6b44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6ab0:	2024      	movs	r0, #36	; 0x24
   d6ab2:	f000 ff97 	bl	d79e4 <_ZnwjRKSt9nothrow_t>
   d6ab6:	4605      	mov	r5, r0
   d6ab8:	b1b8      	cbz	r0, d6aea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6aba:	a901      	add	r1, sp, #4
   d6abc:	a804      	add	r0, sp, #16
   d6abe:	f7ff fdd3 	bl	d6668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6ac2:	a904      	add	r1, sp, #16
   d6ac4:	a807      	add	r0, sp, #28
   d6ac6:	f7fd fcdd 	bl	d4484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6aca:	aa07      	add	r2, sp, #28
   d6acc:	4631      	mov	r1, r6
   d6ace:	4628      	mov	r0, r5
   d6ad0:	f7ff ffc4 	bl	d6a5c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6ad4:	a807      	add	r0, sp, #28
   d6ad6:	f7fd fb38 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6ada:	4b1b      	ldr	r3, [pc, #108]	; (d6b48 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6adc:	602b      	str	r3, [r5, #0]
   d6ade:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6ae0:	a804      	add	r0, sp, #16
   d6ae2:	f7fd fb32 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6ae6:	4b19      	ldr	r3, [pc, #100]	; (d6b4c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6ae8:	602b      	str	r3, [r5, #0]
   d6aea:	a801      	add	r0, sp, #4
   d6aec:	e01f      	b.n	d6b2e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6aee:	4918      	ldr	r1, [pc, #96]	; (d6b50 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6af0:	4638      	mov	r0, r7
   d6af2:	f001 fb13 	bl	d811c <strcmp>
   d6af6:	b9f0      	cbnz	r0, d6b36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6af8:	b1fc      	cbz	r4, d6b3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6afa:	4629      	mov	r1, r5
   d6afc:	a804      	add	r0, sp, #16
   d6afe:	f7ff fdb3 	bl	d6668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6b02:	4910      	ldr	r1, [pc, #64]	; (d6b44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6b04:	2024      	movs	r0, #36	; 0x24
   d6b06:	f000 ff6d 	bl	d79e4 <_ZnwjRKSt9nothrow_t>
   d6b0a:	4605      	mov	r5, r0
   d6b0c:	b170      	cbz	r0, d6b2c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6b0e:	a904      	add	r1, sp, #16
   d6b10:	a807      	add	r0, sp, #28
   d6b12:	f7fd fcb7 	bl	d4484 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6b16:	aa07      	add	r2, sp, #28
   d6b18:	4631      	mov	r1, r6
   d6b1a:	4628      	mov	r0, r5
   d6b1c:	f7ff ff9e 	bl	d6a5c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6b20:	a807      	add	r0, sp, #28
   d6b22:	f7fd fb12 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6b26:	4b08      	ldr	r3, [pc, #32]	; (d6b48 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6b28:	602b      	str	r3, [r5, #0]
   d6b2a:	622c      	str	r4, [r5, #32]
   d6b2c:	a804      	add	r0, sp, #16
   d6b2e:	f7fd fb0c 	bl	d414a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6b32:	4628      	mov	r0, r5
   d6b34:	e002      	b.n	d6b3c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6b36:	2000      	movs	r0, #0
   d6b38:	e000      	b.n	d6b3c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d6b3a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d6b3c:	b00b      	add	sp, #44	; 0x2c
   d6b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6b40:	000d871a 	.word	0x000d871a
   d6b44:	000d8946 	.word	0x000d8946
   d6b48:	000d87a4 	.word	0x000d87a4
   d6b4c:	000d86ac 	.word	0x000d86ac
   d6b50:	000d871e 	.word	0x000d871e

000d6b54 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6b54:	4b01      	ldr	r3, [pc, #4]	; (d6b5c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6b56:	4a02      	ldr	r2, [pc, #8]	; (d6b60 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6b58:	601a      	str	r2, [r3, #0]
   d6b5a:	4770      	bx	lr
   d6b5c:	2003e410 	.word	0x2003e410
   d6b60:	000d872f 	.word	0x000d872f

000d6b64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6b64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b68:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6b6a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6b6e:	4604      	mov	r4, r0
   d6b70:	460e      	mov	r6, r1
   d6b72:	4617      	mov	r7, r2
   d6b74:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6b76:	f000 fb13 	bl	d71a0 <_Z16_fetch_usbserialv>
   d6b7a:	4581      	cmp	r9, r0
   d6b7c:	d105      	bne.n	d6b8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d6b7e:	485a      	ldr	r0, [pc, #360]	; (d6ce8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6b80:	f000 fce7 	bl	d7552 <_ZN5spark12NetworkClass9listeningEv>
   d6b84:	2800      	cmp	r0, #0
   d6b86:	f040 80ac 	bne.w	d6ce2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d6b8a:	792b      	ldrb	r3, [r5, #4]
   d6b8c:	071b      	lsls	r3, r3, #28
   d6b8e:	d505      	bpl.n	d6b9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6b90:	696b      	ldr	r3, [r5, #20]
   d6b92:	4a56      	ldr	r2, [pc, #344]	; (d6cec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6b94:	6a20      	ldr	r0, [r4, #32]
   d6b96:	2100      	movs	r1, #0
   d6b98:	f7ff f985 	bl	d5ea6 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d6b9c:	f1b8 0f00 	cmp.w	r8, #0
   d6ba0:	d00d      	beq.n	d6bbe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d6ba2:	215b      	movs	r1, #91	; 0x5b
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	f7ff fa2e 	bl	d6006 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6baa:	4641      	mov	r1, r8
   d6bac:	4620      	mov	r0, r4
   d6bae:	f7ff fa1c 	bl	d5fea <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6bb2:	6823      	ldr	r3, [r4, #0]
   d6bb4:	494e      	ldr	r1, [pc, #312]	; (d6cf0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6bb6:	68db      	ldr	r3, [r3, #12]
   d6bb8:	2202      	movs	r2, #2
   d6bba:	4620      	mov	r0, r4
   d6bbc:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6bbe:	792b      	ldrb	r3, [r5, #4]
   d6bc0:	07d9      	lsls	r1, r3, #31
   d6bc2:	d525      	bpl.n	d6c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6bc4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6bc8:	212f      	movs	r1, #47	; 0x2f
   d6bca:	4640      	mov	r0, r8
   d6bcc:	f001 fad9 	bl	d8182 <strrchr>
    if (s1) {
   d6bd0:	b108      	cbz	r0, d6bd6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6bd2:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6bd6:	4641      	mov	r1, r8
   d6bd8:	4620      	mov	r0, r4
   d6bda:	f7ff fa06 	bl	d5fea <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6bde:	792b      	ldrb	r3, [r5, #4]
   d6be0:	079a      	lsls	r2, r3, #30
   d6be2:	d509      	bpl.n	d6bf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6be4:	213a      	movs	r1, #58	; 0x3a
   d6be6:	4620      	mov	r0, r4
   d6be8:	f7ff fa0d 	bl	d6006 <_ZN5spark16StreamLogHandler5writeEc>
   d6bec:	68eb      	ldr	r3, [r5, #12]
   d6bee:	4a41      	ldr	r2, [pc, #260]	; (d6cf4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6bf0:	6a20      	ldr	r0, [r4, #32]
   d6bf2:	2100      	movs	r1, #0
   d6bf4:	f7ff f957 	bl	d5ea6 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6bf8:	792b      	ldrb	r3, [r5, #4]
   d6bfa:	f013 0f04 	tst.w	r3, #4
   d6bfe:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6c00:	bf18      	it	ne
   d6c02:	493d      	ldrne	r1, [pc, #244]	; (d6cf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6c04:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6c06:	bf08      	it	eq
   d6c08:	493c      	ldreq	r1, [pc, #240]	; (d6cfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d6c0a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6c0c:	4620      	mov	r0, r4
   d6c0e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6c10:	792b      	ldrb	r3, [r5, #4]
   d6c12:	075b      	lsls	r3, r3, #29
   d6c14:	d518      	bpl.n	d6c48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6c16:	6929      	ldr	r1, [r5, #16]
   d6c18:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6c1a:	4613      	mov	r3, r2
   d6c1c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6c20:	b138      	cbz	r0, d6c32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6c22:	2820      	cmp	r0, #32
   d6c24:	d101      	bne.n	d6c2a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6c26:	4619      	mov	r1, r3
   d6c28:	e001      	b.n	d6c2e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d6c2a:	2828      	cmp	r0, #40	; 0x28
   d6c2c:	d001      	beq.n	d6c32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6c2e:	461a      	mov	r2, r3
   d6c30:	e7f3      	b.n	d6c1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6c32:	6823      	ldr	r3, [r4, #0]
   d6c34:	1a52      	subs	r2, r2, r1
   d6c36:	68db      	ldr	r3, [r3, #12]
   d6c38:	4620      	mov	r0, r4
   d6c3a:	4798      	blx	r3
        write("(): ", 4);
   d6c3c:	6823      	ldr	r3, [r4, #0]
   d6c3e:	4930      	ldr	r1, [pc, #192]	; (d6d00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6c40:	68db      	ldr	r3, [r3, #12]
   d6c42:	2204      	movs	r2, #4
   d6c44:	4620      	mov	r0, r4
   d6c46:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6c48:	2100      	movs	r1, #0
   d6c4a:	4638      	mov	r0, r7
   d6c4c:	f7fd fe9c 	bl	d4988 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6c50:	4601      	mov	r1, r0
   d6c52:	4620      	mov	r0, r4
   d6c54:	f7ff f9c9 	bl	d5fea <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6c58:	6823      	ldr	r3, [r4, #0]
   d6c5a:	4928      	ldr	r1, [pc, #160]	; (d6cfc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6c5c:	68db      	ldr	r3, [r3, #12]
   d6c5e:	2202      	movs	r2, #2
   d6c60:	4620      	mov	r0, r4
   d6c62:	4798      	blx	r3
    // Message
    if (msg) {
   d6c64:	b11e      	cbz	r6, d6c6e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6c66:	4631      	mov	r1, r6
   d6c68:	4620      	mov	r0, r4
   d6c6a:	f7ff f9be 	bl	d5fea <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d6c6e:	792b      	ldrb	r3, [r5, #4]
   d6c70:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6c74:	d02d      	beq.n	d6cd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d6c76:	6823      	ldr	r3, [r4, #0]
   d6c78:	4922      	ldr	r1, [pc, #136]	; (d6d04 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d6c7a:	68db      	ldr	r3, [r3, #12]
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	2202      	movs	r2, #2
   d6c80:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6c82:	792b      	ldrb	r3, [r5, #4]
   d6c84:	06d8      	lsls	r0, r3, #27
   d6c86:	d50b      	bpl.n	d6ca0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6c88:	6823      	ldr	r3, [r4, #0]
   d6c8a:	491f      	ldr	r1, [pc, #124]	; (d6d08 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d6c8c:	68db      	ldr	r3, [r3, #12]
   d6c8e:	2207      	movs	r2, #7
   d6c90:	4620      	mov	r0, r4
   d6c92:	4798      	blx	r3
   d6c94:	69ab      	ldr	r3, [r5, #24]
   d6c96:	4a1d      	ldr	r2, [pc, #116]	; (d6d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6c98:	6a20      	ldr	r0, [r4, #32]
   d6c9a:	2100      	movs	r1, #0
   d6c9c:	f7ff f903 	bl	d5ea6 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6ca0:	792b      	ldrb	r3, [r5, #4]
   d6ca2:	0699      	lsls	r1, r3, #26
   d6ca4:	d511      	bpl.n	d6cca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d6ca6:	06da      	lsls	r2, r3, #27
   d6ca8:	d505      	bpl.n	d6cb6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d6caa:	6823      	ldr	r3, [r4, #0]
   d6cac:	4912      	ldr	r1, [pc, #72]	; (d6cf8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6cae:	68db      	ldr	r3, [r3, #12]
   d6cb0:	2202      	movs	r2, #2
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	4798      	blx	r3
            }
            write("details = ", 10);
   d6cb6:	6823      	ldr	r3, [r4, #0]
   d6cb8:	4915      	ldr	r1, [pc, #84]	; (d6d10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d6cba:	68db      	ldr	r3, [r3, #12]
   d6cbc:	4620      	mov	r0, r4
   d6cbe:	220a      	movs	r2, #10
   d6cc0:	4798      	blx	r3
            write(attr.details);
   d6cc2:	69e9      	ldr	r1, [r5, #28]
   d6cc4:	4620      	mov	r0, r4
   d6cc6:	f7ff f990 	bl	d5fea <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d6cca:	215d      	movs	r1, #93	; 0x5d
   d6ccc:	4620      	mov	r0, r4
   d6cce:	f7ff f99a 	bl	d6006 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6cd2:	6823      	ldr	r3, [r4, #0]
   d6cd4:	490f      	ldr	r1, [pc, #60]	; (d6d14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d6cd6:	68db      	ldr	r3, [r3, #12]
   d6cd8:	4620      	mov	r0, r4
   d6cda:	2202      	movs	r2, #2
}
   d6cdc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6ce0:	4718      	bx	r3
   d6ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d6ce6:	bf00      	nop
   d6ce8:	2003e744 	.word	0x2003e744
   d6cec:	000d8733 	.word	0x000d8733
   d6cf0:	000d873a 	.word	0x000d873a
   d6cf4:	000d873d 	.word	0x000d873d
   d6cf8:	000d8740 	.word	0x000d8740
   d6cfc:	000d8745 	.word	0x000d8745
   d6d00:	000d8743 	.word	0x000d8743
   d6d04:	000d8748 	.word	0x000d8748
   d6d08:	000d874b 	.word	0x000d874b
   d6d0c:	000d8753 	.word	0x000d8753
   d6d10:	000d8756 	.word	0x000d8756
   d6d14:	000d8761 	.word	0x000d8761

000d6d18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d1c:	b085      	sub	sp, #20
   d6d1e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6d22:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6d24:	4606      	mov	r6, r0
   d6d26:	460f      	mov	r7, r1
   d6d28:	4691      	mov	r9, r2
   d6d2a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d6d2c:	f000 fa38 	bl	d71a0 <_Z16_fetch_usbserialv>
   d6d30:	4580      	cmp	r8, r0
   d6d32:	d105      	bne.n	d6d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6d34:	484a      	ldr	r0, [pc, #296]	; (d6e60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6d36:	f000 fc0c 	bl	d7552 <_ZN5spark12NetworkClass9listeningEv>
   d6d3a:	2800      	cmp	r0, #0
   d6d3c:	f040 808c 	bne.w	d6e58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d6d40:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6d42:	4a48      	ldr	r2, [pc, #288]	; (d6e64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6d44:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6d46:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d6d4a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d6d4c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d6d4e:	f88d 8008 	strb.w	r8, [sp, #8]
   d6d52:	f000 fd42 	bl	d77da <_ZN5spark10JSONWriter11beginObjectEv>
   d6d56:	4641      	mov	r1, r8
   d6d58:	4648      	mov	r0, r9
   d6d5a:	f7fd fe15 	bl	d4988 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d6d5e:	4942      	ldr	r1, [pc, #264]	; (d6e68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6d60:	4680      	mov	r8, r0
   d6d62:	2201      	movs	r2, #1
   d6d64:	a801      	add	r0, sp, #4
   d6d66:	f000 fdbd 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d6a:	4641      	mov	r1, r8
   d6d6c:	f7ff f92d 	bl	d5fca <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d6d70:	b13f      	cbz	r7, d6d82 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d6d72:	493e      	ldr	r1, [pc, #248]	; (d6e6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6d74:	2201      	movs	r2, #1
   d6d76:	a801      	add	r0, sp, #4
   d6d78:	f000 fdb4 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d7c:	4639      	mov	r1, r7
   d6d7e:	f7ff f924 	bl	d5fca <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d6d82:	b13d      	cbz	r5, d6d94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6d84:	493a      	ldr	r1, [pc, #232]	; (d6e70 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6d86:	2201      	movs	r2, #1
   d6d88:	a801      	add	r0, sp, #4
   d6d8a:	f000 fdab 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d8e:	4629      	mov	r1, r5
   d6d90:	f7ff f91b 	bl	d5fca <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d6d94:	7923      	ldrb	r3, [r4, #4]
   d6d96:	07df      	lsls	r7, r3, #31
   d6d98:	d50e      	bpl.n	d6db8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d6d9a:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6d9c:	212f      	movs	r1, #47	; 0x2f
   d6d9e:	4628      	mov	r0, r5
   d6da0:	f001 f9ef 	bl	d8182 <strrchr>
    if (s1) {
   d6da4:	b100      	cbz	r0, d6da8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d6da6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d6da8:	4932      	ldr	r1, [pc, #200]	; (d6e74 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d6daa:	2201      	movs	r2, #1
   d6dac:	a801      	add	r0, sp, #4
   d6dae:	f000 fd99 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6db2:	4629      	mov	r1, r5
   d6db4:	f7ff f909 	bl	d5fca <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d6db8:	7923      	ldrb	r3, [r4, #4]
   d6dba:	079d      	lsls	r5, r3, #30
   d6dbc:	d507      	bpl.n	d6dce <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d6dbe:	492e      	ldr	r1, [pc, #184]	; (d6e78 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d6dc0:	2202      	movs	r2, #2
   d6dc2:	a801      	add	r0, sp, #4
   d6dc4:	f000 fd8e 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6dc8:	68e1      	ldr	r1, [r4, #12]
   d6dca:	f000 fd13 	bl	d77f4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d6dce:	7923      	ldrb	r3, [r4, #4]
   d6dd0:	0758      	lsls	r0, r3, #29
   d6dd2:	d516      	bpl.n	d6e02 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6dd4:	6925      	ldr	r5, [r4, #16]
   d6dd6:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6dd8:	463b      	mov	r3, r7
   d6dda:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6dde:	b13a      	cbz	r2, d6df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d6de0:	2a20      	cmp	r2, #32
   d6de2:	d101      	bne.n	d6de8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6de4:	461d      	mov	r5, r3
   d6de6:	e001      	b.n	d6dec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d6de8:	2a28      	cmp	r2, #40	; 0x28
   d6dea:	d001      	beq.n	d6df0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6dec:	461f      	mov	r7, r3
   d6dee:	e7f3      	b.n	d6dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d6df0:	2202      	movs	r2, #2
   d6df2:	4922      	ldr	r1, [pc, #136]	; (d6e7c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6df4:	a801      	add	r0, sp, #4
   d6df6:	f000 fd75 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6dfa:	1b7a      	subs	r2, r7, r5
   d6dfc:	4629      	mov	r1, r5
   d6dfe:	f000 fd80 	bl	d7902 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d6e02:	7923      	ldrb	r3, [r4, #4]
   d6e04:	0719      	lsls	r1, r3, #28
   d6e06:	d507      	bpl.n	d6e18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d6e08:	491d      	ldr	r1, [pc, #116]	; (d6e80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d6e0a:	2201      	movs	r2, #1
   d6e0c:	a801      	add	r0, sp, #4
   d6e0e:	f000 fd69 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6e12:	6961      	ldr	r1, [r4, #20]
   d6e14:	f000 fd00 	bl	d7818 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d6e18:	7923      	ldrb	r3, [r4, #4]
   d6e1a:	06da      	lsls	r2, r3, #27
   d6e1c:	d508      	bpl.n	d6e30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d6e1e:	2204      	movs	r2, #4
   d6e20:	4918      	ldr	r1, [pc, #96]	; (d6e84 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6e22:	eb0d 0002 	add.w	r0, sp, r2
   d6e26:	f000 fd5d 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6e2a:	69a1      	ldr	r1, [r4, #24]
   d6e2c:	f000 fce2 	bl	d77f4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d6e30:	7923      	ldrb	r3, [r4, #4]
   d6e32:	069b      	lsls	r3, r3, #26
   d6e34:	d507      	bpl.n	d6e46 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d6e36:	4914      	ldr	r1, [pc, #80]	; (d6e88 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6e38:	2206      	movs	r2, #6
   d6e3a:	a801      	add	r0, sp, #4
   d6e3c:	f000 fd52 	bl	d78e4 <_ZN5spark10JSONWriter4nameEPKcj>
   d6e40:	69e1      	ldr	r1, [r4, #28]
   d6e42:	f7ff f8c2 	bl	d5fca <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d6e46:	a801      	add	r0, sp, #4
   d6e48:	f000 fcb1 	bl	d77ae <_ZN5spark10JSONWriter9endObjectEv>
   d6e4c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6e4e:	490f      	ldr	r1, [pc, #60]	; (d6e8c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6e50:	6803      	ldr	r3, [r0, #0]
   d6e52:	2202      	movs	r2, #2
   d6e54:	68db      	ldr	r3, [r3, #12]
   d6e56:	4798      	blx	r3
}
   d6e58:	b005      	add	sp, #20
   d6e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6e5e:	bf00      	nop
   d6e60:	2003e744 	.word	0x2003e744
   d6e64:	000d8694 	.word	0x000d8694
   d6e68:	000d86c6 	.word	0x000d86c6
   d6e6c:	000d86d9 	.word	0x000d86d9
   d6e70:	000d83ac 	.word	0x000d83ac
   d6e74:	000d83d1 	.word	0x000d83d1
   d6e78:	000d8764 	.word	0x000d8764
   d6e7c:	000d8767 	.word	0x000d8767
   d6e80:	000d831c 	.word	0x000d831c
   d6e84:	000d876a 	.word	0x000d876a
   d6e88:	000d876f 	.word	0x000d876f
   d6e8c:	000d8761 	.word	0x000d8761

000d6e90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6e90:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6e92:	681a      	ldr	r2, [r3, #0]
   d6e94:	4b02      	ldr	r3, [pc, #8]	; (d6ea0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6e96:	601a      	str	r2, [r3, #0]
   d6e98:	4770      	bx	lr
   d6e9a:	bf00      	nop
   d6e9c:	2003e2c8 	.word	0x2003e2c8
   d6ea0:	2003e414 	.word	0x2003e414

000d6ea4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6ea4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6ea6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6ea8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6eaa:	b113      	cbz	r3, d6eb2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6eac:	2203      	movs	r2, #3
   d6eae:	4601      	mov	r1, r0
   d6eb0:	4798      	blx	r3
    }
   d6eb2:	4620      	mov	r0, r4
   d6eb4:	bd10      	pop	{r4, pc}

000d6eb6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6eb6:	b510      	push	{r4, lr}
   d6eb8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6eba:	f7ff fff3 	bl	d6ea4 <_ZNSt14_Function_baseD1Ev>
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	bd10      	pop	{r4, pc}
	...

000d6ec4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ec4:	4803      	ldr	r0, [pc, #12]	; (d6ed4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6ec6:	4a04      	ldr	r2, [pc, #16]	; (d6ed8 <_GLOBAL__sub_I_RGB+0x14>)
   d6ec8:	4904      	ldr	r1, [pc, #16]	; (d6edc <_GLOBAL__sub_I_RGB+0x18>)
   d6eca:	2300      	movs	r3, #0
   d6ecc:	6083      	str	r3, [r0, #8]
   d6ece:	f000 bd7a 	b.w	d79c6 <__aeabi_atexit>
   d6ed2:	bf00      	nop
   d6ed4:	2003e418 	.word	0x2003e418
   d6ed8:	2003e338 	.word	0x2003e338
   d6edc:	000d6eb7 	.word	0x000d6eb7

000d6ee0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6ee0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6ee2:	4b0c      	ldr	r3, [pc, #48]	; (d6f14 <serialEventRun+0x34>)
   d6ee4:	b133      	cbz	r3, d6ef4 <serialEventRun+0x14>
   d6ee6:	f000 f95b 	bl	d71a0 <_Z16_fetch_usbserialv>
   d6eea:	6803      	ldr	r3, [r0, #0]
   d6eec:	691b      	ldr	r3, [r3, #16]
   d6eee:	4798      	blx	r3
   d6ef0:	2800      	cmp	r0, #0
   d6ef2:	dc09      	bgt.n	d6f08 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d6ef4:	4b08      	ldr	r3, [pc, #32]	; (d6f18 <serialEventRun+0x38>)
   d6ef6:	b163      	cbz	r3, d6f12 <serialEventRun+0x32>
   d6ef8:	f000 f9da 	bl	d72b0 <_Z22__fetch_global_Serial1v>
   d6efc:	6803      	ldr	r3, [r0, #0]
   d6efe:	691b      	ldr	r3, [r3, #16]
   d6f00:	4798      	blx	r3
   d6f02:	2800      	cmp	r0, #0
   d6f04:	dc03      	bgt.n	d6f0e <serialEventRun+0x2e>
   d6f06:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6f08:	f3af 8000 	nop.w
   d6f0c:	e7f2      	b.n	d6ef4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d6f0e:	f3af 8000 	nop.w
   d6f12:	bd08      	pop	{r3, pc}
	...

000d6f1c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d6f1c:	b508      	push	{r3, lr}
	serialEventRun();
   d6f1e:	f7ff ffdf 	bl	d6ee0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6f22:	f7fd fbcf 	bl	d46c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6f26:	4b01      	ldr	r3, [pc, #4]	; (d6f2c <_post_loop+0x10>)
   d6f28:	6018      	str	r0, [r3, #0]
   d6f2a:	bd08      	pop	{r3, pc}
   d6f2c:	2003e74c 	.word	0x2003e74c

000d6f30 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6f30:	4802      	ldr	r0, [pc, #8]	; (d6f3c <_Z33system_initialize_user_backup_ramv+0xc>)
   d6f32:	4a03      	ldr	r2, [pc, #12]	; (d6f40 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6f34:	4903      	ldr	r1, [pc, #12]	; (d6f44 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6f36:	1a12      	subs	r2, r2, r0
   d6f38:	f001 b881 	b.w	d803e <memcpy>
   d6f3c:	2003f400 	.word	0x2003f400
   d6f40:	2003f404 	.word	0x2003f404
   d6f44:	000d8af0 	.word	0x000d8af0

000d6f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6f48:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f4a:	2300      	movs	r3, #0
   d6f4c:	9300      	str	r3, [sp, #0]
   d6f4e:	461a      	mov	r2, r3
   d6f50:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f54:	f7fd fd3a 	bl	d49cc <system_ctrl_set_result>
}
   d6f58:	b003      	add	sp, #12
   d6f5a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6f60 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d6f60:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6f62:	8843      	ldrh	r3, [r0, #2]
   d6f64:	2b0a      	cmp	r3, #10
   d6f66:	d008      	beq.n	d6f7a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6f68:	2b50      	cmp	r3, #80	; 0x50
   d6f6a:	d109      	bne.n	d6f80 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d6f6c:	4b09      	ldr	r3, [pc, #36]	; (d6f94 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6f6e:	681b      	ldr	r3, [r3, #0]
   d6f70:	b13b      	cbz	r3, d6f82 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d6f72:	b003      	add	sp, #12
   d6f74:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d6f78:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d6f7a:	f7ff ffe5 	bl	d6f48 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d6f7e:	e006      	b.n	d6f8e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6f80:	2300      	movs	r3, #0
   d6f82:	9300      	str	r3, [sp, #0]
   d6f84:	461a      	mov	r2, r3
   d6f86:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6f8a:	f7fd fd1f 	bl	d49cc <system_ctrl_set_result>
        break;
    }
}
   d6f8e:	b003      	add	sp, #12
   d6f90:	f85d fb04 	ldr.w	pc, [sp], #4
   d6f94:	2003e428 	.word	0x2003e428

000d6f98 <module_user_init_hook>:

void module_user_init_hook()
{
   d6f98:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6f9a:	4c10      	ldr	r4, [pc, #64]	; (d6fdc <module_user_init_hook+0x44>)
   d6f9c:	4d10      	ldr	r5, [pc, #64]	; (d6fe0 <module_user_init_hook+0x48>)
   d6f9e:	6823      	ldr	r3, [r4, #0]
   d6fa0:	42ab      	cmp	r3, r5
   d6fa2:	4b10      	ldr	r3, [pc, #64]	; (d6fe4 <module_user_init_hook+0x4c>)
   d6fa4:	bf0c      	ite	eq
   d6fa6:	2201      	moveq	r2, #1
   d6fa8:	2200      	movne	r2, #0
   d6faa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6fac:	d002      	beq.n	d6fb4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d6fae:	f7ff ffbf 	bl	d6f30 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6fb2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6fb4:	f7fd fb76 	bl	d46a4 <HAL_RNG_GetRandomNumber>
   d6fb8:	4604      	mov	r4, r0
    srand(seed);
   d6fba:	f001 f86f 	bl	d809c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6fbe:	4b0a      	ldr	r3, [pc, #40]	; (d6fe8 <module_user_init_hook+0x50>)
   d6fc0:	b113      	cbz	r3, d6fc8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d6fc2:	4620      	mov	r0, r4
   d6fc4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6fc8:	2100      	movs	r1, #0
   d6fca:	4807      	ldr	r0, [pc, #28]	; (d6fe8 <module_user_init_hook+0x50>)
   d6fcc:	f7fd fd60 	bl	d4a90 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6fd0:	2100      	movs	r1, #0
   d6fd2:	4806      	ldr	r0, [pc, #24]	; (d6fec <module_user_init_hook+0x54>)
}
   d6fd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6fd8:	f7fd bcee 	b.w	d49b8 <system_ctrl_set_app_request_handler>
   d6fdc:	2003f400 	.word	0x2003f400
   d6fe0:	9a271c1e 	.word	0x9a271c1e
   d6fe4:	2003e42c 	.word	0x2003e42c
   d6fe8:	00000000 	.word	0x00000000
   d6fec:	000d6f61 	.word	0x000d6f61

000d6ff0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ff0:	4770      	bx	lr

000d6ff2 <_ZN9IPAddressD0Ev>:
   d6ff2:	b510      	push	{r4, lr}
   d6ff4:	2118      	movs	r1, #24
   d6ff6:	4604      	mov	r4, r0
   d6ff8:	f000 fcf2 	bl	d79e0 <_ZdlPvj>
   d6ffc:	4620      	mov	r0, r4
   d6ffe:	bd10      	pop	{r4, pc}

000d7000 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7000:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7002:	7d03      	ldrb	r3, [r0, #20]
   d7004:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7006:	b08d      	sub	sp, #52	; 0x34
   d7008:	460e      	mov	r6, r1
   d700a:	f100 0704 	add.w	r7, r0, #4
   d700e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7012:	d002      	beq.n	d701a <_ZNK9IPAddress7printToER5Print+0x1a>
   d7014:	f100 0508 	add.w	r5, r0, #8
   d7018:	e018      	b.n	d704c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d701a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d701c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d701e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7022:	232f      	movs	r3, #47	; 0x2f
   d7024:	462a      	mov	r2, r5
   d7026:	200a      	movs	r0, #10
   d7028:	f7fd fc06 	bl	d4838 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d702c:	4628      	mov	r0, r5
   d702e:	f001 f87f 	bl	d8130 <strlen>
   d7032:	6833      	ldr	r3, [r6, #0]
   d7034:	4602      	mov	r2, r0
   d7036:	68db      	ldr	r3, [r3, #12]
   d7038:	4629      	mov	r1, r5
   d703a:	4630      	mov	r0, r6
   d703c:	4798      	blx	r3
   d703e:	e00f      	b.n	d7060 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7040:	b124      	cbz	r4, d704c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7042:	212e      	movs	r1, #46	; 0x2e
   d7044:	4630      	mov	r0, r6
   d7046:	f7fe feff 	bl	d5e48 <_ZN5Print5printEc>
   d704a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d704c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7050:	220a      	movs	r2, #10
   d7052:	4630      	mov	r0, r6
   d7054:	f7fe ff07 	bl	d5e66 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7058:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d705a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d705c:	d1f0      	bne.n	d7040 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d705e:	4620      	mov	r0, r4
    }
    return n;
}
   d7060:	b00d      	add	sp, #52	; 0x34
   d7062:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7064 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7064:	b510      	push	{r4, lr}
   d7066:	4b05      	ldr	r3, [pc, #20]	; (d707c <_ZN9IPAddressC1Ev+0x18>)
   d7068:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d706a:	2211      	movs	r2, #17
   d706c:	f840 3b04 	str.w	r3, [r0], #4
   d7070:	2100      	movs	r1, #0
   d7072:	f001 f80a 	bl	d808a <memset>
{
    clear();
}
   d7076:	4620      	mov	r0, r4
   d7078:	bd10      	pop	{r4, pc}
   d707a:	bf00      	nop
   d707c:	000d8818 	.word	0x000d8818

000d7080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7080:	4603      	mov	r3, r0
   d7082:	4a07      	ldr	r2, [pc, #28]	; (d70a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7084:	b510      	push	{r4, lr}
   d7086:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d708a:	f101 0210 	add.w	r2, r1, #16
   d708e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7092:	f843 4b04 	str.w	r4, [r3], #4
   d7096:	4291      	cmp	r1, r2
   d7098:	d1f9      	bne.n	d708e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d709a:	780a      	ldrb	r2, [r1, #0]
   d709c:	701a      	strb	r2, [r3, #0]
}
   d709e:	bd10      	pop	{r4, pc}
   d70a0:	000d8818 	.word	0x000d8818

000d70a4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d70a4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d70a6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d70aa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d70ae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d70b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d70b6:	2304      	movs	r3, #4
   d70b8:	6041      	str	r1, [r0, #4]
   d70ba:	7503      	strb	r3, [r0, #20]
   d70bc:	bd10      	pop	{r4, pc}

000d70be <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d70be:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d70c0:	780d      	ldrb	r5, [r1, #0]
   d70c2:	788b      	ldrb	r3, [r1, #2]
   d70c4:	784a      	ldrb	r2, [r1, #1]
   d70c6:	78c9      	ldrb	r1, [r1, #3]
   d70c8:	9100      	str	r1, [sp, #0]
   d70ca:	4629      	mov	r1, r5
   d70cc:	f7ff ffea 	bl	d70a4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d70d0:	b003      	add	sp, #12
   d70d2:	bd30      	pop	{r4, r5, pc}

000d70d4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d70d4:	7441      	strb	r1, [r0, #17]
   d70d6:	4770      	bx	lr

000d70d8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d70d8:	4770      	bx	lr

000d70da <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d70da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d70dc:	2100      	movs	r1, #0
   d70de:	7c00      	ldrb	r0, [r0, #16]
   d70e0:	f7fd fc22 	bl	d4928 <HAL_USB_USART_Receive_Data>
}
   d70e4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d70e8:	bf28      	it	cs
   d70ea:	f04f 30ff 	movcs.w	r0, #4294967295
   d70ee:	bd08      	pop	{r3, pc}

000d70f0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d70f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d70f2:	2101      	movs	r1, #1
   d70f4:	7c00      	ldrb	r0, [r0, #16]
   d70f6:	f7fd fc17 	bl	d4928 <HAL_USB_USART_Receive_Data>
}
   d70fa:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d70fe:	bf28      	it	cs
   d7100:	f04f 30ff 	movcs.w	r0, #4294967295
   d7104:	bd08      	pop	{r3, pc}

000d7106 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7106:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7108:	7c00      	ldrb	r0, [r0, #16]
   d710a:	f7fd fc05 	bl	d4918 <HAL_USB_USART_Available_Data_For_Write>
}
   d710e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7112:	bd08      	pop	{r3, pc}

000d7114 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7114:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7116:	7c00      	ldrb	r0, [r0, #16]
   d7118:	f7fd fbf6 	bl	d4908 <HAL_USB_USART_Available_Data>
}
   d711c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7120:	bd08      	pop	{r3, pc}

000d7122 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7122:	7c00      	ldrb	r0, [r0, #16]
   d7124:	f7fd bc10 	b.w	d4948 <HAL_USB_USART_Flush_Data>

000d7128 <_ZN9USBSerialD0Ev>:
   d7128:	b510      	push	{r4, lr}
   d712a:	2114      	movs	r1, #20
   d712c:	4604      	mov	r4, r0
   d712e:	f000 fc57 	bl	d79e0 <_ZdlPvj>
   d7132:	4620      	mov	r0, r4
   d7134:	bd10      	pop	{r4, pc}

000d7136 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7136:	b538      	push	{r3, r4, r5, lr}
   d7138:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d713a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d713c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d713e:	f7fd fbeb 	bl	d4918 <HAL_USB_USART_Available_Data_For_Write>
   d7142:	2800      	cmp	r0, #0
   d7144:	dc01      	bgt.n	d714a <_ZN9USBSerial5writeEh+0x14>
   d7146:	7c60      	ldrb	r0, [r4, #17]
   d7148:	b128      	cbz	r0, d7156 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d714a:	4629      	mov	r1, r5
   d714c:	7c20      	ldrb	r0, [r4, #16]
   d714e:	f7fd fbf3 	bl	d4938 <HAL_USB_USART_Send_Data>
   d7152:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7156:	bd38      	pop	{r3, r4, r5, pc}

000d7158 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7158:	b510      	push	{r4, lr}
   d715a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d715c:	2300      	movs	r3, #0
   d715e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7164:	60a3      	str	r3, [r4, #8]
   d7166:	4b05      	ldr	r3, [pc, #20]	; (d717c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7168:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d716a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d716c:	4608      	mov	r0, r1
{
  _serial = serial;
   d716e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7170:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7172:	4611      	mov	r1, r2
   d7174:	f7fd fbb0 	bl	d48d8 <HAL_USB_USART_Init>
}
   d7178:	4620      	mov	r0, r4
   d717a:	bd10      	pop	{r4, pc}
   d717c:	000d882c 	.word	0x000d882c

000d7180 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7180:	2200      	movs	r2, #0
   d7182:	7c00      	ldrb	r0, [r0, #16]
   d7184:	f7fd bbb0 	b.w	d48e8 <HAL_USB_USART_Begin>

000d7188 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7188:	7c00      	ldrb	r0, [r0, #16]
   d718a:	f7fd bbb5 	b.w	d48f8 <HAL_USB_USART_End>

000d718e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d718e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7190:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7192:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7194:	2100      	movs	r1, #0
   d7196:	f000 ff78 	bl	d808a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d719a:	4620      	mov	r0, r4
   d719c:	bd10      	pop	{r4, pc}
	...

000d71a0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d71a0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d71a2:	4d0e      	ldr	r5, [pc, #56]	; (d71dc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d71a4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d71a6:	a801      	add	r0, sp, #4
   d71a8:	f7ff fff1 	bl	d718e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d71ac:	6829      	ldr	r1, [r5, #0]
   d71ae:	f011 0401 	ands.w	r4, r1, #1
   d71b2:	d110      	bne.n	d71d6 <_Z16_fetch_usbserialv+0x36>
   d71b4:	4628      	mov	r0, r5
   d71b6:	f7fc ff7f 	bl	d40b8 <__cxa_guard_acquire>
   d71ba:	b160      	cbz	r0, d71d6 <_Z16_fetch_usbserialv+0x36>
   d71bc:	aa01      	add	r2, sp, #4
   d71be:	4621      	mov	r1, r4
   d71c0:	4807      	ldr	r0, [pc, #28]	; (d71e0 <_Z16_fetch_usbserialv+0x40>)
   d71c2:	f7ff ffc9 	bl	d7158 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d71c6:	4628      	mov	r0, r5
   d71c8:	f7fc ff7b 	bl	d40c2 <__cxa_guard_release>
   d71cc:	4a05      	ldr	r2, [pc, #20]	; (d71e4 <_Z16_fetch_usbserialv+0x44>)
   d71ce:	4906      	ldr	r1, [pc, #24]	; (d71e8 <_Z16_fetch_usbserialv+0x48>)
   d71d0:	4803      	ldr	r0, [pc, #12]	; (d71e0 <_Z16_fetch_usbserialv+0x40>)
   d71d2:	f000 fbf8 	bl	d79c6 <__aeabi_atexit>
	return _usbserial;
}
   d71d6:	4802      	ldr	r0, [pc, #8]	; (d71e0 <_Z16_fetch_usbserialv+0x40>)
   d71d8:	b007      	add	sp, #28
   d71da:	bd30      	pop	{r4, r5, pc}
   d71dc:	2003e430 	.word	0x2003e430
   d71e0:	2003e434 	.word	0x2003e434
   d71e4:	2003e338 	.word	0x2003e338
   d71e8:	000d70d9 	.word	0x000d70d9

000d71ec <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d71ec:	4770      	bx	lr

000d71ee <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d71ee:	7441      	strb	r1, [r0, #17]
   d71f0:	4770      	bx	lr

000d71f2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d71f2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d71f4:	7c00      	ldrb	r0, [r0, #16]
   d71f6:	f7fd fb5f 	bl	d48b8 <HAL_USART_Available_Data_For_Write>
}
   d71fa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d71fe:	bd08      	pop	{r3, pc}

000d7200 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7200:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7202:	7c00      	ldrb	r0, [r0, #16]
   d7204:	f7fd fb38 	bl	d4878 <HAL_USART_Available_Data>
}
   d7208:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d720c:	bd08      	pop	{r3, pc}

000d720e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d720e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7210:	7c00      	ldrb	r0, [r0, #16]
   d7212:	f7fd fb41 	bl	d4898 <HAL_USART_Peek_Data>
}
   d7216:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d721a:	bf28      	it	cs
   d721c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7220:	bd08      	pop	{r3, pc}

000d7222 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7222:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7224:	7c00      	ldrb	r0, [r0, #16]
   d7226:	f7fd fb2f 	bl	d4888 <HAL_USART_Read_Data>
}
   d722a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d722e:	bf28      	it	cs
   d7230:	f04f 30ff 	movcs.w	r0, #4294967295
   d7234:	bd08      	pop	{r3, pc}

000d7236 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7236:	7c00      	ldrb	r0, [r0, #16]
   d7238:	f7fd bb36 	b.w	d48a8 <HAL_USART_Flush_Data>

000d723c <_ZN11USARTSerialD0Ev>:
   d723c:	b510      	push	{r4, lr}
   d723e:	2114      	movs	r1, #20
   d7240:	4604      	mov	r4, r0
   d7242:	f000 fbcd 	bl	d79e0 <_ZdlPvj>
   d7246:	4620      	mov	r0, r4
   d7248:	bd10      	pop	{r4, pc}

000d724a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d724a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d724c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d724e:	4604      	mov	r4, r0
   d7250:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7252:	b925      	cbnz	r5, d725e <_ZN11USARTSerial5writeEh+0x14>
   d7254:	7c00      	ldrb	r0, [r0, #16]
   d7256:	f7fd fb2f 	bl	d48b8 <HAL_USART_Available_Data_For_Write>
   d725a:	2800      	cmp	r0, #0
   d725c:	dd05      	ble.n	d726a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d725e:	4631      	mov	r1, r6
   d7260:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7266:	f7fd baff 	b.w	d4868 <HAL_USART_Write_Data>
  }
  return 0;
}
   d726a:	4628      	mov	r0, r5
   d726c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7270 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7270:	b510      	push	{r4, lr}
   d7272:	4604      	mov	r4, r0
   d7274:	4608      	mov	r0, r1
   d7276:	4611      	mov	r1, r2
   d7278:	2200      	movs	r2, #0
   d727a:	6062      	str	r2, [r4, #4]
   d727c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7280:	60a2      	str	r2, [r4, #8]
   d7282:	4a05      	ldr	r2, [pc, #20]	; (d7298 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7284:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7286:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7288:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d728a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d728c:	461a      	mov	r2, r3
   d728e:	f7fd fadb 	bl	d4848 <HAL_USART_Init>
}
   d7292:	4620      	mov	r0, r4
   d7294:	bd10      	pop	{r4, pc}
   d7296:	bf00      	nop
   d7298:	000d885c 	.word	0x000d885c

000d729c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d729c:	2300      	movs	r3, #0
   d729e:	7c00      	ldrb	r0, [r0, #16]
   d72a0:	f7fd bb12 	b.w	d48c8 <HAL_USART_BeginConfig>

000d72a4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d72a4:	2200      	movs	r2, #0
   d72a6:	f7ff bff9 	b.w	d729c <_ZN11USARTSerial5beginEmm>

000d72aa <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d72aa:	7c00      	ldrb	r0, [r0, #16]
   d72ac:	f7fd bad4 	b.w	d4858 <HAL_USART_End>

000d72b0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d72b0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d72b2:	4d0c      	ldr	r5, [pc, #48]	; (d72e4 <_Z22__fetch_global_Serial1v+0x34>)
   d72b4:	6829      	ldr	r1, [r5, #0]
   d72b6:	f011 0401 	ands.w	r4, r1, #1
   d72ba:	d111      	bne.n	d72e0 <_Z22__fetch_global_Serial1v+0x30>
   d72bc:	4628      	mov	r0, r5
   d72be:	f7fc fefb 	bl	d40b8 <__cxa_guard_acquire>
   d72c2:	b168      	cbz	r0, d72e0 <_Z22__fetch_global_Serial1v+0x30>
   d72c4:	4a08      	ldr	r2, [pc, #32]	; (d72e8 <_Z22__fetch_global_Serial1v+0x38>)
   d72c6:	4b09      	ldr	r3, [pc, #36]	; (d72ec <_Z22__fetch_global_Serial1v+0x3c>)
   d72c8:	4809      	ldr	r0, [pc, #36]	; (d72f0 <_Z22__fetch_global_Serial1v+0x40>)
   d72ca:	4621      	mov	r1, r4
   d72cc:	f7ff ffd0 	bl	d7270 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d72d0:	4628      	mov	r0, r5
   d72d2:	f7fc fef6 	bl	d40c2 <__cxa_guard_release>
   d72d6:	4a07      	ldr	r2, [pc, #28]	; (d72f4 <_Z22__fetch_global_Serial1v+0x44>)
   d72d8:	4907      	ldr	r1, [pc, #28]	; (d72f8 <_Z22__fetch_global_Serial1v+0x48>)
   d72da:	4805      	ldr	r0, [pc, #20]	; (d72f0 <_Z22__fetch_global_Serial1v+0x40>)
   d72dc:	f000 fb73 	bl	d79c6 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d72e0:	4803      	ldr	r0, [pc, #12]	; (d72f0 <_Z22__fetch_global_Serial1v+0x40>)
   d72e2:	bd38      	pop	{r3, r4, r5, pc}
   d72e4:	2003e4e0 	.word	0x2003e4e0
   d72e8:	2003e4e4 	.word	0x2003e4e4
   d72ec:	2003e45c 	.word	0x2003e45c
   d72f0:	2003e448 	.word	0x2003e448
   d72f4:	2003e338 	.word	0x2003e338
   d72f8:	000d71ed 	.word	0x000d71ed

000d72fc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d72fc:	2200      	movs	r2, #0
   d72fe:	4611      	mov	r1, r2
   d7300:	6840      	ldr	r0, [r0, #4]
   d7302:	f7fd bba5 	b.w	d4a50 <network_listening>

000d7306 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7306:	2200      	movs	r2, #0
   d7308:	4611      	mov	r1, r2
   d730a:	6840      	ldr	r0, [r0, #4]
   d730c:	f7fd bbb0 	b.w	d4a70 <network_get_listen_timeout>

000d7310 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7310:	2200      	movs	r2, #0
   d7312:	6840      	ldr	r0, [r0, #4]
   d7314:	f7fd bba4 	b.w	d4a60 <network_set_listen_timeout>

000d7318 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7318:	2200      	movs	r2, #0
   d731a:	f081 0101 	eor.w	r1, r1, #1
   d731e:	6840      	ldr	r0, [r0, #4]
   d7320:	f7fd bb8e 	b.w	d4a40 <network_listen>

000d7324 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7324:	2300      	movs	r3, #0
   d7326:	461a      	mov	r2, r3
   d7328:	2101      	movs	r1, #1
   d732a:	6840      	ldr	r0, [r0, #4]
   d732c:	f7fd bb80 	b.w	d4a30 <network_off>

000d7330 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7330:	2300      	movs	r3, #0
   d7332:	461a      	mov	r2, r3
   d7334:	4619      	mov	r1, r3
   d7336:	6840      	ldr	r0, [r0, #4]
   d7338:	f7fd bb72 	b.w	d4a20 <network_on>

000d733c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d733c:	2200      	movs	r2, #0
   d733e:	4611      	mov	r1, r2
   d7340:	6840      	ldr	r0, [r0, #4]
   d7342:	f7fd bb65 	b.w	d4a10 <network_ready>

000d7346 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7346:	2200      	movs	r2, #0
   d7348:	4611      	mov	r1, r2
   d734a:	6840      	ldr	r0, [r0, #4]
   d734c:	f7fd bb50 	b.w	d49f0 <network_connecting>

000d7350 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7350:	2200      	movs	r2, #0
   d7352:	2102      	movs	r1, #2
   d7354:	6840      	ldr	r0, [r0, #4]
   d7356:	f7fd bb53 	b.w	d4a00 <network_disconnect>

000d735a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d735a:	2300      	movs	r3, #0
   d735c:	461a      	mov	r2, r3
   d735e:	6840      	ldr	r0, [r0, #4]
   d7360:	f7fd bb3e 	b.w	d49e0 <network_connect>

000d7364 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7364:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7366:	4605      	mov	r5, r0
   d7368:	b188      	cbz	r0, d738e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d736a:	6804      	ldr	r4, [r0, #0]
   d736c:	b14c      	cbz	r4, d7382 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d736e:	68a3      	ldr	r3, [r4, #8]
   d7370:	b11b      	cbz	r3, d737a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7372:	2203      	movs	r2, #3
   d7374:	4621      	mov	r1, r4
   d7376:	4620      	mov	r0, r4
   d7378:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d737a:	2110      	movs	r1, #16
   d737c:	4620      	mov	r0, r4
   d737e:	f000 fb2f 	bl	d79e0 <_ZdlPvj>
   d7382:	4628      	mov	r0, r5
   d7384:	2114      	movs	r1, #20
      }
   d7386:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d738a:	f000 bb29 	b.w	d79e0 <_ZdlPvj>
   d738e:	bd38      	pop	{r3, r4, r5, pc}

000d7390 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7390:	b110      	cbz	r0, d7398 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7392:	6803      	ldr	r3, [r0, #0]
   d7394:	685b      	ldr	r3, [r3, #4]
   d7396:	4718      	bx	r3
   d7398:	4770      	bx	lr

000d739a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d739a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d739c:	6803      	ldr	r3, [r0, #0]
   d739e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d73a0:	b1bb      	cbz	r3, d73d2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d73a2:	6858      	ldr	r0, [r3, #4]
   d73a4:	f7fd fa10 	bl	d47c8 <os_thread_is_current>
   d73a8:	b978      	cbnz	r0, d73ca <_ZN6ThreadD1Ev+0x30>
   d73aa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d73ac:	7c5a      	ldrb	r2, [r3, #17]
   d73ae:	b912      	cbnz	r2, d73b6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d73b0:	6858      	ldr	r0, [r3, #4]
   d73b2:	f7fd fa11 	bl	d47d8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d73b6:	6823      	ldr	r3, [r4, #0]
   d73b8:	6858      	ldr	r0, [r3, #4]
   d73ba:	f7fd fa15 	bl	d47e8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73be:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d73c0:	2300      	movs	r3, #0
   d73c2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d73c4:	b128      	cbz	r0, d73d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d73c6:	f7ff ffcd 	bl	d7364 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d73ca:	6820      	ldr	r0, [r4, #0]
   d73cc:	b108      	cbz	r0, d73d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d73ce:	f7ff ffc9 	bl	d7364 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d73d2:	4620      	mov	r0, r4
   d73d4:	bd10      	pop	{r4, pc}

000d73d6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d73d6:	b538      	push	{r3, r4, r5, lr}
   d73d8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d73da:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d73de:	b108      	cbz	r0, d73e4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d73e0:	f7fc fe5d 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d73e4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d73e8:	b108      	cbz	r0, d73ee <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d73ea:	f7fd fa0d 	bl	d4808 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d73ee:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d73f2:	b135      	cbz	r5, d7402 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d73f4:	4628      	mov	r0, r5
   d73f6:	f7ff ffd0 	bl	d739a <_ZN6ThreadD1Ev>
   d73fa:	2104      	movs	r1, #4
   d73fc:	4628      	mov	r0, r5
   d73fe:	f000 faef 	bl	d79e0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7402:	6820      	ldr	r0, [r4, #0]
   d7404:	b108      	cbz	r0, d740a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7406:	f7ff ffc3 	bl	d7390 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d740a:	4620      	mov	r0, r4
   d740c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7410 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7410:	b510      	push	{r4, lr}
   d7412:	4b04      	ldr	r3, [pc, #16]	; (d7424 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7414:	4604      	mov	r4, r0
   d7416:	f840 3b08 	str.w	r3, [r0], #8
   d741a:	f7ff ffdc 	bl	d73d6 <_ZN5spark11MeshPublishD1Ev>
   d741e:	4620      	mov	r0, r4
   d7420:	bd10      	pop	{r4, pc}
   d7422:	bf00      	nop
   d7424:	000d888c 	.word	0x000d888c

000d7428 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7428:	b538      	push	{r3, r4, r5, lr}
   d742a:	4c0e      	ldr	r4, [pc, #56]	; (d7464 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d742c:	4b0e      	ldr	r3, [pc, #56]	; (d7468 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d742e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7430:	2500      	movs	r5, #0
   d7432:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7434:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7438:	6063      	str	r3, [r4, #4]
   d743a:	60a5      	str	r5, [r4, #8]
   d743c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7440:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7444:	f7fd f9d8 	bl	d47f8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7448:	4b08      	ldr	r3, [pc, #32]	; (d746c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d744a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d744e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7452:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7454:	4620      	mov	r0, r4
   d7456:	4a06      	ldr	r2, [pc, #24]	; (d7470 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7458:	4906      	ldr	r1, [pc, #24]	; (d7474 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d745a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d745e:	f000 bab2 	b.w	d79c6 <__aeabi_atexit>
   d7462:	bf00      	nop
   d7464:	2003e568 	.word	0x2003e568
   d7468:	000d88f4 	.word	0x000d88f4
   d746c:	000d888c 	.word	0x000d888c
   d7470:	2003e338 	.word	0x2003e338
   d7474:	000d7411 	.word	0x000d7411

000d7478 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7478:	2200      	movs	r2, #0
   d747a:	4611      	mov	r1, r2
   d747c:	6840      	ldr	r0, [r0, #4]
   d747e:	f7fd bac7 	b.w	d4a10 <network_ready>

000d7482 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7482:	2200      	movs	r2, #0
   d7484:	4611      	mov	r1, r2
   d7486:	6840      	ldr	r0, [r0, #4]
   d7488:	f7fd bae2 	b.w	d4a50 <network_listening>

000d748c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d748c:	2200      	movs	r2, #0
   d748e:	4611      	mov	r1, r2
   d7490:	6840      	ldr	r0, [r0, #4]
   d7492:	f7fd baed 	b.w	d4a70 <network_get_listen_timeout>

000d7496 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7496:	2200      	movs	r2, #0
   d7498:	6840      	ldr	r0, [r0, #4]
   d749a:	f7fd bae1 	b.w	d4a60 <network_set_listen_timeout>

000d749e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d749e:	2200      	movs	r2, #0
   d74a0:	f081 0101 	eor.w	r1, r1, #1
   d74a4:	6840      	ldr	r0, [r0, #4]
   d74a6:	f7fd bacb 	b.w	d4a40 <network_listen>

000d74aa <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d74aa:	2300      	movs	r3, #0
   d74ac:	461a      	mov	r2, r3
   d74ae:	4619      	mov	r1, r3
   d74b0:	6840      	ldr	r0, [r0, #4]
   d74b2:	f7fd babd 	b.w	d4a30 <network_off>

000d74b6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d74b6:	2300      	movs	r3, #0
   d74b8:	461a      	mov	r2, r3
   d74ba:	4619      	mov	r1, r3
   d74bc:	6840      	ldr	r0, [r0, #4]
   d74be:	f7fd baaf 	b.w	d4a20 <network_on>

000d74c2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d74c2:	2200      	movs	r2, #0
   d74c4:	4611      	mov	r1, r2
   d74c6:	6840      	ldr	r0, [r0, #4]
   d74c8:	f7fd ba92 	b.w	d49f0 <network_connecting>

000d74cc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d74cc:	2200      	movs	r2, #0
   d74ce:	2102      	movs	r1, #2
   d74d0:	6840      	ldr	r0, [r0, #4]
   d74d2:	f7fd ba95 	b.w	d4a00 <network_disconnect>

000d74d6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d74d6:	2300      	movs	r3, #0
   d74d8:	461a      	mov	r2, r3
   d74da:	6840      	ldr	r0, [r0, #4]
   d74dc:	f7fd ba80 	b.w	d49e0 <network_connect>

000d74e0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d74e0:	4b02      	ldr	r3, [pc, #8]	; (d74ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d74e2:	2204      	movs	r2, #4
   d74e4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d74e6:	4a02      	ldr	r2, [pc, #8]	; (d74f0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d74e8:	601a      	str	r2, [r3, #0]
   d74ea:	4770      	bx	lr
   d74ec:	2003e73c 	.word	0x2003e73c
   d74f0:	000d88c0 	.word	0x000d88c0

000d74f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d74f4:	2300      	movs	r3, #0
   d74f6:	461a      	mov	r2, r3
   d74f8:	6840      	ldr	r0, [r0, #4]
   d74fa:	f7fd ba71 	b.w	d49e0 <network_connect>

000d74fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d74fe:	2200      	movs	r2, #0
   d7500:	2102      	movs	r1, #2
   d7502:	6840      	ldr	r0, [r0, #4]
   d7504:	f7fd ba7c 	b.w	d4a00 <network_disconnect>

000d7508 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7508:	2200      	movs	r2, #0
   d750a:	4611      	mov	r1, r2
   d750c:	6840      	ldr	r0, [r0, #4]
   d750e:	f7fd ba6f 	b.w	d49f0 <network_connecting>

000d7512 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7512:	2200      	movs	r2, #0
   d7514:	4611      	mov	r1, r2
   d7516:	6840      	ldr	r0, [r0, #4]
   d7518:	f7fd ba7a 	b.w	d4a10 <network_ready>

000d751c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d751c:	2300      	movs	r3, #0
   d751e:	461a      	mov	r2, r3
   d7520:	4619      	mov	r1, r3
   d7522:	6840      	ldr	r0, [r0, #4]
   d7524:	f7fd ba7c 	b.w	d4a20 <network_on>

000d7528 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7528:	2300      	movs	r3, #0
   d752a:	461a      	mov	r2, r3
   d752c:	4619      	mov	r1, r3
   d752e:	6840      	ldr	r0, [r0, #4]
   d7530:	f7fd ba7e 	b.w	d4a30 <network_off>

000d7534 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7534:	2200      	movs	r2, #0
   d7536:	f081 0101 	eor.w	r1, r1, #1
   d753a:	6840      	ldr	r0, [r0, #4]
   d753c:	f7fd ba80 	b.w	d4a40 <network_listen>

000d7540 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7540:	2200      	movs	r2, #0
   d7542:	6840      	ldr	r0, [r0, #4]
   d7544:	f7fd ba8c 	b.w	d4a60 <network_set_listen_timeout>

000d7548 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7548:	2200      	movs	r2, #0
   d754a:	4611      	mov	r1, r2
   d754c:	6840      	ldr	r0, [r0, #4]
   d754e:	f7fd ba8f 	b.w	d4a70 <network_get_listen_timeout>

000d7552 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7552:	2200      	movs	r2, #0
   d7554:	4611      	mov	r1, r2
   d7556:	6840      	ldr	r0, [r0, #4]
   d7558:	f7fd ba7a 	b.w	d4a50 <network_listening>

000d755c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d755c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7560:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7562:	b095      	sub	sp, #84	; 0x54
   d7564:	4616      	mov	r6, r2
   d7566:	460d      	mov	r5, r1
   d7568:	4607      	mov	r7, r0
    IPAddress addr;
   d756a:	f7ff fd7b 	bl	d7064 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d756e:	4621      	mov	r1, r4
   d7570:	2220      	movs	r2, #32
   d7572:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7574:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7576:	f000 fd88 	bl	d808a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d757a:	2340      	movs	r3, #64	; 0x40
   d757c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d757e:	4621      	mov	r1, r4
   d7580:	466b      	mov	r3, sp
   d7582:	aa0c      	add	r2, sp, #48	; 0x30
   d7584:	4630      	mov	r0, r6
   d7586:	f7fd f87d 	bl	d4684 <netdb_getaddrinfo>
    if (!r) {
   d758a:	4604      	mov	r4, r0
   d758c:	2800      	cmp	r0, #0
   d758e:	d144      	bne.n	d761a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7590:	4602      	mov	r2, r0
   d7592:	2101      	movs	r1, #1
   d7594:	6868      	ldr	r0, [r5, #4]
   d7596:	f7fd fa3b 	bl	d4a10 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d759a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d759c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d759e:	4622      	mov	r2, r4
   d75a0:	6868      	ldr	r0, [r5, #4]
   d75a2:	f7fd fa35 	bl	d4a10 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75a6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d75a8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d75aa:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d75ac:	2e00      	cmp	r6, #0
   d75ae:	d034      	beq.n	d761a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d75b0:	2900      	cmp	r1, #0
   d75b2:	d132      	bne.n	d761a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d75b4:	6873      	ldr	r3, [r6, #4]
   d75b6:	2b02      	cmp	r3, #2
   d75b8:	d002      	beq.n	d75c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d75ba:	2b0a      	cmp	r3, #10
   d75bc:	d009      	beq.n	d75d2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d75be:	e02a      	b.n	d7616 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d75c0:	f1b8 0f00 	cmp.w	r8, #0
   d75c4:	d027      	beq.n	d7616 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d75c6:	6971      	ldr	r1, [r6, #20]
   d75c8:	4638      	mov	r0, r7
   d75ca:	3104      	adds	r1, #4
   d75cc:	f7ff fd77 	bl	d70be <_ZN9IPAddressaSEPKh>
   d75d0:	e020      	b.n	d7614 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d75d2:	f1b9 0f00 	cmp.w	r9, #0
   d75d6:	d01e      	beq.n	d7616 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d75d8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d75da:	2211      	movs	r2, #17
   d75dc:	a801      	add	r0, sp, #4
   d75de:	f000 fd54 	bl	d808a <memset>
                    a.v = 6;
   d75e2:	2306      	movs	r3, #6
   d75e4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d75e8:	ad01      	add	r5, sp, #4
   d75ea:	f104 0308 	add.w	r3, r4, #8
   d75ee:	3418      	adds	r4, #24
   d75f0:	6818      	ldr	r0, [r3, #0]
   d75f2:	6859      	ldr	r1, [r3, #4]
   d75f4:	462a      	mov	r2, r5
   d75f6:	c203      	stmia	r2!, {r0, r1}
   d75f8:	3308      	adds	r3, #8
   d75fa:	42a3      	cmp	r3, r4
   d75fc:	4615      	mov	r5, r2
   d75fe:	d1f7      	bne.n	d75f0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7600:	a901      	add	r1, sp, #4
   d7602:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7604:	ad07      	add	r5, sp, #28
   d7606:	f7ff fd3b 	bl	d7080 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d760a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d760c:	1d3c      	adds	r4, r7, #4
   d760e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7610:	682b      	ldr	r3, [r5, #0]
   d7612:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7614:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7616:	69f6      	ldr	r6, [r6, #28]
   d7618:	e7c8      	b.n	d75ac <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d761a:	9800      	ldr	r0, [sp, #0]
   d761c:	f7fd f82a 	bl	d4674 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7620:	4638      	mov	r0, r7
   d7622:	b015      	add	sp, #84	; 0x54
   d7624:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7628 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7628:	4b02      	ldr	r3, [pc, #8]	; (d7634 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d762a:	4a03      	ldr	r2, [pc, #12]	; (d7638 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d762c:	601a      	str	r2, [r3, #0]
   d762e:	2200      	movs	r2, #0
   d7630:	605a      	str	r2, [r3, #4]
   d7632:	4770      	bx	lr
   d7634:	2003e744 	.word	0x2003e744
   d7638:	000d88f4 	.word	0x000d88f4

000d763c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d763c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d7640:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7642:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d7646:	2901      	cmp	r1, #1
   d7648:	4610      	mov	r0, r2
   d764a:	d104      	bne.n	d7656 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d764c:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d7650:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d7654:	e004      	b.n	d7660 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d7656:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7658:	bf04      	itt	eq
   d765a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d765e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d7660:	3b01      	subs	r3, #1
   d7662:	f102 0210 	add.w	r2, r2, #16
   d7666:	d1ec      	bne.n	d7642 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d7668:	4770      	bx	lr

000d766a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d766a:	b40e      	push	{r1, r2, r3}
   d766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7670:	b087      	sub	sp, #28
   d7672:	af00      	add	r7, sp, #0
   d7674:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d7678:	4605      	mov	r5, r0
   d767a:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d767e:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7680:	4623      	mov	r3, r4
   d7682:	4632      	mov	r2, r6
   d7684:	2110      	movs	r1, #16
   d7686:	f107 0008 	add.w	r0, r7, #8
   d768a:	f7fd fa21 	bl	d4ad0 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d768e:	280f      	cmp	r0, #15
   d7690:	d916      	bls.n	d76c0 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d7692:	f100 0308 	add.w	r3, r0, #8
   d7696:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d769a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d769c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d76a0:	4632      	mov	r2, r6
   d76a2:	1c41      	adds	r1, r0, #1
   d76a4:	4623      	mov	r3, r4
   d76a6:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d76a8:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d76aa:	f7fd fa11 	bl	d4ad0 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d76ae:	1e02      	subs	r2, r0, #0
   d76b0:	dd04      	ble.n	d76bc <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d76b2:	682b      	ldr	r3, [r5, #0]
   d76b4:	4669      	mov	r1, sp
   d76b6:	689b      	ldr	r3, [r3, #8]
   d76b8:	4628      	mov	r0, r5
   d76ba:	4798      	blx	r3
   d76bc:	46c5      	mov	sp, r8
   d76be:	e007      	b.n	d76d0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d76c0:	b130      	cbz	r0, d76d0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d76c2:	682b      	ldr	r3, [r5, #0]
   d76c4:	4602      	mov	r2, r0
   d76c6:	689b      	ldr	r3, [r3, #8]
   d76c8:	f107 0108 	add.w	r1, r7, #8
   d76cc:	4628      	mov	r0, r5
   d76ce:	4798      	blx	r3
    }
}
   d76d0:	371c      	adds	r7, #28
   d76d2:	46bd      	mov	sp, r7
   d76d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d76d8:	b003      	add	sp, #12
   d76da:	4770      	bx	lr

000d76dc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d76dc:	b513      	push	{r0, r1, r4, lr}
   d76de:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d76e0:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d76e2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d76e6:	6894      	ldr	r4, [r2, #8]
   d76e8:	4619      	mov	r1, r3
   d76ea:	2201      	movs	r2, #1
   d76ec:	47a0      	blx	r4
}
   d76ee:	b002      	add	sp, #8
   d76f0:	bd10      	pop	{r4, pc}

000d76f2 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d76f2:	6883      	ldr	r3, [r0, #8]
   d76f4:	b1fb      	cbz	r3, d7736 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d76f6:	781a      	ldrb	r2, [r3, #0]
   d76f8:	2a03      	cmp	r2, #3
   d76fa:	d81a      	bhi.n	d7732 <_ZNK5spark9JSONValue4typeEv+0x40>
   d76fc:	e8df f002 	tbb	[pc, r2]
   d7700:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d7704:	2005      	movs	r0, #5
   d7706:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d7708:	6802      	ldr	r2, [r0, #0]
   d770a:	685b      	ldr	r3, [r3, #4]
   d770c:	6852      	ldr	r2, [r2, #4]
   d770e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d7710:	282d      	cmp	r0, #45	; 0x2d
   d7712:	d014      	beq.n	d773e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d7714:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7718:	2b09      	cmp	r3, #9
   d771a:	d910      	bls.n	d773e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d771c:	2874      	cmp	r0, #116	; 0x74
   d771e:	d010      	beq.n	d7742 <_ZNK5spark9JSONValue4typeEv+0x50>
   d7720:	2866      	cmp	r0, #102	; 0x66
   d7722:	d00e      	beq.n	d7742 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d7724:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d7728:	4258      	negs	r0, r3
   d772a:	4158      	adcs	r0, r3
   d772c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d772e:	2006      	movs	r0, #6
   d7730:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d7732:	2000      	movs	r0, #0
   d7734:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d7736:	4618      	mov	r0, r3
   d7738:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d773a:	2004      	movs	r0, #4
   d773c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d773e:	2003      	movs	r0, #3
   d7740:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d7742:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d7744:	4770      	bx	lr

000d7746 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d7746:	b510      	push	{r4, lr}
   d7748:	4604      	mov	r4, r0
    switch (type()) {
   d774a:	f7ff ffd2 	bl	d76f2 <_ZNK5spark9JSONValue4typeEv>
   d774e:	2802      	cmp	r0, #2
   d7750:	d00d      	beq.n	d776e <_ZNK5spark9JSONValue5toIntEv+0x28>
   d7752:	d316      	bcc.n	d7782 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d7754:	2804      	cmp	r0, #4
   d7756:	d814      	bhi.n	d7782 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d7758:	6822      	ldr	r2, [r4, #0]
   d775a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d775c:	6850      	ldr	r0, [r2, #4]
   d775e:	685b      	ldr	r3, [r3, #4]
   d7760:	220a      	movs	r2, #10
   d7762:	2100      	movs	r1, #0
   d7764:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d7766:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d776a:	f000 bda3 	b.w	d82b4 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d776e:	6822      	ldr	r2, [r4, #0]
   d7770:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7772:	6852      	ldr	r2, [r2, #4]
   d7774:	685b      	ldr	r3, [r3, #4]
   d7776:	5cd0      	ldrb	r0, [r2, r3]
   d7778:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d777c:	4258      	negs	r0, r3
   d777e:	4158      	adcs	r0, r3
   d7780:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d7782:	2000      	movs	r0, #0
    }
}
   d7784:	bd10      	pop	{r4, pc}

000d7786 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d7786:	b510      	push	{r4, lr}
    if (!n_) {
   d7788:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d778a:	4604      	mov	r4, r0
    if (!n_) {
   d778c:	b15b      	cbz	r3, d77a6 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d778e:	6880      	ldr	r0, [r0, #8]
   d7790:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d7792:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d7794:	3010      	adds	r0, #16
   d7796:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d7798:	6120      	str	r0, [r4, #16]
    --n_;
   d779a:	6163      	str	r3, [r4, #20]
    if (n_) {
   d779c:	b12b      	cbz	r3, d77aa <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d779e:	f7ff ff4d 	bl	d763c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d77a2:	60a0      	str	r0, [r4, #8]
   d77a4:	e001      	b.n	d77aa <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d77a6:	4618      	mov	r0, r3
   d77a8:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d77aa:	2001      	movs	r0, #1
}
   d77ac:	bd10      	pop	{r4, pc}

000d77ae <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d77ae:	b510      	push	{r4, lr}
    write('}');
   d77b0:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d77b2:	4604      	mov	r4, r0
    write('}');
   d77b4:	f7ff ff92 	bl	d76dc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d77b8:	2301      	movs	r3, #1
   d77ba:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d77bc:	4620      	mov	r0, r4
   d77be:	bd10      	pop	{r4, pc}

000d77c0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d77c0:	b508      	push	{r3, lr}
    switch (state_) {
   d77c2:	7903      	ldrb	r3, [r0, #4]
   d77c4:	2b01      	cmp	r3, #1
   d77c6:	d002      	beq.n	d77ce <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d77c8:	2b02      	cmp	r3, #2
   d77ca:	d002      	beq.n	d77d2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d77cc:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d77ce:	212c      	movs	r1, #44	; 0x2c
   d77d0:	e000      	b.n	d77d4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d77d2:	213a      	movs	r1, #58	; 0x3a
   d77d4:	f7ff ff82 	bl	d76dc <_ZN5spark10JSONWriter5writeEc>
   d77d8:	bd08      	pop	{r3, pc}

000d77da <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d77da:	b510      	push	{r4, lr}
   d77dc:	4604      	mov	r4, r0
    writeSeparator();
   d77de:	f7ff ffef 	bl	d77c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d77e2:	4620      	mov	r0, r4
   d77e4:	217b      	movs	r1, #123	; 0x7b
   d77e6:	f7ff ff79 	bl	d76dc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d77ea:	2300      	movs	r3, #0
   d77ec:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d77ee:	4620      	mov	r0, r4
   d77f0:	bd10      	pop	{r4, pc}
	...

000d77f4 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d77f4:	b538      	push	{r3, r4, r5, lr}
   d77f6:	4604      	mov	r4, r0
   d77f8:	460d      	mov	r5, r1
    writeSeparator();
   d77fa:	f7ff ffe1 	bl	d77c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d77fe:	6823      	ldr	r3, [r4, #0]
   d7800:	4904      	ldr	r1, [pc, #16]	; (d7814 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d7802:	68db      	ldr	r3, [r3, #12]
   d7804:	4620      	mov	r0, r4
   d7806:	462a      	mov	r2, r5
   d7808:	4798      	blx	r3
    state_ = NEXT;
   d780a:	2301      	movs	r3, #1
   d780c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d780e:	4620      	mov	r0, r4
   d7810:	bd38      	pop	{r3, r4, r5, pc}
   d7812:	bf00      	nop
   d7814:	000d873d 	.word	0x000d873d

000d7818 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d7818:	b538      	push	{r3, r4, r5, lr}
   d781a:	4604      	mov	r4, r0
   d781c:	460d      	mov	r5, r1
    writeSeparator();
   d781e:	f7ff ffcf 	bl	d77c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d7822:	6823      	ldr	r3, [r4, #0]
   d7824:	4904      	ldr	r1, [pc, #16]	; (d7838 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d7826:	68db      	ldr	r3, [r3, #12]
   d7828:	4620      	mov	r0, r4
   d782a:	462a      	mov	r2, r5
   d782c:	4798      	blx	r3
    state_ = NEXT;
   d782e:	2301      	movs	r3, #1
   d7830:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d7832:	4620      	mov	r0, r4
   d7834:	bd38      	pop	{r3, r4, r5, pc}
   d7836:	bf00      	nop
   d7838:	000d892f 	.word	0x000d892f

000d783c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d783e:	460d      	mov	r5, r1
   d7840:	4617      	mov	r7, r2
    write('"');
   d7842:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7844:	4604      	mov	r4, r0
   d7846:	442f      	add	r7, r5
    write('"');
   d7848:	f7ff ff48 	bl	d76dc <_ZN5spark10JSONWriter5writeEc>
   d784c:	462a      	mov	r2, r5
    const char* const end = str + size;
   d784e:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d7850:	42ba      	cmp	r2, r7
   d7852:	d038      	beq.n	d78c6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d7854:	4616      	mov	r6, r2
   d7856:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d785a:	2d22      	cmp	r5, #34	; 0x22
   d785c:	d003      	beq.n	d7866 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d785e:	2d5c      	cmp	r5, #92	; 0x5c
   d7860:	d001      	beq.n	d7866 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d7862:	2d1f      	cmp	r5, #31
   d7864:	d82d      	bhi.n	d78c2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d7866:	6823      	ldr	r3, [r4, #0]
   d7868:	1a52      	subs	r2, r2, r1
   d786a:	689b      	ldr	r3, [r3, #8]
   d786c:	4620      	mov	r0, r4
   d786e:	4798      	blx	r3
            write('\\');
   d7870:	215c      	movs	r1, #92	; 0x5c
   d7872:	4620      	mov	r0, r4
   d7874:	f7ff ff32 	bl	d76dc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d7878:	2d0c      	cmp	r5, #12
   d787a:	d019      	beq.n	d78b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d787c:	d807      	bhi.n	d788e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d787e:	2d09      	cmp	r5, #9
   d7880:	d00f      	beq.n	d78a2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d7882:	2d0a      	cmp	r5, #10
   d7884:	d012      	beq.n	d78ac <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d7886:	2d08      	cmp	r5, #8
   d7888:	d114      	bne.n	d78b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d788a:	2162      	movs	r1, #98	; 0x62
   d788c:	e00a      	b.n	d78a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d788e:	2d22      	cmp	r5, #34	; 0x22
   d7890:	d005      	beq.n	d789e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d7892:	2d5c      	cmp	r5, #92	; 0x5c
   d7894:	d003      	beq.n	d789e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d7896:	2d0d      	cmp	r5, #13
   d7898:	d10c      	bne.n	d78b4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d789a:	2172      	movs	r1, #114	; 0x72
   d789c:	e002      	b.n	d78a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d789e:	4629      	mov	r1, r5
   d78a0:	e000      	b.n	d78a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d78a2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d78a4:	4620      	mov	r0, r4
   d78a6:	f7ff ff19 	bl	d76dc <_ZN5spark10JSONWriter5writeEc>
                break;
   d78aa:	e009      	b.n	d78c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d78ac:	216e      	movs	r1, #110	; 0x6e
   d78ae:	e7f9      	b.n	d78a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d78b0:	2166      	movs	r1, #102	; 0x66
   d78b2:	e7f7      	b.n	d78a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d78b4:	6823      	ldr	r3, [r4, #0]
   d78b6:	490a      	ldr	r1, [pc, #40]	; (d78e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d78b8:	68db      	ldr	r3, [r3, #12]
   d78ba:	462a      	mov	r2, r5
   d78bc:	4620      	mov	r0, r4
   d78be:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d78c0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d78c2:	4632      	mov	r2, r6
   d78c4:	e7c4      	b.n	d7850 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d78c6:	4291      	cmp	r1, r2
   d78c8:	d004      	beq.n	d78d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d78ca:	6823      	ldr	r3, [r4, #0]
   d78cc:	1a52      	subs	r2, r2, r1
   d78ce:	689d      	ldr	r5, [r3, #8]
   d78d0:	4620      	mov	r0, r4
   d78d2:	47a8      	blx	r5
    }
    write('"');
   d78d4:	2122      	movs	r1, #34	; 0x22
   d78d6:	4620      	mov	r0, r4
   d78d8:	f7ff ff00 	bl	d76dc <_ZN5spark10JSONWriter5writeEc>
   d78dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d78de:	bf00      	nop
   d78e0:	000d8940 	.word	0x000d8940

000d78e4 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d78e4:	b570      	push	{r4, r5, r6, lr}
   d78e6:	4604      	mov	r4, r0
   d78e8:	460d      	mov	r5, r1
   d78ea:	4616      	mov	r6, r2
    writeSeparator();
   d78ec:	f7ff ff68 	bl	d77c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d78f0:	4620      	mov	r0, r4
   d78f2:	4632      	mov	r2, r6
   d78f4:	4629      	mov	r1, r5
   d78f6:	f7ff ffa1 	bl	d783c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d78fa:	2302      	movs	r3, #2
   d78fc:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d78fe:	4620      	mov	r0, r4
   d7900:	bd70      	pop	{r4, r5, r6, pc}

000d7902 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d7902:	b570      	push	{r4, r5, r6, lr}
   d7904:	4604      	mov	r4, r0
   d7906:	460d      	mov	r5, r1
   d7908:	4616      	mov	r6, r2
    writeSeparator();
   d790a:	f7ff ff59 	bl	d77c0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d790e:	4620      	mov	r0, r4
   d7910:	4632      	mov	r2, r6
   d7912:	4629      	mov	r1, r5
   d7914:	f7ff ff92 	bl	d783c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d7918:	2301      	movs	r3, #1
   d791a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d791c:	4620      	mov	r0, r4
   d791e:	bd70      	pop	{r4, r5, r6, pc}

000d7920 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7920:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d7922:	2300      	movs	r3, #0
   d7924:	4604      	mov	r4, r0
   d7926:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7928:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d792a:	4810      	ldr	r0, [pc, #64]	; (d796c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d792c:	60a0      	str	r0, [r4, #8]
   d792e:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7930:	b1d1      	cbz	r1, d7968 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d7932:	780b      	ldrb	r3, [r1, #0]
   d7934:	2b03      	cmp	r3, #3
   d7936:	d006      	beq.n	d7946 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7938:	b9b3      	cbnz	r3, d7968 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d793a:	6813      	ldr	r3, [r2, #0]
   d793c:	6858      	ldr	r0, [r3, #4]
   d793e:	684b      	ldr	r3, [r1, #4]
   d7940:	5cc3      	ldrb	r3, [r0, r3]
   d7942:	2b6e      	cmp	r3, #110	; 0x6e
   d7944:	d008      	beq.n	d7958 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d7946:	6813      	ldr	r3, [r2, #0]
   d7948:	6858      	ldr	r0, [r3, #4]
   d794a:	684b      	ldr	r3, [r1, #4]
   d794c:	4403      	add	r3, r0
   d794e:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d7950:	688b      	ldr	r3, [r1, #8]
   d7952:	6849      	ldr	r1, [r1, #4]
   d7954:	1a5b      	subs	r3, r3, r1
   d7956:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7958:	4611      	mov	r1, r2
   d795a:	4620      	mov	r0, r4
   d795c:	f851 3b04 	ldr.w	r3, [r1], #4
   d7960:	f840 3b04 	str.w	r3, [r0], #4
   d7964:	f7fd fe1e 	bl	d55a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d7968:	4620      	mov	r0, r4
   d796a:	bd10      	pop	{r4, pc}
   d796c:	000d8763 	.word	0x000d8763

000d7970 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d7970:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7972:	b510      	push	{r4, lr}
   d7974:	4604      	mov	r4, r0
   d7976:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7978:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d797a:	6083      	str	r3, [r0, #8]
   d797c:	60c3      	str	r3, [r0, #12]
   d797e:	6103      	str	r3, [r0, #16]
   d7980:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d7982:	b171      	cbz	r1, d79a2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d7984:	780b      	ldrb	r3, [r1, #0]
   d7986:	2b01      	cmp	r3, #1
   d7988:	d10b      	bne.n	d79a2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d798a:	f101 0310 	add.w	r3, r1, #16
   d798e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d7990:	68cb      	ldr	r3, [r1, #12]
   d7992:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7994:	4611      	mov	r1, r2
   d7996:	f851 3b04 	ldr.w	r3, [r1], #4
   d799a:	f840 3b04 	str.w	r3, [r0], #4
   d799e:	f7fd fe01 	bl	d55a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d79a2:	4620      	mov	r0, r4
   d79a4:	bd10      	pop	{r4, pc}

000d79a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d79a6:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d79a8:	b510      	push	{r4, lr}
   d79aa:	4604      	mov	r4, r0
   d79ac:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d79ae:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d79b0:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d79b2:	b131      	cbz	r1, d79c2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d79b4:	4611      	mov	r1, r2
   d79b6:	f851 3b04 	ldr.w	r3, [r1], #4
   d79ba:	f840 3b04 	str.w	r3, [r0], #4
   d79be:	f7fd fdf1 	bl	d55a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d79c2:	4620      	mov	r0, r4
   d79c4:	bd10      	pop	{r4, pc}

000d79c6 <__aeabi_atexit>:
   d79c6:	460b      	mov	r3, r1
   d79c8:	4601      	mov	r1, r0
   d79ca:	4618      	mov	r0, r3
   d79cc:	f000 bb1a 	b.w	d8004 <__cxa_atexit>

000d79d0 <_ZSt15get_new_handlerv>:
   d79d0:	4b02      	ldr	r3, [pc, #8]	; (d79dc <_ZSt15get_new_handlerv+0xc>)
   d79d2:	6818      	ldr	r0, [r3, #0]
   d79d4:	f3bf 8f5f 	dmb	sy
   d79d8:	4770      	bx	lr
   d79da:	bf00      	nop
   d79dc:	2003e750 	.word	0x2003e750

000d79e0 <_ZdlPvj>:
   d79e0:	f7fc bb5b 	b.w	d409a <_ZdlPv>

000d79e4 <_ZnwjRKSt9nothrow_t>:
   d79e4:	b510      	push	{r4, lr}
   d79e6:	2800      	cmp	r0, #0
   d79e8:	bf14      	ite	ne
   d79ea:	4604      	movne	r4, r0
   d79ec:	2401      	moveq	r4, #1
   d79ee:	4620      	mov	r0, r4
   d79f0:	f7fd f856 	bl	d4aa0 <malloc>
   d79f4:	b920      	cbnz	r0, d7a00 <_ZnwjRKSt9nothrow_t+0x1c>
   d79f6:	f7ff ffeb 	bl	d79d0 <_ZSt15get_new_handlerv>
   d79fa:	b108      	cbz	r0, d7a00 <_ZnwjRKSt9nothrow_t+0x1c>
   d79fc:	4780      	blx	r0
   d79fe:	e7f6      	b.n	d79ee <_ZnwjRKSt9nothrow_t+0xa>
   d7a00:	bd10      	pop	{r4, pc}
	...

000d7a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7a04:	4b18      	ldr	r3, [pc, #96]	; (d7a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7a06:	681a      	ldr	r2, [r3, #0]
   d7a08:	07d1      	lsls	r1, r2, #31
   d7a0a:	bf5c      	itt	pl
   d7a0c:	2201      	movpl	r2, #1
   d7a0e:	601a      	strpl	r2, [r3, #0]
   d7a10:	4b16      	ldr	r3, [pc, #88]	; (d7a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7a12:	681a      	ldr	r2, [r3, #0]
   d7a14:	07d2      	lsls	r2, r2, #31
   d7a16:	bf5c      	itt	pl
   d7a18:	2201      	movpl	r2, #1
   d7a1a:	601a      	strpl	r2, [r3, #0]
   d7a1c:	4b14      	ldr	r3, [pc, #80]	; (d7a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7a1e:	681a      	ldr	r2, [r3, #0]
   d7a20:	07d0      	lsls	r0, r2, #31
   d7a22:	bf5c      	itt	pl
   d7a24:	2201      	movpl	r2, #1
   d7a26:	601a      	strpl	r2, [r3, #0]
   d7a28:	4b12      	ldr	r3, [pc, #72]	; (d7a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7a2a:	681a      	ldr	r2, [r3, #0]
   d7a2c:	07d1      	lsls	r1, r2, #31
   d7a2e:	bf5c      	itt	pl
   d7a30:	2201      	movpl	r2, #1
   d7a32:	601a      	strpl	r2, [r3, #0]
   d7a34:	4b10      	ldr	r3, [pc, #64]	; (d7a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7a36:	681a      	ldr	r2, [r3, #0]
   d7a38:	07d2      	lsls	r2, r2, #31
   d7a3a:	bf5c      	itt	pl
   d7a3c:	2201      	movpl	r2, #1
   d7a3e:	601a      	strpl	r2, [r3, #0]
   d7a40:	4b0e      	ldr	r3, [pc, #56]	; (d7a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a42:	681a      	ldr	r2, [r3, #0]
   d7a44:	07d0      	lsls	r0, r2, #31
   d7a46:	bf5c      	itt	pl
   d7a48:	2201      	movpl	r2, #1
   d7a4a:	601a      	strpl	r2, [r3, #0]
   d7a4c:	4b0c      	ldr	r3, [pc, #48]	; (d7a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a4e:	681a      	ldr	r2, [r3, #0]
   d7a50:	07d1      	lsls	r1, r2, #31
   d7a52:	bf5c      	itt	pl
   d7a54:	2201      	movpl	r2, #1
   d7a56:	601a      	strpl	r2, [r3, #0]
   d7a58:	4b0a      	ldr	r3, [pc, #40]	; (d7a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a5a:	681a      	ldr	r2, [r3, #0]
   d7a5c:	07d2      	lsls	r2, r2, #31
   d7a5e:	bf5c      	itt	pl
   d7a60:	2201      	movpl	r2, #1
   d7a62:	601a      	strpl	r2, [r3, #0]
   d7a64:	4770      	bx	lr
   d7a66:	bf00      	nop
   d7a68:	2003e770 	.word	0x2003e770
   d7a6c:	2003e76c 	.word	0x2003e76c
   d7a70:	2003e768 	.word	0x2003e768
   d7a74:	2003e764 	.word	0x2003e764
   d7a78:	2003e760 	.word	0x2003e760
   d7a7c:	2003e75c 	.word	0x2003e75c
   d7a80:	2003e758 	.word	0x2003e758
   d7a84:	2003e754 	.word	0x2003e754

000d7a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d7a88:	4b24      	ldr	r3, [pc, #144]	; (d7b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d7a8a:	681a      	ldr	r2, [r3, #0]
   d7a8c:	07d0      	lsls	r0, r2, #31
   d7a8e:	bf5c      	itt	pl
   d7a90:	2201      	movpl	r2, #1
   d7a92:	601a      	strpl	r2, [r3, #0]
   d7a94:	4b22      	ldr	r3, [pc, #136]	; (d7b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d7a96:	681a      	ldr	r2, [r3, #0]
   d7a98:	07d1      	lsls	r1, r2, #31
   d7a9a:	bf5c      	itt	pl
   d7a9c:	2201      	movpl	r2, #1
   d7a9e:	601a      	strpl	r2, [r3, #0]
   d7aa0:	4b20      	ldr	r3, [pc, #128]	; (d7b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7aa2:	681a      	ldr	r2, [r3, #0]
   d7aa4:	07d2      	lsls	r2, r2, #31
   d7aa6:	bf5c      	itt	pl
   d7aa8:	2201      	movpl	r2, #1
   d7aaa:	601a      	strpl	r2, [r3, #0]
   d7aac:	4b1e      	ldr	r3, [pc, #120]	; (d7b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d7aae:	681a      	ldr	r2, [r3, #0]
   d7ab0:	07d0      	lsls	r0, r2, #31
   d7ab2:	bf5c      	itt	pl
   d7ab4:	2201      	movpl	r2, #1
   d7ab6:	601a      	strpl	r2, [r3, #0]
   d7ab8:	4b1c      	ldr	r3, [pc, #112]	; (d7b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d7aba:	681a      	ldr	r2, [r3, #0]
   d7abc:	07d1      	lsls	r1, r2, #31
   d7abe:	bf5c      	itt	pl
   d7ac0:	2201      	movpl	r2, #1
   d7ac2:	601a      	strpl	r2, [r3, #0]
   d7ac4:	4b1a      	ldr	r3, [pc, #104]	; (d7b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d7ac6:	681a      	ldr	r2, [r3, #0]
   d7ac8:	07d2      	lsls	r2, r2, #31
   d7aca:	bf5c      	itt	pl
   d7acc:	2201      	movpl	r2, #1
   d7ace:	601a      	strpl	r2, [r3, #0]
   d7ad0:	4b18      	ldr	r3, [pc, #96]	; (d7b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d7ad2:	681a      	ldr	r2, [r3, #0]
   d7ad4:	07d0      	lsls	r0, r2, #31
   d7ad6:	bf5c      	itt	pl
   d7ad8:	2201      	movpl	r2, #1
   d7ada:	601a      	strpl	r2, [r3, #0]
   d7adc:	4b16      	ldr	r3, [pc, #88]	; (d7b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d7ade:	681a      	ldr	r2, [r3, #0]
   d7ae0:	07d1      	lsls	r1, r2, #31
   d7ae2:	bf5c      	itt	pl
   d7ae4:	2201      	movpl	r2, #1
   d7ae6:	601a      	strpl	r2, [r3, #0]
   d7ae8:	4b14      	ldr	r3, [pc, #80]	; (d7b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d7aea:	681a      	ldr	r2, [r3, #0]
   d7aec:	07d2      	lsls	r2, r2, #31
   d7aee:	bf5c      	itt	pl
   d7af0:	2201      	movpl	r2, #1
   d7af2:	601a      	strpl	r2, [r3, #0]
   d7af4:	4b12      	ldr	r3, [pc, #72]	; (d7b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d7af6:	681a      	ldr	r2, [r3, #0]
   d7af8:	07d0      	lsls	r0, r2, #31
   d7afa:	bf5c      	itt	pl
   d7afc:	2201      	movpl	r2, #1
   d7afe:	601a      	strpl	r2, [r3, #0]
   d7b00:	4b10      	ldr	r3, [pc, #64]	; (d7b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d7b02:	681a      	ldr	r2, [r3, #0]
   d7b04:	07d1      	lsls	r1, r2, #31
   d7b06:	bf5c      	itt	pl
   d7b08:	2201      	movpl	r2, #1
   d7b0a:	601a      	strpl	r2, [r3, #0]
   d7b0c:	4b0e      	ldr	r3, [pc, #56]	; (d7b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7b0e:	681a      	ldr	r2, [r3, #0]
   d7b10:	07d2      	lsls	r2, r2, #31
   d7b12:	bf5c      	itt	pl
   d7b14:	2201      	movpl	r2, #1
   d7b16:	601a      	strpl	r2, [r3, #0]
   d7b18:	4770      	bx	lr
   d7b1a:	bf00      	nop
   d7b1c:	2003e7a0 	.word	0x2003e7a0
   d7b20:	2003e79c 	.word	0x2003e79c
   d7b24:	2003e798 	.word	0x2003e798
   d7b28:	2003e794 	.word	0x2003e794
   d7b2c:	2003e790 	.word	0x2003e790
   d7b30:	2003e78c 	.word	0x2003e78c
   d7b34:	2003e788 	.word	0x2003e788
   d7b38:	2003e784 	.word	0x2003e784
   d7b3c:	2003e780 	.word	0x2003e780
   d7b40:	2003e77c 	.word	0x2003e77c
   d7b44:	2003e778 	.word	0x2003e778
   d7b48:	2003e774 	.word	0x2003e774

000d7b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7b4c:	4b24      	ldr	r3, [pc, #144]	; (d7be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7b4e:	681a      	ldr	r2, [r3, #0]
   d7b50:	07d0      	lsls	r0, r2, #31
   d7b52:	bf5c      	itt	pl
   d7b54:	2201      	movpl	r2, #1
   d7b56:	601a      	strpl	r2, [r3, #0]
   d7b58:	4b22      	ldr	r3, [pc, #136]	; (d7be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7b5a:	681a      	ldr	r2, [r3, #0]
   d7b5c:	07d1      	lsls	r1, r2, #31
   d7b5e:	bf5c      	itt	pl
   d7b60:	2201      	movpl	r2, #1
   d7b62:	601a      	strpl	r2, [r3, #0]
   d7b64:	4b20      	ldr	r3, [pc, #128]	; (d7be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7b66:	681a      	ldr	r2, [r3, #0]
   d7b68:	07d2      	lsls	r2, r2, #31
   d7b6a:	bf5c      	itt	pl
   d7b6c:	2201      	movpl	r2, #1
   d7b6e:	601a      	strpl	r2, [r3, #0]
   d7b70:	4b1e      	ldr	r3, [pc, #120]	; (d7bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7b72:	681a      	ldr	r2, [r3, #0]
   d7b74:	07d0      	lsls	r0, r2, #31
   d7b76:	bf5c      	itt	pl
   d7b78:	2201      	movpl	r2, #1
   d7b7a:	601a      	strpl	r2, [r3, #0]
   d7b7c:	4b1c      	ldr	r3, [pc, #112]	; (d7bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7b7e:	681a      	ldr	r2, [r3, #0]
   d7b80:	07d1      	lsls	r1, r2, #31
   d7b82:	bf5c      	itt	pl
   d7b84:	2201      	movpl	r2, #1
   d7b86:	601a      	strpl	r2, [r3, #0]
   d7b88:	4b1a      	ldr	r3, [pc, #104]	; (d7bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7b8a:	681a      	ldr	r2, [r3, #0]
   d7b8c:	07d2      	lsls	r2, r2, #31
   d7b8e:	bf5c      	itt	pl
   d7b90:	2201      	movpl	r2, #1
   d7b92:	601a      	strpl	r2, [r3, #0]
   d7b94:	4b18      	ldr	r3, [pc, #96]	; (d7bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7b96:	681a      	ldr	r2, [r3, #0]
   d7b98:	07d0      	lsls	r0, r2, #31
   d7b9a:	bf5c      	itt	pl
   d7b9c:	2201      	movpl	r2, #1
   d7b9e:	601a      	strpl	r2, [r3, #0]
   d7ba0:	4b16      	ldr	r3, [pc, #88]	; (d7bfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7ba2:	681a      	ldr	r2, [r3, #0]
   d7ba4:	07d1      	lsls	r1, r2, #31
   d7ba6:	bf5c      	itt	pl
   d7ba8:	2201      	movpl	r2, #1
   d7baa:	601a      	strpl	r2, [r3, #0]
   d7bac:	4b14      	ldr	r3, [pc, #80]	; (d7c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7bae:	681a      	ldr	r2, [r3, #0]
   d7bb0:	07d2      	lsls	r2, r2, #31
   d7bb2:	bf5c      	itt	pl
   d7bb4:	2201      	movpl	r2, #1
   d7bb6:	601a      	strpl	r2, [r3, #0]
   d7bb8:	4b12      	ldr	r3, [pc, #72]	; (d7c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7bba:	681a      	ldr	r2, [r3, #0]
   d7bbc:	07d0      	lsls	r0, r2, #31
   d7bbe:	bf5c      	itt	pl
   d7bc0:	2201      	movpl	r2, #1
   d7bc2:	601a      	strpl	r2, [r3, #0]
   d7bc4:	4b10      	ldr	r3, [pc, #64]	; (d7c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7bc6:	681a      	ldr	r2, [r3, #0]
   d7bc8:	07d1      	lsls	r1, r2, #31
   d7bca:	bf5c      	itt	pl
   d7bcc:	2201      	movpl	r2, #1
   d7bce:	601a      	strpl	r2, [r3, #0]
   d7bd0:	4b0e      	ldr	r3, [pc, #56]	; (d7c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7bd2:	681a      	ldr	r2, [r3, #0]
   d7bd4:	07d2      	lsls	r2, r2, #31
   d7bd6:	bf5c      	itt	pl
   d7bd8:	2201      	movpl	r2, #1
   d7bda:	601a      	strpl	r2, [r3, #0]
   d7bdc:	4770      	bx	lr
   d7bde:	bf00      	nop
   d7be0:	2003e7d0 	.word	0x2003e7d0
   d7be4:	2003e7cc 	.word	0x2003e7cc
   d7be8:	2003e7c8 	.word	0x2003e7c8
   d7bec:	2003e7c4 	.word	0x2003e7c4
   d7bf0:	2003e7c0 	.word	0x2003e7c0
   d7bf4:	2003e7bc 	.word	0x2003e7bc
   d7bf8:	2003e7b8 	.word	0x2003e7b8
   d7bfc:	2003e7b4 	.word	0x2003e7b4
   d7c00:	2003e7b0 	.word	0x2003e7b0
   d7c04:	2003e7ac 	.word	0x2003e7ac
   d7c08:	2003e7a8 	.word	0x2003e7a8
   d7c0c:	2003e7a4 	.word	0x2003e7a4

000d7c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7c10:	4b18      	ldr	r3, [pc, #96]	; (d7c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7c12:	681a      	ldr	r2, [r3, #0]
   d7c14:	07d1      	lsls	r1, r2, #31
   d7c16:	bf5c      	itt	pl
   d7c18:	2201      	movpl	r2, #1
   d7c1a:	601a      	strpl	r2, [r3, #0]
   d7c1c:	4b16      	ldr	r3, [pc, #88]	; (d7c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d7c1e:	681a      	ldr	r2, [r3, #0]
   d7c20:	07d2      	lsls	r2, r2, #31
   d7c22:	bf5c      	itt	pl
   d7c24:	2201      	movpl	r2, #1
   d7c26:	601a      	strpl	r2, [r3, #0]
   d7c28:	4b14      	ldr	r3, [pc, #80]	; (d7c7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d7c2a:	681a      	ldr	r2, [r3, #0]
   d7c2c:	07d0      	lsls	r0, r2, #31
   d7c2e:	bf5c      	itt	pl
   d7c30:	2201      	movpl	r2, #1
   d7c32:	601a      	strpl	r2, [r3, #0]
   d7c34:	4b12      	ldr	r3, [pc, #72]	; (d7c80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7c36:	681a      	ldr	r2, [r3, #0]
   d7c38:	07d1      	lsls	r1, r2, #31
   d7c3a:	bf5c      	itt	pl
   d7c3c:	2201      	movpl	r2, #1
   d7c3e:	601a      	strpl	r2, [r3, #0]
   d7c40:	4b10      	ldr	r3, [pc, #64]	; (d7c84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7c42:	681a      	ldr	r2, [r3, #0]
   d7c44:	07d2      	lsls	r2, r2, #31
   d7c46:	bf5c      	itt	pl
   d7c48:	2201      	movpl	r2, #1
   d7c4a:	601a      	strpl	r2, [r3, #0]
   d7c4c:	4b0e      	ldr	r3, [pc, #56]	; (d7c88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7c4e:	681a      	ldr	r2, [r3, #0]
   d7c50:	07d0      	lsls	r0, r2, #31
   d7c52:	bf5c      	itt	pl
   d7c54:	2201      	movpl	r2, #1
   d7c56:	601a      	strpl	r2, [r3, #0]
   d7c58:	4b0c      	ldr	r3, [pc, #48]	; (d7c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7c5a:	681a      	ldr	r2, [r3, #0]
   d7c5c:	07d1      	lsls	r1, r2, #31
   d7c5e:	bf5c      	itt	pl
   d7c60:	2201      	movpl	r2, #1
   d7c62:	601a      	strpl	r2, [r3, #0]
   d7c64:	4b0a      	ldr	r3, [pc, #40]	; (d7c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7c66:	681a      	ldr	r2, [r3, #0]
   d7c68:	07d2      	lsls	r2, r2, #31
   d7c6a:	bf5c      	itt	pl
   d7c6c:	2201      	movpl	r2, #1
   d7c6e:	601a      	strpl	r2, [r3, #0]
   d7c70:	4770      	bx	lr
   d7c72:	bf00      	nop
   d7c74:	2003e7f0 	.word	0x2003e7f0
   d7c78:	2003e7ec 	.word	0x2003e7ec
   d7c7c:	2003e7e8 	.word	0x2003e7e8
   d7c80:	2003e7e4 	.word	0x2003e7e4
   d7c84:	2003e7e0 	.word	0x2003e7e0
   d7c88:	2003e7dc 	.word	0x2003e7dc
   d7c8c:	2003e7d8 	.word	0x2003e7d8
   d7c90:	2003e7d4 	.word	0x2003e7d4

000d7c94 <__aeabi_drsub>:
   d7c94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7c98:	e002      	b.n	d7ca0 <__adddf3>
   d7c9a:	bf00      	nop

000d7c9c <__aeabi_dsub>:
   d7c9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7ca0 <__adddf3>:
   d7ca0:	b530      	push	{r4, r5, lr}
   d7ca2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7ca6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7caa:	ea94 0f05 	teq	r4, r5
   d7cae:	bf08      	it	eq
   d7cb0:	ea90 0f02 	teqeq	r0, r2
   d7cb4:	bf1f      	itttt	ne
   d7cb6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7cba:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7cbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7cc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7cc6:	f000 80e2 	beq.w	d7e8e <__adddf3+0x1ee>
   d7cca:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7cce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7cd2:	bfb8      	it	lt
   d7cd4:	426d      	neglt	r5, r5
   d7cd6:	dd0c      	ble.n	d7cf2 <__adddf3+0x52>
   d7cd8:	442c      	add	r4, r5
   d7cda:	ea80 0202 	eor.w	r2, r0, r2
   d7cde:	ea81 0303 	eor.w	r3, r1, r3
   d7ce2:	ea82 0000 	eor.w	r0, r2, r0
   d7ce6:	ea83 0101 	eor.w	r1, r3, r1
   d7cea:	ea80 0202 	eor.w	r2, r0, r2
   d7cee:	ea81 0303 	eor.w	r3, r1, r3
   d7cf2:	2d36      	cmp	r5, #54	; 0x36
   d7cf4:	bf88      	it	hi
   d7cf6:	bd30      	pophi	{r4, r5, pc}
   d7cf8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7cfc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7d00:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7d04:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7d08:	d002      	beq.n	d7d10 <__adddf3+0x70>
   d7d0a:	4240      	negs	r0, r0
   d7d0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7d10:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7d14:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7d18:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7d1c:	d002      	beq.n	d7d24 <__adddf3+0x84>
   d7d1e:	4252      	negs	r2, r2
   d7d20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7d24:	ea94 0f05 	teq	r4, r5
   d7d28:	f000 80a7 	beq.w	d7e7a <__adddf3+0x1da>
   d7d2c:	f1a4 0401 	sub.w	r4, r4, #1
   d7d30:	f1d5 0e20 	rsbs	lr, r5, #32
   d7d34:	db0d      	blt.n	d7d52 <__adddf3+0xb2>
   d7d36:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7d3a:	fa22 f205 	lsr.w	r2, r2, r5
   d7d3e:	1880      	adds	r0, r0, r2
   d7d40:	f141 0100 	adc.w	r1, r1, #0
   d7d44:	fa03 f20e 	lsl.w	r2, r3, lr
   d7d48:	1880      	adds	r0, r0, r2
   d7d4a:	fa43 f305 	asr.w	r3, r3, r5
   d7d4e:	4159      	adcs	r1, r3
   d7d50:	e00e      	b.n	d7d70 <__adddf3+0xd0>
   d7d52:	f1a5 0520 	sub.w	r5, r5, #32
   d7d56:	f10e 0e20 	add.w	lr, lr, #32
   d7d5a:	2a01      	cmp	r2, #1
   d7d5c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7d60:	bf28      	it	cs
   d7d62:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7d66:	fa43 f305 	asr.w	r3, r3, r5
   d7d6a:	18c0      	adds	r0, r0, r3
   d7d6c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7d70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d74:	d507      	bpl.n	d7d86 <__adddf3+0xe6>
   d7d76:	f04f 0e00 	mov.w	lr, #0
   d7d7a:	f1dc 0c00 	rsbs	ip, ip, #0
   d7d7e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7d82:	eb6e 0101 	sbc.w	r1, lr, r1
   d7d86:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7d8a:	d31b      	bcc.n	d7dc4 <__adddf3+0x124>
   d7d8c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7d90:	d30c      	bcc.n	d7dac <__adddf3+0x10c>
   d7d92:	0849      	lsrs	r1, r1, #1
   d7d94:	ea5f 0030 	movs.w	r0, r0, rrx
   d7d98:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7d9c:	f104 0401 	add.w	r4, r4, #1
   d7da0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7da4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7da8:	f080 809a 	bcs.w	d7ee0 <__adddf3+0x240>
   d7dac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7db0:	bf08      	it	eq
   d7db2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7db6:	f150 0000 	adcs.w	r0, r0, #0
   d7dba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7dbe:	ea41 0105 	orr.w	r1, r1, r5
   d7dc2:	bd30      	pop	{r4, r5, pc}
   d7dc4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7dc8:	4140      	adcs	r0, r0
   d7dca:	eb41 0101 	adc.w	r1, r1, r1
   d7dce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7dd2:	f1a4 0401 	sub.w	r4, r4, #1
   d7dd6:	d1e9      	bne.n	d7dac <__adddf3+0x10c>
   d7dd8:	f091 0f00 	teq	r1, #0
   d7ddc:	bf04      	itt	eq
   d7dde:	4601      	moveq	r1, r0
   d7de0:	2000      	moveq	r0, #0
   d7de2:	fab1 f381 	clz	r3, r1
   d7de6:	bf08      	it	eq
   d7de8:	3320      	addeq	r3, #32
   d7dea:	f1a3 030b 	sub.w	r3, r3, #11
   d7dee:	f1b3 0220 	subs.w	r2, r3, #32
   d7df2:	da0c      	bge.n	d7e0e <__adddf3+0x16e>
   d7df4:	320c      	adds	r2, #12
   d7df6:	dd08      	ble.n	d7e0a <__adddf3+0x16a>
   d7df8:	f102 0c14 	add.w	ip, r2, #20
   d7dfc:	f1c2 020c 	rsb	r2, r2, #12
   d7e00:	fa01 f00c 	lsl.w	r0, r1, ip
   d7e04:	fa21 f102 	lsr.w	r1, r1, r2
   d7e08:	e00c      	b.n	d7e24 <__adddf3+0x184>
   d7e0a:	f102 0214 	add.w	r2, r2, #20
   d7e0e:	bfd8      	it	le
   d7e10:	f1c2 0c20 	rsble	ip, r2, #32
   d7e14:	fa01 f102 	lsl.w	r1, r1, r2
   d7e18:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7e1c:	bfdc      	itt	le
   d7e1e:	ea41 010c 	orrle.w	r1, r1, ip
   d7e22:	4090      	lslle	r0, r2
   d7e24:	1ae4      	subs	r4, r4, r3
   d7e26:	bfa2      	ittt	ge
   d7e28:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7e2c:	4329      	orrge	r1, r5
   d7e2e:	bd30      	popge	{r4, r5, pc}
   d7e30:	ea6f 0404 	mvn.w	r4, r4
   d7e34:	3c1f      	subs	r4, #31
   d7e36:	da1c      	bge.n	d7e72 <__adddf3+0x1d2>
   d7e38:	340c      	adds	r4, #12
   d7e3a:	dc0e      	bgt.n	d7e5a <__adddf3+0x1ba>
   d7e3c:	f104 0414 	add.w	r4, r4, #20
   d7e40:	f1c4 0220 	rsb	r2, r4, #32
   d7e44:	fa20 f004 	lsr.w	r0, r0, r4
   d7e48:	fa01 f302 	lsl.w	r3, r1, r2
   d7e4c:	ea40 0003 	orr.w	r0, r0, r3
   d7e50:	fa21 f304 	lsr.w	r3, r1, r4
   d7e54:	ea45 0103 	orr.w	r1, r5, r3
   d7e58:	bd30      	pop	{r4, r5, pc}
   d7e5a:	f1c4 040c 	rsb	r4, r4, #12
   d7e5e:	f1c4 0220 	rsb	r2, r4, #32
   d7e62:	fa20 f002 	lsr.w	r0, r0, r2
   d7e66:	fa01 f304 	lsl.w	r3, r1, r4
   d7e6a:	ea40 0003 	orr.w	r0, r0, r3
   d7e6e:	4629      	mov	r1, r5
   d7e70:	bd30      	pop	{r4, r5, pc}
   d7e72:	fa21 f004 	lsr.w	r0, r1, r4
   d7e76:	4629      	mov	r1, r5
   d7e78:	bd30      	pop	{r4, r5, pc}
   d7e7a:	f094 0f00 	teq	r4, #0
   d7e7e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7e82:	bf06      	itte	eq
   d7e84:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7e88:	3401      	addeq	r4, #1
   d7e8a:	3d01      	subne	r5, #1
   d7e8c:	e74e      	b.n	d7d2c <__adddf3+0x8c>
   d7e8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7e92:	bf18      	it	ne
   d7e94:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7e98:	d029      	beq.n	d7eee <__adddf3+0x24e>
   d7e9a:	ea94 0f05 	teq	r4, r5
   d7e9e:	bf08      	it	eq
   d7ea0:	ea90 0f02 	teqeq	r0, r2
   d7ea4:	d005      	beq.n	d7eb2 <__adddf3+0x212>
   d7ea6:	ea54 0c00 	orrs.w	ip, r4, r0
   d7eaa:	bf04      	itt	eq
   d7eac:	4619      	moveq	r1, r3
   d7eae:	4610      	moveq	r0, r2
   d7eb0:	bd30      	pop	{r4, r5, pc}
   d7eb2:	ea91 0f03 	teq	r1, r3
   d7eb6:	bf1e      	ittt	ne
   d7eb8:	2100      	movne	r1, #0
   d7eba:	2000      	movne	r0, #0
   d7ebc:	bd30      	popne	{r4, r5, pc}
   d7ebe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7ec2:	d105      	bne.n	d7ed0 <__adddf3+0x230>
   d7ec4:	0040      	lsls	r0, r0, #1
   d7ec6:	4149      	adcs	r1, r1
   d7ec8:	bf28      	it	cs
   d7eca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7ece:	bd30      	pop	{r4, r5, pc}
   d7ed0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7ed4:	bf3c      	itt	cc
   d7ed6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7eda:	bd30      	popcc	{r4, r5, pc}
   d7edc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7ee0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7ee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7ee8:	f04f 0000 	mov.w	r0, #0
   d7eec:	bd30      	pop	{r4, r5, pc}
   d7eee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7ef2:	bf1a      	itte	ne
   d7ef4:	4619      	movne	r1, r3
   d7ef6:	4610      	movne	r0, r2
   d7ef8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7efc:	bf1c      	itt	ne
   d7efe:	460b      	movne	r3, r1
   d7f00:	4602      	movne	r2, r0
   d7f02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7f06:	bf06      	itte	eq
   d7f08:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7f0c:	ea91 0f03 	teqeq	r1, r3
   d7f10:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7f14:	bd30      	pop	{r4, r5, pc}
   d7f16:	bf00      	nop

000d7f18 <__aeabi_ui2d>:
   d7f18:	f090 0f00 	teq	r0, #0
   d7f1c:	bf04      	itt	eq
   d7f1e:	2100      	moveq	r1, #0
   d7f20:	4770      	bxeq	lr
   d7f22:	b530      	push	{r4, r5, lr}
   d7f24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f2c:	f04f 0500 	mov.w	r5, #0
   d7f30:	f04f 0100 	mov.w	r1, #0
   d7f34:	e750      	b.n	d7dd8 <__adddf3+0x138>
   d7f36:	bf00      	nop

000d7f38 <__aeabi_i2d>:
   d7f38:	f090 0f00 	teq	r0, #0
   d7f3c:	bf04      	itt	eq
   d7f3e:	2100      	moveq	r1, #0
   d7f40:	4770      	bxeq	lr
   d7f42:	b530      	push	{r4, r5, lr}
   d7f44:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7f48:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7f4c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7f50:	bf48      	it	mi
   d7f52:	4240      	negmi	r0, r0
   d7f54:	f04f 0100 	mov.w	r1, #0
   d7f58:	e73e      	b.n	d7dd8 <__adddf3+0x138>
   d7f5a:	bf00      	nop

000d7f5c <__aeabi_f2d>:
   d7f5c:	0042      	lsls	r2, r0, #1
   d7f5e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7f62:	ea4f 0131 	mov.w	r1, r1, rrx
   d7f66:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7f6a:	bf1f      	itttt	ne
   d7f6c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7f70:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7f74:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7f78:	4770      	bxne	lr
   d7f7a:	f092 0f00 	teq	r2, #0
   d7f7e:	bf14      	ite	ne
   d7f80:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7f84:	4770      	bxeq	lr
   d7f86:	b530      	push	{r4, r5, lr}
   d7f88:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7f8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7f90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7f94:	e720      	b.n	d7dd8 <__adddf3+0x138>
   d7f96:	bf00      	nop

000d7f98 <__aeabi_ul2d>:
   d7f98:	ea50 0201 	orrs.w	r2, r0, r1
   d7f9c:	bf08      	it	eq
   d7f9e:	4770      	bxeq	lr
   d7fa0:	b530      	push	{r4, r5, lr}
   d7fa2:	f04f 0500 	mov.w	r5, #0
   d7fa6:	e00a      	b.n	d7fbe <__aeabi_l2d+0x16>

000d7fa8 <__aeabi_l2d>:
   d7fa8:	ea50 0201 	orrs.w	r2, r0, r1
   d7fac:	bf08      	it	eq
   d7fae:	4770      	bxeq	lr
   d7fb0:	b530      	push	{r4, r5, lr}
   d7fb2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7fb6:	d502      	bpl.n	d7fbe <__aeabi_l2d+0x16>
   d7fb8:	4240      	negs	r0, r0
   d7fba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7fbe:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7fc2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7fc6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7fca:	f43f aedc 	beq.w	d7d86 <__adddf3+0xe6>
   d7fce:	f04f 0203 	mov.w	r2, #3
   d7fd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7fd6:	bf18      	it	ne
   d7fd8:	3203      	addne	r2, #3
   d7fda:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7fde:	bf18      	it	ne
   d7fe0:	3203      	addne	r2, #3
   d7fe2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7fe6:	f1c2 0320 	rsb	r3, r2, #32
   d7fea:	fa00 fc03 	lsl.w	ip, r0, r3
   d7fee:	fa20 f002 	lsr.w	r0, r0, r2
   d7ff2:	fa01 fe03 	lsl.w	lr, r1, r3
   d7ff6:	ea40 000e 	orr.w	r0, r0, lr
   d7ffa:	fa21 f102 	lsr.w	r1, r1, r2
   d7ffe:	4414      	add	r4, r2
   d8000:	e6c1      	b.n	d7d86 <__adddf3+0xe6>
   d8002:	bf00      	nop

000d8004 <__cxa_atexit>:
   d8004:	b510      	push	{r4, lr}
   d8006:	4c05      	ldr	r4, [pc, #20]	; (d801c <__cxa_atexit+0x18>)
   d8008:	4613      	mov	r3, r2
   d800a:	b12c      	cbz	r4, d8018 <__cxa_atexit+0x14>
   d800c:	460a      	mov	r2, r1
   d800e:	4601      	mov	r1, r0
   d8010:	2002      	movs	r0, #2
   d8012:	f3af 8000 	nop.w
   d8016:	bd10      	pop	{r4, pc}
   d8018:	4620      	mov	r0, r4
   d801a:	bd10      	pop	{r4, pc}
   d801c:	00000000 	.word	0x00000000

000d8020 <memcmp>:
   d8020:	b510      	push	{r4, lr}
   d8022:	3901      	subs	r1, #1
   d8024:	4402      	add	r2, r0
   d8026:	4290      	cmp	r0, r2
   d8028:	d007      	beq.n	d803a <memcmp+0x1a>
   d802a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d802e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8032:	42a3      	cmp	r3, r4
   d8034:	d0f7      	beq.n	d8026 <memcmp+0x6>
   d8036:	1b18      	subs	r0, r3, r4
   d8038:	bd10      	pop	{r4, pc}
   d803a:	2000      	movs	r0, #0
   d803c:	bd10      	pop	{r4, pc}

000d803e <memcpy>:
   d803e:	b510      	push	{r4, lr}
   d8040:	1e43      	subs	r3, r0, #1
   d8042:	440a      	add	r2, r1
   d8044:	4291      	cmp	r1, r2
   d8046:	d004      	beq.n	d8052 <memcpy+0x14>
   d8048:	f811 4b01 	ldrb.w	r4, [r1], #1
   d804c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8050:	e7f8      	b.n	d8044 <memcpy+0x6>
   d8052:	bd10      	pop	{r4, pc}

000d8054 <memmove>:
   d8054:	4288      	cmp	r0, r1
   d8056:	b510      	push	{r4, lr}
   d8058:	eb01 0302 	add.w	r3, r1, r2
   d805c:	d801      	bhi.n	d8062 <memmove+0xe>
   d805e:	1e42      	subs	r2, r0, #1
   d8060:	e00b      	b.n	d807a <memmove+0x26>
   d8062:	4298      	cmp	r0, r3
   d8064:	d2fb      	bcs.n	d805e <memmove+0xa>
   d8066:	1881      	adds	r1, r0, r2
   d8068:	1ad2      	subs	r2, r2, r3
   d806a:	42d3      	cmn	r3, r2
   d806c:	d004      	beq.n	d8078 <memmove+0x24>
   d806e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8072:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8076:	e7f8      	b.n	d806a <memmove+0x16>
   d8078:	bd10      	pop	{r4, pc}
   d807a:	4299      	cmp	r1, r3
   d807c:	d004      	beq.n	d8088 <memmove+0x34>
   d807e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8082:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8086:	e7f8      	b.n	d807a <memmove+0x26>
   d8088:	bd10      	pop	{r4, pc}

000d808a <memset>:
   d808a:	4402      	add	r2, r0
   d808c:	4603      	mov	r3, r0
   d808e:	4293      	cmp	r3, r2
   d8090:	d002      	beq.n	d8098 <memset+0xe>
   d8092:	f803 1b01 	strb.w	r1, [r3], #1
   d8096:	e7fa      	b.n	d808e <memset+0x4>
   d8098:	4770      	bx	lr
	...

000d809c <srand>:
   d809c:	b538      	push	{r3, r4, r5, lr}
   d809e:	4b12      	ldr	r3, [pc, #72]	; (d80e8 <srand+0x4c>)
   d80a0:	681c      	ldr	r4, [r3, #0]
   d80a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d80a4:	4605      	mov	r5, r0
   d80a6:	b9d3      	cbnz	r3, d80de <srand+0x42>
   d80a8:	2018      	movs	r0, #24
   d80aa:	f7fc fcf9 	bl	d4aa0 <malloc>
   d80ae:	f243 330e 	movw	r3, #13070	; 0x330e
   d80b2:	63a0      	str	r0, [r4, #56]	; 0x38
   d80b4:	8003      	strh	r3, [r0, #0]
   d80b6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d80ba:	8043      	strh	r3, [r0, #2]
   d80bc:	f241 2334 	movw	r3, #4660	; 0x1234
   d80c0:	8083      	strh	r3, [r0, #4]
   d80c2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d80c6:	80c3      	strh	r3, [r0, #6]
   d80c8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d80cc:	8103      	strh	r3, [r0, #8]
   d80ce:	2305      	movs	r3, #5
   d80d0:	8143      	strh	r3, [r0, #10]
   d80d2:	230b      	movs	r3, #11
   d80d4:	8183      	strh	r3, [r0, #12]
   d80d6:	2201      	movs	r2, #1
   d80d8:	2300      	movs	r3, #0
   d80da:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d80de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d80e0:	2200      	movs	r2, #0
   d80e2:	611d      	str	r5, [r3, #16]
   d80e4:	615a      	str	r2, [r3, #20]
   d80e6:	bd38      	pop	{r3, r4, r5, pc}
   d80e8:	2003e330 	.word	0x2003e330

000d80ec <strchr>:
   d80ec:	b2c9      	uxtb	r1, r1
   d80ee:	4603      	mov	r3, r0
   d80f0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d80f4:	b11a      	cbz	r2, d80fe <strchr+0x12>
   d80f6:	4291      	cmp	r1, r2
   d80f8:	d1f9      	bne.n	d80ee <strchr+0x2>
   d80fa:	4618      	mov	r0, r3
   d80fc:	4770      	bx	lr
   d80fe:	2900      	cmp	r1, #0
   d8100:	bf0c      	ite	eq
   d8102:	4618      	moveq	r0, r3
   d8104:	2000      	movne	r0, #0
   d8106:	4770      	bx	lr

000d8108 <strchrnul>:
   d8108:	b510      	push	{r4, lr}
   d810a:	4604      	mov	r4, r0
   d810c:	f7ff ffee 	bl	d80ec <strchr>
   d8110:	b918      	cbnz	r0, d811a <strchrnul+0x12>
   d8112:	4620      	mov	r0, r4
   d8114:	f000 f80c 	bl	d8130 <strlen>
   d8118:	4420      	add	r0, r4
   d811a:	bd10      	pop	{r4, pc}

000d811c <strcmp>:
   d811c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8120:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8124:	2a01      	cmp	r2, #1
   d8126:	bf28      	it	cs
   d8128:	429a      	cmpcs	r2, r3
   d812a:	d0f7      	beq.n	d811c <strcmp>
   d812c:	1ad0      	subs	r0, r2, r3
   d812e:	4770      	bx	lr

000d8130 <strlen>:
   d8130:	4603      	mov	r3, r0
   d8132:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8136:	2a00      	cmp	r2, #0
   d8138:	d1fb      	bne.n	d8132 <strlen+0x2>
   d813a:	1a18      	subs	r0, r3, r0
   d813c:	3801      	subs	r0, #1
   d813e:	4770      	bx	lr

000d8140 <strncmp>:
   d8140:	b530      	push	{r4, r5, lr}
   d8142:	b182      	cbz	r2, d8166 <strncmp+0x26>
   d8144:	1e45      	subs	r5, r0, #1
   d8146:	3901      	subs	r1, #1
   d8148:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d814c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8150:	42a3      	cmp	r3, r4
   d8152:	d106      	bne.n	d8162 <strncmp+0x22>
   d8154:	43ec      	mvns	r4, r5
   d8156:	4414      	add	r4, r2
   d8158:	42e0      	cmn	r0, r4
   d815a:	d001      	beq.n	d8160 <strncmp+0x20>
   d815c:	2b00      	cmp	r3, #0
   d815e:	d1f3      	bne.n	d8148 <strncmp+0x8>
   d8160:	461c      	mov	r4, r3
   d8162:	1b18      	subs	r0, r3, r4
   d8164:	bd30      	pop	{r4, r5, pc}
   d8166:	4610      	mov	r0, r2
   d8168:	bd30      	pop	{r4, r5, pc}

000d816a <strnlen>:
   d816a:	b510      	push	{r4, lr}
   d816c:	4603      	mov	r3, r0
   d816e:	4401      	add	r1, r0
   d8170:	428b      	cmp	r3, r1
   d8172:	d004      	beq.n	d817e <strnlen+0x14>
   d8174:	781a      	ldrb	r2, [r3, #0]
   d8176:	1c5c      	adds	r4, r3, #1
   d8178:	b10a      	cbz	r2, d817e <strnlen+0x14>
   d817a:	4623      	mov	r3, r4
   d817c:	e7f8      	b.n	d8170 <strnlen+0x6>
   d817e:	1a18      	subs	r0, r3, r0
   d8180:	bd10      	pop	{r4, pc}

000d8182 <strrchr>:
   d8182:	b538      	push	{r3, r4, r5, lr}
   d8184:	4603      	mov	r3, r0
   d8186:	460d      	mov	r5, r1
   d8188:	b141      	cbz	r1, d819c <strrchr+0x1a>
   d818a:	2400      	movs	r4, #0
   d818c:	4629      	mov	r1, r5
   d818e:	4618      	mov	r0, r3
   d8190:	f7ff ffac 	bl	d80ec <strchr>
   d8194:	b130      	cbz	r0, d81a4 <strrchr+0x22>
   d8196:	1c43      	adds	r3, r0, #1
   d8198:	4604      	mov	r4, r0
   d819a:	e7f7      	b.n	d818c <strrchr+0xa>
   d819c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d81a0:	f7ff bfa4 	b.w	d80ec <strchr>
   d81a4:	4620      	mov	r0, r4
   d81a6:	bd38      	pop	{r3, r4, r5, pc}

000d81a8 <_strtol_r>:
   d81a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d81ac:	4680      	mov	r8, r0
   d81ae:	4840      	ldr	r0, [pc, #256]	; (d82b0 <_strtol_r+0x108>)
   d81b0:	f8d0 9000 	ldr.w	r9, [r0]
   d81b4:	460f      	mov	r7, r1
   d81b6:	463d      	mov	r5, r7
   d81b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d81bc:	eb09 0004 	add.w	r0, r9, r4
   d81c0:	7840      	ldrb	r0, [r0, #1]
   d81c2:	f000 0008 	and.w	r0, r0, #8
   d81c6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d81ca:	b108      	cbz	r0, d81d0 <_strtol_r+0x28>
   d81cc:	462f      	mov	r7, r5
   d81ce:	e7f2      	b.n	d81b6 <_strtol_r+0xe>
   d81d0:	2c2d      	cmp	r4, #45	; 0x2d
   d81d2:	d103      	bne.n	d81dc <_strtol_r+0x34>
   d81d4:	1cbd      	adds	r5, r7, #2
   d81d6:	787c      	ldrb	r4, [r7, #1]
   d81d8:	2601      	movs	r6, #1
   d81da:	e003      	b.n	d81e4 <_strtol_r+0x3c>
   d81dc:	2c2b      	cmp	r4, #43	; 0x2b
   d81de:	bf04      	itt	eq
   d81e0:	787c      	ldrbeq	r4, [r7, #1]
   d81e2:	1cbd      	addeq	r5, r7, #2
   d81e4:	b113      	cbz	r3, d81ec <_strtol_r+0x44>
   d81e6:	2b10      	cmp	r3, #16
   d81e8:	d10a      	bne.n	d8200 <_strtol_r+0x58>
   d81ea:	e05b      	b.n	d82a4 <_strtol_r+0xfc>
   d81ec:	2c30      	cmp	r4, #48	; 0x30
   d81ee:	d157      	bne.n	d82a0 <_strtol_r+0xf8>
   d81f0:	7828      	ldrb	r0, [r5, #0]
   d81f2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d81f6:	2858      	cmp	r0, #88	; 0x58
   d81f8:	d14d      	bne.n	d8296 <_strtol_r+0xee>
   d81fa:	786c      	ldrb	r4, [r5, #1]
   d81fc:	2310      	movs	r3, #16
   d81fe:	3502      	adds	r5, #2
   d8200:	2e00      	cmp	r6, #0
   d8202:	bf14      	ite	ne
   d8204:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8208:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d820c:	2700      	movs	r7, #0
   d820e:	fbbc faf3 	udiv	sl, ip, r3
   d8212:	4638      	mov	r0, r7
   d8214:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8218:	eb09 0e04 	add.w	lr, r9, r4
   d821c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8220:	f01e 0f04 	tst.w	lr, #4
   d8224:	d001      	beq.n	d822a <_strtol_r+0x82>
   d8226:	3c30      	subs	r4, #48	; 0x30
   d8228:	e00b      	b.n	d8242 <_strtol_r+0x9a>
   d822a:	f01e 0e03 	ands.w	lr, lr, #3
   d822e:	d01b      	beq.n	d8268 <_strtol_r+0xc0>
   d8230:	f1be 0f01 	cmp.w	lr, #1
   d8234:	bf0c      	ite	eq
   d8236:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d823a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d823e:	ebce 0404 	rsb	r4, lr, r4
   d8242:	42a3      	cmp	r3, r4
   d8244:	dd10      	ble.n	d8268 <_strtol_r+0xc0>
   d8246:	f1b7 3fff 	cmp.w	r7, #4294967295
   d824a:	d00a      	beq.n	d8262 <_strtol_r+0xba>
   d824c:	4550      	cmp	r0, sl
   d824e:	d806      	bhi.n	d825e <_strtol_r+0xb6>
   d8250:	d101      	bne.n	d8256 <_strtol_r+0xae>
   d8252:	4564      	cmp	r4, ip
   d8254:	dc03      	bgt.n	d825e <_strtol_r+0xb6>
   d8256:	fb03 4000 	mla	r0, r3, r0, r4
   d825a:	2701      	movs	r7, #1
   d825c:	e001      	b.n	d8262 <_strtol_r+0xba>
   d825e:	f04f 37ff 	mov.w	r7, #4294967295
   d8262:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8266:	e7d7      	b.n	d8218 <_strtol_r+0x70>
   d8268:	1c7b      	adds	r3, r7, #1
   d826a:	d10c      	bne.n	d8286 <_strtol_r+0xde>
   d826c:	2e00      	cmp	r6, #0
   d826e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8272:	bf14      	ite	ne
   d8274:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8278:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d827c:	f8c8 3000 	str.w	r3, [r8]
   d8280:	b92a      	cbnz	r2, d828e <_strtol_r+0xe6>
   d8282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8286:	b106      	cbz	r6, d828a <_strtol_r+0xe2>
   d8288:	4240      	negs	r0, r0
   d828a:	b172      	cbz	r2, d82aa <_strtol_r+0x102>
   d828c:	b107      	cbz	r7, d8290 <_strtol_r+0xe8>
   d828e:	1e69      	subs	r1, r5, #1
   d8290:	6011      	str	r1, [r2, #0]
   d8292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8296:	2430      	movs	r4, #48	; 0x30
   d8298:	2b00      	cmp	r3, #0
   d829a:	d1b1      	bne.n	d8200 <_strtol_r+0x58>
   d829c:	2308      	movs	r3, #8
   d829e:	e7af      	b.n	d8200 <_strtol_r+0x58>
   d82a0:	230a      	movs	r3, #10
   d82a2:	e7ad      	b.n	d8200 <_strtol_r+0x58>
   d82a4:	2c30      	cmp	r4, #48	; 0x30
   d82a6:	d0a3      	beq.n	d81f0 <_strtol_r+0x48>
   d82a8:	e7aa      	b.n	d8200 <_strtol_r+0x58>
   d82aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d82ae:	bf00      	nop
   d82b0:	2003e2cc 	.word	0x2003e2cc

000d82b4 <strtol>:
   d82b4:	4613      	mov	r3, r2
   d82b6:	460a      	mov	r2, r1
   d82b8:	4601      	mov	r1, r0
   d82ba:	4802      	ldr	r0, [pc, #8]	; (d82c4 <strtol+0x10>)
   d82bc:	6800      	ldr	r0, [r0, #0]
   d82be:	f7ff bf73 	b.w	d81a8 <_strtol_r>
   d82c2:	bf00      	nop
   d82c4:	2003e330 	.word	0x2003e330

000d82c8 <dynalib_user>:
   d82c8:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d82d8:	00000000                                ....

000d82dc <_ZTVN5spark10LogHandlerE>:
	...
   d82ec:	000d40a5 000d40c9                       .@...@..

000d82f4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d82fc:	000d40d5 000d4109 000d6b65 000d40cb     .@...A..ek...@..
   d830c:	706d6574 74617265 00657275 6867696c     temperature.ligh
   d831c:	75680074 6964696d 64007974 61747369     t.humidity.dista
   d832c:	0065636e 72617453 64612074 74726576     nce.Start advert
   d833c:	6e697369 65540067 7265706d 72757461     ising.Temperatur
   d834c:	00203a65 6867694c 00203a74 696d7548     e: .Light: .Humi
   d835c:	79746964 4400203a 61747369 3a65636e     dity: .Distance:
   d836c:	6f6e0020 6f632074 63656e6e 20646574      .not connected 
   d837c:	2e746579 00202e2e 706d6574 62353400     yet... .temp.45b
   d838c:	35613465 38342d36 342d3566 2d633338     e4a56-48f5-483c-
   d839c:	31626238 6633642d 33346565 33326333     8bb1-d3fee433c23
   d83ac:	39390063 32643061 312d3966 2d616663     c.99a0d2f9-1cfa-
   d83bc:	33623234 6235622d 62312d61 33346434     42b3-b5ba-1b4d43
   d83cc:	39333134 65006632 34323561 2d346138     41392f.ea5248a4-
   d83dc:	63633334 3931342d 34612d38 372d6161     43cc-4198-a4aa-7
   d83ec:	30303239 30353761 00353338 66376362     9200a750835.bc7f
   d83fc:	39643831 3463322d 30342d33 622d6538     18d9-2c43-408e-b
   d840c:	2d353265 34663236 35343630 63373839     e25-62f40645987c
   d841c:	34353700 35666265 65632d65 342d3133     .754ebf5e-ce31-4
   d842c:	2d303033 35646639 6638612d 65653462     300-9fd5-a8fb4ee
   d843c:	31386134 00000031                       4a811...

000d8444 <_ZTVN5spark13EthernetClassE>:
	...
   d844c:	000d4b3f 000d4b35 000d4b2b 000d4b21     ?K..5K..+K..!K..
   d845c:	000d4b15 000d4b09 000d4afd 000d4af5     .K...K...J...J..
   d846c:	000d4aeb 000d4ae1 000d755d              .J...J..]u..

000d8478 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8480:	000d4ce7 000d4ced 000d5a19 000d4d17     .L...L...Z...M..
   d8490:	000d4ce9                                .L..

000d8494 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d849c:	000d4ce1 000d4cfb 000d5b25 000d4d1b     .L...L..%[...M..
   d84ac:	000d4ce3                                .L..

000d84b0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d84b8:	000d4cdb 000d4d09 000d54d9 000d4d1f     .L...M...T...M..
   d84c8:	000d4cdd                                .L..

000d84cc <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d84cc:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d84dc:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d84ec:	73696420 65766f63 676e6972 72657320      discovering ser
   d84fc:	65636976 53002e73 74726174 73696420     vices..Start dis
   d850c:	65766f63 676e6972 61686320 74636172     covering charact
   d851c:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d852c:	63697665 73692065 73696d20 676e6973     evice is missing
   d853c:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d854c:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d855c:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d856c:	79622064 6e654320 6c617274 76656420     d by Central dev
   d857c:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d858c:	79622064 6d657220 2065746f 69766564     d by remote devi
   d859c:	002e6563 6e6e6143 6120746f 6e206464     ce..Cannot add n
   d85ac:	70207765 20726565 69766564 002e6563     ew peer device..
   d85bc:	2077654e 69726570 72656870 69206c61     New peripheral i
   d85cc:	6f632073 63656e6e 2e646574 69614600     s connected..Fai
   d85dc:	2064656c 61206f74 6e657070 69642064     led to append di
   d85ec:	766f6373 64657265 61686320 74636172     scovered charact
   d85fc:	73697265 2e636974 69614600 2064656c     eristic..Failed 
   d860c:	61206f74 6e657070 69642064 766f6373     to append discov
   d861c:	64657265 72657320 65636976 6146002e     ered service..Fa
   d862c:	64656c69 206f7420 65707061 6c20646e     iled to append l
   d863c:	6c61636f 61686320 74636172 73697265     ocal characteris
   d864c:	2e636974 70754400 6163696c 20646574     tic..Duplicated 
   d865c:	72616863 65746361 74736972 63206369     characteristic c
   d866c:	6f6e6e61 65622074 64646120 002e6465     annot be added..

000d867c <_ZN8particle7BleUuid9BASE_UUIDE>:
   d867c:	5f9b34fb 80000080 00001000 00000000     .4._............

000d868c <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8694:	000d5f41 000d5f67 000d5f1b 000d766b     A_..g_..._..kv..

000d86a4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d86ac:	000d63bd 000d63d1 000d6d19 000d5f23     .c...c...m..#_..
   d86bc:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d86cc:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d86dc:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d86ec:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d86fc:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d870c:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d871c:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d872c:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d873c:	00642500 2800202c 00203a29 63005b20     .%d., .(): . [.c
   d874c:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
   d875c:	203d2073 000a0d00 66006e6c 6f63006e     s = ....ln.fn.co
   d876c:	64006564 69617465 6f6e006c 7400656e     de.detail.none.t
   d877c:	65636172 666e6900 6177006f 65006e72     race.info.warn.e
   d878c:	726f7272 6e617000 61006369 00006c6c     rror.panic.all..

000d879c <_ZTVN5spark16StreamLogHandlerE>:
	...
   d87a4:	000d6391 000d63a9 000d6b65 000d40cb     .c...c..ek...@..

000d87b4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d87bc:	000d5f3f 000d5f75 000d6a8d 000d5f25     ?_..u_...j..%_..

000d87cc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d87d4:	000d5f3d 000d5f83 000d62d5 000d5f91     =_..._...b..._..
   d87e4:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d87f4:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d8804:	63736100 656d6974 00000000              .asctime....

000d8810 <_ZTV9IPAddress>:
	...
   d8818:	000d7001 000d6ff1 000d6ff3              .p...o...o..

000d8824 <_ZTV9USBSerial>:
	...
   d882c:	000d70d9 000d7129 000d7137 000d5dfd     .p..)q..7q...]..
   d883c:	000d7115 000d70db 000d70f1 000d7123     .q...p...p..#q..
   d884c:	000d7107 000d70d5                       .q...p..

000d8854 <_ZTV11USARTSerial>:
	...
   d885c:	000d71ed 000d723d 000d724b 000d5dfd     .q..=r..Kr...]..
   d886c:	000d7201 000d7223 000d720f 000d7237     .r..#r...r..7r..
   d887c:	000d71ef 000d71f3                       .q...q..

000d8884 <_ZTVN5spark9MeshClassE>:
	...
   d888c:	000d735b 000d7351 000d7347 000d733d     [s..Qs..Gs..=s..
   d889c:	000d7331 000d7325 000d7319 000d7311     1s..%s...s...s..
   d88ac:	000d7307 000d72fd 000d755d              .s...r..]u..

000d88b8 <_ZTVN5spark9WiFiClassE>:
	...
   d88c0:	000d74d7 000d74cd 000d74c3 000d7479     .t...t...t..yt..
   d88d0:	000d74b7 000d74ab 000d749f 000d7497     .t...t...t...t..
   d88e0:	000d748d 000d7483 000d755d              .t...t..]u..

000d88ec <_ZTVN5spark12NetworkClassE>:
	...
   d88f4:	000d74f5 000d74ff 000d7509 000d7513     .t...t...u...u..
   d8904:	000d751d 000d7529 000d7535 000d7541     .u..)u..5u..Au..
   d8914:	000d7549 000d7553 000d755d 00302e30     Iu..Su..]u..0.0.
   d8924:	736c6166 72740065 25006575 2e250075     false.true.%u.%.
   d8934:	00666c2a 6e006725 006c6c75 34302575     *lf.%g.null.u%04
   d8944:	00000078                                         x.

000d8946 <_ZSt7nothrow>:
	...

000d8947 <_ctype_>:
   d8947:	20202000 20202020 28282020 20282828     .         ((((( 
   d8957:	20202020 20202020 20202020 20202020                     
   d8967:	10108820 10101010 10101010 10101010      ...............
   d8977:	04040410 04040404 10040404 10101010     ................
   d8987:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8997:	01010101 01010101 01010101 10101010     ................
   d89a7:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d89b7:	02020202 02020202 02020202 10101010     ................
   d89c7:	00000020 00000000 00000000 00000000      ...............
	...

000d8a48 <__sf_fake_stdin>:
	...

000d8a68 <__sf_fake_stdout>:
	...

000d8a88 <__sf_fake_stderr>:
	...
   d8aa8:	00000043                                         C.

000d8aaa <link_const_variable_data_end>:
	...

000d8aac <link_constructors_location>:
   d8aac:	000d44ed 	.word	0x000d44ed
   d8ab0:	000d4b49 	.word	0x000d4b49
   d8ab4:	000d4b7d 	.word	0x000d4b7d
   d8ab8:	000d5dd5 	.word	0x000d5dd5
   d8abc:	000d6b55 	.word	0x000d6b55
   d8ac0:	000d6e91 	.word	0x000d6e91
   d8ac4:	000d6ec5 	.word	0x000d6ec5
   d8ac8:	000d7429 	.word	0x000d7429
   d8acc:	000d74e1 	.word	0x000d74e1
   d8ad0:	000d7629 	.word	0x000d7629
   d8ad4:	000d7a05 	.word	0x000d7a05
   d8ad8:	000d7a89 	.word	0x000d7a89
   d8adc:	000d7b4d 	.word	0x000d7b4d
   d8ae0:	000d7c11 	.word	0x000d7c11

000d8ae4 <link_constructors_end>:
	...
