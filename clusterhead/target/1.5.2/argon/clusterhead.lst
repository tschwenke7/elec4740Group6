
c:/Users/tschw/repos/elec4740Group6/clusterhead/target/1.5.2/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9c30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003d858  000d9c34  0001d858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f20  2003d8d0  2003d8d0  0002d8d0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9cac  000d9cac  00029cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9cd4  000d9cd4  00029cd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c6e0d  00000000  00000000  00029cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e5fc  00000000  00000000  000f0ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001da1d  00000000  00000000  000ff0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025d8  00000000  00000000  0011cafe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004700  00000000  00000000  0011f0d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030655  00000000  00000000  001237d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00020f53  00000000  00000000  00153e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00103b6c  00000000  00000000  00174d7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d018  00000000  00000000  002788ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fe16 	bl	d8c5e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fe36 	bl	d8caa <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d858 	.word	0x2003d858
   d4048:	000d9c34 	.word	0x000d9c34
   d404c:	2003d8d0 	.word	0x2003d8d0
   d4050:	2003d8d0 	.word	0x2003d8d0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 ff65 	bl	d7f28 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9c30 	.word	0x000d9c30
   d4080:	000d9bf8 	.word	0x000d9bf8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8f6 	b.w	d4274 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fabd 	bl	d4608 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bf0b 	b.w	d7eac <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b8b1 	b.w	d51fc <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b8b7 	b.w	d520c <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b8b5 	b.w	d520c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 ffda 	bl	d5064 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4d11 	.word	0x000d4d11

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40d6:	6800      	ldr	r0, [r0, #0]
   d40d8:	b108      	cbz	r0, d40de <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40da:	f001 f897 	bl	d520c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40de:	4620      	mov	r0, r4
   d40e0:	bd10      	pop	{r4, pc}
	...

000d40e4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e4:	4b0a      	ldr	r3, [pc, #40]	; (d4110 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40e6:	b510      	push	{r4, lr}
   d40e8:	4604      	mov	r4, r0
   d40ea:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40ec:	f002 ffbc 	bl	d7068 <_ZN5spark10LogManager8instanceEv>
   d40f0:	4621      	mov	r1, r4
   d40f2:	f003 f9a9 	bl	d7448 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40f6:	f004 f81b 	bl	d8130 <_Z16_fetch_usbserialv>
   d40fa:	f004 f80d 	bl	d8118 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40fe:	4620      	mov	r0, r4
   d4100:	4b04      	ldr	r3, [pc, #16]	; (d4114 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4102:	f840 3b04 	str.w	r3, [r0], #4
   d4106:	f003 f8a5 	bl	d7254 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d410a:	4620      	mov	r0, r4
   d410c:	bd10      	pop	{r4, pc}
   d410e:	bf00      	nop
   d4110:	000d8f2c 	.word	0x000d8f2c
   d4114:	000d8f14 	.word	0x000d8f14

000d4118 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4118:	b510      	push	{r4, lr}
   d411a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d411c:	f7ff ffe2 	bl	d40e4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4120:	4620      	mov	r0, r4
   d4122:	2124      	movs	r1, #36	; 0x24
   d4124:	f004 fc24 	bl	d8970 <_ZdlPvj>
   d4128:	4620      	mov	r0, r4
   d412a:	bd10      	pop	{r4, pc}

000d412c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d412c:	b40e      	push	{r1, r2, r3}
   d412e:	b500      	push	{lr}
   d4130:	b08c      	sub	sp, #48	; 0x30
   d4132:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4134:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4136:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d413a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d413c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4140:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4142:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4144:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4146:	aa04      	add	r2, sp, #16
   d4148:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d414a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d414c:	f000 ff9a 	bl	d5084 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4150:	b00c      	add	sp, #48	; 0x30
   d4152:	f85d eb04 	ldr.w	lr, [sp], #4
   d4156:	b003      	add	sp, #12
   d4158:	4770      	bx	lr
	...

000d415c <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
    }
}

/* These functions are where we do something with the data (in bytes) we've received via bluetooth */

void onTemperatureReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d415c:	b508      	push	{r3, lr}
    memcpy(&sentTime, &data[0] + sizeof(receivedTemp), sizeof(sentTime));
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
    
    //Stores temperature on clusterhead.
    getTempsn1 = receivedTemp;
   d415e:	4b04      	ldr	r3, [pc, #16]	; (d4170 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x14>)

    
    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(receivedTemp), sizeof(sentTime));
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
   d4160:	f990 2000 	ldrsb.w	r2, [r0]
    
    //Stores temperature on clusterhead.
    getTempsn1 = receivedTemp;

    Log.info("Sensor 1 - Temperature: %u degrees Celsius", receivedTemp);
   d4164:	4903      	ldr	r1, [pc, #12]	; (d4174 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   d4166:	4804      	ldr	r0, [pc, #16]	; (d4178 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
    memcpy(&sentTime, &data[0] + sizeof(receivedTemp), sizeof(sentTime));
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
    
    //Stores temperature on clusterhead.
    getTempsn1 = receivedTemp;
   d4168:	801a      	strh	r2, [r3, #0]

    Log.info("Sensor 1 - Temperature: %u degrees Celsius", receivedTemp);
   d416a:	f7ff ffdf 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d416e:	bd08      	pop	{r3, pc}
   d4170:	2003d858 	.word	0x2003d858
   d4174:	000d8f3c 	.word	0x000d8f3c
   d4178:	2003e40c 	.word	0x2003e40c

000d417c <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    // Log.info("Temp/humidity transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onHumidityReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d417c:	b508      	push	{r3, lr}
    uint8_t receivedHumidity;
    memcpy(&receivedHumidity, &data[0], sizeof(receivedHumidity));
    Log.info("Sensor 1 - Humidity: %u%%", receivedHumidity);
   d417e:	4903      	ldr	r1, [pc, #12]	; (d418c <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d4180:	7802      	ldrb	r2, [r0, #0]
   d4182:	4803      	ldr	r0, [pc, #12]	; (d4190 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d4184:	f7ff ffd2 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d4188:	bd08      	pop	{r3, pc}
   d418a:	bf00      	nop
   d418c:	000d8f67 	.word	0x000d8f67
   d4190:	2003e40c 	.word	0x2003e40c

000d4194 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
}

void onCurrentReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4194:	b507      	push	{r0, r1, r2, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4196:	8803      	ldrh	r3, [r0, #0]
   d4198:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 1 - Current: %u Amps", twoByteValue);
   d419c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d41a0:	4903      	ldr	r1, [pc, #12]	; (d41b0 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41a2:	4804      	ldr	r0, [pc, #16]	; (d41b4 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41a4:	f7ff ffc2 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
}
   d41a8:	b003      	add	sp, #12
   d41aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ae:	bf00      	nop
   d41b0:	000d8f81 	.word	0x000d8f81
   d41b4:	2003e40c 	.word	0x2003e40c

000d41b8 <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv>:

void onCurrentReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41b8:	b507      	push	{r0, r1, r2, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d41ba:	8803      	ldrh	r3, [r0, #0]
   d41bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 2 - Current: %u Amps", twoByteValue);
   d41c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d41c4:	4903      	ldr	r1, [pc, #12]	; (d41d4 <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41c6:	4804      	ldr	r0, [pc, #16]	; (d41d8 <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41c8:	f7ff ffb0 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
}
   d41cc:	b003      	add	sp, #12
   d41ce:	f85d fb04 	ldr.w	pc, [sp], #4
   d41d2:	bf00      	nop
   d41d4:	000d8f9d 	.word	0x000d8f9d
   d41d8:	2003e40c 	.word	0x2003e40c

000d41dc <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
        startAlarm(0);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onTemperatureReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41dc:	b508      	push	{r3, lr}

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(temperature), sizeof(sentTime));

    memcpy(&temperature, &data[0], sizeof(temperature));
    Log.info("Sensor 2 - Temperature: %d degrees Celsius", temperature);
   d41de:	4903      	ldr	r1, [pc, #12]	; (d41ec <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d41e0:	f990 2000 	ldrsb.w	r2, [r0]
   d41e4:	4802      	ldr	r0, [pc, #8]	; (d41f0 <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d41e6:	f7ff ffa1 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d41ea:	bd08      	pop	{r3, pc}
   d41ec:	000d8fb9 	.word	0x000d8fb9
   d41f0:	2003e40c 	.word	0x2003e40c

000d41f4 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onLightReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41f4:	b513      	push	{r0, r1, r4, lr}
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d41f6:	8803      	ldrh	r3, [r0, #0]
   d41f8:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Light: %u Lux", twoByteValue);
   d41fc:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d4200:	4904      	ldr	r1, [pc, #16]	; (d4214 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4202:	4805      	ldr	r0, [pc, #20]	; (d4218 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d4204:	4622      	mov	r2, r4
   d4206:	f7ff ff91 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>

    currentLight = twoByteValue;
   d420a:	4b04      	ldr	r3, [pc, #16]	; (d421c <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d420c:	801c      	strh	r4, [r3, #0]
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d420e:	b002      	add	sp, #8
   d4210:	bd10      	pop	{r4, pc}
   d4212:	bf00      	nop
   d4214:	000d8fe4 	.word	0x000d8fe4
   d4218:	2003e40c 	.word	0x2003e40c
   d421c:	2003e374 	.word	0x2003e374

000d4220 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4220:	b513      	push	{r0, r1, r4, lr}
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d4222:	4602      	mov	r2, r0
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4224:	4604      	mov	r4, r0
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d4226:	f852 0f01 	ldr.w	r0, [r2, #1]!

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
   d422a:	7824      	ldrb	r4, [r4, #0]
void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d422c:	6851      	ldr	r1, [r2, #4]
   d422e:	466b      	mov	r3, sp
   d4230:	c303      	stmia	r3!, {r0, r1}

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
    Log.info("Sensor 2 - Human detector: %u", humanSeen);
   d4232:	4622      	mov	r2, r4
   d4234:	490a      	ldr	r1, [pc, #40]	; (d4260 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d4236:	480b      	ldr	r0, [pc, #44]	; (d4264 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4238:	f7ff ff78 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
    if(humanSeen == 0x00){
   d423c:	b90c      	cbnz	r4, d4242 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
        Log.info("Sensor 2 - Human lost...");
   d423e:	490a      	ldr	r1, [pc, #40]	; (d4268 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4240:	e002      	b.n	d4248 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>
    }
    else if (humanSeen == 0x01){
   d4242:	2c01      	cmp	r4, #1
   d4244:	d104      	bne.n	d4250 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
        Log.info("Sensor 2 - Human detected!");
   d4246:	4909      	ldr	r1, [pc, #36]	; (d426c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d4248:	4806      	ldr	r0, [pc, #24]	; (d4264 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d424a:	f7ff ff6f 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d424e:	e004      	b.n	d425a <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
   d4250:	4622      	mov	r2, r4
   d4252:	4907      	ldr	r1, [pc, #28]	; (d4270 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d4254:	4803      	ldr	r0, [pc, #12]	; (d4264 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4256:	f7ff ff69 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d425a:	b002      	add	sp, #8
   d425c:	bd10      	pop	{r4, pc}
   d425e:	bf00      	nop
   d4260:	000d8ffd 	.word	0x000d8ffd
   d4264:	2003e40c 	.word	0x2003e40c
   d4268:	000d901b 	.word	0x000d901b
   d426c:	000d9034 	.word	0x000d9034
   d4270:	000d904f 	.word	0x000d904f

000d4274 <setup>:

// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];

void setup() {
   d4274:	b507      	push	{r0, r1, r2, lr}
    //take control of the onboard RGB LED
    RGB.control(true);
   d4276:	2001      	movs	r0, #1
   d4278:	f003 fdc8 	bl	d7e0c <_ZN8RGBClass7controlEb>

    const uint8_t val = 0x01;
   d427c:	a802      	add	r0, sp, #8
   d427e:	2201      	movs	r2, #1
   d4280:	f800 2d01 	strb.w	r2, [r0, #-1]!
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d4284:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d4288:	f000 fe7c 	bl	d4f84 <dct_write_app_data>
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning

    BLE.on();
   d428c:	f001 fe4a 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4290:	f001 fe8e 	bl	d5fb0 <_ZNK8particle14BleLocalDevice2onEv>
    
    
    //map functions to be called whenever new data is received for a characteristic
    temperatureSensorCharacteristic1.onDataReceived(onTemperatureReceived1, NULL);
   d4294:	2200      	movs	r2, #0
   d4296:	4917      	ldr	r1, [pc, #92]	; (d42f4 <setup+0x80>)
   d4298:	4817      	ldr	r0, [pc, #92]	; (d42f8 <setup+0x84>)
   d429a:	f001 fd75 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humiditySensorCharacteristic.onDataReceived(onHumidityReceived, NULL);
   d429e:	2200      	movs	r2, #0
   d42a0:	4916      	ldr	r1, [pc, #88]	; (d42fc <setup+0x88>)
   d42a2:	4817      	ldr	r0, [pc, #92]	; (d4300 <setup+0x8c>)
   d42a4:	f001 fd70 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    distanceSensorCharacteristic.onDataReceived(onDistanceReceived, NULL);
   d42a8:	2200      	movs	r2, #0
   d42aa:	4916      	ldr	r1, [pc, #88]	; (d4304 <setup+0x90>)
   d42ac:	4816      	ldr	r0, [pc, #88]	; (d4308 <setup+0x94>)
   d42ae:	f001 fd6b 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    currentSensorCharacteristic1.onDataReceived(onCurrentReceived1, NULL);
   d42b2:	2200      	movs	r2, #0
   d42b4:	4915      	ldr	r1, [pc, #84]	; (d430c <setup+0x98>)
   d42b6:	4816      	ldr	r0, [pc, #88]	; (d4310 <setup+0x9c>)
   d42b8:	f001 fd66 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

    temperatureSensorCharacteristic2.onDataReceived(onTemperatureReceived2, NULL);
   d42bc:	2200      	movs	r2, #0
   d42be:	4915      	ldr	r1, [pc, #84]	; (d4314 <setup+0xa0>)
   d42c0:	4815      	ldr	r0, [pc, #84]	; (d4318 <setup+0xa4>)
   d42c2:	f001 fd61 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    lightSensorCharacteristic2.onDataReceived(onLightReceived2, NULL);
   d42c6:	2200      	movs	r2, #0
   d42c8:	4914      	ldr	r1, [pc, #80]	; (d431c <setup+0xa8>)
   d42ca:	4815      	ldr	r0, [pc, #84]	; (d4320 <setup+0xac>)
   d42cc:	f001 fd5c 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
   d42d0:	2200      	movs	r2, #0
   d42d2:	4914      	ldr	r1, [pc, #80]	; (d4324 <setup+0xb0>)
   d42d4:	4814      	ldr	r0, [pc, #80]	; (d4328 <setup+0xb4>)
   d42d6:	f001 fd57 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
   d42da:	2200      	movs	r2, #0
   d42dc:	4913      	ldr	r1, [pc, #76]	; (d432c <setup+0xb8>)
   d42de:	4814      	ldr	r0, [pc, #80]	; (d4330 <setup+0xbc>)
   d42e0:	f001 fd52 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    currentSensorCharacteristic2.onDataReceived(onCurrentReceived2, NULL);
   d42e4:	2200      	movs	r2, #0
   d42e6:	4913      	ldr	r1, [pc, #76]	; (d4334 <setup+0xc0>)
   d42e8:	4813      	ldr	r0, [pc, #76]	; (d4338 <setup+0xc4>)
   d42ea:	f001 fd4d 	bl	d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
}
   d42ee:	b003      	add	sp, #12
   d42f0:	f85d fb04 	ldr.w	pc, [sp], #4
   d42f4:	000d415d 	.word	0x000d415d
   d42f8:	2003d8e4 	.word	0x2003d8e4
   d42fc:	000d417d 	.word	0x000d417d
   d4300:	2003e330 	.word	0x2003e330
   d4304:	000d449d 	.word	0x000d449d
   d4308:	2003d908 	.word	0x2003d908
   d430c:	000d4195 	.word	0x000d4195
   d4310:	2003e340 	.word	0x2003e340
   d4314:	000d41dd 	.word	0x000d41dd
   d4318:	2003d8ec 	.word	0x2003d8ec
   d431c:	000d41f5 	.word	0x000d41f5
   d4320:	2003d8d4 	.word	0x2003d8d4
   d4324:	000d44e1 	.word	0x000d44e1
   d4328:	2003e3b0 	.word	0x2003e3b0
   d432c:	000d4221 	.word	0x000d4221
   d4330:	2003d93c 	.word	0x2003d93c
   d4334:	000d41b9 	.word	0x000d41b9
   d4338:	2003e348 	.word	0x2003e348

000d433c <_Z28updateSoundThresholdCountersh>:

/* Update the sound threshold counters after a given amount of seconds has passed
 * @param secondsPassed: number of seconds since this was last called. */
void updateSoundThresholdCounters(uint8_t secondsPassed){
    //only count up if light level is below threshold
    if(currentLight < LIGHT_THRESHOLD){
   d433c:	4b0b      	ldr	r3, [pc, #44]	; (d436c <_Z28updateSoundThresholdCountersh+0x30>)
   d433e:	881b      	ldrh	r3, [r3, #0]
   d4340:	2b63      	cmp	r3, #99	; 0x63
   d4342:	4b0b      	ldr	r3, [pc, #44]	; (d4370 <_Z28updateSoundThresholdCountersh+0x34>)
   d4344:	d80e      	bhi.n	d4364 <_Z28updateSoundThresholdCountersh+0x28>
        if (currentSound > SOUND_VOLUME_THRESHOLDS[1]){
   d4346:	4a0b      	ldr	r2, [pc, #44]	; (d4374 <_Z28updateSoundThresholdCountersh+0x38>)
   d4348:	6812      	ldr	r2, [r2, #0]
   d434a:	2a46      	cmp	r2, #70	; 0x46
   d434c:	dd02      	ble.n	d4354 <_Z28updateSoundThresholdCountersh+0x18>
            durationAtSoundThresholds[1] += secondsPassed;//increment high volume counter
   d434e:	685a      	ldr	r2, [r3, #4]
   d4350:	4402      	add	r2, r0
   d4352:	e002      	b.n	d435a <_Z28updateSoundThresholdCountersh+0x1e>
            durationAtSoundThresholds[0] += secondsPassed;//increment med volume counter
        }
        else if(currentSound > SOUND_VOLUME_THRESHOLDS[0]){
   d4354:	2a37      	cmp	r2, #55	; 0x37
   d4356:	dd05      	ble.n	d4364 <_Z28updateSoundThresholdCountersh+0x28>
            durationAtSoundThresholds[1] = 0;//reset high volume counter
   d4358:	2200      	movs	r2, #0
   d435a:	605a      	str	r2, [r3, #4]
            durationAtSoundThresholds[0] += secondsPassed;//increment med volume counter
   d435c:	681a      	ldr	r2, [r3, #0]
   d435e:	4410      	add	r0, r2
   d4360:	6018      	str	r0, [r3, #0]
   d4362:	4770      	bx	lr
        }
        else{
            //reset both counters
            durationAtSoundThresholds[1] = 0;
   d4364:	2200      	movs	r2, #0
   d4366:	605a      	str	r2, [r3, #4]
            durationAtSoundThresholds[0] = 0;
   d4368:	601a      	str	r2, [r3, #0]
   d436a:	4770      	bx	lr
   d436c:	2003e374 	.word	0x2003e374
   d4370:	2003e3a8 	.word	0x2003e3a8
   d4374:	2003d944 	.word	0x2003d944

000d4378 <_Z15updateStatusLedv>:
/* Turns the status light on and off at the appropriate intervals, 
based on the values of "quarterSeconds" and "alarmActive[]".
Priority: First active alarm in this list will control the status LED: alarm 0, 3, 2, 1 */
void updateStatusLed(){
    //alarm 0 - Blue LED flashing, 0.5 Hz frequency
    if(alarmActive[0]){
   d4378:	4b16      	ldr	r3, [pc, #88]	; (d43d4 <_Z15updateStatusLedv+0x5c>)
   d437a:	781a      	ldrb	r2, [r3, #0]
   d437c:	b172      	cbz	r2, d439c <_Z15updateStatusLedv+0x24>
        if(quarterSeconds % 8 == 0){
   d437e:	4b16      	ldr	r3, [pc, #88]	; (d43d8 <_Z15updateStatusLedv+0x60>)
   d4380:	681b      	ldr	r3, [r3, #0]
   d4382:	f013 0307 	ands.w	r3, r3, #7
   d4386:	d103      	bne.n	d4390 <_Z15updateStatusLedv+0x18>
            //turn status light on blue
            RGB.color(0,0,255);
   d4388:	2100      	movs	r1, #0
   d438a:	22ff      	movs	r2, #255	; 0xff
   d438c:	4608      	mov	r0, r1
   d438e:	e00e      	b.n	d43ae <_Z15updateStatusLedv+0x36>
        }
        else if(quarterSeconds % 8 == 4){
   d4390:	2b04      	cmp	r3, #4
   d4392:	d11e      	bne.n	d43d2 <_Z15updateStatusLedv+0x5a>
            //turn status light off
            RGB.color(0,0,0);
   d4394:	2200      	movs	r2, #0
   d4396:	4611      	mov	r1, r2
   d4398:	4610      	mov	r0, r2
   d439a:	e008      	b.n	d43ae <_Z15updateStatusLedv+0x36>
        }
    }
    //alarm 3 - Red LED flashing, 2 Hz
    else if(alarmActive[3]){
   d439c:	78da      	ldrb	r2, [r3, #3]
   d439e:	b142      	cbz	r2, d43b2 <_Z15updateStatusLedv+0x3a>
        if (quarterSeconds % 2 == 0){
   d43a0:	4b0d      	ldr	r3, [pc, #52]	; (d43d8 <_Z15updateStatusLedv+0x60>)
   d43a2:	681b      	ldr	r3, [r3, #0]
   d43a4:	07da      	lsls	r2, r3, #31
   d43a6:	d4f5      	bmi.n	d4394 <_Z15updateStatusLedv+0x1c>
            //turn red light on
            RGB.color(255,0,0);
   d43a8:	2200      	movs	r2, #0
   d43aa:	4611      	mov	r1, r2
   d43ac:	20ff      	movs	r0, #255	; 0xff
   d43ae:	f003 bd3d 	b.w	d7e2c <_ZN8RGBClass5colorEiii>
            //turn red light off
            RGB.color(0,0,0);
        }
    }
    //alarm 2 - Red LED flashing, 1 Hz
    else if(alarmActive[2]){
   d43b2:	789a      	ldrb	r2, [r3, #2]
   d43b4:	b132      	cbz	r2, d43c4 <_Z15updateStatusLedv+0x4c>
        if(quarterSeconds % 4 == 0){
   d43b6:	4b08      	ldr	r3, [pc, #32]	; (d43d8 <_Z15updateStatusLedv+0x60>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	f013 0303 	ands.w	r3, r3, #3
   d43be:	d0f3      	beq.n	d43a8 <_Z15updateStatusLedv+0x30>
            //turn red light on
            RGB.color(255,0,0);
        }
        else if(quarterSeconds % 4 == 2){
   d43c0:	2b02      	cmp	r3, #2
   d43c2:	e7e6      	b.n	d4392 <_Z15updateStatusLedv+0x1a>
            // turn red light off
            RGB.color(0,0,0);
        }
    }
    //alarm 1 - Blue LED flashing, 2 Hz 
    else if(alarmActive[1]){
   d43c4:	785b      	ldrb	r3, [r3, #1]
   d43c6:	b123      	cbz	r3, d43d2 <_Z15updateStatusLedv+0x5a>
        if (quarterSeconds % 2 == 0){
   d43c8:	4b03      	ldr	r3, [pc, #12]	; (d43d8 <_Z15updateStatusLedv+0x60>)
   d43ca:	681b      	ldr	r3, [r3, #0]
   d43cc:	07db      	lsls	r3, r3, #31
   d43ce:	d4e1      	bmi.n	d4394 <_Z15updateStatusLedv+0x1c>
   d43d0:	e7da      	b.n	d4388 <_Z15updateStatusLedv+0x10>
   d43d2:	4770      	bx	lr
   d43d4:	2003e376 	.word	0x2003e376
   d43d8:	2003e33c 	.word	0x2003e33c

000d43dc <_Z19alarmCondtitionsMeti>:
/* Functions to control the functionality of clusterhead actuators */

/* Alarms */
/* checks if the current conditions meet those required for the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
bool alarmCondtitionsMet(int alarmNumber){
   d43dc:	b508      	push	{r3, lr}
   d43de:	4602      	mov	r2, r0
    switch(alarmNumber){
   d43e0:	2803      	cmp	r0, #3
   d43e2:	d81e      	bhi.n	d4422 <_Z19alarmCondtitionsMeti+0x46>
   d43e4:	e8df f000 	tbb	[pc, r0]
   d43e8:	16120702 	.word	0x16120702
        case 0:
            //Object movement detected within 25cms
            return (
                currentDistance != 0 
                && currentDistance <= DISTANCE_THRESHOLD
   d43ec:	4b10      	ldr	r3, [pc, #64]	; (d4430 <_Z19alarmCondtitionsMeti+0x54>)
            );
   d43ee:	7818      	ldrb	r0, [r3, #0]
   d43f0:	3801      	subs	r0, #1
   d43f2:	2818      	cmp	r0, #24
   d43f4:	e006      	b.n	d4404 <_Z19alarmCondtitionsMeti+0x28>
        case 1:
            //Sound Level 55-70 dBA for 30 seconds, light level <100 lux and noise last for more than 30 sec
            return (
                durationAtSoundThresholds[0] >= SOUND_DURATION_THRESHOLDS[0]
   d43f6:	4b0f      	ldr	r3, [pc, #60]	; (d4434 <_Z19alarmCondtitionsMeti+0x58>)
                && currentLight < LIGHT_THRESHOLD
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	2b1d      	cmp	r3, #29
   d43fc:	d915      	bls.n	d442a <_Z19alarmCondtitionsMeti+0x4e>
   d43fe:	4b0e      	ldr	r3, [pc, #56]	; (d4438 <_Z19alarmCondtitionsMeti+0x5c>)
   d4400:	8818      	ldrh	r0, [r3, #0]
   d4402:	2863      	cmp	r0, #99	; 0x63
   d4404:	bf8c      	ite	hi
   d4406:	2000      	movhi	r0, #0
   d4408:	2001      	movls	r0, #1
   d440a:	bd08      	pop	{r3, pc}
            );
        case 2:
            //Sound level > 70 dBA for 10 seconds, light level < 100 lux and noise last for more than 10 sec
            return (
                durationAtSoundThresholds[1] >= SOUND_DURATION_THRESHOLDS[1]
   d440c:	4b09      	ldr	r3, [pc, #36]	; (d4434 <_Z19alarmCondtitionsMeti+0x58>)
                && currentLight < LIGHT_THRESHOLD
   d440e:	685b      	ldr	r3, [r3, #4]
   d4410:	2b09      	cmp	r3, #9
   d4412:	e7f3      	b.n	d43fc <_Z19alarmCondtitionsMeti+0x20>
            );
        case 3:
            //Sound level > 80 dBA
            return (currentSound > SOUND_VOLUME_THRESHOLDS[2]);
   d4414:	4b09      	ldr	r3, [pc, #36]	; (d443c <_Z19alarmCondtitionsMeti+0x60>)
   d4416:	6818      	ldr	r0, [r3, #0]
   d4418:	2850      	cmp	r0, #80	; 0x50
   d441a:	bfd4      	ite	le
   d441c:	2000      	movle	r0, #0
   d441e:	2001      	movgt	r0, #1
   d4420:	bd08      	pop	{r3, pc}
        default:
            Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'alarmConditionsMet' function. Expected value from 0 - 3, got %d", alarmNumber);
   d4422:	4907      	ldr	r1, [pc, #28]	; (d4440 <_Z19alarmCondtitionsMeti+0x64>)
   d4424:	4807      	ldr	r0, [pc, #28]	; (d4444 <_Z19alarmCondtitionsMeti+0x68>)
   d4426:	f7ff fe81 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
            );
        case 1:
            //Sound Level 55-70 dBA for 30 seconds, light level <100 lux and noise last for more than 30 sec
            return (
                durationAtSoundThresholds[0] >= SOUND_DURATION_THRESHOLDS[0]
                && currentLight < LIGHT_THRESHOLD
   d442a:	2000      	movs	r0, #0
            return (currentSound > SOUND_VOLUME_THRESHOLDS[2]);
        default:
            Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'alarmConditionsMet' function. Expected value from 0 - 3, got %d", alarmNumber);
            return false;
    }
}
   d442c:	bd08      	pop	{r3, pc}
   d442e:	bf00      	nop
   d4430:	2003e338 	.word	0x2003e338
   d4434:	2003e3a8 	.word	0x2003e3a8
   d4438:	2003e374 	.word	0x2003e374
   d443c:	2003d944 	.word	0x2003d944
   d4440:	000d9097 	.word	0x000d9097
   d4444:	2003e40c 	.word	0x2003e40c

000d4448 <_Z10startAlarmi>:

/* Activates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void startAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d4448:	2803      	cmp	r0, #3
    }
}

/* Activates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void startAlarm(int alarmNumber){
   d444a:	b510      	push	{r4, lr}
   d444c:	4604      	mov	r4, r0
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d444e:	d814      	bhi.n	d447a <_Z10startAlarmi+0x32>
        //activate this alarm and record the time it was activated
        alarmActive[alarmNumber] = true;
   d4450:	4b0d      	ldr	r3, [pc, #52]	; (d4488 <_Z10startAlarmi+0x40>)
   d4452:	2201      	movs	r2, #1
   d4454:	541a      	strb	r2, [r3, r0]
        alarmActivatedTimes[alarmNumber] = Time.now();
   d4456:	f003 fcb5 	bl	d7dc4 <_ZN9TimeClass3nowEv>
   d445a:	4b0c      	ldr	r3, [pc, #48]	; (d448c <_Z10startAlarmi+0x44>)
   d445c:	17c1      	asrs	r1, r0, #31
   d445e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

        //do alarm-specific logic
        //which node triggered this alarm?
        uint8_t alarmSourceSensorNodeId = 2;
        switch(alarmNumber){
   d4462:	2c00      	cmp	r4, #0
void startAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
        //activate this alarm and record the time it was activated
        alarmActive[alarmNumber] = true;
        alarmActivatedTimes[alarmNumber] = Time.now();
   d4464:	e9c3 0100 	strd	r0, r1, [r3]
                break;
            case 3:
                break;
        }
        //TODO - update LCD - "alarm at sensor node 1|2"
        Log.info("Activating alarm %d from sensor node %u", alarmNumber, alarmSourceSensorNodeId);
   d4468:	4622      	mov	r2, r4
   d446a:	bf0c      	ite	eq
   d446c:	2301      	moveq	r3, #1
   d446e:	2302      	movne	r3, #2
   d4470:	4907      	ldr	r1, [pc, #28]	; (d4490 <_Z10startAlarmi+0x48>)
   d4472:	4808      	ldr	r0, [pc, #32]	; (d4494 <_Z10startAlarmi+0x4c>)
   d4474:	f7ff fe5a 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d4478:	bd10      	pop	{r4, pc}
    }
    else{
        Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'startAlarm' function. Expected value from 0 - 3, got %d", alarmNumber);
   d447a:	4602      	mov	r2, r0
   d447c:	4906      	ldr	r1, [pc, #24]	; (d4498 <_Z10startAlarmi+0x50>)
   d447e:	4805      	ldr	r0, [pc, #20]	; (d4494 <_Z10startAlarmi+0x4c>)
   d4480:	f7ff fe54 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d4484:	bd10      	pop	{r4, pc}
   d4486:	bf00      	nop
   d4488:	2003e376 	.word	0x2003e376
   d448c:	2003e380 	.word	0x2003e380
   d4490:	000d9108 	.word	0x000d9108
   d4494:	2003e40c 	.word	0x2003e40c
   d4498:	000d9130 	.word	0x000d9130

000d449c <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
    
    Log.info("Sensor 2 - Current: %u Amps", twoByteValue);
}

void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d449c:	b513      	push	{r0, r1, r4, lr}
    uint8_t byteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));
   d449e:	4602      	mov	r2, r0
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
    
    Log.info("Sensor 2 - Current: %u Amps", twoByteValue);
}

void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d44a0:	4604      	mov	r4, r0
    uint8_t byteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));
   d44a2:	f852 0f01 	ldr.w	r0, [r2, #1]!

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
   d44a6:	7824      	ldrb	r4, [r4, #0]
void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
    uint8_t byteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));
   d44a8:	6851      	ldr	r1, [r2, #4]
   d44aa:	466b      	mov	r3, sp
   d44ac:	c303      	stmia	r3!, {r0, r1}

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
    Log.info("Sensor 1 - Distance: %u cm", byteValue);
   d44ae:	4622      	mov	r2, r4
   d44b0:	4808      	ldr	r0, [pc, #32]	; (d44d4 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d44b2:	4909      	ldr	r1, [pc, #36]	; (d44d8 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d44b4:	f7ff fe3a 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>

    currentDistance = byteValue;
   d44b8:	4b08      	ldr	r3, [pc, #32]	; (d44dc <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
    //activate alarm 0 if it's within 25cm threshold
    if(alarmCondtitionsMet(0)){
   d44ba:	2000      	movs	r0, #0
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
    Log.info("Sensor 1 - Distance: %u cm", byteValue);

    currentDistance = byteValue;
   d44bc:	701c      	strb	r4, [r3, #0]
    //activate alarm 0 if it's within 25cm threshold
    if(alarmCondtitionsMet(0)){
   d44be:	f7ff ff8d 	bl	d43dc <_Z19alarmCondtitionsMeti>
   d44c2:	b128      	cbz	r0, d44d0 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
        startAlarm(0);
   d44c4:	2000      	movs	r0, #0
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d44c6:	b002      	add	sp, #8
   d44c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Log.info("Sensor 1 - Distance: %u cm", byteValue);

    currentDistance = byteValue;
    //activate alarm 0 if it's within 25cm threshold
    if(alarmCondtitionsMet(0)){
        startAlarm(0);
   d44cc:	f7ff bfbc 	b.w	d4448 <_Z10startAlarmi>
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d44d0:	b002      	add	sp, #8
   d44d2:	bd10      	pop	{r4, pc}
   d44d4:	2003e40c 	.word	0x2003e40c
   d44d8:	000d9199 	.word	0x000d9199
   d44dc:	2003e338 	.word	0x2003e338

000d44e0 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

    currentLight = twoByteValue;
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onSoundReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d44e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint16_t twoByteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));
   d44e2:	4602      	mov	r2, r0

    currentLight = twoByteValue;
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onSoundReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d44e4:	4604      	mov	r4, r0
    uint16_t twoByteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));
   d44e6:	f852 0f02 	ldr.w	r0, [r2, #2]!
   d44ea:	6851      	ldr	r1, [r2, #4]
   d44ec:	ab02      	add	r3, sp, #8
   d44ee:	c303      	stmia	r3!, {r0, r1}

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d44f0:	8823      	ldrh	r3, [r4, #0]
   d44f2:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Sound: %u dB", twoByteValue);
   d44f6:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d44fa:	4809      	ldr	r0, [pc, #36]	; (d4520 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d44fc:	4909      	ldr	r1, [pc, #36]	; (d4524 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d44fe:	4622      	mov	r2, r4
   d4500:	f7ff fe14 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>

    currentSound = twoByteValue;
   d4504:	4b08      	ldr	r3, [pc, #32]	; (d4528 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)

    //activate alarm 3 immediately if above max volume threshold
    if(alarmCondtitionsMet(3)){
   d4506:	2003      	movs	r0, #3
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
    Log.info("Sensor 2 - Sound: %u dB", twoByteValue);

    currentSound = twoByteValue;
   d4508:	601c      	str	r4, [r3, #0]

    //activate alarm 3 immediately if above max volume threshold
    if(alarmCondtitionsMet(3)){
   d450a:	f7ff ff67 	bl	d43dc <_Z19alarmCondtitionsMeti>
   d450e:	b128      	cbz	r0, d451c <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>
        startAlarm(3);
   d4510:	2003      	movs	r0, #3
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d4512:	b004      	add	sp, #16
   d4514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    currentSound = twoByteValue;

    //activate alarm 3 immediately if above max volume threshold
    if(alarmCondtitionsMet(3)){
        startAlarm(3);
   d4518:	f7ff bf96 	b.w	d4448 <_Z10startAlarmi>
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d451c:	b004      	add	sp, #16
   d451e:	bd10      	pop	{r4, pc}
   d4520:	2003e40c 	.word	0x2003e40c
   d4524:	000d91b4 	.word	0x000d91b4
   d4528:	2003d944 	.word	0x2003d944

000d452c <_Z10resetAlarmi>:

/* Resets/deactivates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void resetAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d452c:	2803      	cmp	r0, #3
    
}

/* Resets/deactivates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void resetAlarm(int alarmNumber){
   d452e:	b513      	push	{r0, r1, r4, lr}
   d4530:	4604      	mov	r4, r0
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d4532:	d81a      	bhi.n	d456a <_Z10resetAlarmi+0x3e>
        //record the time elapsed
        int eventDuration = Time.now() - alarmActivatedTimes[alarmNumber];
   d4534:	f003 fc46 	bl	d7dc4 <_ZN9TimeClass3nowEv>
   d4538:	4b0f      	ldr	r3, [pc, #60]	; (d4578 <_Z10resetAlarmi+0x4c>)
                break;
        }

        //log event information
        Log.info("Alarm %d triggered by Sensor Node %u at [converted date/time here]. Duration: %d seconds",
            alarmNumber, alarmSensorNodeId, eventDuration);
   d453a:	4910      	ldr	r1, [pc, #64]	; (d457c <_Z10resetAlarmi+0x50>)
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void resetAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
        //record the time elapsed
        int eventDuration = Time.now() - alarmActivatedTimes[alarmNumber];
   d453c:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
        //TODO - convert alarmActivatedTimes[alarmNumber] to printable local date/time

        //alarm-specific logic
        uint8_t alarmSensorNodeId = 2; //the sensor node which the alarm originated from
   d4540:	2c00      	cmp	r4, #0
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void resetAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
        //record the time elapsed
        int eventDuration = Time.now() - alarmActivatedTimes[alarmNumber];
   d4542:	eba0 0003 	sub.w	r0, r0, r3
                break;
        }

        //log event information
        Log.info("Alarm %d triggered by Sensor Node %u at [converted date/time here]. Duration: %d seconds",
            alarmNumber, alarmSensorNodeId, eventDuration);
   d4546:	9000      	str	r0, [sp, #0]
   d4548:	bf0c      	ite	eq
   d454a:	2301      	moveq	r3, #1
   d454c:	2302      	movne	r3, #2
   d454e:	4622      	mov	r2, r4
   d4550:	480b      	ldr	r0, [pc, #44]	; (d4580 <_Z10resetAlarmi+0x54>)
   d4552:	f7ff fdeb 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>

        //set alarm to inactive
        alarmActive[alarmNumber] = false;
   d4556:	2200      	movs	r2, #0
   d4558:	4b0a      	ldr	r3, [pc, #40]	; (d4584 <_Z10resetAlarmi+0x58>)
        //turn off alarm light
        RGB.color(0,0,0);
   d455a:	4611      	mov	r1, r2
   d455c:	4610      	mov	r0, r2
        //log event information
        Log.info("Alarm %d triggered by Sensor Node %u at [converted date/time here]. Duration: %d seconds",
            alarmNumber, alarmSensorNodeId, eventDuration);

        //set alarm to inactive
        alarmActive[alarmNumber] = false;
   d455e:	551a      	strb	r2, [r3, r4]
        RGB.color(0,0,0);
    }
    else{
        Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'resetAlarm' function. Expected value from 0 - 3, got %d", alarmNumber);
    }
}
   d4560:	b002      	add	sp, #8
   d4562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            alarmNumber, alarmSensorNodeId, eventDuration);

        //set alarm to inactive
        alarmActive[alarmNumber] = false;
        //turn off alarm light
        RGB.color(0,0,0);
   d4566:	f003 bc61 	b.w	d7e2c <_ZN8RGBClass5colorEiii>
    }
    else{
        Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'resetAlarm' function. Expected value from 0 - 3, got %d", alarmNumber);
   d456a:	4602      	mov	r2, r0
   d456c:	4906      	ldr	r1, [pc, #24]	; (d4588 <_Z10resetAlarmi+0x5c>)
   d456e:	4804      	ldr	r0, [pc, #16]	; (d4580 <_Z10resetAlarmi+0x54>)
   d4570:	f7ff fddc 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
    }
}
   d4574:	b002      	add	sp, #8
   d4576:	bd10      	pop	{r4, pc}
   d4578:	2003e380 	.word	0x2003e380
   d457c:	000d91cc 	.word	0x000d91cc
   d4580:	2003e40c 	.word	0x2003e40c
   d4584:	2003e376 	.word	0x2003e376
   d4588:	000d9225 	.word	0x000d9225

000d458c <_Z13monitorAlarmsh>:
}

/* check if we need to activate time-based alarms, 
 * monitor current alarms to see if they need to timeout and be reset.
 * @param secondsPassed: number of seconds since this was last called. */
void monitorAlarms(uint8_t secondsPassed){
   d458c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //check each of the 4 alarms
    for (uint8_t i = 0; i < 4; i++){
        //if this alarm is still active...
        if(alarmActive[i]){
   d4590:	f8df 8070 	ldr.w	r8, [pc, #112]	; d4604 <_Z13monitorAlarmsh+0x78>
   d4594:	4d1a      	ldr	r5, [pc, #104]	; (d4600 <_Z13monitorAlarmsh+0x74>)
}

/* check if we need to activate time-based alarms, 
 * monitor current alarms to see if they need to timeout and be reset.
 * @param secondsPassed: number of seconds since this was last called. */
void monitorAlarms(uint8_t secondsPassed){
   d4596:	4607      	mov	r7, r0
   d4598:	2400      	movs	r4, #0
    //check each of the 4 alarms
    for (uint8_t i = 0; i < 4; i++){
        //if this alarm is still active...
        if(alarmActive[i]){
   d459a:	f814 3008 	ldrb.w	r3, [r4, r8]
   d459e:	4e19      	ldr	r6, [pc, #100]	; (d4604 <_Z13monitorAlarmsh+0x78>)
   d45a0:	b193      	cbz	r3, d45c8 <_Z13monitorAlarmsh+0x3c>
            //if its conditions are no longer met, increment the cooloff counter
            if(!alarmCondtitionsMet(i)){    
   d45a2:	4620      	mov	r0, r4
   d45a4:	f7ff ff1a 	bl	d43dc <_Z19alarmCondtitionsMeti>
   d45a8:	b958      	cbnz	r0, d45c2 <_Z13monitorAlarmsh+0x36>
                alarmCooloffCounters[i] += secondsPassed;
   d45aa:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   d45ae:	443b      	add	r3, r7
   d45b0:	b29b      	uxth	r3, r3
                //if cooloff counter has reached the cooloff delay, then automatically reset this alarm
                if(alarmCooloffCounters[i] >= ALARM_COOLOFF_DELAY){
   d45b2:	2b3b      	cmp	r3, #59	; 0x3b
    for (uint8_t i = 0; i < 4; i++){
        //if this alarm is still active...
        if(alarmActive[i]){
            //if its conditions are no longer met, increment the cooloff counter
            if(!alarmCondtitionsMet(i)){    
                alarmCooloffCounters[i] += secondsPassed;
   d45b4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
                //if cooloff counter has reached the cooloff delay, then automatically reset this alarm
                if(alarmCooloffCounters[i] >= ALARM_COOLOFF_DELAY){
   d45b8:	d906      	bls.n	d45c8 <_Z13monitorAlarmsh+0x3c>
                    resetAlarm(i);
   d45ba:	4620      	mov	r0, r4
   d45bc:	f7ff ffb6 	bl	d452c <_Z10resetAlarmi>
   d45c0:	e002      	b.n	d45c8 <_Z13monitorAlarmsh+0x3c>
                }
            }
            //if conditions are still met, reset cooloff counter
            else{
                alarmCooloffCounters[i] = 0;
   d45c2:	2300      	movs	r3, #0
   d45c4:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   d45c8:	3401      	adds	r4, #1
/* check if we need to activate time-based alarms, 
 * monitor current alarms to see if they need to timeout and be reset.
 * @param secondsPassed: number of seconds since this was last called. */
void monitorAlarms(uint8_t secondsPassed){
    //check each of the 4 alarms
    for (uint8_t i = 0; i < 4; i++){
   d45ca:	2c04      	cmp	r4, #4
   d45cc:	d1e5      	bne.n	d459a <_Z13monitorAlarmsh+0xe>
            }
        }
    }

    //check if the time-based alarms (alarms 1 and 2) need to be activated
    if(!alarmActive[2] && alarmCondtitionsMet(2)){
   d45ce:	78b3      	ldrb	r3, [r6, #2]
   d45d0:	b91b      	cbnz	r3, d45da <_Z13monitorAlarmsh+0x4e>
   d45d2:	2002      	movs	r0, #2
   d45d4:	f7ff ff02 	bl	d43dc <_Z19alarmCondtitionsMeti>
   d45d8:	b938      	cbnz	r0, d45ea <_Z13monitorAlarmsh+0x5e>
        startAlarm(2);
    }
    if(!alarmActive[1] && alarmCondtitionsMet(1)){
   d45da:	7873      	ldrb	r3, [r6, #1]
   d45dc:	b973      	cbnz	r3, d45fc <_Z13monitorAlarmsh+0x70>
   d45de:	2001      	movs	r0, #1
   d45e0:	f7ff fefc 	bl	d43dc <_Z19alarmCondtitionsMeti>
   d45e4:	b928      	cbnz	r0, d45f2 <_Z13monitorAlarmsh+0x66>
   d45e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
    }

    //check if the time-based alarms (alarms 1 and 2) need to be activated
    if(!alarmActive[2] && alarmCondtitionsMet(2)){
        startAlarm(2);
   d45ea:	2002      	movs	r0, #2
   d45ec:	f7ff ff2c 	bl	d4448 <_Z10startAlarmi>
   d45f0:	e7f3      	b.n	d45da <_Z13monitorAlarmsh+0x4e>
    }
    if(!alarmActive[1] && alarmCondtitionsMet(1)){
        startAlarm(1);
   d45f2:	2001      	movs	r0, #1
    }
}
   d45f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    //check if the time-based alarms (alarms 1 and 2) need to be activated
    if(!alarmActive[2] && alarmCondtitionsMet(2)){
        startAlarm(2);
    }
    if(!alarmActive[1] && alarmCondtitionsMet(1)){
        startAlarm(1);
   d45f8:	f7ff bf26 	b.w	d4448 <_Z10startAlarmi>
   d45fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4600:	2003d950 	.word	0x2003d950
   d4604:	2003e376 	.word	0x2003e376

000d4608 <loop>:
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
    currentSensorCharacteristic2.onDataReceived(onCurrentReceived2, NULL);
}

void loop() { 
   d4608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
   d460c:	488e      	ldr	r0, [pc, #568]	; (d4848 <loop+0x240>)
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
    currentSensorCharacteristic2.onDataReceived(onCurrentReceived2, NULL);
}

void loop() { 
   d460e:	b08e      	sub	sp, #56	; 0x38
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
   d4610:	f001 fc28 	bl	d5e64 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4614:	4605      	mov	r5, r0
   d4616:	b368      	cbz	r0, d4674 <loop+0x6c>
        //record start time of this loop
        loopStart = millis();

        //update alarm cooloff timers and sound-threshold durations only every 2 seconds
        if(quarterSeconds % 8 == 0){
   d4618:	4c8c      	ldr	r4, [pc, #560]	; (d484c <loop+0x244>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d461a:	f000 fb81 	bl	d4d20 <HAL_Timer_Get_Milli_Seconds>
   d461e:	6822      	ldr	r2, [r4, #0]

void loop() { 
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d4620:	4b8b      	ldr	r3, [pc, #556]	; (d4850 <loop+0x248>)

        //update alarm cooloff timers and sound-threshold durations only every 2 seconds
        if(quarterSeconds % 8 == 0){
   d4622:	f012 0f07 	tst.w	r2, #7

void loop() { 
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d4626:	6018      	str	r0, [r3, #0]
   d4628:	461d      	mov	r5, r3

        //update alarm cooloff timers and sound-threshold durations only every 2 seconds
        if(quarterSeconds % 8 == 0){
   d462a:	d105      	bne.n	d4638 <loop+0x30>
            /*check if we need to activate time-based alarms, 
            monitor current alarms to see if they need to timeout and be reset */
            monitorAlarms(2);
   d462c:	2002      	movs	r0, #2
   d462e:	f7ff ffad 	bl	d458c <_Z13monitorAlarmsh>
            //update sound threshold counters "2" seconds after last update
            updateSoundThresholdCounters(2);
   d4632:	2002      	movs	r0, #2
   d4634:	f7ff fe82 	bl	d433c <_Z28updateSoundThresholdCountersh>
        }

        //flash appropriate colour at appropriate interval for active alarm
        updateStatusLed();
   d4638:	f7ff fe9e 	bl	d4378 <_Z15updateStatusLedv>

        //test bluetooth
        if (quarterSeconds % 8 == 0){
   d463c:	6822      	ldr	r2, [r4, #0]
   d463e:	f012 0307 	ands.w	r3, r2, #7
   d4642:	d10c      	bne.n	d465e <loop+0x56>
            uint16_t test = (uint16_t) quarterSeconds;
   d4644:	a90e      	add	r1, sp, #56	; 0x38
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4646:	4883      	ldr	r0, [pc, #524]	; (d4854 <loop+0x24c>)
   d4648:	f821 2d14 	strh.w	r2, [r1, #-20]!
   d464c:	2202      	movs	r2, #2
   d464e:	f001 faf9 	bl	d5c44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            fanSpeedCharacteristic.setValue(test);
            Log.info("%u", test);
   d4652:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d4656:	4980      	ldr	r1, [pc, #512]	; (d4858 <loop+0x250>)
   d4658:	4880      	ldr	r0, [pc, #512]	; (d485c <loop+0x254>)
   d465a:	f7ff fd67 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
        }
        //loop every 250ms, to allow 2Hz status LED flashing if necessary
        //subtract processing time from the delay to make intervals consistently sized
        delay(250 - (millis() - loopStart));
   d465e:	682d      	ldr	r5, [r5, #0]
   d4660:	f000 fb5e 	bl	d4d20 <HAL_Timer_Get_Milli_Seconds>
   d4664:	35fa      	adds	r5, #250	; 0xfa
   d4666:	1a28      	subs	r0, r5, r0
   d4668:	f003 fbbe 	bl	d7de8 <delay>
        quarterSeconds+=1;  
   d466c:	6823      	ldr	r3, [r4, #0]
   d466e:	3301      	adds	r3, #1
   d4670:	6023      	str	r3, [r4, #0]
   d4672:	e183      	b.n	d497c <loop+0x374>
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d4674:	497a      	ldr	r1, [pc, #488]	; (d4860 <loop+0x258>)
   d4676:	4879      	ldr	r0, [pc, #484]	; (d485c <loop+0x254>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4678:	4e7a      	ldr	r6, [pc, #488]	; (d4864 <loop+0x25c>)
        delay(250 - (millis() - loopStart));
        quarterSeconds+=1;  
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d467a:	f7ff fd57 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d467e:	f001 fc51 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4682:	221e      	movs	r2, #30
   d4684:	4977      	ldr	r1, [pc, #476]	; (d4864 <loop+0x25c>)
   d4686:	f001 fca3 	bl	d5fd0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d468a:	4607      	mov	r7, r0
        for (int i = 0; i < count; i++) {
   d468c:	42bd      	cmp	r5, r7
   d468e:	f280 80c8 	bge.w	d4822 <loop+0x21a>
   d4692:	2454      	movs	r4, #84	; 0x54
   d4694:	436c      	muls	r4, r5
            BleUuid foundService;
   d4696:	a804      	add	r0, sp, #16
   d4698:	f001 f814 	bl	d56c4 <_ZN8particle7BleUuidC1Ev>
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d469c:	f104 0008 	add.w	r0, r4, #8
   d46a0:	2201      	movs	r2, #1
   d46a2:	a904      	add	r1, sp, #16
   d46a4:	4430      	add	r0, r6
   d46a6:	f001 fa73 	bl	d5b90 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>

            Log.info("Found a bluetooth device.");
   d46aa:	496f      	ldr	r1, [pc, #444]	; (d4868 <loop+0x260>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d46ac:	4680      	mov	r8, r0

            Log.info("Found a bluetooth device.");
   d46ae:	486b      	ldr	r0, [pc, #428]	; (d485c <loop+0x254>)
   d46b0:	f7ff fd3c 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d46b4:	4434      	add	r4, r6

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d46b6:	496d      	ldr	r1, [pc, #436]	; (d486c <loop+0x264>)
   d46b8:	a809      	add	r0, sp, #36	; 0x24
   d46ba:	f000 fe6e 	bl	d539a <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Address: " + scanResults[i].address.toString());
   d46be:	2200      	movs	r2, #0
   d46c0:	4621      	mov	r1, r4
   d46c2:	4668      	mov	r0, sp
   d46c4:	f000 ffed 	bl	d56a2 <_ZNK8particle10BleAddress8toStringEb>
   d46c8:	4669      	mov	r1, sp
   d46ca:	a809      	add	r0, sp, #36	; 0x24
   d46cc:	f000 feba 	bl	d5444 <_ZplRK15StringSumHelperRK6String>
   d46d0:	6801      	ldr	r1, [r0, #0]
   d46d2:	4862      	ldr	r0, [pc, #392]	; (d485c <loop+0x254>)
   d46d4:	f7ff fd2a 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d46d8:	4668      	mov	r0, sp
   d46da:	f000 fe17 	bl	d530c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d46de:	a809      	add	r0, sp, #36	; 0x24
   d46e0:	f000 fe14 	bl	d530c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d46e4:	4962      	ldr	r1, [pc, #392]	; (d4870 <loop+0x268>)
   d46e6:	a809      	add	r0, sp, #36	; 0x24
   d46e8:	f000 fe57 	bl	d539a <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Found UUID: " + foundService.toString());
   d46ec:	2200      	movs	r2, #0
   d46ee:	a904      	add	r1, sp, #16
   d46f0:	4668      	mov	r0, sp
   d46f2:	f001 f977 	bl	d59e4 <_ZNK8particle7BleUuid8toStringEb>
   d46f6:	4669      	mov	r1, sp
   d46f8:	a809      	add	r0, sp, #36	; 0x24
   d46fa:	f000 fea3 	bl	d5444 <_ZplRK15StringSumHelperRK6String>
   d46fe:	6801      	ldr	r1, [r0, #0]
   d4700:	4856      	ldr	r0, [pc, #344]	; (d485c <loop+0x254>)
   d4702:	f7ff fd13 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d4706:	4668      	mov	r0, sp
   d4708:	f000 fe00 	bl	d530c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d470c:	a809      	add	r0, sp, #36	; 0x24
   d470e:	f000 fdfd 	bl	d530c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4712:	4958      	ldr	r1, [pc, #352]	; (d4874 <loop+0x26c>)
   d4714:	a809      	add	r0, sp, #36	; 0x24
   d4716:	f000 fe40 	bl	d539a <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode1 UUID: " + sensorNode1ServiceUuid.toString());
   d471a:	2200      	movs	r2, #0
   d471c:	4956      	ldr	r1, [pc, #344]	; (d4878 <loop+0x270>)
   d471e:	4668      	mov	r0, sp
   d4720:	f001 f960 	bl	d59e4 <_ZNK8particle7BleUuid8toStringEb>
   d4724:	4669      	mov	r1, sp
   d4726:	a809      	add	r0, sp, #36	; 0x24
   d4728:	f000 fe8c 	bl	d5444 <_ZplRK15StringSumHelperRK6String>
   d472c:	6801      	ldr	r1, [r0, #0]
   d472e:	484b      	ldr	r0, [pc, #300]	; (d485c <loop+0x254>)
   d4730:	f7ff fcfc 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d4734:	4668      	mov	r0, sp
   d4736:	f000 fde9 	bl	d530c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d473a:	a809      	add	r0, sp, #36	; 0x24
   d473c:	f000 fde6 	bl	d530c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4740:	494e      	ldr	r1, [pc, #312]	; (d487c <loop+0x274>)
   d4742:	a809      	add	r0, sp, #36	; 0x24
   d4744:	f000 fe29 	bl	d539a <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode2 UUID: " + sensorNode2ServiceUuid.toString());
   d4748:	2200      	movs	r2, #0
   d474a:	494d      	ldr	r1, [pc, #308]	; (d4880 <loop+0x278>)
   d474c:	4668      	mov	r0, sp
   d474e:	f001 f949 	bl	d59e4 <_ZNK8particle7BleUuid8toStringEb>
   d4752:	4669      	mov	r1, sp
   d4754:	a809      	add	r0, sp, #36	; 0x24
   d4756:	f000 fe75 	bl	d5444 <_ZplRK15StringSumHelperRK6String>
   d475a:	6801      	ldr	r1, [r0, #0]
   d475c:	483f      	ldr	r0, [pc, #252]	; (d485c <loop+0x254>)
   d475e:	f7ff fce5 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d4762:	4668      	mov	r0, sp
   d4764:	f000 fdd2 	bl	d530c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4768:	a809      	add	r0, sp, #36	; 0x24
   d476a:	f000 fdcf 	bl	d530c <_ZN6StringD1Ev>

            //Check if it matches UUID for sensor node 1
            if (len > 0 && foundService == sensorNode1ServiceUuid){
   d476e:	f1b8 0f00 	cmp.w	r8, #0
   d4772:	d054      	beq.n	d481e <loop+0x216>
   d4774:	4940      	ldr	r1, [pc, #256]	; (d4878 <loop+0x270>)
   d4776:	a804      	add	r0, sp, #16
   d4778:	f001 f844 	bl	d5804 <_ZNK8particle7BleUuideqERKS0_>
   d477c:	2800      	cmp	r0, #0
   d477e:	f000 809f 	beq.w	d48c0 <loop+0x2b8>
                Log.info("Found sensor node 1.");
   d4782:	4836      	ldr	r0, [pc, #216]	; (d485c <loop+0x254>)
   d4784:	493f      	ldr	r1, [pc, #252]	; (d4884 <loop+0x27c>)
   d4786:	f7ff fcd1 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode1.connected() == false){
   d478a:	482f      	ldr	r0, [pc, #188]	; (d4848 <loop+0x240>)
   d478c:	f001 fb6a 	bl	d5e64 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4790:	2800      	cmp	r0, #0
   d4792:	d151      	bne.n	d4838 <loop+0x230>
                    sensorNode1 = BLE.connect(scanResults[i].address);
   d4794:	f001 fbc6 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4798:	2301      	movs	r3, #1
   d479a:	4622      	mov	r2, r4
   d479c:	4601      	mov	r1, r0
   d479e:	a809      	add	r0, sp, #36	; 0x24
   d47a0:	f002 f8d4 	bl	d694c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d47a4:	a909      	add	r1, sp, #36	; 0x24
   d47a6:	4828      	ldr	r0, [pc, #160]	; (d4848 <loop+0x240>)
   d47a8:	f001 fd4b 	bl	d6242 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d47ac:	a809      	add	r0, sp, #36	; 0x24
   d47ae:	f001 fc6b 	bl	d6088 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode1.connected()){
   d47b2:	4825      	ldr	r0, [pc, #148]	; (d4848 <loop+0x240>)
   d47b4:	f001 fb56 	bl	d5e64 <_ZNK8particle13BlePeerDevice9connectedEv>
   d47b8:	2800      	cmp	r0, #0
   d47ba:	d03b      	beq.n	d4834 <loop+0x22c>
                        Log.info("Successfully connected to sensor node 1!");
   d47bc:	4932      	ldr	r1, [pc, #200]	; (d4888 <loop+0x280>)
   d47be:	4827      	ldr	r0, [pc, #156]	; (d485c <loop+0x254>)
   d47c0:	f7ff fcb4 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode1.getCharacteristicByUUID(temperatureSensorCharacteristic1, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d47c4:	4931      	ldr	r1, [pc, #196]	; (d488c <loop+0x284>)
   d47c6:	a809      	add	r0, sp, #36	; 0x24
   d47c8:	f001 f892 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d47cc:	aa09      	add	r2, sp, #36	; 0x24
   d47ce:	4930      	ldr	r1, [pc, #192]	; (d4890 <loop+0x288>)
   d47d0:	481d      	ldr	r0, [pc, #116]	; (d4848 <loop+0x240>)
   d47d2:	f001 fd12 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
   d47d6:	492f      	ldr	r1, [pc, #188]	; (d4894 <loop+0x28c>)
   d47d8:	a809      	add	r0, sp, #36	; 0x24
   d47da:	f001 f889 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d47de:	aa09      	add	r2, sp, #36	; 0x24
   d47e0:	492d      	ldr	r1, [pc, #180]	; (d4898 <loop+0x290>)
   d47e2:	4819      	ldr	r0, [pc, #100]	; (d4848 <loop+0x240>)
   d47e4:	f001 fd09 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(distanceSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
   d47e8:	492c      	ldr	r1, [pc, #176]	; (d489c <loop+0x294>)
   d47ea:	a809      	add	r0, sp, #36	; 0x24
   d47ec:	f001 f880 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d47f0:	aa09      	add	r2, sp, #36	; 0x24
   d47f2:	492b      	ldr	r1, [pc, #172]	; (d48a0 <loop+0x298>)
   d47f4:	4814      	ldr	r0, [pc, #80]	; (d4848 <loop+0x240>)
   d47f6:	f001 fd00 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(currentSensorCharacteristic1, "2822a610-32d6-45e1-b9fb-247138fc8df7");
   d47fa:	492a      	ldr	r1, [pc, #168]	; (d48a4 <loop+0x29c>)
   d47fc:	a809      	add	r0, sp, #36	; 0x24
   d47fe:	f001 f877 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d4802:	aa09      	add	r2, sp, #36	; 0x24
   d4804:	4928      	ldr	r1, [pc, #160]	; (d48a8 <loop+0x2a0>)
   d4806:	4810      	ldr	r0, [pc, #64]	; (d4848 <loop+0x240>)
   d4808:	f001 fcf7 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(fanSpeedCharacteristic, "29fba3f5-4ce8-46bc-8d75-77806db22c31");
   d480c:	4927      	ldr	r1, [pc, #156]	; (d48ac <loop+0x2a4>)
   d480e:	a809      	add	r0, sp, #36	; 0x24
   d4810:	f001 f86e 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d4814:	490f      	ldr	r1, [pc, #60]	; (d4854 <loop+0x24c>)
   d4816:	480c      	ldr	r0, [pc, #48]	; (d4848 <loop+0x240>)
   d4818:	aa09      	add	r2, sp, #36	; 0x24
                        sensorNode2.getCharacteristicByUUID(temperatureSensorCharacteristic2, "bc7f18d9-2c43-408e-be25-62f40645987c");
                        sensorNode2.getCharacteristicByUUID(lightSensorCharacteristic2, "ea5248a4-43cc-4198-a4aa-79200a750835");
                        sensorNode2.getCharacteristicByUUID(soundSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(currentSensorCharacteristic2, "2822a610-32d6-45e1-b9fb-247138fc8df7");
                        sensorNode2.getCharacteristicByUUID(ledVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d481a:	f001 fcee 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
        for (int i = 0; i < count; i++) {
   d481e:	3501      	adds	r5, #1
   d4820:	e734      	b.n	d468c <loop+0x84>
                    Log.info("Sensor node 2 already connected.");
                }
            }
        }

        if (count > 0) {
   d4822:	2f00      	cmp	r7, #0
   d4824:	f340 80aa 	ble.w	d497c <loop+0x374>
            Log.info("%d devices found", count);
   d4828:	463a      	mov	r2, r7
   d482a:	4921      	ldr	r1, [pc, #132]	; (d48b0 <loop+0x2a8>)
   d482c:	480b      	ldr	r0, [pc, #44]	; (d485c <loop+0x254>)
   d482e:	f7ff fc7d 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
        }
    }
}
   d4832:	e0a3      	b.n	d497c <loop+0x374>
                        sensorNode1.getCharacteristicByUUID(distanceSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
                        sensorNode1.getCharacteristicByUUID(currentSensorCharacteristic1, "2822a610-32d6-45e1-b9fb-247138fc8df7");
                        sensorNode1.getCharacteristicByUUID(fanSpeedCharacteristic, "29fba3f5-4ce8-46bc-8d75-77806db22c31");
                    }
                    else{
                        Log.info("Failed to connect to sensor node 1.");
   d4834:	491f      	ldr	r1, [pc, #124]	; (d48b4 <loop+0x2ac>)
   d4836:	e002      	b.n	d483e <loop+0x236>
                    }
                }
                else{
                    Log.info("Sensor node 1 already connected.");
   d4838:	491f      	ldr	r1, [pc, #124]	; (d48b8 <loop+0x2b0>)
   d483a:	e000      	b.n	d483e <loop+0x236>
                        sensorNode2.getCharacteristicByUUID(currentSensorCharacteristic2, "2822a610-32d6-45e1-b9fb-247138fc8df7");
                        sensorNode2.getCharacteristicByUUID(ledVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");

                    }
                    else{
                        Log.info("Failed to connect to sensor node 2.");
   d483c:	491f      	ldr	r1, [pc, #124]	; (d48bc <loop+0x2b4>)
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d483e:	4807      	ldr	r0, [pc, #28]	; (d485c <loop+0x254>)
   d4840:	f7ff fc74 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
   d4844:	e7eb      	b.n	d481e <loop+0x216>
   d4846:	bf00      	nop
   d4848:	2003d948 	.word	0x2003d948
   d484c:	2003e33c 	.word	0x2003e33c
   d4850:	2003d938 	.word	0x2003d938
   d4854:	2003d8dc 	.word	0x2003d8dc
   d4858:	000d9018 	.word	0x000d9018
   d485c:	2003e40c 	.word	0x2003e40c
   d4860:	000d928e 	.word	0x000d928e
   d4864:	2003d958 	.word	0x2003d958
   d4868:	000d929f 	.word	0x000d929f
   d486c:	000d92b9 	.word	0x000d92b9
   d4870:	000d92c3 	.word	0x000d92c3
   d4874:	000d92d0 	.word	0x000d92d0
   d4878:	2003d924 	.word	0x2003d924
   d487c:	000d92e3 	.word	0x000d92e3
   d4880:	2003d8f4 	.word	0x2003d8f4
   d4884:	000d9530 	.word	0x000d9530
   d4888:	000d92f6 	.word	0x000d92f6
   d488c:	000d931f 	.word	0x000d931f
   d4890:	2003d8e4 	.word	0x2003d8e4
   d4894:	000d9344 	.word	0x000d9344
   d4898:	2003e330 	.word	0x2003e330
   d489c:	000d9369 	.word	0x000d9369
   d48a0:	2003d908 	.word	0x2003d908
   d48a4:	000d938e 	.word	0x000d938e
   d48a8:	2003e340 	.word	0x2003e340
   d48ac:	000d93b3 	.word	0x000d93b3
   d48b0:	000d951f 	.word	0x000d951f
   d48b4:	000d93d8 	.word	0x000d93d8
   d48b8:	000d93fc 	.word	0x000d93fc
   d48bc:	000d94da 	.word	0x000d94da
                    Log.info("Sensor node 1 already connected.");
                }
            }

            //Check if it matches UUID for sensor node 2
            else if (len > 0 && foundService == sensorNode2ServiceUuid){
   d48c0:	4930      	ldr	r1, [pc, #192]	; (d4984 <loop+0x37c>)
   d48c2:	a804      	add	r0, sp, #16
   d48c4:	f000 ff9e 	bl	d5804 <_ZNK8particle7BleUuideqERKS0_>
   d48c8:	2800      	cmp	r0, #0
   d48ca:	d0a8      	beq.n	d481e <loop+0x216>
                Log.info("Found sensor node 2.");
   d48cc:	482e      	ldr	r0, [pc, #184]	; (d4988 <loop+0x380>)
   d48ce:	492f      	ldr	r1, [pc, #188]	; (d498c <loop+0x384>)
   d48d0:	f7ff fc2c 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode2.connected() == false){
   d48d4:	482e      	ldr	r0, [pc, #184]	; (d4990 <loop+0x388>)
   d48d6:	f001 fac5 	bl	d5e64 <_ZNK8particle13BlePeerDevice9connectedEv>
   d48da:	2800      	cmp	r0, #0
   d48dc:	d14c      	bne.n	d4978 <loop+0x370>
                    sensorNode2 = BLE.connect(scanResults[i].address);
   d48de:	f001 fb21 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d48e2:	2301      	movs	r3, #1
   d48e4:	4622      	mov	r2, r4
   d48e6:	4601      	mov	r1, r0
   d48e8:	a809      	add	r0, sp, #36	; 0x24
   d48ea:	f002 f82f 	bl	d694c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d48ee:	a909      	add	r1, sp, #36	; 0x24
   d48f0:	4827      	ldr	r0, [pc, #156]	; (d4990 <loop+0x388>)
   d48f2:	f001 fca6 	bl	d6242 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d48f6:	a809      	add	r0, sp, #36	; 0x24
   d48f8:	f001 fbc6 	bl	d6088 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode2.connected()){
   d48fc:	4824      	ldr	r0, [pc, #144]	; (d4990 <loop+0x388>)
   d48fe:	f001 fab1 	bl	d5e64 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4902:	2800      	cmp	r0, #0
   d4904:	d09a      	beq.n	d483c <loop+0x234>
                        Log.info("Successfully connected to sensor node 2!");
   d4906:	4923      	ldr	r1, [pc, #140]	; (d4994 <loop+0x38c>)
   d4908:	481f      	ldr	r0, [pc, #124]	; (d4988 <loop+0x380>)
   d490a:	f7ff fc0f 	bl	d412c <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(temperatureSensorCharacteristic2, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d490e:	4922      	ldr	r1, [pc, #136]	; (d4998 <loop+0x390>)
   d4910:	a809      	add	r0, sp, #36	; 0x24
   d4912:	f000 ffed 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d4916:	aa09      	add	r2, sp, #36	; 0x24
   d4918:	4920      	ldr	r1, [pc, #128]	; (d499c <loop+0x394>)
   d491a:	481d      	ldr	r0, [pc, #116]	; (d4990 <loop+0x388>)
   d491c:	f001 fc6d 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(lightSensorCharacteristic2, "ea5248a4-43cc-4198-a4aa-79200a750835");
   d4920:	491f      	ldr	r1, [pc, #124]	; (d49a0 <loop+0x398>)
   d4922:	a809      	add	r0, sp, #36	; 0x24
   d4924:	f000 ffe4 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d4928:	aa09      	add	r2, sp, #36	; 0x24
   d492a:	491e      	ldr	r1, [pc, #120]	; (d49a4 <loop+0x39c>)
   d492c:	4818      	ldr	r0, [pc, #96]	; (d4990 <loop+0x388>)
   d492e:	f001 fc64 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(soundSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
   d4932:	491d      	ldr	r1, [pc, #116]	; (d49a8 <loop+0x3a0>)
   d4934:	a809      	add	r0, sp, #36	; 0x24
   d4936:	f000 ffdb 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d493a:	aa09      	add	r2, sp, #36	; 0x24
   d493c:	491b      	ldr	r1, [pc, #108]	; (d49ac <loop+0x3a4>)
   d493e:	4814      	ldr	r0, [pc, #80]	; (d4990 <loop+0x388>)
   d4940:	f001 fc5b 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
   d4944:	491a      	ldr	r1, [pc, #104]	; (d49b0 <loop+0x3a8>)
   d4946:	a809      	add	r0, sp, #36	; 0x24
   d4948:	f000 ffd2 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d494c:	aa09      	add	r2, sp, #36	; 0x24
   d494e:	4919      	ldr	r1, [pc, #100]	; (d49b4 <loop+0x3ac>)
   d4950:	480f      	ldr	r0, [pc, #60]	; (d4990 <loop+0x388>)
   d4952:	f001 fc52 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(currentSensorCharacteristic2, "2822a610-32d6-45e1-b9fb-247138fc8df7");
   d4956:	4918      	ldr	r1, [pc, #96]	; (d49b8 <loop+0x3b0>)
   d4958:	a809      	add	r0, sp, #36	; 0x24
   d495a:	f000 ffc9 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d495e:	aa09      	add	r2, sp, #36	; 0x24
   d4960:	4916      	ldr	r1, [pc, #88]	; (d49bc <loop+0x3b4>)
   d4962:	480b      	ldr	r0, [pc, #44]	; (d4990 <loop+0x388>)
   d4964:	f001 fc49 	bl	d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(ledVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d4968:	4915      	ldr	r1, [pc, #84]	; (d49c0 <loop+0x3b8>)
   d496a:	a809      	add	r0, sp, #36	; 0x24
   d496c:	f000 ffc0 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
   d4970:	aa09      	add	r2, sp, #36	; 0x24
   d4972:	4914      	ldr	r1, [pc, #80]	; (d49c4 <loop+0x3bc>)
   d4974:	4806      	ldr	r0, [pc, #24]	; (d4990 <loop+0x388>)
   d4976:	e750      	b.n	d481a <loop+0x212>
                    else{
                        Log.info("Failed to connect to sensor node 2.");
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d4978:	4913      	ldr	r1, [pc, #76]	; (d49c8 <loop+0x3c0>)
   d497a:	e760      	b.n	d483e <loop+0x236>

        if (count > 0) {
            Log.info("%d devices found", count);
        }
    }
}
   d497c:	b00e      	add	sp, #56	; 0x38
   d497e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4982:	bf00      	nop
   d4984:	2003d8f4 	.word	0x2003d8f4
   d4988:	2003e40c 	.word	0x2003e40c
   d498c:	000d9545 	.word	0x000d9545
   d4990:	2003e3a0 	.word	0x2003e3a0
   d4994:	000d941d 	.word	0x000d941d
   d4998:	000d931f 	.word	0x000d931f
   d499c:	2003d8ec 	.word	0x2003d8ec
   d49a0:	000d9446 	.word	0x000d9446
   d49a4:	2003d8d4 	.word	0x2003d8d4
   d49a8:	000d946b 	.word	0x000d946b
   d49ac:	2003e3b0 	.word	0x2003e3b0
   d49b0:	000d9490 	.word	0x000d9490
   d49b4:	2003d93c 	.word	0x2003d93c
   d49b8:	000d938e 	.word	0x000d938e
   d49bc:	2003e348 	.word	0x2003e348
   d49c0:	000d94b5 	.word	0x000d94b5
   d49c4:	2003d910 	.word	0x2003d910
   d49c8:	000d94fe 	.word	0x000d94fe

000d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d49cc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d49ce:	6804      	ldr	r4, [r0, #0]
   d49d0:	6843      	ldr	r3, [r0, #4]
   d49d2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d49d4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d49d6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d49da:	42a6      	cmp	r6, r4
   d49dc:	d004      	beq.n	d49e8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d49de:	4620      	mov	r0, r4
   d49e0:	f000 fc94 	bl	d530c <_ZN6StringD1Ev>
   d49e4:	3414      	adds	r4, #20
   d49e6:	e7f8      	b.n	d49da <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d49e8:	6828      	ldr	r0, [r5, #0]
   d49ea:	f000 fc0f 	bl	d520c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d49ee:	4628      	mov	r0, r5
   d49f0:	bd70      	pop	{r4, r5, r6, pc}

000d49f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d49f2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d49f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d49f6:	4606      	mov	r6, r0
   d49f8:	460c      	mov	r4, r1
   d49fa:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d49fc:	d916      	bls.n	d4a2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d49fe:	4290      	cmp	r0, r2
   d4a00:	d215      	bcs.n	d4a2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4a02:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4a06:	1a6c      	subs	r4, r5, r1
   d4a08:	f1a1 0714 	sub.w	r7, r1, #20
   d4a0c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4a0e:	42af      	cmp	r7, r5
   d4a10:	d01c      	beq.n	d4a4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4a12:	b12c      	cbz	r4, d4a20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4a14:	4629      	mov	r1, r5
   d4a16:	4620      	mov	r0, r4
   d4a18:	f000 fc68 	bl	d52ec <_ZN6StringC1EOS_>
   d4a1c:	7c2b      	ldrb	r3, [r5, #16]
   d4a1e:	7423      	strb	r3, [r4, #16]
   d4a20:	4628      	mov	r0, r5
   d4a22:	f000 fc73 	bl	d530c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4a26:	3d14      	subs	r5, #20
   d4a28:	3c14      	subs	r4, #20
   d4a2a:	e7f0      	b.n	d4a0e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4a2c:	d00e      	beq.n	d4a4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4a2e:	42ac      	cmp	r4, r5
   d4a30:	d00c      	beq.n	d4a4c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4a32:	b12e      	cbz	r6, d4a40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4a34:	4621      	mov	r1, r4
   d4a36:	4630      	mov	r0, r6
   d4a38:	f000 fc58 	bl	d52ec <_ZN6StringC1EOS_>
   d4a3c:	7c23      	ldrb	r3, [r4, #16]
   d4a3e:	7433      	strb	r3, [r6, #16]
   d4a40:	4620      	mov	r0, r4
   d4a42:	f000 fc63 	bl	d530c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4a46:	3414      	adds	r4, #20
   d4a48:	3614      	adds	r6, #20
   d4a4a:	e7f0      	b.n	d4a2e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4a52:	2300      	movs	r3, #0
   d4a54:	6003      	str	r3, [r0, #0]
   d4a56:	6043      	str	r3, [r0, #4]
   d4a58:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4a5a:	684e      	ldr	r6, [r1, #4]
   d4a5c:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4a5e:	4604      	mov	r4, r0
   d4a60:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4a62:	dd24      	ble.n	d4aae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4a64:	f04f 0814 	mov.w	r8, #20
   d4a68:	fb08 f006 	mul.w	r0, r8, r6
   d4a6c:	f000 fbc6 	bl	d51fc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4a70:	4605      	mov	r5, r0
   d4a72:	b1e0      	cbz	r0, d4aae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4a74:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4a78:	fb08 1202 	mla	r2, r8, r2, r1
   d4a7c:	f7ff ffb9 	bl	d49f2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4a80:	6820      	ldr	r0, [r4, #0]
   d4a82:	f000 fbc3 	bl	d520c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4a86:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4a88:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4a8a:	683e      	ldr	r6, [r7, #0]
   d4a8c:	687b      	ldr	r3, [r7, #4]
   d4a8e:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4a92:	4546      	cmp	r6, r8
   d4a94:	d009      	beq.n	d4aaa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4a96:	b12d      	cbz	r5, d4aa4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4a98:	4631      	mov	r1, r6
   d4a9a:	4628      	mov	r0, r5
   d4a9c:	f000 fc9f 	bl	d53de <_ZN6StringC1ERKS_>
   d4aa0:	7c33      	ldrb	r3, [r6, #16]
   d4aa2:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4aa4:	3614      	adds	r6, #20
   d4aa6:	3514      	adds	r5, #20
   d4aa8:	e7f3      	b.n	d4a92 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4aaa:	687b      	ldr	r3, [r7, #4]
   d4aac:	6063      	str	r3, [r4, #4]
    }
}
   d4aae:	4620      	mov	r0, r4
   d4ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ab4 <_GLOBAL__sub_I_SystemMode>:
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d4ab4:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ab6:	4d6a      	ldr	r5, [pc, #424]	; (d4c60 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d4ab8:	b08c      	sub	sp, #48	; 0x30

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4aba:	f000 f919 	bl	d4cf0 <HAL_Pin_Map>
   d4abe:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4ac4:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4ac6:	602c      	str	r4, [r5, #0]
   d4ac8:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4aca:	71ac      	strb	r4, [r5, #6]
   d4acc:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ace:	2001      	movs	r0, #1
   d4ad0:	f000 faf8 	bl	d50c4 <set_system_mode>
 * Date: 07/05/2020
 */

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(AUTOMATIC);
   d4ad4:	4a63      	ldr	r2, [pc, #396]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4ad6:	4964      	ldr	r1, [pc, #400]	; (d4c68 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4ad8:	4628      	mov	r0, r5
   d4ada:	f003 ff3c 	bl	d8956 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4ade:	9400      	str	r4, [sp, #0]
   d4ae0:	9401      	str	r4, [sp, #4]
   d4ae2:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4ae4:	f003 fb24 	bl	d8130 <_Z16_fetch_usbserialv>
   d4ae8:	4669      	mov	r1, sp
   d4aea:	4606      	mov	r6, r0
   d4aec:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4aee:	4d5f      	ldr	r5, [pc, #380]	; (d4c6c <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4af0:	f7ff ffad 	bl	d4a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4af4:	a903      	add	r1, sp, #12
   d4af6:	a806      	add	r0, sp, #24
   d4af8:	f7ff ffa9 	bl	d4a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4afc:	4b5c      	ldr	r3, [pc, #368]	; (d4c70 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4afe:	602b      	str	r3, [r5, #0]
   d4b00:	a906      	add	r1, sp, #24
   d4b02:	a809      	add	r0, sp, #36	; 0x24
   d4b04:	f7ff ffa3 	bl	d4a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4b08:	aa09      	add	r2, sp, #36	; 0x24
   d4b0a:	2101      	movs	r1, #1
   d4b0c:	1d28      	adds	r0, r5, #4
   d4b0e:	f002 fe02 	bl	d7716 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4b12:	a809      	add	r0, sp, #36	; 0x24
   d4b14:	f7ff ff5a 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4b18:	a806      	add	r0, sp, #24
   d4b1a:	f7ff ff57 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4b1e:	4b55      	ldr	r3, [pc, #340]	; (d4c74 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4b20:	602b      	str	r3, [r5, #0]
   d4b22:	622e      	str	r6, [r5, #32]
   d4b24:	a803      	add	r0, sp, #12
   d4b26:	f7ff ff51 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4b2a:	4b53      	ldr	r3, [pc, #332]	; (d4c78 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4b2c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4b2e:	f003 faff 	bl	d8130 <_Z16_fetch_usbserialv>
   d4b32:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4b36:	f003 faeb 	bl	d8110 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4b3a:	f002 fa95 	bl	d7068 <_ZN5spark10LogManager8instanceEv>
   d4b3e:	4629      	mov	r1, r5
   d4b40:	f002 fd7c 	bl	d763c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4b44:	4668      	mov	r0, sp
   d4b46:	f7ff ff41 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4b4a:	4a46      	ldr	r2, [pc, #280]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4b4c:	494b      	ldr	r1, [pc, #300]	; (d4c7c <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4b4e:	4628      	mov	r0, r5
   d4b50:	f003 ff01 	bl	d8956 <__aeabi_atexit>



/* Bluetooth variables */
//bluetooth devices we want to connect to and their service ids
BlePeerDevice sensorNode1;
   d4b54:	484a      	ldr	r0, [pc, #296]	; (d4c80 <_GLOBAL__sub_I_SystemMode+0x1cc>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4b56:	4d4b      	ldr	r5, [pc, #300]	; (d4c84 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4b58:	f001 faf0 	bl	d613c <_ZN8particle13BlePeerDeviceC1Ev>
   d4b5c:	4a41      	ldr	r2, [pc, #260]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4b5e:	494a      	ldr	r1, [pc, #296]	; (d4c88 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4b60:	4847      	ldr	r0, [pc, #284]	; (d4c80 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4b62:	f003 fef8 	bl	d8956 <__aeabi_atexit>
BlePeerDevice sensorNode2;
   d4b66:	4849      	ldr	r0, [pc, #292]	; (d4c8c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4b68:	f001 fae8 	bl	d613c <_ZN8particle13BlePeerDeviceC1Ev>
   d4b6c:	4a3d      	ldr	r2, [pc, #244]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4b6e:	4946      	ldr	r1, [pc, #280]	; (d4c88 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4b70:	4846      	ldr	r0, [pc, #280]	; (d4c8c <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4b72:	f003 fef0 	bl	d8956 <__aeabi_atexit>
BleUuid sensorNode1ServiceUuid("754ebf5e-ce31-4300-9fd5-a8fb4ee4a811");
   d4b76:	4946      	ldr	r1, [pc, #280]	; (d4c90 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4b78:	4846      	ldr	r0, [pc, #280]	; (d4c94 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4b7a:	f000 feb9 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>
BleUuid sensorNode2ServiceUuid("97728ad9-a998-4629-b855-ee2658ca01f7");
   d4b7e:	4946      	ldr	r1, [pc, #280]	; (d4c98 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4b80:	4846      	ldr	r0, [pc, #280]	; (d4c9c <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4b82:	f000 feb5 	bl	d58f0 <_ZN8particle7BleUuidC1EPKc>

//characteristics we want to track
//for sensor node 1
BleCharacteristic temperatureSensorCharacteristic1;
   d4b86:	4846      	ldr	r0, [pc, #280]	; (d4ca0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4b88:	f001 ff44 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4b8c:	4a35      	ldr	r2, [pc, #212]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4b8e:	4945      	ldr	r1, [pc, #276]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4b90:	4843      	ldr	r0, [pc, #268]	; (d4ca0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4b92:	f003 fee0 	bl	d8956 <__aeabi_atexit>
BleCharacteristic humiditySensorCharacteristic;
   d4b96:	4844      	ldr	r0, [pc, #272]	; (d4ca8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4b98:	f001 ff3c 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4b9c:	4a31      	ldr	r2, [pc, #196]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4b9e:	4941      	ldr	r1, [pc, #260]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4ba0:	4841      	ldr	r0, [pc, #260]	; (d4ca8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4ba2:	f003 fed8 	bl	d8956 <__aeabi_atexit>
BleCharacteristic distanceSensorCharacteristic;
   d4ba6:	4841      	ldr	r0, [pc, #260]	; (d4cac <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4ba8:	f001 ff34 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4bac:	4a2d      	ldr	r2, [pc, #180]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4bae:	493d      	ldr	r1, [pc, #244]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4bb0:	483e      	ldr	r0, [pc, #248]	; (d4cac <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4bb2:	f003 fed0 	bl	d8956 <__aeabi_atexit>
BleCharacteristic currentSensorCharacteristic1;
   d4bb6:	483e      	ldr	r0, [pc, #248]	; (d4cb0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4bb8:	f001 ff2c 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4bbc:	4a29      	ldr	r2, [pc, #164]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4bbe:	4939      	ldr	r1, [pc, #228]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4bc0:	483b      	ldr	r0, [pc, #236]	; (d4cb0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4bc2:	f003 fec8 	bl	d8956 <__aeabi_atexit>
BleCharacteristic fanSpeedCharacteristic;
   d4bc6:	483b      	ldr	r0, [pc, #236]	; (d4cb4 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4bc8:	f001 ff24 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4bcc:	4a25      	ldr	r2, [pc, #148]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4bce:	4935      	ldr	r1, [pc, #212]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4bd0:	4838      	ldr	r0, [pc, #224]	; (d4cb4 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4bd2:	f003 fec0 	bl	d8956 <__aeabi_atexit>

//for sensor node 2
BleCharacteristic temperatureSensorCharacteristic2;
   d4bd6:	4838      	ldr	r0, [pc, #224]	; (d4cb8 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4bd8:	f001 ff1c 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4bdc:	4a21      	ldr	r2, [pc, #132]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4bde:	4931      	ldr	r1, [pc, #196]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4be0:	4835      	ldr	r0, [pc, #212]	; (d4cb8 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4be2:	f003 feb8 	bl	d8956 <__aeabi_atexit>
BleCharacteristic lightSensorCharacteristic2;
   d4be6:	4835      	ldr	r0, [pc, #212]	; (d4cbc <_GLOBAL__sub_I_SystemMode+0x208>)
   d4be8:	f001 ff14 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4bec:	4a1d      	ldr	r2, [pc, #116]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4bee:	492d      	ldr	r1, [pc, #180]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4bf0:	4832      	ldr	r0, [pc, #200]	; (d4cbc <_GLOBAL__sub_I_SystemMode+0x208>)
   d4bf2:	f003 feb0 	bl	d8956 <__aeabi_atexit>
BleCharacteristic soundSensorCharacteristic;
   d4bf6:	4832      	ldr	r0, [pc, #200]	; (d4cc0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4bf8:	f001 ff0c 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4bfc:	4a19      	ldr	r2, [pc, #100]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4bfe:	4929      	ldr	r1, [pc, #164]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4c00:	482f      	ldr	r0, [pc, #188]	; (d4cc0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4c02:	f003 fea8 	bl	d8956 <__aeabi_atexit>
BleCharacteristic humanDetectorCharacteristic;
   d4c06:	482f      	ldr	r0, [pc, #188]	; (d4cc4 <_GLOBAL__sub_I_SystemMode+0x210>)
   d4c08:	f001 ff04 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4c0c:	4a15      	ldr	r2, [pc, #84]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4c0e:	4925      	ldr	r1, [pc, #148]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4c10:	482c      	ldr	r0, [pc, #176]	; (d4cc4 <_GLOBAL__sub_I_SystemMode+0x210>)
   d4c12:	f003 fea0 	bl	d8956 <__aeabi_atexit>
BleCharacteristic currentSensorCharacteristic2;
   d4c16:	482c      	ldr	r0, [pc, #176]	; (d4cc8 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4c18:	f001 fefc 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4c1c:	4a11      	ldr	r2, [pc, #68]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4c1e:	4921      	ldr	r1, [pc, #132]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4c20:	4829      	ldr	r0, [pc, #164]	; (d4cc8 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4c22:	f003 fe98 	bl	d8956 <__aeabi_atexit>
BleCharacteristic ledVoltageCharacteristic;
   d4c26:	4829      	ldr	r0, [pc, #164]	; (d4ccc <_GLOBAL__sub_I_SystemMode+0x218>)
   d4c28:	f001 fef4 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
   d4c2c:	4a0d      	ldr	r2, [pc, #52]	; (d4c64 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4c2e:	491d      	ldr	r1, [pc, #116]	; (d4ca4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4c30:	4826      	ldr	r0, [pc, #152]	; (d4ccc <_GLOBAL__sub_I_SystemMode+0x218>)
   d4c32:	f003 fe90 	bl	d8956 <__aeabi_atexit>

// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d4c36:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d4c3a:	1928      	adds	r0, r5, r4
   d4c3c:	f000 fcc2 	bl	d55c4 <_ZN8particle10BleAddressC1Ev>
   d4c40:	f104 0008 	add.w	r0, r4, #8
   d4c44:	4428      	add	r0, r5
   d4c46:	f000 ff4c 	bl	d5ae2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4c4a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4c4e:	4428      	add	r0, r5
   d4c50:	3454      	adds	r4, #84	; 0x54
   d4c52:	f000 ff46 	bl	d5ae2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4c56:	42b4      	cmp	r4, r6
   d4c58:	d1ef      	bne.n	d4c3a <_GLOBAL__sub_I_SystemMode+0x186>
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d4c5a:	b00c      	add	sp, #48	; 0x30
   d4c5c:	bd70      	pop	{r4, r5, r6, pc}
   d4c5e:	bf00      	nop
   d4c60:	2003d918 	.word	0x2003d918
   d4c64:	2003d8d0 	.word	0x2003d8d0
   d4c68:	000d40d3 	.word	0x000d40d3
   d4c6c:	2003e350 	.word	0x2003e350
   d4c70:	000d8f14 	.word	0x000d8f14
   d4c74:	000d98f0 	.word	0x000d98f0
   d4c78:	000d8f2c 	.word	0x000d8f2c
   d4c7c:	000d40e5 	.word	0x000d40e5
   d4c80:	2003d948 	.word	0x2003d948
   d4c84:	2003d958 	.word	0x2003d958
   d4c88:	000d6089 	.word	0x000d6089
   d4c8c:	2003e3a0 	.word	0x2003e3a0
   d4c90:	000d955a 	.word	0x000d955a
   d4c94:	2003d924 	.word	0x2003d924
   d4c98:	000d957f 	.word	0x000d957f
   d4c9c:	2003d8f4 	.word	0x2003d8f4
   d4ca0:	2003d8e4 	.word	0x2003d8e4
   d4ca4:	000d607b 	.word	0x000d607b
   d4ca8:	2003e330 	.word	0x2003e330
   d4cac:	2003d908 	.word	0x2003d908
   d4cb0:	2003e340 	.word	0x2003e340
   d4cb4:	2003d8dc 	.word	0x2003d8dc
   d4cb8:	2003d8ec 	.word	0x2003d8ec
   d4cbc:	2003d8d4 	.word	0x2003d8d4
   d4cc0:	2003e3b0 	.word	0x2003e3b0
   d4cc4:	2003d93c 	.word	0x2003d93c
   d4cc8:	2003e348 	.word	0x2003e348
   d4ccc:	2003d910 	.word	0x2003d910

000d4cd0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <netdb_freeaddrinfo+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	689b      	ldr	r3, [r3, #8]
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030268 	.word	0x00030268

000d4ce0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b02      	ldr	r3, [pc, #8]	; (d4cec <netdb_getaddrinfo+0xc>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	68db      	ldr	r3, [r3, #12]
   d4ce8:	9301      	str	r3, [sp, #4]
   d4cea:	bd08      	pop	{r3, pc}
   d4cec:	00030268 	.word	0x00030268

000d4cf0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b02      	ldr	r3, [pc, #8]	; (d4cfc <HAL_Pin_Map+0xc>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	681b      	ldr	r3, [r3, #0]
   d4cf8:	9301      	str	r3, [sp, #4]
   d4cfa:	bd08      	pop	{r3, pc}
   d4cfc:	0003022c 	.word	0x0003022c

000d4d00 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4d00:	b508      	push	{r3, lr}
   d4d02:	4b02      	ldr	r3, [pc, #8]	; (d4d0c <HAL_RNG_GetRandomNumber+0xc>)
   d4d04:	681b      	ldr	r3, [r3, #0]
   d4d06:	685b      	ldr	r3, [r3, #4]
   d4d08:	9301      	str	r3, [sp, #4]
   d4d0a:	bd08      	pop	{r3, pc}
   d4d0c:	00030218 	.word	0x00030218

000d4d10 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4d10:	b508      	push	{r3, lr}
   d4d12:	4b02      	ldr	r3, [pc, #8]	; (d4d1c <HAL_Delay_Microseconds+0xc>)
   d4d14:	681b      	ldr	r3, [r3, #0]
   d4d16:	68db      	ldr	r3, [r3, #12]
   d4d18:	9301      	str	r3, [sp, #4]
   d4d1a:	bd08      	pop	{r3, pc}
   d4d1c:	00030218 	.word	0x00030218

000d4d20 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4d20:	b508      	push	{r3, lr}
   d4d22:	4b02      	ldr	r3, [pc, #8]	; (d4d2c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4d24:	681b      	ldr	r3, [r3, #0]
   d4d26:	695b      	ldr	r3, [r3, #20]
   d4d28:	9301      	str	r3, [sp, #4]
   d4d2a:	bd08      	pop	{r3, pc}
   d4d2c:	00030218 	.word	0x00030218

000d4d30 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4d30:	b508      	push	{r3, lr}
   d4d32:	4b02      	ldr	r3, [pc, #8]	; (d4d3c <HAL_RTC_Get_UnixTime+0xc>)
   d4d34:	681b      	ldr	r3, [r3, #0]
   d4d36:	69db      	ldr	r3, [r3, #28]
   d4d38:	9301      	str	r3, [sp, #4]
   d4d3a:	bd08      	pop	{r3, pc}
   d4d3c:	00030218 	.word	0x00030218

000d4d40 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4d40:	b508      	push	{r3, lr}
   d4d42:	4b02      	ldr	r3, [pc, #8]	; (d4d4c <HAL_RTC_Time_Is_Valid+0xc>)
   d4d44:	681b      	ldr	r3, [r3, #0]
   d4d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4d48:	9301      	str	r3, [sp, #4]
   d4d4a:	bd08      	pop	{r3, pc}
   d4d4c:	00030218 	.word	0x00030218

000d4d50 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4d50:	b508      	push	{r3, lr}
   d4d52:	4b02      	ldr	r3, [pc, #8]	; (d4d5c <hal_ble_stack_init+0xc>)
   d4d54:	681b      	ldr	r3, [r3, #0]
   d4d56:	689b      	ldr	r3, [r3, #8]
   d4d58:	9301      	str	r3, [sp, #4]
   d4d5a:	bd08      	pop	{r3, pc}
   d4d5c:	00030278 	.word	0x00030278

000d4d60 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4d60:	b508      	push	{r3, lr}
   d4d62:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <hal_ble_gap_start_scan+0xc>)
   d4d64:	681b      	ldr	r3, [r3, #0]
   d4d66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4d68:	9301      	str	r3, [sp, #4]
   d4d6a:	bd08      	pop	{r3, pc}
   d4d6c:	00030278 	.word	0x00030278

000d4d70 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4d70:	b508      	push	{r3, lr}
   d4d72:	4b03      	ldr	r3, [pc, #12]	; (d4d80 <hal_ble_gap_stop_scan+0x10>)
   d4d74:	681b      	ldr	r3, [r3, #0]
   d4d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d4d7a:	9301      	str	r3, [sp, #4]
   d4d7c:	bd08      	pop	{r3, pc}
   d4d7e:	0000      	.short	0x0000
   d4d80:	00030278 	.word	0x00030278

000d4d84 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b03      	ldr	r3, [pc, #12]	; (d4d94 <hal_ble_gap_disconnect+0x10>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4d8e:	9301      	str	r3, [sp, #4]
   d4d90:	bd08      	pop	{r3, pc}
   d4d92:	0000      	.short	0x0000
   d4d94:	00030278 	.word	0x00030278

000d4d98 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b03      	ldr	r3, [pc, #12]	; (d4da8 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4da2:	9301      	str	r3, [sp, #4]
   d4da4:	bd08      	pop	{r3, pc}
   d4da6:	0000      	.short	0x0000
   d4da8:	00030278 	.word	0x00030278

000d4dac <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b03      	ldr	r3, [pc, #12]	; (d4dbc <hal_ble_gatt_client_discover_all_services+0x10>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d4db6:	9301      	str	r3, [sp, #4]
   d4db8:	bd08      	pop	{r3, pc}
   d4dba:	0000      	.short	0x0000
   d4dbc:	00030278 	.word	0x00030278

000d4dc0 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d4dc0:	b508      	push	{r3, lr}
   d4dc2:	4b03      	ldr	r3, [pc, #12]	; (d4dd0 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d4dc4:	681b      	ldr	r3, [r3, #0]
   d4dc6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d4dca:	9301      	str	r3, [sp, #4]
   d4dcc:	bd08      	pop	{r3, pc}
   d4dce:	0000      	.short	0x0000
   d4dd0:	00030278 	.word	0x00030278

000d4dd4 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b03      	ldr	r3, [pc, #12]	; (d4de4 <hal_ble_gatt_client_write_with_response+0x10>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4dde:	9301      	str	r3, [sp, #4]
   d4de0:	bd08      	pop	{r3, pc}
   d4de2:	0000      	.short	0x0000
   d4de4:	00030278 	.word	0x00030278

000d4de8 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b03      	ldr	r3, [pc, #12]	; (d4df8 <hal_ble_gatt_client_write_without_response+0x10>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4df2:	9301      	str	r3, [sp, #4]
   d4df4:	bd08      	pop	{r3, pc}
   d4df6:	0000      	.short	0x0000
   d4df8:	00030278 	.word	0x00030278

000d4dfc <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b03      	ldr	r3, [pc, #12]	; (d4e0c <hal_ble_gatt_client_read+0x10>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d4e06:	9301      	str	r3, [sp, #4]
   d4e08:	bd08      	pop	{r3, pc}
   d4e0a:	0000      	.short	0x0000
   d4e0c:	00030278 	.word	0x00030278

000d4e10 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d4e10:	b508      	push	{r3, lr}
   d4e12:	4b03      	ldr	r3, [pc, #12]	; (d4e20 <hal_ble_gap_connect+0x10>)
   d4e14:	681b      	ldr	r3, [r3, #0]
   d4e16:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d4e1a:	9301      	str	r3, [sp, #4]
   d4e1c:	bd08      	pop	{r3, pc}
   d4e1e:	0000      	.short	0x0000
   d4e20:	00030278 	.word	0x00030278

000d4e24 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b03      	ldr	r3, [pc, #12]	; (d4e34 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4e2e:	9301      	str	r3, [sp, #4]
   d4e30:	bd08      	pop	{r3, pc}
   d4e32:	0000      	.short	0x0000
   d4e34:	00030278 	.word	0x00030278

000d4e38 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b03      	ldr	r3, [pc, #12]	; (d4e48 <hal_ble_gatt_client_configure_cccd+0x10>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d4e42:	9301      	str	r3, [sp, #4]
   d4e44:	bd08      	pop	{r3, pc}
   d4e46:	0000      	.short	0x0000
   d4e48:	00030278 	.word	0x00030278

000d4e4c <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b03      	ldr	r3, [pc, #12]	; (d4e5c <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d4e56:	9301      	str	r3, [sp, #4]
   d4e58:	bd08      	pop	{r3, pc}
   d4e5a:	0000      	.short	0x0000
   d4e5c:	00030278 	.word	0x00030278

000d4e60 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4e60:	b508      	push	{r3, lr}
   d4e62:	4b03      	ldr	r3, [pc, #12]	; (d4e70 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4e64:	681b      	ldr	r3, [r3, #0]
   d4e66:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4e6a:	9301      	str	r3, [sp, #4]
   d4e6c:	bd08      	pop	{r3, pc}
   d4e6e:	0000      	.short	0x0000
   d4e70:	00030278 	.word	0x00030278

000d4e74 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <os_thread_is_current+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	689b      	ldr	r3, [r3, #8]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	00030248 	.word	0x00030248

000d4e84 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <os_thread_join+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	691b      	ldr	r3, [r3, #16]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	00030248 	.word	0x00030248

000d4e94 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <os_thread_cleanup+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	695b      	ldr	r3, [r3, #20]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	00030248 	.word	0x00030248

000d4ea4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <os_mutex_recursive_create+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030248 	.word	0x00030248

000d4eb4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <os_mutex_recursive_destroy+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030248 	.word	0x00030248

000d4ec4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <os_mutex_recursive_lock+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030248 	.word	0x00030248

000d4ed4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <os_mutex_recursive_unlock+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030248 	.word	0x00030248

000d4ee4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <inet_inet_ntop+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	695b      	ldr	r3, [r3, #20]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030264 	.word	0x00030264

000d4ef4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_USART_Init+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	681b      	ldr	r3, [r3, #0]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	0003023c 	.word	0x0003023c

000d4f04 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_USART_End+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	689b      	ldr	r3, [r3, #8]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003023c 	.word	0x0003023c

000d4f14 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_USART_Write_Data+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	68db      	ldr	r3, [r3, #12]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003023c 	.word	0x0003023c

000d4f24 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_USART_Available_Data+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	691b      	ldr	r3, [r3, #16]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003023c 	.word	0x0003023c

000d4f34 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_USART_Read_Data+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	695b      	ldr	r3, [r3, #20]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003023c 	.word	0x0003023c

000d4f44 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_USART_Peek_Data+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	699b      	ldr	r3, [r3, #24]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	0003023c 	.word	0x0003023c

000d4f54 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_USART_Flush_Data+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	69db      	ldr	r3, [r3, #28]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	0003023c 	.word	0x0003023c

000d4f64 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_USART_Available_Data_For_Write+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	0003023c 	.word	0x0003023c

000d4f74 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <HAL_USART_BeginConfig+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	0003023c 	.word	0x0003023c

000d4f84 <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <dct_write_app_data+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	685b      	ldr	r3, [r3, #4]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030258 	.word	0x00030258

000d4f94 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <HAL_USB_USART_Init+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	681b      	ldr	r3, [r3, #0]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	0003024c 	.word	0x0003024c

000d4fa4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_USB_USART_Begin+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	685b      	ldr	r3, [r3, #4]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	0003024c 	.word	0x0003024c

000d4fb4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_USB_USART_End+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	689b      	ldr	r3, [r3, #8]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	0003024c 	.word	0x0003024c

000d4fc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_USB_USART_Available_Data+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	691b      	ldr	r3, [r3, #16]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003024c 	.word	0x0003024c

000d4fd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	695b      	ldr	r3, [r3, #20]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003024c 	.word	0x0003024c

000d4fe4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_USB_USART_Receive_Data+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	699b      	ldr	r3, [r3, #24]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003024c 	.word	0x0003024c

000d4ff4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_USB_USART_Send_Data+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	69db      	ldr	r3, [r3, #28]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003024c 	.word	0x0003024c

000d5004 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_USB_USART_Flush_Data+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	6a1b      	ldr	r3, [r3, #32]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	0003024c 	.word	0x0003024c

000d5014 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <LED_SetSignalingColor+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	685b      	ldr	r3, [r3, #4]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030260 	.word	0x00030260

000d5024 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <LED_Signaling_Start+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	689b      	ldr	r3, [r3, #8]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030260 	.word	0x00030260

000d5034 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <LED_Signaling_Stop+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	68db      	ldr	r3, [r3, #12]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030260 	.word	0x00030260

000d5044 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <LED_RGB_IsOverRidden+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	699b      	ldr	r3, [r3, #24]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030260 	.word	0x00030260

000d5054 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <LED_On+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	69db      	ldr	r3, [r3, #28]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030260 	.word	0x00030260

000d5064 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <panic_+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030260 	.word	0x00030260

000d5074 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <log_message+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030260 	.word	0x00030260

000d5084 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <log_message_v+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030260 	.word	0x00030260

000d5094 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <log_level_name+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	00030260 	.word	0x00030260

000d50a4 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <log_set_callbacks+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	00030260 	.word	0x00030260

000d50b4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <system_mode+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	681b      	ldr	r3, [r3, #0]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	00030220 	.word	0x00030220

000d50c4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <set_system_mode+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	685b      	ldr	r3, [r3, #4]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	00030220 	.word	0x00030220

000d50d4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <system_delay_ms+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	695b      	ldr	r3, [r3, #20]
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030220 	.word	0x00030220

000d50e4 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <system_thread_get_state+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030220 	.word	0x00030220

000d50f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b03      	ldr	r3, [pc, #12]	; (d5104 <system_ctrl_set_app_request_handler+0x10>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d50fe:	9301      	str	r3, [sp, #4]
   d5100:	bd08      	pop	{r3, pc}
   d5102:	0000      	.short	0x0000
   d5104:	00030220 	.word	0x00030220

000d5108 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b03      	ldr	r3, [pc, #12]	; (d5118 <system_ctrl_set_result+0x10>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5112:	9301      	str	r3, [sp, #4]
   d5114:	bd08      	pop	{r3, pc}
   d5116:	0000      	.short	0x0000
   d5118:	00030220 	.word	0x00030220

000d511c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <network_connect+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	685b      	ldr	r3, [r3, #4]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030240 	.word	0x00030240

000d512c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <network_connecting+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	689b      	ldr	r3, [r3, #8]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030240 	.word	0x00030240

000d513c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <network_disconnect+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	68db      	ldr	r3, [r3, #12]
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030240 	.word	0x00030240

000d514c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <network_ready+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	691b      	ldr	r3, [r3, #16]
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030240 	.word	0x00030240

000d515c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <network_on+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	695b      	ldr	r3, [r3, #20]
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030240 	.word	0x00030240

000d516c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <network_off+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	699b      	ldr	r3, [r3, #24]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030240 	.word	0x00030240

000d517c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <network_listen+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	69db      	ldr	r3, [r3, #28]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030240 	.word	0x00030240

000d518c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <network_listening+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6a1b      	ldr	r3, [r3, #32]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030240 	.word	0x00030240

000d519c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <network_set_listen_timeout+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030240 	.word	0x00030240

000d51ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <network_get_listen_timeout+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030240 	.word	0x00030240

000d51bc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <spark_process+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	689b      	ldr	r3, [r3, #8]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030244 	.word	0x00030244

000d51cc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <spark_cloud_flag_connected+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	695b      	ldr	r3, [r3, #20]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030244 	.word	0x00030244

000d51dc <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <spark_sync_time_pending+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030244 	.word	0x00030244

000d51ec <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	00030244 	.word	0x00030244

000d51fc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <malloc+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	681b      	ldr	r3, [r3, #0]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003021c 	.word	0x0003021c

000d520c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <free+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	685b      	ldr	r3, [r3, #4]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003021c 	.word	0x0003021c

000d521c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <realloc+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	689b      	ldr	r3, [r3, #8]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003021c 	.word	0x0003021c

000d522c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <vsnprintf+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	0003021c 	.word	0x0003021c

000d523c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d523c:	2200      	movs	r2, #0
   d523e:	4611      	mov	r1, r2
   d5240:	6840      	ldr	r0, [r0, #4]
   d5242:	f7ff bfa3 	b.w	d518c <network_listening>

000d5246 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5246:	2200      	movs	r2, #0
   d5248:	4611      	mov	r1, r2
   d524a:	6840      	ldr	r0, [r0, #4]
   d524c:	f7ff bfae 	b.w	d51ac <network_get_listen_timeout>

000d5250 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5250:	2200      	movs	r2, #0
   d5252:	6840      	ldr	r0, [r0, #4]
   d5254:	f7ff bfa2 	b.w	d519c <network_set_listen_timeout>

000d5258 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5258:	2200      	movs	r2, #0
   d525a:	f081 0101 	eor.w	r1, r1, #1
   d525e:	6840      	ldr	r0, [r0, #4]
   d5260:	f7ff bf8c 	b.w	d517c <network_listen>

000d5264 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5264:	2300      	movs	r3, #0
   d5266:	461a      	mov	r2, r3
   d5268:	4619      	mov	r1, r3
   d526a:	6840      	ldr	r0, [r0, #4]
   d526c:	f7ff bf7e 	b.w	d516c <network_off>

000d5270 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5270:	2300      	movs	r3, #0
   d5272:	461a      	mov	r2, r3
   d5274:	4619      	mov	r1, r3
   d5276:	6840      	ldr	r0, [r0, #4]
   d5278:	f7ff bf70 	b.w	d515c <network_on>

000d527c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d527c:	2200      	movs	r2, #0
   d527e:	4611      	mov	r1, r2
   d5280:	6840      	ldr	r0, [r0, #4]
   d5282:	f7ff bf63 	b.w	d514c <network_ready>

000d5286 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5286:	2200      	movs	r2, #0
   d5288:	4611      	mov	r1, r2
   d528a:	6840      	ldr	r0, [r0, #4]
   d528c:	f7ff bf4e 	b.w	d512c <network_connecting>

000d5290 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5290:	2200      	movs	r2, #0
   d5292:	2102      	movs	r1, #2
   d5294:	6840      	ldr	r0, [r0, #4]
   d5296:	f7ff bf51 	b.w	d513c <network_disconnect>

000d529a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d529a:	2300      	movs	r3, #0
   d529c:	461a      	mov	r2, r3
   d529e:	6840      	ldr	r0, [r0, #4]
   d52a0:	f7ff bf3c 	b.w	d511c <network_connect>

000d52a4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d52a4:	4b02      	ldr	r3, [pc, #8]	; (d52b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d52a6:	2203      	movs	r2, #3
   d52a8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d52aa:	4a02      	ldr	r2, [pc, #8]	; (d52b4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d52ac:	601a      	str	r2, [r3, #0]
   d52ae:	4770      	bx	lr
   d52b0:	2003e3b8 	.word	0x2003e3b8
   d52b4:	000d95ac 	.word	0x000d95ac

000d52b8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d52b8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d52ba:	4c09      	ldr	r4, [pc, #36]	; (d52e0 <_GLOBAL__sub_I_System+0x28>)
   d52bc:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d52be:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d52c2:	6020      	str	r0, [r4, #0]
   d52c4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d52c6:	71a0      	strb	r0, [r4, #6]
   d52c8:	8120      	strh	r0, [r4, #8]
   d52ca:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d52cc:	f7ff fefa 	bl	d50c4 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d52d0:	4620      	mov	r0, r4
   d52d2:	4a04      	ldr	r2, [pc, #16]	; (d52e4 <_GLOBAL__sub_I_System+0x2c>)
   d52d4:	4904      	ldr	r1, [pc, #16]	; (d52e8 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d52d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d52da:	f003 bb3c 	b.w	d8956 <__aeabi_atexit>
   d52de:	bf00      	nop
   d52e0:	2003e3c0 	.word	0x2003e3c0
   d52e4:	2003d8d0 	.word	0x2003d8d0
   d52e8:	000d40d3 	.word	0x000d40d3

000d52ec <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d52ec:	2300      	movs	r3, #0
   d52ee:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d52f0:	6043      	str	r3, [r0, #4]
	len = 0;
   d52f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d52f4:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d52f6:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d52f8:	680c      	ldr	r4, [r1, #0]
   d52fa:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d52fc:	684c      	ldr	r4, [r1, #4]
   d52fe:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d5300:	688c      	ldr	r4, [r1, #8]
   d5302:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d5304:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d5306:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5308:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d530a:	bd10      	pop	{r4, pc}

000d530c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d530c:	b510      	push	{r4, lr}
   d530e:	4604      	mov	r4, r0
{
	free(buffer);
   d5310:	6800      	ldr	r0, [r0, #0]
   d5312:	f7ff ff7b 	bl	d520c <free>
}
   d5316:	4620      	mov	r0, r4
   d5318:	bd10      	pop	{r4, pc}

000d531a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d531a:	b510      	push	{r4, lr}
   d531c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d531e:	6800      	ldr	r0, [r0, #0]
   d5320:	b108      	cbz	r0, d5326 <_ZN6String10invalidateEv+0xc>
   d5322:	f7ff ff73 	bl	d520c <free>
	buffer = NULL;
   d5326:	2300      	movs	r3, #0
   d5328:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d532a:	60a3      	str	r3, [r4, #8]
   d532c:	6063      	str	r3, [r4, #4]
   d532e:	bd10      	pop	{r4, pc}

000d5330 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5330:	b538      	push	{r3, r4, r5, lr}
   d5332:	4604      	mov	r4, r0
   d5334:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5336:	6800      	ldr	r0, [r0, #0]
   d5338:	3101      	adds	r1, #1
   d533a:	f7ff ff6f 	bl	d521c <realloc>
	if (newbuffer) {
   d533e:	b110      	cbz	r0, d5346 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5340:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5344:	2001      	movs	r0, #1
	}
	return 0;
}
   d5346:	bd38      	pop	{r3, r4, r5, pc}

000d5348 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5348:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d534a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d534c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d534e:	b113      	cbz	r3, d5356 <_ZN6String7reserveEj+0xe>
   d5350:	6843      	ldr	r3, [r0, #4]
   d5352:	428b      	cmp	r3, r1
   d5354:	d207      	bcs.n	d5366 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5356:	4620      	mov	r0, r4
   d5358:	f7ff ffea 	bl	d5330 <_ZN6String12changeBufferEj>
   d535c:	b120      	cbz	r0, d5368 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d535e:	68a3      	ldr	r3, [r4, #8]
   d5360:	b90b      	cbnz	r3, d5366 <_ZN6String7reserveEj+0x1e>
   d5362:	6822      	ldr	r2, [r4, #0]
   d5364:	7013      	strb	r3, [r2, #0]
   d5366:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5368:	bd10      	pop	{r4, pc}

000d536a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d536a:	b570      	push	{r4, r5, r6, lr}
   d536c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d536e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5370:	4604      	mov	r4, r0
   d5372:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5374:	f7ff ffe8 	bl	d5348 <_ZN6String7reserveEj>
   d5378:	b918      	cbnz	r0, d5382 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d537a:	4620      	mov	r0, r4
   d537c:	f7ff ffcd 	bl	d531a <_ZN6String10invalidateEv>
		return *this;
   d5380:	e009      	b.n	d5396 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5382:	462a      	mov	r2, r5
   d5384:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5386:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5388:	6820      	ldr	r0, [r4, #0]
   d538a:	f003 fc68 	bl	d8c5e <memcpy>
	buffer[len] = 0;
   d538e:	6822      	ldr	r2, [r4, #0]
   d5390:	68a3      	ldr	r3, [r4, #8]
   d5392:	2100      	movs	r1, #0
   d5394:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5396:	4620      	mov	r0, r4
   d5398:	bd70      	pop	{r4, r5, r6, pc}

000d539a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d539a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d539c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d539e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d53a0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d53a2:	6043      	str	r3, [r0, #4]
	len = 0;
   d53a4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d53a6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d53a8:	460d      	mov	r5, r1
   d53aa:	b139      	cbz	r1, d53bc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d53ac:	4608      	mov	r0, r1
   d53ae:	f003 fcd7 	bl	d8d60 <strlen>
   d53b2:	4629      	mov	r1, r5
   d53b4:	4602      	mov	r2, r0
   d53b6:	4620      	mov	r0, r4
   d53b8:	f7ff ffd7 	bl	d536a <_ZN6String4copyEPKcj>
}
   d53bc:	4620      	mov	r0, r4
   d53be:	bd38      	pop	{r3, r4, r5, pc}

000d53c0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d53c0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d53c2:	b510      	push	{r4, lr}
   d53c4:	460b      	mov	r3, r1
   d53c6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d53c8:	d007      	beq.n	d53da <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d53ca:	6809      	ldr	r1, [r1, #0]
   d53cc:	b119      	cbz	r1, d53d6 <_ZN6StringaSERKS_+0x16>
   d53ce:	689a      	ldr	r2, [r3, #8]
   d53d0:	f7ff ffcb 	bl	d536a <_ZN6String4copyEPKcj>
   d53d4:	e001      	b.n	d53da <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d53d6:	f7ff ffa0 	bl	d531a <_ZN6String10invalidateEv>

	return *this;
}
   d53da:	4620      	mov	r0, r4
   d53dc:	bd10      	pop	{r4, pc}

000d53de <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d53de:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d53e0:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d53e2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d53e4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d53e6:	6043      	str	r3, [r0, #4]
	len = 0;
   d53e8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d53ea:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d53ec:	f7ff ffe8 	bl	d53c0 <_ZN6StringaSERKS_>
}
   d53f0:	4620      	mov	r0, r4
   d53f2:	bd10      	pop	{r4, pc}

000d53f4 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d53f4:	b538      	push	{r3, r4, r5, lr}
   d53f6:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d53f8:	460c      	mov	r4, r1
   d53fa:	b141      	cbz	r1, d540e <_ZN6StringaSEPKc+0x1a>
   d53fc:	4608      	mov	r0, r1
   d53fe:	f003 fcaf 	bl	d8d60 <strlen>
   d5402:	4621      	mov	r1, r4
   d5404:	4602      	mov	r2, r0
   d5406:	4628      	mov	r0, r5
   d5408:	f7ff ffaf 	bl	d536a <_ZN6String4copyEPKcj>
   d540c:	e001      	b.n	d5412 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d540e:	f7ff ff84 	bl	d531a <_ZN6String10invalidateEv>

	return *this;
}
   d5412:	4628      	mov	r0, r5
   d5414:	bd38      	pop	{r3, r4, r5, pc}

000d5416 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5416:	b570      	push	{r4, r5, r6, lr}
   d5418:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d541a:	460e      	mov	r6, r1
   d541c:	b909      	cbnz	r1, d5422 <_ZN6String6concatEPKcj+0xc>
   d541e:	2000      	movs	r0, #0
   d5420:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5422:	b16a      	cbz	r2, d5440 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5424:	6883      	ldr	r3, [r0, #8]
   d5426:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5428:	4629      	mov	r1, r5
   d542a:	f7ff ff8d 	bl	d5348 <_ZN6String7reserveEj>
   d542e:	2800      	cmp	r0, #0
   d5430:	d0f5      	beq.n	d541e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5432:	6820      	ldr	r0, [r4, #0]
   d5434:	68a3      	ldr	r3, [r4, #8]
   d5436:	4631      	mov	r1, r6
   d5438:	4418      	add	r0, r3
   d543a:	f003 fc89 	bl	d8d50 <strcpy>
	len = newlen;
   d543e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5440:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5442:	bd70      	pop	{r4, r5, r6, pc}

000d5444 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5444:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5446:	688a      	ldr	r2, [r1, #8]
   d5448:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d544a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d544c:	f7ff ffe3 	bl	d5416 <_ZN6String6concatEPKcj>
   d5450:	b910      	cbnz	r0, d5458 <_ZplRK15StringSumHelperRK6String+0x14>
   d5452:	4620      	mov	r0, r4
   d5454:	f7ff ff61 	bl	d531a <_ZN6String10invalidateEv>
	return a;
}
   d5458:	4620      	mov	r0, r4
   d545a:	bd10      	pop	{r4, pc}

000d545c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d545c:	4770      	bx	lr

000d545e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d545e:	2000      	movs	r0, #0
   d5460:	4770      	bx	lr

000d5462 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5462:	4770      	bx	lr

000d5464 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5464:	2000      	movs	r0, #0
   d5466:	4770      	bx	lr

000d5468 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5468:	4770      	bx	lr

000d546a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d546a:	2000      	movs	r0, #0
   d546c:	4770      	bx	lr

000d546e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d546e:	b510      	push	{r4, lr}
   d5470:	2114      	movs	r1, #20
   d5472:	4604      	mov	r4, r0
   d5474:	f003 fa7c 	bl	d8970 <_ZdlPvj>
   d5478:	4620      	mov	r0, r4
   d547a:	bd10      	pop	{r4, pc}

000d547c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d547c:	b510      	push	{r4, lr}
   d547e:	2114      	movs	r1, #20
   d5480:	4604      	mov	r4, r0
   d5482:	f003 fa75 	bl	d8970 <_ZdlPvj>
   d5486:	4620      	mov	r0, r4
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d548a:	b510      	push	{r4, lr}
   d548c:	2114      	movs	r1, #20
   d548e:	4604      	mov	r4, r0
   d5490:	f003 fa6e 	bl	d8970 <_ZdlPvj>
   d5494:	4620      	mov	r0, r4
   d5496:	bd10      	pop	{r4, pc}

000d5498 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5498:	f7fe bdff 	b.w	d409a <_ZdlPv>

000d549c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d549c:	f7fe bdfd 	b.w	d409a <_ZdlPv>

000d54a0 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d54a0:	f7fe bdfb 	b.w	d409a <_ZdlPv>

000d54a4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d54a4:	b510      	push	{r4, lr}
   d54a6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d54a8:	6800      	ldr	r0, [r0, #0]
   d54aa:	b108      	cbz	r0, d54b0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d54ac:	f7ff fd02 	bl	d4eb4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d54b0:	4620      	mov	r0, r4
   d54b2:	bd10      	pop	{r4, pc}

000d54b4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d54b4:	b530      	push	{r4, r5, lr}
   d54b6:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d54b8:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d54ba:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d54bc:	2400      	movs	r4, #0
   d54be:	9302      	str	r3, [sp, #8]
   d54c0:	4b08      	ldr	r3, [pc, #32]	; (d54e4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d54c2:	9300      	str	r3, [sp, #0]
   d54c4:	aa02      	add	r2, sp, #8
   d54c6:	4623      	mov	r3, r4
   d54c8:	4907      	ldr	r1, [pc, #28]	; (d54e8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d54ca:	9403      	str	r4, [sp, #12]
   d54cc:	2001      	movs	r0, #1
   d54ce:	f7ff fdd1 	bl	d5074 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d54d2:	6828      	ldr	r0, [r5, #0]
   d54d4:	4905      	ldr	r1, [pc, #20]	; (d54ec <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d54d6:	8800      	ldrh	r0, [r0, #0]
   d54d8:	4623      	mov	r3, r4
   d54da:	462a      	mov	r2, r5
   d54dc:	f7ff fc66 	bl	d4dac <hal_ble_gatt_client_discover_all_services>
    }
   d54e0:	b00b      	add	sp, #44	; 0x2c
   d54e2:	bd30      	pop	{r4, r5, pc}
   d54e4:	000d9637 	.word	0x000d9637
   d54e8:	000d962c 	.word	0x000d962c
   d54ec:	000d6c21 	.word	0x000d6c21

000d54f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d54f0:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d54f2:	200a      	movs	r0, #10
   d54f4:	4a02      	ldr	r2, [pc, #8]	; (d5500 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d54f6:	2100      	movs	r1, #0
   d54f8:	f7ff fdb4 	bl	d5064 <panic_>
    }
}
   d54fc:	bd08      	pop	{r3, pc}
   d54fe:	bf00      	nop
   d5500:	000d4d11 	.word	0x000d4d11

000d5504 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5504:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5506:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5508:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d550a:	689b      	ldr	r3, [r3, #8]
   d550c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d550e:	68a3      	ldr	r3, [r4, #8]
   d5510:	3b01      	subs	r3, #1
   d5512:	60a3      	str	r3, [r4, #8]
   d5514:	b92b      	cbnz	r3, d5522 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5516:	6823      	ldr	r3, [r4, #0]
   d5518:	4620      	mov	r0, r4
   d551a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d551c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5520:	4718      	bx	r3
   d5522:	bd10      	pop	{r4, pc}

000d5524 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d5524:	b570      	push	{r4, r5, r6, lr}
   d5526:	1c93      	adds	r3, r2, #2
   d5528:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d552a:	4288      	cmp	r0, r1
   d552c:	d018      	beq.n	d5560 <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d552e:	7804      	ldrb	r4, [r0, #0]
   d5530:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d5532:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d5536:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5538:	bf88      	it	hi
   d553a:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d553e:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d5540:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d5544:	7834      	ldrb	r4, [r6, #0]
   d5546:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d554a:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d554e:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5550:	bf88      	it	hi
   d5552:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d5556:	f803 5c01 	strb.w	r5, [r3, #-1]
   d555a:	3001      	adds	r0, #1
   d555c:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d555e:	e7e4      	b.n	d552a <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d5560:	4610      	mov	r0, r2
   d5562:	bd70      	pop	{r4, r5, r6, pc}

000d5564 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5564:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5568:	b2da      	uxtb	r2, r3
   d556a:	2a09      	cmp	r2, #9
   d556c:	d801      	bhi.n	d5572 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d556e:	4618      	mov	r0, r3
   d5570:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5572:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5576:	2b05      	cmp	r3, #5
   d5578:	d801      	bhi.n	d557e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d557a:	3857      	subs	r0, #87	; 0x57
   d557c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d557e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5582:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5584:	bf94      	ite	ls
   d5586:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5588:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d558c:	4770      	bx	lr
	...

000d5590 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5590:	b510      	push	{r4, lr}
            locked_(false) {
   d5592:	2300      	movs	r3, #0
   d5594:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5596:	4b04      	ldr	r3, [pc, #16]	; (d55a8 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5598:	4604      	mov	r4, r0
   d559a:	6818      	ldr	r0, [r3, #0]
   d559c:	f7ff fc92 	bl	d4ec4 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d55a0:	2301      	movs	r3, #1
   d55a2:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}
   d55a8:	2003e3d4 	.word	0x2003e3d4

000d55ac <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d55ac:	b510      	push	{r4, lr}
        if (locked_) {
   d55ae:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d55b0:	4604      	mov	r4, r0
        if (locked_) {
   d55b2:	b11b      	cbz	r3, d55bc <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d55b4:	4b02      	ldr	r3, [pc, #8]	; (d55c0 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d55b6:	6818      	ldr	r0, [r3, #0]
   d55b8:	f7ff fc8c 	bl	d4ed4 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d55bc:	4620      	mov	r0, r4
   d55be:	bd10      	pop	{r4, pc}
   d55c0:	2003e3d4 	.word	0x2003e3d4

000d55c4 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d55c4:	2200      	movs	r2, #0
   d55c6:	6002      	str	r2, [r0, #0]
   d55c8:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d55ca:	4770      	bx	lr

000d55cc <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d55cc:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d55ce:	7982      	ldrb	r2, [r0, #6]
   d55d0:	798b      	ldrb	r3, [r1, #6]
   d55d2:	429a      	cmp	r2, r3
   d55d4:	d106      	bne.n	d55e4 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d55d6:	2206      	movs	r2, #6
   d55d8:	f003 fb32 	bl	d8c40 <memcmp>
   d55dc:	fab0 f080 	clz	r0, r0
   d55e0:	0940      	lsrs	r0, r0, #5
   d55e2:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d55e4:	2000      	movs	r0, #0
}
   d55e6:	bd08      	pop	{r3, pc}

000d55e8 <_ZNK8particle10BleAddress11toBigEndianEPh>:

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d55e8:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d55ea:	2305      	movs	r3, #5
        buf[i] = address_.addr[j];
   d55ec:	5cc2      	ldrb	r2, [r0, r3]
   d55ee:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    return false;
}

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d55f2:	3b01      	subs	r3, #1
   d55f4:	b2db      	uxtb	r3, r3
   d55f6:	2bff      	cmp	r3, #255	; 0xff
   d55f8:	d1f8      	bne.n	d55ec <_ZNK8particle10BleAddress11toBigEndianEPh+0x4>
        buf[i] = address_.addr[j];
    }
}
   d55fa:	4770      	bx	lr

000d55fc <_ZNK8particle10BleAddress8toStringEPcjb>:
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d55fc:	b570      	push	{r4, r5, r6, lr}
   d55fe:	4614      	mov	r4, r2
   d5600:	b088      	sub	sp, #32
   d5602:	461d      	mov	r5, r3
    if (!buf || len == 0) {
   d5604:	460e      	mov	r6, r1
   d5606:	2900      	cmp	r1, #0
   d5608:	d046      	beq.n	d5698 <_ZNK8particle10BleAddress8toStringEPcjb+0x9c>
   d560a:	2a00      	cmp	r2, #0
   d560c:	d046      	beq.n	d569c <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
   d560e:	a901      	add	r1, sp, #4
   d5610:	f7ff ffea 	bl	d55e8 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d5614:	aa03      	add	r2, sp, #12
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
    if (stripped) {
   d5616:	b115      	cbz	r5, d561e <_ZNK8particle10BleAddress8toStringEPcjb+0x22>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d5618:	2106      	movs	r1, #6
   d561a:	a801      	add	r0, sp, #4
   d561c:	e02d      	b.n	d567a <_ZNK8particle10BleAddress8toStringEPcjb+0x7e>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d561e:	2101      	movs	r1, #1
   d5620:	a801      	add	r0, sp, #4
   d5622:	f7ff ff7f 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2] = ':';
   d5626:	253a      	movs	r5, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d5628:	f10d 020f 	add.w	r2, sp, #15
   d562c:	2101      	movs	r1, #1
   d562e:	f10d 0005 	add.w	r0, sp, #5
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
   d5632:	f88d 500e 	strb.w	r5, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d5636:	f7ff ff75 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d563a:	f10d 0212 	add.w	r2, sp, #18
   d563e:	2101      	movs	r1, #1
   d5640:	f10d 0006 	add.w	r0, sp, #6
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
   d5644:	f88d 5011 	strb.w	r5, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d5648:	f7ff ff6c 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d564c:	f10d 0215 	add.w	r2, sp, #21
   d5650:	2101      	movs	r1, #1
   d5652:	f10d 0007 	add.w	r0, sp, #7
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
   d5656:	f88d 5014 	strb.w	r5, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d565a:	f7ff ff63 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 3] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d565e:	aa06      	add	r2, sp, #24
   d5660:	2101      	movs	r1, #1
   d5662:	a802      	add	r0, sp, #8
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
        idx++;
        cStr[idx * 2 + 3] = ':';
   d5664:	f88d 5017 	strb.w	r5, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d5668:	f7ff ff5c 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 4] = ':';
   d566c:	f88d 501a 	strb.w	r5, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d5670:	f10d 021b 	add.w	r2, sp, #27
   d5674:	2101      	movs	r1, #1
   d5676:	f10d 0009 	add.w	r0, sp, #9
   d567a:	3c01      	subs	r4, #1
   d567c:	f7ff ff52 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
   d5680:	2c11      	cmp	r4, #17
   d5682:	bf28      	it	cs
   d5684:	2411      	movcs	r4, #17
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d5686:	4622      	mov	r2, r4
   d5688:	a903      	add	r1, sp, #12
   d568a:	4630      	mov	r0, r6
   d568c:	f003 fae7 	bl	d8c5e <memcpy>
    buf[len++] = '\0';
   d5690:	2300      	movs	r3, #0
   d5692:	5533      	strb	r3, [r6, r4]
   d5694:	1c60      	adds	r0, r4, #1
   d5696:	e002      	b.n	d569e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d5698:	4608      	mov	r0, r1
   d569a:	e000      	b.n	d569e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
   d569c:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d569e:	b008      	add	sp, #32
   d56a0:	bd70      	pop	{r4, r5, r6, pc}

000d56a2 <_ZNK8particle10BleAddress8toStringEb>:

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d56a2:	b510      	push	{r4, lr}
   d56a4:	b086      	sub	sp, #24
   d56a6:	4604      	mov	r4, r0
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d56a8:	4613      	mov	r3, r2

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d56aa:	4608      	mov	r0, r1
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d56ac:	2212      	movs	r2, #18
   d56ae:	a901      	add	r1, sp, #4
   d56b0:	f7ff ffa4 	bl	d55fc <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d56b4:	a901      	add	r1, sp, #4
   d56b6:	4620      	mov	r0, r4
   d56b8:	f7ff fe6f 	bl	d539a <_ZN6StringC1EPK19__FlashStringHelper>
}
   d56bc:	4620      	mov	r0, r4
   d56be:	b006      	add	sp, #24
   d56c0:	bd10      	pop	{r4, pc}
	...

000d56c4 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d56c4:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d56c6:	2301      	movs	r3, #1
   d56c8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d56ca:	4b05      	ldr	r3, [pc, #20]	; (d56e0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d56cc:	4602      	mov	r2, r0
   d56ce:	f103 0110 	add.w	r1, r3, #16
   d56d2:	f853 4b04 	ldr.w	r4, [r3], #4
   d56d6:	f842 4b04 	str.w	r4, [r2], #4
   d56da:	428b      	cmp	r3, r1
   d56dc:	d1f9      	bne.n	d56d2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d56de:	bd10      	pop	{r4, pc}
   d56e0:	000d97cc 	.word	0x000d97cc

000d56e4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d56e4:	7c0b      	ldrb	r3, [r1, #16]
   d56e6:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d56ea:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d56ec:	d110      	bne.n	d5710 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d56ee:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d56f0:	4b0d      	ldr	r3, [pc, #52]	; (d5728 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d56f2:	4602      	mov	r2, r0
   d56f4:	f103 0410 	add.w	r4, r3, #16
   d56f8:	f853 5b04 	ldr.w	r5, [r3], #4
   d56fc:	f842 5b04 	str.w	r5, [r2], #4
   d5700:	42a3      	cmp	r3, r4
   d5702:	d1f9      	bne.n	d56f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d5704:	880b      	ldrh	r3, [r1, #0]
   d5706:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d5708:	880b      	ldrh	r3, [r1, #0]
   d570a:	121b      	asrs	r3, r3, #8
   d570c:	7343      	strb	r3, [r0, #13]
   d570e:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d5710:	2301      	movs	r3, #1
   d5712:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5714:	f101 0210 	add.w	r2, r1, #16
   d5718:	4603      	mov	r3, r0
   d571a:	f851 4b04 	ldr.w	r4, [r1], #4
   d571e:	f843 4b04 	str.w	r4, [r3], #4
   d5722:	4291      	cmp	r1, r2
   d5724:	d1f9      	bne.n	d571a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d5726:	bd30      	pop	{r4, r5, pc}
   d5728:	000d97cc 	.word	0x000d97cc

000d572c <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d572c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d572e:	690b      	ldr	r3, [r1, #16]
   d5730:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5732:	f101 0210 	add.w	r2, r1, #16
   d5736:	4603      	mov	r3, r0
   d5738:	f851 4b04 	ldr.w	r4, [r1], #4
   d573c:	f843 4b04 	str.w	r4, [r3], #4
   d5740:	4291      	cmp	r1, r2
   d5742:	d1f9      	bne.n	d5738 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5744:	bd10      	pop	{r4, pc}

000d5746 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5746:	b510      	push	{r4, lr}
    if (uuid128) {
   d5748:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d574a:	4604      	mov	r4, r0
    if (uuid128) {
   d574c:	b1b9      	cbz	r1, d577e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d574e:	2a01      	cmp	r2, #1
   d5750:	d109      	bne.n	d5766 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5752:	4603      	mov	r3, r0
   d5754:	f101 0210 	add.w	r2, r1, #16
   d5758:	f851 0b04 	ldr.w	r0, [r1], #4
   d575c:	f843 0b04 	str.w	r0, [r3], #4
   d5760:	4291      	cmp	r1, r2
   d5762:	d1f9      	bne.n	d5758 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d5764:	e008      	b.n	d5778 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d5766:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d5768:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d576a:	5c98      	ldrb	r0, [r3, r2]
   d576c:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5770:	3a01      	subs	r2, #1
   d5772:	b2d2      	uxtb	r2, r2
   d5774:	2aff      	cmp	r2, #255	; 0xff
   d5776:	d1f8      	bne.n	d576a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d5778:	2301      	movs	r3, #1
   d577a:	6123      	str	r3, [r4, #16]
   d577c:	e002      	b.n	d5784 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d577e:	2210      	movs	r2, #16
   d5780:	f003 fa93 	bl	d8caa <memset>
    }
}
   d5784:	4620      	mov	r0, r4
   d5786:	bd10      	pop	{r4, pc}

000d5788 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d5788:	b538      	push	{r3, r4, r5, lr}
   d578a:	4604      	mov	r4, r0
   d578c:	460d      	mov	r5, r1
        : BleUuid() {
   d578e:	f7ff ff99 	bl	d56c4 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d5792:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5794:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5796:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d5798:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d579a:	7365      	strb	r5, [r4, #13]
}
   d579c:	4620      	mov	r0, r4
   d579e:	bd38      	pop	{r3, r4, r5, pc}

000d57a0 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d57a0:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d57a2:	690b      	ldr	r3, [r1, #16]
   d57a4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d57a6:	f101 0210 	add.w	r2, r1, #16
   d57aa:	4603      	mov	r3, r0
   d57ac:	f851 4b04 	ldr.w	r4, [r1], #4
   d57b0:	f843 4b04 	str.w	r4, [r3], #4
   d57b4:	4291      	cmp	r1, r2
   d57b6:	d1f9      	bne.n	d57ac <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d57ba:	b510      	push	{r4, lr}
   d57bc:	b086      	sub	sp, #24
   d57be:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d57c0:	2201      	movs	r2, #1
   d57c2:	a801      	add	r0, sp, #4
   d57c4:	f7ff ffbf 	bl	d5746 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d57c8:	a901      	add	r1, sp, #4
   d57ca:	4620      	mov	r0, r4
   d57cc:	f7ff ffe8 	bl	d57a0 <_ZN8particle7BleUuidaSERKS0_>
}
   d57d0:	b006      	add	sp, #24
   d57d2:	bd10      	pop	{r4, pc}

000d57d4 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d57d4:	b510      	push	{r4, lr}
   d57d6:	b086      	sub	sp, #24
   d57d8:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d57da:	a801      	add	r0, sp, #4
   d57dc:	f7ff ffd4 	bl	d5788 <_ZN8particle7BleUuidC1Et>
   d57e0:	a901      	add	r1, sp, #4
   d57e2:	4620      	mov	r0, r4
   d57e4:	f7ff ffdc 	bl	d57a0 <_ZN8particle7BleUuidaSERKS0_>
}
   d57e8:	b006      	add	sp, #24
   d57ea:	bd10      	pop	{r4, pc}

000d57ec <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d57ec:	b510      	push	{r4, lr}
   d57ee:	b086      	sub	sp, #24
   d57f0:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d57f2:	a801      	add	r0, sp, #4
   d57f4:	f7ff ff76 	bl	d56e4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d57f8:	a901      	add	r1, sp, #4
   d57fa:	4620      	mov	r0, r4
   d57fc:	f7ff ffd0 	bl	d57a0 <_ZN8particle7BleUuidaSERKS0_>
}
   d5800:	b006      	add	sp, #24
   d5802:	bd10      	pop	{r4, pc}

000d5804 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5804:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5806:	6902      	ldr	r2, [r0, #16]
   d5808:	690b      	ldr	r3, [r1, #16]
   d580a:	429a      	cmp	r2, r3
   d580c:	d106      	bne.n	d581c <_ZNK8particle7BleUuideqERKS0_+0x18>
   d580e:	2210      	movs	r2, #16
   d5810:	f003 fa16 	bl	d8c40 <memcmp>
   d5814:	fab0 f080 	clz	r0, r0
   d5818:	0940      	lsrs	r0, r0, #5
   d581a:	bd08      	pop	{r3, pc}
   d581c:	2000      	movs	r0, #0
}
   d581e:	bd08      	pop	{r3, pc}

000d5820 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d5820:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d5824:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5826:	4b31      	ldr	r3, [pc, #196]	; (d58ec <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5828:	460e      	mov	r6, r1
   d582a:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d582c:	4602      	mov	r2, r0
   d582e:	f103 0110 	add.w	r1, r3, #16
   d5832:	f853 0b04 	ldr.w	r0, [r3], #4
   d5836:	f842 0b04 	str.w	r0, [r2], #4
   d583a:	428b      	cmp	r3, r1
   d583c:	d1f9      	bne.n	d5832 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d583e:	2e00      	cmp	r6, #0
   d5840:	d051      	beq.n	d58e6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5842:	2124      	movs	r1, #36	; 0x24
   d5844:	4630      	mov	r0, r6
   d5846:	f003 faa8 	bl	d8d9a <strnlen>
   d584a:	2804      	cmp	r0, #4
   d584c:	d010      	beq.n	d5870 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d584e:	2700      	movs	r7, #0
   d5850:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5852:	2124      	movs	r1, #36	; 0x24
   d5854:	4630      	mov	r0, r6
   d5856:	f003 faa0 	bl	d8d9a <strnlen>
   d585a:	42b8      	cmp	r0, r7
   d585c:	d901      	bls.n	d5862 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d585e:	bb44      	cbnz	r4, d58b2 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d5860:	e041      	b.n	d58e6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d5862:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d5864:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5866:	42a5      	cmp	r5, r4
   d5868:	d03d      	beq.n	d58e6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d586a:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d586e:	e7fa      	b.n	d5866 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5870:	7830      	ldrb	r0, [r6, #0]
   d5872:	f7ff fe77 	bl	d5564 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5876:	1e04      	subs	r4, r0, #0
   d5878:	db18      	blt.n	d58ac <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d587a:	7870      	ldrb	r0, [r6, #1]
   d587c:	f7ff fe72 	bl	d5564 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5880:	2800      	cmp	r0, #0
   d5882:	db13      	blt.n	d58ac <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5884:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5888:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d588c:	78b0      	ldrb	r0, [r6, #2]
   d588e:	f7ff fe69 	bl	d5564 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5892:	1e04      	subs	r4, r0, #0
   d5894:	db0a      	blt.n	d58ac <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5896:	78f0      	ldrb	r0, [r6, #3]
   d5898:	f7ff fe64 	bl	d5564 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d589c:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d589e:	bfa1      	itttt	ge
   d58a0:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d58a4:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d58a8:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d58aa:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d58ac:	2300      	movs	r3, #0
   d58ae:	612b      	str	r3, [r5, #16]
   d58b0:	e019      	b.n	d58e6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d58b2:	5df0      	ldrb	r0, [r6, r7]
   d58b4:	f7ff fe56 	bl	d5564 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d58b8:	0603      	lsls	r3, r0, #24
   d58ba:	d412      	bmi.n	d58e2 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d58bc:	3c01      	subs	r4, #1
   d58be:	0100      	lsls	r0, r0, #4
   d58c0:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d58c2:	2124      	movs	r1, #36	; 0x24
   d58c4:	4630      	mov	r0, r6
   d58c6:	f003 fa68 	bl	d8d9a <strnlen>
   d58ca:	3701      	adds	r7, #1
   d58cc:	4287      	cmp	r7, r0
   d58ce:	d208      	bcs.n	d58e2 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d58d0:	5df0      	ldrb	r0, [r6, r7]
   d58d2:	f7ff fe47 	bl	d5564 <_ZN8particle11hexToNibbleEc>
   d58d6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d58d8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d58da:	bfa2      	ittt	ge
   d58dc:	5d2b      	ldrbge	r3, [r5, r4]
   d58de:	4318      	orrge	r0, r3
   d58e0:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d58e2:	3701      	adds	r7, #1
   d58e4:	e7b5      	b.n	d5852 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d58e6:	b003      	add	sp, #12
   d58e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d58ea:	bf00      	nop
   d58ec:	000d97cc 	.word	0x000d97cc

000d58f0 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d58f0:	b538      	push	{r3, r4, r5, lr}
   d58f2:	4604      	mov	r4, r0
   d58f4:	460d      	mov	r5, r1
        : BleUuid() {
   d58f6:	f7ff fee5 	bl	d56c4 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d58fa:	4620      	mov	r0, r4
   d58fc:	4629      	mov	r1, r5
   d58fe:	f7ff ff8f 	bl	d5820 <_ZN8particle7BleUuid9constructEPKc>
}
   d5902:	4620      	mov	r0, r4
   d5904:	bd38      	pop	{r3, r4, r5, pc}

000d5906 <_ZNK8particle7BleUuid11toBigEndianEPh>:
        uuid128_[len - 1] = 0x00;
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d5906:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5908:	230f      	movs	r3, #15
        buf[i] = uuid128_[j];
   d590a:	5cc2      	ldrb	r2, [r0, r3]
   d590c:	f801 2f01 	strb.w	r2, [r1, #1]!
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5910:	3b01      	subs	r3, #1
   d5912:	b2db      	uxtb	r3, r3
   d5914:	2bff      	cmp	r3, #255	; 0xff
   d5916:	d1f8      	bne.n	d590a <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid128_[j];
    }
}
   d5918:	4770      	bx	lr

000d591a <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d591a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d591e:	4698      	mov	r8, r3
   d5920:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d5922:	460d      	mov	r5, r1
   d5924:	2900      	cmp	r1, #0
   d5926:	d057      	beq.n	d59d8 <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
   d5928:	2a00      	cmp	r2, #0
   d592a:	d057      	beq.n	d59dc <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d592c:	6906      	ldr	r6, [r0, #16]
   d592e:	1e54      	subs	r4, r2, #1
   d5930:	b9ae      	cbnz	r6, d595e <_ZNK8particle7BleUuid8toStringEPcjb+0x44>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5932:	7b02      	ldrb	r2, [r0, #12]
   d5934:	7b43      	ldrb	r3, [r0, #13]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d5936:	9605      	str	r6, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5938:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d593c:	2102      	movs	r1, #2
   d593e:	aa05      	add	r2, sp, #20
   d5940:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5942:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5946:	f7ff fded 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
   d594a:	2c04      	cmp	r4, #4
   d594c:	bf28      	it	cs
   d594e:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d5950:	4622      	mov	r2, r4
   d5952:	a905      	add	r1, sp, #20
   d5954:	4628      	mov	r0, r5
   d5956:	f003 f982 	bl	d8c5e <memcpy>
        buf[len++] = '\0';
   d595a:	552e      	strb	r6, [r5, r4]
   d595c:	e03a      	b.n	d59d4 <_ZNK8particle7BleUuid8toStringEPcjb+0xba>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d595e:	a901      	add	r1, sp, #4
   d5960:	f7ff ffd1 	bl	d5906 <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5964:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d5966:	f1b8 0f00 	cmp.w	r8, #0
   d596a:	d002      	beq.n	d5972 <_ZNK8particle7BleUuid8toStringEPcjb+0x58>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d596c:	2110      	movs	r1, #16
   d596e:	a801      	add	r0, sp, #4
   d5970:	e024      	b.n	d59bc <_ZNK8particle7BleUuid8toStringEPcjb+0xa2>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d5972:	2104      	movs	r1, #4
   d5974:	eb0d 0001 	add.w	r0, sp, r1
   d5978:	f7ff fdd4 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d597c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d597e:	f10d 021d 	add.w	r2, sp, #29
   d5982:	2102      	movs	r1, #2
   d5984:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d5986:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d598a:	f7ff fdcb 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d598e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d5992:	2102      	movs	r1, #2
   d5994:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d5998:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d599c:	f7ff fdc2 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d59a0:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d59a4:	2102      	movs	r1, #2
   d59a6:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d59a8:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d59ac:	f7ff fdba 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d59b0:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d59b4:	aa0b      	add	r2, sp, #44	; 0x2c
   d59b6:	2106      	movs	r1, #6
   d59b8:	f10d 000e 	add.w	r0, sp, #14
   d59bc:	f7ff fdb2 	bl	d5524 <_ZL12bytes2hexbufPKhjPc>
   d59c0:	2c24      	cmp	r4, #36	; 0x24
   d59c2:	bf28      	it	cs
   d59c4:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d59c6:	4622      	mov	r2, r4
   d59c8:	a905      	add	r1, sp, #20
   d59ca:	4628      	mov	r0, r5
   d59cc:	f003 f947 	bl	d8c5e <memcpy>
    buf[len++] = '\0';
   d59d0:	2300      	movs	r3, #0
   d59d2:	552b      	strb	r3, [r5, r4]
   d59d4:	1c60      	adds	r0, r4, #1
   d59d6:	e002      	b.n	d59de <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d59d8:	4608      	mov	r0, r1
   d59da:	e000      	b.n	d59de <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
   d59dc:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d59de:	b00e      	add	sp, #56	; 0x38
   d59e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d59e4 <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d59e4:	b510      	push	{r4, lr}
   d59e6:	b08a      	sub	sp, #40	; 0x28
   d59e8:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d59ea:	2300      	movs	r3, #0
   d59ec:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d59ee:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d59f0:	4669      	mov	r1, sp
   d59f2:	f7ff ff92 	bl	d591a <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d59f6:	4669      	mov	r1, sp
   d59f8:	4620      	mov	r0, r4
   d59fa:	f7ff fcce 	bl	d539a <_ZN6StringC1EPK19__FlashStringHelper>
}
   d59fe:	4620      	mov	r0, r4
   d5a00:	b00a      	add	sp, #40	; 0x28
   d5a02:	bd10      	pop	{r4, pc}

000d5a04 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d5a04:	b538      	push	{r3, r4, r5, lr}
   d5a06:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5a08:	b101      	cbz	r1, d5a0c <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d5a0a:	b912      	cbnz	r2, d5a12 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d5a0c:	2000      	movs	r0, #0
   d5a0e:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d5a10:	bd38      	pop	{r3, r4, r5, pc}
   d5a12:	2a1f      	cmp	r2, #31
   d5a14:	bf28      	it	cs
   d5a16:	221f      	movcs	r2, #31
   d5a18:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d5a1a:	f003 f920 	bl	d8c5e <memcpy>
    selfLen_ = len;
   d5a1e:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d5a20:	4620      	mov	r0, r4
}
   d5a22:	bd38      	pop	{r3, r4, r5, pc}

000d5a24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5a24:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5a26:	b18b      	cbz	r3, d5a4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5a28:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a2a:	1ce5      	adds	r5, r4, #3
   d5a2c:	428d      	cmp	r5, r1
   d5a2e:	d80f      	bhi.n	d5a50 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5a30:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5a32:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5a34:	5d87      	ldrb	r7, [r0, r6]
   d5a36:	4297      	cmp	r7, r2
   d5a38:	d105      	bne.n	d5a46 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5a3a:	442e      	add	r6, r5
   d5a3c:	42b1      	cmp	r1, r6
   d5a3e:	d307      	bcc.n	d5a50 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5a40:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5a42:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5a46:	3501      	adds	r5, #1
   d5a48:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5a4a:	e7ee      	b.n	d5a2a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5a4c:	4618      	mov	r0, r3
   d5a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a50:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5a54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5a54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5a58:	4604      	mov	r4, r0
   d5a5a:	460e      	mov	r6, r1
   d5a5c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5a5e:	4617      	mov	r7, r2
   d5a60:	2a00      	cmp	r2, #0
   d5a62:	d03a      	beq.n	d5ada <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5a64:	460a      	mov	r2, r1
   d5a66:	ab01      	add	r3, sp, #4
   d5a68:	6a01      	ldr	r1, [r0, #32]
   d5a6a:	f7ff ffdb 	bl	d5a24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5a6e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5a72:	6a22      	ldr	r2, [r4, #32]
   d5a74:	bb03      	cbnz	r3, d5ab8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5a76:	b1f8      	cbz	r0, d5ab8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5a78:	1c96      	adds	r6, r2, #2
   d5a7a:	442e      	add	r6, r5
   d5a7c:	1a36      	subs	r6, r6, r0
   d5a7e:	2e1f      	cmp	r6, #31
   d5a80:	d82b      	bhi.n	d5ada <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5a82:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5a86:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5a8a:	ebc8 0202 	rsb	r2, r8, r2
   d5a8e:	1a12      	subs	r2, r2, r0
   d5a90:	eb00 0108 	add.w	r1, r0, r8
   d5a94:	eb05 0009 	add.w	r0, r5, r9
   d5a98:	b292      	uxth	r2, r2
   d5a9a:	4421      	add	r1, r4
   d5a9c:	4420      	add	r0, r4
   d5a9e:	f003 f8e9 	bl	d8c74 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5aa2:	1c6b      	adds	r3, r5, #1
   d5aa4:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5aa8:	462a      	mov	r2, r5
   d5aaa:	4639      	mov	r1, r7
   d5aac:	eb04 0009 	add.w	r0, r4, r9
   d5ab0:	f003 f8d5 	bl	d8c5e <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5ab4:	6226      	str	r6, [r4, #32]
   d5ab6:	e010      	b.n	d5ada <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5ab8:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5aba:	182b      	adds	r3, r5, r0
   d5abc:	2b1f      	cmp	r3, #31
   d5abe:	d80c      	bhi.n	d5ada <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5ac0:	1c6b      	adds	r3, r5, #1
   d5ac2:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5ac4:	4422      	add	r2, r4
   d5ac6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5ac8:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5aca:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5acc:	4420      	add	r0, r4
   d5ace:	462a      	mov	r2, r5
   d5ad0:	f003 f8c5 	bl	d8c5e <memcpy>
        selfLen_ += len;
   d5ad4:	6a22      	ldr	r2, [r4, #32]
   d5ad6:	442a      	add	r2, r5
   d5ad8:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5ada:	6a20      	ldr	r0, [r4, #32]
}
   d5adc:	b003      	add	sp, #12
   d5ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5ae2 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5ae2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5ae4:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5ae6:	4603      	mov	r3, r0
   d5ae8:	f100 021f 	add.w	r2, r0, #31
   d5aec:	2000      	movs	r0, #0
   d5aee:	f803 0b01 	strb.w	r0, [r3], #1
   d5af2:	4293      	cmp	r3, r2
   d5af4:	f04f 0100 	mov.w	r1, #0
   d5af8:	d1f9      	bne.n	d5aee <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5afa:	aa04      	add	r2, sp, #16
   d5afc:	2306      	movs	r3, #6
   d5afe:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b02:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5b04:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5b06:	9100      	str	r1, [sp, #0]
   d5b08:	4620      	mov	r0, r4
   d5b0a:	4619      	mov	r1, r3
   d5b0c:	f7ff ffa2 	bl	d5a54 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5b10:	4620      	mov	r0, r4
   d5b12:	b004      	add	sp, #16
   d5b14:	bd10      	pop	{r4, pc}

000d5b16 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5b16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5b1a:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5b1c:	b085      	sub	sp, #20
   d5b1e:	4606      	mov	r6, r0
   d5b20:	4689      	mov	r9, r1
   d5b22:	4617      	mov	r7, r2
   d5b24:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d5b26:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d5b28:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5b2c:	6a31      	ldr	r1, [r6, #32]
   d5b2e:	428d      	cmp	r5, r1
   d5b30:	d22a      	bcs.n	d5b88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d5b32:	ab03      	add	r3, sp, #12
   d5b34:	464a      	mov	r2, r9
   d5b36:	1b49      	subs	r1, r1, r5
   d5b38:	1970      	adds	r0, r6, r5
   d5b3a:	f7ff ff73 	bl	d5a24 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d5b3e:	4683      	mov	fp, r0
   d5b40:	b310      	cbz	r0, d5b88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d5b42:	4554      	cmp	r4, sl
   d5b44:	d220      	bcs.n	d5b88 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d5b46:	2804      	cmp	r0, #4
   d5b48:	9903      	ldr	r1, [sp, #12]
   d5b4a:	d10c      	bne.n	d5b66 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d5b4c:	4429      	add	r1, r5
   d5b4e:	1872      	adds	r2, r6, r1
   d5b50:	1c63      	adds	r3, r4, #1
   d5b52:	78d1      	ldrb	r1, [r2, #3]
   d5b54:	7892      	ldrb	r2, [r2, #2]
   d5b56:	9301      	str	r3, [sp, #4]
   d5b58:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d5b5c:	fb08 7004 	mla	r0, r8, r4, r7
   d5b60:	f7ff fe38 	bl	d57d4 <_ZN8particle7BleUuidaSEt>
   d5b64:	e00a      	b.n	d5b7c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d5b66:	2812      	cmp	r0, #18
   d5b68:	d10a      	bne.n	d5b80 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d5b6a:	3102      	adds	r1, #2
   d5b6c:	4429      	add	r1, r5
   d5b6e:	1c63      	adds	r3, r4, #1
   d5b70:	4431      	add	r1, r6
   d5b72:	fb08 7004 	mla	r0, r8, r4, r7
   d5b76:	9301      	str	r3, [sp, #4]
   d5b78:	f7ff fe1f 	bl	d57ba <_ZN8particle7BleUuidaSEPKh>
   d5b7c:	9b01      	ldr	r3, [sp, #4]
   d5b7e:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5b80:	9b03      	ldr	r3, [sp, #12]
   d5b82:	445b      	add	r3, fp
   d5b84:	441d      	add	r5, r3
   d5b86:	e7d1      	b.n	d5b2c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d5b88:	4620      	mov	r0, r4
   d5b8a:	b005      	add	sp, #20
   d5b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b90 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5b94:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5b96:	460d      	mov	r5, r1
   d5b98:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5b9a:	460a      	mov	r2, r1
   d5b9c:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5b9e:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5ba0:	f7ff ffb9 	bl	d5b16 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5ba4:	f04f 0814 	mov.w	r8, #20
   d5ba8:	1a33      	subs	r3, r6, r0
   d5baa:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5bae:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5bb0:	2103      	movs	r1, #3
   d5bb2:	4638      	mov	r0, r7
   d5bb4:	f7ff ffaf 	bl	d5b16 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5bb8:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5bba:	1b33      	subs	r3, r6, r4
   d5bbc:	fb08 5204 	mla	r2, r8, r4, r5
   d5bc0:	2106      	movs	r1, #6
   d5bc2:	4638      	mov	r0, r7
   d5bc4:	f7ff ffa7 	bl	d5b16 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5bc8:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d5bca:	1b33      	subs	r3, r6, r4
   d5bcc:	fb08 5204 	mla	r2, r8, r4, r5
   d5bd0:	2107      	movs	r1, #7
   d5bd2:	4638      	mov	r0, r7
   d5bd4:	f7ff ff9f 	bl	d5b16 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d5bd8:	4420      	add	r0, r4
   d5bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5be0 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5be0:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5be2:	2500      	movs	r5, #0
   d5be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5be8:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5bea:	8043      	strh	r3, [r0, #2]
   d5bec:	220e      	movs	r2, #14
   d5bee:	4629      	mov	r1, r5
   d5bf0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5bf2:	7105      	strb	r5, [r0, #4]
   d5bf4:	3006      	adds	r0, #6
   d5bf6:	f003 f858 	bl	d8caa <memset>
   d5bfa:	f104 0014 	add.w	r0, r4, #20
   d5bfe:	f7ff fd61 	bl	d56c4 <_ZN8particle7BleUuidC1Ev>
   d5c02:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5c06:	f7ff fd5d 	bl	d56c4 <_ZN8particle7BleUuidC1Ev>
   d5c0a:	4904      	ldr	r1, [pc, #16]	; (d5c1c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5c0c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5c10:	f7ff fbc3 	bl	d539a <_ZN6StringC1EPK19__FlashStringHelper>
   d5c14:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5c16:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5c18:	4620      	mov	r0, r4
   d5c1a:	bd38      	pop	{r3, r4, r5, pc}
   d5c1c:	000d98b0 	.word	0x000d98b0

000d5c20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5c20:	b510      	push	{r4, lr}
   d5c22:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5c24:	69c2      	ldr	r2, [r0, #28]
   d5c26:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5c2a:	4293      	cmp	r3, r2
   d5c2c:	4618      	mov	r0, r3
   d5c2e:	d006      	beq.n	d5c3e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5c30:	6804      	ldr	r4, [r0, #0]
   d5c32:	8824      	ldrh	r4, [r4, #0]
   d5c34:	428c      	cmp	r4, r1
   d5c36:	f103 0308 	add.w	r3, r3, #8
   d5c3a:	d1f6      	bne.n	d5c2a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5c3c:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5c3e:	2000      	movs	r0, #0
    }
   d5c40:	bd10      	pop	{r4, pc}
	...

000d5c44 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5c44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5c48:	4680      	mov	r8, r0
   d5c4a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5c4c:	460e      	mov	r6, r1
   d5c4e:	b369      	cbz	r1, d5cac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5c50:	b362      	cbz	r2, d5cac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5c52:	2af4      	cmp	r2, #244	; 0xf4
   d5c54:	6805      	ldr	r5, [r0, #0]
   d5c56:	bf28      	it	cs
   d5c58:	22f4      	movcs	r2, #244	; 0xf4
   d5c5a:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5c5c:	782a      	ldrb	r2, [r5, #0]
   d5c5e:	b1a2      	cbz	r2, d5c8a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d5c60:	792b      	ldrb	r3, [r5, #4]
   d5c62:	0798      	lsls	r0, r3, #30
   d5c64:	d507      	bpl.n	d5c76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5c66:	2300      	movs	r3, #0
   d5c68:	4622      	mov	r2, r4
   d5c6a:	89a8      	ldrh	r0, [r5, #12]
   d5c6c:	f7ff f894 	bl	d4d98 <hal_ble_gatt_server_set_characteristic_value>
   d5c70:	2800      	cmp	r0, #0
   d5c72:	da02      	bge.n	d5c7a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5c74:	e043      	b.n	d5cfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5c76:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5c7a:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d5c7e:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d5c80:	06da      	lsls	r2, r3, #27
   d5c82:	d518      	bpl.n	d5cb6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5c84:	2f01      	cmp	r7, #1
   d5c86:	d123      	bne.n	d5cd0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5c88:	e015      	b.n	d5cb6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5c8a:	8868      	ldrh	r0, [r5, #2]
   d5c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5c90:	4298      	cmp	r0, r3
   d5c92:	d00d      	beq.n	d5cb0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d5c94:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5c96:	0759      	lsls	r1, r3, #29
   d5c98:	d523      	bpl.n	d5ce2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5c9a:	2f01      	cmp	r7, #1
   d5c9c:	d021      	beq.n	d5ce2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5c9e:	89a9      	ldrh	r1, [r5, #12]
   d5ca0:	9200      	str	r2, [sp, #0]
   d5ca2:	4623      	mov	r3, r4
   d5ca4:	4632      	mov	r2, r6
   d5ca6:	f7ff f89f 	bl	d4de8 <hal_ble_gatt_client_write_without_response>
   d5caa:	e028      	b.n	d5cfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5cac:	4815      	ldr	r0, [pc, #84]	; (d5d04 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d5cae:	e026      	b.n	d5cfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5cb0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5cb4:	e023      	b.n	d5cfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5cb6:	069a      	lsls	r2, r3, #26
   d5cb8:	d521      	bpl.n	d5cfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5cba:	2f02      	cmp	r7, #2
   d5cbc:	d01f      	beq.n	d5cfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5cbe:	89a8      	ldrh	r0, [r5, #12]
   d5cc0:	2300      	movs	r3, #0
   d5cc2:	4622      	mov	r2, r4
   d5cc4:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5cc6:	b002      	add	sp, #8
   d5cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5ccc:	f7ff b8c8 	b.w	d4e60 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5cd0:	89a8      	ldrh	r0, [r5, #12]
   d5cd2:	2300      	movs	r3, #0
   d5cd4:	4622      	mov	r2, r4
   d5cd6:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5cd8:	b002      	add	sp, #8
   d5cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5cde:	f7ff b8b5 	b.w	d4e4c <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5ce2:	071b      	lsls	r3, r3, #28
   d5ce4:	d501      	bpl.n	d5cea <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5ce6:	2f02      	cmp	r7, #2
   d5ce8:	d102      	bne.n	d5cf0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5cea:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5cee:	e006      	b.n	d5cfe <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5cf0:	2300      	movs	r3, #0
   d5cf2:	89a9      	ldrh	r1, [r5, #12]
   d5cf4:	9300      	str	r3, [sp, #0]
   d5cf6:	4632      	mov	r2, r6
   d5cf8:	4623      	mov	r3, r4
   d5cfa:	f7ff f86b 	bl	d4dd4 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5cfe:	b002      	add	sp, #8
   d5d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5d04:	fffffef2 	.word	0xfffffef2

000d5d08 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5d08:	b570      	push	{r4, r5, r6, lr}
   d5d0a:	6804      	ldr	r4, [r0, #0]
   d5d0c:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5d0e:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5d10:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5d12:	2900      	cmp	r1, #0
   d5d14:	d12e      	bne.n	d5d74 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d5d16:	8862      	ldrh	r2, [r4, #2]
   d5d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d1c:	429a      	cmp	r2, r3
   d5d1e:	d029      	beq.n	d5d74 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5d20:	8a23      	ldrh	r3, [r4, #16]
   d5d22:	b353      	cbz	r3, d5d7a <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d5d24:	2518      	movs	r5, #24
   d5d26:	462a      	mov	r2, r5
   d5d28:	4668      	mov	r0, sp
   d5d2a:	f002 ffbe 	bl	d8caa <memset>
    config.version = BLE_API_VERSION;
   d5d2e:	2301      	movs	r3, #1
   d5d30:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d5d34:	4b13      	ldr	r3, [pc, #76]	; (d5d84 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d5d36:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d5d3a:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d5d3c:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d5d3e:	8863      	ldrh	r3, [r4, #2]
   d5d40:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d5d44:	8a23      	ldrh	r3, [r4, #16]
   d5d46:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d5d4a:	89a3      	ldrh	r3, [r4, #12]
   d5d4c:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d5d50:	b15e      	cbz	r6, d5d6a <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d5d52:	7923      	ldrb	r3, [r4, #4]
   d5d54:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d5d56:	bf44      	itt	mi
   d5d58:	2302      	movmi	r3, #2
   d5d5a:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d5d5c:	7923      	ldrb	r3, [r4, #4]
   d5d5e:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d5d60:	bf42      	ittt	mi
   d5d62:	9b05      	ldrmi	r3, [sp, #20]
   d5d64:	f043 0301 	orrmi.w	r3, r3, #1
   d5d68:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d5d6a:	2100      	movs	r1, #0
   d5d6c:	4668      	mov	r0, sp
   d5d6e:	f7ff f863 	bl	d4e38 <hal_ble_gatt_client_configure_cccd>
   d5d72:	e004      	b.n	d5d7e <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5d74:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5d78:	e001      	b.n	d5d7e <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5d7a:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d5d7e:	b006      	add	sp, #24
   d5d80:	bd70      	pop	{r4, r5, r6, pc}
   d5d82:	bf00      	nop
   d5d84:	000d5f61 	.word	0x000d5f61

000d5d88 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d5d88:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d5d8a:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d5d8c:	651a      	str	r2, [r3, #80]	; 0x50
   d5d8e:	4770      	bx	lr

000d5d90 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d5d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5d94:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d5d96:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d5d98:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d5d9a:	9302      	str	r3, [sp, #8]
   d5d9c:	2500      	movs	r5, #0
   d5d9e:	4b2e      	ldr	r3, [pc, #184]	; (d5e58 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d5da0:	9300      	str	r3, [sp, #0]
   d5da2:	aa02      	add	r2, sp, #8
   d5da4:	462b      	mov	r3, r5
   d5da6:	492d      	ldr	r1, [pc, #180]	; (d5e5c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d5da8:	9503      	str	r5, [sp, #12]
   d5daa:	2001      	movs	r0, #1
   d5dac:	f7ff f962 	bl	d5074 <log_message>
   d5db0:	6833      	ldr	r3, [r6, #0]
   d5db2:	68dc      	ldr	r4, [r3, #12]
   d5db4:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d5db6:	f04f 081c 	mov.w	r8, #28
   d5dba:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d5dbe:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d5dc0:	f1a4 0308 	sub.w	r3, r4, #8
   d5dc4:	429f      	cmp	r7, r3
   d5dc6:	6832      	ldr	r2, [r6, #0]
   d5dc8:	d017      	beq.n	d5dfa <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d5dca:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d5dce:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5dd2:	8a9b      	ldrh	r3, [r3, #20]
   d5dd4:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d5dd8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5ddc:	8adb      	ldrh	r3, [r3, #22]
   d5dde:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d5de2:	8810      	ldrh	r0, [r2, #0]
   d5de4:	9500      	str	r5, [sp, #0]
   d5de6:	4633      	mov	r3, r6
   d5de8:	4a1d      	ldr	r2, [pc, #116]	; (d5e60 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d5dea:	a902      	add	r1, sp, #8
   d5dec:	f7fe ffe8 	bl	d4dc0 <hal_ble_gatt_client_discover_characteristics>
   d5df0:	2800      	cmp	r0, #0
   d5df2:	f104 0408 	add.w	r4, r4, #8
   d5df6:	dae3      	bge.n	d5dc0 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d5df8:	e02a      	b.n	d5e50 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d5dfa:	6994      	ldr	r4, [r2, #24]
   d5dfc:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d5dfe:	2700      	movs	r7, #0
   d5e00:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d5e04:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d5e06:	f1a4 0308 	sub.w	r3, r4, #8
   d5e0a:	429d      	cmp	r5, r3
   d5e0c:	d01f      	beq.n	d5e4e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d5e0e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5e12:	89db      	ldrh	r3, [r3, #14]
   d5e14:	b1cb      	cbz	r3, d5e4a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d5e16:	2214      	movs	r2, #20
   d5e18:	2100      	movs	r1, #0
   d5e1a:	a802      	add	r0, sp, #8
   d5e1c:	f002 ff45 	bl	d8caa <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d5e20:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5e24:	89d9      	ldrh	r1, [r3, #14]
   d5e26:	6833      	ldr	r3, [r6, #0]
   d5e28:	aa02      	add	r2, sp, #8
   d5e2a:	8818      	ldrh	r0, [r3, #0]
   d5e2c:	9700      	str	r7, [sp, #0]
   d5e2e:	2313      	movs	r3, #19
   d5e30:	f7fe ffe4 	bl	d4dfc <hal_ble_gatt_client_read>
                if (len > 0) {
   d5e34:	b148      	cbz	r0, d5e4a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d5e36:	ab0a      	add	r3, sp, #40	; 0x28
   d5e38:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d5e3a:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d5e3c:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d5e40:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d5e44:	303c      	adds	r0, #60	; 0x3c
   d5e46:	f7ff fad5 	bl	d53f4 <_ZN6StringaSEPKc>
   d5e4a:	3408      	adds	r4, #8
   d5e4c:	e7db      	b.n	d5e06 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d5e4e:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d5e50:	b00a      	add	sp, #40	; 0x28
   d5e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e56:	bf00      	nop
   d5e58:	000d9653 	.word	0x000d9653
   d5e5c:	000d962c 	.word	0x000d962c
   d5e60:	000d6a69 	.word	0x000d6a69

000d5e64 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d5e64:	6803      	ldr	r3, [r0, #0]
   d5e66:	8818      	ldrh	r0, [r3, #0]
}
   d5e68:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5e6c:	1ac0      	subs	r0, r0, r3
   d5e6e:	bf18      	it	ne
   d5e70:	2001      	movne	r0, #1
   d5e72:	4770      	bx	lr

000d5e74 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d5e74:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d5e76:	680b      	ldr	r3, [r1, #0]
   d5e78:	f8c2 3002 	str.w	r3, [r2, #2]
   d5e7c:	684b      	ldr	r3, [r1, #4]
   d5e7e:	f8c2 3006 	str.w	r3, [r2, #6]
   d5e82:	4770      	bx	lr

000d5e84 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d5e84:	b510      	push	{r4, lr}
    return impl()->address();
   d5e86:	680a      	ldr	r2, [r1, #0]
   d5e88:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d5e8c:	6003      	str	r3, [r0, #0]
   d5e8e:	6853      	ldr	r3, [r2, #4]
   d5e90:	6043      	str	r3, [r0, #4]
}
   d5e92:	bd10      	pop	{r4, pc}

000d5e94 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5e94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5e96:	6802      	ldr	r2, [r0, #0]
   d5e98:	680b      	ldr	r3, [r1, #0]
   d5e9a:	8812      	ldrh	r2, [r2, #0]
   d5e9c:	881b      	ldrh	r3, [r3, #0]
   d5e9e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5ea0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5ea2:	d10c      	bne.n	d5ebe <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5ea4:	4601      	mov	r1, r0
   d5ea6:	4668      	mov	r0, sp
   d5ea8:	f7ff ffec 	bl	d5e84 <_ZNK8particle13BlePeerDevice7addressEv>
   d5eac:	4621      	mov	r1, r4
   d5eae:	a802      	add	r0, sp, #8
   d5eb0:	f7ff ffe8 	bl	d5e84 <_ZNK8particle13BlePeerDevice7addressEv>
   d5eb4:	a902      	add	r1, sp, #8
   d5eb6:	4668      	mov	r0, sp
   d5eb8:	f7ff fb88 	bl	d55cc <_ZNK8particle10BleAddresseqERKS0_>
   d5ebc:	b900      	cbnz	r0, d5ec0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5ebe:	2000      	movs	r0, #0
}
   d5ec0:	b004      	add	sp, #16
   d5ec2:	bd10      	pop	{r4, pc}

000d5ec4 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5ec4:	b510      	push	{r4, lr}
   d5ec6:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5ec8:	2034      	movs	r0, #52	; 0x34
   d5eca:	f7fe f8e4 	bl	d4096 <_Znwj>
   d5ece:	4601      	mov	r1, r0
   d5ed0:	b168      	cbz	r0, d5eee <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5ed2:	2300      	movs	r3, #0
   d5ed4:	6003      	str	r3, [r0, #0]
   d5ed6:	6043      	str	r3, [r0, #4]
   d5ed8:	6083      	str	r3, [r0, #8]
   d5eda:	60c3      	str	r3, [r0, #12]
   d5edc:	6103      	str	r3, [r0, #16]
   d5ede:	6143      	str	r3, [r0, #20]
   d5ee0:	6183      	str	r3, [r0, #24]
   d5ee2:	61c3      	str	r3, [r0, #28]
   d5ee4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5ee6:	6243      	str	r3, [r0, #36]	; 0x24
   d5ee8:	6283      	str	r3, [r0, #40]	; 0x28
   d5eea:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5eec:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5eee:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5ef0:	b919      	cbnz	r1, d5efa <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5ef2:	4a0a      	ldr	r2, [pc, #40]	; (d5f1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5ef4:	200a      	movs	r0, #10
   d5ef6:	f7ff f8b5 	bl	d5064 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5efa:	2000      	movs	r0, #0
   d5efc:	f7fe ff28 	bl	d4d50 <hal_ble_stack_init>
   d5f00:	b120      	cbz	r0, d5f0c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5f02:	4a06      	ldr	r2, [pc, #24]	; (d5f1c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5f04:	2100      	movs	r1, #0
   d5f06:	200a      	movs	r0, #10
   d5f08:	f7ff f8ac 	bl	d5064 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5f0c:	2200      	movs	r2, #0
   d5f0e:	6821      	ldr	r1, [r4, #0]
   d5f10:	4803      	ldr	r0, [pc, #12]	; (d5f20 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5f12:	f7fe ff87 	bl	d4e24 <hal_ble_set_callback_on_periph_link_events>
}
   d5f16:	4620      	mov	r0, r4
   d5f18:	bd10      	pop	{r4, pc}
   d5f1a:	bf00      	nop
   d5f1c:	000d4d11 	.word	0x000d4d11
   d5f20:	000d6395 	.word	0x000d6395

000d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5f24:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5f26:	4c0a      	ldr	r4, [pc, #40]	; (d5f50 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5f28:	6823      	ldr	r3, [r4, #0]
   d5f2a:	07db      	lsls	r3, r3, #31
   d5f2c:	d40e      	bmi.n	d5f4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f7fe f8c2 	bl	d40b8 <__cxa_guard_acquire>
   d5f34:	b150      	cbz	r0, d5f4c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5f36:	4807      	ldr	r0, [pc, #28]	; (d5f54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5f38:	f7ff ffc4 	bl	d5ec4 <_ZN8particle14BleLocalDeviceC1Ev>
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	f7fe f8c0 	bl	d40c2 <__cxa_guard_release>
   d5f42:	4a05      	ldr	r2, [pc, #20]	; (d5f58 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5f44:	4905      	ldr	r1, [pc, #20]	; (d5f5c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5f46:	4803      	ldr	r0, [pc, #12]	; (d5f54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5f48:	f002 fd05 	bl	d8956 <__aeabi_atexit>
    return instance;
}
   d5f4c:	4801      	ldr	r0, [pc, #4]	; (d5f54 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5f4e:	bd10      	pop	{r4, pc}
   d5f50:	2003e3d0 	.word	0x2003e3d0
   d5f54:	2003e3cc 	.word	0x2003e3cc
   d5f58:	2003d8d0 	.word	0x2003d8d0
   d5f5c:	000d60fd 	.word	0x000d60fd

000d5f60 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5f60:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5f62:	6803      	ldr	r3, [r0, #0]
   d5f64:	3b09      	subs	r3, #9
   d5f66:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5f68:	b08a      	sub	sp, #40	; 0x28
   d5f6a:	4604      	mov	r4, r0
   d5f6c:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5f6e:	d819      	bhi.n	d5fa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5f70:	f7ff ffd8 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5f74:	88a1      	ldrh	r1, [r4, #4]
   d5f76:	6800      	ldr	r0, [r0, #0]
   d5f78:	f7ff fe52 	bl	d5c20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5f7c:	4602      	mov	r2, r0
   d5f7e:	b958      	cbnz	r0, d5f98 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5f80:	2320      	movs	r3, #32
   d5f82:	9302      	str	r3, [sp, #8]
   d5f84:	4b08      	ldr	r3, [pc, #32]	; (d5fa8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d5f86:	9003      	str	r0, [sp, #12]
   d5f88:	9300      	str	r3, [sp, #0]
   d5f8a:	aa02      	add	r2, sp, #8
   d5f8c:	4603      	mov	r3, r0
   d5f8e:	4907      	ldr	r1, [pc, #28]	; (d5fac <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5f90:	2032      	movs	r0, #50	; 0x32
   d5f92:	f7ff f86f 	bl	d5074 <log_message>
   d5f96:	e005      	b.n	d5fa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d5f98:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d5f9a:	b11d      	cbz	r5, d5fa4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5f9c:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d5f9e:	68e1      	ldr	r1, [r4, #12]
   d5fa0:	6920      	ldr	r0, [r4, #16]
   d5fa2:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d5fa4:	b00a      	add	sp, #40	; 0x28
   d5fa6:	bd70      	pop	{r4, r5, r6, pc}
   d5fa8:	000d9676 	.word	0x000d9676
   d5fac:	000d962c 	.word	0x000d962c

000d5fb0 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5fb0:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5fb2:	a801      	add	r0, sp, #4
   d5fb4:	f7ff faec 	bl	d5590 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5fb8:	2000      	movs	r0, #0
   d5fba:	f7fe fec9 	bl	d4d50 <hal_ble_stack_init>
   d5fbe:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d5fc0:	a801      	add	r0, sp, #4
   d5fc2:	f7ff faf3 	bl	d55ac <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d5fc6:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d5fca:	b002      	add	sp, #8
   d5fcc:	bd10      	pop	{r4, pc}
	...

000d5fd0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5fd0:	b530      	push	{r4, r5, lr}
   d5fd2:	b08b      	sub	sp, #44	; 0x2c
   d5fd4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5fd6:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5fd8:	4614      	mov	r4, r2
    WiringBleLock lk;
   d5fda:	f7ff fad9 	bl	d5590 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d5fde:	b1b5      	cbz	r5, d600e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d5fe0:	b1ac      	cbz	r4, d600e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d5fe2:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5fe4:	a902      	add	r1, sp, #8
   d5fe6:	480d      	ldr	r0, [pc, #52]	; (d601c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d5fe8:	9406      	str	r4, [sp, #24]
   d5fea:	9202      	str	r2, [sp, #8]
   d5fec:	9203      	str	r2, [sp, #12]
   d5fee:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d5ff0:	9207      	str	r2, [sp, #28]
   d5ff2:	9208      	str	r2, [sp, #32]
   d5ff4:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d5ff6:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5ff8:	f7fe feb2 	bl	d4d60 <hal_ble_gap_start_scan>
   d5ffc:	2800      	cmp	r0, #0
   d5ffe:	bfb8      	it	lt
   d6000:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6002:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d6004:	bfa8      	it	ge
   d6006:	9c07      	ldrge	r4, [sp, #28]
   d6008:	f7ff f900 	bl	d520c <free>
   d600c:	e000      	b.n	d6010 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d600e:	4c04      	ldr	r4, [pc, #16]	; (d6020 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d6010:	a801      	add	r0, sp, #4
   d6012:	f7ff facb 	bl	d55ac <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d6016:	4620      	mov	r0, r4
   d6018:	b00b      	add	sp, #44	; 0x2c
   d601a:	bd30      	pop	{r4, r5, pc}
   d601c:	000d6503 	.word	0x000d6503
   d6020:	fffffef2 	.word	0xfffffef2

000d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6024:	680b      	ldr	r3, [r1, #0]
   d6026:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6028:	b113      	cbz	r3, d6030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d602a:	685a      	ldr	r2, [r3, #4]
   d602c:	3201      	adds	r2, #1
   d602e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6030:	4770      	bx	lr

000d6032 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6032:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6034:	f851 3b04 	ldr.w	r3, [r1], #4
   d6038:	4604      	mov	r4, r0
   d603a:	f840 3b04 	str.w	r3, [r0], #4
   d603e:	f7ff fff1 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d6042:	6823      	ldr	r3, [r4, #0]
   d6044:	b90b      	cbnz	r3, d604a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6046:	f7ff fa53 	bl	d54f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d604a:	4620      	mov	r0, r4
   d604c:	bd10      	pop	{r4, pc}

000d604e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d604e:	b510      	push	{r4, lr}
   d6050:	f851 3b04 	ldr.w	r3, [r1], #4
   d6054:	4604      	mov	r4, r0
   d6056:	f840 3b04 	str.w	r3, [r0], #4
   d605a:	f7ff ffe3 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d605e:	4620      	mov	r0, r4
   d6060:	bd10      	pop	{r4, pc}

000d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6062:	b510      	push	{r4, lr}
   d6064:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6066:	6800      	ldr	r0, [r0, #0]
   d6068:	b128      	cbz	r0, d6076 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d606a:	6843      	ldr	r3, [r0, #4]
   d606c:	3b01      	subs	r3, #1
   d606e:	6043      	str	r3, [r0, #4]
   d6070:	b90b      	cbnz	r3, d6076 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6072:	f7ff fa47 	bl	d5504 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6076:	4620      	mov	r0, r4
   d6078:	bd10      	pop	{r4, pc}

000d607a <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d607a:	b510      	push	{r4, lr}
   d607c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d607e:	3004      	adds	r0, #4
   d6080:	f7ff ffef 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6084:	4620      	mov	r0, r4
   d6086:	bd10      	pop	{r4, pc}

000d6088 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d6088:	b510      	push	{r4, lr}
   d608a:	4604      	mov	r4, r0
   d608c:	3004      	adds	r0, #4
   d608e:	f7ff ffe8 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6092:	4620      	mov	r0, r4
   d6094:	bd10      	pop	{r4, pc}

000d6096 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6096:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6098:	6804      	ldr	r4, [r0, #0]
   d609a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d609c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d609e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d60a2:	42a6      	cmp	r6, r4
   d60a4:	d004      	beq.n	d60b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d60a6:	1d20      	adds	r0, r4, #4
   d60a8:	f7ff ffdb 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60ac:	3408      	adds	r4, #8
   d60ae:	e7f8      	b.n	d60a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d60b0:	6828      	ldr	r0, [r5, #0]
   d60b2:	f7ff f8ab 	bl	d520c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d60b6:	4628      	mov	r0, r5
   d60b8:	bd70      	pop	{r4, r5, r6, pc}

000d60ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d60ba:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d60bc:	6804      	ldr	r4, [r0, #0]
   d60be:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d60c0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d60c2:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d60c6:	42a6      	cmp	r6, r4
   d60c8:	d004      	beq.n	d60d4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d60ca:	1d20      	adds	r0, r4, #4
   d60cc:	f7ff ffc9 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60d0:	3408      	adds	r4, #8
   d60d2:	e7f8      	b.n	d60c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d60d4:	6828      	ldr	r0, [r5, #0]
   d60d6:	f7ff f899 	bl	d520c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d60da:	4628      	mov	r0, r5
   d60dc:	bd70      	pop	{r4, r5, r6, pc}

000d60de <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d60de:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d60e0:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d60e2:	f104 0018 	add.w	r0, r4, #24
   d60e6:	f7ff ffe8 	bl	d60ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d60ea:	f104 000c 	add.w	r0, r4, #12
   d60ee:	f7ff ffd2 	bl	d6096 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d60f2:	4620      	mov	r0, r4
   d60f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d60f8:	f7fd bfcf 	b.w	d409a <_ZdlPv>

000d60fc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d60fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d60fe:	6804      	ldr	r4, [r0, #0]
   d6100:	4607      	mov	r7, r0
   d6102:	b1c4      	cbz	r4, d6136 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6104:	69a5      	ldr	r5, [r4, #24]
   d6106:	69e3      	ldr	r3, [r4, #28]
   d6108:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d610c:	42ae      	cmp	r6, r5
   d610e:	d004      	beq.n	d611a <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6110:	1d28      	adds	r0, r5, #4
   d6112:	f7ff ffa6 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6116:	3508      	adds	r5, #8
   d6118:	e7f8      	b.n	d610c <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d611a:	69a0      	ldr	r0, [r4, #24]
   d611c:	f7ff f876 	bl	d520c <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d6120:	f104 000c 	add.w	r0, r4, #12
   d6124:	f7ff ffc9 	bl	d60ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6128:	4620      	mov	r0, r4
   d612a:	f7ff ffb4 	bl	d6096 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d612e:	2134      	movs	r1, #52	; 0x34
   d6130:	4620      	mov	r0, r4
   d6132:	f002 fc1d 	bl	d8970 <_ZdlPvj>
   d6136:	4638      	mov	r0, r7
   d6138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d613c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d613c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d613e:	2500      	movs	r5, #0
   d6140:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6142:	6045      	str	r5, [r0, #4]
   d6144:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6146:	2024      	movs	r0, #36	; 0x24
   d6148:	f7fd ffa5 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d614c:	4604      	mov	r4, r0
   d614e:	b178      	cbz	r0, d6170 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6150:	4603      	mov	r3, r0
   d6152:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6156:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d615a:	f8c0 5002 	str.w	r5, [r0, #2]
   d615e:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6160:	7285      	strb	r5, [r0, #10]
   d6162:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6164:	60c5      	str	r5, [r0, #12]
   d6166:	6105      	str	r5, [r0, #16]
   d6168:	6145      	str	r5, [r0, #20]
   d616a:	6185      	str	r5, [r0, #24]
   d616c:	61c5      	str	r5, [r0, #28]
   d616e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6170:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6172:	2014      	movs	r0, #20
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	f7fd ff8e 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d617a:	4603      	mov	r3, r0
   d617c:	b128      	cbz	r0, d618a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d617e:	2201      	movs	r2, #1
   d6180:	6042      	str	r2, [r0, #4]
   d6182:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6184:	4a08      	ldr	r2, [pc, #32]	; (d61a8 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d6186:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6188:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d618a:	a802      	add	r0, sp, #8
   d618c:	6872      	ldr	r2, [r6, #4]
   d618e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6192:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6194:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6196:	f7ff ff64 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d619a:	6833      	ldr	r3, [r6, #0]
   d619c:	b90b      	cbnz	r3, d61a2 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d619e:	f7ff f9a7 	bl	d54f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d61a2:	4630      	mov	r0, r6
   d61a4:	b002      	add	sp, #8
   d61a6:	bd70      	pop	{r4, r5, r6, pc}
   d61a8:	000d9618 	.word	0x000d9618

000d61ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d61ac:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d61ae:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d61b0:	6803      	ldr	r3, [r0, #0]
   d61b2:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d61b4:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d61b6:	d00c      	beq.n	d61d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d61b8:	b114      	cbz	r4, d61c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d61ba:	6863      	ldr	r3, [r4, #4]
   d61bc:	3301      	adds	r3, #1
   d61be:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d61c0:	6828      	ldr	r0, [r5, #0]
   d61c2:	b128      	cbz	r0, d61d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d61c4:	6843      	ldr	r3, [r0, #4]
   d61c6:	3b01      	subs	r3, #1
   d61c8:	6043      	str	r3, [r0, #4]
   d61ca:	b90b      	cbnz	r3, d61d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d61cc:	f7ff f99a 	bl	d5504 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d61d0:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d61d2:	4628      	mov	r0, r5
   d61d4:	bd38      	pop	{r3, r4, r5, pc}

000d61d6 <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d61d6:	b510      	push	{r4, lr}
   d61d8:	6802      	ldr	r2, [r0, #0]
   d61da:	680b      	ldr	r3, [r1, #0]
   d61dc:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d61de:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d61e0:	b110      	cbz	r0, d61e8 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d61e2:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d61e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d61e6:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d61e8:	4620      	mov	r0, r4
   d61ea:	f851 3b04 	ldr.w	r3, [r1], #4
   d61ee:	f840 3b04 	str.w	r3, [r0], #4
   d61f2:	f7ff ffdb 	bl	d61ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d61f6:	4620      	mov	r0, r4
   d61f8:	bd10      	pop	{r4, pc}

000d61fa <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d61fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d61fe:	6803      	ldr	r3, [r0, #0]
   d6200:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6202:	69de      	ldr	r6, [r3, #28]
   d6204:	b087      	sub	sp, #28
   d6206:	460f      	mov	r7, r1
   d6208:	4690      	mov	r8, r2
   d620a:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d620e:	42b4      	cmp	r4, r6
   d6210:	46a1      	mov	r9, r4
   d6212:	d011      	beq.n	d6238 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d6214:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d6218:	a801      	add	r0, sp, #4
   d621a:	3114      	adds	r1, #20
   d621c:	f7ff fa86 	bl	d572c <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d6220:	4641      	mov	r1, r8
   d6222:	a801      	add	r0, sp, #4
   d6224:	f7ff faee 	bl	d5804 <_ZNK8particle7BleUuideqERKS0_>
   d6228:	4605      	mov	r5, r0
   d622a:	2800      	cmp	r0, #0
   d622c:	d0ef      	beq.n	d620e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d622e:	4649      	mov	r1, r9
   d6230:	4638      	mov	r0, r7
   d6232:	f7ff ffd0 	bl	d61d6 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d6236:	e000      	b.n	d623a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d6238:	2500      	movs	r5, #0
}
   d623a:	4628      	mov	r0, r5
   d623c:	b007      	add	sp, #28
   d623e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6242 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d6242:	b510      	push	{r4, lr}
   d6244:	f851 3b04 	ldr.w	r3, [r1], #4
   d6248:	4604      	mov	r4, r0
   d624a:	f840 3b04 	str.w	r3, [r0], #4
   d624e:	f7ff ffad 	bl	d61ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d6252:	4620      	mov	r0, r4
   d6254:	bd10      	pop	{r4, pc}

000d6256 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6256:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6258:	b570      	push	{r4, r5, r6, lr}
   d625a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d625c:	d91a      	bls.n	d6294 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d625e:	4290      	cmp	r0, r2
   d6260:	d219      	bcs.n	d6296 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6262:	f1a1 0608 	sub.w	r6, r1, #8
   d6266:	1a51      	subs	r1, r2, r1
   d6268:	3904      	subs	r1, #4
   d626a:	1f15      	subs	r5, r2, #4
   d626c:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d626e:	1f2b      	subs	r3, r5, #4
   d6270:	429e      	cmp	r6, r3
   d6272:	d025      	beq.n	d62c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6274:	2c04      	cmp	r4, #4
   d6276:	d007      	beq.n	d6288 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6278:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d627c:	f844 3c04 	str.w	r3, [r4, #-4]
   d6280:	4629      	mov	r1, r5
   d6282:	4620      	mov	r0, r4
   d6284:	f7ff fece 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6288:	4628      	mov	r0, r5
   d628a:	f7ff feea 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d628e:	3d08      	subs	r5, #8
   d6290:	3c08      	subs	r4, #8
   d6292:	e7ec      	b.n	d626e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6294:	d014      	beq.n	d62c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6296:	1d0c      	adds	r4, r1, #4
   d6298:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d629a:	1f23      	subs	r3, r4, #4
   d629c:	429d      	cmp	r5, r3
   d629e:	d00f      	beq.n	d62c0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d62a0:	2e04      	cmp	r6, #4
   d62a2:	d007      	beq.n	d62b4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62a4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d62a8:	f846 3c04 	str.w	r3, [r6, #-4]
   d62ac:	4621      	mov	r1, r4
   d62ae:	4630      	mov	r0, r6
   d62b0:	f7ff feb8 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d62b4:	4620      	mov	r0, r4
   d62b6:	f7ff fed4 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62ba:	3408      	adds	r4, #8
   d62bc:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d62be:	e7ec      	b.n	d629a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d62c0:	bd70      	pop	{r4, r5, r6, pc}

000d62c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d62c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d62c6:	6804      	ldr	r4, [r0, #0]
   d62c8:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d62ca:	4605      	mov	r5, r0
   d62cc:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d62ce:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d62d2:	42a7      	cmp	r7, r4
   d62d4:	d018      	beq.n	d6308 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d62d6:	4641      	mov	r1, r8
   d62d8:	4620      	mov	r0, r4
   d62da:	f7ff fddb 	bl	d5e94 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d62de:	4606      	mov	r6, r0
   d62e0:	b908      	cbnz	r0, d62e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d62e2:	3408      	adds	r4, #8
   d62e4:	e7f5      	b.n	d62d2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d62e6:	b18c      	cbz	r4, d630c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d62e8:	1d20      	adds	r0, r4, #4
   d62ea:	f7ff feba 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d62ee:	682b      	ldr	r3, [r5, #0]
   d62f0:	686a      	ldr	r2, [r5, #4]
   d62f2:	f104 0108 	add.w	r1, r4, #8
   d62f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d62fa:	4620      	mov	r0, r4
   d62fc:	f7ff ffab 	bl	d6256 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6300:	686b      	ldr	r3, [r5, #4]
   d6302:	3b01      	subs	r3, #1
   d6304:	606b      	str	r3, [r5, #4]
    return true;
   d6306:	e002      	b.n	d630e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6308:	2600      	movs	r6, #0
   d630a:	e000      	b.n	d630e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d630c:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d630e:	4630      	mov	r0, r6
   d6310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6314 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6316:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6318:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d631c:	6847      	ldr	r7, [r0, #4]
   d631e:	9300      	str	r3, [sp, #0]
   d6320:	a801      	add	r0, sp, #4
   d6322:	f7ff fe7f 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6326:	6866      	ldr	r6, [r4, #4]
   d6328:	68a3      	ldr	r3, [r4, #8]
   d632a:	429e      	cmp	r6, r3
   d632c:	db14      	blt.n	d6358 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d632e:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6330:	2e00      	cmp	r6, #0
   d6332:	dd0b      	ble.n	d634c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6334:	00f0      	lsls	r0, r6, #3
   d6336:	f7fe ff61 	bl	d51fc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d633a:	4605      	mov	r5, r0
   d633c:	b318      	cbz	r0, d6386 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d633e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6342:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6346:	f7ff ff86 	bl	d6256 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d634a:	e000      	b.n	d634e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d634c:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d634e:	6820      	ldr	r0, [r4, #0]
   d6350:	f7fe ff5c 	bl	d520c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6354:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6356:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6358:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d635a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d635c:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6360:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6364:	4629      	mov	r1, r5
   d6366:	f105 0008 	add.w	r0, r5, #8
   d636a:	f7ff ff74 	bl	d6256 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d636e:	b135      	cbz	r5, d637e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6370:	9b00      	ldr	r3, [sp, #0]
   d6372:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6376:	a901      	add	r1, sp, #4
   d6378:	1d28      	adds	r0, r5, #4
   d637a:	f7ff fe53 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d637e:	6863      	ldr	r3, [r4, #4]
   d6380:	3301      	adds	r3, #1
   d6382:	6063      	str	r3, [r4, #4]
   d6384:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6386:	a801      	add	r0, sp, #4
   d6388:	f7ff fe6b 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d638c:	4628      	mov	r0, r5
   d638e:	b003      	add	sp, #12
   d6390:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6394 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6398:	4604      	mov	r4, r0
   d639a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d639c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d639e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d63a0:	f7ff f8f6 	bl	d5590 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d63a4:	6823      	ldr	r3, [r4, #0]
   d63a6:	2b03      	cmp	r3, #3
   d63a8:	d002      	beq.n	d63b0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d63aa:	2b04      	cmp	r3, #4
   d63ac:	d042      	beq.n	d6434 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d63ae:	e087      	b.n	d64c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d63b0:	a804      	add	r0, sp, #16
   d63b2:	f7ff fec3 	bl	d613c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d63b6:	9b04      	ldr	r3, [sp, #16]
   d63b8:	8922      	ldrh	r2, [r4, #8]
   d63ba:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d63bc:	6862      	ldr	r2, [r4, #4]
   d63be:	9904      	ldr	r1, [sp, #16]
   d63c0:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d63c4:	f8c1 3002 	str.w	r3, [r1, #2]
   d63c8:	6853      	ldr	r3, [r2, #4]
   d63ca:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d63ce:	a807      	add	r0, sp, #28
   d63d0:	9b04      	ldr	r3, [sp, #16]
   d63d2:	9306      	str	r3, [sp, #24]
   d63d4:	a905      	add	r1, sp, #20
   d63d6:	f7ff fe25 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d63da:	a906      	add	r1, sp, #24
   d63dc:	f105 0018 	add.w	r0, r5, #24
   d63e0:	f7ff ff98 	bl	d6314 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d63e4:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63e6:	a807      	add	r0, sp, #28
   d63e8:	f7ff fe3b 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63ec:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d63ee:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d63f0:	b974      	cbnz	r4, d6410 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d63f2:	4b36      	ldr	r3, [pc, #216]	; (d64cc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d63f4:	9300      	str	r3, [sp, #0]
   d63f6:	aa06      	add	r2, sp, #24
   d63f8:	4623      	mov	r3, r4
   d63fa:	4935      	ldr	r1, [pc, #212]	; (d64d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d63fc:	9407      	str	r4, [sp, #28]
   d63fe:	2032      	movs	r0, #50	; 0x32
   d6400:	f7fe fe38 	bl	d5074 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6404:	9b04      	ldr	r3, [sp, #16]
   d6406:	4621      	mov	r1, r4
   d6408:	8818      	ldrh	r0, [r3, #0]
   d640a:	f7fe fcbb 	bl	d4d84 <hal_ble_gap_disconnect>
   d640e:	e00d      	b.n	d642c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6410:	4a30      	ldr	r2, [pc, #192]	; (d64d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d6412:	9200      	str	r2, [sp, #0]
   d6414:	2300      	movs	r3, #0
   d6416:	aa06      	add	r2, sp, #24
   d6418:	492d      	ldr	r1, [pc, #180]	; (d64d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d641a:	9307      	str	r3, [sp, #28]
   d641c:	2001      	movs	r0, #1
   d641e:	f7fe fe29 	bl	d5074 <log_message>
                if (impl->connectedCb_) {
   d6422:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6424:	b113      	cbz	r3, d642c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d6426:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d6428:	a804      	add	r0, sp, #16
   d642a:	4798      	blx	r3
   d642c:	a805      	add	r0, sp, #20
   d642e:	f7ff fe18 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6432:	e045      	b.n	d64c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6434:	8921      	ldrh	r1, [r4, #8]
   d6436:	4628      	mov	r0, r5
   d6438:	f7ff fbf2 	bl	d5c20 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d643c:	4607      	mov	r7, r0
   d643e:	2800      	cmp	r0, #0
   d6440:	d03e      	beq.n	d64c0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d6442:	6804      	ldr	r4, [r0, #0]
   d6444:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6446:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6448:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d644c:	8022      	strh	r2, [r4, #0]
   d644e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6452:	4299      	cmp	r1, r3
   d6454:	d003      	beq.n	d645e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d6456:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d645a:	8042      	strh	r2, [r0, #2]
   d645c:	e7f9      	b.n	d6452 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d645e:	68e6      	ldr	r6, [r4, #12]
   d6460:	6923      	ldr	r3, [r4, #16]
   d6462:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6466:	45b0      	cmp	r8, r6
   d6468:	d004      	beq.n	d6474 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d646a:	1d30      	adds	r0, r6, #4
   d646c:	f7ff fdf9 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6470:	3608      	adds	r6, #8
   d6472:	e7f8      	b.n	d6466 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6474:	2300      	movs	r3, #0
   d6476:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6478:	69a6      	ldr	r6, [r4, #24]
   d647a:	69e3      	ldr	r3, [r4, #28]
   d647c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6480:	45b0      	cmp	r8, r6
   d6482:	d004      	beq.n	d648e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d6484:	1d30      	adds	r0, r6, #4
   d6486:	f7ff fdec 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d648a:	3608      	adds	r6, #8
   d648c:	e7f8      	b.n	d6480 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d648e:	2300      	movs	r3, #0
   d6490:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d6492:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d6494:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d6496:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6498:	b113      	cbz	r3, d64a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d649a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d649c:	4638      	mov	r0, r7
   d649e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d64a0:	2320      	movs	r3, #32
   d64a2:	4a0d      	ldr	r2, [pc, #52]	; (d64d8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d64a4:	9306      	str	r3, [sp, #24]
   d64a6:	9200      	str	r2, [sp, #0]
   d64a8:	2300      	movs	r3, #0
   d64aa:	4909      	ldr	r1, [pc, #36]	; (d64d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d64ac:	9307      	str	r3, [sp, #28]
   d64ae:	2001      	movs	r0, #1
   d64b0:	aa06      	add	r2, sp, #24
   d64b2:	f7fe fddf 	bl	d5074 <log_message>
                    impl->peers_.removeOne(*peer);
   d64b6:	4639      	mov	r1, r7
   d64b8:	f105 0018 	add.w	r0, r5, #24
   d64bc:	f7ff ff01 	bl	d62c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d64c0:	a803      	add	r0, sp, #12
   d64c2:	f7ff f873 	bl	d55ac <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d64c6:	b00e      	add	sp, #56	; 0x38
   d64c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d64cc:	000d968e 	.word	0x000d968e
   d64d0:	000d962c 	.word	0x000d962c
   d64d4:	000d96b4 	.word	0x000d96b4
   d64d8:	000d96d1 	.word	0x000d96d1

000d64dc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d64dc:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d64de:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d64e0:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d64e2:	dd06      	ble.n	d64f2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d64e4:	2154      	movs	r1, #84	; 0x54
   d64e6:	4369      	muls	r1, r5
   d64e8:	6800      	ldr	r0, [r0, #0]
   d64ea:	f7fe fe97 	bl	d521c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d64ee:	b920      	cbnz	r0, d64fa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d64f0:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d64f2:	6800      	ldr	r0, [r0, #0]
   d64f4:	f7fe fe8a 	bl	d520c <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d64f8:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d64fa:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d64fc:	60a5      	str	r5, [r4, #8]
        return true;
   d64fe:	2001      	movs	r0, #1
    }
   d6500:	bd38      	pop	{r3, r4, r5, pc}

000d6502 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6502:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6504:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6506:	b0c0      	sub	sp, #256	; 0x100
   d6508:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d650a:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d650c:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d650e:	a801      	add	r0, sp, #4
   d6510:	2100      	movs	r1, #0
   d6512:	f002 fbca 	bl	d8caa <memset>
   d6516:	a803      	add	r0, sp, #12
   d6518:	f7ff fae3 	bl	d5ae2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d651c:	a80c      	add	r0, sp, #48	; 0x30
   d651e:	f7ff fae0 	bl	d5ae2 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6522:	462a      	mov	r2, r5
   d6524:	ab01      	add	r3, sp, #4
   d6526:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d652a:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d652c:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d652e:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6530:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6532:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6534:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6538:	a80c      	add	r0, sp, #48	; 0x30
   d653a:	f7ff fa63 	bl	d5a04 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d653e:	89aa      	ldrh	r2, [r5, #12]
   d6540:	6869      	ldr	r1, [r5, #4]
   d6542:	a803      	add	r0, sp, #12
   d6544:	f7ff fa5e 	bl	d5a04 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d6548:	69a5      	ldr	r5, [r4, #24]
   d654a:	b11d      	cbz	r5, d6554 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d654c:	69e1      	ldr	r1, [r4, #28]
   d654e:	a801      	add	r0, sp, #4
   d6550:	47a8      	blx	r5
   d6552:	e03c      	b.n	d65ce <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d6554:	68e0      	ldr	r0, [r4, #12]
   d6556:	b198      	cbz	r0, d6580 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d6558:	6963      	ldr	r3, [r4, #20]
   d655a:	6922      	ldr	r2, [r4, #16]
   d655c:	4293      	cmp	r3, r2
   d655e:	d239      	bcs.n	d65d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d6560:	1c5a      	adds	r2, r3, #1
   d6562:	6162      	str	r2, [r4, #20]
   d6564:	fb06 0003 	mla	r0, r6, r3, r0
   d6568:	2251      	movs	r2, #81	; 0x51
   d656a:	a901      	add	r1, sp, #4
   d656c:	f002 fb77 	bl	d8c5e <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d6570:	6962      	ldr	r2, [r4, #20]
   d6572:	6923      	ldr	r3, [r4, #16]
   d6574:	429a      	cmp	r2, r3
   d6576:	d32d      	bcc.n	d65d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d6578:	4628      	mov	r0, r5
   d657a:	f7fe fbf9 	bl	d4d70 <hal_ble_gap_stop_scan>
   d657e:	e029      	b.n	d65d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d6580:	4632      	mov	r2, r6
   d6582:	a901      	add	r1, sp, #4
   d6584:	a816      	add	r0, sp, #88	; 0x58
   d6586:	f002 fb6a 	bl	d8c5e <memcpy>
   d658a:	4632      	mov	r2, r6
   d658c:	a916      	add	r1, sp, #88	; 0x58
   d658e:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6590:	6865      	ldr	r5, [r4, #4]
   d6592:	f002 fb64 	bl	d8c5e <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6596:	68a3      	ldr	r3, [r4, #8]
   d6598:	429d      	cmp	r5, r3
   d659a:	db04      	blt.n	d65a6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d659c:	1c69      	adds	r1, r5, #1
   d659e:	4620      	mov	r0, r4
   d65a0:	f7ff ff9c 	bl	d64dc <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d65a4:	b1b0      	cbz	r0, d65d4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d65a6:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d65a8:	6822      	ldr	r2, [r4, #0]
   d65aa:	2654      	movs	r6, #84	; 0x54
   d65ac:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d65b0:	fb06 2203 	mla	r2, r6, r3, r2
   d65b4:	1b52      	subs	r2, r2, r5
   d65b6:	4629      	mov	r1, r5
   d65b8:	19a8      	adds	r0, r5, r6
   d65ba:	f002 fb5b 	bl	d8c74 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d65be:	4632      	mov	r2, r6
   d65c0:	a92b      	add	r1, sp, #172	; 0xac
   d65c2:	4628      	mov	r0, r5
   d65c4:	f002 fb4b 	bl	d8c5e <memcpy>
    ++size_;
   d65c8:	6863      	ldr	r3, [r4, #4]
   d65ca:	3301      	adds	r3, #1
   d65cc:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d65ce:	6963      	ldr	r3, [r4, #20]
   d65d0:	3301      	adds	r3, #1
   d65d2:	6163      	str	r3, [r4, #20]
        }
    }
   d65d4:	b040      	add	sp, #256	; 0x100
   d65d6:	bd70      	pop	{r4, r5, r6, pc}

000d65d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d65d8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d65da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65dc:	4606      	mov	r6, r0
   d65de:	460c      	mov	r4, r1
   d65e0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d65e2:	d914      	bls.n	d660e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d65e4:	4290      	cmp	r0, r2
   d65e6:	d213      	bcs.n	d6610 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d65e8:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d65ec:	1a6c      	subs	r4, r5, r1
   d65ee:	f1a1 0708 	sub.w	r7, r1, #8
   d65f2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d65f4:	42af      	cmp	r7, r5
   d65f6:	d018      	beq.n	d662a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d65f8:	b11c      	cbz	r4, d6602 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d65fa:	4629      	mov	r1, r5
   d65fc:	4620      	mov	r0, r4
   d65fe:	f7ff fd26 	bl	d604e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6602:	1d28      	adds	r0, r5, #4
   d6604:	f7ff fd2d 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6608:	3d08      	subs	r5, #8
   d660a:	3c08      	subs	r4, #8
   d660c:	e7f2      	b.n	d65f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d660e:	d00c      	beq.n	d662a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6610:	42ac      	cmp	r4, r5
   d6612:	d00a      	beq.n	d662a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6614:	b11e      	cbz	r6, d661e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6616:	4621      	mov	r1, r4
   d6618:	4630      	mov	r0, r6
   d661a:	f7ff fd18 	bl	d604e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d661e:	1d20      	adds	r0, r4, #4
   d6620:	f7ff fd1f 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6624:	3408      	adds	r4, #8
   d6626:	3608      	adds	r6, #8
   d6628:	e7f2      	b.n	d6610 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d662a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d662c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d662c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d662e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6630:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6632:	dd0b      	ble.n	d664c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6634:	00f0      	lsls	r0, r6, #3
   d6636:	f7fe fde1 	bl	d51fc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d663a:	4604      	mov	r4, r0
   d663c:	b170      	cbz	r0, d665c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d663e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6642:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6646:	f7ff ffc7 	bl	d65d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d664a:	e000      	b.n	d664e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d664c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d664e:	6828      	ldr	r0, [r5, #0]
   d6650:	f7fe fddc 	bl	d520c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6654:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6656:	60ae      	str	r6, [r5, #8]
        return true;
   d6658:	2001      	movs	r0, #1
   d665a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d665c:	bd70      	pop	{r4, r5, r6, pc}

000d665e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d665e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6662:	2300      	movs	r3, #0
   d6664:	6003      	str	r3, [r0, #0]
   d6666:	6043      	str	r3, [r0, #4]
   d6668:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d666a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d666c:	6849      	ldr	r1, [r1, #4]
   d666e:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6670:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6672:	dd13      	ble.n	d669c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6674:	f7ff ffda 	bl	d662c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6678:	b180      	cbz	r0, d669c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d667a:	6835      	ldr	r5, [r6, #0]
   d667c:	6873      	ldr	r3, [r6, #4]
   d667e:	6827      	ldr	r7, [r4, #0]
   d6680:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6684:	4545      	cmp	r5, r8
   d6686:	d007      	beq.n	d6698 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6688:	b11f      	cbz	r7, d6692 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d668a:	4629      	mov	r1, r5
   d668c:	4638      	mov	r0, r7
   d668e:	f7ff fcde 	bl	d604e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6692:	3508      	adds	r5, #8
   d6694:	3708      	adds	r7, #8
   d6696:	e7f5      	b.n	d6684 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6698:	6873      	ldr	r3, [r6, #4]
   d669a:	6063      	str	r3, [r4, #4]
    }
}
   d669c:	4620      	mov	r0, r4
   d669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d66a2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d66a2:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d66a4:	680b      	ldr	r3, [r1, #0]
   d66a6:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d66a8:	4605      	mov	r5, r0
   d66aa:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d66ac:	b933      	cbnz	r3, d66bc <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d66ae:	4608      	mov	r0, r1
   d66b0:	f7fe ff00 	bl	d54b4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d66b4:	b910      	cbnz	r0, d66bc <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d66b6:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d66b8:	2201      	movs	r2, #1
   d66ba:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d66bc:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d66be:	4628      	mov	r0, r5
   d66c0:	310c      	adds	r1, #12
   d66c2:	f7ff ffcc 	bl	d665e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d66c6:	4628      	mov	r0, r5
   d66c8:	bd38      	pop	{r3, r4, r5, pc}

000d66ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d66ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d66cc:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d66ce:	6845      	ldr	r5, [r0, #4]
   d66d0:	4668      	mov	r0, sp
   d66d2:	f7ff fcbc 	bl	d604e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d66d6:	6861      	ldr	r1, [r4, #4]
   d66d8:	68a3      	ldr	r3, [r4, #8]
   d66da:	4299      	cmp	r1, r3
   d66dc:	db05      	blt.n	d66ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d66de:	3101      	adds	r1, #1
   d66e0:	4620      	mov	r0, r4
   d66e2:	f7ff ffa3 	bl	d662c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d66e6:	4606      	mov	r6, r0
   d66e8:	b198      	cbz	r0, d6712 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d66ea:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d66ec:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d66ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d66f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d66f6:	4629      	mov	r1, r5
   d66f8:	f105 0008 	add.w	r0, r5, #8
   d66fc:	f7ff ff6c 	bl	d65d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6700:	b11d      	cbz	r5, d670a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6702:	4669      	mov	r1, sp
   d6704:	4628      	mov	r0, r5
   d6706:	f7ff fca2 	bl	d604e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d670a:	6863      	ldr	r3, [r4, #4]
   d670c:	3301      	adds	r3, #1
   d670e:	6063      	str	r3, [r4, #4]
   d6710:	2601      	movs	r6, #1
   d6712:	a801      	add	r0, sp, #4
   d6714:	f7ff fca5 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6718:	4630      	mov	r0, r6
   d671a:	b002      	add	sp, #8
   d671c:	bd70      	pop	{r4, r5, r6, pc}

000d671e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d671e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6722:	4606      	mov	r6, r0
   d6724:	460c      	mov	r4, r1
   d6726:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6728:	d914      	bls.n	d6754 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d672a:	4290      	cmp	r0, r2
   d672c:	d213      	bcs.n	d6756 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d672e:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6732:	1a6c      	subs	r4, r5, r1
   d6734:	f1a1 0708 	sub.w	r7, r1, #8
   d6738:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d673a:	42af      	cmp	r7, r5
   d673c:	d018      	beq.n	d6770 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d673e:	b11c      	cbz	r4, d6748 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6740:	4629      	mov	r1, r5
   d6742:	4620      	mov	r0, r4
   d6744:	f7ff fc75 	bl	d6032 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6748:	1d28      	adds	r0, r5, #4
   d674a:	f7ff fc8a 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d674e:	3d08      	subs	r5, #8
   d6750:	3c08      	subs	r4, #8
   d6752:	e7f2      	b.n	d673a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6754:	d00c      	beq.n	d6770 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6756:	42ac      	cmp	r4, r5
   d6758:	d00a      	beq.n	d6770 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d675a:	b11e      	cbz	r6, d6764 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d675c:	4621      	mov	r1, r4
   d675e:	4630      	mov	r0, r6
   d6760:	f7ff fc67 	bl	d6032 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6764:	1d20      	adds	r0, r4, #4
   d6766:	f7ff fc7c 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d676a:	3408      	adds	r4, #8
   d676c:	3608      	adds	r6, #8
   d676e:	e7f2      	b.n	d6756 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6772 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6772:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6774:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6776:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6778:	dd0b      	ble.n	d6792 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d677a:	00f0      	lsls	r0, r6, #3
   d677c:	f7fe fd3e 	bl	d51fc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6780:	4604      	mov	r4, r0
   d6782:	b170      	cbz	r0, d67a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6784:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6788:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d678c:	f7ff ffc7 	bl	d671e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6790:	e000      	b.n	d6794 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6792:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6794:	6828      	ldr	r0, [r5, #0]
   d6796:	f7fe fd39 	bl	d520c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d679a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d679c:	60ae      	str	r6, [r5, #8]
        return true;
   d679e:	2001      	movs	r0, #1
   d67a0:	bd70      	pop	{r4, r5, r6, pc}
    }
   d67a2:	bd70      	pop	{r4, r5, r6, pc}

000d67a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d67a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d67a8:	2300      	movs	r3, #0
   d67aa:	6003      	str	r3, [r0, #0]
   d67ac:	6043      	str	r3, [r0, #4]
   d67ae:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d67b0:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d67b2:	6849      	ldr	r1, [r1, #4]
   d67b4:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d67b6:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d67b8:	dd13      	ble.n	d67e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d67ba:	f7ff ffda 	bl	d6772 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d67be:	b180      	cbz	r0, d67e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d67c0:	6835      	ldr	r5, [r6, #0]
   d67c2:	6873      	ldr	r3, [r6, #4]
   d67c4:	6827      	ldr	r7, [r4, #0]
   d67c6:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d67ca:	4545      	cmp	r5, r8
   d67cc:	d007      	beq.n	d67de <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d67ce:	b11f      	cbz	r7, d67d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d67d0:	4629      	mov	r1, r5
   d67d2:	4638      	mov	r0, r7
   d67d4:	f7ff fc2d 	bl	d6032 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d67d8:	3508      	adds	r5, #8
   d67da:	3708      	adds	r7, #8
   d67dc:	e7f5      	b.n	d67ca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d67de:	6873      	ldr	r3, [r6, #4]
   d67e0:	6063      	str	r3, [r4, #4]
    }
}
   d67e2:	4620      	mov	r0, r4
   d67e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d67e8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d67e8:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d67ea:	680b      	ldr	r3, [r1, #0]
   d67ec:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d67ee:	b085      	sub	sp, #20
   d67f0:	4605      	mov	r5, r0
   d67f2:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d67f4:	b92b      	cbnz	r3, d6802 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d67f6:	a801      	add	r0, sp, #4
   d67f8:	f7ff ff53 	bl	d66a2 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d67fc:	a801      	add	r0, sp, #4
   d67fe:	f7ff fc4a 	bl	d6096 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d6802:	6823      	ldr	r3, [r4, #0]
   d6804:	7adb      	ldrb	r3, [r3, #11]
   d6806:	b93b      	cbnz	r3, d6818 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d6808:	4621      	mov	r1, r4
   d680a:	a801      	add	r0, sp, #4
   d680c:	f7ff fac0 	bl	d5d90 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d6810:	b910      	cbnz	r0, d6818 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d6812:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d6814:	2201      	movs	r2, #1
   d6816:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6818:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d681a:	4628      	mov	r0, r5
   d681c:	3118      	adds	r1, #24
   d681e:	f7ff ffc1 	bl	d67a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d6822:	4628      	mov	r0, r5
   d6824:	b005      	add	sp, #20
   d6826:	bd30      	pop	{r4, r5, pc}

000d6828 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6828:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d682c:	460d      	mov	r5, r1
   d682e:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d6830:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6834:	4617      	mov	r7, r2
   d6836:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d6838:	4642      	mov	r2, r8
   d683a:	2100      	movs	r1, #0
   d683c:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d683e:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d6840:	f002 fa33 	bl	d8caa <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6844:	6869      	ldr	r1, [r5, #4]
   d6846:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d6848:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d684a:	ab02      	add	r3, sp, #8
   d684c:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d684e:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d6852:	ab05      	add	r3, sp, #20
   d6854:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6858:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d685c:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d6860:	f7ff fb60 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6864:	4b34      	ldr	r3, [pc, #208]	; (d6938 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d6866:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6868:	f7ff fb5c 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d686c:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d686e:	6803      	ldr	r3, [r0, #0]
   d6870:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6872:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6874:	a804      	add	r0, sp, #16
   d6876:	f7fe facb 	bl	d4e10 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d687a:	4607      	mov	r7, r0
   d687c:	b120      	cbz	r0, d6888 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d687e:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6880:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6884:	801a      	strh	r2, [r3, #0]
        return ret;
   d6886:	e053      	b.n	d6930 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d6888:	4629      	mov	r1, r5
   d688a:	4630      	mov	r0, r6
   d688c:	f7ff faf2 	bl	d5e74 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6890:	f7ff fb48 	bl	d5f24 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6894:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d6896:	6803      	ldr	r3, [r0, #0]
   d6898:	ad12      	add	r5, sp, #72	; 0x48
   d689a:	f103 0818 	add.w	r8, r3, #24
   d689e:	f851 3b04 	ldr.w	r3, [r1], #4
   d68a2:	f845 3d20 	str.w	r3, [r5, #-32]!
   d68a6:	a80b      	add	r0, sp, #44	; 0x2c
   d68a8:	f7ff fbbc 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d68ac:	4629      	mov	r1, r5
   d68ae:	4640      	mov	r0, r8
   d68b0:	f7ff fd30 	bl	d6314 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d68b4:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d68b6:	a80b      	add	r0, sp, #44	; 0x2c
   d68b8:	f7ff fbd3 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68bc:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d68be:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d68c0:	f1b8 0f00 	cmp.w	r8, #0
   d68c4:	d114      	bne.n	d68f0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d68c6:	4b1d      	ldr	r3, [pc, #116]	; (d693c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d68c8:	9300      	str	r3, [sp, #0]
   d68ca:	462a      	mov	r2, r5
   d68cc:	4643      	mov	r3, r8
   d68ce:	491c      	ldr	r1, [pc, #112]	; (d6940 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d68d0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d68d4:	2032      	movs	r0, #50	; 0x32
   d68d6:	f7fe fbcd 	bl	d5074 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d68da:	6833      	ldr	r3, [r6, #0]
   d68dc:	4641      	mov	r1, r8
   d68de:	8818      	ldrh	r0, [r3, #0]
   d68e0:	f7fe fa50 	bl	d4d84 <hal_ble_gap_disconnect>
   d68e4:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d68e6:	4817      	ldr	r0, [pc, #92]	; (d6944 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d68e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d68ec:	801a      	strh	r2, [r3, #0]
   d68ee:	e01f      	b.n	d6930 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d68f0:	4b15      	ldr	r3, [pc, #84]	; (d6948 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d68f2:	9300      	str	r3, [sp, #0]
   d68f4:	462a      	mov	r2, r5
   d68f6:	463b      	mov	r3, r7
   d68f8:	4911      	ldr	r1, [pc, #68]	; (d6940 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d68fa:	970b      	str	r7, [sp, #44]	; 0x2c
   d68fc:	4648      	mov	r0, r9
   d68fe:	f7fe fbb9 	bl	d5074 <log_message>
    if (automatic) {
   d6902:	b1a4      	cbz	r4, d692e <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6904:	4631      	mov	r1, r6
   d6906:	4628      	mov	r0, r5
   d6908:	f7ff ff6e 	bl	d67e8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d690c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d690e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6910:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d6914:	42a6      	cmp	r6, r4
   d6916:	d005      	beq.n	d6924 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d6918:	4620      	mov	r0, r4
   d691a:	2101      	movs	r1, #1
   d691c:	f7ff f9f4 	bl	d5d08 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d6920:	3408      	adds	r4, #8
   d6922:	e7f7      	b.n	d6914 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6924:	4628      	mov	r0, r5
   d6926:	f7ff fbc8 	bl	d60ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d692a:	2000      	movs	r0, #0
   d692c:	e000      	b.n	d6930 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d692e:	4620      	mov	r0, r4
}
   d6930:	b013      	add	sp, #76	; 0x4c
   d6932:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6936:	bf00      	nop
   d6938:	000d6395 	.word	0x000d6395
   d693c:	000d96f0 	.word	0x000d96f0
   d6940:	000d962c 	.word	0x000d962c
   d6944:	fffffefc 	.word	0xfffffefc
   d6948:	000d970c 	.word	0x000d970c

000d694c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d694c:	b570      	push	{r4, r5, r6, lr}
   d694e:	4604      	mov	r4, r0
   d6950:	4615      	mov	r5, r2
   d6952:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d6954:	f7ff fbf2 	bl	d613c <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d6958:	4633      	mov	r3, r6
   d695a:	2200      	movs	r2, #0
   d695c:	4629      	mov	r1, r5
   d695e:	4620      	mov	r0, r4
   d6960:	f7ff ff62 	bl	d6828 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d6964:	4620      	mov	r0, r4
   d6966:	bd70      	pop	{r4, r5, r6, pc}

000d6968 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6968:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d696a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d696c:	6845      	ldr	r5, [r0, #4]
   d696e:	4668      	mov	r0, sp
   d6970:	f7ff fb5f 	bl	d6032 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6974:	6861      	ldr	r1, [r4, #4]
   d6976:	68a3      	ldr	r3, [r4, #8]
   d6978:	4299      	cmp	r1, r3
   d697a:	db05      	blt.n	d6988 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d697c:	3101      	adds	r1, #1
   d697e:	4620      	mov	r0, r4
   d6980:	f7ff fef7 	bl	d6772 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6984:	4606      	mov	r6, r0
   d6986:	b198      	cbz	r0, d69b0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6988:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d698a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d698c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6990:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6994:	4629      	mov	r1, r5
   d6996:	f105 0008 	add.w	r0, r5, #8
   d699a:	f7ff fec0 	bl	d671e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d699e:	b11d      	cbz	r5, d69a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d69a0:	4669      	mov	r1, sp
   d69a2:	4628      	mov	r0, r5
   d69a4:	f7ff fb45 	bl	d6032 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d69a8:	6863      	ldr	r3, [r4, #4]
   d69aa:	3301      	adds	r3, #1
   d69ac:	6063      	str	r3, [r4, #4]
   d69ae:	2601      	movs	r6, #1
   d69b0:	a801      	add	r0, sp, #4
   d69b2:	f7ff fb56 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d69b6:	4630      	mov	r0, r6
   d69b8:	b002      	add	sp, #8
   d69ba:	bd70      	pop	{r4, r5, r6, pc}

000d69bc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d69bc:	b510      	push	{r4, lr}
   d69be:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d69c0:	6840      	ldr	r0, [r0, #4]
   d69c2:	b108      	cbz	r0, d69c8 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d69c4:	f7fd fb69 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d69c8:	4620      	mov	r0, r4
   d69ca:	bd10      	pop	{r4, pc}

000d69cc <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d69cc:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d69ce:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d69d0:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d69d2:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d69d6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d69da:	f7fe fc97 	bl	d530c <_ZN6StringD1Ev>
   d69de:	4668      	mov	r0, sp
   d69e0:	f7ff ffec 	bl	d69bc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d69e4:	b003      	add	sp, #12
   d69e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d69ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d69ec:	b538      	push	{r3, r4, r5, lr}
   d69ee:	2300      	movs	r3, #0
   d69f0:	4604      	mov	r4, r0
   d69f2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d69f4:	2014      	movs	r0, #20
   d69f6:	460d      	mov	r5, r1
   d69f8:	f7fd fb4d 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d69fc:	b128      	cbz	r0, d6a0a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d69fe:	2301      	movs	r3, #1
   d6a00:	6043      	str	r3, [r0, #4]
   d6a02:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6a04:	4b02      	ldr	r3, [pc, #8]	; (d6a10 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6a06:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6a08:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6a0a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6a0c:	4620      	mov	r0, r4
   d6a0e:	bd38      	pop	{r3, r4, r5, pc}
   d6a10:	000d95e0 	.word	0x000d95e0

000d6a14 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d6a14:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6a16:	2500      	movs	r5, #0
   d6a18:	b086      	sub	sp, #24
   d6a1a:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6a1c:	6045      	str	r5, [r0, #4]
   d6a1e:	4604      	mov	r4, r0
   d6a20:	2054      	movs	r0, #84	; 0x54
   d6a22:	f7fd fb38 	bl	d4096 <_Znwj>
   d6a26:	f8cd d010 	str.w	sp, [sp, #16]
   d6a2a:	4606      	mov	r6, r0
   d6a2c:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6a2e:	b108      	cbz	r0, d6a34 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d6a30:	f7ff f8d6 	bl	d5be0 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6a34:	4631      	mov	r1, r6
   d6a36:	ab01      	add	r3, sp, #4
   d6a38:	aa02      	add	r2, sp, #8
   d6a3a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6a3c:	9505      	str	r5, [sp, #20]
   d6a3e:	f7ff ffd5 	bl	d69ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6a42:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6a44:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6a46:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6a48:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6a4a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6a4c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6a4e:	f7ff fb08 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6a52:	a804      	add	r0, sp, #16
   d6a54:	f7ff ffb2 	bl	d69bc <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d6a58:	6823      	ldr	r3, [r4, #0]
   d6a5a:	b90b      	cbnz	r3, d6a60 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d6a5c:	f7fe fd48 	bl	d54f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d6a60:	4620      	mov	r0, r4
   d6a62:	b006      	add	sp, #24
   d6a64:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6a68 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6a6c:	f8df 8104 	ldr.w	r8, [pc, #260]	; d6b74 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6a70:	b08c      	sub	sp, #48	; 0x30
   d6a72:	4605      	mov	r5, r0
   d6a74:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6a76:	2600      	movs	r6, #0
   d6a78:	682b      	ldr	r3, [r5, #0]
   d6a7a:	429e      	cmp	r6, r3
   d6a7c:	d275      	bcs.n	d6b6a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d6a7e:	a802      	add	r0, sp, #8
   d6a80:	f7ff ffc8 	bl	d6a14 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d6a84:	9b02      	ldr	r3, [sp, #8]
   d6a86:	892a      	ldrh	r2, [r5, #8]
   d6a88:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6a8a:	686b      	ldr	r3, [r5, #4]
   d6a8c:	9802      	ldr	r0, [sp, #8]
   d6a8e:	242a      	movs	r4, #42	; 0x2a
   d6a90:	4374      	muls	r4, r6
   d6a92:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d6a94:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6a96:	7e5b      	ldrb	r3, [r3, #25]
   d6a98:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d6a9c:	bf1e      	ittt	ne
   d6a9e:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d6aa2:	f043 0302 	orrne.w	r3, r3, #2
   d6aa6:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d6aaa:	686b      	ldr	r3, [r5, #4]
   d6aac:	4423      	add	r3, r4
   d6aae:	7e5b      	ldrb	r3, [r3, #25]
   d6ab0:	075b      	lsls	r3, r3, #29
   d6ab2:	bf42      	ittt	mi
   d6ab4:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6ab8:	f043 0304 	orrmi.w	r3, r3, #4
   d6abc:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d6ac0:	686b      	ldr	r3, [r5, #4]
   d6ac2:	4423      	add	r3, r4
   d6ac4:	7e5b      	ldrb	r3, [r3, #25]
   d6ac6:	0719      	lsls	r1, r3, #28
   d6ac8:	bf42      	ittt	mi
   d6aca:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6ace:	f043 0308 	orrmi.w	r3, r3, #8
   d6ad2:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d6ad6:	686b      	ldr	r3, [r5, #4]
   d6ad8:	4423      	add	r3, r4
   d6ada:	7e5b      	ldrb	r3, [r3, #25]
   d6adc:	06da      	lsls	r2, r3, #27
   d6ade:	bf42      	ittt	mi
   d6ae0:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6ae4:	f043 0310 	orrmi.w	r3, r3, #16
   d6ae8:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6aec:	686b      	ldr	r3, [r5, #4]
   d6aee:	4423      	add	r3, r4
   d6af0:	7e5b      	ldrb	r3, [r3, #25]
   d6af2:	069b      	lsls	r3, r3, #26
   d6af4:	bf42      	ittt	mi
   d6af6:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6afa:	f043 0320 	orrmi.w	r3, r3, #32
   d6afe:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d6b02:	6869      	ldr	r1, [r5, #4]
   d6b04:	4421      	add	r1, r4
   d6b06:	3104      	adds	r1, #4
   d6b08:	f7fe fe70 	bl	d57ec <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6b0c:	686a      	ldr	r2, [r5, #4]
   d6b0e:	9b02      	ldr	r3, [sp, #8]
   d6b10:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d6b12:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d6b14:	8be2      	ldrh	r2, [r4, #30]
   d6b16:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d6b18:	8c22      	ldrh	r2, [r4, #32]
   d6b1a:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d6b1c:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d6b1e:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d6b20:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d6b22:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d6b24:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d6b26:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d6b28:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d6b2a:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6b2c:	6838      	ldr	r0, [r7, #0]
   d6b2e:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d6b32:	a804      	add	r0, sp, #16
   d6b34:	f7ff fa7d 	bl	d6032 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6b38:	4620      	mov	r0, r4
   d6b3a:	a904      	add	r1, sp, #16
   d6b3c:	f7ff ff14 	bl	d6968 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6b40:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b42:	a805      	add	r0, sp, #20
   d6b44:	f7ff fa8d 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b48:	b954      	cbnz	r4, d6b60 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6b4a:	2320      	movs	r3, #32
   d6b4c:	9304      	str	r3, [sp, #16]
   d6b4e:	f8cd 8000 	str.w	r8, [sp]
   d6b52:	4623      	mov	r3, r4
   d6b54:	aa04      	add	r2, sp, #16
   d6b56:	4906      	ldr	r1, [pc, #24]	; (d6b70 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d6b58:	9405      	str	r4, [sp, #20]
   d6b5a:	2032      	movs	r0, #50	; 0x32
   d6b5c:	f7fe fa8a 	bl	d5074 <log_message>
   d6b60:	a803      	add	r0, sp, #12
   d6b62:	f7ff fa7e 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6b66:	3601      	adds	r6, #1
   d6b68:	e786      	b.n	d6a78 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d6b6a:	b00c      	add	sp, #48	; 0x30
   d6b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b70:	000d962c 	.word	0x000d962c
   d6b74:	000d9729 	.word	0x000d9729

000d6b78 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6b78:	b510      	push	{r4, lr}
   d6b7a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6b7c:	6840      	ldr	r0, [r0, #4]
   d6b7e:	b108      	cbz	r0, d6b84 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6b80:	f7fd fa8b 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6b84:	4620      	mov	r0, r4
   d6b86:	bd10      	pop	{r4, pc}

000d6b88 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6b88:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6b8a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6b8c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6b8e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6b92:	4668      	mov	r0, sp
   d6b94:	f7ff fff0 	bl	d6b78 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6b98:	b003      	add	sp, #12
   d6b9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6ba0:	b538      	push	{r3, r4, r5, lr}
   d6ba2:	2300      	movs	r3, #0
   d6ba4:	4604      	mov	r4, r0
   d6ba6:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6ba8:	2014      	movs	r0, #20
   d6baa:	460d      	mov	r5, r1
   d6bac:	f7fd fa73 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6bb0:	b128      	cbz	r0, d6bbe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6bb2:	2301      	movs	r3, #1
   d6bb4:	6043      	str	r3, [r0, #4]
   d6bb6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6bb8:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6bba:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6bbc:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6bbe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6bc0:	4620      	mov	r0, r4
   d6bc2:	bd38      	pop	{r3, r4, r5, pc}
   d6bc4:	000d95fc 	.word	0x000d95fc

000d6bc8 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d6bc8:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6bca:	2500      	movs	r5, #0
   d6bcc:	b086      	sub	sp, #24
   d6bce:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6bd0:	6045      	str	r5, [r0, #4]
   d6bd2:	4604      	mov	r4, r0
   d6bd4:	2018      	movs	r0, #24
   d6bd6:	f7fd fa5e 	bl	d4096 <_Znwj>
   d6bda:	f8cd d010 	str.w	sp, [sp, #16]
   d6bde:	4606      	mov	r6, r0
   d6be0:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6be2:	b118      	cbz	r0, d6bec <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6be4:	f7fe fd6e 	bl	d56c4 <_ZN8particle7BleUuidC1Ev>
   d6be8:	82b5      	strh	r5, [r6, #20]
   d6bea:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6bec:	4631      	mov	r1, r6
   d6bee:	ab01      	add	r3, sp, #4
   d6bf0:	aa02      	add	r2, sp, #8
   d6bf2:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6bf4:	9505      	str	r5, [sp, #20]
   d6bf6:	f7ff ffd3 	bl	d6ba0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6bfa:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6bfc:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6bfe:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6c00:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6c02:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6c04:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6c06:	f7ff fa2c 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6c0a:	a804      	add	r0, sp, #16
   d6c0c:	f7ff ffb4 	bl	d6b78 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d6c10:	6823      	ldr	r3, [r4, #0]
   d6c12:	b90b      	cbnz	r3, d6c18 <_ZN8particle10BleServiceC1Ev+0x50>
   d6c14:	f7fe fc6c 	bl	d54f0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6c18:	4620      	mov	r0, r4
   d6c1a:	b006      	add	sp, #24
   d6c1c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6c20 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d6c24:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6ca8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6c28:	b08c      	sub	sp, #48	; 0x30
   d6c2a:	4606      	mov	r6, r0
   d6c2c:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6c2e:	2500      	movs	r5, #0
   d6c30:	6833      	ldr	r3, [r6, #0]
   d6c32:	429d      	cmp	r5, r3
   d6c34:	d233      	bcs.n	d6c9e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d6c36:	a802      	add	r0, sp, #8
   d6c38:	f7ff ffc6 	bl	d6bc8 <_ZN8particle10BleServiceC1Ev>
   d6c3c:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d6c3e:	6871      	ldr	r1, [r6, #4]
   d6c40:	9802      	ldr	r0, [sp, #8]
   d6c42:	436c      	muls	r4, r5
   d6c44:	4421      	add	r1, r4
   d6c46:	3104      	adds	r1, #4
   d6c48:	f7fe fdd0 	bl	d57ec <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d6c4c:	6873      	ldr	r3, [r6, #4]
   d6c4e:	9a02      	ldr	r2, [sp, #8]
   d6c50:	4423      	add	r3, r4
   d6c52:	a902      	add	r1, sp, #8
   d6c54:	8b1b      	ldrh	r3, [r3, #24]
   d6c56:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d6c58:	6873      	ldr	r3, [r6, #4]
   d6c5a:	441c      	add	r4, r3
   d6c5c:	8b63      	ldrh	r3, [r4, #26]
   d6c5e:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d6c60:	6838      	ldr	r0, [r7, #0]
   d6c62:	f100 040c 	add.w	r4, r0, #12
   d6c66:	a804      	add	r0, sp, #16
   d6c68:	f7ff f9f1 	bl	d604e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d6c6c:	4620      	mov	r0, r4
   d6c6e:	a904      	add	r1, sp, #16
   d6c70:	f7ff fd2b 	bl	d66ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6c74:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6c76:	a805      	add	r0, sp, #20
   d6c78:	f7ff f9f3 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c7c:	b954      	cbnz	r4, d6c94 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d6c7e:	2320      	movs	r3, #32
   d6c80:	9304      	str	r3, [sp, #16]
   d6c82:	f8cd 8000 	str.w	r8, [sp]
   d6c86:	4623      	mov	r3, r4
   d6c88:	aa04      	add	r2, sp, #16
   d6c8a:	4906      	ldr	r1, [pc, #24]	; (d6ca4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d6c8c:	9405      	str	r4, [sp, #20]
   d6c8e:	2032      	movs	r0, #50	; 0x32
   d6c90:	f7fe f9f0 	bl	d5074 <log_message>
   d6c94:	a803      	add	r0, sp, #12
   d6c96:	f7ff f9e4 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6c9a:	3501      	adds	r5, #1
   d6c9c:	e7c8      	b.n	d6c30 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d6c9e:	b00c      	add	sp, #48	; 0x30
   d6ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6ca4:	000d962c 	.word	0x000d962c
   d6ca8:	000d9755 	.word	0x000d9755

000d6cac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6cac:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6cae:	4c06      	ldr	r4, [pc, #24]	; (d6cc8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6cb0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6cb2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6cb4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6cb6:	f7fe f8f5 	bl	d4ea4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6cba:	4620      	mov	r0, r4
   d6cbc:	4a03      	ldr	r2, [pc, #12]	; (d6ccc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6cbe:	4904      	ldr	r1, [pc, #16]	; (d6cd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6cc4:	f001 be47 	b.w	d8956 <__aeabi_atexit>
   d6cc8:	2003e3d4 	.word	0x2003e3d4
   d6ccc:	2003d8d0 	.word	0x2003d8d0
   d6cd0:	000d54a5 	.word	0x000d54a5

000d6cd4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cd6:	4606      	mov	r6, r0
   d6cd8:	460d      	mov	r5, r1
   d6cda:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6cdc:	2400      	movs	r4, #0
  while (size--) {
   d6cde:	42bd      	cmp	r5, r7
   d6ce0:	d00c      	beq.n	d6cfc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6ce2:	6833      	ldr	r3, [r6, #0]
   d6ce4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6ce8:	689b      	ldr	r3, [r3, #8]
   d6cea:	4630      	mov	r0, r6
   d6cec:	4798      	blx	r3
     if (chunk>=0)
   d6cee:	2800      	cmp	r0, #0
   d6cf0:	db01      	blt.n	d6cf6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6cf2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6cf4:	e7f3      	b.n	d6cde <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6cf6:	2c00      	cmp	r4, #0
   d6cf8:	bf08      	it	eq
   d6cfa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6cfc:	4620      	mov	r0, r4
   d6cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d00 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6d00:	b570      	push	{r4, r5, r6, lr}
   d6d02:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6d04:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6d06:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6d08:	b149      	cbz	r1, d6d1e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6d0a:	f002 f829 	bl	d8d60 <strlen>
   d6d0e:	682b      	ldr	r3, [r5, #0]
   d6d10:	4602      	mov	r2, r0
   d6d12:	4621      	mov	r1, r4
   d6d14:	4628      	mov	r0, r5
   d6d16:	68db      	ldr	r3, [r3, #12]
    }
   d6d18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6d1c:	4718      	bx	r3
    }
   d6d1e:	bd70      	pop	{r4, r5, r6, pc}

000d6d20 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6d20:	6803      	ldr	r3, [r0, #0]
   d6d22:	689b      	ldr	r3, [r3, #8]
   d6d24:	4718      	bx	r3

000d6d26 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6d26:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6d28:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6d2a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6d2c:	f7ff fff8 	bl	d6d20 <_ZN5Print5printEc>
  n += print('\n');
   d6d30:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6d32:	4604      	mov	r4, r0
  n += print('\n');
   d6d34:	4628      	mov	r0, r5
   d6d36:	f7ff fff3 	bl	d6d20 <_ZN5Print5printEc>
  return n;
}
   d6d3a:	4420      	add	r0, r4
   d6d3c:	bd38      	pop	{r3, r4, r5, pc}

000d6d3e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6d3e:	b530      	push	{r4, r5, lr}
   d6d40:	b08b      	sub	sp, #44	; 0x2c
   d6d42:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6d44:	2100      	movs	r1, #0
   d6d46:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6d4a:	2a01      	cmp	r2, #1
   d6d4c:	bf98      	it	ls
   d6d4e:	220a      	movls	r2, #10
   d6d50:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6d54:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6d58:	fb05 3312 	mls	r3, r5, r2, r3
   d6d5c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6d60:	2b09      	cmp	r3, #9
   d6d62:	bf94      	ite	ls
   d6d64:	3330      	addls	r3, #48	; 0x30
   d6d66:	3337      	addhi	r3, #55	; 0x37
   d6d68:	b2db      	uxtb	r3, r3
   d6d6a:	4621      	mov	r1, r4
   d6d6c:	f804 3901 	strb.w	r3, [r4], #-1
   d6d70:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6d72:	2d00      	cmp	r5, #0
   d6d74:	d1ee      	bne.n	d6d54 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6d76:	f7ff ffc3 	bl	d6d00 <_ZN5Print5writeEPKc>
}
   d6d7a:	b00b      	add	sp, #44	; 0x2c
   d6d7c:	bd30      	pop	{r4, r5, pc}

000d6d7e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d7e:	b40c      	push	{r2, r3}
   d6d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6d84:	b087      	sub	sp, #28
   d6d86:	af00      	add	r7, sp, #0
   d6d88:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6d8c:	4605      	mov	r5, r0
   d6d8e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6d92:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6d94:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6d96:	4623      	mov	r3, r4
   d6d98:	464a      	mov	r2, r9
   d6d9a:	2114      	movs	r1, #20
   d6d9c:	1d38      	adds	r0, r7, #4
   d6d9e:	f7fe fa45 	bl	d522c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6da2:	2813      	cmp	r0, #19
   d6da4:	d805      	bhi.n	d6db2 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6da6:	1d39      	adds	r1, r7, #4
   d6da8:	4628      	mov	r0, r5
   d6daa:	f7ff ffa9 	bl	d6d00 <_ZN5Print5writeEPKc>
   d6dae:	4604      	mov	r4, r0
   d6db0:	e013      	b.n	d6dda <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6db2:	f100 0308 	add.w	r3, r0, #8
   d6db6:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6dba:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6dbc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6dc0:	1c41      	adds	r1, r0, #1
   d6dc2:	4623      	mov	r3, r4
   d6dc4:	464a      	mov	r2, r9
   d6dc6:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6dc8:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6dca:	f7fe fa2f 	bl	d522c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6dce:	4669      	mov	r1, sp
   d6dd0:	4628      	mov	r0, r5
   d6dd2:	f7ff ff95 	bl	d6d00 <_ZN5Print5writeEPKc>
   d6dd6:	4604      	mov	r4, r0
   d6dd8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6dda:	b11e      	cbz	r6, d6de4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6ddc:	4628      	mov	r0, r5
   d6dde:	f7ff ffa2 	bl	d6d26 <_ZN5Print7printlnEv>
   d6de2:	4404      	add	r4, r0
    return n;
}
   d6de4:	4620      	mov	r0, r4
   d6de6:	371c      	adds	r7, #28
   d6de8:	46bd      	mov	sp, r7
   d6dea:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6dee:	b002      	add	sp, #8
   d6df0:	4770      	bx	lr

000d6df2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6df2:	6880      	ldr	r0, [r0, #8]
   d6df4:	6803      	ldr	r3, [r0, #0]
   d6df6:	68db      	ldr	r3, [r3, #12]
   d6df8:	4718      	bx	r3

000d6dfa <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6dfa:	4770      	bx	lr

000d6dfc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6dfc:	b119      	cbz	r1, d6e06 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6dfe:	680b      	ldr	r3, [r1, #0]
   d6e00:	4608      	mov	r0, r1
   d6e02:	685b      	ldr	r3, [r3, #4]
   d6e04:	4718      	bx	r3
   d6e06:	4770      	bx	lr

000d6e08 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6e08:	b119      	cbz	r1, d6e12 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6e0a:	680b      	ldr	r3, [r1, #0]
   d6e0c:	4608      	mov	r0, r1
   d6e0e:	685b      	ldr	r3, [r3, #4]
   d6e10:	4718      	bx	r3
   d6e12:	4770      	bx	lr

000d6e14 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6e14:	4770      	bx	lr

000d6e16 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d6e16:	4770      	bx	lr

000d6e18 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d6e18:	4770      	bx	lr

000d6e1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6e1a:	b538      	push	{r3, r4, r5, lr}
   d6e1c:	4604      	mov	r4, r0
   d6e1e:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6e20:	6800      	ldr	r0, [r0, #0]
   d6e22:	212e      	movs	r1, #46	; 0x2e
   d6e24:	f001 ff80 	bl	d8d28 <strchrnul>
    size = s - category;
   d6e28:	6823      	ldr	r3, [r4, #0]
   d6e2a:	1ac3      	subs	r3, r0, r3
   d6e2c:	602b      	str	r3, [r5, #0]
    if (size) {
   d6e2e:	b123      	cbz	r3, d6e3a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6e30:	7803      	ldrb	r3, [r0, #0]
   d6e32:	b103      	cbz	r3, d6e36 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d6e34:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6e36:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e38:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d6e3a:	4618      	mov	r0, r3
}
   d6e3c:	bd38      	pop	{r3, r4, r5, pc}

000d6e3e <_ZN5spark16JSONStreamWriterD0Ev>:
   d6e3e:	b510      	push	{r4, lr}
   d6e40:	210c      	movs	r1, #12
   d6e42:	4604      	mov	r4, r0
   d6e44:	f001 fd94 	bl	d8970 <_ZdlPvj>
   d6e48:	4620      	mov	r0, r4
   d6e4a:	bd10      	pop	{r4, pc}

000d6e4c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6e4c:	b510      	push	{r4, lr}
   d6e4e:	2104      	movs	r1, #4
   d6e50:	4604      	mov	r4, r0
   d6e52:	f001 fd8d 	bl	d8970 <_ZdlPvj>
   d6e56:	4620      	mov	r0, r4
   d6e58:	bd10      	pop	{r4, pc}

000d6e5a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6e5a:	b510      	push	{r4, lr}
   d6e5c:	2104      	movs	r1, #4
   d6e5e:	4604      	mov	r4, r0
   d6e60:	f001 fd86 	bl	d8970 <_ZdlPvj>
   d6e64:	4620      	mov	r0, r4
   d6e66:	bd10      	pop	{r4, pc}

000d6e68 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6e68:	b538      	push	{r3, r4, r5, lr}
   d6e6a:	460c      	mov	r4, r1
   d6e6c:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6e6e:	f001 f95f 	bl	d8130 <_Z16_fetch_usbserialv>
   d6e72:	4284      	cmp	r4, r0
   d6e74:	d00d      	beq.n	d6e92 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6e76:	f001 f9e3 	bl	d8240 <_Z22__fetch_global_Serial1v>
   d6e7a:	4284      	cmp	r4, r0
   d6e7c:	d105      	bne.n	d6e8a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d6e7e:	f001 f9df 	bl	d8240 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d6e86:	f001 b9d8 	b.w	d823a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d6e8a:	4621      	mov	r1, r4
   d6e8c:	4628      	mov	r0, r5
   d6e8e:	f7ff ffbb 	bl	d6e08 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d6e92:	bd38      	pop	{r3, r4, r5, pc}

000d6e94 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d6e94:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6e96:	f001 ff51 	bl	d8d3c <strcmp>
}
   d6e9a:	fab0 f080 	clz	r0, r0
   d6e9e:	0940      	lsrs	r0, r0, #5
   d6ea0:	bd08      	pop	{r3, pc}

000d6ea2 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6ea2:	b538      	push	{r3, r4, r5, lr}
   d6ea4:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d6ea6:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6ea8:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d6eaa:	f001 ff59 	bl	d8d60 <strlen>
   d6eae:	4621      	mov	r1, r4
   d6eb0:	4602      	mov	r2, r0
   d6eb2:	4628      	mov	r0, r5
}
   d6eb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6eb8:	f001 bceb 	b.w	d8892 <_ZN5spark10JSONWriter5valueEPKcj>

000d6ebc <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6ebc:	6800      	ldr	r0, [r0, #0]
   d6ebe:	f7fe b801 	b.w	d4ec4 <os_mutex_recursive_lock>

000d6ec2 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6ec2:	b570      	push	{r4, r5, r6, lr}
   d6ec4:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6ec6:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6ec8:	460d      	mov	r5, r1
    write(str, strlen(str));
   d6eca:	f001 ff49 	bl	d8d60 <strlen>
   d6ece:	6823      	ldr	r3, [r4, #0]
   d6ed0:	4602      	mov	r2, r0
   d6ed2:	4629      	mov	r1, r5
   d6ed4:	4620      	mov	r0, r4
   d6ed6:	68db      	ldr	r3, [r3, #12]
}
   d6ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6edc:	4718      	bx	r3

000d6ede <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d6ede:	b513      	push	{r0, r1, r4, lr}
   d6ee0:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d6ee2:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6ee4:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6ee8:	68d4      	ldr	r4, [r2, #12]
   d6eea:	4619      	mov	r1, r3
   d6eec:	2201      	movs	r2, #1
   d6eee:	47a0      	blx	r4
}
   d6ef0:	b002      	add	sp, #8
   d6ef2:	bd10      	pop	{r4, pc}

000d6ef4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6ef8:	6845      	ldr	r5, [r0, #4]
   d6efa:	6807      	ldr	r7, [r0, #0]
   d6efc:	b085      	sub	sp, #20
   d6efe:	4691      	mov	r9, r2
   d6f00:	2214      	movs	r2, #20
   d6f02:	4355      	muls	r5, r2
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	10ab      	asrs	r3, r5, #2
   d6f08:	4d19      	ldr	r5, [pc, #100]	; (d6f70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6f0a:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6f0c:	435d      	muls	r5, r3
   d6f0e:	468b      	mov	fp, r1
   d6f10:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6f12:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d6f14:	2d00      	cmp	r5, #0
   d6f16:	9303      	str	r3, [sp, #12]
   d6f18:	dd23      	ble.n	d6f62 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6f1a:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6f1c:	106e      	asrs	r6, r5, #1
   d6f1e:	fb03 f006 	mul.w	r0, r3, r6
   d6f22:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d6f26:	464a      	mov	r2, r9
   d6f28:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6f2c:	5820      	ldr	r0, [r4, r0]
   d6f2e:	45d1      	cmp	r9, sl
   d6f30:	bf28      	it	cs
   d6f32:	4652      	movcs	r2, sl
   d6f34:	4659      	mov	r1, fp
   d6f36:	f001 ff1b 	bl	d8d70 <strncmp>
                if (cmp == 0) {
   d6f3a:	9b03      	ldr	r3, [sp, #12]
   d6f3c:	b948      	cbnz	r0, d6f52 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d6f3e:	45d1      	cmp	r9, sl
   d6f40:	d103      	bne.n	d6f4a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6f42:	9a01      	ldr	r2, [sp, #4]
   d6f44:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6f46:	4635      	mov	r5, r6
   d6f48:	e7e4      	b.n	d6f14 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d6f4a:	bf8c      	ite	hi
   d6f4c:	2001      	movhi	r0, #1
   d6f4e:	2000      	movls	r0, #0
   d6f50:	e000      	b.n	d6f54 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d6f52:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d6f54:	2800      	cmp	r0, #0
   d6f56:	d0f6      	beq.n	d6f46 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6f58:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d6f5a:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d6f5e:	3e01      	subs	r6, #1
   d6f60:	e7f1      	b.n	d6f46 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d6f62:	1be4      	subs	r4, r4, r7
}
   d6f64:	4802      	ldr	r0, [pc, #8]	; (d6f70 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d6f66:	10a4      	asrs	r4, r4, #2
}
   d6f68:	4360      	muls	r0, r4
   d6f6a:	b005      	add	sp, #20
   d6f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6f70:	cccccccd 	.word	0xcccccccd

000d6f74 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6f74:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f76:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d6f78:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6f7a:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d6f7c:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d6f7e:	b313      	cbz	r3, d6fc6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d6f80:	b309      	cbz	r1, d6fc6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6f82:	af04      	add	r7, sp, #16
   d6f84:	2300      	movs	r3, #0
   d6f86:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6f8a:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6f8e:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6f90:	4639      	mov	r1, r7
   d6f92:	a801      	add	r0, sp, #4
   d6f94:	f7ff ff41 	bl	d6e1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6f98:	4601      	mov	r1, r0
   d6f9a:	b1a0      	cbz	r0, d6fc6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6f9c:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d6f9e:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6fa0:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6fa4:	4620      	mov	r0, r4
   d6fa6:	f7ff ffa5 	bl	d6ef4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6faa:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6fae:	b153      	cbz	r3, d6fc6 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d6fb0:	6823      	ldr	r3, [r4, #0]
   d6fb2:	2414      	movs	r4, #20
   d6fb4:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6fb8:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6fba:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d6fbe:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6fc0:	bfa8      	it	ge
   d6fc2:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6fc4:	e7e4      	b.n	d6f90 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d6fc6:	4630      	mov	r0, r6
   d6fc8:	b005      	add	sp, #20
   d6fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fcc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6fcc:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6fce:	4c09      	ldr	r4, [pc, #36]	; (d6ff4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d6fd0:	6823      	ldr	r3, [r4, #0]
   d6fd2:	07db      	lsls	r3, r3, #31
   d6fd4:	d40b      	bmi.n	d6fee <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6fd6:	4620      	mov	r0, r4
   d6fd8:	f7fd f86e 	bl	d40b8 <__cxa_guard_acquire>
   d6fdc:	b138      	cbz	r0, d6fee <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6fde:	4620      	mov	r0, r4
   d6fe0:	f7fd f86f 	bl	d40c2 <__cxa_guard_release>
   d6fe4:	4a04      	ldr	r2, [pc, #16]	; (d6ff8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6fe6:	4905      	ldr	r1, [pc, #20]	; (d6ffc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6fe8:	4805      	ldr	r0, [pc, #20]	; (d7000 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6fea:	f001 fcb4 	bl	d8956 <__aeabi_atexit>
    return &factory;
}
   d6fee:	4804      	ldr	r0, [pc, #16]	; (d7000 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6ff0:	bd10      	pop	{r4, pc}
   d6ff2:	bf00      	nop
   d6ff4:	2003e3d8 	.word	0x2003e3d8
   d6ff8:	2003d8d0 	.word	0x2003d8d0
   d6ffc:	000d6e17 	.word	0x000d6e17
   d7000:	2003d860 	.word	0x2003d860

000d7004 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d7004:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d7006:	4c09      	ldr	r4, [pc, #36]	; (d702c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d7008:	6823      	ldr	r3, [r4, #0]
   d700a:	07db      	lsls	r3, r3, #31
   d700c:	d40b      	bmi.n	d7026 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d700e:	4620      	mov	r0, r4
   d7010:	f7fd f852 	bl	d40b8 <__cxa_guard_acquire>
   d7014:	b138      	cbz	r0, d7026 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7016:	4620      	mov	r0, r4
   d7018:	f7fd f853 	bl	d40c2 <__cxa_guard_release>
   d701c:	4a04      	ldr	r2, [pc, #16]	; (d7030 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d701e:	4905      	ldr	r1, [pc, #20]	; (d7034 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7020:	4805      	ldr	r0, [pc, #20]	; (d7038 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d7022:	f001 fc98 	bl	d8956 <__aeabi_atexit>
    return &factory;
}
   d7026:	4804      	ldr	r0, [pc, #16]	; (d7038 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d7028:	bd10      	pop	{r4, pc}
   d702a:	bf00      	nop
   d702c:	2003e408 	.word	0x2003e408
   d7030:	2003d8d0 	.word	0x2003d8d0
   d7034:	000d6e15 	.word	0x000d6e15
   d7038:	2003d85c 	.word	0x2003d85c

000d703c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d703c:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d703e:	2500      	movs	r5, #0
   d7040:	4604      	mov	r4, r0
   d7042:	6005      	str	r5, [r0, #0]
   d7044:	6045      	str	r5, [r0, #4]
   d7046:	6085      	str	r5, [r0, #8]
   d7048:	6105      	str	r5, [r0, #16]
   d704a:	6145      	str	r5, [r0, #20]
   d704c:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d704e:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d7052:	f7fd ff27 	bl	d4ea4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d7056:	f7ff ffb9 	bl	d6fcc <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d705a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d705c:	f7ff ffd2 	bl	d7004 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d7060:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7062:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d7064:	4620      	mov	r0, r4
   d7066:	bd38      	pop	{r3, r4, r5, pc}

000d7068 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d7068:	b510      	push	{r4, lr}
    static LogManager mgr;
   d706a:	4c0a      	ldr	r4, [pc, #40]	; (d7094 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d706c:	6823      	ldr	r3, [r4, #0]
   d706e:	07db      	lsls	r3, r3, #31
   d7070:	d40e      	bmi.n	d7090 <_ZN5spark10LogManager8instanceEv+0x28>
   d7072:	4620      	mov	r0, r4
   d7074:	f7fd f820 	bl	d40b8 <__cxa_guard_acquire>
   d7078:	b150      	cbz	r0, d7090 <_ZN5spark10LogManager8instanceEv+0x28>
   d707a:	4807      	ldr	r0, [pc, #28]	; (d7098 <_ZN5spark10LogManager8instanceEv+0x30>)
   d707c:	f7ff ffde 	bl	d703c <_ZN5spark10LogManagerC1Ev>
   d7080:	4620      	mov	r0, r4
   d7082:	f7fd f81e 	bl	d40c2 <__cxa_guard_release>
   d7086:	4a05      	ldr	r2, [pc, #20]	; (d709c <_ZN5spark10LogManager8instanceEv+0x34>)
   d7088:	4905      	ldr	r1, [pc, #20]	; (d70a0 <_ZN5spark10LogManager8instanceEv+0x38>)
   d708a:	4803      	ldr	r0, [pc, #12]	; (d7098 <_ZN5spark10LogManager8instanceEv+0x30>)
   d708c:	f001 fc63 	bl	d8956 <__aeabi_atexit>
    return &mgr;
}
   d7090:	4801      	ldr	r0, [pc, #4]	; (d7098 <_ZN5spark10LogManager8instanceEv+0x30>)
   d7092:	bd10      	pop	{r4, pc}
   d7094:	2003e3dc 	.word	0x2003e3dc
   d7098:	2003e3e0 	.word	0x2003e3e0
   d709c:	2003d8d0 	.word	0x2003d8d0
   d70a0:	000d74d3 	.word	0x000d74d3

000d70a4 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d70a4:	2300      	movs	r3, #0
   d70a6:	4a02      	ldr	r2, [pc, #8]	; (d70b0 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d70a8:	4902      	ldr	r1, [pc, #8]	; (d70b4 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d70aa:	4803      	ldr	r0, [pc, #12]	; (d70b8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d70ac:	f7fd bffa 	b.w	d50a4 <log_set_callbacks>
   d70b0:	000d73b5 	.word	0x000d73b5
   d70b4:	000d7345 	.word	0x000d7345
   d70b8:	000d72cd 	.word	0x000d72cd

000d70bc <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d70bc:	2300      	movs	r3, #0
   d70be:	461a      	mov	r2, r3
   d70c0:	4619      	mov	r1, r3
   d70c2:	4618      	mov	r0, r3
   d70c4:	f7fd bfee 	b.w	d50a4 <log_set_callbacks>

000d70c8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d70c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70ca:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d70cc:	688e      	ldr	r6, [r1, #8]
   d70ce:	f851 3b04 	ldr.w	r3, [r1], #4
   d70d2:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d70d6:	4605      	mov	r5, r0
   d70d8:	a801      	add	r0, sp, #4
   d70da:	f7fe ffa3 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d70de:	4622      	mov	r2, r4
   d70e0:	4631      	mov	r1, r6
   d70e2:	4628      	mov	r0, r5
   d70e4:	f001 fc0c 	bl	d8900 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d70e8:	a801      	add	r0, sp, #4
   d70ea:	f7fe ffba 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70ee:	4628      	mov	r0, r5
   d70f0:	b002      	add	sp, #8
   d70f2:	bd70      	pop	{r4, r5, r6, pc}

000d70f4 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d70f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d70f6:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d70f8:	690e      	ldr	r6, [r1, #16]
   d70fa:	f851 3b04 	ldr.w	r3, [r1], #4
   d70fe:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7102:	4605      	mov	r5, r0
   d7104:	a801      	add	r0, sp, #4
   d7106:	f7fe ff8d 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d710a:	4622      	mov	r2, r4
   d710c:	4631      	mov	r1, r6
   d710e:	4628      	mov	r0, r5
   d7110:	f001 fc11 	bl	d8936 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7114:	a801      	add	r0, sp, #4
   d7116:	f7fe ffa4 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d711a:	4628      	mov	r0, r5
   d711c:	b002      	add	sp, #8
   d711e:	bd70      	pop	{r4, r5, r6, pc}

000d7120 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7120:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7122:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d7124:	68ce      	ldr	r6, [r1, #12]
   d7126:	f851 3b04 	ldr.w	r3, [r1], #4
   d712a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d712e:	4605      	mov	r5, r0
   d7130:	a801      	add	r0, sp, #4
   d7132:	f7fe ff77 	bl	d6024 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d7136:	4622      	mov	r2, r4
   d7138:	4631      	mov	r1, r6
   d713a:	4628      	mov	r0, r5
   d713c:	f001 fbb8 	bl	d88b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7140:	a801      	add	r0, sp, #4
   d7142:	f7fe ff8e 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7146:	4628      	mov	r0, r5
   d7148:	b002      	add	sp, #8
   d714a:	bd70      	pop	{r4, r5, r6, pc}

000d714c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d714c:	b530      	push	{r4, r5, lr}
   d714e:	b08b      	sub	sp, #44	; 0x2c
   d7150:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d7152:	4601      	mov	r1, r0
   d7154:	a804      	add	r0, sp, #16
   d7156:	f7ff ffb7 	bl	d70c8 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d715a:	a804      	add	r0, sp, #16
   d715c:	f001 fadb 	bl	d8716 <_ZN5spark18JSONObjectIterator4nextEv>
   d7160:	b1e8      	cbz	r0, d719e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d7162:	a904      	add	r1, sp, #16
   d7164:	4668      	mov	r0, sp
   d7166:	f7ff ffdb 	bl	d7120 <_ZNK5spark18JSONObjectIterator4nameEv>
   d716a:	490f      	ldr	r1, [pc, #60]	; (d71a8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d716c:	9802      	ldr	r0, [sp, #8]
   d716e:	f7ff fe91 	bl	d6e94 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d7172:	4604      	mov	r4, r0
   d7174:	b110      	cbz	r0, d717c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d7176:	1c2c      	adds	r4, r5, #0
   d7178:	bf18      	it	ne
   d717a:	2401      	movne	r4, #1
   d717c:	a801      	add	r0, sp, #4
   d717e:	f7fe ff70 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7182:	2c00      	cmp	r4, #0
   d7184:	d0e9      	beq.n	d715a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d7186:	a904      	add	r1, sp, #16
   d7188:	4668      	mov	r0, sp
   d718a:	f7ff ffb3 	bl	d70f4 <_ZNK5spark18JSONObjectIterator5valueEv>
   d718e:	4668      	mov	r0, sp
   d7190:	f001 faa1 	bl	d86d6 <_ZNK5spark9JSONValue5toIntEv>
   d7194:	6028      	str	r0, [r5, #0]
   d7196:	a801      	add	r0, sp, #4
   d7198:	f7fe ff63 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d719c:	e7dd      	b.n	d715a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d719e:	a805      	add	r0, sp, #20
   d71a0:	f7fe ff5f 	bl	d6062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d71a4:	b00b      	add	sp, #44	; 0x2c
   d71a6:	bd30      	pop	{r4, r5, pc}
   d71a8:	000d980c 	.word	0x000d980c

000d71ac <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d71ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d71ae:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d71b0:	4620      	mov	r0, r4
   d71b2:	4913      	ldr	r1, [pc, #76]	; (d7200 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d71b4:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d71b6:	f001 fdc1 	bl	d8d3c <strcmp>
   d71ba:	b940      	cbnz	r0, d71ce <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d71bc:	f000 ffb8 	bl	d8130 <_Z16_fetch_usbserialv>
   d71c0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d71c4:	f000 ffa4 	bl	d8110 <_ZN9USBSerial5beginEl>
        return &Serial;
   d71c8:	f000 ffb2 	bl	d8130 <_Z16_fetch_usbserialv>
   d71cc:	e015      	b.n	d71fa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d71ce:	490d      	ldr	r1, [pc, #52]	; (d7204 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d71d0:	4620      	mov	r0, r4
   d71d2:	f001 fdb3 	bl	d8d3c <strcmp>
   d71d6:	b978      	cbnz	r0, d71f8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d71d8:	a902      	add	r1, sp, #8
   d71da:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d71de:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d71e2:	4628      	mov	r0, r5
   d71e4:	f7ff ffb2 	bl	d714c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d71e8:	f001 f82a 	bl	d8240 <_Z22__fetch_global_Serial1v>
   d71ec:	9901      	ldr	r1, [sp, #4]
   d71ee:	f001 f821 	bl	d8234 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d71f2:	f001 f825 	bl	d8240 <_Z22__fetch_global_Serial1v>
   d71f6:	e000      	b.n	d71fa <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d71f8:	2000      	movs	r0, #0
}
   d71fa:	b003      	add	sp, #12
   d71fc:	bd30      	pop	{r4, r5, pc}
   d71fe:	bf00      	nop
   d7200:	000d9811 	.word	0x000d9811
   d7204:	000d9818 	.word	0x000d9818

000d7208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7208:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d720a:	6804      	ldr	r4, [r0, #0]
   d720c:	6843      	ldr	r3, [r0, #4]
   d720e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7210:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7212:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7216:	42a6      	cmp	r6, r4
   d7218:	d005      	beq.n	d7226 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d721a:	f104 0008 	add.w	r0, r4, #8
   d721e:	f7ff fff3 	bl	d7208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7222:	3414      	adds	r4, #20
   d7224:	e7f7      	b.n	d7216 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7226:	6828      	ldr	r0, [r5, #0]
   d7228:	f7fd fff0 	bl	d520c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d722c:	4628      	mov	r0, r5
   d722e:	bd70      	pop	{r4, r5, r6, pc}

000d7230 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7230:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7232:	6804      	ldr	r4, [r0, #0]
   d7234:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7236:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7238:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d723c:	42a6      	cmp	r6, r4
   d723e:	d004      	beq.n	d724a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7240:	4620      	mov	r0, r4
   d7242:	f7fe f863 	bl	d530c <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7246:	3410      	adds	r4, #16
   d7248:	e7f8      	b.n	d723c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d724a:	6828      	ldr	r0, [r5, #0]
   d724c:	f7fd ffde 	bl	d520c <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7250:	4628      	mov	r0, r5
   d7252:	bd70      	pop	{r4, r5, r6, pc}

000d7254 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d7254:	b510      	push	{r4, lr}
   d7256:	4604      	mov	r4, r0
   d7258:	300c      	adds	r0, #12
   d725a:	f7ff ffd5 	bl	d7208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d725e:	4620      	mov	r0, r4
   d7260:	f7ff ffe6 	bl	d7230 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7264:	4620      	mov	r0, r4
   d7266:	bd10      	pop	{r4, pc}

000d7268 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7268:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d726a:	4b04      	ldr	r3, [pc, #16]	; (d727c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d726c:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d726e:	f840 3b04 	str.w	r3, [r0], #4
   d7272:	f7ff ffef 	bl	d7254 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7276:	4620      	mov	r0, r4
   d7278:	bd10      	pop	{r4, pc}
   d727a:	bf00      	nop
   d727c:	000d8f14 	.word	0x000d8f14

000d7280 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7280:	b510      	push	{r4, lr}
   d7282:	4604      	mov	r4, r0
   d7284:	f7ff fff0 	bl	d7268 <_ZN5spark16StreamLogHandlerD1Ev>
   d7288:	4620      	mov	r0, r4
   d728a:	2124      	movs	r1, #36	; 0x24
   d728c:	f001 fb70 	bl	d8970 <_ZdlPvj>
   d7290:	4620      	mov	r0, r4
   d7292:	bd10      	pop	{r4, pc}

000d7294 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d7294:	b510      	push	{r4, lr}
   d7296:	4b03      	ldr	r3, [pc, #12]	; (d72a4 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7298:	6003      	str	r3, [r0, #0]
   d729a:	4604      	mov	r4, r0
   d729c:	f7ff ffe4 	bl	d7268 <_ZN5spark16StreamLogHandlerD1Ev>
   d72a0:	4620      	mov	r0, r4
   d72a2:	bd10      	pop	{r4, pc}
   d72a4:	000d97fc 	.word	0x000d97fc

000d72a8 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d72a8:	b510      	push	{r4, lr}
   d72aa:	4604      	mov	r4, r0
   d72ac:	f7ff fff2 	bl	d7294 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d72b0:	4620      	mov	r0, r4
   d72b2:	2124      	movs	r1, #36	; 0x24
   d72b4:	f001 fb5c 	bl	d8970 <_ZdlPvj>
   d72b8:	4620      	mov	r0, r4
   d72ba:	bd10      	pop	{r4, pc}

000d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d72bc:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d72be:	6803      	ldr	r3, [r0, #0]
   d72c0:	4604      	mov	r4, r0
   d72c2:	6818      	ldr	r0, [r3, #0]
   d72c4:	f7fd fe06 	bl	d4ed4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d72c8:	4620      	mov	r0, r4
   d72ca:	bd10      	pop	{r4, pc}

000d72cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d72cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d72d0:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d72d2:	4b1b      	ldr	r3, [pc, #108]	; (d7340 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d72d4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d72d6:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d72da:	b085      	sub	sp, #20
   d72dc:	4682      	mov	sl, r0
   d72de:	460e      	mov	r6, r1
   d72e0:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d72e2:	bb53      	cbnz	r3, d733a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d72e4:	f7ff fec0 	bl	d7068 <_ZN5spark10LogManager8instanceEv>
   d72e8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d72ea:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d72ec:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d72ee:	f7ff fde5 	bl	d6ebc <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d72f2:	7b23      	ldrb	r3, [r4, #12]
   d72f4:	b9f3      	cbnz	r3, d7334 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d72f6:	2301      	movs	r3, #1
   d72f8:	7323      	strb	r3, [r4, #12]
   d72fa:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d72fc:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d72fe:	b2f6      	uxtb	r6, r6
   d7300:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d7304:	454d      	cmp	r5, r9
   d7306:	d013      	beq.n	d7330 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d7308:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d730c:	4641      	mov	r1, r8
   d730e:	1d38      	adds	r0, r7, #4
   d7310:	f7ff fe30 	bl	d6f74 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7314:	4286      	cmp	r6, r0
   d7316:	d3f5      	bcc.n	d7304 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d7318:	683b      	ldr	r3, [r7, #0]
   d731a:	f8cd b000 	str.w	fp, [sp]
   d731e:	689b      	ldr	r3, [r3, #8]
   d7320:	469e      	mov	lr, r3
   d7322:	4638      	mov	r0, r7
   d7324:	4643      	mov	r3, r8
   d7326:	4632      	mov	r2, r6
   d7328:	4651      	mov	r1, sl
   d732a:	4677      	mov	r7, lr
   d732c:	47b8      	blx	r7
   d732e:	e7e9      	b.n	d7304 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7330:	2300      	movs	r3, #0
   d7332:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d7334:	a803      	add	r0, sp, #12
   d7336:	f7ff ffc1 	bl	d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d733a:	b005      	add	sp, #20
   d733c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7340:	e000ed00 	.word	0xe000ed00

000d7344 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7348:	4699      	mov	r9, r3
   d734a:	4b19      	ldr	r3, [pc, #100]	; (d73b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d734c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7352:	4607      	mov	r7, r0
   d7354:	4688      	mov	r8, r1
   d7356:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7358:	bb33      	cbnz	r3, d73a8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d735a:	f7ff fe85 	bl	d7068 <_ZN5spark10LogManager8instanceEv>
   d735e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7360:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7362:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7364:	f7ff fdaa 	bl	d6ebc <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d7368:	7b23      	ldrb	r3, [r4, #12]
   d736a:	b9d3      	cbnz	r3, d73a2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d736c:	2301      	movs	r3, #1
   d736e:	7323      	strb	r3, [r4, #12]
   d7370:	6825      	ldr	r5, [r4, #0]
   d7372:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d7374:	fa5f fb86 	uxtb.w	fp, r6
   d7378:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d737c:	4555      	cmp	r5, sl
   d737e:	d00e      	beq.n	d739e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d7380:	f855 6b04 	ldr.w	r6, [r5], #4
   d7384:	4649      	mov	r1, r9
   d7386:	1d30      	adds	r0, r6, #4
   d7388:	f7ff fdf4 	bl	d6f74 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d738c:	4583      	cmp	fp, r0
   d738e:	d3f5      	bcc.n	d737c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d7390:	6833      	ldr	r3, [r6, #0]
   d7392:	4642      	mov	r2, r8
   d7394:	68db      	ldr	r3, [r3, #12]
   d7396:	4639      	mov	r1, r7
   d7398:	4630      	mov	r0, r6
   d739a:	4798      	blx	r3
   d739c:	e7ee      	b.n	d737c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d739e:	2300      	movs	r3, #0
   d73a0:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d73a2:	a801      	add	r0, sp, #4
   d73a4:	f7ff ff8a 	bl	d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d73a8:	b003      	add	sp, #12
   d73aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d73ae:	bf00      	nop
   d73b0:	e000ed00 	.word	0xe000ed00

000d73b4 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d73b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d73b8:	4b15      	ldr	r3, [pc, #84]	; (d7410 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d73ba:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d73bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d73c0:	4604      	mov	r4, r0
   d73c2:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d73c4:	b9fb      	cbnz	r3, d7406 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d73c6:	f7ff fe4f 	bl	d7068 <_ZN5spark10LogManager8instanceEv>
   d73ca:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d73cc:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d73ce:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d73d0:	f7ff fd74 	bl	d6ebc <_ZN14RecursiveMutex4lockEv>
   d73d4:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d73d8:	2646      	movs	r6, #70	; 0x46
   d73da:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d73de:	42af      	cmp	r7, r5
   d73e0:	d107      	bne.n	d73f2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d73e2:	a801      	add	r0, sp, #4
   d73e4:	f7ff ff6a 	bl	d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d73e8:	42b4      	cmp	r4, r6
   d73ea:	bfb4      	ite	lt
   d73ec:	2000      	movlt	r0, #0
   d73ee:	2001      	movge	r0, #1
   d73f0:	e00a      	b.n	d7408 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d73f2:	f855 0b04 	ldr.w	r0, [r5], #4
   d73f6:	4641      	mov	r1, r8
   d73f8:	3004      	adds	r0, #4
   d73fa:	f7ff fdbb 	bl	d6f74 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d73fe:	4286      	cmp	r6, r0
   d7400:	bfa8      	it	ge
   d7402:	4606      	movge	r6, r0
   d7404:	e7eb      	b.n	d73de <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d7406:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d7408:	b002      	add	sp, #8
   d740a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d740e:	bf00      	nop
   d7410:	e000ed00 	.word	0xe000ed00

000d7414 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7414:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d7416:	6803      	ldr	r3, [r0, #0]
   d7418:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d741a:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d741c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7420:	429a      	cmp	r2, r3
   d7422:	4618      	mov	r0, r3
   d7424:	d00e      	beq.n	d7444 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d7426:	6806      	ldr	r6, [r0, #0]
   d7428:	680d      	ldr	r5, [r1, #0]
   d742a:	42ae      	cmp	r6, r5
   d742c:	f103 0304 	add.w	r3, r3, #4
   d7430:	d1f6      	bne.n	d7420 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7432:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7434:	1a52      	subs	r2, r2, r1
   d7436:	f001 fc1d 	bl	d8c74 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d743a:	6863      	ldr	r3, [r4, #4]
   d743c:	3b01      	subs	r3, #1
   d743e:	6063      	str	r3, [r4, #4]
    return true;
   d7440:	2001      	movs	r0, #1
}
   d7442:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7444:	2000      	movs	r0, #0
   d7446:	bd70      	pop	{r4, r5, r6, pc}

000d7448 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7448:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d744a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d744c:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d744e:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7450:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d7452:	f7ff fd33 	bl	d6ebc <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7456:	a901      	add	r1, sp, #4
   d7458:	4620      	mov	r0, r4
   d745a:	f7ff ffdb 	bl	d7414 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d745e:	b920      	cbnz	r0, d746a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7460:	a803      	add	r0, sp, #12
   d7462:	f7ff ff2b 	bl	d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d7466:	b004      	add	sp, #16
   d7468:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d746a:	6863      	ldr	r3, [r4, #4]
   d746c:	2b00      	cmp	r3, #0
   d746e:	d1f7      	bne.n	d7460 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d7470:	f7ff fe24 	bl	d70bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d7474:	e7f4      	b.n	d7460 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d7476 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d7476:	b570      	push	{r4, r5, r6, lr}
   d7478:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d747a:	6943      	ldr	r3, [r0, #20]
   d747c:	2618      	movs	r6, #24
   d747e:	4604      	mov	r4, r0
   d7480:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7484:	42ae      	cmp	r6, r5
   d7486:	d015      	beq.n	d74b4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7488:	f105 0110 	add.w	r1, r5, #16
   d748c:	4620      	mov	r0, r4
   d748e:	f7ff ffc1 	bl	d7414 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7492:	6863      	ldr	r3, [r4, #4]
   d7494:	b90b      	cbnz	r3, d749a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7496:	f7ff fe11 	bl	d70bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d749a:	69e0      	ldr	r0, [r4, #28]
   d749c:	6929      	ldr	r1, [r5, #16]
   d749e:	6803      	ldr	r3, [r0, #0]
   d74a0:	68db      	ldr	r3, [r3, #12]
   d74a2:	4798      	blx	r3
        if (h.stream) {
   d74a4:	6969      	ldr	r1, [r5, #20]
   d74a6:	b119      	cbz	r1, d74b0 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d74a8:	6a20      	ldr	r0, [r4, #32]
   d74aa:	6803      	ldr	r3, [r0, #0]
   d74ac:	68db      	ldr	r3, [r3, #12]
   d74ae:	4798      	blx	r3
   d74b0:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d74b2:	e7e7      	b.n	d7484 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d74b4:	6925      	ldr	r5, [r4, #16]
   d74b6:	6963      	ldr	r3, [r4, #20]
   d74b8:	2618      	movs	r6, #24
   d74ba:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d74be:	42b5      	cmp	r5, r6
   d74c0:	d004      	beq.n	d74cc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d74c2:	4628      	mov	r0, r5
   d74c4:	f7fd ff22 	bl	d530c <_ZN6StringD1Ev>
   d74c8:	3518      	adds	r5, #24
   d74ca:	e7f8      	b.n	d74be <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d74cc:	2300      	movs	r3, #0
   d74ce:	6163      	str	r3, [r4, #20]
   d74d0:	bd70      	pop	{r4, r5, r6, pc}

000d74d2 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d74d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d74d4:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d74d6:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d74d8:	f7ff fdf0 	bl	d70bc <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d74dc:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d74e0:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d74e4:	f7ff fcea 	bl	d6ebc <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d74e8:	4620      	mov	r0, r4
   d74ea:	f7ff ffc4 	bl	d7476 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d74ee:	4628      	mov	r0, r5
   d74f0:	f7ff fee4 	bl	d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d74f4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d74f6:	b108      	cbz	r0, d74fc <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d74f8:	f7fd fcdc 	bl	d4eb4 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d74fc:	6925      	ldr	r5, [r4, #16]
   d74fe:	6963      	ldr	r3, [r4, #20]
   d7500:	2618      	movs	r6, #24
   d7502:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7506:	42b5      	cmp	r5, r6
   d7508:	d004      	beq.n	d7514 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d750a:	4628      	mov	r0, r5
   d750c:	f7fd fefe 	bl	d530c <_ZN6StringD1Ev>
   d7510:	3518      	adds	r5, #24
   d7512:	e7f8      	b.n	d7506 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7514:	6920      	ldr	r0, [r4, #16]
   d7516:	f7fd fe79 	bl	d520c <free>
   d751a:	6820      	ldr	r0, [r4, #0]
   d751c:	f7fd fe76 	bl	d520c <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d7520:	4620      	mov	r0, r4
   d7522:	b002      	add	sp, #8
   d7524:	bd70      	pop	{r4, r5, r6, pc}

000d7526 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7526:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7528:	680a      	ldr	r2, [r1, #0]
   d752a:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d752c:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d752e:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7530:	684a      	ldr	r2, [r1, #4]
   d7532:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7534:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7536:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7538:	688a      	ldr	r2, [r1, #8]
   d753a:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d753c:	608b      	str	r3, [r1, #8]
   d753e:	4770      	bx	lr

000d7540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7540:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7542:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7544:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7546:	6003      	str	r3, [r0, #0]
   d7548:	6043      	str	r3, [r0, #4]
   d754a:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d754c:	f7ff ffeb 	bl	d7526 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d7550:	4620      	mov	r0, r4
   d7552:	bd10      	pop	{r4, pc}

000d7554 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7554:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7558:	4604      	mov	r4, r0
   d755a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d755c:	d925      	bls.n	d75aa <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d755e:	4290      	cmp	r0, r2
   d7560:	d224      	bcs.n	d75ac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d7562:	1a55      	subs	r5, r2, r1
   d7564:	3d14      	subs	r5, #20
   d7566:	442c      	add	r4, r5
   d7568:	f1a1 0714 	sub.w	r7, r1, #20
   d756c:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7570:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7572:	f1a5 0308 	sub.w	r3, r5, #8
   d7576:	429f      	cmp	r7, r3
   d7578:	d037      	beq.n	d75ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d757a:	b184      	cbz	r4, d759e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d757c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7580:	6023      	str	r3, [r4, #0]
   d7582:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7586:	80a3      	strh	r3, [r4, #4]
   d7588:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d758c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d758e:	60a6      	str	r6, [r4, #8]
   d7590:	60e6      	str	r6, [r4, #12]
   d7592:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7594:	4629      	mov	r1, r5
   d7596:	f104 0008 	add.w	r0, r4, #8
   d759a:	f7ff ffc4 	bl	d7526 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d759e:	4628      	mov	r0, r5
   d75a0:	f7ff fe32 	bl	d7208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d75a4:	3c14      	subs	r4, #20
   d75a6:	3d14      	subs	r5, #20
   d75a8:	e7e3      	b.n	d7572 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d75aa:	d01e      	beq.n	d75ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d75ac:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d75b0:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d75b2:	f1a5 0308 	sub.w	r3, r5, #8
   d75b6:	429e      	cmp	r6, r3
   d75b8:	d017      	beq.n	d75ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d75ba:	b184      	cbz	r4, d75de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d75bc:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d75c0:	6023      	str	r3, [r4, #0]
   d75c2:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d75c6:	80a3      	strh	r3, [r4, #4]
   d75c8:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d75cc:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d75ce:	60a7      	str	r7, [r4, #8]
   d75d0:	60e7      	str	r7, [r4, #12]
   d75d2:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d75d4:	4629      	mov	r1, r5
   d75d6:	f104 0008 	add.w	r0, r4, #8
   d75da:	f7ff ffa4 	bl	d7526 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d75de:	4628      	mov	r0, r5
   d75e0:	f7ff fe12 	bl	d7208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d75e4:	3414      	adds	r4, #20
   d75e6:	3514      	adds	r5, #20
   d75e8:	e7e3      	b.n	d75b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d75ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d75ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d75ee:	6845      	ldr	r5, [r0, #4]
   d75f0:	6883      	ldr	r3, [r0, #8]
   d75f2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d75f4:	4604      	mov	r4, r0
   d75f6:	460e      	mov	r6, r1
   d75f8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d75fa:	db0e      	blt.n	d761a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d75fc:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d75fe:	2d00      	cmp	r5, #0
   d7600:	dd05      	ble.n	d760e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d7602:	00a9      	lsls	r1, r5, #2
   d7604:	6800      	ldr	r0, [r0, #0]
   d7606:	f7fd fe09 	bl	d521c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d760a:	b920      	cbnz	r0, d7616 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d760c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d760e:	6800      	ldr	r0, [r0, #0]
   d7610:	f7fd fdfc 	bl	d520c <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7614:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7616:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7618:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d761a:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d761c:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d761e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7622:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d7626:	1a52      	subs	r2, r2, r1
   d7628:	1d08      	adds	r0, r1, #4
   d762a:	f001 fb23 	bl	d8c74 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d762e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7632:	6863      	ldr	r3, [r4, #4]
   d7634:	3301      	adds	r3, #1
   d7636:	6063      	str	r3, [r4, #4]
   d7638:	2001      	movs	r0, #1
    return true;
}
   d763a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d763c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d763c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d763e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7640:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7642:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7644:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7646:	f7ff fc39 	bl	d6ebc <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d764a:	6823      	ldr	r3, [r4, #0]
   d764c:	6861      	ldr	r1, [r4, #4]
   d764e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7652:	4283      	cmp	r3, r0
   d7654:	461a      	mov	r2, r3
   d7656:	d009      	beq.n	d766c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d7658:	6812      	ldr	r2, [r2, #0]
   d765a:	42aa      	cmp	r2, r5
   d765c:	f103 0304 	add.w	r3, r3, #4
   d7660:	d1f7      	bne.n	d7652 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d7662:	a801      	add	r0, sp, #4
   d7664:	f7ff fe2a 	bl	d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7668:	2500      	movs	r5, #0
   d766a:	e00e      	b.n	d768a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d766c:	462a      	mov	r2, r5
   d766e:	4620      	mov	r0, r4
   d7670:	f7ff ffbc 	bl	d75ec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7674:	4605      	mov	r5, r0
   d7676:	2800      	cmp	r0, #0
   d7678:	d0f3      	beq.n	d7662 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d767a:	6863      	ldr	r3, [r4, #4]
   d767c:	2b01      	cmp	r3, #1
   d767e:	d101      	bne.n	d7684 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d7680:	f7ff fd10 	bl	d70a4 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7684:	a801      	add	r0, sp, #4
   d7686:	f7ff fe19 	bl	d72bc <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d768a:	4628      	mov	r0, r5
   d768c:	b003      	add	sp, #12
   d768e:	bd30      	pop	{r4, r5, pc}

000d7690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7690:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7692:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7694:	4606      	mov	r6, r0
   d7696:	460c      	mov	r4, r1
   d7698:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d769a:	d914      	bls.n	d76c6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d769c:	4290      	cmp	r0, r2
   d769e:	d213      	bcs.n	d76c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d76a0:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d76a4:	1a6c      	subs	r4, r5, r1
   d76a6:	f1a1 0710 	sub.w	r7, r1, #16
   d76aa:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d76ac:	42af      	cmp	r7, r5
   d76ae:	d018      	beq.n	d76e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d76b0:	b11c      	cbz	r4, d76ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d76b2:	4629      	mov	r1, r5
   d76b4:	4620      	mov	r0, r4
   d76b6:	f7fd fe19 	bl	d52ec <_ZN6StringC1EOS_>
                end->~T();
   d76ba:	4628      	mov	r0, r5
   d76bc:	f7fd fe26 	bl	d530c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d76c0:	3d10      	subs	r5, #16
   d76c2:	3c10      	subs	r4, #16
   d76c4:	e7f2      	b.n	d76ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d76c6:	d00c      	beq.n	d76e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d76c8:	42ac      	cmp	r4, r5
   d76ca:	d00a      	beq.n	d76e2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d76cc:	b11e      	cbz	r6, d76d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d76ce:	4621      	mov	r1, r4
   d76d0:	4630      	mov	r0, r6
   d76d2:	f7fd fe0b 	bl	d52ec <_ZN6StringC1EOS_>
                p->~T();
   d76d6:	4620      	mov	r0, r4
   d76d8:	f7fd fe18 	bl	d530c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d76dc:	3410      	adds	r4, #16
   d76de:	3610      	adds	r6, #16
   d76e0:	e7f2      	b.n	d76c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d76e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d76e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d76e4:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d76e6:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d76e8:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d76ea:	dd0b      	ble.n	d7704 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d76ec:	0130      	lsls	r0, r6, #4
   d76ee:	f7fd fd85 	bl	d51fc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d76f2:	4604      	mov	r4, r0
   d76f4:	b170      	cbz	r0, d7714 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d76f6:	e895 0006 	ldmia.w	r5, {r1, r2}
   d76fa:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d76fe:	f7ff ffc7 	bl	d7690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d7702:	e000      	b.n	d7706 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7704:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7706:	6828      	ldr	r0, [r5, #0]
   d7708:	f7fd fd80 	bl	d520c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d770c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d770e:	60ae      	str	r6, [r5, #8]
        return true;
   d7710:	2001      	movs	r0, #1
   d7712:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7714:	bd70      	pop	{r4, r5, r6, pc}

000d7716 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7716:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d771a:	2300      	movs	r3, #0
   d771c:	b095      	sub	sp, #84	; 0x54
   d771e:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7720:	2246      	movs	r2, #70	; 0x46
   d7722:	6003      	str	r3, [r0, #0]
   d7724:	6043      	str	r3, [r0, #4]
   d7726:	6083      	str	r3, [r0, #8]
   d7728:	60c3      	str	r3, [r0, #12]
   d772a:	6103      	str	r3, [r0, #16]
   d772c:	6143      	str	r3, [r0, #20]
   d772e:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7730:	9102      	str	r1, [sp, #8]
   d7732:	f8da 1004 	ldr.w	r1, [sl, #4]
   d7736:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7738:	4299      	cmp	r1, r3
   d773a:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d773c:	9309      	str	r3, [sp, #36]	; 0x24
   d773e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7740:	f340 809d 	ble.w	d787e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7744:	a808      	add	r0, sp, #32
   d7746:	f7ff ffcd 	bl	d76e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d774a:	2800      	cmp	r0, #0
   d774c:	f040 8097 	bne.w	d787e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7750:	e08e      	b.n	d7870 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d7752:	4621      	mov	r1, r4
   d7754:	a80b      	add	r0, sp, #44	; 0x2c
   d7756:	f7fd fdc9 	bl	d52ec <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d775a:	a90b      	add	r1, sp, #44	; 0x2c
   d775c:	a80f      	add	r0, sp, #60	; 0x3c
   d775e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7760:	f7fd fdc4 	bl	d52ec <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7764:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7768:	4299      	cmp	r1, r3
   d776a:	f2c0 80ce 	blt.w	d790a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d776e:	3101      	adds	r1, #1
   d7770:	a808      	add	r0, sp, #32
   d7772:	f7ff ffb7 	bl	d76e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7776:	2800      	cmp	r0, #0
   d7778:	f040 80c7 	bne.w	d790a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d777c:	a80f      	add	r0, sp, #60	; 0x3c
   d777e:	f7fd fdc5 	bl	d530c <_ZN6StringD1Ev>
   d7782:	a80b      	add	r0, sp, #44	; 0x2c
   d7784:	f7fd fdc2 	bl	d530c <_ZN6StringD1Ev>
   d7788:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d778a:	42a7      	cmp	r7, r4
   d778c:	d1e1      	bne.n	d7752 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d778e:	2600      	movs	r6, #0
   d7790:	960b      	str	r6, [sp, #44]	; 0x2c
   d7792:	960c      	str	r6, [sp, #48]	; 0x30
   d7794:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7796:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7798:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d779a:	429e      	cmp	r6, r3
   d779c:	f280 80a8 	bge.w	d78f0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d77a0:	0133      	lsls	r3, r6, #4
   d77a2:	9a08      	ldr	r2, [sp, #32]
   d77a4:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d77a6:	9306      	str	r3, [sp, #24]
        if (!category) {
   d77a8:	2b00      	cmp	r3, #0
   d77aa:	f000 809f 	beq.w	d78ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d77ae:	2314      	movs	r3, #20
   d77b0:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d77b2:	f8cd 901c 	str.w	r9, [sp, #28]
   d77b6:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d77b8:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d77ba:	a907      	add	r1, sp, #28
   d77bc:	a806      	add	r0, sp, #24
   d77be:	f7ff fb2c 	bl	d6e1a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d77c2:	4607      	mov	r7, r0
   d77c4:	2800      	cmp	r0, #0
   d77c6:	f000 8091 	beq.w	d78ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d77ca:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d77cc:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d77ce:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d77d2:	9a07      	ldr	r2, [sp, #28]
   d77d4:	4620      	mov	r0, r4
   d77d6:	f7ff fb8d 	bl	d6ef4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d77da:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d77de:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d77e0:	f1b8 0f00 	cmp.w	r8, #0
   d77e4:	d153      	bne.n	d788e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d77e6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d77ea:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d77ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d77f2:	970f      	str	r7, [sp, #60]	; 0x3c
   d77f4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d77f8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d77fc:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7800:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7804:	6867      	ldr	r7, [r4, #4]
   d7806:	68a3      	ldr	r3, [r4, #8]
   d7808:	429f      	cmp	r7, r3
   d780a:	da4f      	bge.n	d78ac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d780c:	9b00      	ldr	r3, [sp, #0]
   d780e:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d7812:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7814:	2214      	movs	r2, #20
   d7816:	4353      	muls	r3, r2
   d7818:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d781c:	fb02 b201 	mla	r2, r2, r1, fp
   d7820:	f107 0014 	add.w	r0, r7, #20
   d7824:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7826:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7828:	f7ff fe94 	bl	d7554 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d782c:	b1a7      	cbz	r7, d7858 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d782e:	9b03      	ldr	r3, [sp, #12]
   d7830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7832:	f84b 2003 	str.w	r2, [fp, r3]
   d7836:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d783a:	80bb      	strh	r3, [r7, #4]
   d783c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7840:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7842:	f8c7 9008 	str.w	r9, [r7, #8]
   d7846:	f8c7 900c 	str.w	r9, [r7, #12]
   d784a:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d784e:	a911      	add	r1, sp, #68	; 0x44
   d7850:	f107 0008 	add.w	r0, r7, #8
   d7854:	f7ff fe67 	bl	d7526 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7858:	6863      	ldr	r3, [r4, #4]
   d785a:	3301      	adds	r3, #1
   d785c:	6063      	str	r3, [r4, #4]
   d785e:	a811      	add	r0, sp, #68	; 0x44
   d7860:	f7ff fcd2 	bl	d7208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7864:	f1b8 0f00 	cmp.w	r8, #0
   d7868:	d011      	beq.n	d788e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d786a:	a80b      	add	r0, sp, #44	; 0x2c
   d786c:	f7ff fccc 	bl	d7208 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7870:	a808      	add	r0, sp, #32
   d7872:	f7ff fcdd 	bl	d7230 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d7876:	4628      	mov	r0, r5
   d7878:	b015      	add	sp, #84	; 0x54
   d787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d787e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7882:	f8da 3004 	ldr.w	r3, [sl, #4]
   d7886:	2714      	movs	r7, #20
   d7888:	fb07 4703 	mla	r7, r7, r3, r4
   d788c:	e77d      	b.n	d778a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d788e:	6823      	ldr	r3, [r4, #0]
   d7890:	9a00      	ldr	r2, [sp, #0]
   d7892:	2414      	movs	r4, #20
   d7894:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7898:	9b06      	ldr	r3, [sp, #24]
   d789a:	781b      	ldrb	r3, [r3, #0]
   d789c:	bb23      	cbnz	r3, d78e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d789e:	f8da 3000 	ldr.w	r3, [sl]
   d78a2:	9a01      	ldr	r2, [sp, #4]
   d78a4:	4413      	add	r3, r2
   d78a6:	7c1b      	ldrb	r3, [r3, #16]
   d78a8:	80e3      	strh	r3, [r4, #6]
   d78aa:	e01d      	b.n	d78e8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d78ac:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d78ae:	2f00      	cmp	r7, #0
   d78b0:	dd0f      	ble.n	d78d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d78b2:	2314      	movs	r3, #20
   d78b4:	fb03 f007 	mul.w	r0, r3, r7
   d78b8:	9303      	str	r3, [sp, #12]
   d78ba:	f7fd fc9f 	bl	d51fc <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d78be:	4683      	mov	fp, r0
   d78c0:	b178      	cbz	r0, d78e2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d78c2:	e894 0006 	ldmia.w	r4, {r1, r2}
   d78c6:	9b03      	ldr	r3, [sp, #12]
   d78c8:	fb03 1202 	mla	r2, r3, r2, r1
   d78cc:	f7ff fe42 	bl	d7554 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d78d0:	e000      	b.n	d78d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d78d2:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d78d4:	6820      	ldr	r0, [r4, #0]
   d78d6:	f7fd fc99 	bl	d520c <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d78da:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d78de:	60a7      	str	r7, [r4, #8]
   d78e0:	e794      	b.n	d780c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d78e2:	f04f 0801 	mov.w	r8, #1
   d78e6:	e7ba      	b.n	d785e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d78e8:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d78ea:	e766      	b.n	d77ba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d78ec:	3601      	adds	r6, #1
   d78ee:	e753      	b.n	d7798 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d78f0:	a908      	add	r1, sp, #32
   d78f2:	4628      	mov	r0, r5
   d78f4:	f7ff fe17 	bl	d7526 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d78f8:	a90b      	add	r1, sp, #44	; 0x2c
   d78fa:	f105 000c 	add.w	r0, r5, #12
   d78fe:	f7ff fe12 	bl	d7526 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d7902:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7906:	762b      	strb	r3, [r5, #24]
   d7908:	e7af      	b.n	d786a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d790a:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d790c:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d790e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7912:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7916:	4631      	mov	r1, r6
   d7918:	f106 0010 	add.w	r0, r6, #16
   d791c:	f7ff feb8 	bl	d7690 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7920:	b11e      	cbz	r6, d792a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7922:	a90f      	add	r1, sp, #60	; 0x3c
   d7924:	4630      	mov	r0, r6
   d7926:	f7fd fce1 	bl	d52ec <_ZN6StringC1EOS_>
    ++size_;
   d792a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d792c:	3301      	adds	r3, #1
   d792e:	9309      	str	r3, [sp, #36]	; 0x24
   d7930:	e724      	b.n	d777c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7934 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7934:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7936:	4604      	mov	r4, r0
   d7938:	4b09      	ldr	r3, [pc, #36]	; (d7960 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d793a:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d793e:	4605      	mov	r5, r0
   d7940:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7942:	a801      	add	r0, sp, #4
   d7944:	4611      	mov	r1, r2
   d7946:	f7fd f882 	bl	d4a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d794a:	aa01      	add	r2, sp, #4
   d794c:	4631      	mov	r1, r6
   d794e:	4620      	mov	r0, r4
   d7950:	f7ff fee1 	bl	d7716 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7954:	a801      	add	r0, sp, #4
   d7956:	f7fd f839 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d795a:	4628      	mov	r0, r5
   d795c:	b004      	add	sp, #16
   d795e:	bd70      	pop	{r4, r5, r6, pc}
   d7960:	000d8f14 	.word	0x000d8f14

000d7964 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7964:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7966:	460f      	mov	r7, r1
   d7968:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d796a:	492b      	ldr	r1, [pc, #172]	; (d7a18 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d796c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d796e:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7970:	4616      	mov	r6, r2
   d7972:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7974:	f001 f9e2 	bl	d8d3c <strcmp>
   d7978:	bb28      	cbnz	r0, d79c6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d797a:	2c00      	cmp	r4, #0
   d797c:	d049      	beq.n	d7a12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d797e:	4629      	mov	r1, r5
   d7980:	a801      	add	r0, sp, #4
   d7982:	f7ff fddd 	bl	d7540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7986:	4925      	ldr	r1, [pc, #148]	; (d7a1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7988:	2024      	movs	r0, #36	; 0x24
   d798a:	f000 fff3 	bl	d8974 <_ZnwjRKSt9nothrow_t>
   d798e:	4605      	mov	r5, r0
   d7990:	b1b8      	cbz	r0, d79c2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7992:	a901      	add	r1, sp, #4
   d7994:	a804      	add	r0, sp, #16
   d7996:	f7ff fdd3 	bl	d7540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d799a:	a904      	add	r1, sp, #16
   d799c:	a807      	add	r0, sp, #28
   d799e:	f7fd f856 	bl	d4a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d79a2:	aa07      	add	r2, sp, #28
   d79a4:	4631      	mov	r1, r6
   d79a6:	4628      	mov	r0, r5
   d79a8:	f7ff ffc4 	bl	d7934 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d79ac:	a807      	add	r0, sp, #28
   d79ae:	f7fd f80d 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d79b2:	4b1b      	ldr	r3, [pc, #108]	; (d7a20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d79b4:	602b      	str	r3, [r5, #0]
   d79b6:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d79b8:	a804      	add	r0, sp, #16
   d79ba:	f7fd f807 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d79be:	4b19      	ldr	r3, [pc, #100]	; (d7a24 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d79c0:	602b      	str	r3, [r5, #0]
   d79c2:	a801      	add	r0, sp, #4
   d79c4:	e01f      	b.n	d7a06 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d79c6:	4918      	ldr	r1, [pc, #96]	; (d7a28 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d79c8:	4638      	mov	r0, r7
   d79ca:	f001 f9b7 	bl	d8d3c <strcmp>
   d79ce:	b9f0      	cbnz	r0, d7a0e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d79d0:	b1fc      	cbz	r4, d7a12 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d79d2:	4629      	mov	r1, r5
   d79d4:	a804      	add	r0, sp, #16
   d79d6:	f7ff fdb3 	bl	d7540 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d79da:	4910      	ldr	r1, [pc, #64]	; (d7a1c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d79dc:	2024      	movs	r0, #36	; 0x24
   d79de:	f000 ffc9 	bl	d8974 <_ZnwjRKSt9nothrow_t>
   d79e2:	4605      	mov	r5, r0
   d79e4:	b170      	cbz	r0, d7a04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d79e6:	a904      	add	r1, sp, #16
   d79e8:	a807      	add	r0, sp, #28
   d79ea:	f7fd f830 	bl	d4a4e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d79ee:	aa07      	add	r2, sp, #28
   d79f0:	4631      	mov	r1, r6
   d79f2:	4628      	mov	r0, r5
   d79f4:	f7ff ff9e 	bl	d7934 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d79f8:	a807      	add	r0, sp, #28
   d79fa:	f7fc ffe7 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d79fe:	4b08      	ldr	r3, [pc, #32]	; (d7a20 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7a00:	602b      	str	r3, [r5, #0]
   d7a02:	622c      	str	r4, [r5, #32]
   d7a04:	a804      	add	r0, sp, #16
   d7a06:	f7fc ffe1 	bl	d49cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7a0a:	4628      	mov	r0, r5
   d7a0c:	e002      	b.n	d7a14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7a0e:	2000      	movs	r0, #0
   d7a10:	e000      	b.n	d7a14 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d7a12:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7a14:	b00b      	add	sp, #44	; 0x2c
   d7a16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7a18:	000d986a 	.word	0x000d986a
   d7a1c:	000d9a8f 	.word	0x000d9a8f
   d7a20:	000d98f0 	.word	0x000d98f0
   d7a24:	000d97fc 	.word	0x000d97fc
   d7a28:	000d986e 	.word	0x000d986e

000d7a2c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7a2c:	4b01      	ldr	r3, [pc, #4]	; (d7a34 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7a2e:	4a02      	ldr	r2, [pc, #8]	; (d7a38 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7a30:	601a      	str	r2, [r3, #0]
   d7a32:	4770      	bx	lr
   d7a34:	2003e40c 	.word	0x2003e40c
   d7a38:	000d987f 	.word	0x000d987f

000d7a3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7a40:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7a42:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7a46:	4604      	mov	r4, r0
   d7a48:	460e      	mov	r6, r1
   d7a4a:	4617      	mov	r7, r2
   d7a4c:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7a4e:	f000 fb6f 	bl	d8130 <_Z16_fetch_usbserialv>
   d7a52:	4581      	cmp	r9, r0
   d7a54:	d105      	bne.n	d7a62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d7a56:	485a      	ldr	r0, [pc, #360]	; (d7bc0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7a58:	f000 fd43 	bl	d84e2 <_ZN5spark12NetworkClass9listeningEv>
   d7a5c:	2800      	cmp	r0, #0
   d7a5e:	f040 80ac 	bne.w	d7bba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d7a62:	792b      	ldrb	r3, [r5, #4]
   d7a64:	071b      	lsls	r3, r3, #28
   d7a66:	d505      	bpl.n	d7a74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7a68:	696b      	ldr	r3, [r5, #20]
   d7a6a:	4a56      	ldr	r2, [pc, #344]	; (d7bc4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7a6c:	6a20      	ldr	r0, [r4, #32]
   d7a6e:	2100      	movs	r1, #0
   d7a70:	f7ff f985 	bl	d6d7e <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d7a74:	f1b8 0f00 	cmp.w	r8, #0
   d7a78:	d00d      	beq.n	d7a96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d7a7a:	215b      	movs	r1, #91	; 0x5b
   d7a7c:	4620      	mov	r0, r4
   d7a7e:	f7ff fa2e 	bl	d6ede <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7a82:	4641      	mov	r1, r8
   d7a84:	4620      	mov	r0, r4
   d7a86:	f7ff fa1c 	bl	d6ec2 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7a8a:	6823      	ldr	r3, [r4, #0]
   d7a8c:	494e      	ldr	r1, [pc, #312]	; (d7bc8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7a8e:	68db      	ldr	r3, [r3, #12]
   d7a90:	2202      	movs	r2, #2
   d7a92:	4620      	mov	r0, r4
   d7a94:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d7a96:	792b      	ldrb	r3, [r5, #4]
   d7a98:	07d9      	lsls	r1, r3, #31
   d7a9a:	d525      	bpl.n	d7ae8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d7a9c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7aa0:	212f      	movs	r1, #47	; 0x2f
   d7aa2:	4640      	mov	r0, r8
   d7aa4:	f001 f985 	bl	d8db2 <strrchr>
    if (s1) {
   d7aa8:	b108      	cbz	r0, d7aae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d7aaa:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d7aae:	4641      	mov	r1, r8
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	f7ff fa06 	bl	d6ec2 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7ab6:	792b      	ldrb	r3, [r5, #4]
   d7ab8:	079a      	lsls	r2, r3, #30
   d7aba:	d509      	bpl.n	d7ad0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7abc:	213a      	movs	r1, #58	; 0x3a
   d7abe:	4620      	mov	r0, r4
   d7ac0:	f7ff fa0d 	bl	d6ede <_ZN5spark16StreamLogHandler5writeEc>
   d7ac4:	68eb      	ldr	r3, [r5, #12]
   d7ac6:	4a41      	ldr	r2, [pc, #260]	; (d7bcc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7ac8:	6a20      	ldr	r0, [r4, #32]
   d7aca:	2100      	movs	r1, #0
   d7acc:	f7ff f957 	bl	d6d7e <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d7ad0:	792b      	ldrb	r3, [r5, #4]
   d7ad2:	f013 0f04 	tst.w	r3, #4
   d7ad6:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7ad8:	bf18      	it	ne
   d7ada:	493d      	ldrne	r1, [pc, #244]	; (d7bd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7adc:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d7ade:	bf08      	it	eq
   d7ae0:	493c      	ldreq	r1, [pc, #240]	; (d7bd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d7ae2:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7ae4:	4620      	mov	r0, r4
   d7ae6:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7ae8:	792b      	ldrb	r3, [r5, #4]
   d7aea:	075b      	lsls	r3, r3, #29
   d7aec:	d518      	bpl.n	d7b20 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7aee:	6929      	ldr	r1, [r5, #16]
   d7af0:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7af2:	4613      	mov	r3, r2
   d7af4:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7af8:	b138      	cbz	r0, d7b0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7afa:	2820      	cmp	r0, #32
   d7afc:	d101      	bne.n	d7b02 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d7afe:	4619      	mov	r1, r3
   d7b00:	e001      	b.n	d7b06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d7b02:	2828      	cmp	r0, #40	; 0x28
   d7b04:	d001      	beq.n	d7b0a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7b06:	461a      	mov	r2, r3
   d7b08:	e7f3      	b.n	d7af2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7b0a:	6823      	ldr	r3, [r4, #0]
   d7b0c:	1a52      	subs	r2, r2, r1
   d7b0e:	68db      	ldr	r3, [r3, #12]
   d7b10:	4620      	mov	r0, r4
   d7b12:	4798      	blx	r3
        write("(): ", 4);
   d7b14:	6823      	ldr	r3, [r4, #0]
   d7b16:	4930      	ldr	r1, [pc, #192]	; (d7bd8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7b18:	68db      	ldr	r3, [r3, #12]
   d7b1a:	2204      	movs	r2, #4
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7b20:	2100      	movs	r1, #0
   d7b22:	4638      	mov	r0, r7
   d7b24:	f7fd fab6 	bl	d5094 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7b28:	4601      	mov	r1, r0
   d7b2a:	4620      	mov	r0, r4
   d7b2c:	f7ff f9c9 	bl	d6ec2 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7b30:	6823      	ldr	r3, [r4, #0]
   d7b32:	4928      	ldr	r1, [pc, #160]	; (d7bd4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7b34:	68db      	ldr	r3, [r3, #12]
   d7b36:	2202      	movs	r2, #2
   d7b38:	4620      	mov	r0, r4
   d7b3a:	4798      	blx	r3
    // Message
    if (msg) {
   d7b3c:	b11e      	cbz	r6, d7b46 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d7b3e:	4631      	mov	r1, r6
   d7b40:	4620      	mov	r0, r4
   d7b42:	f7ff f9be 	bl	d6ec2 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d7b46:	792b      	ldrb	r3, [r5, #4]
   d7b48:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7b4c:	d02d      	beq.n	d7baa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d7b4e:	6823      	ldr	r3, [r4, #0]
   d7b50:	4922      	ldr	r1, [pc, #136]	; (d7bdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7b52:	68db      	ldr	r3, [r3, #12]
   d7b54:	4620      	mov	r0, r4
   d7b56:	2202      	movs	r2, #2
   d7b58:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d7b5a:	792b      	ldrb	r3, [r5, #4]
   d7b5c:	06d8      	lsls	r0, r3, #27
   d7b5e:	d50b      	bpl.n	d7b78 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d7b60:	6823      	ldr	r3, [r4, #0]
   d7b62:	491f      	ldr	r1, [pc, #124]	; (d7be0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d7b64:	68db      	ldr	r3, [r3, #12]
   d7b66:	2207      	movs	r2, #7
   d7b68:	4620      	mov	r0, r4
   d7b6a:	4798      	blx	r3
   d7b6c:	69ab      	ldr	r3, [r5, #24]
   d7b6e:	4a1d      	ldr	r2, [pc, #116]	; (d7be4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d7b70:	6a20      	ldr	r0, [r4, #32]
   d7b72:	2100      	movs	r1, #0
   d7b74:	f7ff f903 	bl	d6d7e <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d7b78:	792b      	ldrb	r3, [r5, #4]
   d7b7a:	0699      	lsls	r1, r3, #26
   d7b7c:	d511      	bpl.n	d7ba2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d7b7e:	06da      	lsls	r2, r3, #27
   d7b80:	d505      	bpl.n	d7b8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d7b82:	6823      	ldr	r3, [r4, #0]
   d7b84:	4912      	ldr	r1, [pc, #72]	; (d7bd0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7b86:	68db      	ldr	r3, [r3, #12]
   d7b88:	2202      	movs	r2, #2
   d7b8a:	4620      	mov	r0, r4
   d7b8c:	4798      	blx	r3
            }
            write("details = ", 10);
   d7b8e:	6823      	ldr	r3, [r4, #0]
   d7b90:	4915      	ldr	r1, [pc, #84]	; (d7be8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d7b92:	68db      	ldr	r3, [r3, #12]
   d7b94:	4620      	mov	r0, r4
   d7b96:	220a      	movs	r2, #10
   d7b98:	4798      	blx	r3
            write(attr.details);
   d7b9a:	69e9      	ldr	r1, [r5, #28]
   d7b9c:	4620      	mov	r0, r4
   d7b9e:	f7ff f990 	bl	d6ec2 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d7ba2:	215d      	movs	r1, #93	; 0x5d
   d7ba4:	4620      	mov	r0, r4
   d7ba6:	f7ff f99a 	bl	d6ede <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7baa:	6823      	ldr	r3, [r4, #0]
   d7bac:	490f      	ldr	r1, [pc, #60]	; (d7bec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7bae:	68db      	ldr	r3, [r3, #12]
   d7bb0:	4620      	mov	r0, r4
   d7bb2:	2202      	movs	r2, #2
}
   d7bb4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7bb8:	4718      	bx	r3
   d7bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7bbe:	bf00      	nop
   d7bc0:	2003e740 	.word	0x2003e740
   d7bc4:	000d9883 	.word	0x000d9883
   d7bc8:	000d988a 	.word	0x000d988a
   d7bcc:	000d928b 	.word	0x000d928b
   d7bd0:	000d988d 	.word	0x000d988d
   d7bd4:	000d9892 	.word	0x000d9892
   d7bd8:	000d9890 	.word	0x000d9890
   d7bdc:	000d9895 	.word	0x000d9895
   d7be0:	000d9898 	.word	0x000d9898
   d7be4:	000d98a0 	.word	0x000d98a0
   d7be8:	000d98a3 	.word	0x000d98a3
   d7bec:	000d98ae 	.word	0x000d98ae

000d7bf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7bf4:	b085      	sub	sp, #20
   d7bf6:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7bfa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7bfc:	4606      	mov	r6, r0
   d7bfe:	460f      	mov	r7, r1
   d7c00:	4691      	mov	r9, r2
   d7c02:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7c04:	f000 fa94 	bl	d8130 <_Z16_fetch_usbserialv>
   d7c08:	4580      	cmp	r8, r0
   d7c0a:	d105      	bne.n	d7c18 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7c0c:	484a      	ldr	r0, [pc, #296]	; (d7d38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7c0e:	f000 fc68 	bl	d84e2 <_ZN5spark12NetworkClass9listeningEv>
   d7c12:	2800      	cmp	r0, #0
   d7c14:	f040 808c 	bne.w	d7d30 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7c18:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7c1a:	4a48      	ldr	r2, [pc, #288]	; (d7d3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7c1c:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7c1e:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d7c22:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7c24:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7c26:	f88d 8008 	strb.w	r8, [sp, #8]
   d7c2a:	f000 fd9e 	bl	d876a <_ZN5spark10JSONWriter11beginObjectEv>
   d7c2e:	4641      	mov	r1, r8
   d7c30:	4648      	mov	r0, r9
   d7c32:	f7fd fa2f 	bl	d5094 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7c36:	4942      	ldr	r1, [pc, #264]	; (d7d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7c38:	4680      	mov	r8, r0
   d7c3a:	2201      	movs	r2, #1
   d7c3c:	a801      	add	r0, sp, #4
   d7c3e:	f000 fe19 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7c42:	4641      	mov	r1, r8
   d7c44:	f7ff f92d 	bl	d6ea2 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d7c48:	b13f      	cbz	r7, d7c5a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7c4a:	493e      	ldr	r1, [pc, #248]	; (d7d44 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7c4c:	2201      	movs	r2, #1
   d7c4e:	a801      	add	r0, sp, #4
   d7c50:	f000 fe10 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7c54:	4639      	mov	r1, r7
   d7c56:	f7ff f924 	bl	d6ea2 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d7c5a:	b13d      	cbz	r5, d7c6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7c5c:	493a      	ldr	r1, [pc, #232]	; (d7d48 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7c5e:	2201      	movs	r2, #1
   d7c60:	a801      	add	r0, sp, #4
   d7c62:	f000 fe07 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7c66:	4629      	mov	r1, r5
   d7c68:	f7ff f91b 	bl	d6ea2 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d7c6c:	7923      	ldrb	r3, [r4, #4]
   d7c6e:	07df      	lsls	r7, r3, #31
   d7c70:	d50e      	bpl.n	d7c90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7c72:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7c74:	212f      	movs	r1, #47	; 0x2f
   d7c76:	4628      	mov	r0, r5
   d7c78:	f001 f89b 	bl	d8db2 <strrchr>
    if (s1) {
   d7c7c:	b100      	cbz	r0, d7c80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7c7e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d7c80:	4932      	ldr	r1, [pc, #200]	; (d7d4c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7c82:	2201      	movs	r2, #1
   d7c84:	a801      	add	r0, sp, #4
   d7c86:	f000 fdf5 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7c8a:	4629      	mov	r1, r5
   d7c8c:	f7ff f909 	bl	d6ea2 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d7c90:	7923      	ldrb	r3, [r4, #4]
   d7c92:	079d      	lsls	r5, r3, #30
   d7c94:	d507      	bpl.n	d7ca6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7c96:	492e      	ldr	r1, [pc, #184]	; (d7d50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7c98:	2202      	movs	r2, #2
   d7c9a:	a801      	add	r0, sp, #4
   d7c9c:	f000 fdea 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7ca0:	68e1      	ldr	r1, [r4, #12]
   d7ca2:	f000 fd6f 	bl	d8784 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7ca6:	7923      	ldrb	r3, [r4, #4]
   d7ca8:	0758      	lsls	r0, r3, #29
   d7caa:	d516      	bpl.n	d7cda <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7cac:	6925      	ldr	r5, [r4, #16]
   d7cae:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7cb0:	463b      	mov	r3, r7
   d7cb2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7cb6:	b13a      	cbz	r2, d7cc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7cb8:	2a20      	cmp	r2, #32
   d7cba:	d101      	bne.n	d7cc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7cbc:	461d      	mov	r5, r3
   d7cbe:	e001      	b.n	d7cc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7cc0:	2a28      	cmp	r2, #40	; 0x28
   d7cc2:	d001      	beq.n	d7cc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7cc4:	461f      	mov	r7, r3
   d7cc6:	e7f3      	b.n	d7cb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7cc8:	2202      	movs	r2, #2
   d7cca:	4922      	ldr	r1, [pc, #136]	; (d7d54 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7ccc:	a801      	add	r0, sp, #4
   d7cce:	f000 fdd1 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7cd2:	1b7a      	subs	r2, r7, r5
   d7cd4:	4629      	mov	r1, r5
   d7cd6:	f000 fddc 	bl	d8892 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7cda:	7923      	ldrb	r3, [r4, #4]
   d7cdc:	0719      	lsls	r1, r3, #28
   d7cde:	d507      	bpl.n	d7cf0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7ce0:	491d      	ldr	r1, [pc, #116]	; (d7d58 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7ce2:	2201      	movs	r2, #1
   d7ce4:	a801      	add	r0, sp, #4
   d7ce6:	f000 fdc5 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7cea:	6961      	ldr	r1, [r4, #20]
   d7cec:	f000 fd5c 	bl	d87a8 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7cf0:	7923      	ldrb	r3, [r4, #4]
   d7cf2:	06da      	lsls	r2, r3, #27
   d7cf4:	d508      	bpl.n	d7d08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7cf6:	2204      	movs	r2, #4
   d7cf8:	4918      	ldr	r1, [pc, #96]	; (d7d5c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7cfa:	eb0d 0002 	add.w	r0, sp, r2
   d7cfe:	f000 fdb9 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7d02:	69a1      	ldr	r1, [r4, #24]
   d7d04:	f000 fd3e 	bl	d8784 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7d08:	7923      	ldrb	r3, [r4, #4]
   d7d0a:	069b      	lsls	r3, r3, #26
   d7d0c:	d507      	bpl.n	d7d1e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7d0e:	4914      	ldr	r1, [pc, #80]	; (d7d60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7d10:	2206      	movs	r2, #6
   d7d12:	a801      	add	r0, sp, #4
   d7d14:	f000 fdae 	bl	d8874 <_ZN5spark10JSONWriter4nameEPKcj>
   d7d18:	69e1      	ldr	r1, [r4, #28]
   d7d1a:	f7ff f8c2 	bl	d6ea2 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7d1e:	a801      	add	r0, sp, #4
   d7d20:	f000 fd0d 	bl	d873e <_ZN5spark10JSONWriter9endObjectEv>
   d7d24:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7d26:	490f      	ldr	r1, [pc, #60]	; (d7d64 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7d28:	6803      	ldr	r3, [r0, #0]
   d7d2a:	2202      	movs	r2, #2
   d7d2c:	68db      	ldr	r3, [r3, #12]
   d7d2e:	4798      	blx	r3
}
   d7d30:	b005      	add	sp, #20
   d7d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7d36:	bf00      	nop
   d7d38:	2003e740 	.word	0x2003e740
   d7d3c:	000d97e4 	.word	0x000d97e4
   d7d40:	000d9816 	.word	0x000d9816
   d7d44:	000d9829 	.word	0x000d9829
   d7d48:	000d938c 	.word	0x000d938c
   d7d4c:	000d9367 	.word	0x000d9367
   d7d50:	000d98b1 	.word	0x000d98b1
   d7d54:	000d98b4 	.word	0x000d98b4
   d7d58:	000d983e 	.word	0x000d983e
   d7d5c:	000d98b7 	.word	0x000d98b7
   d7d60:	000d98bc 	.word	0x000d98bc
   d7d64:	000d98ae 	.word	0x000d98ae

000d7d68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7d68:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7d6a:	2000      	movs	r0, #0
   d7d6c:	f7fd fa36 	bl	d51dc <spark_sync_time_pending>
   d7d70:	b128      	cbz	r0, d7d7e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7d72:	f7fd fa2b 	bl	d51cc <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7d76:	f080 0001 	eor.w	r0, r0, #1
   d7d7a:	b2c0      	uxtb	r0, r0
   d7d7c:	bd08      	pop	{r3, pc}
   d7d7e:	2001      	movs	r0, #1
    }
   d7d80:	bd08      	pop	{r3, pc}

000d7d82 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7d82:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7d84:	2000      	movs	r0, #0
   d7d86:	f7fc ffdb 	bl	d4d40 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7d8a:	4604      	mov	r4, r0
   d7d8c:	b968      	cbnz	r0, d7daa <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7d8e:	f7fd f991 	bl	d50b4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7d92:	2801      	cmp	r0, #1
   d7d94:	d10b      	bne.n	d7dae <_ZN9TimeClass7isValidEv+0x2c>
   d7d96:	4620      	mov	r0, r4
   d7d98:	f7fd f9a4 	bl	d50e4 <system_thread_get_state>
   d7d9c:	b938      	cbnz	r0, d7dae <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d7d9e:	f7ff ffe3 	bl	d7d68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7da2:	b930      	cbnz	r0, d7db2 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7da4:	f7fd fa0a 	bl	d51bc <spark_process>
   d7da8:	e7f9      	b.n	d7d9e <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7daa:	2001      	movs	r0, #1
   d7dac:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d7dae:	2000      	movs	r0, #0
   d7db0:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d7db2:	f7ff ffd9 	bl	d7d68 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7db6:	2000      	movs	r0, #0
   d7db8:	f7fc ffc2 	bl	d4d40 <HAL_RTC_Time_Is_Valid>
   d7dbc:	3000      	adds	r0, #0
   d7dbe:	bf18      	it	ne
   d7dc0:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7dc2:	bd10      	pop	{r4, pc}

000d7dc4 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7dc4:	b508      	push	{r3, lr}
    (void)isValid();
   d7dc6:	f7ff ffdc 	bl	d7d82 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7dce:	f7fc bfaf 	b.w	d4d30 <HAL_RTC_Get_UnixTime>
	...

000d7dd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7dd4:	4b02      	ldr	r3, [pc, #8]	; (d7de0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7dd6:	681a      	ldr	r2, [r3, #0]
   d7dd8:	4b02      	ldr	r3, [pc, #8]	; (d7de4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7dda:	601a      	str	r2, [r3, #0]
   d7ddc:	4770      	bx	lr
   d7dde:	bf00      	nop
   d7de0:	2003d864 	.word	0x2003d864
   d7de4:	2003e410 	.word	0x2003e410

000d7de8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7de8:	2100      	movs	r1, #0
   d7dea:	f7fd b973 	b.w	d50d4 <system_delay_ms>

000d7dee <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7dee:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7df0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7df2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7df4:	b113      	cbz	r3, d7dfc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7df6:	2203      	movs	r2, #3
   d7df8:	4601      	mov	r1, r0
   d7dfa:	4798      	blx	r3
    }
   d7dfc:	4620      	mov	r0, r4
   d7dfe:	bd10      	pop	{r4, pc}

000d7e00 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7e00:	b510      	push	{r4, lr}
   d7e02:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7e04:	f7ff fff3 	bl	d7dee <_ZNSt14_Function_baseD1Ev>
   d7e08:	4620      	mov	r0, r4
   d7e0a:	bd10      	pop	{r4, pc}

000d7e0c <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d7e0c:	b510      	push	{r4, lr}
   d7e0e:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7e10:	f7fd f918 	bl	d5044 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d7e14:	4284      	cmp	r4, r0
   d7e16:	d008      	beq.n	d7e2a <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d7e18:	b11c      	cbz	r4, d7e22 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d7e1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d7e1e:	f7fd b901 	b.w	d5024 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d7e22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d7e26:	f7fd b905 	b.w	d5034 <LED_Signaling_Stop>
   d7e2a:	bd10      	pop	{r4, pc}

000d7e2c <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d7e2c:	b570      	push	{r4, r5, r6, lr}
   d7e2e:	4605      	mov	r5, r0
   d7e30:	460e      	mov	r6, r1
   d7e32:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d7e34:	f7fd f906 	bl	d5044 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d7e38:	b150      	cbz	r0, d7e50 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d7e3a:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d7e3e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d7e42:	f7fd f8e7 	bl	d5014 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d7e46:	20e7      	movs	r0, #231	; 0xe7
}
   d7e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d7e4c:	f7fd b902 	b.w	d5054 <LED_On>
   d7e50:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7e54 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7e54:	4803      	ldr	r0, [pc, #12]	; (d7e64 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7e56:	4a04      	ldr	r2, [pc, #16]	; (d7e68 <_GLOBAL__sub_I_RGB+0x14>)
   d7e58:	4904      	ldr	r1, [pc, #16]	; (d7e6c <_GLOBAL__sub_I_RGB+0x18>)
   d7e5a:	2300      	movs	r3, #0
   d7e5c:	6083      	str	r3, [r0, #8]
   d7e5e:	f000 bd7a 	b.w	d8956 <__aeabi_atexit>
   d7e62:	bf00      	nop
   d7e64:	2003e414 	.word	0x2003e414
   d7e68:	2003d8d0 	.word	0x2003d8d0
   d7e6c:	000d7e01 	.word	0x000d7e01

000d7e70 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7e70:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7e72:	4b0c      	ldr	r3, [pc, #48]	; (d7ea4 <serialEventRun+0x34>)
   d7e74:	b133      	cbz	r3, d7e84 <serialEventRun+0x14>
   d7e76:	f000 f95b 	bl	d8130 <_Z16_fetch_usbserialv>
   d7e7a:	6803      	ldr	r3, [r0, #0]
   d7e7c:	691b      	ldr	r3, [r3, #16]
   d7e7e:	4798      	blx	r3
   d7e80:	2800      	cmp	r0, #0
   d7e82:	dc09      	bgt.n	d7e98 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d7e84:	4b08      	ldr	r3, [pc, #32]	; (d7ea8 <serialEventRun+0x38>)
   d7e86:	b163      	cbz	r3, d7ea2 <serialEventRun+0x32>
   d7e88:	f000 f9da 	bl	d8240 <_Z22__fetch_global_Serial1v>
   d7e8c:	6803      	ldr	r3, [r0, #0]
   d7e8e:	691b      	ldr	r3, [r3, #16]
   d7e90:	4798      	blx	r3
   d7e92:	2800      	cmp	r0, #0
   d7e94:	dc03      	bgt.n	d7e9e <serialEventRun+0x2e>
   d7e96:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7e98:	f3af 8000 	nop.w
   d7e9c:	e7f2      	b.n	d7e84 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7e9e:	f3af 8000 	nop.w
   d7ea2:	bd08      	pop	{r3, pc}
	...

000d7eac <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7eac:	b508      	push	{r3, lr}
	serialEventRun();
   d7eae:	f7ff ffdf 	bl	d7e70 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7eb2:	f7fc ff35 	bl	d4d20 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7eb6:	4b01      	ldr	r3, [pc, #4]	; (d7ebc <_post_loop+0x10>)
   d7eb8:	6018      	str	r0, [r3, #0]
   d7eba:	bd08      	pop	{r3, pc}
   d7ebc:	2003e748 	.word	0x2003e748

000d7ec0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7ec0:	4802      	ldr	r0, [pc, #8]	; (d7ecc <_Z33system_initialize_user_backup_ramv+0xc>)
   d7ec2:	4a03      	ldr	r2, [pc, #12]	; (d7ed0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7ec4:	4903      	ldr	r1, [pc, #12]	; (d7ed4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7ec6:	1a12      	subs	r2, r2, r0
   d7ec8:	f000 bec9 	b.w	d8c5e <memcpy>
   d7ecc:	2003f400 	.word	0x2003f400
   d7ed0:	2003f404 	.word	0x2003f404
   d7ed4:	000d9c30 	.word	0x000d9c30

000d7ed8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7ed8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7eda:	2300      	movs	r3, #0
   d7edc:	9300      	str	r3, [sp, #0]
   d7ede:	461a      	mov	r2, r3
   d7ee0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ee4:	f7fd f910 	bl	d5108 <system_ctrl_set_result>
}
   d7ee8:	b003      	add	sp, #12
   d7eea:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7ef0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7ef0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7ef2:	8843      	ldrh	r3, [r0, #2]
   d7ef4:	2b0a      	cmp	r3, #10
   d7ef6:	d008      	beq.n	d7f0a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7ef8:	2b50      	cmp	r3, #80	; 0x50
   d7efa:	d109      	bne.n	d7f10 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7efc:	4b09      	ldr	r3, [pc, #36]	; (d7f24 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7efe:	681b      	ldr	r3, [r3, #0]
   d7f00:	b13b      	cbz	r3, d7f12 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7f02:	b003      	add	sp, #12
   d7f04:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7f08:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7f0a:	f7ff ffe5 	bl	d7ed8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7f0e:	e006      	b.n	d7f1e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f10:	2300      	movs	r3, #0
   d7f12:	9300      	str	r3, [sp, #0]
   d7f14:	461a      	mov	r2, r3
   d7f16:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f1a:	f7fd f8f5 	bl	d5108 <system_ctrl_set_result>
        break;
    }
}
   d7f1e:	b003      	add	sp, #12
   d7f20:	f85d fb04 	ldr.w	pc, [sp], #4
   d7f24:	2003e424 	.word	0x2003e424

000d7f28 <module_user_init_hook>:

void module_user_init_hook()
{
   d7f28:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7f2a:	4c10      	ldr	r4, [pc, #64]	; (d7f6c <module_user_init_hook+0x44>)
   d7f2c:	4d10      	ldr	r5, [pc, #64]	; (d7f70 <module_user_init_hook+0x48>)
   d7f2e:	6823      	ldr	r3, [r4, #0]
   d7f30:	42ab      	cmp	r3, r5
   d7f32:	4b10      	ldr	r3, [pc, #64]	; (d7f74 <module_user_init_hook+0x4c>)
   d7f34:	bf0c      	ite	eq
   d7f36:	2201      	moveq	r2, #1
   d7f38:	2200      	movne	r2, #0
   d7f3a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7f3c:	d002      	beq.n	d7f44 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7f3e:	f7ff ffbf 	bl	d7ec0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7f42:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7f44:	f7fc fedc 	bl	d4d00 <HAL_RNG_GetRandomNumber>
   d7f48:	4604      	mov	r4, r0
    srand(seed);
   d7f4a:	f000 feb7 	bl	d8cbc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7f4e:	4b0a      	ldr	r3, [pc, #40]	; (d7f78 <module_user_init_hook+0x50>)
   d7f50:	b113      	cbz	r3, d7f58 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d7f52:	4620      	mov	r0, r4
   d7f54:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7f58:	2100      	movs	r1, #0
   d7f5a:	4807      	ldr	r0, [pc, #28]	; (d7f78 <module_user_init_hook+0x50>)
   d7f5c:	f7fd f946 	bl	d51ec <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f60:	2100      	movs	r1, #0
   d7f62:	4806      	ldr	r0, [pc, #24]	; (d7f7c <module_user_init_hook+0x54>)
}
   d7f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7f68:	f7fd b8c4 	b.w	d50f4 <system_ctrl_set_app_request_handler>
   d7f6c:	2003f400 	.word	0x2003f400
   d7f70:	9a271c1e 	.word	0x9a271c1e
   d7f74:	2003e428 	.word	0x2003e428
   d7f78:	00000000 	.word	0x00000000
   d7f7c:	000d7ef1 	.word	0x000d7ef1

000d7f80 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7f80:	4770      	bx	lr

000d7f82 <_ZN9IPAddressD0Ev>:
   d7f82:	b510      	push	{r4, lr}
   d7f84:	2118      	movs	r1, #24
   d7f86:	4604      	mov	r4, r0
   d7f88:	f000 fcf2 	bl	d8970 <_ZdlPvj>
   d7f8c:	4620      	mov	r0, r4
   d7f8e:	bd10      	pop	{r4, pc}

000d7f90 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7f90:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7f92:	7d03      	ldrb	r3, [r0, #20]
   d7f94:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7f96:	b08d      	sub	sp, #52	; 0x34
   d7f98:	460e      	mov	r6, r1
   d7f9a:	f100 0704 	add.w	r7, r0, #4
   d7f9e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7fa2:	d002      	beq.n	d7faa <_ZNK9IPAddress7printToER5Print+0x1a>
   d7fa4:	f100 0508 	add.w	r5, r0, #8
   d7fa8:	e018      	b.n	d7fdc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7faa:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7fac:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7fae:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7fb2:	232f      	movs	r3, #47	; 0x2f
   d7fb4:	462a      	mov	r2, r5
   d7fb6:	200a      	movs	r0, #10
   d7fb8:	f7fc ff94 	bl	d4ee4 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7fbc:	4628      	mov	r0, r5
   d7fbe:	f000 fecf 	bl	d8d60 <strlen>
   d7fc2:	6833      	ldr	r3, [r6, #0]
   d7fc4:	4602      	mov	r2, r0
   d7fc6:	68db      	ldr	r3, [r3, #12]
   d7fc8:	4629      	mov	r1, r5
   d7fca:	4630      	mov	r0, r6
   d7fcc:	4798      	blx	r3
   d7fce:	e00f      	b.n	d7ff0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7fd0:	b124      	cbz	r4, d7fdc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7fd2:	212e      	movs	r1, #46	; 0x2e
   d7fd4:	4630      	mov	r0, r6
   d7fd6:	f7fe fea3 	bl	d6d20 <_ZN5Print5printEc>
   d7fda:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d7fdc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7fe0:	220a      	movs	r2, #10
   d7fe2:	4630      	mov	r0, r6
   d7fe4:	f7fe feab 	bl	d6d3e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7fe8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7fea:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7fec:	d1f0      	bne.n	d7fd0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7fee:	4620      	mov	r0, r4
    }
    return n;
}
   d7ff0:	b00d      	add	sp, #52	; 0x34
   d7ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7ff4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7ff4:	b510      	push	{r4, lr}
   d7ff6:	4b05      	ldr	r3, [pc, #20]	; (d800c <_ZN9IPAddressC1Ev+0x18>)
   d7ff8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7ffa:	2211      	movs	r2, #17
   d7ffc:	f840 3b04 	str.w	r3, [r0], #4
   d8000:	2100      	movs	r1, #0
   d8002:	f000 fe52 	bl	d8caa <memset>
{
    clear();
}
   d8006:	4620      	mov	r0, r4
   d8008:	bd10      	pop	{r4, pc}
   d800a:	bf00      	nop
   d800c:	000d9964 	.word	0x000d9964

000d8010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8010:	4603      	mov	r3, r0
   d8012:	4a07      	ldr	r2, [pc, #28]	; (d8030 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8014:	b510      	push	{r4, lr}
   d8016:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d801a:	f101 0210 	add.w	r2, r1, #16
   d801e:	f851 4b04 	ldr.w	r4, [r1], #4
   d8022:	f843 4b04 	str.w	r4, [r3], #4
   d8026:	4291      	cmp	r1, r2
   d8028:	d1f9      	bne.n	d801e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d802a:	780a      	ldrb	r2, [r1, #0]
   d802c:	701a      	strb	r2, [r3, #0]
}
   d802e:	bd10      	pop	{r4, pc}
   d8030:	000d9964 	.word	0x000d9964

000d8034 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8034:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8036:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d803a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d803e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d8042:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8046:	2304      	movs	r3, #4
   d8048:	6041      	str	r1, [r0, #4]
   d804a:	7503      	strb	r3, [r0, #20]
   d804c:	bd10      	pop	{r4, pc}

000d804e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d804e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d8050:	780d      	ldrb	r5, [r1, #0]
   d8052:	788b      	ldrb	r3, [r1, #2]
   d8054:	784a      	ldrb	r2, [r1, #1]
   d8056:	78c9      	ldrb	r1, [r1, #3]
   d8058:	9100      	str	r1, [sp, #0]
   d805a:	4629      	mov	r1, r5
   d805c:	f7ff ffea 	bl	d8034 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d8060:	b003      	add	sp, #12
   d8062:	bd30      	pop	{r4, r5, pc}

000d8064 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8064:	7441      	strb	r1, [r0, #17]
   d8066:	4770      	bx	lr

000d8068 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8068:	4770      	bx	lr

000d806a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d806a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d806c:	2100      	movs	r1, #0
   d806e:	7c00      	ldrb	r0, [r0, #16]
   d8070:	f7fc ffb8 	bl	d4fe4 <HAL_USB_USART_Receive_Data>
}
   d8074:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8078:	bf28      	it	cs
   d807a:	f04f 30ff 	movcs.w	r0, #4294967295
   d807e:	bd08      	pop	{r3, pc}

000d8080 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8080:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8082:	2101      	movs	r1, #1
   d8084:	7c00      	ldrb	r0, [r0, #16]
   d8086:	f7fc ffad 	bl	d4fe4 <HAL_USB_USART_Receive_Data>
}
   d808a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d808e:	bf28      	it	cs
   d8090:	f04f 30ff 	movcs.w	r0, #4294967295
   d8094:	bd08      	pop	{r3, pc}

000d8096 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8096:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8098:	7c00      	ldrb	r0, [r0, #16]
   d809a:	f7fc ff9b 	bl	d4fd4 <HAL_USB_USART_Available_Data_For_Write>
}
   d809e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80a2:	bd08      	pop	{r3, pc}

000d80a4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d80a4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d80a6:	7c00      	ldrb	r0, [r0, #16]
   d80a8:	f7fc ff8c 	bl	d4fc4 <HAL_USB_USART_Available_Data>
}
   d80ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d80b0:	bd08      	pop	{r3, pc}

000d80b2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d80b2:	7c00      	ldrb	r0, [r0, #16]
   d80b4:	f7fc bfa6 	b.w	d5004 <HAL_USB_USART_Flush_Data>

000d80b8 <_ZN9USBSerialD0Ev>:
   d80b8:	b510      	push	{r4, lr}
   d80ba:	2114      	movs	r1, #20
   d80bc:	4604      	mov	r4, r0
   d80be:	f000 fc57 	bl	d8970 <_ZdlPvj>
   d80c2:	4620      	mov	r0, r4
   d80c4:	bd10      	pop	{r4, pc}

000d80c6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d80c6:	b538      	push	{r3, r4, r5, lr}
   d80c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d80ca:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d80cc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d80ce:	f7fc ff81 	bl	d4fd4 <HAL_USB_USART_Available_Data_For_Write>
   d80d2:	2800      	cmp	r0, #0
   d80d4:	dc01      	bgt.n	d80da <_ZN9USBSerial5writeEh+0x14>
   d80d6:	7c60      	ldrb	r0, [r4, #17]
   d80d8:	b128      	cbz	r0, d80e6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d80da:	4629      	mov	r1, r5
   d80dc:	7c20      	ldrb	r0, [r4, #16]
   d80de:	f7fc ff89 	bl	d4ff4 <HAL_USB_USART_Send_Data>
   d80e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d80e6:	bd38      	pop	{r3, r4, r5, pc}

000d80e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d80e8:	b510      	push	{r4, lr}
   d80ea:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d80ec:	2300      	movs	r3, #0
   d80ee:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d80f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d80f4:	60a3      	str	r3, [r4, #8]
   d80f6:	4b05      	ldr	r3, [pc, #20]	; (d810c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d80f8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d80fa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d80fc:	4608      	mov	r0, r1
{
  _serial = serial;
   d80fe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8100:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8102:	4611      	mov	r1, r2
   d8104:	f7fc ff46 	bl	d4f94 <HAL_USB_USART_Init>
}
   d8108:	4620      	mov	r0, r4
   d810a:	bd10      	pop	{r4, pc}
   d810c:	000d9978 	.word	0x000d9978

000d8110 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8110:	2200      	movs	r2, #0
   d8112:	7c00      	ldrb	r0, [r0, #16]
   d8114:	f7fc bf46 	b.w	d4fa4 <HAL_USB_USART_Begin>

000d8118 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d8118:	7c00      	ldrb	r0, [r0, #16]
   d811a:	f7fc bf4b 	b.w	d4fb4 <HAL_USB_USART_End>

000d811e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d811e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8120:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8122:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8124:	2100      	movs	r1, #0
   d8126:	f000 fdc0 	bl	d8caa <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d812a:	4620      	mov	r0, r4
   d812c:	bd10      	pop	{r4, pc}
	...

000d8130 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8130:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8132:	4d0e      	ldr	r5, [pc, #56]	; (d816c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8134:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8136:	a801      	add	r0, sp, #4
   d8138:	f7ff fff1 	bl	d811e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d813c:	6829      	ldr	r1, [r5, #0]
   d813e:	f011 0401 	ands.w	r4, r1, #1
   d8142:	d110      	bne.n	d8166 <_Z16_fetch_usbserialv+0x36>
   d8144:	4628      	mov	r0, r5
   d8146:	f7fb ffb7 	bl	d40b8 <__cxa_guard_acquire>
   d814a:	b160      	cbz	r0, d8166 <_Z16_fetch_usbserialv+0x36>
   d814c:	aa01      	add	r2, sp, #4
   d814e:	4621      	mov	r1, r4
   d8150:	4807      	ldr	r0, [pc, #28]	; (d8170 <_Z16_fetch_usbserialv+0x40>)
   d8152:	f7ff ffc9 	bl	d80e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8156:	4628      	mov	r0, r5
   d8158:	f7fb ffb3 	bl	d40c2 <__cxa_guard_release>
   d815c:	4a05      	ldr	r2, [pc, #20]	; (d8174 <_Z16_fetch_usbserialv+0x44>)
   d815e:	4906      	ldr	r1, [pc, #24]	; (d8178 <_Z16_fetch_usbserialv+0x48>)
   d8160:	4803      	ldr	r0, [pc, #12]	; (d8170 <_Z16_fetch_usbserialv+0x40>)
   d8162:	f000 fbf8 	bl	d8956 <__aeabi_atexit>
	return _usbserial;
}
   d8166:	4802      	ldr	r0, [pc, #8]	; (d8170 <_Z16_fetch_usbserialv+0x40>)
   d8168:	b007      	add	sp, #28
   d816a:	bd30      	pop	{r4, r5, pc}
   d816c:	2003e42c 	.word	0x2003e42c
   d8170:	2003e430 	.word	0x2003e430
   d8174:	2003d8d0 	.word	0x2003d8d0
   d8178:	000d8069 	.word	0x000d8069

000d817c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d817c:	4770      	bx	lr

000d817e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d817e:	7441      	strb	r1, [r0, #17]
   d8180:	4770      	bx	lr

000d8182 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8182:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8184:	7c00      	ldrb	r0, [r0, #16]
   d8186:	f7fc feed 	bl	d4f64 <HAL_USART_Available_Data_For_Write>
}
   d818a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d818e:	bd08      	pop	{r3, pc}

000d8190 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8190:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8192:	7c00      	ldrb	r0, [r0, #16]
   d8194:	f7fc fec6 	bl	d4f24 <HAL_USART_Available_Data>
}
   d8198:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d819c:	bd08      	pop	{r3, pc}

000d819e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d819e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d81a0:	7c00      	ldrb	r0, [r0, #16]
   d81a2:	f7fc fecf 	bl	d4f44 <HAL_USART_Peek_Data>
}
   d81a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81aa:	bf28      	it	cs
   d81ac:	f04f 30ff 	movcs.w	r0, #4294967295
   d81b0:	bd08      	pop	{r3, pc}

000d81b2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d81b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d81b4:	7c00      	ldrb	r0, [r0, #16]
   d81b6:	f7fc febd 	bl	d4f34 <HAL_USART_Read_Data>
}
   d81ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d81be:	bf28      	it	cs
   d81c0:	f04f 30ff 	movcs.w	r0, #4294967295
   d81c4:	bd08      	pop	{r3, pc}

000d81c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d81c6:	7c00      	ldrb	r0, [r0, #16]
   d81c8:	f7fc bec4 	b.w	d4f54 <HAL_USART_Flush_Data>

000d81cc <_ZN11USARTSerialD0Ev>:
   d81cc:	b510      	push	{r4, lr}
   d81ce:	2114      	movs	r1, #20
   d81d0:	4604      	mov	r4, r0
   d81d2:	f000 fbcd 	bl	d8970 <_ZdlPvj>
   d81d6:	4620      	mov	r0, r4
   d81d8:	bd10      	pop	{r4, pc}

000d81da <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d81da:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d81dc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d81de:	4604      	mov	r4, r0
   d81e0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d81e2:	b925      	cbnz	r5, d81ee <_ZN11USARTSerial5writeEh+0x14>
   d81e4:	7c00      	ldrb	r0, [r0, #16]
   d81e6:	f7fc febd 	bl	d4f64 <HAL_USART_Available_Data_For_Write>
   d81ea:	2800      	cmp	r0, #0
   d81ec:	dd05      	ble.n	d81fa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d81ee:	4631      	mov	r1, r6
   d81f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d81f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d81f6:	f7fc be8d 	b.w	d4f14 <HAL_USART_Write_Data>
  }
  return 0;
}
   d81fa:	4628      	mov	r0, r5
   d81fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8200 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8200:	b510      	push	{r4, lr}
   d8202:	4604      	mov	r4, r0
   d8204:	4608      	mov	r0, r1
   d8206:	4611      	mov	r1, r2
   d8208:	2200      	movs	r2, #0
   d820a:	6062      	str	r2, [r4, #4]
   d820c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8210:	60a2      	str	r2, [r4, #8]
   d8212:	4a05      	ldr	r2, [pc, #20]	; (d8228 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8214:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8216:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8218:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d821a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d821c:	461a      	mov	r2, r3
   d821e:	f7fc fe69 	bl	d4ef4 <HAL_USART_Init>
}
   d8222:	4620      	mov	r0, r4
   d8224:	bd10      	pop	{r4, pc}
   d8226:	bf00      	nop
   d8228:	000d99a8 	.word	0x000d99a8

000d822c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d822c:	2300      	movs	r3, #0
   d822e:	7c00      	ldrb	r0, [r0, #16]
   d8230:	f7fc bea0 	b.w	d4f74 <HAL_USART_BeginConfig>

000d8234 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8234:	2200      	movs	r2, #0
   d8236:	f7ff bff9 	b.w	d822c <_ZN11USARTSerial5beginEmm>

000d823a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d823a:	7c00      	ldrb	r0, [r0, #16]
   d823c:	f7fc be62 	b.w	d4f04 <HAL_USART_End>

000d8240 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8240:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8242:	4d0c      	ldr	r5, [pc, #48]	; (d8274 <_Z22__fetch_global_Serial1v+0x34>)
   d8244:	6829      	ldr	r1, [r5, #0]
   d8246:	f011 0401 	ands.w	r4, r1, #1
   d824a:	d111      	bne.n	d8270 <_Z22__fetch_global_Serial1v+0x30>
   d824c:	4628      	mov	r0, r5
   d824e:	f7fb ff33 	bl	d40b8 <__cxa_guard_acquire>
   d8252:	b168      	cbz	r0, d8270 <_Z22__fetch_global_Serial1v+0x30>
   d8254:	4a08      	ldr	r2, [pc, #32]	; (d8278 <_Z22__fetch_global_Serial1v+0x38>)
   d8256:	4b09      	ldr	r3, [pc, #36]	; (d827c <_Z22__fetch_global_Serial1v+0x3c>)
   d8258:	4809      	ldr	r0, [pc, #36]	; (d8280 <_Z22__fetch_global_Serial1v+0x40>)
   d825a:	4621      	mov	r1, r4
   d825c:	f7ff ffd0 	bl	d8200 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8260:	4628      	mov	r0, r5
   d8262:	f7fb ff2e 	bl	d40c2 <__cxa_guard_release>
   d8266:	4a07      	ldr	r2, [pc, #28]	; (d8284 <_Z22__fetch_global_Serial1v+0x44>)
   d8268:	4907      	ldr	r1, [pc, #28]	; (d8288 <_Z22__fetch_global_Serial1v+0x48>)
   d826a:	4805      	ldr	r0, [pc, #20]	; (d8280 <_Z22__fetch_global_Serial1v+0x40>)
   d826c:	f000 fb73 	bl	d8956 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8270:	4803      	ldr	r0, [pc, #12]	; (d8280 <_Z22__fetch_global_Serial1v+0x40>)
   d8272:	bd38      	pop	{r3, r4, r5, pc}
   d8274:	2003e4dc 	.word	0x2003e4dc
   d8278:	2003e4e0 	.word	0x2003e4e0
   d827c:	2003e458 	.word	0x2003e458
   d8280:	2003e444 	.word	0x2003e444
   d8284:	2003d8d0 	.word	0x2003d8d0
   d8288:	000d817d 	.word	0x000d817d

000d828c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d828c:	2200      	movs	r2, #0
   d828e:	4611      	mov	r1, r2
   d8290:	6840      	ldr	r0, [r0, #4]
   d8292:	f7fc bf7b 	b.w	d518c <network_listening>

000d8296 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8296:	2200      	movs	r2, #0
   d8298:	4611      	mov	r1, r2
   d829a:	6840      	ldr	r0, [r0, #4]
   d829c:	f7fc bf86 	b.w	d51ac <network_get_listen_timeout>

000d82a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d82a0:	2200      	movs	r2, #0
   d82a2:	6840      	ldr	r0, [r0, #4]
   d82a4:	f7fc bf7a 	b.w	d519c <network_set_listen_timeout>

000d82a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d82a8:	2200      	movs	r2, #0
   d82aa:	f081 0101 	eor.w	r1, r1, #1
   d82ae:	6840      	ldr	r0, [r0, #4]
   d82b0:	f7fc bf64 	b.w	d517c <network_listen>

000d82b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d82b4:	2300      	movs	r3, #0
   d82b6:	461a      	mov	r2, r3
   d82b8:	2101      	movs	r1, #1
   d82ba:	6840      	ldr	r0, [r0, #4]
   d82bc:	f7fc bf56 	b.w	d516c <network_off>

000d82c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d82c0:	2300      	movs	r3, #0
   d82c2:	461a      	mov	r2, r3
   d82c4:	4619      	mov	r1, r3
   d82c6:	6840      	ldr	r0, [r0, #4]
   d82c8:	f7fc bf48 	b.w	d515c <network_on>

000d82cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d82cc:	2200      	movs	r2, #0
   d82ce:	4611      	mov	r1, r2
   d82d0:	6840      	ldr	r0, [r0, #4]
   d82d2:	f7fc bf3b 	b.w	d514c <network_ready>

000d82d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d82d6:	2200      	movs	r2, #0
   d82d8:	4611      	mov	r1, r2
   d82da:	6840      	ldr	r0, [r0, #4]
   d82dc:	f7fc bf26 	b.w	d512c <network_connecting>

000d82e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d82e0:	2200      	movs	r2, #0
   d82e2:	2102      	movs	r1, #2
   d82e4:	6840      	ldr	r0, [r0, #4]
   d82e6:	f7fc bf29 	b.w	d513c <network_disconnect>

000d82ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d82ea:	2300      	movs	r3, #0
   d82ec:	461a      	mov	r2, r3
   d82ee:	6840      	ldr	r0, [r0, #4]
   d82f0:	f7fc bf14 	b.w	d511c <network_connect>

000d82f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d82f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d82f6:	4605      	mov	r5, r0
   d82f8:	b188      	cbz	r0, d831e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d82fa:	6804      	ldr	r4, [r0, #0]
   d82fc:	b14c      	cbz	r4, d8312 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d82fe:	68a3      	ldr	r3, [r4, #8]
   d8300:	b11b      	cbz	r3, d830a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8302:	2203      	movs	r2, #3
   d8304:	4621      	mov	r1, r4
   d8306:	4620      	mov	r0, r4
   d8308:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d830a:	2110      	movs	r1, #16
   d830c:	4620      	mov	r0, r4
   d830e:	f000 fb2f 	bl	d8970 <_ZdlPvj>
   d8312:	4628      	mov	r0, r5
   d8314:	2114      	movs	r1, #20
      }
   d8316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d831a:	f000 bb29 	b.w	d8970 <_ZdlPvj>
   d831e:	bd38      	pop	{r3, r4, r5, pc}

000d8320 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8320:	b110      	cbz	r0, d8328 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8322:	6803      	ldr	r3, [r0, #0]
   d8324:	685b      	ldr	r3, [r3, #4]
   d8326:	4718      	bx	r3
   d8328:	4770      	bx	lr

000d832a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d832a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d832c:	6803      	ldr	r3, [r0, #0]
   d832e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8330:	b1bb      	cbz	r3, d8362 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8332:	6858      	ldr	r0, [r3, #4]
   d8334:	f7fc fd9e 	bl	d4e74 <os_thread_is_current>
   d8338:	b978      	cbnz	r0, d835a <_ZN6ThreadD1Ev+0x30>
   d833a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d833c:	7c5a      	ldrb	r2, [r3, #17]
   d833e:	b912      	cbnz	r2, d8346 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8340:	6858      	ldr	r0, [r3, #4]
   d8342:	f7fc fd9f 	bl	d4e84 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8346:	6823      	ldr	r3, [r4, #0]
   d8348:	6858      	ldr	r0, [r3, #4]
   d834a:	f7fc fda3 	bl	d4e94 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d834e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8350:	2300      	movs	r3, #0
   d8352:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8354:	b128      	cbz	r0, d8362 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8356:	f7ff ffcd 	bl	d82f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d835a:	6820      	ldr	r0, [r4, #0]
   d835c:	b108      	cbz	r0, d8362 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d835e:	f7ff ffc9 	bl	d82f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8362:	4620      	mov	r0, r4
   d8364:	bd10      	pop	{r4, pc}

000d8366 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8366:	b538      	push	{r3, r4, r5, lr}
   d8368:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d836a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d836e:	b108      	cbz	r0, d8374 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8370:	f7fb fe95 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8374:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8378:	b108      	cbz	r0, d837e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d837a:	f7fc fd9b 	bl	d4eb4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d837e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8382:	b135      	cbz	r5, d8392 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8384:	4628      	mov	r0, r5
   d8386:	f7ff ffd0 	bl	d832a <_ZN6ThreadD1Ev>
   d838a:	2104      	movs	r1, #4
   d838c:	4628      	mov	r0, r5
   d838e:	f000 faef 	bl	d8970 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8392:	6820      	ldr	r0, [r4, #0]
   d8394:	b108      	cbz	r0, d839a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8396:	f7ff ffc3 	bl	d8320 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d839a:	4620      	mov	r0, r4
   d839c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d83a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d83a0:	b510      	push	{r4, lr}
   d83a2:	4b04      	ldr	r3, [pc, #16]	; (d83b4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d83a4:	4604      	mov	r4, r0
   d83a6:	f840 3b08 	str.w	r3, [r0], #8
   d83aa:	f7ff ffdc 	bl	d8366 <_ZN5spark11MeshPublishD1Ev>
   d83ae:	4620      	mov	r0, r4
   d83b0:	bd10      	pop	{r4, pc}
   d83b2:	bf00      	nop
   d83b4:	000d99d8 	.word	0x000d99d8

000d83b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d83b8:	b538      	push	{r3, r4, r5, lr}
   d83ba:	4c0e      	ldr	r4, [pc, #56]	; (d83f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d83bc:	4b0e      	ldr	r3, [pc, #56]	; (d83f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d83be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d83c0:	2500      	movs	r5, #0
   d83c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d83c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d83c8:	6063      	str	r3, [r4, #4]
   d83ca:	60a5      	str	r5, [r4, #8]
   d83cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d83d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d83d4:	f7fc fd66 	bl	d4ea4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d83d8:	4b08      	ldr	r3, [pc, #32]	; (d83fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d83da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d83de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d83e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d83e4:	4620      	mov	r0, r4
   d83e6:	4a06      	ldr	r2, [pc, #24]	; (d8400 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d83e8:	4906      	ldr	r1, [pc, #24]	; (d8404 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d83ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d83ee:	f000 bab2 	b.w	d8956 <__aeabi_atexit>
   d83f2:	bf00      	nop
   d83f4:	2003e564 	.word	0x2003e564
   d83f8:	000d9a40 	.word	0x000d9a40
   d83fc:	000d99d8 	.word	0x000d99d8
   d8400:	2003d8d0 	.word	0x2003d8d0
   d8404:	000d83a1 	.word	0x000d83a1

000d8408 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8408:	2200      	movs	r2, #0
   d840a:	4611      	mov	r1, r2
   d840c:	6840      	ldr	r0, [r0, #4]
   d840e:	f7fc be9d 	b.w	d514c <network_ready>

000d8412 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8412:	2200      	movs	r2, #0
   d8414:	4611      	mov	r1, r2
   d8416:	6840      	ldr	r0, [r0, #4]
   d8418:	f7fc beb8 	b.w	d518c <network_listening>

000d841c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d841c:	2200      	movs	r2, #0
   d841e:	4611      	mov	r1, r2
   d8420:	6840      	ldr	r0, [r0, #4]
   d8422:	f7fc bec3 	b.w	d51ac <network_get_listen_timeout>

000d8426 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8426:	2200      	movs	r2, #0
   d8428:	6840      	ldr	r0, [r0, #4]
   d842a:	f7fc beb7 	b.w	d519c <network_set_listen_timeout>

000d842e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d842e:	2200      	movs	r2, #0
   d8430:	f081 0101 	eor.w	r1, r1, #1
   d8434:	6840      	ldr	r0, [r0, #4]
   d8436:	f7fc bea1 	b.w	d517c <network_listen>

000d843a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d843a:	2300      	movs	r3, #0
   d843c:	461a      	mov	r2, r3
   d843e:	4619      	mov	r1, r3
   d8440:	6840      	ldr	r0, [r0, #4]
   d8442:	f7fc be93 	b.w	d516c <network_off>

000d8446 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8446:	2300      	movs	r3, #0
   d8448:	461a      	mov	r2, r3
   d844a:	4619      	mov	r1, r3
   d844c:	6840      	ldr	r0, [r0, #4]
   d844e:	f7fc be85 	b.w	d515c <network_on>

000d8452 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8452:	2200      	movs	r2, #0
   d8454:	4611      	mov	r1, r2
   d8456:	6840      	ldr	r0, [r0, #4]
   d8458:	f7fc be68 	b.w	d512c <network_connecting>

000d845c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d845c:	2200      	movs	r2, #0
   d845e:	2102      	movs	r1, #2
   d8460:	6840      	ldr	r0, [r0, #4]
   d8462:	f7fc be6b 	b.w	d513c <network_disconnect>

000d8466 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8466:	2300      	movs	r3, #0
   d8468:	461a      	mov	r2, r3
   d846a:	6840      	ldr	r0, [r0, #4]
   d846c:	f7fc be56 	b.w	d511c <network_connect>

000d8470 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8470:	4b02      	ldr	r3, [pc, #8]	; (d847c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8472:	2204      	movs	r2, #4
   d8474:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8476:	4a02      	ldr	r2, [pc, #8]	; (d8480 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8478:	601a      	str	r2, [r3, #0]
   d847a:	4770      	bx	lr
   d847c:	2003e738 	.word	0x2003e738
   d8480:	000d9a0c 	.word	0x000d9a0c

000d8484 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8484:	2300      	movs	r3, #0
   d8486:	461a      	mov	r2, r3
   d8488:	6840      	ldr	r0, [r0, #4]
   d848a:	f7fc be47 	b.w	d511c <network_connect>

000d848e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d848e:	2200      	movs	r2, #0
   d8490:	2102      	movs	r1, #2
   d8492:	6840      	ldr	r0, [r0, #4]
   d8494:	f7fc be52 	b.w	d513c <network_disconnect>

000d8498 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8498:	2200      	movs	r2, #0
   d849a:	4611      	mov	r1, r2
   d849c:	6840      	ldr	r0, [r0, #4]
   d849e:	f7fc be45 	b.w	d512c <network_connecting>

000d84a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d84a2:	2200      	movs	r2, #0
   d84a4:	4611      	mov	r1, r2
   d84a6:	6840      	ldr	r0, [r0, #4]
   d84a8:	f7fc be50 	b.w	d514c <network_ready>

000d84ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d84ac:	2300      	movs	r3, #0
   d84ae:	461a      	mov	r2, r3
   d84b0:	4619      	mov	r1, r3
   d84b2:	6840      	ldr	r0, [r0, #4]
   d84b4:	f7fc be52 	b.w	d515c <network_on>

000d84b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d84b8:	2300      	movs	r3, #0
   d84ba:	461a      	mov	r2, r3
   d84bc:	4619      	mov	r1, r3
   d84be:	6840      	ldr	r0, [r0, #4]
   d84c0:	f7fc be54 	b.w	d516c <network_off>

000d84c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d84c4:	2200      	movs	r2, #0
   d84c6:	f081 0101 	eor.w	r1, r1, #1
   d84ca:	6840      	ldr	r0, [r0, #4]
   d84cc:	f7fc be56 	b.w	d517c <network_listen>

000d84d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d84d0:	2200      	movs	r2, #0
   d84d2:	6840      	ldr	r0, [r0, #4]
   d84d4:	f7fc be62 	b.w	d519c <network_set_listen_timeout>

000d84d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d84d8:	2200      	movs	r2, #0
   d84da:	4611      	mov	r1, r2
   d84dc:	6840      	ldr	r0, [r0, #4]
   d84de:	f7fc be65 	b.w	d51ac <network_get_listen_timeout>

000d84e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d84e2:	2200      	movs	r2, #0
   d84e4:	4611      	mov	r1, r2
   d84e6:	6840      	ldr	r0, [r0, #4]
   d84e8:	f7fc be50 	b.w	d518c <network_listening>

000d84ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d84ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d84f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d84f2:	b095      	sub	sp, #84	; 0x54
   d84f4:	4616      	mov	r6, r2
   d84f6:	460d      	mov	r5, r1
   d84f8:	4607      	mov	r7, r0
    IPAddress addr;
   d84fa:	f7ff fd7b 	bl	d7ff4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d84fe:	4621      	mov	r1, r4
   d8500:	2220      	movs	r2, #32
   d8502:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8504:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8506:	f000 fbd0 	bl	d8caa <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d850a:	2340      	movs	r3, #64	; 0x40
   d850c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d850e:	4621      	mov	r1, r4
   d8510:	466b      	mov	r3, sp
   d8512:	aa0c      	add	r2, sp, #48	; 0x30
   d8514:	4630      	mov	r0, r6
   d8516:	f7fc fbe3 	bl	d4ce0 <netdb_getaddrinfo>
    if (!r) {
   d851a:	4604      	mov	r4, r0
   d851c:	2800      	cmp	r0, #0
   d851e:	d144      	bne.n	d85aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8520:	4602      	mov	r2, r0
   d8522:	2101      	movs	r1, #1
   d8524:	6868      	ldr	r0, [r5, #4]
   d8526:	f7fc fe11 	bl	d514c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d852a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d852c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d852e:	4622      	mov	r2, r4
   d8530:	6868      	ldr	r0, [r5, #4]
   d8532:	f7fc fe0b 	bl	d514c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8536:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8538:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d853a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d853c:	2e00      	cmp	r6, #0
   d853e:	d034      	beq.n	d85aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8540:	2900      	cmp	r1, #0
   d8542:	d132      	bne.n	d85aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8544:	6873      	ldr	r3, [r6, #4]
   d8546:	2b02      	cmp	r3, #2
   d8548:	d002      	beq.n	d8550 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d854a:	2b0a      	cmp	r3, #10
   d854c:	d009      	beq.n	d8562 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d854e:	e02a      	b.n	d85a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8550:	f1b8 0f00 	cmp.w	r8, #0
   d8554:	d027      	beq.n	d85a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8556:	6971      	ldr	r1, [r6, #20]
   d8558:	4638      	mov	r0, r7
   d855a:	3104      	adds	r1, #4
   d855c:	f7ff fd77 	bl	d804e <_ZN9IPAddressaSEPKh>
   d8560:	e020      	b.n	d85a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8562:	f1b9 0f00 	cmp.w	r9, #0
   d8566:	d01e      	beq.n	d85a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8568:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d856a:	2211      	movs	r2, #17
   d856c:	a801      	add	r0, sp, #4
   d856e:	f000 fb9c 	bl	d8caa <memset>
                    a.v = 6;
   d8572:	2306      	movs	r3, #6
   d8574:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8578:	ad01      	add	r5, sp, #4
   d857a:	f104 0308 	add.w	r3, r4, #8
   d857e:	3418      	adds	r4, #24
   d8580:	6818      	ldr	r0, [r3, #0]
   d8582:	6859      	ldr	r1, [r3, #4]
   d8584:	462a      	mov	r2, r5
   d8586:	c203      	stmia	r2!, {r0, r1}
   d8588:	3308      	adds	r3, #8
   d858a:	42a3      	cmp	r3, r4
   d858c:	4615      	mov	r5, r2
   d858e:	d1f7      	bne.n	d8580 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8590:	a901      	add	r1, sp, #4
   d8592:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8594:	ad07      	add	r5, sp, #28
   d8596:	f7ff fd3b 	bl	d8010 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d859a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d859c:	1d3c      	adds	r4, r7, #4
   d859e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d85a0:	682b      	ldr	r3, [r5, #0]
   d85a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d85a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d85a6:	69f6      	ldr	r6, [r6, #28]
   d85a8:	e7c8      	b.n	d853c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d85aa:	9800      	ldr	r0, [sp, #0]
   d85ac:	f7fc fb90 	bl	d4cd0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d85b0:	4638      	mov	r0, r7
   d85b2:	b015      	add	sp, #84	; 0x54
   d85b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d85b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d85b8:	4b02      	ldr	r3, [pc, #8]	; (d85c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d85ba:	4a03      	ldr	r2, [pc, #12]	; (d85c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d85bc:	601a      	str	r2, [r3, #0]
   d85be:	2200      	movs	r2, #0
   d85c0:	605a      	str	r2, [r3, #4]
   d85c2:	4770      	bx	lr
   d85c4:	2003e740 	.word	0x2003e740
   d85c8:	000d9a40 	.word	0x000d9a40

000d85cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d85cc:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d85d0:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d85d2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d85d6:	2901      	cmp	r1, #1
   d85d8:	4610      	mov	r0, r2
   d85da:	d104      	bne.n	d85e6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d85dc:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d85e0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d85e4:	e004      	b.n	d85f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d85e6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d85e8:	bf04      	itt	eq
   d85ea:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d85ee:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d85f0:	3b01      	subs	r3, #1
   d85f2:	f102 0210 	add.w	r2, r2, #16
   d85f6:	d1ec      	bne.n	d85d2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d85f8:	4770      	bx	lr

000d85fa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d85fa:	b40e      	push	{r1, r2, r3}
   d85fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8600:	b087      	sub	sp, #28
   d8602:	af00      	add	r7, sp, #0
   d8604:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d8608:	4605      	mov	r5, r0
   d860a:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d860e:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8610:	4623      	mov	r3, r4
   d8612:	4632      	mov	r2, r6
   d8614:	2110      	movs	r1, #16
   d8616:	f107 0008 	add.w	r0, r7, #8
   d861a:	f7fc fe07 	bl	d522c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d861e:	280f      	cmp	r0, #15
   d8620:	d916      	bls.n	d8650 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d8622:	f100 0308 	add.w	r3, r0, #8
   d8626:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d862a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d862c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8630:	4632      	mov	r2, r6
   d8632:	1c41      	adds	r1, r0, #1
   d8634:	4623      	mov	r3, r4
   d8636:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d8638:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d863a:	f7fc fdf7 	bl	d522c <vsnprintf>
        va_end(args);
        if (n > 0) {
   d863e:	1e02      	subs	r2, r0, #0
   d8640:	dd04      	ble.n	d864c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d8642:	682b      	ldr	r3, [r5, #0]
   d8644:	4669      	mov	r1, sp
   d8646:	689b      	ldr	r3, [r3, #8]
   d8648:	4628      	mov	r0, r5
   d864a:	4798      	blx	r3
   d864c:	46c5      	mov	sp, r8
   d864e:	e007      	b.n	d8660 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d8650:	b130      	cbz	r0, d8660 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d8652:	682b      	ldr	r3, [r5, #0]
   d8654:	4602      	mov	r2, r0
   d8656:	689b      	ldr	r3, [r3, #8]
   d8658:	f107 0108 	add.w	r1, r7, #8
   d865c:	4628      	mov	r0, r5
   d865e:	4798      	blx	r3
    }
}
   d8660:	371c      	adds	r7, #28
   d8662:	46bd      	mov	sp, r7
   d8664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8668:	b003      	add	sp, #12
   d866a:	4770      	bx	lr

000d866c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d866c:	b513      	push	{r0, r1, r4, lr}
   d866e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d8670:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8672:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d8676:	6894      	ldr	r4, [r2, #8]
   d8678:	4619      	mov	r1, r3
   d867a:	2201      	movs	r2, #1
   d867c:	47a0      	blx	r4
}
   d867e:	b002      	add	sp, #8
   d8680:	bd10      	pop	{r4, pc}

000d8682 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d8682:	6883      	ldr	r3, [r0, #8]
   d8684:	b1fb      	cbz	r3, d86c6 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d8686:	781a      	ldrb	r2, [r3, #0]
   d8688:	2a03      	cmp	r2, #3
   d868a:	d81a      	bhi.n	d86c2 <_ZNK5spark9JSONValue4typeEv+0x40>
   d868c:	e8df f002 	tbb	[pc, r2]
   d8690:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d8694:	2005      	movs	r0, #5
   d8696:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d8698:	6802      	ldr	r2, [r0, #0]
   d869a:	685b      	ldr	r3, [r3, #4]
   d869c:	6852      	ldr	r2, [r2, #4]
   d869e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d86a0:	282d      	cmp	r0, #45	; 0x2d
   d86a2:	d014      	beq.n	d86ce <_ZNK5spark9JSONValue4typeEv+0x4c>
   d86a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d86a8:	2b09      	cmp	r3, #9
   d86aa:	d910      	bls.n	d86ce <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d86ac:	2874      	cmp	r0, #116	; 0x74
   d86ae:	d010      	beq.n	d86d2 <_ZNK5spark9JSONValue4typeEv+0x50>
   d86b0:	2866      	cmp	r0, #102	; 0x66
   d86b2:	d00e      	beq.n	d86d2 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d86b4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d86b8:	4258      	negs	r0, r3
   d86ba:	4158      	adcs	r0, r3
   d86bc:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d86be:	2006      	movs	r0, #6
   d86c0:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d86c2:	2000      	movs	r0, #0
   d86c4:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d86c6:	4618      	mov	r0, r3
   d86c8:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d86ca:	2004      	movs	r0, #4
   d86cc:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d86ce:	2003      	movs	r0, #3
   d86d0:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d86d2:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d86d4:	4770      	bx	lr

000d86d6 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d86d6:	b510      	push	{r4, lr}
   d86d8:	4604      	mov	r4, r0
    switch (type()) {
   d86da:	f7ff ffd2 	bl	d8682 <_ZNK5spark9JSONValue4typeEv>
   d86de:	2802      	cmp	r0, #2
   d86e0:	d00d      	beq.n	d86fe <_ZNK5spark9JSONValue5toIntEv+0x28>
   d86e2:	d316      	bcc.n	d8712 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d86e4:	2804      	cmp	r0, #4
   d86e6:	d814      	bhi.n	d8712 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d86e8:	6822      	ldr	r2, [r4, #0]
   d86ea:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d86ec:	6850      	ldr	r0, [r2, #4]
   d86ee:	685b      	ldr	r3, [r3, #4]
   d86f0:	220a      	movs	r2, #10
   d86f2:	2100      	movs	r1, #0
   d86f4:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d86f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d86fa:	f000 bbf3 	b.w	d8ee4 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d86fe:	6822      	ldr	r2, [r4, #0]
   d8700:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8702:	6852      	ldr	r2, [r2, #4]
   d8704:	685b      	ldr	r3, [r3, #4]
   d8706:	5cd0      	ldrb	r0, [r2, r3]
   d8708:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d870c:	4258      	negs	r0, r3
   d870e:	4158      	adcs	r0, r3
   d8710:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d8712:	2000      	movs	r0, #0
    }
}
   d8714:	bd10      	pop	{r4, pc}

000d8716 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8716:	b510      	push	{r4, lr}
    if (!n_) {
   d8718:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d871a:	4604      	mov	r4, r0
    if (!n_) {
   d871c:	b15b      	cbz	r3, d8736 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d871e:	6880      	ldr	r0, [r0, #8]
   d8720:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d8722:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d8724:	3010      	adds	r0, #16
   d8726:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8728:	6120      	str	r0, [r4, #16]
    --n_;
   d872a:	6163      	str	r3, [r4, #20]
    if (n_) {
   d872c:	b12b      	cbz	r3, d873a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d872e:	f7ff ff4d 	bl	d85cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8732:	60a0      	str	r0, [r4, #8]
   d8734:	e001      	b.n	d873a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d8736:	4618      	mov	r0, r3
   d8738:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d873a:	2001      	movs	r0, #1
}
   d873c:	bd10      	pop	{r4, pc}

000d873e <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d873e:	b510      	push	{r4, lr}
    write('}');
   d8740:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d8742:	4604      	mov	r4, r0
    write('}');
   d8744:	f7ff ff92 	bl	d866c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8748:	2301      	movs	r3, #1
   d874a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d874c:	4620      	mov	r0, r4
   d874e:	bd10      	pop	{r4, pc}

000d8750 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d8750:	b508      	push	{r3, lr}
    switch (state_) {
   d8752:	7903      	ldrb	r3, [r0, #4]
   d8754:	2b01      	cmp	r3, #1
   d8756:	d002      	beq.n	d875e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d8758:	2b02      	cmp	r3, #2
   d875a:	d002      	beq.n	d8762 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d875c:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d875e:	212c      	movs	r1, #44	; 0x2c
   d8760:	e000      	b.n	d8764 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d8762:	213a      	movs	r1, #58	; 0x3a
   d8764:	f7ff ff82 	bl	d866c <_ZN5spark10JSONWriter5writeEc>
   d8768:	bd08      	pop	{r3, pc}

000d876a <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d876a:	b510      	push	{r4, lr}
   d876c:	4604      	mov	r4, r0
    writeSeparator();
   d876e:	f7ff ffef 	bl	d8750 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8772:	4620      	mov	r0, r4
   d8774:	217b      	movs	r1, #123	; 0x7b
   d8776:	f7ff ff79 	bl	d866c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d877a:	2300      	movs	r3, #0
   d877c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d877e:	4620      	mov	r0, r4
   d8780:	bd10      	pop	{r4, pc}
	...

000d8784 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8784:	b538      	push	{r3, r4, r5, lr}
   d8786:	4604      	mov	r4, r0
   d8788:	460d      	mov	r5, r1
    writeSeparator();
   d878a:	f7ff ffe1 	bl	d8750 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d878e:	6823      	ldr	r3, [r4, #0]
   d8790:	4904      	ldr	r1, [pc, #16]	; (d87a4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8792:	68db      	ldr	r3, [r3, #12]
   d8794:	4620      	mov	r0, r4
   d8796:	462a      	mov	r2, r5
   d8798:	4798      	blx	r3
    state_ = NEXT;
   d879a:	2301      	movs	r3, #1
   d879c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d879e:	4620      	mov	r0, r4
   d87a0:	bd38      	pop	{r3, r4, r5, pc}
   d87a2:	bf00      	nop
   d87a4:	000d928b 	.word	0x000d928b

000d87a8 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d87a8:	b538      	push	{r3, r4, r5, lr}
   d87aa:	4604      	mov	r4, r0
   d87ac:	460d      	mov	r5, r1
    writeSeparator();
   d87ae:	f7ff ffcf 	bl	d8750 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d87b2:	6823      	ldr	r3, [r4, #0]
   d87b4:	4904      	ldr	r1, [pc, #16]	; (d87c8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d87b6:	68db      	ldr	r3, [r3, #12]
   d87b8:	4620      	mov	r0, r4
   d87ba:	462a      	mov	r2, r5
   d87bc:	4798      	blx	r3
    state_ = NEXT;
   d87be:	2301      	movs	r3, #1
   d87c0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d87c2:	4620      	mov	r0, r4
   d87c4:	bd38      	pop	{r3, r4, r5, pc}
   d87c6:	bf00      	nop
   d87c8:	000d9018 	.word	0x000d9018

000d87cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d87cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87ce:	460d      	mov	r5, r1
   d87d0:	4617      	mov	r7, r2
    write('"');
   d87d2:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d87d4:	4604      	mov	r4, r0
   d87d6:	442f      	add	r7, r5
    write('"');
   d87d8:	f7ff ff48 	bl	d866c <_ZN5spark10JSONWriter5writeEc>
   d87dc:	462a      	mov	r2, r5
    const char* const end = str + size;
   d87de:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d87e0:	42ba      	cmp	r2, r7
   d87e2:	d038      	beq.n	d8856 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d87e4:	4616      	mov	r6, r2
   d87e6:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d87ea:	2d22      	cmp	r5, #34	; 0x22
   d87ec:	d003      	beq.n	d87f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d87ee:	2d5c      	cmp	r5, #92	; 0x5c
   d87f0:	d001      	beq.n	d87f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d87f2:	2d1f      	cmp	r5, #31
   d87f4:	d82d      	bhi.n	d8852 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d87f6:	6823      	ldr	r3, [r4, #0]
   d87f8:	1a52      	subs	r2, r2, r1
   d87fa:	689b      	ldr	r3, [r3, #8]
   d87fc:	4620      	mov	r0, r4
   d87fe:	4798      	blx	r3
            write('\\');
   d8800:	215c      	movs	r1, #92	; 0x5c
   d8802:	4620      	mov	r0, r4
   d8804:	f7ff ff32 	bl	d866c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8808:	2d0c      	cmp	r5, #12
   d880a:	d019      	beq.n	d8840 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d880c:	d807      	bhi.n	d881e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d880e:	2d09      	cmp	r5, #9
   d8810:	d00f      	beq.n	d8832 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d8812:	2d0a      	cmp	r5, #10
   d8814:	d012      	beq.n	d883c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d8816:	2d08      	cmp	r5, #8
   d8818:	d114      	bne.n	d8844 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d881a:	2162      	movs	r1, #98	; 0x62
   d881c:	e00a      	b.n	d8834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d881e:	2d22      	cmp	r5, #34	; 0x22
   d8820:	d005      	beq.n	d882e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8822:	2d5c      	cmp	r5, #92	; 0x5c
   d8824:	d003      	beq.n	d882e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8826:	2d0d      	cmp	r5, #13
   d8828:	d10c      	bne.n	d8844 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d882a:	2172      	movs	r1, #114	; 0x72
   d882c:	e002      	b.n	d8834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d882e:	4629      	mov	r1, r5
   d8830:	e000      	b.n	d8834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d8832:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d8834:	4620      	mov	r0, r4
   d8836:	f7ff ff19 	bl	d866c <_ZN5spark10JSONWriter5writeEc>
                break;
   d883a:	e009      	b.n	d8850 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d883c:	216e      	movs	r1, #110	; 0x6e
   d883e:	e7f9      	b.n	d8834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d8840:	2166      	movs	r1, #102	; 0x66
   d8842:	e7f7      	b.n	d8834 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8844:	6823      	ldr	r3, [r4, #0]
   d8846:	490a      	ldr	r1, [pc, #40]	; (d8870 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d8848:	68db      	ldr	r3, [r3, #12]
   d884a:	462a      	mov	r2, r5
   d884c:	4620      	mov	r0, r4
   d884e:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d8850:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d8852:	4632      	mov	r2, r6
   d8854:	e7c4      	b.n	d87e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d8856:	4291      	cmp	r1, r2
   d8858:	d004      	beq.n	d8864 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d885a:	6823      	ldr	r3, [r4, #0]
   d885c:	1a52      	subs	r2, r2, r1
   d885e:	689d      	ldr	r5, [r3, #8]
   d8860:	4620      	mov	r0, r4
   d8862:	47a8      	blx	r5
    }
    write('"');
   d8864:	2122      	movs	r1, #34	; 0x22
   d8866:	4620      	mov	r0, r4
   d8868:	f7ff ff00 	bl	d866c <_ZN5spark10JSONWriter5writeEc>
   d886c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d886e:	bf00      	nop
   d8870:	000d9a89 	.word	0x000d9a89

000d8874 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8874:	b570      	push	{r4, r5, r6, lr}
   d8876:	4604      	mov	r4, r0
   d8878:	460d      	mov	r5, r1
   d887a:	4616      	mov	r6, r2
    writeSeparator();
   d887c:	f7ff ff68 	bl	d8750 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8880:	4620      	mov	r0, r4
   d8882:	4632      	mov	r2, r6
   d8884:	4629      	mov	r1, r5
   d8886:	f7ff ffa1 	bl	d87cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d888a:	2302      	movs	r3, #2
   d888c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d888e:	4620      	mov	r0, r4
   d8890:	bd70      	pop	{r4, r5, r6, pc}

000d8892 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8892:	b570      	push	{r4, r5, r6, lr}
   d8894:	4604      	mov	r4, r0
   d8896:	460d      	mov	r5, r1
   d8898:	4616      	mov	r6, r2
    writeSeparator();
   d889a:	f7ff ff59 	bl	d8750 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d889e:	4620      	mov	r0, r4
   d88a0:	4632      	mov	r2, r6
   d88a2:	4629      	mov	r1, r5
   d88a4:	f7ff ff92 	bl	d87cc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d88a8:	2301      	movs	r3, #1
   d88aa:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d88ac:	4620      	mov	r0, r4
   d88ae:	bd70      	pop	{r4, r5, r6, pc}

000d88b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d88b0:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d88b2:	2300      	movs	r3, #0
   d88b4:	4604      	mov	r4, r0
   d88b6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d88b8:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d88ba:	4810      	ldr	r0, [pc, #64]	; (d88fc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d88bc:	60a0      	str	r0, [r4, #8]
   d88be:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d88c0:	b1d1      	cbz	r1, d88f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d88c2:	780b      	ldrb	r3, [r1, #0]
   d88c4:	2b03      	cmp	r3, #3
   d88c6:	d006      	beq.n	d88d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d88c8:	b9b3      	cbnz	r3, d88f8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d88ca:	6813      	ldr	r3, [r2, #0]
   d88cc:	6858      	ldr	r0, [r3, #4]
   d88ce:	684b      	ldr	r3, [r1, #4]
   d88d0:	5cc3      	ldrb	r3, [r0, r3]
   d88d2:	2b6e      	cmp	r3, #110	; 0x6e
   d88d4:	d008      	beq.n	d88e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d88d6:	6813      	ldr	r3, [r2, #0]
   d88d8:	6858      	ldr	r0, [r3, #4]
   d88da:	684b      	ldr	r3, [r1, #4]
   d88dc:	4403      	add	r3, r0
   d88de:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d88e0:	688b      	ldr	r3, [r1, #8]
   d88e2:	6849      	ldr	r1, [r1, #4]
   d88e4:	1a5b      	subs	r3, r3, r1
   d88e6:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d88e8:	4611      	mov	r1, r2
   d88ea:	4620      	mov	r0, r4
   d88ec:	f851 3b04 	ldr.w	r3, [r1], #4
   d88f0:	f840 3b04 	str.w	r3, [r0], #4
   d88f4:	f7fd fc5a 	bl	d61ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d88f8:	4620      	mov	r0, r4
   d88fa:	bd10      	pop	{r4, pc}
   d88fc:	000d98b0 	.word	0x000d98b0

000d8900 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8900:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8902:	b510      	push	{r4, lr}
   d8904:	4604      	mov	r4, r0
   d8906:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8908:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d890a:	6083      	str	r3, [r0, #8]
   d890c:	60c3      	str	r3, [r0, #12]
   d890e:	6103      	str	r3, [r0, #16]
   d8910:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d8912:	b171      	cbz	r1, d8932 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d8914:	780b      	ldrb	r3, [r1, #0]
   d8916:	2b01      	cmp	r3, #1
   d8918:	d10b      	bne.n	d8932 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d891a:	f101 0310 	add.w	r3, r1, #16
   d891e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d8920:	68cb      	ldr	r3, [r1, #12]
   d8922:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8924:	4611      	mov	r1, r2
   d8926:	f851 3b04 	ldr.w	r3, [r1], #4
   d892a:	f840 3b04 	str.w	r3, [r0], #4
   d892e:	f7fd fc3d 	bl	d61ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d8932:	4620      	mov	r0, r4
   d8934:	bd10      	pop	{r4, pc}

000d8936 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8936:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8938:	b510      	push	{r4, lr}
   d893a:	4604      	mov	r4, r0
   d893c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d893e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d8940:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d8942:	b131      	cbz	r1, d8952 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8944:	4611      	mov	r1, r2
   d8946:	f851 3b04 	ldr.w	r3, [r1], #4
   d894a:	f840 3b04 	str.w	r3, [r0], #4
   d894e:	f7fd fc2d 	bl	d61ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d8952:	4620      	mov	r0, r4
   d8954:	bd10      	pop	{r4, pc}

000d8956 <__aeabi_atexit>:
   d8956:	460b      	mov	r3, r1
   d8958:	4601      	mov	r1, r0
   d895a:	4618      	mov	r0, r3
   d895c:	f000 b962 	b.w	d8c24 <__cxa_atexit>

000d8960 <_ZSt15get_new_handlerv>:
   d8960:	4b02      	ldr	r3, [pc, #8]	; (d896c <_ZSt15get_new_handlerv+0xc>)
   d8962:	6818      	ldr	r0, [r3, #0]
   d8964:	f3bf 8f5f 	dmb	sy
   d8968:	4770      	bx	lr
   d896a:	bf00      	nop
   d896c:	2003e74c 	.word	0x2003e74c

000d8970 <_ZdlPvj>:
   d8970:	f7fb bb93 	b.w	d409a <_ZdlPv>

000d8974 <_ZnwjRKSt9nothrow_t>:
   d8974:	b510      	push	{r4, lr}
   d8976:	2800      	cmp	r0, #0
   d8978:	bf14      	ite	ne
   d897a:	4604      	movne	r4, r0
   d897c:	2401      	moveq	r4, #1
   d897e:	4620      	mov	r0, r4
   d8980:	f7fc fc3c 	bl	d51fc <malloc>
   d8984:	b920      	cbnz	r0, d8990 <_ZnwjRKSt9nothrow_t+0x1c>
   d8986:	f7ff ffeb 	bl	d8960 <_ZSt15get_new_handlerv>
   d898a:	b108      	cbz	r0, d8990 <_ZnwjRKSt9nothrow_t+0x1c>
   d898c:	4780      	blx	r0
   d898e:	e7f6      	b.n	d897e <_ZnwjRKSt9nothrow_t+0xa>
   d8990:	bd10      	pop	{r4, pc}
	...

000d8994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8994:	4b18      	ldr	r3, [pc, #96]	; (d89f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8996:	681a      	ldr	r2, [r3, #0]
   d8998:	07d1      	lsls	r1, r2, #31
   d899a:	bf5c      	itt	pl
   d899c:	2201      	movpl	r2, #1
   d899e:	601a      	strpl	r2, [r3, #0]
   d89a0:	4b16      	ldr	r3, [pc, #88]	; (d89fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d89a2:	681a      	ldr	r2, [r3, #0]
   d89a4:	07d2      	lsls	r2, r2, #31
   d89a6:	bf5c      	itt	pl
   d89a8:	2201      	movpl	r2, #1
   d89aa:	601a      	strpl	r2, [r3, #0]
   d89ac:	4b14      	ldr	r3, [pc, #80]	; (d8a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d89ae:	681a      	ldr	r2, [r3, #0]
   d89b0:	07d0      	lsls	r0, r2, #31
   d89b2:	bf5c      	itt	pl
   d89b4:	2201      	movpl	r2, #1
   d89b6:	601a      	strpl	r2, [r3, #0]
   d89b8:	4b12      	ldr	r3, [pc, #72]	; (d8a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d89ba:	681a      	ldr	r2, [r3, #0]
   d89bc:	07d1      	lsls	r1, r2, #31
   d89be:	bf5c      	itt	pl
   d89c0:	2201      	movpl	r2, #1
   d89c2:	601a      	strpl	r2, [r3, #0]
   d89c4:	4b10      	ldr	r3, [pc, #64]	; (d8a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d89c6:	681a      	ldr	r2, [r3, #0]
   d89c8:	07d2      	lsls	r2, r2, #31
   d89ca:	bf5c      	itt	pl
   d89cc:	2201      	movpl	r2, #1
   d89ce:	601a      	strpl	r2, [r3, #0]
   d89d0:	4b0e      	ldr	r3, [pc, #56]	; (d8a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d89d2:	681a      	ldr	r2, [r3, #0]
   d89d4:	07d0      	lsls	r0, r2, #31
   d89d6:	bf5c      	itt	pl
   d89d8:	2201      	movpl	r2, #1
   d89da:	601a      	strpl	r2, [r3, #0]
   d89dc:	4b0c      	ldr	r3, [pc, #48]	; (d8a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d89de:	681a      	ldr	r2, [r3, #0]
   d89e0:	07d1      	lsls	r1, r2, #31
   d89e2:	bf5c      	itt	pl
   d89e4:	2201      	movpl	r2, #1
   d89e6:	601a      	strpl	r2, [r3, #0]
   d89e8:	4b0a      	ldr	r3, [pc, #40]	; (d8a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d89ea:	681a      	ldr	r2, [r3, #0]
   d89ec:	07d2      	lsls	r2, r2, #31
   d89ee:	bf5c      	itt	pl
   d89f0:	2201      	movpl	r2, #1
   d89f2:	601a      	strpl	r2, [r3, #0]
   d89f4:	4770      	bx	lr
   d89f6:	bf00      	nop
   d89f8:	2003e76c 	.word	0x2003e76c
   d89fc:	2003e768 	.word	0x2003e768
   d8a00:	2003e764 	.word	0x2003e764
   d8a04:	2003e760 	.word	0x2003e760
   d8a08:	2003e75c 	.word	0x2003e75c
   d8a0c:	2003e758 	.word	0x2003e758
   d8a10:	2003e754 	.word	0x2003e754
   d8a14:	2003e750 	.word	0x2003e750

000d8a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8a18:	4b24      	ldr	r3, [pc, #144]	; (d8aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8a1a:	681a      	ldr	r2, [r3, #0]
   d8a1c:	07d0      	lsls	r0, r2, #31
   d8a1e:	bf5c      	itt	pl
   d8a20:	2201      	movpl	r2, #1
   d8a22:	601a      	strpl	r2, [r3, #0]
   d8a24:	4b22      	ldr	r3, [pc, #136]	; (d8ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8a26:	681a      	ldr	r2, [r3, #0]
   d8a28:	07d1      	lsls	r1, r2, #31
   d8a2a:	bf5c      	itt	pl
   d8a2c:	2201      	movpl	r2, #1
   d8a2e:	601a      	strpl	r2, [r3, #0]
   d8a30:	4b20      	ldr	r3, [pc, #128]	; (d8ab4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8a32:	681a      	ldr	r2, [r3, #0]
   d8a34:	07d2      	lsls	r2, r2, #31
   d8a36:	bf5c      	itt	pl
   d8a38:	2201      	movpl	r2, #1
   d8a3a:	601a      	strpl	r2, [r3, #0]
   d8a3c:	4b1e      	ldr	r3, [pc, #120]	; (d8ab8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8a3e:	681a      	ldr	r2, [r3, #0]
   d8a40:	07d0      	lsls	r0, r2, #31
   d8a42:	bf5c      	itt	pl
   d8a44:	2201      	movpl	r2, #1
   d8a46:	601a      	strpl	r2, [r3, #0]
   d8a48:	4b1c      	ldr	r3, [pc, #112]	; (d8abc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8a4a:	681a      	ldr	r2, [r3, #0]
   d8a4c:	07d1      	lsls	r1, r2, #31
   d8a4e:	bf5c      	itt	pl
   d8a50:	2201      	movpl	r2, #1
   d8a52:	601a      	strpl	r2, [r3, #0]
   d8a54:	4b1a      	ldr	r3, [pc, #104]	; (d8ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8a56:	681a      	ldr	r2, [r3, #0]
   d8a58:	07d2      	lsls	r2, r2, #31
   d8a5a:	bf5c      	itt	pl
   d8a5c:	2201      	movpl	r2, #1
   d8a5e:	601a      	strpl	r2, [r3, #0]
   d8a60:	4b18      	ldr	r3, [pc, #96]	; (d8ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8a62:	681a      	ldr	r2, [r3, #0]
   d8a64:	07d0      	lsls	r0, r2, #31
   d8a66:	bf5c      	itt	pl
   d8a68:	2201      	movpl	r2, #1
   d8a6a:	601a      	strpl	r2, [r3, #0]
   d8a6c:	4b16      	ldr	r3, [pc, #88]	; (d8ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8a6e:	681a      	ldr	r2, [r3, #0]
   d8a70:	07d1      	lsls	r1, r2, #31
   d8a72:	bf5c      	itt	pl
   d8a74:	2201      	movpl	r2, #1
   d8a76:	601a      	strpl	r2, [r3, #0]
   d8a78:	4b14      	ldr	r3, [pc, #80]	; (d8acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8a7a:	681a      	ldr	r2, [r3, #0]
   d8a7c:	07d2      	lsls	r2, r2, #31
   d8a7e:	bf5c      	itt	pl
   d8a80:	2201      	movpl	r2, #1
   d8a82:	601a      	strpl	r2, [r3, #0]
   d8a84:	4b12      	ldr	r3, [pc, #72]	; (d8ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8a86:	681a      	ldr	r2, [r3, #0]
   d8a88:	07d0      	lsls	r0, r2, #31
   d8a8a:	bf5c      	itt	pl
   d8a8c:	2201      	movpl	r2, #1
   d8a8e:	601a      	strpl	r2, [r3, #0]
   d8a90:	4b10      	ldr	r3, [pc, #64]	; (d8ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8a92:	681a      	ldr	r2, [r3, #0]
   d8a94:	07d1      	lsls	r1, r2, #31
   d8a96:	bf5c      	itt	pl
   d8a98:	2201      	movpl	r2, #1
   d8a9a:	601a      	strpl	r2, [r3, #0]
   d8a9c:	4b0e      	ldr	r3, [pc, #56]	; (d8ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8a9e:	681a      	ldr	r2, [r3, #0]
   d8aa0:	07d2      	lsls	r2, r2, #31
   d8aa2:	bf5c      	itt	pl
   d8aa4:	2201      	movpl	r2, #1
   d8aa6:	601a      	strpl	r2, [r3, #0]
   d8aa8:	4770      	bx	lr
   d8aaa:	bf00      	nop
   d8aac:	2003e79c 	.word	0x2003e79c
   d8ab0:	2003e798 	.word	0x2003e798
   d8ab4:	2003e794 	.word	0x2003e794
   d8ab8:	2003e790 	.word	0x2003e790
   d8abc:	2003e78c 	.word	0x2003e78c
   d8ac0:	2003e788 	.word	0x2003e788
   d8ac4:	2003e784 	.word	0x2003e784
   d8ac8:	2003e780 	.word	0x2003e780
   d8acc:	2003e77c 	.word	0x2003e77c
   d8ad0:	2003e778 	.word	0x2003e778
   d8ad4:	2003e774 	.word	0x2003e774
   d8ad8:	2003e770 	.word	0x2003e770

000d8adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8adc:	4b24      	ldr	r3, [pc, #144]	; (d8b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8ade:	681a      	ldr	r2, [r3, #0]
   d8ae0:	07d0      	lsls	r0, r2, #31
   d8ae2:	bf5c      	itt	pl
   d8ae4:	2201      	movpl	r2, #1
   d8ae6:	601a      	strpl	r2, [r3, #0]
   d8ae8:	4b22      	ldr	r3, [pc, #136]	; (d8b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8aea:	681a      	ldr	r2, [r3, #0]
   d8aec:	07d1      	lsls	r1, r2, #31
   d8aee:	bf5c      	itt	pl
   d8af0:	2201      	movpl	r2, #1
   d8af2:	601a      	strpl	r2, [r3, #0]
   d8af4:	4b20      	ldr	r3, [pc, #128]	; (d8b78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8af6:	681a      	ldr	r2, [r3, #0]
   d8af8:	07d2      	lsls	r2, r2, #31
   d8afa:	bf5c      	itt	pl
   d8afc:	2201      	movpl	r2, #1
   d8afe:	601a      	strpl	r2, [r3, #0]
   d8b00:	4b1e      	ldr	r3, [pc, #120]	; (d8b7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8b02:	681a      	ldr	r2, [r3, #0]
   d8b04:	07d0      	lsls	r0, r2, #31
   d8b06:	bf5c      	itt	pl
   d8b08:	2201      	movpl	r2, #1
   d8b0a:	601a      	strpl	r2, [r3, #0]
   d8b0c:	4b1c      	ldr	r3, [pc, #112]	; (d8b80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8b0e:	681a      	ldr	r2, [r3, #0]
   d8b10:	07d1      	lsls	r1, r2, #31
   d8b12:	bf5c      	itt	pl
   d8b14:	2201      	movpl	r2, #1
   d8b16:	601a      	strpl	r2, [r3, #0]
   d8b18:	4b1a      	ldr	r3, [pc, #104]	; (d8b84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8b1a:	681a      	ldr	r2, [r3, #0]
   d8b1c:	07d2      	lsls	r2, r2, #31
   d8b1e:	bf5c      	itt	pl
   d8b20:	2201      	movpl	r2, #1
   d8b22:	601a      	strpl	r2, [r3, #0]
   d8b24:	4b18      	ldr	r3, [pc, #96]	; (d8b88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8b26:	681a      	ldr	r2, [r3, #0]
   d8b28:	07d0      	lsls	r0, r2, #31
   d8b2a:	bf5c      	itt	pl
   d8b2c:	2201      	movpl	r2, #1
   d8b2e:	601a      	strpl	r2, [r3, #0]
   d8b30:	4b16      	ldr	r3, [pc, #88]	; (d8b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8b32:	681a      	ldr	r2, [r3, #0]
   d8b34:	07d1      	lsls	r1, r2, #31
   d8b36:	bf5c      	itt	pl
   d8b38:	2201      	movpl	r2, #1
   d8b3a:	601a      	strpl	r2, [r3, #0]
   d8b3c:	4b14      	ldr	r3, [pc, #80]	; (d8b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8b3e:	681a      	ldr	r2, [r3, #0]
   d8b40:	07d2      	lsls	r2, r2, #31
   d8b42:	bf5c      	itt	pl
   d8b44:	2201      	movpl	r2, #1
   d8b46:	601a      	strpl	r2, [r3, #0]
   d8b48:	4b12      	ldr	r3, [pc, #72]	; (d8b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8b4a:	681a      	ldr	r2, [r3, #0]
   d8b4c:	07d0      	lsls	r0, r2, #31
   d8b4e:	bf5c      	itt	pl
   d8b50:	2201      	movpl	r2, #1
   d8b52:	601a      	strpl	r2, [r3, #0]
   d8b54:	4b10      	ldr	r3, [pc, #64]	; (d8b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8b56:	681a      	ldr	r2, [r3, #0]
   d8b58:	07d1      	lsls	r1, r2, #31
   d8b5a:	bf5c      	itt	pl
   d8b5c:	2201      	movpl	r2, #1
   d8b5e:	601a      	strpl	r2, [r3, #0]
   d8b60:	4b0e      	ldr	r3, [pc, #56]	; (d8b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8b62:	681a      	ldr	r2, [r3, #0]
   d8b64:	07d2      	lsls	r2, r2, #31
   d8b66:	bf5c      	itt	pl
   d8b68:	2201      	movpl	r2, #1
   d8b6a:	601a      	strpl	r2, [r3, #0]
   d8b6c:	4770      	bx	lr
   d8b6e:	bf00      	nop
   d8b70:	2003e7cc 	.word	0x2003e7cc
   d8b74:	2003e7c8 	.word	0x2003e7c8
   d8b78:	2003e7c4 	.word	0x2003e7c4
   d8b7c:	2003e7c0 	.word	0x2003e7c0
   d8b80:	2003e7bc 	.word	0x2003e7bc
   d8b84:	2003e7b8 	.word	0x2003e7b8
   d8b88:	2003e7b4 	.word	0x2003e7b4
   d8b8c:	2003e7b0 	.word	0x2003e7b0
   d8b90:	2003e7ac 	.word	0x2003e7ac
   d8b94:	2003e7a8 	.word	0x2003e7a8
   d8b98:	2003e7a4 	.word	0x2003e7a4
   d8b9c:	2003e7a0 	.word	0x2003e7a0

000d8ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8ba0:	4b18      	ldr	r3, [pc, #96]	; (d8c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8ba2:	681a      	ldr	r2, [r3, #0]
   d8ba4:	07d1      	lsls	r1, r2, #31
   d8ba6:	bf5c      	itt	pl
   d8ba8:	2201      	movpl	r2, #1
   d8baa:	601a      	strpl	r2, [r3, #0]
   d8bac:	4b16      	ldr	r3, [pc, #88]	; (d8c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8bae:	681a      	ldr	r2, [r3, #0]
   d8bb0:	07d2      	lsls	r2, r2, #31
   d8bb2:	bf5c      	itt	pl
   d8bb4:	2201      	movpl	r2, #1
   d8bb6:	601a      	strpl	r2, [r3, #0]
   d8bb8:	4b14      	ldr	r3, [pc, #80]	; (d8c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8bba:	681a      	ldr	r2, [r3, #0]
   d8bbc:	07d0      	lsls	r0, r2, #31
   d8bbe:	bf5c      	itt	pl
   d8bc0:	2201      	movpl	r2, #1
   d8bc2:	601a      	strpl	r2, [r3, #0]
   d8bc4:	4b12      	ldr	r3, [pc, #72]	; (d8c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8bc6:	681a      	ldr	r2, [r3, #0]
   d8bc8:	07d1      	lsls	r1, r2, #31
   d8bca:	bf5c      	itt	pl
   d8bcc:	2201      	movpl	r2, #1
   d8bce:	601a      	strpl	r2, [r3, #0]
   d8bd0:	4b10      	ldr	r3, [pc, #64]	; (d8c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8bd2:	681a      	ldr	r2, [r3, #0]
   d8bd4:	07d2      	lsls	r2, r2, #31
   d8bd6:	bf5c      	itt	pl
   d8bd8:	2201      	movpl	r2, #1
   d8bda:	601a      	strpl	r2, [r3, #0]
   d8bdc:	4b0e      	ldr	r3, [pc, #56]	; (d8c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8bde:	681a      	ldr	r2, [r3, #0]
   d8be0:	07d0      	lsls	r0, r2, #31
   d8be2:	bf5c      	itt	pl
   d8be4:	2201      	movpl	r2, #1
   d8be6:	601a      	strpl	r2, [r3, #0]
   d8be8:	4b0c      	ldr	r3, [pc, #48]	; (d8c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8bea:	681a      	ldr	r2, [r3, #0]
   d8bec:	07d1      	lsls	r1, r2, #31
   d8bee:	bf5c      	itt	pl
   d8bf0:	2201      	movpl	r2, #1
   d8bf2:	601a      	strpl	r2, [r3, #0]
   d8bf4:	4b0a      	ldr	r3, [pc, #40]	; (d8c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8bf6:	681a      	ldr	r2, [r3, #0]
   d8bf8:	07d2      	lsls	r2, r2, #31
   d8bfa:	bf5c      	itt	pl
   d8bfc:	2201      	movpl	r2, #1
   d8bfe:	601a      	strpl	r2, [r3, #0]
   d8c00:	4770      	bx	lr
   d8c02:	bf00      	nop
   d8c04:	2003e7ec 	.word	0x2003e7ec
   d8c08:	2003e7e8 	.word	0x2003e7e8
   d8c0c:	2003e7e4 	.word	0x2003e7e4
   d8c10:	2003e7e0 	.word	0x2003e7e0
   d8c14:	2003e7dc 	.word	0x2003e7dc
   d8c18:	2003e7d8 	.word	0x2003e7d8
   d8c1c:	2003e7d4 	.word	0x2003e7d4
   d8c20:	2003e7d0 	.word	0x2003e7d0

000d8c24 <__cxa_atexit>:
   d8c24:	b510      	push	{r4, lr}
   d8c26:	4c05      	ldr	r4, [pc, #20]	; (d8c3c <__cxa_atexit+0x18>)
   d8c28:	4613      	mov	r3, r2
   d8c2a:	b12c      	cbz	r4, d8c38 <__cxa_atexit+0x14>
   d8c2c:	460a      	mov	r2, r1
   d8c2e:	4601      	mov	r1, r0
   d8c30:	2002      	movs	r0, #2
   d8c32:	f3af 8000 	nop.w
   d8c36:	bd10      	pop	{r4, pc}
   d8c38:	4620      	mov	r0, r4
   d8c3a:	bd10      	pop	{r4, pc}
   d8c3c:	00000000 	.word	0x00000000

000d8c40 <memcmp>:
   d8c40:	b510      	push	{r4, lr}
   d8c42:	3901      	subs	r1, #1
   d8c44:	4402      	add	r2, r0
   d8c46:	4290      	cmp	r0, r2
   d8c48:	d007      	beq.n	d8c5a <memcmp+0x1a>
   d8c4a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8c4e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8c52:	42a3      	cmp	r3, r4
   d8c54:	d0f7      	beq.n	d8c46 <memcmp+0x6>
   d8c56:	1b18      	subs	r0, r3, r4
   d8c58:	bd10      	pop	{r4, pc}
   d8c5a:	2000      	movs	r0, #0
   d8c5c:	bd10      	pop	{r4, pc}

000d8c5e <memcpy>:
   d8c5e:	b510      	push	{r4, lr}
   d8c60:	1e43      	subs	r3, r0, #1
   d8c62:	440a      	add	r2, r1
   d8c64:	4291      	cmp	r1, r2
   d8c66:	d004      	beq.n	d8c72 <memcpy+0x14>
   d8c68:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8c6c:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8c70:	e7f8      	b.n	d8c64 <memcpy+0x6>
   d8c72:	bd10      	pop	{r4, pc}

000d8c74 <memmove>:
   d8c74:	4288      	cmp	r0, r1
   d8c76:	b510      	push	{r4, lr}
   d8c78:	eb01 0302 	add.w	r3, r1, r2
   d8c7c:	d801      	bhi.n	d8c82 <memmove+0xe>
   d8c7e:	1e42      	subs	r2, r0, #1
   d8c80:	e00b      	b.n	d8c9a <memmove+0x26>
   d8c82:	4298      	cmp	r0, r3
   d8c84:	d2fb      	bcs.n	d8c7e <memmove+0xa>
   d8c86:	1881      	adds	r1, r0, r2
   d8c88:	1ad2      	subs	r2, r2, r3
   d8c8a:	42d3      	cmn	r3, r2
   d8c8c:	d004      	beq.n	d8c98 <memmove+0x24>
   d8c8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8c92:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d8c96:	e7f8      	b.n	d8c8a <memmove+0x16>
   d8c98:	bd10      	pop	{r4, pc}
   d8c9a:	4299      	cmp	r1, r3
   d8c9c:	d004      	beq.n	d8ca8 <memmove+0x34>
   d8c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8ca2:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8ca6:	e7f8      	b.n	d8c9a <memmove+0x26>
   d8ca8:	bd10      	pop	{r4, pc}

000d8caa <memset>:
   d8caa:	4402      	add	r2, r0
   d8cac:	4603      	mov	r3, r0
   d8cae:	4293      	cmp	r3, r2
   d8cb0:	d002      	beq.n	d8cb8 <memset+0xe>
   d8cb2:	f803 1b01 	strb.w	r1, [r3], #1
   d8cb6:	e7fa      	b.n	d8cae <memset+0x4>
   d8cb8:	4770      	bx	lr
	...

000d8cbc <srand>:
   d8cbc:	b538      	push	{r3, r4, r5, lr}
   d8cbe:	4b12      	ldr	r3, [pc, #72]	; (d8d08 <srand+0x4c>)
   d8cc0:	681c      	ldr	r4, [r3, #0]
   d8cc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8cc4:	4605      	mov	r5, r0
   d8cc6:	b9d3      	cbnz	r3, d8cfe <srand+0x42>
   d8cc8:	2018      	movs	r0, #24
   d8cca:	f7fc fa97 	bl	d51fc <malloc>
   d8cce:	f243 330e 	movw	r3, #13070	; 0x330e
   d8cd2:	63a0      	str	r0, [r4, #56]	; 0x38
   d8cd4:	8003      	strh	r3, [r0, #0]
   d8cd6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d8cda:	8043      	strh	r3, [r0, #2]
   d8cdc:	f241 2334 	movw	r3, #4660	; 0x1234
   d8ce0:	8083      	strh	r3, [r0, #4]
   d8ce2:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8ce6:	80c3      	strh	r3, [r0, #6]
   d8ce8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d8cec:	8103      	strh	r3, [r0, #8]
   d8cee:	2305      	movs	r3, #5
   d8cf0:	8143      	strh	r3, [r0, #10]
   d8cf2:	230b      	movs	r3, #11
   d8cf4:	8183      	strh	r3, [r0, #12]
   d8cf6:	2201      	movs	r2, #1
   d8cf8:	2300      	movs	r3, #0
   d8cfa:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8cfe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8d00:	2200      	movs	r2, #0
   d8d02:	611d      	str	r5, [r3, #16]
   d8d04:	615a      	str	r2, [r3, #20]
   d8d06:	bd38      	pop	{r3, r4, r5, pc}
   d8d08:	2003d8cc 	.word	0x2003d8cc

000d8d0c <strchr>:
   d8d0c:	b2c9      	uxtb	r1, r1
   d8d0e:	4603      	mov	r3, r0
   d8d10:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8d14:	b11a      	cbz	r2, d8d1e <strchr+0x12>
   d8d16:	4291      	cmp	r1, r2
   d8d18:	d1f9      	bne.n	d8d0e <strchr+0x2>
   d8d1a:	4618      	mov	r0, r3
   d8d1c:	4770      	bx	lr
   d8d1e:	2900      	cmp	r1, #0
   d8d20:	bf0c      	ite	eq
   d8d22:	4618      	moveq	r0, r3
   d8d24:	2000      	movne	r0, #0
   d8d26:	4770      	bx	lr

000d8d28 <strchrnul>:
   d8d28:	b510      	push	{r4, lr}
   d8d2a:	4604      	mov	r4, r0
   d8d2c:	f7ff ffee 	bl	d8d0c <strchr>
   d8d30:	b918      	cbnz	r0, d8d3a <strchrnul+0x12>
   d8d32:	4620      	mov	r0, r4
   d8d34:	f000 f814 	bl	d8d60 <strlen>
   d8d38:	4420      	add	r0, r4
   d8d3a:	bd10      	pop	{r4, pc}

000d8d3c <strcmp>:
   d8d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8d40:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8d44:	2a01      	cmp	r2, #1
   d8d46:	bf28      	it	cs
   d8d48:	429a      	cmpcs	r2, r3
   d8d4a:	d0f7      	beq.n	d8d3c <strcmp>
   d8d4c:	1ad0      	subs	r0, r2, r3
   d8d4e:	4770      	bx	lr

000d8d50 <strcpy>:
   d8d50:	4603      	mov	r3, r0
   d8d52:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8d56:	f803 2b01 	strb.w	r2, [r3], #1
   d8d5a:	2a00      	cmp	r2, #0
   d8d5c:	d1f9      	bne.n	d8d52 <strcpy+0x2>
   d8d5e:	4770      	bx	lr

000d8d60 <strlen>:
   d8d60:	4603      	mov	r3, r0
   d8d62:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8d66:	2a00      	cmp	r2, #0
   d8d68:	d1fb      	bne.n	d8d62 <strlen+0x2>
   d8d6a:	1a18      	subs	r0, r3, r0
   d8d6c:	3801      	subs	r0, #1
   d8d6e:	4770      	bx	lr

000d8d70 <strncmp>:
   d8d70:	b530      	push	{r4, r5, lr}
   d8d72:	b182      	cbz	r2, d8d96 <strncmp+0x26>
   d8d74:	1e45      	subs	r5, r0, #1
   d8d76:	3901      	subs	r1, #1
   d8d78:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d8d7c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8d80:	42a3      	cmp	r3, r4
   d8d82:	d106      	bne.n	d8d92 <strncmp+0x22>
   d8d84:	43ec      	mvns	r4, r5
   d8d86:	4414      	add	r4, r2
   d8d88:	42e0      	cmn	r0, r4
   d8d8a:	d001      	beq.n	d8d90 <strncmp+0x20>
   d8d8c:	2b00      	cmp	r3, #0
   d8d8e:	d1f3      	bne.n	d8d78 <strncmp+0x8>
   d8d90:	461c      	mov	r4, r3
   d8d92:	1b18      	subs	r0, r3, r4
   d8d94:	bd30      	pop	{r4, r5, pc}
   d8d96:	4610      	mov	r0, r2
   d8d98:	bd30      	pop	{r4, r5, pc}

000d8d9a <strnlen>:
   d8d9a:	b510      	push	{r4, lr}
   d8d9c:	4603      	mov	r3, r0
   d8d9e:	4401      	add	r1, r0
   d8da0:	428b      	cmp	r3, r1
   d8da2:	d004      	beq.n	d8dae <strnlen+0x14>
   d8da4:	781a      	ldrb	r2, [r3, #0]
   d8da6:	1c5c      	adds	r4, r3, #1
   d8da8:	b10a      	cbz	r2, d8dae <strnlen+0x14>
   d8daa:	4623      	mov	r3, r4
   d8dac:	e7f8      	b.n	d8da0 <strnlen+0x6>
   d8dae:	1a18      	subs	r0, r3, r0
   d8db0:	bd10      	pop	{r4, pc}

000d8db2 <strrchr>:
   d8db2:	b538      	push	{r3, r4, r5, lr}
   d8db4:	4603      	mov	r3, r0
   d8db6:	460d      	mov	r5, r1
   d8db8:	b141      	cbz	r1, d8dcc <strrchr+0x1a>
   d8dba:	2400      	movs	r4, #0
   d8dbc:	4629      	mov	r1, r5
   d8dbe:	4618      	mov	r0, r3
   d8dc0:	f7ff ffa4 	bl	d8d0c <strchr>
   d8dc4:	b130      	cbz	r0, d8dd4 <strrchr+0x22>
   d8dc6:	1c43      	adds	r3, r0, #1
   d8dc8:	4604      	mov	r4, r0
   d8dca:	e7f7      	b.n	d8dbc <strrchr+0xa>
   d8dcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8dd0:	f7ff bf9c 	b.w	d8d0c <strchr>
   d8dd4:	4620      	mov	r0, r4
   d8dd6:	bd38      	pop	{r3, r4, r5, pc}

000d8dd8 <_strtol_r>:
   d8dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8ddc:	4680      	mov	r8, r0
   d8dde:	4840      	ldr	r0, [pc, #256]	; (d8ee0 <_strtol_r+0x108>)
   d8de0:	f8d0 9000 	ldr.w	r9, [r0]
   d8de4:	460f      	mov	r7, r1
   d8de6:	463d      	mov	r5, r7
   d8de8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8dec:	eb09 0004 	add.w	r0, r9, r4
   d8df0:	7840      	ldrb	r0, [r0, #1]
   d8df2:	f000 0008 	and.w	r0, r0, #8
   d8df6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d8dfa:	b108      	cbz	r0, d8e00 <_strtol_r+0x28>
   d8dfc:	462f      	mov	r7, r5
   d8dfe:	e7f2      	b.n	d8de6 <_strtol_r+0xe>
   d8e00:	2c2d      	cmp	r4, #45	; 0x2d
   d8e02:	d103      	bne.n	d8e0c <_strtol_r+0x34>
   d8e04:	1cbd      	adds	r5, r7, #2
   d8e06:	787c      	ldrb	r4, [r7, #1]
   d8e08:	2601      	movs	r6, #1
   d8e0a:	e003      	b.n	d8e14 <_strtol_r+0x3c>
   d8e0c:	2c2b      	cmp	r4, #43	; 0x2b
   d8e0e:	bf04      	itt	eq
   d8e10:	787c      	ldrbeq	r4, [r7, #1]
   d8e12:	1cbd      	addeq	r5, r7, #2
   d8e14:	b113      	cbz	r3, d8e1c <_strtol_r+0x44>
   d8e16:	2b10      	cmp	r3, #16
   d8e18:	d10a      	bne.n	d8e30 <_strtol_r+0x58>
   d8e1a:	e05b      	b.n	d8ed4 <_strtol_r+0xfc>
   d8e1c:	2c30      	cmp	r4, #48	; 0x30
   d8e1e:	d157      	bne.n	d8ed0 <_strtol_r+0xf8>
   d8e20:	7828      	ldrb	r0, [r5, #0]
   d8e22:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8e26:	2858      	cmp	r0, #88	; 0x58
   d8e28:	d14d      	bne.n	d8ec6 <_strtol_r+0xee>
   d8e2a:	786c      	ldrb	r4, [r5, #1]
   d8e2c:	2310      	movs	r3, #16
   d8e2e:	3502      	adds	r5, #2
   d8e30:	2e00      	cmp	r6, #0
   d8e32:	bf14      	ite	ne
   d8e34:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8e38:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d8e3c:	2700      	movs	r7, #0
   d8e3e:	fbbc faf3 	udiv	sl, ip, r3
   d8e42:	4638      	mov	r0, r7
   d8e44:	fb03 cc1a 	mls	ip, r3, sl, ip
   d8e48:	eb09 0e04 	add.w	lr, r9, r4
   d8e4c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d8e50:	f01e 0f04 	tst.w	lr, #4
   d8e54:	d001      	beq.n	d8e5a <_strtol_r+0x82>
   d8e56:	3c30      	subs	r4, #48	; 0x30
   d8e58:	e00b      	b.n	d8e72 <_strtol_r+0x9a>
   d8e5a:	f01e 0e03 	ands.w	lr, lr, #3
   d8e5e:	d01b      	beq.n	d8e98 <_strtol_r+0xc0>
   d8e60:	f1be 0f01 	cmp.w	lr, #1
   d8e64:	bf0c      	ite	eq
   d8e66:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d8e6a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d8e6e:	ebce 0404 	rsb	r4, lr, r4
   d8e72:	42a3      	cmp	r3, r4
   d8e74:	dd10      	ble.n	d8e98 <_strtol_r+0xc0>
   d8e76:	f1b7 3fff 	cmp.w	r7, #4294967295
   d8e7a:	d00a      	beq.n	d8e92 <_strtol_r+0xba>
   d8e7c:	4550      	cmp	r0, sl
   d8e7e:	d806      	bhi.n	d8e8e <_strtol_r+0xb6>
   d8e80:	d101      	bne.n	d8e86 <_strtol_r+0xae>
   d8e82:	4564      	cmp	r4, ip
   d8e84:	dc03      	bgt.n	d8e8e <_strtol_r+0xb6>
   d8e86:	fb03 4000 	mla	r0, r3, r0, r4
   d8e8a:	2701      	movs	r7, #1
   d8e8c:	e001      	b.n	d8e92 <_strtol_r+0xba>
   d8e8e:	f04f 37ff 	mov.w	r7, #4294967295
   d8e92:	f815 4b01 	ldrb.w	r4, [r5], #1
   d8e96:	e7d7      	b.n	d8e48 <_strtol_r+0x70>
   d8e98:	1c7b      	adds	r3, r7, #1
   d8e9a:	d10c      	bne.n	d8eb6 <_strtol_r+0xde>
   d8e9c:	2e00      	cmp	r6, #0
   d8e9e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8ea2:	bf14      	ite	ne
   d8ea4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8ea8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8eac:	f8c8 3000 	str.w	r3, [r8]
   d8eb0:	b92a      	cbnz	r2, d8ebe <_strtol_r+0xe6>
   d8eb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8eb6:	b106      	cbz	r6, d8eba <_strtol_r+0xe2>
   d8eb8:	4240      	negs	r0, r0
   d8eba:	b172      	cbz	r2, d8eda <_strtol_r+0x102>
   d8ebc:	b107      	cbz	r7, d8ec0 <_strtol_r+0xe8>
   d8ebe:	1e69      	subs	r1, r5, #1
   d8ec0:	6011      	str	r1, [r2, #0]
   d8ec2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ec6:	2430      	movs	r4, #48	; 0x30
   d8ec8:	2b00      	cmp	r3, #0
   d8eca:	d1b1      	bne.n	d8e30 <_strtol_r+0x58>
   d8ecc:	2308      	movs	r3, #8
   d8ece:	e7af      	b.n	d8e30 <_strtol_r+0x58>
   d8ed0:	230a      	movs	r3, #10
   d8ed2:	e7ad      	b.n	d8e30 <_strtol_r+0x58>
   d8ed4:	2c30      	cmp	r4, #48	; 0x30
   d8ed6:	d0a3      	beq.n	d8e20 <_strtol_r+0x48>
   d8ed8:	e7aa      	b.n	d8e30 <_strtol_r+0x58>
   d8eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ede:	bf00      	nop
   d8ee0:	2003d868 	.word	0x2003d868

000d8ee4 <strtol>:
   d8ee4:	4613      	mov	r3, r2
   d8ee6:	460a      	mov	r2, r1
   d8ee8:	4601      	mov	r1, r0
   d8eea:	4802      	ldr	r0, [pc, #8]	; (d8ef4 <strtol+0x10>)
   d8eec:	6800      	ldr	r0, [r0, #0]
   d8eee:	f7ff bf73 	b.w	d8dd8 <_strtol_r>
   d8ef2:	bf00      	nop
   d8ef4:	2003d8cc 	.word	0x2003d8cc

000d8ef8 <dynalib_user>:
   d8ef8:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8f08:	00000000                                ....

000d8f0c <_ZTVN5spark10LogHandlerE>:
	...
   d8f1c:	000d40a5 000d40c9                       .@...@..

000d8f24 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8f2c:	000d40e5 000d4119 000d7a3d 000d40cb     .@...A..=z...@..
   d8f3c:	736e6553 3120726f 54202d20 65706d65     Sensor 1 - Tempe
   d8f4c:	75746172 203a6572 64207525 65726765     rature: %u degre
   d8f5c:	43207365 69736c65 53007375 6f736e65     es Celsius.Senso
   d8f6c:	20312072 7548202d 6964696d 203a7974     r 1 - Humidity: 
   d8f7c:	25257525 6e655300 20726f73 202d2031     %u%%.Sensor 1 - 
   d8f8c:	72727543 3a746e65 20752520 73706d41     Current: %u Amps
   d8f9c:	6e655300 20726f73 202d2032 72727543     .Sensor 2 - Curr
   d8fac:	3a746e65 20752520 73706d41 6e655300     ent: %u Amps.Sen
   d8fbc:	20726f73 202d2032 706d6554 74617265     sor 2 - Temperat
   d8fcc:	3a657275 20642520 72676564 20736565     ure: %d degrees 
   d8fdc:	736c6543 00737569 736e6553 3220726f     Celsius.Sensor 2
   d8fec:	4c202d20 74686769 7525203a 78754c20      - Light: %u Lux
   d8ffc:	6e655300 20726f73 202d2032 616d7548     .Sensor 2 - Huma
   d900c:	6564206e 74636574 203a726f 53007525     n detector: %u.S
   d901c:	6f736e65 20322072 7548202d 206e616d     ensor 2 - Human 
   d902c:	74736f6c 002e2e2e 736e6553 3220726f     lost....Sensor 2
   d903c:	48202d20 6e616d75 74656420 65746365      - Human detecte
   d904c:	53002164 6f736e65 20322072 6e49202d     d!.Sensor 2 - In
   d905c:	696c6176 75682064 206e616d 65746564     valid human dete
   d906c:	726f7463 73656d20 65676173 7845202e     ctor message. Ex
   d907c:	74636570 30206465 20726f20 72202c31     pected 0 or 1, r
   d908c:	69656365 20646576 40007525 40404040     eceived %u.@@@@@
   d909c:	52452040 20524f52 6e69202d 696c6176     @ ERROR - invali
   d90ac:	6c612064 206d7261 626d756e 73207265     d alarm number s
   d90bc:	6c707075 20646569 27206f74 72616c61     upplied to 'alar
   d90cc:	6e6f436d 69746964 4d736e6f 20277465     mConditionsMet' 
   d90dc:	636e7566 6e6f6974 7845202e 74636570     function. Expect
   d90ec:	76206465 65756c61 6f726620 2030206d     ed value from 0 
   d90fc:	2c33202d 746f6720 00642520 69746341     - 3, got %d.Acti
   d910c:	69746176 6120676e 6d72616c 20642520     vating alarm %d 
   d911c:	6d6f7266 6e657320 20726f73 65646f6e     from sensor node
   d912c:	00752520 40404040 45204040 524f5252      %u.@@@@@@ ERROR
   d913c:	69202d20 6c61766e 61206469 6d72616c      - invalid alarm
   d914c:	6d756e20 20726562 70707573 6465696c      number supplied
   d915c:	206f7420 61747327 6c417472 276d7261      to 'startAlarm'
   d916c:	6e756620 6f697463 45202e6e 63657078      function. Expec
   d917c:	20646574 756c6176 72662065 30206d6f     ted value from 0
   d918c:	33202d20 6f67202c 64252074 6e655300      - 3, got %d.Sen
   d919c:	20726f73 202d2031 74736944 65636e61     sor 1 - Distance
   d91ac:	7525203a 006d6320 736e6553 3220726f     : %u cm.Sensor 2
   d91bc:	53202d20 646e756f 7525203a 00426420      - Sound: %u dB.
   d91cc:	72616c41 6425206d 69727420 72656767     Alarm %d trigger
   d91dc:	62206465 65532079 726f736e 646f4e20     ed by Sensor Nod
   d91ec:	75252065 20746120 6e6f635b 74726576     e %u at [convert
   d91fc:	64206465 2f657461 656d6974 72656820     ed date/time her
   d920c:	202e5d65 61727544 6e6f6974 6425203a     e]. Duration: %d
   d921c:	63657320 73646e6f 40404000 20404040      seconds.@@@@@@ 
   d922c:	4f525245 202d2052 61766e69 2064696c     ERROR - invalid 
   d923c:	72616c61 756e206d 7265626d 70757320     alarm number sup
   d924c:	65696c70 6f742064 65722720 41746573     plied to 'resetA
   d925c:	6d72616c 75662027 6974636e 202e6e6f     larm' function. 
   d926c:	65707845 64657463 6c617620 66206575     Expected value f
   d927c:	206d6f72 202d2030 67202c33 2520746f     rom 0 - 3, got %
   d928c:	62410064 2074756f 73206f74 2e6e6163     d.About to scan.
   d929c:	46002e2e 646e756f 62206120 7465756c     ...Found a bluet
   d92ac:	68746f6f 76656420 2e656369 64644100     ooth device..Add
   d92bc:	73736572 4600203a 646e756f 49555520     ress: .Found UUI
   d92cc:	00203a44 736e6553 6f4e726f 20316564     D: .SensorNode1 
   d92dc:	44495555 5300203a 6f736e65 646f4e72     UUID: .SensorNod
   d92ec:	55203265 3a444955 75530020 73656363     e2 UUID: .Succes
   d92fc:	6c756673 6320796c 656e6e6f 64657463     sfully connected
   d930c:	206f7420 736e6573 6e20726f 2065646f      to sensor node 
   d931c:	62002131 31663763 2d396438 33346332     1!.bc7f18d9-2c43
   d932c:	3830342d 65622d65 362d3532 30346632     -408e-be25-62f40
   d933c:	39353436 00633738 30613939 39663264     645987c.99a0d2f9
   d934c:	6663312d 32342d61 622d3362 2d616235     -1cfa-42b3-b5ba-
   d935c:	64346231 31343334 66323933 62353400     1b4d4341392f.45b
   d936c:	35613465 38342d36 342d3566 2d633338     e4a56-48f5-483c-
   d937c:	31626238 6633642d 33346565 33326333     8bb1-d3fee433c23
   d938c:	38320063 36613232 332d3031 2d366432     c.2822a610-32d6-
   d939c:	31653534 6639622d 34322d62 38333137     45e1-b9fb-247138
   d93ac:	64386366 32003766 61626639 2d356633     fc8df7.29fba3f5-
   d93bc:	38656334 6236342d 64382d63 372d3537     4ce8-46bc-8d75-7
   d93cc:	36303837 32326264 00313363 6c696146     7806db22c31.Fail
   d93dc:	74206465 6f63206f 63656e6e 6f742074     ed to connect to
   d93ec:	6e657320 20726f73 65646f6e 002e3120      sensor node 1..
   d93fc:	736e6553 6e20726f 2065646f 6c612031     Sensor node 1 al
   d940c:	64616572 6f632079 63656e6e 2e646574     ready connected.
   d941c:	63755300 73736563 6c6c7566 6f632079     .Successfully co
   d942c:	63656e6e 20646574 73206f74 6f736e65     nnected to senso
   d943c:	6f6e2072 32206564 61650021 38343235     r node 2!.ea5248
   d944c:	342d3461 2d636333 38393134 6134612d     a4-43cc-4198-a4a
   d945c:	39372d61 61303032 38303537 38003533     a-79200a750835.8
   d946c:	32616238 2d643566 38396531 6139342d     8ba2f5d-1e98-49a
   d947c:	36382d66 642d3739 36313530 33306664     f-8697-d0516df03
   d948c:	00396562 32383462 31353564 6133632d     be9.b482d551-c3a
   d949c:	64342d65 622d6564 2d353231 34326563     e-4dde-b125-ce24
   d94ac:	38376434 30623639 30373900 37363731     4d7896b0.9701767
   d94bc:	36392d34 342d3531 2d616266 32313739     4-9615-4fba-9712
   d94cc:	3238362d 30326639 33383534 61460036     -6829f2045836.Fa
   d94dc:	64656c69 206f7420 6e6e6f63 20746365     iled to connect 
   d94ec:	73206f74 6f736e65 6f6e2072 32206564     to sensor node 2
   d94fc:	6553002e 726f736e 646f6e20 20322065     ..Sensor node 2 
   d950c:	65726c61 20796461 6e6e6f63 65746365     already connecte
   d951c:	25002e64 65642064 65636976 6f662073     d..%d devices fo
   d952c:	00646e75 6e756f46 65732064 726f736e     und.Found sensor
   d953c:	646f6e20 2e312065 756f4600 7320646e      node 1..Found s
   d954c:	6f736e65 6f6e2072 32206564 3537002e     ensor node 2..75
   d955c:	66626534 632d6535 2d313365 30303334     4ebf5e-ce31-4300
   d956c:	6466392d 38612d35 65346266 38613465     -9fd5-a8fb4ee4a8
   d957c:	39003131 38323737 2d396461 38393961     11.97728ad9-a998
   d958c:	3236342d 38622d39 652d3535 35363265     -4629-b855-ee265
   d959c:	30616338 00376631                       8ca01f7.

000d95a4 <_ZTVN5spark13EthernetClassE>:
	...
   d95ac:	000d529b 000d5291 000d5287 000d527d     .R...R...R..}R..
   d95bc:	000d5271 000d5265 000d5259 000d5251     qR..eR..YR..QR..
   d95cc:	000d5247 000d523d 000d84ed              GR..=R......

000d95d8 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d95e0:	000d5469 000d546f 000d69cd 000d5499     iT..oT...i...T..
   d95f0:	000d546b                                kT..

000d95f4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d95fc:	000d5463 000d547d 000d6b89 000d549d     cT..}T...k...T..
   d960c:	000d5465                                eT..

000d9610 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9618:	000d545d 000d548b 000d60df 000d54a1     ]T...T...`...T..
   d9628:	000d545f 69726977 622e676e 5300656c     _T..wiring.ble.S
   d9638:	74726174 73696420 65766f63 676e6972     tart discovering
   d9648:	72657320 65636976 53002e73 74726174      services..Start
   d9658:	73696420 65766f63 676e6972 61686320      discovering cha
   d9668:	74636172 73697265 73636974 6550002e     racteristics..Pe
   d9678:	64207265 63697665 73692065 73696d20     er device is mis
   d9688:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   d9698:	65707061 7020646e 20726565 746e6543     append peer Cent
   d96a8:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   d96b8:	65746365 79622064 6e654320 6c617274     ected by Central
   d96c8:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   d96d8:	65746365 79622064 6d657220 2065746f     ected by remote 
   d96e8:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   d96f8:	6e206464 70207765 20726565 69766564     dd new peer devi
   d9708:	002e6563 2077654e 69726570 72656870     ce..New peripher
   d9718:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   d9728:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d9738:	69642064 766f6373 64657265 61686320     d discovered cha
   d9748:	74636172 73697265 2e636974 69614600     racteristic..Fai
   d9758:	2064656c 61206f74 6e657070 69642064     led to append di
   d9768:	766f6373 64657265 72657320 65636976     scovered service
   d9778:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d9788:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d9798:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   d97a8:	20646574 72616863 65746361 74736972     ted characterist
   d97b8:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d97c8:	002e6465                                ed..

000d97cc <_ZN8particle7BleUuid9BASE_UUIDE>:
   d97cc:	5f9b34fb 80000080 00001000 00000000     .4._............

000d97dc <_ZTVN5spark16JSONStreamWriterE>:
	...
   d97e4:	000d6e19 000d6e3f 000d6df3 000d85fb     .n..?n...m......

000d97f4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d97fc:	000d7295 000d72a9 000d7bf1 000d6dfb     .r...r...{...m..
   d980c:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d981c:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d982c:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d983c:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d984c:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d985c:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d986c:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d987c:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d988c:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d989c:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d98ac:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d98bc:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d98cc:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d98dc:	61700072 0063696e 006c6c61              r.panic.all.

000d98e8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d98f0:	000d7269 000d7281 000d7a3d 000d40cb     ir...r..=z...@..

000d9900 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9908:	000d6e17 000d6e4d 000d7965 000d6dfd     .n..Mn..ey...m..

000d9918 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9920:	000d6e15 000d6e5b 000d71ad 000d6e69     .n..[n...q..in..
   d9930:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d9940:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d9950:	63736100 656d6974 00000000              .asctime....

000d995c <_ZTV9IPAddress>:
	...
   d9964:	000d7f91 000d7f81 000d7f83              ............

000d9970 <_ZTV9USBSerial>:
	...
   d9978:	000d8069 000d80b9 000d80c7 000d6cd5     i............l..
   d9988:	000d80a5 000d806b 000d8081 000d80b3     ....k...........
   d9998:	000d8097 000d8065                       ....e...

000d99a0 <_ZTV11USARTSerial>:
	...
   d99a8:	000d817d 000d81cd 000d81db 000d6cd5     }............l..
   d99b8:	000d8191 000d81b3 000d819f 000d81c7     ................
   d99c8:	000d817f 000d8183                       ........

000d99d0 <_ZTVN5spark9MeshClassE>:
	...
   d99d8:	000d82eb 000d82e1 000d82d7 000d82cd     ................
   d99e8:	000d82c1 000d82b5 000d82a9 000d82a1     ................
   d99f8:	000d8297 000d828d 000d84ed              ............

000d9a04 <_ZTVN5spark9WiFiClassE>:
	...
   d9a0c:	000d8467 000d845d 000d8453 000d8409     g...]...S.......
   d9a1c:	000d8447 000d843b 000d842f 000d8427     G...;.../...'...
   d9a2c:	000d841d 000d8413 000d84ed              ............

000d9a38 <_ZTVN5spark12NetworkClassE>:
	...
   d9a40:	000d8485 000d848f 000d8499 000d84a3     ................
   d9a50:	000d84ad 000d84b9 000d84c5 000d84d1     ................
   d9a60:	000d84d9 000d84e3 000d84ed 00302e30     ............0.0.
   d9a70:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   d9a80:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000d9a8f <_ZSt7nothrow>:
	...

000d9a90 <_ctype_>:
   d9a90:	20202000 20202020 28282020 20282828     .         ((((( 
   d9aa0:	20202020 20202020 20202020 20202020                     
   d9ab0:	10108820 10101010 10101010 10101010      ...............
   d9ac0:	04040410 04040404 10040404 10101010     ................
   d9ad0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9ae0:	01010101 01010101 01010101 10101010     ................
   d9af0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9b00:	02020202 02020202 02020202 10101010     ................
   d9b10:	00000020 00000000 00000000 00000000      ...............
	...

000d9b94 <__sf_fake_stdin>:
	...

000d9bb4 <__sf_fake_stdout>:
	...

000d9bd4 <__sf_fake_stderr>:
	...
   d9bf4:	00000043                                         C.

000d9bf6 <link_const_variable_data_end>:
	...

000d9bf8 <link_constructors_location>:
   d9bf8:	000d4ab5 	.word	0x000d4ab5
   d9bfc:	000d52a5 	.word	0x000d52a5
   d9c00:	000d52b9 	.word	0x000d52b9
   d9c04:	000d6cad 	.word	0x000d6cad
   d9c08:	000d7a2d 	.word	0x000d7a2d
   d9c0c:	000d7dd5 	.word	0x000d7dd5
   d9c10:	000d7e55 	.word	0x000d7e55
   d9c14:	000d83b9 	.word	0x000d83b9
   d9c18:	000d8471 	.word	0x000d8471
   d9c1c:	000d85b9 	.word	0x000d85b9
   d9c20:	000d8995 	.word	0x000d8995
   d9c24:	000d8a19 	.word	0x000d8a19
   d9c28:	000d8add 	.word	0x000d8add
   d9c2c:	000d8ba1 	.word	0x000d8ba1
