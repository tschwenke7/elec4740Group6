
c:/Users/tschw/repos/elec4740Group6/clusterhead/target/1.5.2/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006ab4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000daad0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000d4  2003d7ac  000daad4  0001d7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f70  2003d880  2003d880  0002d880  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000daba8  000daba8  0002aba8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dabd0  000dabd0  0002abd0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dde53  00000000  00000000  0002abd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f630  00000000  00000000  00108a27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001fff8  00000000  00000000  00118057  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002730  00000000  00000000  0013804f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004af0  00000000  00000000  0013a77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00031387  00000000  00000000  0013f26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00022d28  00000000  00000000  001705f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108baf  00000000  00000000  0019331e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000d7c8  00000000  00000000  0029bed0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 f8fa 	bl	d9226 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 f91a 	bl	d9272 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d7ac 	.word	0x2003d7ac
   d4048:	000daad4 	.word	0x000daad4
   d404c:	2003d880 	.word	0x2003d880
   d4050:	2003d880 	.word	0x2003d880
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 f8e3 	bl	d8224 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000daad0 	.word	0x000daad0
   d4080:	000daa98 	.word	0x000daa98

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bd26 	b.w	d4ad4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb27 	bl	d46dc <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 b889 	b.w	d81a8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b993 	b.w	d53c0 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 b999 	b.w	d53d0 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 b997 	b.w	d53d0 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 f8dc 	bl	d5268 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4f25 	.word	0x000d4f25

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z20setAlarmCooloffDelay6String>:
        return 1;
    }
}

/* set ALARM_COOLOFF_DELAY */
int setAlarmCooloffDelay(String delay){
   d40d4:	b508      	push	{r3, lr}
    ALARM_COOLOFF_DELAY = (uint16_t) delay.toInt();
   d40d6:	f001 fb23 	bl	d5720 <_ZNK6String5toIntEv>
   d40da:	4b02      	ldr	r3, [pc, #8]	; (d40e4 <_Z20setAlarmCooloffDelay6String+0x10>)
   d40dc:	8018      	strh	r0, [r3, #0]
    return 1;
}
   d40de:	2001      	movs	r0, #1
   d40e0:	bd08      	pop	{r3, pc}
   d40e2:	bf00      	nop
   d40e4:	2003d7bc 	.word	0x2003d7bc

000d40e8 <_Z20setDistanceThreshold6String>:

/* set DISTANCE_THRESHOLD */
int setDistanceThreshold(String threshold){
   d40e8:	b508      	push	{r3, lr}
    DISTANCE_THRESHOLD = (uint16_t) threshold.toInt();
   d40ea:	f001 fb19 	bl	d5720 <_ZNK6String5toIntEv>
   d40ee:	4b02      	ldr	r3, [pc, #8]	; (d40f8 <_Z20setDistanceThreshold6String+0x10>)
   d40f0:	8018      	strh	r0, [r3, #0]
    return 1;
}
   d40f2:	2001      	movs	r0, #1
   d40f4:	bd08      	pop	{r3, pc}
   d40f6:	bf00      	nop
   d40f8:	2003d7ba 	.word	0x2003d7ba

000d40fc <_Z17setLightThreshold6String>:

/* set LIGHT_THRESHOLD */
int setLightThreshold(String threshold){
   d40fc:	b508      	push	{r3, lr}
    LIGHT_THRESHOLD = (uint16_t) threshold.toInt();
   d40fe:	f001 fb0f 	bl	d5720 <_ZNK6String5toIntEv>
   d4102:	4b02      	ldr	r3, [pc, #8]	; (d410c <_Z17setLightThreshold6String+0x10>)
   d4104:	8018      	strh	r0, [r3, #0]
    return 1;
}
   d4106:	2001      	movs	r0, #1
   d4108:	bd08      	pop	{r3, pc}
   d410a:	bf00      	nop
   d410c:	2003d7ac 	.word	0x2003d7ac

000d4110 <_Z19setVolumeThresholds6String>:

/* set SOUND_VOLUME_THRESHOLDS based on comma-separated string of 3 numbers */
int setVolumeThresholds(String thresholds){
   d4110:	b570      	push	{r4, r5, r6, lr}
   d4112:	b088      	sub	sp, #32
   d4114:	4604      	mov	r4, r0
    String delimiter = ",";
   d4116:	490f      	ldr	r1, [pc, #60]	; (d4154 <_Z19setVolumeThresholds6String+0x44>)
   d4118:	4e0f      	ldr	r6, [pc, #60]	; (d4158 <_Z19setVolumeThresholds6String+0x48>)
   d411a:	4668      	mov	r0, sp
   d411c:	f001 fa37 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
    uint8_t pos = 0;
    int i = 0;
    while ((pos = thresholds.indexOf(delimiter)) != std::string::npos) {
   d4120:	4669      	mov	r1, sp
   d4122:	4620      	mov	r0, r4
   d4124:	f001 fabe 	bl	d56a4 <_ZNK6String7indexOfERKS_>
        SOUND_VOLUME_THRESHOLDS[i] = (uint16_t) thresholds.substring(0, pos).toInt();
   d4128:	b2c5      	uxtb	r5, r0
   d412a:	4621      	mov	r1, r4
   d412c:	462b      	mov	r3, r5
   d412e:	2200      	movs	r2, #0
   d4130:	a804      	add	r0, sp, #16
   d4132:	f001 fabb 	bl	d56ac <_ZNK6String9substringEjj>
   d4136:	a804      	add	r0, sp, #16
   d4138:	f001 faf2 	bl	d5720 <_ZNK6String5toIntEv>
   d413c:	f826 0f02 	strh.w	r0, [r6, #2]!
   d4140:	a804      	add	r0, sp, #16
   d4142:	f001 f9dd 	bl	d5500 <_ZN6StringD1Ev>
        thresholds.remove(0, pos + delimiter.length());
   d4146:	9a02      	ldr	r2, [sp, #8]
   d4148:	2100      	movs	r1, #0
   d414a:	442a      	add	r2, r5
   d414c:	4620      	mov	r0, r4
   d414e:	f001 facd 	bl	d56ec <_ZN6String6removeEjj>
   d4152:	e7e5      	b.n	d4120 <_Z19setVolumeThresholds6String+0x10>
   d4154:	000d9c84 	.word	0x000d9c84
   d4158:	2003d7b2 	.word	0x2003d7b2

000d415c <_Z26setSoundDurationThresholds6String>:
    }
    return 1;
}

/* set SOUND_DURATION_THRESHOLDS based on comma-separated string of 3 numbers */
int setSoundDurationThresholds(String thresholds){
   d415c:	b570      	push	{r4, r5, r6, lr}
   d415e:	b088      	sub	sp, #32
   d4160:	4604      	mov	r4, r0
    String delimiter = ",";
   d4162:	490f      	ldr	r1, [pc, #60]	; (d41a0 <_Z26setSoundDurationThresholds6String+0x44>)
   d4164:	4e0f      	ldr	r6, [pc, #60]	; (d41a4 <_Z26setSoundDurationThresholds6String+0x48>)
   d4166:	4668      	mov	r0, sp
   d4168:	f001 fa11 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
    uint8_t pos = 0;
    int i = 0;
    while ((pos = thresholds.indexOf(delimiter)) != std::string::npos) {
   d416c:	4669      	mov	r1, sp
   d416e:	4620      	mov	r0, r4
   d4170:	f001 fa98 	bl	d56a4 <_ZNK6String7indexOfERKS_>
        SOUND_DURATION_THRESHOLDS[i] = (uint16_t) thresholds.substring(0, pos).toInt();
   d4174:	b2c5      	uxtb	r5, r0
   d4176:	4621      	mov	r1, r4
   d4178:	462b      	mov	r3, r5
   d417a:	2200      	movs	r2, #0
   d417c:	a804      	add	r0, sp, #16
   d417e:	f001 fa95 	bl	d56ac <_ZNK6String9substringEjj>
   d4182:	a804      	add	r0, sp, #16
   d4184:	f001 facc 	bl	d5720 <_ZNK6String5toIntEv>
   d4188:	f826 0f02 	strh.w	r0, [r6, #2]!
   d418c:	a804      	add	r0, sp, #16
   d418e:	f001 f9b7 	bl	d5500 <_ZN6StringD1Ev>
        thresholds.remove(0, pos + delimiter.length());
   d4192:	9a02      	ldr	r2, [sp, #8]
   d4194:	2100      	movs	r1, #0
   d4196:	442a      	add	r2, r5
   d4198:	4620      	mov	r0, r4
   d419a:	f001 faa7 	bl	d56ec <_ZN6String6removeEjj>
   d419e:	e7e5      	b.n	d416c <_Z26setSoundDurationThresholds6String+0x10>
   d41a0:	000d9c84 	.word	0x000d9c84
   d41a4:	2003d7ae 	.word	0x2003d7ae

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f001 f90e 	bl	d53d0 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41b8:	4b0a      	ldr	r3, [pc, #40]	; (d41e4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d41ba:	b510      	push	{r4, lr}
   d41bc:	4604      	mov	r4, r0
   d41be:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d41c0:	f003 f8ba 	bl	d7338 <_ZN5spark10LogManager8instanceEv>
   d41c4:	4621      	mov	r1, r4
   d41c6:	f003 faa7 	bl	d7718 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d41ca:	f004 f95d 	bl	d8488 <_Z16_fetch_usbserialv>
   d41ce:	f004 f94f 	bl	d8470 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d41d2:	4620      	mov	r0, r4
   d41d4:	4b04      	ldr	r3, [pc, #16]	; (d41e8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d41d6:	f840 3b04 	str.w	r3, [r0], #4
   d41da:	f003 f9a3 	bl	d7524 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d41de:	4620      	mov	r0, r4
   d41e0:	bd10      	pop	{r4, pc}
   d41e2:	bf00      	nop
   d41e4:	000d9c74 	.word	0x000d9c74
   d41e8:	000d9c5c 	.word	0x000d9c5c

000d41ec <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41ec:	b510      	push	{r4, lr}
   d41ee:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d41f0:	f7ff ffe2 	bl	d41b8 <_ZN5spark16SerialLogHandlerD1Ev>
   d41f4:	4620      	mov	r0, r4
   d41f6:	2124      	movs	r1, #36	; 0x24
   d41f8:	f004 fd66 	bl	d8cc8 <_ZdlPvj>
   d41fc:	4620      	mov	r0, r4
   d41fe:	bd10      	pop	{r4, pc}

000d4200 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4200:	b40e      	push	{r1, r2, r3}
   d4202:	b500      	push	{lr}
   d4204:	b08c      	sub	sp, #48	; 0x30
   d4206:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4208:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d420a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d420e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4210:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4214:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4216:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4218:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d421a:	aa04      	add	r2, sp, #16
   d421c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d421e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4220:	f001 f832 	bl	d5288 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4224:	b00c      	add	sp, #48	; 0x30
   d4226:	f85d eb04 	ldr.w	lr, [sp], #4
   d422a:	b003      	add	sp, #12
   d422c:	4770      	bx	lr
	...

000d4230 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
    }
}

/* These functions are where we do something with the data (in bytes) we've received via bluetooth */

void onTemperatureReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4230:	b508      	push	{r3, lr}
    memcpy(&sentTime, &data[0] + sizeof(receivedTemp), sizeof(sentTime));
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
    
    //Stores temperature on clusterhead.
    getTempsn1 = receivedTemp;
   d4232:	4b04      	ldr	r3, [pc, #16]	; (d4244 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x14>)

    
    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(receivedTemp), sizeof(sentTime));
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
   d4234:	f990 2000 	ldrsb.w	r2, [r0]
    
    //Stores temperature on clusterhead.
    getTempsn1 = receivedTemp;

    Log.info("Sensor 1 - Temperature: %u degrees Celsius", receivedTemp);
   d4238:	4903      	ldr	r1, [pc, #12]	; (d4248 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   d423a:	4804      	ldr	r0, [pc, #16]	; (d424c <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
    memcpy(&sentTime, &data[0] + sizeof(receivedTemp), sizeof(sentTime));
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
    
    //Stores temperature on clusterhead.
    getTempsn1 = receivedTemp;
   d423c:	801a      	strh	r2, [r3, #0]

    Log.info("Sensor 1 - Temperature: %u degrees Celsius", receivedTemp);
   d423e:	f7ff ffdf 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4242:	bd08      	pop	{r3, pc}
   d4244:	2003d7ae 	.word	0x2003d7ae
   d4248:	000d9c86 	.word	0x000d9c86
   d424c:	2003e3dc 	.word	0x2003e3dc

000d4250 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    // Log.info("Temp/humidity transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onHumidityReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4250:	b508      	push	{r3, lr}
    uint8_t receivedHumidity;
    memcpy(&receivedHumidity, &data[0], sizeof(receivedHumidity));
    Log.info("Sensor 1 - Humidity: %u%%", receivedHumidity);
   d4252:	4903      	ldr	r1, [pc, #12]	; (d4260 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d4254:	7802      	ldrb	r2, [r0, #0]
   d4256:	4803      	ldr	r0, [pc, #12]	; (d4264 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d4258:	f7ff ffd2 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d425c:	bd08      	pop	{r3, pc}
   d425e:	bf00      	nop
   d4260:	000d9cb1 	.word	0x000d9cb1
   d4264:	2003e3dc 	.word	0x2003e3dc

000d4268 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
}

void onCurrentReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4268:	b507      	push	{r0, r1, r2, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d426a:	8803      	ldrh	r3, [r0, #0]
   d426c:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 1 - Current: %u Amps", twoByteValue);
   d4270:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4274:	4903      	ldr	r1, [pc, #12]	; (d4284 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d4276:	4804      	ldr	r0, [pc, #16]	; (d4288 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4278:	f7ff ffc2 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
}
   d427c:	b003      	add	sp, #12
   d427e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4282:	bf00      	nop
   d4284:	000d9ccb 	.word	0x000d9ccb
   d4288:	2003e3dc 	.word	0x2003e3dc

000d428c <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv>:

void onCurrentReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d428c:	b507      	push	{r0, r1, r2, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d428e:	8803      	ldrh	r3, [r0, #0]
   d4290:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 2 - Current: %u Amps", twoByteValue);
   d4294:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4298:	4903      	ldr	r1, [pc, #12]	; (d42a8 <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d429a:	4804      	ldr	r0, [pc, #16]	; (d42ac <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d429c:	f7ff ffb0 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
}
   d42a0:	b003      	add	sp, #12
   d42a2:	f85d fb04 	ldr.w	pc, [sp], #4
   d42a6:	bf00      	nop
   d42a8:	000d9ce7 	.word	0x000d9ce7
   d42ac:	2003e3dc 	.word	0x2003e3dc

000d42b0 <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
        startAlarm(0);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onTemperatureReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42b0:	b508      	push	{r3, lr}

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(temperature), sizeof(sentTime));

    memcpy(&temperature, &data[0], sizeof(temperature));
    Log.info("Sensor 2 - Temperature: %d degrees Celsius", temperature);
   d42b2:	4903      	ldr	r1, [pc, #12]	; (d42c0 <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d42b4:	f990 2000 	ldrsb.w	r2, [r0]
   d42b8:	4802      	ldr	r0, [pc, #8]	; (d42c4 <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d42ba:	f7ff ffa1 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	000d9d03 	.word	0x000d9d03
   d42c4:	2003e3dc 	.word	0x2003e3dc

000d42c8 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onLightReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42c8:	b513      	push	{r0, r1, r4, lr}
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d42ca:	8803      	ldrh	r3, [r0, #0]
   d42cc:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Light: %u Lux", twoByteValue);
   d42d0:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d42d4:	4904      	ldr	r1, [pc, #16]	; (d42e8 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d42d6:	4805      	ldr	r0, [pc, #20]	; (d42ec <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d42d8:	4622      	mov	r2, r4
   d42da:	f7ff ff91 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>

    currentLight = twoByteValue;
   d42de:	4b04      	ldr	r3, [pc, #16]	; (d42f0 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d42e0:	801c      	strh	r4, [r3, #0]
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d42e2:	b002      	add	sp, #8
   d42e4:	bd10      	pop	{r4, pc}
   d42e6:	bf00      	nop
   d42e8:	000d9d2e 	.word	0x000d9d2e
   d42ec:	2003e3dc 	.word	0x2003e3dc
   d42f0:	2003e32c 	.word	0x2003e32c

000d42f4 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42f4:	b513      	push	{r0, r1, r4, lr}
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d42f6:	4602      	mov	r2, r0
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42f8:	4604      	mov	r4, r0
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d42fa:	f852 0f01 	ldr.w	r0, [r2, #1]!

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
   d42fe:	7824      	ldrb	r4, [r4, #0]
void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d4300:	6851      	ldr	r1, [r2, #4]
   d4302:	466b      	mov	r3, sp
   d4304:	c303      	stmia	r3!, {r0, r1}

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
    Log.info("Sensor 2 - Human detector: %u", humanSeen);
   d4306:	4622      	mov	r2, r4
   d4308:	490a      	ldr	r1, [pc, #40]	; (d4334 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d430a:	480b      	ldr	r0, [pc, #44]	; (d4338 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d430c:	f7ff ff78 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
    if(humanSeen == 0x00){
   d4310:	b90c      	cbnz	r4, d4316 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
        Log.info("Sensor 2 - Human lost...");
   d4312:	490a      	ldr	r1, [pc, #40]	; (d433c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4314:	e002      	b.n	d431c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>
    }
    else if (humanSeen == 0x01){
   d4316:	2c01      	cmp	r4, #1
   d4318:	d104      	bne.n	d4324 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
        Log.info("Sensor 2 - Human detected!");
   d431a:	4909      	ldr	r1, [pc, #36]	; (d4340 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d431c:	4806      	ldr	r0, [pc, #24]	; (d4338 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d431e:	f7ff ff6f 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4322:	e004      	b.n	d432e <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
   d4324:	4622      	mov	r2, r4
   d4326:	4907      	ldr	r1, [pc, #28]	; (d4344 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d4328:	4803      	ldr	r0, [pc, #12]	; (d4338 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d432a:	f7ff ff69 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d432e:	b002      	add	sp, #8
   d4330:	bd10      	pop	{r4, pc}
   d4332:	bf00      	nop
   d4334:	000d9d47 	.word	0x000d9d47
   d4338:	2003e3dc 	.word	0x2003e3dc
   d433c:	000d9d65 	.word	0x000d9d65
   d4340:	000d9d7e 	.word	0x000d9d7e
   d4344:	000d9d99 	.word	0x000d9d99

000d4348 <_Z28updateSoundThresholdCountersh>:
    }
}

/* Update the sound threshold counters after a given amount of seconds has passed
 * @param secondsPassed: number of seconds since this was last called. */
void updateSoundThresholdCounters(uint8_t secondsPassed){
   d4348:	b510      	push	{r4, lr}
    //only count up if light level is below threshold
    if(currentLight < LIGHT_THRESHOLD){
   d434a:	4b0f      	ldr	r3, [pc, #60]	; (d4388 <_Z28updateSoundThresholdCountersh+0x40>)
   d434c:	881a      	ldrh	r2, [r3, #0]
   d434e:	4b0f      	ldr	r3, [pc, #60]	; (d438c <_Z28updateSoundThresholdCountersh+0x44>)
   d4350:	881b      	ldrh	r3, [r3, #0]
   d4352:	429a      	cmp	r2, r3
   d4354:	4b0e      	ldr	r3, [pc, #56]	; (d4390 <_Z28updateSoundThresholdCountersh+0x48>)
   d4356:	d213      	bcs.n	d4380 <_Z28updateSoundThresholdCountersh+0x38>
        if (currentSound > SOUND_VOLUME_THRESHOLDS[1]){
   d4358:	4a0e      	ldr	r2, [pc, #56]	; (d4394 <_Z28updateSoundThresholdCountersh+0x4c>)
   d435a:	490f      	ldr	r1, [pc, #60]	; (d4398 <_Z28updateSoundThresholdCountersh+0x50>)
   d435c:	6812      	ldr	r2, [r2, #0]
   d435e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   d4362:	4294      	cmp	r4, r2
   d4364:	da02      	bge.n	d436c <_Z28updateSoundThresholdCountersh+0x24>
            durationAtSoundThresholds[1] += secondsPassed;//increment high volume counter
   d4366:	685a      	ldr	r2, [r3, #4]
   d4368:	4402      	add	r2, r0
   d436a:	e004      	b.n	d4376 <_Z28updateSoundThresholdCountersh+0x2e>
            durationAtSoundThresholds[0] += secondsPassed;//increment med volume counter
        }
        else if(currentSound > SOUND_VOLUME_THRESHOLDS[0]){
   d436c:	f9b1 1000 	ldrsh.w	r1, [r1]
   d4370:	428a      	cmp	r2, r1
   d4372:	dd05      	ble.n	d4380 <_Z28updateSoundThresholdCountersh+0x38>
            durationAtSoundThresholds[1] = 0;//reset high volume counter
   d4374:	2200      	movs	r2, #0
   d4376:	605a      	str	r2, [r3, #4]
            durationAtSoundThresholds[0] += secondsPassed;//increment med volume counter
   d4378:	681a      	ldr	r2, [r3, #0]
   d437a:	4410      	add	r0, r2
   d437c:	6018      	str	r0, [r3, #0]
   d437e:	bd10      	pop	{r4, pc}
        }
        else{
            //reset both counters
            durationAtSoundThresholds[1] = 0;
   d4380:	2200      	movs	r2, #0
   d4382:	605a      	str	r2, [r3, #4]
            durationAtSoundThresholds[0] = 0;
   d4384:	601a      	str	r2, [r3, #0]
   d4386:	bd10      	pop	{r4, pc}
   d4388:	2003e32c 	.word	0x2003e32c
   d438c:	2003d7ac 	.word	0x2003d7ac
   d4390:	2003d8d4 	.word	0x2003d8d4
   d4394:	2003d8fc 	.word	0x2003d8fc
   d4398:	2003d7b4 	.word	0x2003d7b4

000d439c <_Z15updateStatusLedv>:
/* Turns the status light on and off at the appropriate intervals, 
based on the values of "quarterSeconds" and "alarmActive[]".
Priority: First active alarm in this list will control the status LED: alarm 0, 3, 2, 1 */
void updateStatusLed(){
    //alarm 0 - Blue LED flashing, 0.5 Hz frequency
    if(alarmActive[0]){
   d439c:	4b16      	ldr	r3, [pc, #88]	; (d43f8 <_Z15updateStatusLedv+0x5c>)
   d439e:	781a      	ldrb	r2, [r3, #0]
   d43a0:	b172      	cbz	r2, d43c0 <_Z15updateStatusLedv+0x24>
        if(quarterSeconds % 8 == 0){
   d43a2:	4b16      	ldr	r3, [pc, #88]	; (d43fc <_Z15updateStatusLedv+0x60>)
   d43a4:	681b      	ldr	r3, [r3, #0]
   d43a6:	f013 0307 	ands.w	r3, r3, #7
   d43aa:	d103      	bne.n	d43b4 <_Z15updateStatusLedv+0x18>
            //turn status light on blue
            RGB.color(0,0,255);
   d43ac:	2100      	movs	r1, #0
   d43ae:	22ff      	movs	r2, #255	; 0xff
   d43b0:	4608      	mov	r0, r1
   d43b2:	e00e      	b.n	d43d2 <_Z15updateStatusLedv+0x36>
        }
        else if(quarterSeconds % 8 == 4){
   d43b4:	2b04      	cmp	r3, #4
   d43b6:	d11e      	bne.n	d43f6 <_Z15updateStatusLedv+0x5a>
            //turn status light off
            RGB.color(0,0,0);
   d43b8:	2200      	movs	r2, #0
   d43ba:	4611      	mov	r1, r2
   d43bc:	4610      	mov	r0, r2
   d43be:	e008      	b.n	d43d2 <_Z15updateStatusLedv+0x36>
        }
    }
    //alarm 3 - Red LED flashing, 2 Hz
    else if(alarmActive[3]){
   d43c0:	78da      	ldrb	r2, [r3, #3]
   d43c2:	b142      	cbz	r2, d43d6 <_Z15updateStatusLedv+0x3a>
        if (quarterSeconds % 2 == 0){
   d43c4:	4b0d      	ldr	r3, [pc, #52]	; (d43fc <_Z15updateStatusLedv+0x60>)
   d43c6:	681b      	ldr	r3, [r3, #0]
   d43c8:	07da      	lsls	r2, r3, #31
   d43ca:	d4f5      	bmi.n	d43b8 <_Z15updateStatusLedv+0x1c>
            //turn red light on
            RGB.color(255,0,0);
   d43cc:	2200      	movs	r2, #0
   d43ce:	4611      	mov	r1, r2
   d43d0:	20ff      	movs	r0, #255	; 0xff
   d43d2:	f003 bea9 	b.w	d8128 <_ZN8RGBClass5colorEiii>
            //turn red light off
            RGB.color(0,0,0);
        }
    }
    //alarm 2 - Red LED flashing, 1 Hz
    else if(alarmActive[2]){
   d43d6:	789a      	ldrb	r2, [r3, #2]
   d43d8:	b132      	cbz	r2, d43e8 <_Z15updateStatusLedv+0x4c>
        if(quarterSeconds % 4 == 0){
   d43da:	4b08      	ldr	r3, [pc, #32]	; (d43fc <_Z15updateStatusLedv+0x60>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	f013 0303 	ands.w	r3, r3, #3
   d43e2:	d0f3      	beq.n	d43cc <_Z15updateStatusLedv+0x30>
            //turn red light on
            RGB.color(255,0,0);
        }
        else if(quarterSeconds % 4 == 2){
   d43e4:	2b02      	cmp	r3, #2
   d43e6:	e7e6      	b.n	d43b6 <_Z15updateStatusLedv+0x1a>
            // turn red light off
            RGB.color(0,0,0);
        }
    }
    //alarm 1 - Blue LED flashing, 2 Hz 
    else if(alarmActive[1]){
   d43e8:	785b      	ldrb	r3, [r3, #1]
   d43ea:	b123      	cbz	r3, d43f6 <_Z15updateStatusLedv+0x5a>
        if (quarterSeconds % 2 == 0){
   d43ec:	4b03      	ldr	r3, [pc, #12]	; (d43fc <_Z15updateStatusLedv+0x60>)
   d43ee:	681b      	ldr	r3, [r3, #0]
   d43f0:	07db      	lsls	r3, r3, #31
   d43f2:	d4e1      	bmi.n	d43b8 <_Z15updateStatusLedv+0x1c>
   d43f4:	e7da      	b.n	d43ac <_Z15updateStatusLedv+0x10>
   d43f6:	4770      	bx	lr
   d43f8:	2003e32e 	.word	0x2003e32e
   d43fc:	2003e2f4 	.word	0x2003e2f4

000d4400 <_Z19alarmCondtitionsMeti>:
/* Functions to control the functionality of clusterhead actuators */

/* Alarms */
/* checks if the current conditions meet those required for the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
bool alarmCondtitionsMet(int alarmNumber){
   d4400:	b508      	push	{r3, lr}
   d4402:	4602      	mov	r2, r0
    switch(alarmNumber){
   d4404:	2803      	cmp	r0, #3
   d4406:	d82c      	bhi.n	d4462 <_Z19alarmCondtitionsMeti+0x62>
   d4408:	e8df f000 	tbb	[pc, r0]
   d440c:	21120d02 	.word	0x21120d02
        case 0:
            //Object movement detected within 25cms
            return (
                currentDistance != 0 
   d4410:	4b17      	ldr	r3, [pc, #92]	; (d4470 <_Z19alarmCondtitionsMeti+0x70>)
   d4412:	7818      	ldrb	r0, [r3, #0]
                && currentDistance <= DISTANCE_THRESHOLD
   d4414:	2800      	cmp	r0, #0
   d4416:	d029      	beq.n	d446c <_Z19alarmCondtitionsMeti+0x6c>
   d4418:	4b16      	ldr	r3, [pc, #88]	; (d4474 <_Z19alarmCondtitionsMeti+0x74>)
   d441a:	881b      	ldrh	r3, [r3, #0]
   d441c:	4283      	cmp	r3, r0
   d441e:	bf34      	ite	cc
   d4420:	2000      	movcc	r0, #0
   d4422:	2001      	movcs	r0, #1
   d4424:	bd08      	pop	{r3, pc}
            );
        case 1:
            //Sound Level 55-70 dBA for 30 seconds, light level <100 lux and noise last for more than 30 sec
            return (
                durationAtSoundThresholds[0] >= SOUND_DURATION_THRESHOLDS[0]
   d4426:	4b14      	ldr	r3, [pc, #80]	; (d4478 <_Z19alarmCondtitionsMeti+0x78>)
                && currentLight < LIGHT_THRESHOLD
   d4428:	4a14      	ldr	r2, [pc, #80]	; (d447c <_Z19alarmCondtitionsMeti+0x7c>)
   d442a:	881b      	ldrh	r3, [r3, #0]
   d442c:	6812      	ldr	r2, [r2, #0]
   d442e:	e003      	b.n	d4438 <_Z19alarmCondtitionsMeti+0x38>
            );
        case 2:
            //Sound level > 70 dBA for 10 seconds, light level < 100 lux and noise last for more than 10 sec
            return (
                durationAtSoundThresholds[1] >= SOUND_DURATION_THRESHOLDS[1]
   d4430:	4b11      	ldr	r3, [pc, #68]	; (d4478 <_Z19alarmCondtitionsMeti+0x78>)
                && currentLight < LIGHT_THRESHOLD
   d4432:	4a12      	ldr	r2, [pc, #72]	; (d447c <_Z19alarmCondtitionsMeti+0x7c>)
   d4434:	885b      	ldrh	r3, [r3, #2]
   d4436:	6852      	ldr	r2, [r2, #4]
   d4438:	429a      	cmp	r2, r3
   d443a:	d316      	bcc.n	d446a <_Z19alarmCondtitionsMeti+0x6a>
   d443c:	4a10      	ldr	r2, [pc, #64]	; (d4480 <_Z19alarmCondtitionsMeti+0x80>)
   d443e:	4b11      	ldr	r3, [pc, #68]	; (d4484 <_Z19alarmCondtitionsMeti+0x84>)
   d4440:	8810      	ldrh	r0, [r2, #0]
   d4442:	881b      	ldrh	r3, [r3, #0]
   d4444:	4283      	cmp	r3, r0
   d4446:	bf2c      	ite	cs
   d4448:	2000      	movcs	r0, #0
   d444a:	2001      	movcc	r0, #1
   d444c:	bd08      	pop	{r3, pc}
            );
        case 3:
            //Sound level > 80 dBA
            return (currentSound > SOUND_VOLUME_THRESHOLDS[2]);
   d444e:	4a0e      	ldr	r2, [pc, #56]	; (d4488 <_Z19alarmCondtitionsMeti+0x88>)
   d4450:	4b0e      	ldr	r3, [pc, #56]	; (d448c <_Z19alarmCondtitionsMeti+0x8c>)
   d4452:	6810      	ldr	r0, [r2, #0]
   d4454:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   d4458:	4283      	cmp	r3, r0
   d445a:	bfac      	ite	ge
   d445c:	2000      	movge	r0, #0
   d445e:	2001      	movlt	r0, #1
   d4460:	bd08      	pop	{r3, pc}
        default:
            Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'alarmConditionsMet' function. Expected value from 0 - 3, got %d", alarmNumber);
   d4462:	490b      	ldr	r1, [pc, #44]	; (d4490 <_Z19alarmCondtitionsMeti+0x90>)
   d4464:	480b      	ldr	r0, [pc, #44]	; (d4494 <_Z19alarmCondtitionsMeti+0x94>)
   d4466:	f7ff fecb 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
    switch(alarmNumber){
        case 0:
            //Object movement detected within 25cms
            return (
                currentDistance != 0 
                && currentDistance <= DISTANCE_THRESHOLD
   d446a:	2000      	movs	r0, #0
            return (currentSound > SOUND_VOLUME_THRESHOLDS[2]);
        default:
            Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'alarmConditionsMet' function. Expected value from 0 - 3, got %d", alarmNumber);
            return false;
    }
}
   d446c:	bd08      	pop	{r3, pc}
   d446e:	bf00      	nop
   d4470:	2003e2f0 	.word	0x2003e2f0
   d4474:	2003d7ba 	.word	0x2003d7ba
   d4478:	2003d7b0 	.word	0x2003d7b0
   d447c:	2003d8d4 	.word	0x2003d8d4
   d4480:	2003d7ac 	.word	0x2003d7ac
   d4484:	2003e32c 	.word	0x2003e32c
   d4488:	2003d8fc 	.word	0x2003d8fc
   d448c:	2003d7b4 	.word	0x2003d7b4
   d4490:	000d9de1 	.word	0x000d9de1
   d4494:	2003e3dc 	.word	0x2003e3dc

000d4498 <_Z10startAlarmi>:

/* Activates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void startAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d4498:	2803      	cmp	r0, #3
    }
}

/* Activates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void startAlarm(int alarmNumber){
   d449a:	b510      	push	{r4, lr}
   d449c:	4604      	mov	r4, r0
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d449e:	d814      	bhi.n	d44ca <_Z10startAlarmi+0x32>
        //activate this alarm and record the time it was activated
        alarmActive[alarmNumber] = true;
   d44a0:	4b0d      	ldr	r3, [pc, #52]	; (d44d8 <_Z10startAlarmi+0x40>)
   d44a2:	2201      	movs	r2, #1
   d44a4:	541a      	strb	r2, [r3, r0]
        alarmActivatedTimes[alarmNumber] = Time.local();
   d44a6:	f003 fdc7 	bl	d8038 <_ZN9TimeClass5localEv>
   d44aa:	4b0c      	ldr	r3, [pc, #48]	; (d44dc <_Z10startAlarmi+0x44>)
   d44ac:	17c1      	asrs	r1, r0, #31
   d44ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3

        //do alarm-specific logic
        //which node triggered this alarm?
        uint8_t alarmSourceSensorNodeId = 2;
        switch(alarmNumber){
   d44b2:	2c00      	cmp	r4, #0
void startAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
        //activate this alarm and record the time it was activated
        alarmActive[alarmNumber] = true;
        alarmActivatedTimes[alarmNumber] = Time.local();
   d44b4:	e9c3 0100 	strd	r0, r1, [r3]
                break;
            case 3:
                break;
        }
        //TODO - update LCD - "alarm at sensor node 1|2"
        Log.info("Activating alarm %d from sensor node %u", alarmNumber, alarmSourceSensorNodeId);
   d44b8:	4622      	mov	r2, r4
   d44ba:	bf0c      	ite	eq
   d44bc:	2301      	moveq	r3, #1
   d44be:	2302      	movne	r3, #2
   d44c0:	4907      	ldr	r1, [pc, #28]	; (d44e0 <_Z10startAlarmi+0x48>)
   d44c2:	4808      	ldr	r0, [pc, #32]	; (d44e4 <_Z10startAlarmi+0x4c>)
   d44c4:	f7ff fe9c 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d44c8:	bd10      	pop	{r4, pc}
    }
    else{
        Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'startAlarm' function. Expected value from 0 - 3, got %d", alarmNumber);
   d44ca:	4602      	mov	r2, r0
   d44cc:	4906      	ldr	r1, [pc, #24]	; (d44e8 <_Z10startAlarmi+0x50>)
   d44ce:	4805      	ldr	r0, [pc, #20]	; (d44e4 <_Z10startAlarmi+0x4c>)
   d44d0:	f7ff fe96 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d44d4:	bd10      	pop	{r4, pc}
   d44d6:	bf00      	nop
   d44d8:	2003e32e 	.word	0x2003e32e
   d44dc:	2003e338 	.word	0x2003e338
   d44e0:	000d9e52 	.word	0x000d9e52
   d44e4:	2003e3dc 	.word	0x2003e3dc
   d44e8:	000d9e7a 	.word	0x000d9e7a

000d44ec <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
    
    Log.info("Sensor 2 - Current: %u Amps", twoByteValue);
}

void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d44ec:	b513      	push	{r0, r1, r4, lr}
    uint8_t byteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));
   d44ee:	4602      	mov	r2, r0
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
    
    Log.info("Sensor 2 - Current: %u Amps", twoByteValue);
}

void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d44f0:	4604      	mov	r4, r0
    uint8_t byteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));
   d44f2:	f852 0f01 	ldr.w	r0, [r2, #1]!

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
   d44f6:	7824      	ldrb	r4, [r4, #0]
void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
    uint8_t byteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));
   d44f8:	6851      	ldr	r1, [r2, #4]
   d44fa:	466b      	mov	r3, sp
   d44fc:	c303      	stmia	r3!, {r0, r1}

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
    Log.info("Sensor 1 - Distance: %u cm", byteValue);
   d44fe:	4622      	mov	r2, r4
   d4500:	4808      	ldr	r0, [pc, #32]	; (d4524 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d4502:	4909      	ldr	r1, [pc, #36]	; (d4528 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d4504:	f7ff fe7c 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>

    currentDistance = byteValue;
   d4508:	4b08      	ldr	r3, [pc, #32]	; (d452c <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
    //activate alarm 0 if it's within 25cm threshold
    if(alarmCondtitionsMet(0)){
   d450a:	2000      	movs	r0, #0
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
    Log.info("Sensor 1 - Distance: %u cm", byteValue);

    currentDistance = byteValue;
   d450c:	701c      	strb	r4, [r3, #0]
    //activate alarm 0 if it's within 25cm threshold
    if(alarmCondtitionsMet(0)){
   d450e:	f7ff ff77 	bl	d4400 <_Z19alarmCondtitionsMeti>
   d4512:	b128      	cbz	r0, d4520 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
        startAlarm(0);
   d4514:	2000      	movs	r0, #0
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d4516:	b002      	add	sp, #8
   d4518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Log.info("Sensor 1 - Distance: %u cm", byteValue);

    currentDistance = byteValue;
    //activate alarm 0 if it's within 25cm threshold
    if(alarmCondtitionsMet(0)){
        startAlarm(0);
   d451c:	f7ff bfbc 	b.w	d4498 <_Z10startAlarmi>
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d4520:	b002      	add	sp, #8
   d4522:	bd10      	pop	{r4, pc}
   d4524:	2003e3dc 	.word	0x2003e3dc
   d4528:	000d9ee3 	.word	0x000d9ee3
   d452c:	2003e2f0 	.word	0x2003e2f0

000d4530 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

    currentLight = twoByteValue;
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onSoundReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4530:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint16_t twoByteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));
   d4532:	4602      	mov	r2, r0

    currentLight = twoByteValue;
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onSoundReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4534:	4604      	mov	r4, r0
    uint16_t twoByteValue;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));
   d4536:	f852 0f02 	ldr.w	r0, [r2, #2]!
   d453a:	6851      	ldr	r1, [r2, #4]
   d453c:	ab02      	add	r3, sp, #8
   d453e:	c303      	stmia	r3!, {r0, r1}

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4540:	8823      	ldrh	r3, [r4, #0]
   d4542:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Sound: %u dB", twoByteValue);
   d4546:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d454a:	4809      	ldr	r0, [pc, #36]	; (d4570 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d454c:	4909      	ldr	r1, [pc, #36]	; (d4574 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d454e:	4622      	mov	r2, r4
   d4550:	f7ff fe56 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>

    currentSound = twoByteValue;
   d4554:	4b08      	ldr	r3, [pc, #32]	; (d4578 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)

    //activate alarm 3 immediately if above max volume threshold
    if(alarmCondtitionsMet(3)){
   d4556:	2003      	movs	r0, #3
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
    Log.info("Sensor 2 - Sound: %u dB", twoByteValue);

    currentSound = twoByteValue;
   d4558:	601c      	str	r4, [r3, #0]

    //activate alarm 3 immediately if above max volume threshold
    if(alarmCondtitionsMet(3)){
   d455a:	f7ff ff51 	bl	d4400 <_Z19alarmCondtitionsMeti>
   d455e:	b128      	cbz	r0, d456c <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>
        startAlarm(3);
   d4560:	2003      	movs	r0, #3
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d4562:	b004      	add	sp, #16
   d4564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    currentSound = twoByteValue;

    //activate alarm 3 immediately if above max volume threshold
    if(alarmCondtitionsMet(3)){
        startAlarm(3);
   d4568:	f7ff bf96 	b.w	d4498 <_Z10startAlarmi>
    }

    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d456c:	b004      	add	sp, #16
   d456e:	bd10      	pop	{r4, pc}
   d4570:	2003e3dc 	.word	0x2003e3dc
   d4574:	000d9efe 	.word	0x000d9efe
   d4578:	2003d8fc 	.word	0x2003d8fc

000d457c <_Z10resetAlarmi>:
    
}

/* Resets/deactivates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void resetAlarm(int alarmNumber){
   d457c:	b5f0      	push	{r4, r5, r6, r7, lr}
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d457e:	2803      	cmp	r0, #3
    
}

/* Resets/deactivates the specified alarm.
    alarmNumber can be 0 - 3, corresponding to the 4 different alarms.  */
void resetAlarm(int alarmNumber){
   d4580:	b087      	sub	sp, #28
   d4582:	4604      	mov	r4, r0
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
   d4584:	d821      	bhi.n	d45ca <_Z10resetAlarmi+0x4e>
        //record the time elapsed
        long endTime = Time.local();
   d4586:	f003 fd57 	bl	d8038 <_ZN9TimeClass5localEv>
        int eventDuration = endTime - alarmActivatedTimes[alarmNumber];
   d458a:	4b13      	ldr	r3, [pc, #76]	; (d45d8 <_Z10resetAlarmi+0x5c>)
   d458c:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]

        //alarm-specific logic
        uint8_t alarmSensorNodeId = 2; //the sensor node which the alarm originated from
   d4590:	2c00      	cmp	r4, #0
                break;
        }

        //log event information
        Log.info("Alarm %d event triggered by Sensor Node %u at %s. Duration: %d seconds",
            alarmNumber, alarmSensorNodeId, Time.timeStr(alarmActivatedTimes[alarmNumber]), eventDuration);
   d4592:	ad02      	add	r5, sp, #8
void resetAlarm(int alarmNumber){
    //check that alarmNumber is valid index
    if(alarmNumber >=0 && alarmNumber <= 3){
        //record the time elapsed
        long endTime = Time.local();
        int eventDuration = endTime - alarmActivatedTimes[alarmNumber];
   d4594:	eba0 0701 	sub.w	r7, r0, r1

        //alarm-specific logic
        uint8_t alarmSensorNodeId = 2; //the sensor node which the alarm originated from
   d4598:	bf0c      	ite	eq
   d459a:	2601      	moveq	r6, #1
   d459c:	2602      	movne	r6, #2
                break;
        }

        //log event information
        Log.info("Alarm %d event triggered by Sensor Node %u at %s. Duration: %d seconds",
            alarmNumber, alarmSensorNodeId, Time.timeStr(alarmActivatedTimes[alarmNumber]), eventDuration);
   d459e:	4628      	mov	r0, r5
   d45a0:	f003 fd74 	bl	d808c <_ZN9TimeClass7timeStrEl>
   d45a4:	4633      	mov	r3, r6
   d45a6:	4622      	mov	r2, r4
   d45a8:	490c      	ldr	r1, [pc, #48]	; (d45dc <_Z10resetAlarmi+0x60>)
   d45aa:	480d      	ldr	r0, [pc, #52]	; (d45e0 <_Z10resetAlarmi+0x64>)
   d45ac:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d45b0:	f7ff fe26 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d45b4:	4628      	mov	r0, r5
   d45b6:	f000 ffa3 	bl	d5500 <_ZN6StringD1Ev>

        //set alarm to inactive
        alarmActive[alarmNumber] = false;
   d45ba:	2200      	movs	r2, #0
   d45bc:	4b09      	ldr	r3, [pc, #36]	; (d45e4 <_Z10resetAlarmi+0x68>)
        //turn off alarm light
        RGB.color(0,0,0);
   d45be:	4611      	mov	r1, r2
   d45c0:	4610      	mov	r0, r2
        //log event information
        Log.info("Alarm %d event triggered by Sensor Node %u at %s. Duration: %d seconds",
            alarmNumber, alarmSensorNodeId, Time.timeStr(alarmActivatedTimes[alarmNumber]), eventDuration);

        //set alarm to inactive
        alarmActive[alarmNumber] = false;
   d45c2:	551a      	strb	r2, [r3, r4]
        //turn off alarm light
        RGB.color(0,0,0);
   d45c4:	f003 fdb0 	bl	d8128 <_ZN8RGBClass5colorEiii>
   d45c8:	e004      	b.n	d45d4 <_Z10resetAlarmi+0x58>
    }
    else{
        Log.info("@@@@@@ ERROR - invalid alarm number supplied to 'resetAlarm' function. Expected value from 0 - 3, got %d", alarmNumber);
   d45ca:	4602      	mov	r2, r0
   d45cc:	4906      	ldr	r1, [pc, #24]	; (d45e8 <_Z10resetAlarmi+0x6c>)
   d45ce:	4804      	ldr	r0, [pc, #16]	; (d45e0 <_Z10resetAlarmi+0x64>)
   d45d0:	f7ff fe16 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
    }
}
   d45d4:	b007      	add	sp, #28
   d45d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45d8:	2003e338 	.word	0x2003e338
   d45dc:	000d9f16 	.word	0x000d9f16
   d45e0:	2003e3dc 	.word	0x2003e3dc
   d45e4:	2003e32e 	.word	0x2003e32e
   d45e8:	000d9f5d 	.word	0x000d9f5d

000d45ec <_Z15resetAlarmCloud6String>:
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];

/* Particle Cloud functions */
/* Reset one or all alarms */
int resetAlarmCloud(String alarmNumber){
   d45ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d45ee:	4606      	mov	r6, r0
    //reset all alarms if input is "all"
    if(alarmNumber.equalsIgnoreCase("all") == 0){
   d45f0:	4910      	ldr	r1, [pc, #64]	; (d4634 <_Z15resetAlarmCloud6String+0x48>)
   d45f2:	4d11      	ldr	r5, [pc, #68]	; (d4638 <_Z15resetAlarmCloud6String+0x4c>)
   d45f4:	4668      	mov	r0, sp
   d45f6:	f000 ffca 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
   d45fa:	4669      	mov	r1, sp
   d45fc:	4630      	mov	r0, r6
   d45fe:	f001 f827 	bl	d5650 <_ZNK6String16equalsIgnoreCaseERKS_>
   d4602:	4604      	mov	r4, r0
   d4604:	4668      	mov	r0, sp
   d4606:	f000 ff7b 	bl	d5500 <_ZN6StringD1Ev>
   d460a:	b944      	cbnz	r4, d461e <_Z15resetAlarmCloud6String+0x32>
        for(int i = 0; i < 4; i++){
            if(alarmActive[i]){
   d460c:	5d2b      	ldrb	r3, [r5, r4]
   d460e:	b113      	cbz	r3, d4616 <_Z15resetAlarmCloud6String+0x2a>
                resetAlarm(i);
   d4610:	4620      	mov	r0, r4
   d4612:	f7ff ffb3 	bl	d457c <_Z10resetAlarmi>
/* Particle Cloud functions */
/* Reset one or all alarms */
int resetAlarmCloud(String alarmNumber){
    //reset all alarms if input is "all"
    if(alarmNumber.equalsIgnoreCase("all") == 0){
        for(int i = 0; i < 4; i++){
   d4616:	3401      	adds	r4, #1
   d4618:	2c04      	cmp	r4, #4
   d461a:	d1f7      	bne.n	d460c <_Z15resetAlarmCloud6String+0x20>
   d461c:	e006      	b.n	d462c <_Z15resetAlarmCloud6String+0x40>
        }
        return 1;
    }
    //otherwise only reset the alarm number provided
    else {
        int i = alarmNumber.toInt();
   d461e:	4630      	mov	r0, r6
   d4620:	f001 f87e 	bl	d5720 <_ZNK6String5toIntEv>
        if(alarmActive[i]){
   d4624:	5c2b      	ldrb	r3, [r5, r0]
   d4626:	b10b      	cbz	r3, d462c <_Z15resetAlarmCloud6String+0x40>
            resetAlarm(i);
   d4628:	f7ff ffa8 	bl	d457c <_Z10resetAlarmi>
        }
        return 1;
    }
}
   d462c:	2001      	movs	r0, #1
   d462e:	b004      	add	sp, #16
   d4630:	bd70      	pop	{r4, r5, r6, pc}
   d4632:	bf00      	nop
   d4634:	000d9fc6 	.word	0x000d9fc6
   d4638:	2003e32e 	.word	0x2003e32e

000d463c <_Z13monitorAlarmsh>:
}

/* check if we need to activate time-based alarms, 
 * monitor current alarms to see if they need to timeout and be reset.
 * @param secondsPassed: number of seconds since this was last called. */
void monitorAlarms(uint8_t secondsPassed){
   d463c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4640:	4d22      	ldr	r5, [pc, #136]	; (d46cc <_Z13monitorAlarmsh+0x90>)
   d4642:	4e23      	ldr	r6, [pc, #140]	; (d46d0 <_Z13monitorAlarmsh+0x94>)
    //check each of the 4 alarms
    for (uint8_t i = 0; i < 4; i++){
        //if this alarm is still active...
        if(alarmActive[i]){
   d4644:	f8df 908c 	ldr.w	r9, [pc, #140]	; d46d4 <_Z13monitorAlarmsh+0x98>
                }

                alarmCooloffCounters[i] += secondsPassed;

                //if cooloff counter has reached the cooloff delay, then automatically reset this alarm
                if(alarmCooloffCounters[i] >= ALARM_COOLOFF_DELAY){
   d4648:	f8df a08c 	ldr.w	sl, [pc, #140]	; d46d8 <_Z13monitorAlarmsh+0x9c>
}

/* check if we need to activate time-based alarms, 
 * monitor current alarms to see if they need to timeout and be reset.
 * @param secondsPassed: number of seconds since this was last called. */
void monitorAlarms(uint8_t secondsPassed){
   d464c:	4680      	mov	r8, r0
   d464e:	2400      	movs	r4, #0
    //check each of the 4 alarms
    for (uint8_t i = 0; i < 4; i++){
        //if this alarm is still active...
        if(alarmActive[i]){
   d4650:	f814 3009 	ldrb.w	r3, [r4, r9]
   d4654:	4f1f      	ldr	r7, [pc, #124]	; (d46d4 <_Z13monitorAlarmsh+0x98>)
   d4656:	b1c3      	cbz	r3, d468a <_Z13monitorAlarmsh+0x4e>
            //if its conditions are no longer met, increment the cooloff counter
            if(!alarmCondtitionsMet(i)){
   d4658:	4620      	mov	r0, r4
   d465a:	f7ff fed1 	bl	d4400 <_Z19alarmCondtitionsMeti>
   d465e:	b990      	cbnz	r0, d4686 <_Z13monitorAlarmsh+0x4a>
                //set the end of alarm time to now, if this is the first iteration of cooloff
                if(alarmCooloffCounters[i] == 0){
   d4660:	882b      	ldrh	r3, [r5, #0]
   d4662:	b923      	cbnz	r3, d466e <_Z13monitorAlarmsh+0x32>
                    alarmEventEndedTimes[i] = Time.local();
   d4664:	f003 fce8 	bl	d8038 <_ZN9TimeClass5localEv>
   d4668:	17c1      	asrs	r1, r0, #31
   d466a:	e9c6 0100 	strd	r0, r1, [r6]
                }

                alarmCooloffCounters[i] += secondsPassed;
   d466e:	882b      	ldrh	r3, [r5, #0]

                //if cooloff counter has reached the cooloff delay, then automatically reset this alarm
                if(alarmCooloffCounters[i] >= ALARM_COOLOFF_DELAY){
   d4670:	f8ba 2000 	ldrh.w	r2, [sl]
                //set the end of alarm time to now, if this is the first iteration of cooloff
                if(alarmCooloffCounters[i] == 0){
                    alarmEventEndedTimes[i] = Time.local();
                }

                alarmCooloffCounters[i] += secondsPassed;
   d4674:	4443      	add	r3, r8
   d4676:	b29b      	uxth	r3, r3

                //if cooloff counter has reached the cooloff delay, then automatically reset this alarm
                if(alarmCooloffCounters[i] >= ALARM_COOLOFF_DELAY){
   d4678:	429a      	cmp	r2, r3
                //set the end of alarm time to now, if this is the first iteration of cooloff
                if(alarmCooloffCounters[i] == 0){
                    alarmEventEndedTimes[i] = Time.local();
                }

                alarmCooloffCounters[i] += secondsPassed;
   d467a:	802b      	strh	r3, [r5, #0]

                //if cooloff counter has reached the cooloff delay, then automatically reset this alarm
                if(alarmCooloffCounters[i] >= ALARM_COOLOFF_DELAY){
   d467c:	d805      	bhi.n	d468a <_Z13monitorAlarmsh+0x4e>
                    resetAlarm(i);
   d467e:	4620      	mov	r0, r4
   d4680:	f7ff ff7c 	bl	d457c <_Z10resetAlarmi>
   d4684:	e001      	b.n	d468a <_Z13monitorAlarmsh+0x4e>
                }
            }
            
            //if conditions are still met, reset cooloff counter
            else{
                alarmCooloffCounters[i] = 0;
   d4686:	2300      	movs	r3, #0
   d4688:	802b      	strh	r3, [r5, #0]
   d468a:	3401      	adds	r4, #1
/* check if we need to activate time-based alarms, 
 * monitor current alarms to see if they need to timeout and be reset.
 * @param secondsPassed: number of seconds since this was last called. */
void monitorAlarms(uint8_t secondsPassed){
    //check each of the 4 alarms
    for (uint8_t i = 0; i < 4; i++){
   d468c:	2c04      	cmp	r4, #4
   d468e:	f105 0502 	add.w	r5, r5, #2
   d4692:	f106 0608 	add.w	r6, r6, #8
   d4696:	d1db      	bne.n	d4650 <_Z13monitorAlarmsh+0x14>
            }
        }
    }

    //check if the time-based alarms (alarms 1 and 2) need to be activated
    if(!alarmActive[2] && alarmCondtitionsMet(2)){
   d4698:	78bb      	ldrb	r3, [r7, #2]
   d469a:	b91b      	cbnz	r3, d46a4 <_Z13monitorAlarmsh+0x68>
   d469c:	2002      	movs	r0, #2
   d469e:	f7ff feaf 	bl	d4400 <_Z19alarmCondtitionsMeti>
   d46a2:	b938      	cbnz	r0, d46b4 <_Z13monitorAlarmsh+0x78>
        startAlarm(2);
    }
    if(!alarmActive[1] && alarmCondtitionsMet(1)){
   d46a4:	787b      	ldrb	r3, [r7, #1]
   d46a6:	b973      	cbnz	r3, d46c6 <_Z13monitorAlarmsh+0x8a>
   d46a8:	2001      	movs	r0, #1
   d46aa:	f7ff fea9 	bl	d4400 <_Z19alarmCondtitionsMeti>
   d46ae:	b928      	cbnz	r0, d46bc <_Z13monitorAlarmsh+0x80>
   d46b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }
    }

    //check if the time-based alarms (alarms 1 and 2) need to be activated
    if(!alarmActive[2] && alarmCondtitionsMet(2)){
        startAlarm(2);
   d46b4:	2002      	movs	r0, #2
   d46b6:	f7ff feef 	bl	d4498 <_Z10startAlarmi>
   d46ba:	e7f3      	b.n	d46a4 <_Z13monitorAlarmsh+0x68>
    }
    if(!alarmActive[1] && alarmCondtitionsMet(1)){
        startAlarm(1);
   d46bc:	2001      	movs	r0, #1
    }
}
   d46be:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    //check if the time-based alarms (alarms 1 and 2) need to be activated
    if(!alarmActive[2] && alarmCondtitionsMet(2)){
        startAlarm(2);
    }
    if(!alarmActive[1] && alarmCondtitionsMet(1)){
        startAlarm(1);
   d46c2:	f7ff bee9 	b.w	d4498 <_Z10startAlarmi>
   d46c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d46ca:	bf00      	nop
   d46cc:	2003d908 	.word	0x2003d908
   d46d0:	2003e360 	.word	0x2003e360
   d46d4:	2003e32e 	.word	0x2003e32e
   d46d8:	2003d7bc 	.word	0x2003d7bc

000d46dc <loop>:
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
    currentSensorCharacteristic2.onDataReceived(onCurrentReceived2, NULL);
}

void loop() { 
   d46dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
   d46e0:	488e      	ldr	r0, [pc, #568]	; (d491c <loop+0x240>)
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
    currentSensorCharacteristic2.onDataReceived(onCurrentReceived2, NULL);
}

void loop() { 
   d46e2:	b08e      	sub	sp, #56	; 0x38
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
   d46e4:	f001 fd26 	bl	d6134 <_ZNK8particle13BlePeerDevice9connectedEv>
   d46e8:	4605      	mov	r5, r0
   d46ea:	b368      	cbz	r0, d4748 <loop+0x6c>
        //record start time of this loop
        loopStart = millis();

        //update alarm cooloff timers and sound-threshold durations only every 2 seconds
        if(quarterSeconds % 4 == 0){
   d46ec:	4c8c      	ldr	r4, [pc, #560]	; (d4920 <loop+0x244>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46ee:	f000 fc21 	bl	d4f34 <HAL_Timer_Get_Milli_Seconds>
   d46f2:	6822      	ldr	r2, [r4, #0]

void loop() { 
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d46f4:	4b8b      	ldr	r3, [pc, #556]	; (d4924 <loop+0x248>)

        //update alarm cooloff timers and sound-threshold durations only every 2 seconds
        if(quarterSeconds % 4 == 0){
   d46f6:	f012 0f03 	tst.w	r2, #3

void loop() { 
    //do stuff if both sensors have been connected
    if (sensorNode1.connected()){// && sensorNode2.connected()) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d46fa:	6018      	str	r0, [r3, #0]
   d46fc:	461d      	mov	r5, r3

        //update alarm cooloff timers and sound-threshold durations only every 2 seconds
        if(quarterSeconds % 4 == 0){
   d46fe:	d105      	bne.n	d470c <loop+0x30>
            /*check if we need to activate time-based alarms, 
            monitor current alarms to see if they need to timeout and be reset */
            monitorAlarms(2);
   d4700:	2002      	movs	r0, #2
   d4702:	f7ff ff9b 	bl	d463c <_Z13monitorAlarmsh>
            //update sound threshold counters "2" seconds after last update
            updateSoundThresholdCounters(2);
   d4706:	2002      	movs	r0, #2
   d4708:	f7ff fe1e 	bl	d4348 <_Z28updateSoundThresholdCountersh>
        }

        //flash appropriate colour at appropriate interval for active alarm
        updateStatusLed();
   d470c:	f7ff fe46 	bl	d439c <_Z15updateStatusLedv>

        //test bluetooth
        if (quarterSeconds % 8 == 0){
   d4710:	6822      	ldr	r2, [r4, #0]
   d4712:	f012 0307 	ands.w	r3, r2, #7
   d4716:	d10c      	bne.n	d4732 <loop+0x56>
            uint16_t test = (uint16_t) quarterSeconds;
   d4718:	a90e      	add	r1, sp, #56	; 0x38
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d471a:	4883      	ldr	r0, [pc, #524]	; (d4928 <loop+0x24c>)
   d471c:	f821 2d14 	strh.w	r2, [r1, #-20]!
   d4720:	2202      	movs	r2, #2
   d4722:	f001 fbf7 	bl	d5f14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            fanSpeedCharacteristic.setValue(test);
            Log.info("%u", test);
   d4726:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d472a:	4980      	ldr	r1, [pc, #512]	; (d492c <loop+0x250>)
   d472c:	4880      	ldr	r0, [pc, #512]	; (d4930 <loop+0x254>)
   d472e:	f7ff fd67 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
        }
        //loop every 250ms, to allow 2Hz status LED flashing if necessary
        //subtract processing time from the delay to make intervals consistently sized
        delay(250 - (millis() - loopStart));
   d4732:	682d      	ldr	r5, [r5, #0]
   d4734:	f000 fbfe 	bl	d4f34 <HAL_Timer_Get_Milli_Seconds>
   d4738:	35fa      	adds	r5, #250	; 0xfa
   d473a:	1a28      	subs	r0, r5, r0
   d473c:	f003 fcd2 	bl	d80e4 <delay>
        quarterSeconds+=1;  
   d4740:	6823      	ldr	r3, [r4, #0]
   d4742:	3301      	adds	r3, #1
   d4744:	6023      	str	r3, [r4, #0]
   d4746:	e183      	b.n	d4a50 <loop+0x374>
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d4748:	497a      	ldr	r1, [pc, #488]	; (d4934 <loop+0x258>)
   d474a:	4879      	ldr	r0, [pc, #484]	; (d4930 <loop+0x254>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d474c:	4e7a      	ldr	r6, [pc, #488]	; (d4938 <loop+0x25c>)
        delay(250 - (millis() - loopStart));
        quarterSeconds+=1;  
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d474e:	f7ff fd57 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d4752:	f001 fd4f 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4756:	221e      	movs	r2, #30
   d4758:	4977      	ldr	r1, [pc, #476]	; (d4938 <loop+0x25c>)
   d475a:	f001 fda1 	bl	d62a0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d475e:	4607      	mov	r7, r0
        for (int i = 0; i < count; i++) {
   d4760:	42bd      	cmp	r5, r7
   d4762:	f280 80c8 	bge.w	d48f6 <loop+0x21a>
   d4766:	2454      	movs	r4, #84	; 0x54
   d4768:	436c      	muls	r4, r5
            BleUuid foundService;
   d476a:	a804      	add	r0, sp, #16
   d476c:	f001 f912 	bl	d5994 <_ZN8particle7BleUuidC1Ev>
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4770:	f104 0008 	add.w	r0, r4, #8
   d4774:	2201      	movs	r2, #1
   d4776:	a904      	add	r1, sp, #16
   d4778:	4430      	add	r0, r6
   d477a:	f001 fb71 	bl	d5e60 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>

            Log.info("Found a bluetooth device.");
   d477e:	496f      	ldr	r1, [pc, #444]	; (d493c <loop+0x260>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4780:	4680      	mov	r8, r0

            Log.info("Found a bluetooth device.");
   d4782:	486b      	ldr	r0, [pc, #428]	; (d4930 <loop+0x254>)
   d4784:	f7ff fd3c 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4788:	4434      	add	r4, r6

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d478a:	496d      	ldr	r1, [pc, #436]	; (d4940 <loop+0x264>)
   d478c:	a809      	add	r0, sp, #36	; 0x24
   d478e:	f000 fefe 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Address: " + scanResults[i].address.toString());
   d4792:	2200      	movs	r2, #0
   d4794:	4621      	mov	r1, r4
   d4796:	4668      	mov	r0, sp
   d4798:	f001 f8eb 	bl	d5972 <_ZNK8particle10BleAddress8toStringEb>
   d479c:	4669      	mov	r1, sp
   d479e:	a809      	add	r0, sp, #36	; 0x24
   d47a0:	f000 ff4a 	bl	d5638 <_ZplRK15StringSumHelperRK6String>
   d47a4:	6801      	ldr	r1, [r0, #0]
   d47a6:	4862      	ldr	r0, [pc, #392]	; (d4930 <loop+0x254>)
   d47a8:	f7ff fd2a 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d47ac:	4668      	mov	r0, sp
   d47ae:	f000 fea7 	bl	d5500 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47b2:	a809      	add	r0, sp, #36	; 0x24
   d47b4:	f000 fea4 	bl	d5500 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d47b8:	4962      	ldr	r1, [pc, #392]	; (d4944 <loop+0x268>)
   d47ba:	a809      	add	r0, sp, #36	; 0x24
   d47bc:	f000 fee7 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Found UUID: " + foundService.toString());
   d47c0:	2200      	movs	r2, #0
   d47c2:	a904      	add	r1, sp, #16
   d47c4:	4668      	mov	r0, sp
   d47c6:	f001 fa75 	bl	d5cb4 <_ZNK8particle7BleUuid8toStringEb>
   d47ca:	4669      	mov	r1, sp
   d47cc:	a809      	add	r0, sp, #36	; 0x24
   d47ce:	f000 ff33 	bl	d5638 <_ZplRK15StringSumHelperRK6String>
   d47d2:	6801      	ldr	r1, [r0, #0]
   d47d4:	4856      	ldr	r0, [pc, #344]	; (d4930 <loop+0x254>)
   d47d6:	f7ff fd13 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d47da:	4668      	mov	r0, sp
   d47dc:	f000 fe90 	bl	d5500 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47e0:	a809      	add	r0, sp, #36	; 0x24
   d47e2:	f000 fe8d 	bl	d5500 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d47e6:	4958      	ldr	r1, [pc, #352]	; (d4948 <loop+0x26c>)
   d47e8:	a809      	add	r0, sp, #36	; 0x24
   d47ea:	f000 fed0 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode1 UUID: " + sensorNode1ServiceUuid.toString());
   d47ee:	2200      	movs	r2, #0
   d47f0:	4956      	ldr	r1, [pc, #344]	; (d494c <loop+0x270>)
   d47f2:	4668      	mov	r0, sp
   d47f4:	f001 fa5e 	bl	d5cb4 <_ZNK8particle7BleUuid8toStringEb>
   d47f8:	4669      	mov	r1, sp
   d47fa:	a809      	add	r0, sp, #36	; 0x24
   d47fc:	f000 ff1c 	bl	d5638 <_ZplRK15StringSumHelperRK6String>
   d4800:	6801      	ldr	r1, [r0, #0]
   d4802:	484b      	ldr	r0, [pc, #300]	; (d4930 <loop+0x254>)
   d4804:	f7ff fcfc 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4808:	4668      	mov	r0, sp
   d480a:	f000 fe79 	bl	d5500 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d480e:	a809      	add	r0, sp, #36	; 0x24
   d4810:	f000 fe76 	bl	d5500 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4814:	494e      	ldr	r1, [pc, #312]	; (d4950 <loop+0x274>)
   d4816:	a809      	add	r0, sp, #36	; 0x24
   d4818:	f000 feb9 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode2 UUID: " + sensorNode2ServiceUuid.toString());
   d481c:	2200      	movs	r2, #0
   d481e:	494d      	ldr	r1, [pc, #308]	; (d4954 <loop+0x278>)
   d4820:	4668      	mov	r0, sp
   d4822:	f001 fa47 	bl	d5cb4 <_ZNK8particle7BleUuid8toStringEb>
   d4826:	4669      	mov	r1, sp
   d4828:	a809      	add	r0, sp, #36	; 0x24
   d482a:	f000 ff05 	bl	d5638 <_ZplRK15StringSumHelperRK6String>
   d482e:	6801      	ldr	r1, [r0, #0]
   d4830:	483f      	ldr	r0, [pc, #252]	; (d4930 <loop+0x254>)
   d4832:	f7ff fce5 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4836:	4668      	mov	r0, sp
   d4838:	f000 fe62 	bl	d5500 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d483c:	a809      	add	r0, sp, #36	; 0x24
   d483e:	f000 fe5f 	bl	d5500 <_ZN6StringD1Ev>

            //Check if it matches UUID for sensor node 1
            if (len > 0 && foundService == sensorNode1ServiceUuid){
   d4842:	f1b8 0f00 	cmp.w	r8, #0
   d4846:	d054      	beq.n	d48f2 <loop+0x216>
   d4848:	4940      	ldr	r1, [pc, #256]	; (d494c <loop+0x270>)
   d484a:	a804      	add	r0, sp, #16
   d484c:	f001 f942 	bl	d5ad4 <_ZNK8particle7BleUuideqERKS0_>
   d4850:	2800      	cmp	r0, #0
   d4852:	f000 809f 	beq.w	d4994 <loop+0x2b8>
                Log.info("Found sensor node 1.");
   d4856:	4836      	ldr	r0, [pc, #216]	; (d4930 <loop+0x254>)
   d4858:	493f      	ldr	r1, [pc, #252]	; (d4958 <loop+0x27c>)
   d485a:	f7ff fcd1 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode1.connected() == false){
   d485e:	482f      	ldr	r0, [pc, #188]	; (d491c <loop+0x240>)
   d4860:	f001 fc68 	bl	d6134 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4864:	2800      	cmp	r0, #0
   d4866:	d151      	bne.n	d490c <loop+0x230>
                    sensorNode1 = BLE.connect(scanResults[i].address);
   d4868:	f001 fcc4 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d486c:	2301      	movs	r3, #1
   d486e:	4622      	mov	r2, r4
   d4870:	4601      	mov	r1, r0
   d4872:	a809      	add	r0, sp, #36	; 0x24
   d4874:	f002 f9d2 	bl	d6c1c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4878:	a909      	add	r1, sp, #36	; 0x24
   d487a:	4828      	ldr	r0, [pc, #160]	; (d491c <loop+0x240>)
   d487c:	f001 fe49 	bl	d6512 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4880:	a809      	add	r0, sp, #36	; 0x24
   d4882:	f001 fd69 	bl	d6358 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode1.connected()){
   d4886:	4825      	ldr	r0, [pc, #148]	; (d491c <loop+0x240>)
   d4888:	f001 fc54 	bl	d6134 <_ZNK8particle13BlePeerDevice9connectedEv>
   d488c:	2800      	cmp	r0, #0
   d488e:	d03b      	beq.n	d4908 <loop+0x22c>
                        Log.info("Successfully connected to sensor node 1!");
   d4890:	4932      	ldr	r1, [pc, #200]	; (d495c <loop+0x280>)
   d4892:	4827      	ldr	r0, [pc, #156]	; (d4930 <loop+0x254>)
   d4894:	f7ff fcb4 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode1.getCharacteristicByUUID(temperatureSensorCharacteristic1, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d4898:	4931      	ldr	r1, [pc, #196]	; (d4960 <loop+0x284>)
   d489a:	a809      	add	r0, sp, #36	; 0x24
   d489c:	f001 f990 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d48a0:	aa09      	add	r2, sp, #36	; 0x24
   d48a2:	4930      	ldr	r1, [pc, #192]	; (d4964 <loop+0x288>)
   d48a4:	481d      	ldr	r0, [pc, #116]	; (d491c <loop+0x240>)
   d48a6:	f001 fe10 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
   d48aa:	492f      	ldr	r1, [pc, #188]	; (d4968 <loop+0x28c>)
   d48ac:	a809      	add	r0, sp, #36	; 0x24
   d48ae:	f001 f987 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d48b2:	aa09      	add	r2, sp, #36	; 0x24
   d48b4:	492d      	ldr	r1, [pc, #180]	; (d496c <loop+0x290>)
   d48b6:	4819      	ldr	r0, [pc, #100]	; (d491c <loop+0x240>)
   d48b8:	f001 fe07 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(distanceSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
   d48bc:	492c      	ldr	r1, [pc, #176]	; (d4970 <loop+0x294>)
   d48be:	a809      	add	r0, sp, #36	; 0x24
   d48c0:	f001 f97e 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d48c4:	aa09      	add	r2, sp, #36	; 0x24
   d48c6:	492b      	ldr	r1, [pc, #172]	; (d4974 <loop+0x298>)
   d48c8:	4814      	ldr	r0, [pc, #80]	; (d491c <loop+0x240>)
   d48ca:	f001 fdfe 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(currentSensorCharacteristic1, "2822a610-32d6-45e1-b9fb-247138fc8df7");
   d48ce:	492a      	ldr	r1, [pc, #168]	; (d4978 <loop+0x29c>)
   d48d0:	a809      	add	r0, sp, #36	; 0x24
   d48d2:	f001 f975 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d48d6:	aa09      	add	r2, sp, #36	; 0x24
   d48d8:	4928      	ldr	r1, [pc, #160]	; (d497c <loop+0x2a0>)
   d48da:	4810      	ldr	r0, [pc, #64]	; (d491c <loop+0x240>)
   d48dc:	f001 fdf5 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(fanSpeedCharacteristic, "29fba3f5-4ce8-46bc-8d75-77806db22c31");
   d48e0:	4927      	ldr	r1, [pc, #156]	; (d4980 <loop+0x2a4>)
   d48e2:	a809      	add	r0, sp, #36	; 0x24
   d48e4:	f001 f96c 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d48e8:	490f      	ldr	r1, [pc, #60]	; (d4928 <loop+0x24c>)
   d48ea:	480c      	ldr	r0, [pc, #48]	; (d491c <loop+0x240>)
   d48ec:	aa09      	add	r2, sp, #36	; 0x24
                        sensorNode2.getCharacteristicByUUID(temperatureSensorCharacteristic2, "bc7f18d9-2c43-408e-be25-62f40645987c");
                        sensorNode2.getCharacteristicByUUID(lightSensorCharacteristic2, "ea5248a4-43cc-4198-a4aa-79200a750835");
                        sensorNode2.getCharacteristicByUUID(soundSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(currentSensorCharacteristic2, "2822a610-32d6-45e1-b9fb-247138fc8df7");
                        sensorNode2.getCharacteristicByUUID(ledVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d48ee:	f001 fdec 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
        for (int i = 0; i < count; i++) {
   d48f2:	3501      	adds	r5, #1
   d48f4:	e734      	b.n	d4760 <loop+0x84>
                    Log.info("Sensor node 2 already connected.");
                }
            }
        }

        if (count > 0) {
   d48f6:	2f00      	cmp	r7, #0
   d48f8:	f340 80aa 	ble.w	d4a50 <loop+0x374>
            Log.info("%d devices found", count);
   d48fc:	463a      	mov	r2, r7
   d48fe:	4921      	ldr	r1, [pc, #132]	; (d4984 <loop+0x2a8>)
   d4900:	480b      	ldr	r0, [pc, #44]	; (d4930 <loop+0x254>)
   d4902:	f7ff fc7d 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
        }
    }
}
   d4906:	e0a3      	b.n	d4a50 <loop+0x374>
                        sensorNode1.getCharacteristicByUUID(distanceSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
                        sensorNode1.getCharacteristicByUUID(currentSensorCharacteristic1, "2822a610-32d6-45e1-b9fb-247138fc8df7");
                        sensorNode1.getCharacteristicByUUID(fanSpeedCharacteristic, "29fba3f5-4ce8-46bc-8d75-77806db22c31");
                    }
                    else{
                        Log.info("Failed to connect to sensor node 1.");
   d4908:	491f      	ldr	r1, [pc, #124]	; (d4988 <loop+0x2ac>)
   d490a:	e002      	b.n	d4912 <loop+0x236>
                    }
                }
                else{
                    Log.info("Sensor node 1 already connected.");
   d490c:	491f      	ldr	r1, [pc, #124]	; (d498c <loop+0x2b0>)
   d490e:	e000      	b.n	d4912 <loop+0x236>
                        sensorNode2.getCharacteristicByUUID(currentSensorCharacteristic2, "2822a610-32d6-45e1-b9fb-247138fc8df7");
                        sensorNode2.getCharacteristicByUUID(ledVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");

                    }
                    else{
                        Log.info("Failed to connect to sensor node 2.");
   d4910:	491f      	ldr	r1, [pc, #124]	; (d4990 <loop+0x2b4>)
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d4912:	4807      	ldr	r0, [pc, #28]	; (d4930 <loop+0x254>)
   d4914:	f7ff fc74 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4918:	e7eb      	b.n	d48f2 <loop+0x216>
   d491a:	bf00      	nop
   d491c:	2003d900 	.word	0x2003d900
   d4920:	2003e2f4 	.word	0x2003e2f4
   d4924:	2003d8f0 	.word	0x2003d8f0
   d4928:	2003d88c 	.word	0x2003d88c
   d492c:	000d9d62 	.word	0x000d9d62
   d4930:	2003e3dc 	.word	0x2003e3dc
   d4934:	000d9fca 	.word	0x000d9fca
   d4938:	2003d910 	.word	0x2003d910
   d493c:	000d9fdb 	.word	0x000d9fdb
   d4940:	000d9ff5 	.word	0x000d9ff5
   d4944:	000d9fff 	.word	0x000d9fff
   d4948:	000da00c 	.word	0x000da00c
   d494c:	2003d8dc 	.word	0x2003d8dc
   d4950:	000da01f 	.word	0x000da01f
   d4954:	2003d8a4 	.word	0x2003d8a4
   d4958:	000da26c 	.word	0x000da26c
   d495c:	000da032 	.word	0x000da032
   d4960:	000da05b 	.word	0x000da05b
   d4964:	2003d894 	.word	0x2003d894
   d4968:	000da080 	.word	0x000da080
   d496c:	2003e2e8 	.word	0x2003e2e8
   d4970:	000da0a5 	.word	0x000da0a5
   d4974:	2003d8b8 	.word	0x2003d8b8
   d4978:	000da0ca 	.word	0x000da0ca
   d497c:	2003e2f8 	.word	0x2003e2f8
   d4980:	000da0ef 	.word	0x000da0ef
   d4984:	000da25b 	.word	0x000da25b
   d4988:	000da114 	.word	0x000da114
   d498c:	000da138 	.word	0x000da138
   d4990:	000da216 	.word	0x000da216
                    Log.info("Sensor node 1 already connected.");
                }
            }

            //Check if it matches UUID for sensor node 2
            else if (len > 0 && foundService == sensorNode2ServiceUuid){
   d4994:	4930      	ldr	r1, [pc, #192]	; (d4a58 <loop+0x37c>)
   d4996:	a804      	add	r0, sp, #16
   d4998:	f001 f89c 	bl	d5ad4 <_ZNK8particle7BleUuideqERKS0_>
   d499c:	2800      	cmp	r0, #0
   d499e:	d0a8      	beq.n	d48f2 <loop+0x216>
                Log.info("Found sensor node 2.");
   d49a0:	482e      	ldr	r0, [pc, #184]	; (d4a5c <loop+0x380>)
   d49a2:	492f      	ldr	r1, [pc, #188]	; (d4a60 <loop+0x384>)
   d49a4:	f7ff fc2c 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode2.connected() == false){
   d49a8:	482e      	ldr	r0, [pc, #184]	; (d4a64 <loop+0x388>)
   d49aa:	f001 fbc3 	bl	d6134 <_ZNK8particle13BlePeerDevice9connectedEv>
   d49ae:	2800      	cmp	r0, #0
   d49b0:	d14c      	bne.n	d4a4c <loop+0x370>
                    sensorNode2 = BLE.connect(scanResults[i].address);
   d49b2:	f001 fc1f 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d49b6:	2301      	movs	r3, #1
   d49b8:	4622      	mov	r2, r4
   d49ba:	4601      	mov	r1, r0
   d49bc:	a809      	add	r0, sp, #36	; 0x24
   d49be:	f002 f92d 	bl	d6c1c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d49c2:	a909      	add	r1, sp, #36	; 0x24
   d49c4:	4827      	ldr	r0, [pc, #156]	; (d4a64 <loop+0x388>)
   d49c6:	f001 fda4 	bl	d6512 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d49ca:	a809      	add	r0, sp, #36	; 0x24
   d49cc:	f001 fcc4 	bl	d6358 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode2.connected()){
   d49d0:	4824      	ldr	r0, [pc, #144]	; (d4a64 <loop+0x388>)
   d49d2:	f001 fbaf 	bl	d6134 <_ZNK8particle13BlePeerDevice9connectedEv>
   d49d6:	2800      	cmp	r0, #0
   d49d8:	d09a      	beq.n	d4910 <loop+0x234>
                        Log.info("Successfully connected to sensor node 2!");
   d49da:	4923      	ldr	r1, [pc, #140]	; (d4a68 <loop+0x38c>)
   d49dc:	481f      	ldr	r0, [pc, #124]	; (d4a5c <loop+0x380>)
   d49de:	f7ff fc0f 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(temperatureSensorCharacteristic2, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d49e2:	4922      	ldr	r1, [pc, #136]	; (d4a6c <loop+0x390>)
   d49e4:	a809      	add	r0, sp, #36	; 0x24
   d49e6:	f001 f8eb 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d49ea:	aa09      	add	r2, sp, #36	; 0x24
   d49ec:	4920      	ldr	r1, [pc, #128]	; (d4a70 <loop+0x394>)
   d49ee:	481d      	ldr	r0, [pc, #116]	; (d4a64 <loop+0x388>)
   d49f0:	f001 fd6b 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(lightSensorCharacteristic2, "ea5248a4-43cc-4198-a4aa-79200a750835");
   d49f4:	491f      	ldr	r1, [pc, #124]	; (d4a74 <loop+0x398>)
   d49f6:	a809      	add	r0, sp, #36	; 0x24
   d49f8:	f001 f8e2 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d49fc:	aa09      	add	r2, sp, #36	; 0x24
   d49fe:	491e      	ldr	r1, [pc, #120]	; (d4a78 <loop+0x39c>)
   d4a00:	4818      	ldr	r0, [pc, #96]	; (d4a64 <loop+0x388>)
   d4a02:	f001 fd62 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(soundSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
   d4a06:	491d      	ldr	r1, [pc, #116]	; (d4a7c <loop+0x3a0>)
   d4a08:	a809      	add	r0, sp, #36	; 0x24
   d4a0a:	f001 f8d9 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d4a0e:	aa09      	add	r2, sp, #36	; 0x24
   d4a10:	491b      	ldr	r1, [pc, #108]	; (d4a80 <loop+0x3a4>)
   d4a12:	4814      	ldr	r0, [pc, #80]	; (d4a64 <loop+0x388>)
   d4a14:	f001 fd59 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
   d4a18:	491a      	ldr	r1, [pc, #104]	; (d4a84 <loop+0x3a8>)
   d4a1a:	a809      	add	r0, sp, #36	; 0x24
   d4a1c:	f001 f8d0 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d4a20:	aa09      	add	r2, sp, #36	; 0x24
   d4a22:	4919      	ldr	r1, [pc, #100]	; (d4a88 <loop+0x3ac>)
   d4a24:	480f      	ldr	r0, [pc, #60]	; (d4a64 <loop+0x388>)
   d4a26:	f001 fd50 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(currentSensorCharacteristic2, "2822a610-32d6-45e1-b9fb-247138fc8df7");
   d4a2a:	4918      	ldr	r1, [pc, #96]	; (d4a8c <loop+0x3b0>)
   d4a2c:	a809      	add	r0, sp, #36	; 0x24
   d4a2e:	f001 f8c7 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d4a32:	aa09      	add	r2, sp, #36	; 0x24
   d4a34:	4916      	ldr	r1, [pc, #88]	; (d4a90 <loop+0x3b4>)
   d4a36:	480b      	ldr	r0, [pc, #44]	; (d4a64 <loop+0x388>)
   d4a38:	f001 fd47 	bl	d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(ledVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d4a3c:	4915      	ldr	r1, [pc, #84]	; (d4a94 <loop+0x3b8>)
   d4a3e:	a809      	add	r0, sp, #36	; 0x24
   d4a40:	f001 f8be 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
   d4a44:	aa09      	add	r2, sp, #36	; 0x24
   d4a46:	4914      	ldr	r1, [pc, #80]	; (d4a98 <loop+0x3bc>)
   d4a48:	4806      	ldr	r0, [pc, #24]	; (d4a64 <loop+0x388>)
   d4a4a:	e750      	b.n	d48ee <loop+0x212>
                    else{
                        Log.info("Failed to connect to sensor node 2.");
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d4a4c:	4913      	ldr	r1, [pc, #76]	; (d4a9c <loop+0x3c0>)
   d4a4e:	e760      	b.n	d4912 <loop+0x236>

        if (count > 0) {
            Log.info("%d devices found", count);
        }
    }
}
   d4a50:	b00e      	add	sp, #56	; 0x38
   d4a52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a56:	bf00      	nop
   d4a58:	2003d8a4 	.word	0x2003d8a4
   d4a5c:	2003e3dc 	.word	0x2003e3dc
   d4a60:	000da281 	.word	0x000da281
   d4a64:	2003e358 	.word	0x2003e358
   d4a68:	000da159 	.word	0x000da159
   d4a6c:	000da05b 	.word	0x000da05b
   d4a70:	2003d89c 	.word	0x2003d89c
   d4a74:	000da182 	.word	0x000da182
   d4a78:	2003d884 	.word	0x2003d884
   d4a7c:	000da1a7 	.word	0x000da1a7
   d4a80:	2003e380 	.word	0x2003e380
   d4a84:	000da1cc 	.word	0x000da1cc
   d4a88:	2003d8f4 	.word	0x2003d8f4
   d4a8c:	000da0ca 	.word	0x000da0ca
   d4a90:	2003e300 	.word	0x2003e300
   d4a94:	000da1f1 	.word	0x000da1f1
   d4a98:	2003d8c0 	.word	0x2003d8c0
   d4a9c:	000da23a 	.word	0x000da23a

000d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4aa0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4aa2:	6804      	ldr	r4, [r0, #0]
   d4aa4:	6843      	ldr	r3, [r0, #4]
   d4aa6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4aa8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4aaa:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4aae:	42a6      	cmp	r6, r4
   d4ab0:	d004      	beq.n	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4ab2:	4620      	mov	r0, r4
   d4ab4:	f000 fd24 	bl	d5500 <_ZN6StringD1Ev>
   d4ab8:	3414      	adds	r4, #20
   d4aba:	e7f8      	b.n	d4aae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4abc:	6828      	ldr	r0, [r5, #0]
   d4abe:	f000 fc87 	bl	d53d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4ac2:	4628      	mov	r0, r5
   d4ac4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ac8 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4ac8:	4602      	mov	r2, r0
   d4aca:	4801      	ldr	r0, [pc, #4]	; (d4ad0 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4acc:	f003 bbec 	b.w	d82a8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4ad0:	000d827d 	.word	0x000d827d

000d4ad4 <setup>:
    }
    return 1;  
}


void setup() {
   d4ad4:	b507      	push	{r0, r1, r2, lr}
    //initialise Particle Cloud functions
    Particle.function("resetAlarm",resetAlarmCloud);
   d4ad6:	492d      	ldr	r1, [pc, #180]	; (d4b8c <setup+0xb8>)
   d4ad8:	482d      	ldr	r0, [pc, #180]	; (d4b90 <setup+0xbc>)
   d4ada:	f7ff fff5 	bl	d4ac8 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setAlarmCooloffDelay",setAlarmCooloffDelay);
   d4ade:	492d      	ldr	r1, [pc, #180]	; (d4b94 <setup+0xc0>)
   d4ae0:	482d      	ldr	r0, [pc, #180]	; (d4b98 <setup+0xc4>)
   d4ae2:	f7ff fff1 	bl	d4ac8 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setDistanceThreshold",setDistanceThreshold);
   d4ae6:	492d      	ldr	r1, [pc, #180]	; (d4b9c <setup+0xc8>)
   d4ae8:	482d      	ldr	r0, [pc, #180]	; (d4ba0 <setup+0xcc>)
   d4aea:	f7ff ffed 	bl	d4ac8 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setLightThreshold",setLightThreshold);
   d4aee:	492d      	ldr	r1, [pc, #180]	; (d4ba4 <setup+0xd0>)
   d4af0:	482d      	ldr	r0, [pc, #180]	; (d4ba8 <setup+0xd4>)
   d4af2:	f7ff ffe9 	bl	d4ac8 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setVolumeThresholds",setVolumeThresholds);
   d4af6:	492d      	ldr	r1, [pc, #180]	; (d4bac <setup+0xd8>)
   d4af8:	482d      	ldr	r0, [pc, #180]	; (d4bb0 <setup+0xdc>)
   d4afa:	f7ff ffe5 	bl	d4ac8 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setSoundDurationThresholds",setSoundDurationThresholds);
   d4afe:	492d      	ldr	r1, [pc, #180]	; (d4bb4 <setup+0xe0>)
   d4b00:	482d      	ldr	r0, [pc, #180]	; (d4bb8 <setup+0xe4>)
   d4b02:	f7ff ffe1 	bl	d4ac8 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>

    //take control of the onboard RGB LED
    RGB.control(true);
   d4b06:	2001      	movs	r0, #1
   d4b08:	f003 fafe 	bl	d8108 <_ZN8RGBClass7controlEb>

    //change timezone to aedt (UTC + 11)
    Time.zone(11);
   d4b0c:	eeb2 0a06 	vmov.f32	s0, #38	; 0x41300000  11.0
   d4b10:	f003 faa0 	bl	d8054 <_ZN9TimeClass4zoneEf>

    const uint8_t val = 0x01;
   d4b14:	a802      	add	r0, sp, #8
   d4b16:	2201      	movs	r2, #1
   d4b18:	f800 2d01 	strb.w	r2, [r0, #-1]!
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d4b1c:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d4b20:	f000 fb32 	bl	d5188 <dct_write_app_data>
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning

    BLE.on();
   d4b24:	f001 fb66 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4b28:	f001 fbaa 	bl	d6280 <_ZNK8particle14BleLocalDevice2onEv>
    
    
    //map functions to be called whenever new data is received for a characteristic
    temperatureSensorCharacteristic1.onDataReceived(onTemperatureReceived1, NULL);
   d4b2c:	2200      	movs	r2, #0
   d4b2e:	4923      	ldr	r1, [pc, #140]	; (d4bbc <setup+0xe8>)
   d4b30:	4823      	ldr	r0, [pc, #140]	; (d4bc0 <setup+0xec>)
   d4b32:	f001 fa91 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humiditySensorCharacteristic.onDataReceived(onHumidityReceived, NULL);
   d4b36:	2200      	movs	r2, #0
   d4b38:	4922      	ldr	r1, [pc, #136]	; (d4bc4 <setup+0xf0>)
   d4b3a:	4823      	ldr	r0, [pc, #140]	; (d4bc8 <setup+0xf4>)
   d4b3c:	f001 fa8c 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    distanceSensorCharacteristic.onDataReceived(onDistanceReceived, NULL);
   d4b40:	2200      	movs	r2, #0
   d4b42:	4922      	ldr	r1, [pc, #136]	; (d4bcc <setup+0xf8>)
   d4b44:	4822      	ldr	r0, [pc, #136]	; (d4bd0 <setup+0xfc>)
   d4b46:	f001 fa87 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    currentSensorCharacteristic1.onDataReceived(onCurrentReceived1, NULL);
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	4921      	ldr	r1, [pc, #132]	; (d4bd4 <setup+0x100>)
   d4b4e:	4822      	ldr	r0, [pc, #136]	; (d4bd8 <setup+0x104>)
   d4b50:	f001 fa82 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

    temperatureSensorCharacteristic2.onDataReceived(onTemperatureReceived2, NULL);
   d4b54:	2200      	movs	r2, #0
   d4b56:	4921      	ldr	r1, [pc, #132]	; (d4bdc <setup+0x108>)
   d4b58:	4821      	ldr	r0, [pc, #132]	; (d4be0 <setup+0x10c>)
   d4b5a:	f001 fa7d 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    lightSensorCharacteristic2.onDataReceived(onLightReceived2, NULL);
   d4b5e:	2200      	movs	r2, #0
   d4b60:	4920      	ldr	r1, [pc, #128]	; (d4be4 <setup+0x110>)
   d4b62:	4821      	ldr	r0, [pc, #132]	; (d4be8 <setup+0x114>)
   d4b64:	f001 fa78 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
   d4b68:	2200      	movs	r2, #0
   d4b6a:	4920      	ldr	r1, [pc, #128]	; (d4bec <setup+0x118>)
   d4b6c:	4820      	ldr	r0, [pc, #128]	; (d4bf0 <setup+0x11c>)
   d4b6e:	f001 fa73 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
   d4b72:	2200      	movs	r2, #0
   d4b74:	491f      	ldr	r1, [pc, #124]	; (d4bf4 <setup+0x120>)
   d4b76:	4820      	ldr	r0, [pc, #128]	; (d4bf8 <setup+0x124>)
   d4b78:	f001 fa6e 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    currentSensorCharacteristic2.onDataReceived(onCurrentReceived2, NULL);
   d4b7c:	2200      	movs	r2, #0
   d4b7e:	491f      	ldr	r1, [pc, #124]	; (d4bfc <setup+0x128>)
   d4b80:	481f      	ldr	r0, [pc, #124]	; (d4c00 <setup+0x12c>)
   d4b82:	f001 fa69 	bl	d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
}
   d4b86:	b003      	add	sp, #12
   d4b88:	f85d fb04 	ldr.w	pc, [sp], #4
   d4b8c:	000d45ed 	.word	0x000d45ed
   d4b90:	000da296 	.word	0x000da296
   d4b94:	000d40d5 	.word	0x000d40d5
   d4b98:	000da2a1 	.word	0x000da2a1
   d4b9c:	000d40e9 	.word	0x000d40e9
   d4ba0:	000da2b6 	.word	0x000da2b6
   d4ba4:	000d40fd 	.word	0x000d40fd
   d4ba8:	000da2cb 	.word	0x000da2cb
   d4bac:	000d4111 	.word	0x000d4111
   d4bb0:	000da2dd 	.word	0x000da2dd
   d4bb4:	000d415d 	.word	0x000d415d
   d4bb8:	000da2f1 	.word	0x000da2f1
   d4bbc:	000d4231 	.word	0x000d4231
   d4bc0:	2003d894 	.word	0x2003d894
   d4bc4:	000d4251 	.word	0x000d4251
   d4bc8:	2003e2e8 	.word	0x2003e2e8
   d4bcc:	000d44ed 	.word	0x000d44ed
   d4bd0:	2003d8b8 	.word	0x2003d8b8
   d4bd4:	000d4269 	.word	0x000d4269
   d4bd8:	2003e2f8 	.word	0x2003e2f8
   d4bdc:	000d42b1 	.word	0x000d42b1
   d4be0:	2003d89c 	.word	0x2003d89c
   d4be4:	000d42c9 	.word	0x000d42c9
   d4be8:	2003d884 	.word	0x2003d884
   d4bec:	000d4531 	.word	0x000d4531
   d4bf0:	2003e380 	.word	0x2003e380
   d4bf4:	000d42f5 	.word	0x000d42f5
   d4bf8:	2003d8f4 	.word	0x2003d8f4
   d4bfc:	000d428d 	.word	0x000d428d
   d4c00:	2003e300 	.word	0x2003e300

000d4c04 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4c04:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c08:	4606      	mov	r6, r0
   d4c0a:	460c      	mov	r4, r1
   d4c0c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4c0e:	d916      	bls.n	d4c3e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4c10:	4290      	cmp	r0, r2
   d4c12:	d215      	bcs.n	d4c40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4c14:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4c18:	1a6c      	subs	r4, r5, r1
   d4c1a:	f1a1 0714 	sub.w	r7, r1, #20
   d4c1e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4c20:	42af      	cmp	r7, r5
   d4c22:	d01c      	beq.n	d4c5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4c24:	b12c      	cbz	r4, d4c32 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4c26:	4629      	mov	r1, r5
   d4c28:	4620      	mov	r0, r4
   d4c2a:	f000 fc59 	bl	d54e0 <_ZN6StringC1EOS_>
   d4c2e:	7c2b      	ldrb	r3, [r5, #16]
   d4c30:	7423      	strb	r3, [r4, #16]
   d4c32:	4628      	mov	r0, r5
   d4c34:	f000 fc64 	bl	d5500 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4c38:	3d14      	subs	r5, #20
   d4c3a:	3c14      	subs	r4, #20
   d4c3c:	e7f0      	b.n	d4c20 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4c3e:	d00e      	beq.n	d4c5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4c40:	42ac      	cmp	r4, r5
   d4c42:	d00c      	beq.n	d4c5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4c44:	b12e      	cbz	r6, d4c52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4c46:	4621      	mov	r1, r4
   d4c48:	4630      	mov	r0, r6
   d4c4a:	f000 fc49 	bl	d54e0 <_ZN6StringC1EOS_>
   d4c4e:	7c23      	ldrb	r3, [r4, #16]
   d4c50:	7433      	strb	r3, [r6, #16]
   d4c52:	4620      	mov	r0, r4
   d4c54:	f000 fc54 	bl	d5500 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4c58:	3414      	adds	r4, #20
   d4c5a:	3614      	adds	r6, #20
   d4c5c:	e7f0      	b.n	d4c40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4c64:	2300      	movs	r3, #0
   d4c66:	6003      	str	r3, [r0, #0]
   d4c68:	6043      	str	r3, [r0, #4]
   d4c6a:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4c6c:	684e      	ldr	r6, [r1, #4]
   d4c6e:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4c70:	4604      	mov	r4, r0
   d4c72:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4c74:	dd24      	ble.n	d4cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4c76:	f04f 0814 	mov.w	r8, #20
   d4c7a:	fb08 f006 	mul.w	r0, r8, r6
   d4c7e:	f000 fb9f 	bl	d53c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4c82:	4605      	mov	r5, r0
   d4c84:	b1e0      	cbz	r0, d4cc0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4c86:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4c8a:	fb08 1202 	mla	r2, r8, r2, r1
   d4c8e:	f7ff ffb9 	bl	d4c04 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4c92:	6820      	ldr	r0, [r4, #0]
   d4c94:	f000 fb9c 	bl	d53d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4c98:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4c9a:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4c9c:	683e      	ldr	r6, [r7, #0]
   d4c9e:	687b      	ldr	r3, [r7, #4]
   d4ca0:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4ca4:	4546      	cmp	r6, r8
   d4ca6:	d009      	beq.n	d4cbc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4ca8:	b12d      	cbz	r5, d4cb6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4caa:	4631      	mov	r1, r6
   d4cac:	4628      	mov	r0, r5
   d4cae:	f000 fc90 	bl	d55d2 <_ZN6StringC1ERKS_>
   d4cb2:	7c33      	ldrb	r3, [r6, #16]
   d4cb4:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4cb6:	3614      	adds	r6, #20
   d4cb8:	3514      	adds	r5, #20
   d4cba:	e7f3      	b.n	d4ca4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4cbc:	687b      	ldr	r3, [r7, #4]
   d4cbe:	6063      	str	r3, [r4, #4]
    }
}
   d4cc0:	4620      	mov	r0, r4
   d4cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4cc8 <_GLOBAL__sub_I_SystemMode>:
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d4cc8:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cca:	4d6a      	ldr	r5, [pc, #424]	; (d4e74 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d4ccc:	b08c      	sub	sp, #48	; 0x30

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4cce:	f000 f919 	bl	d4f04 <HAL_Pin_Map>
   d4cd2:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4cd8:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4cda:	602c      	str	r4, [r5, #0]
   d4cdc:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4cde:	71ac      	strb	r4, [r5, #6]
   d4ce0:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4ce2:	2001      	movs	r0, #1
   d4ce4:	f000 fae8 	bl	d52b8 <set_system_mode>
 * Date: 07/05/2020
 */

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(AUTOMATIC);
   d4ce8:	4a63      	ldr	r2, [pc, #396]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4cea:	4964      	ldr	r1, [pc, #400]	; (d4e7c <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4cec:	4628      	mov	r0, r5
   d4cee:	f003 ffde 	bl	d8cae <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4cf2:	9400      	str	r4, [sp, #0]
   d4cf4:	9401      	str	r4, [sp, #4]
   d4cf6:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4cf8:	f003 fbc6 	bl	d8488 <_Z16_fetch_usbserialv>
   d4cfc:	4669      	mov	r1, sp
   d4cfe:	4606      	mov	r6, r0
   d4d00:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4d02:	4d5f      	ldr	r5, [pc, #380]	; (d4e80 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4d04:	f7ff ffac 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4d08:	a903      	add	r1, sp, #12
   d4d0a:	a806      	add	r0, sp, #24
   d4d0c:	f7ff ffa8 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4d10:	4b5c      	ldr	r3, [pc, #368]	; (d4e84 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4d12:	602b      	str	r3, [r5, #0]
   d4d14:	a906      	add	r1, sp, #24
   d4d16:	a809      	add	r0, sp, #36	; 0x24
   d4d18:	f7ff ffa2 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4d1c:	aa09      	add	r2, sp, #36	; 0x24
   d4d1e:	2101      	movs	r1, #1
   d4d20:	1d28      	adds	r0, r5, #4
   d4d22:	f002 fe60 	bl	d79e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4d26:	a809      	add	r0, sp, #36	; 0x24
   d4d28:	f7ff feba 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4d2c:	a806      	add	r0, sp, #24
   d4d2e:	f7ff feb7 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4d32:	4b55      	ldr	r3, [pc, #340]	; (d4e88 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4d34:	602b      	str	r3, [r5, #0]
   d4d36:	622e      	str	r6, [r5, #32]
   d4d38:	a803      	add	r0, sp, #12
   d4d3a:	f7ff feb1 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4d3e:	4b53      	ldr	r3, [pc, #332]	; (d4e8c <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4d40:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4d42:	f003 fba1 	bl	d8488 <_Z16_fetch_usbserialv>
   d4d46:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4d4a:	f003 fb8d 	bl	d8468 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4d4e:	f002 faf3 	bl	d7338 <_ZN5spark10LogManager8instanceEv>
   d4d52:	4629      	mov	r1, r5
   d4d54:	f002 fdda 	bl	d790c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4d58:	4668      	mov	r0, sp
   d4d5a:	f7ff fea1 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4d5e:	4a46      	ldr	r2, [pc, #280]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4d60:	494b      	ldr	r1, [pc, #300]	; (d4e90 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4d62:	4628      	mov	r0, r5
   d4d64:	f003 ffa3 	bl	d8cae <__aeabi_atexit>
//sound must continue for t0 seconds to trigger alarm 1, or t1 seconds for alarm 2
uint16_t SOUND_DURATION_THRESHOLDS [2] = {30, 10};

/* Bluetooth variables */
//bluetooth devices we want to connect to and their service ids
BlePeerDevice sensorNode1;
   d4d68:	484a      	ldr	r0, [pc, #296]	; (d4e94 <_GLOBAL__sub_I_SystemMode+0x1cc>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4d6a:	4d4b      	ldr	r5, [pc, #300]	; (d4e98 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4d6c:	f001 fb4e 	bl	d640c <_ZN8particle13BlePeerDeviceC1Ev>
   d4d70:	4a41      	ldr	r2, [pc, #260]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4d72:	494a      	ldr	r1, [pc, #296]	; (d4e9c <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4d74:	4847      	ldr	r0, [pc, #284]	; (d4e94 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4d76:	f003 ff9a 	bl	d8cae <__aeabi_atexit>
BlePeerDevice sensorNode2;
   d4d7a:	4849      	ldr	r0, [pc, #292]	; (d4ea0 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4d7c:	f001 fb46 	bl	d640c <_ZN8particle13BlePeerDeviceC1Ev>
   d4d80:	4a3d      	ldr	r2, [pc, #244]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4d82:	4946      	ldr	r1, [pc, #280]	; (d4e9c <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4d84:	4846      	ldr	r0, [pc, #280]	; (d4ea0 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4d86:	f003 ff92 	bl	d8cae <__aeabi_atexit>
BleUuid sensorNode1ServiceUuid("754ebf5e-ce31-4300-9fd5-a8fb4ee4a811");
   d4d8a:	4946      	ldr	r1, [pc, #280]	; (d4ea4 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4d8c:	4846      	ldr	r0, [pc, #280]	; (d4ea8 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4d8e:	f000 ff17 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>
BleUuid sensorNode2ServiceUuid("97728ad9-a998-4629-b855-ee2658ca01f7");
   d4d92:	4946      	ldr	r1, [pc, #280]	; (d4eac <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4d94:	4846      	ldr	r0, [pc, #280]	; (d4eb0 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4d96:	f000 ff13 	bl	d5bc0 <_ZN8particle7BleUuidC1EPKc>

//characteristics we want to track
//for sensor node 1
BleCharacteristic temperatureSensorCharacteristic1;
   d4d9a:	4846      	ldr	r0, [pc, #280]	; (d4eb4 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4d9c:	f001 ffa2 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4da0:	4a35      	ldr	r2, [pc, #212]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4da2:	4945      	ldr	r1, [pc, #276]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4da4:	4843      	ldr	r0, [pc, #268]	; (d4eb4 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4da6:	f003 ff82 	bl	d8cae <__aeabi_atexit>
BleCharacteristic humiditySensorCharacteristic;
   d4daa:	4844      	ldr	r0, [pc, #272]	; (d4ebc <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4dac:	f001 ff9a 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4db0:	4a31      	ldr	r2, [pc, #196]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4db2:	4941      	ldr	r1, [pc, #260]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4db4:	4841      	ldr	r0, [pc, #260]	; (d4ebc <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4db6:	f003 ff7a 	bl	d8cae <__aeabi_atexit>
BleCharacteristic distanceSensorCharacteristic;
   d4dba:	4841      	ldr	r0, [pc, #260]	; (d4ec0 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4dbc:	f001 ff92 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4dc0:	4a2d      	ldr	r2, [pc, #180]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4dc2:	493d      	ldr	r1, [pc, #244]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4dc4:	483e      	ldr	r0, [pc, #248]	; (d4ec0 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4dc6:	f003 ff72 	bl	d8cae <__aeabi_atexit>
BleCharacteristic currentSensorCharacteristic1;
   d4dca:	483e      	ldr	r0, [pc, #248]	; (d4ec4 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4dcc:	f001 ff8a 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4dd0:	4a29      	ldr	r2, [pc, #164]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4dd2:	4939      	ldr	r1, [pc, #228]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4dd4:	483b      	ldr	r0, [pc, #236]	; (d4ec4 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4dd6:	f003 ff6a 	bl	d8cae <__aeabi_atexit>
BleCharacteristic fanSpeedCharacteristic;
   d4dda:	483b      	ldr	r0, [pc, #236]	; (d4ec8 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4ddc:	f001 ff82 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4de0:	4a25      	ldr	r2, [pc, #148]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4de2:	4935      	ldr	r1, [pc, #212]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4de4:	4838      	ldr	r0, [pc, #224]	; (d4ec8 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4de6:	f003 ff62 	bl	d8cae <__aeabi_atexit>

//for sensor node 2
BleCharacteristic temperatureSensorCharacteristic2;
   d4dea:	4838      	ldr	r0, [pc, #224]	; (d4ecc <_GLOBAL__sub_I_SystemMode+0x204>)
   d4dec:	f001 ff7a 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4df0:	4a21      	ldr	r2, [pc, #132]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4df2:	4931      	ldr	r1, [pc, #196]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4df4:	4835      	ldr	r0, [pc, #212]	; (d4ecc <_GLOBAL__sub_I_SystemMode+0x204>)
   d4df6:	f003 ff5a 	bl	d8cae <__aeabi_atexit>
BleCharacteristic lightSensorCharacteristic2;
   d4dfa:	4835      	ldr	r0, [pc, #212]	; (d4ed0 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4dfc:	f001 ff72 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e00:	4a1d      	ldr	r2, [pc, #116]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4e02:	492d      	ldr	r1, [pc, #180]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4e04:	4832      	ldr	r0, [pc, #200]	; (d4ed0 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4e06:	f003 ff52 	bl	d8cae <__aeabi_atexit>
BleCharacteristic soundSensorCharacteristic;
   d4e0a:	4832      	ldr	r0, [pc, #200]	; (d4ed4 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4e0c:	f001 ff6a 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e10:	4a19      	ldr	r2, [pc, #100]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4e12:	4929      	ldr	r1, [pc, #164]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4e14:	482f      	ldr	r0, [pc, #188]	; (d4ed4 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4e16:	f003 ff4a 	bl	d8cae <__aeabi_atexit>
BleCharacteristic humanDetectorCharacteristic;
   d4e1a:	482f      	ldr	r0, [pc, #188]	; (d4ed8 <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e1c:	f001 ff62 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e20:	4a15      	ldr	r2, [pc, #84]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4e22:	4925      	ldr	r1, [pc, #148]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4e24:	482c      	ldr	r0, [pc, #176]	; (d4ed8 <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e26:	f003 ff42 	bl	d8cae <__aeabi_atexit>
BleCharacteristic currentSensorCharacteristic2;
   d4e2a:	482c      	ldr	r0, [pc, #176]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x214>)
   d4e2c:	f001 ff5a 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e30:	4a11      	ldr	r2, [pc, #68]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4e32:	4921      	ldr	r1, [pc, #132]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4e34:	4829      	ldr	r0, [pc, #164]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x214>)
   d4e36:	f003 ff3a 	bl	d8cae <__aeabi_atexit>
BleCharacteristic ledVoltageCharacteristic;
   d4e3a:	4829      	ldr	r0, [pc, #164]	; (d4ee0 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4e3c:	f001 ff52 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e40:	4a0d      	ldr	r2, [pc, #52]	; (d4e78 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4e42:	491d      	ldr	r1, [pc, #116]	; (d4eb8 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4e44:	4826      	ldr	r0, [pc, #152]	; (d4ee0 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4e46:	f003 ff32 	bl	d8cae <__aeabi_atexit>

// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d4e4a:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d4e4e:	1928      	adds	r0, r5, r4
   d4e50:	f000 fd20 	bl	d5894 <_ZN8particle10BleAddressC1Ev>
   d4e54:	f104 0008 	add.w	r0, r4, #8
   d4e58:	4428      	add	r0, r5
   d4e5a:	f000 ffaa 	bl	d5db2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4e5e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4e62:	4428      	add	r0, r5
   d4e64:	3454      	adds	r4, #84	; 0x54
   d4e66:	f000 ffa4 	bl	d5db2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4e6a:	42b4      	cmp	r4, r6
   d4e6c:	d1ef      	bne.n	d4e4e <_GLOBAL__sub_I_SystemMode+0x186>
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d4e6e:	b00c      	add	sp, #48	; 0x30
   d4e70:	bd70      	pop	{r4, r5, r6, pc}
   d4e72:	bf00      	nop
   d4e74:	2003d8c8 	.word	0x2003d8c8
   d4e78:	2003d880 	.word	0x2003d880
   d4e7c:	000d41a9 	.word	0x000d41a9
   d4e80:	2003e308 	.word	0x2003e308
   d4e84:	000d9c5c 	.word	0x000d9c5c
   d4e88:	000da6a0 	.word	0x000da6a0
   d4e8c:	000d9c74 	.word	0x000d9c74
   d4e90:	000d41b9 	.word	0x000d41b9
   d4e94:	2003d900 	.word	0x2003d900
   d4e98:	2003d910 	.word	0x2003d910
   d4e9c:	000d6359 	.word	0x000d6359
   d4ea0:	2003e358 	.word	0x2003e358
   d4ea4:	000da30c 	.word	0x000da30c
   d4ea8:	2003d8dc 	.word	0x2003d8dc
   d4eac:	000da331 	.word	0x000da331
   d4eb0:	2003d8a4 	.word	0x2003d8a4
   d4eb4:	2003d894 	.word	0x2003d894
   d4eb8:	000d634b 	.word	0x000d634b
   d4ebc:	2003e2e8 	.word	0x2003e2e8
   d4ec0:	2003d8b8 	.word	0x2003d8b8
   d4ec4:	2003e2f8 	.word	0x2003e2f8
   d4ec8:	2003d88c 	.word	0x2003d88c
   d4ecc:	2003d89c 	.word	0x2003d89c
   d4ed0:	2003d884 	.word	0x2003d884
   d4ed4:	2003e380 	.word	0x2003e380
   d4ed8:	2003d8f4 	.word	0x2003d8f4
   d4edc:	2003e300 	.word	0x2003e300
   d4ee0:	2003d8c0 	.word	0x2003d8c0

000d4ee4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <netdb_freeaddrinfo+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	689b      	ldr	r3, [r3, #8]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030268 	.word	0x00030268

000d4ef4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <netdb_getaddrinfo+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	68db      	ldr	r3, [r3, #12]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030268 	.word	0x00030268

000d4f04 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_Pin_Map+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	681b      	ldr	r3, [r3, #0]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003022c 	.word	0x0003022c

000d4f14 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_RNG_GetRandomNumber+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	685b      	ldr	r3, [r3, #4]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030218 	.word	0x00030218

000d4f24 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_Delay_Microseconds+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	68db      	ldr	r3, [r3, #12]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030218 	.word	0x00030218

000d4f34 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	695b      	ldr	r3, [r3, #20]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030218 	.word	0x00030218

000d4f44 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_RTC_Get_UnixTime+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	69db      	ldr	r3, [r3, #28]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030218 	.word	0x00030218

000d4f54 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <hal_ble_stack_init+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	689b      	ldr	r3, [r3, #8]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030278 	.word	0x00030278

000d4f64 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <hal_ble_gap_start_scan+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030278 	.word	0x00030278

000d4f74 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b03      	ldr	r3, [pc, #12]	; (d4f84 <hal_ble_gap_stop_scan+0x10>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d4f7e:	9301      	str	r3, [sp, #4]
   d4f80:	bd08      	pop	{r3, pc}
   d4f82:	0000      	.short	0x0000
   d4f84:	00030278 	.word	0x00030278

000d4f88 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b03      	ldr	r3, [pc, #12]	; (d4f98 <hal_ble_gap_disconnect+0x10>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4f92:	9301      	str	r3, [sp, #4]
   d4f94:	bd08      	pop	{r3, pc}
   d4f96:	0000      	.short	0x0000
   d4f98:	00030278 	.word	0x00030278

000d4f9c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b03      	ldr	r3, [pc, #12]	; (d4fac <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d4fa6:	9301      	str	r3, [sp, #4]
   d4fa8:	bd08      	pop	{r3, pc}
   d4faa:	0000      	.short	0x0000
   d4fac:	00030278 	.word	0x00030278

000d4fb0 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b03      	ldr	r3, [pc, #12]	; (d4fc0 <hal_ble_gatt_client_discover_all_services+0x10>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d4fba:	9301      	str	r3, [sp, #4]
   d4fbc:	bd08      	pop	{r3, pc}
   d4fbe:	0000      	.short	0x0000
   d4fc0:	00030278 	.word	0x00030278

000d4fc4 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b03      	ldr	r3, [pc, #12]	; (d4fd4 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d4fce:	9301      	str	r3, [sp, #4]
   d4fd0:	bd08      	pop	{r3, pc}
   d4fd2:	0000      	.short	0x0000
   d4fd4:	00030278 	.word	0x00030278

000d4fd8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b03      	ldr	r3, [pc, #12]	; (d4fe8 <hal_ble_gatt_client_write_with_response+0x10>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d4fe2:	9301      	str	r3, [sp, #4]
   d4fe4:	bd08      	pop	{r3, pc}
   d4fe6:	0000      	.short	0x0000
   d4fe8:	00030278 	.word	0x00030278

000d4fec <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b03      	ldr	r3, [pc, #12]	; (d4ffc <hal_ble_gatt_client_write_without_response+0x10>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4ff6:	9301      	str	r3, [sp, #4]
   d4ff8:	bd08      	pop	{r3, pc}
   d4ffa:	0000      	.short	0x0000
   d4ffc:	00030278 	.word	0x00030278

000d5000 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d5000:	b508      	push	{r3, lr}
   d5002:	4b03      	ldr	r3, [pc, #12]	; (d5010 <hal_ble_gatt_client_read+0x10>)
   d5004:	681b      	ldr	r3, [r3, #0]
   d5006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d500a:	9301      	str	r3, [sp, #4]
   d500c:	bd08      	pop	{r3, pc}
   d500e:	0000      	.short	0x0000
   d5010:	00030278 	.word	0x00030278

000d5014 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b03      	ldr	r3, [pc, #12]	; (d5024 <hal_ble_gap_connect+0x10>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d501e:	9301      	str	r3, [sp, #4]
   d5020:	bd08      	pop	{r3, pc}
   d5022:	0000      	.short	0x0000
   d5024:	00030278 	.word	0x00030278

000d5028 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5028:	b508      	push	{r3, lr}
   d502a:	4b03      	ldr	r3, [pc, #12]	; (d5038 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d502c:	681b      	ldr	r3, [r3, #0]
   d502e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5032:	9301      	str	r3, [sp, #4]
   d5034:	bd08      	pop	{r3, pc}
   d5036:	0000      	.short	0x0000
   d5038:	00030278 	.word	0x00030278

000d503c <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b03      	ldr	r3, [pc, #12]	; (d504c <hal_ble_gatt_client_configure_cccd+0x10>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d5046:	9301      	str	r3, [sp, #4]
   d5048:	bd08      	pop	{r3, pc}
   d504a:	0000      	.short	0x0000
   d504c:	00030278 	.word	0x00030278

000d5050 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5050:	b508      	push	{r3, lr}
   d5052:	4b03      	ldr	r3, [pc, #12]	; (d5060 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d5054:	681b      	ldr	r3, [r3, #0]
   d5056:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d505a:	9301      	str	r3, [sp, #4]
   d505c:	bd08      	pop	{r3, pc}
   d505e:	0000      	.short	0x0000
   d5060:	00030278 	.word	0x00030278

000d5064 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b03      	ldr	r3, [pc, #12]	; (d5074 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d506e:	9301      	str	r3, [sp, #4]
   d5070:	bd08      	pop	{r3, pc}
   d5072:	0000      	.short	0x0000
   d5074:	00030278 	.word	0x00030278

000d5078 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d5078:	b508      	push	{r3, lr}
   d507a:	4b02      	ldr	r3, [pc, #8]	; (d5084 <os_thread_is_current+0xc>)
   d507c:	681b      	ldr	r3, [r3, #0]
   d507e:	689b      	ldr	r3, [r3, #8]
   d5080:	9301      	str	r3, [sp, #4]
   d5082:	bd08      	pop	{r3, pc}
   d5084:	00030248 	.word	0x00030248

000d5088 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d5088:	b508      	push	{r3, lr}
   d508a:	4b02      	ldr	r3, [pc, #8]	; (d5094 <os_thread_join+0xc>)
   d508c:	681b      	ldr	r3, [r3, #0]
   d508e:	691b      	ldr	r3, [r3, #16]
   d5090:	9301      	str	r3, [sp, #4]
   d5092:	bd08      	pop	{r3, pc}
   d5094:	00030248 	.word	0x00030248

000d5098 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d5098:	b508      	push	{r3, lr}
   d509a:	4b02      	ldr	r3, [pc, #8]	; (d50a4 <os_thread_cleanup+0xc>)
   d509c:	681b      	ldr	r3, [r3, #0]
   d509e:	695b      	ldr	r3, [r3, #20]
   d50a0:	9301      	str	r3, [sp, #4]
   d50a2:	bd08      	pop	{r3, pc}
   d50a4:	00030248 	.word	0x00030248

000d50a8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b02      	ldr	r3, [pc, #8]	; (d50b4 <os_mutex_recursive_create+0xc>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d50b0:	9301      	str	r3, [sp, #4]
   d50b2:	bd08      	pop	{r3, pc}
   d50b4:	00030248 	.word	0x00030248

000d50b8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d50b8:	b508      	push	{r3, lr}
   d50ba:	4b02      	ldr	r3, [pc, #8]	; (d50c4 <os_mutex_recursive_destroy+0xc>)
   d50bc:	681b      	ldr	r3, [r3, #0]
   d50be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d50c0:	9301      	str	r3, [sp, #4]
   d50c2:	bd08      	pop	{r3, pc}
   d50c4:	00030248 	.word	0x00030248

000d50c8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d50c8:	b508      	push	{r3, lr}
   d50ca:	4b02      	ldr	r3, [pc, #8]	; (d50d4 <os_mutex_recursive_lock+0xc>)
   d50cc:	681b      	ldr	r3, [r3, #0]
   d50ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d50d0:	9301      	str	r3, [sp, #4]
   d50d2:	bd08      	pop	{r3, pc}
   d50d4:	00030248 	.word	0x00030248

000d50d8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d50d8:	b508      	push	{r3, lr}
   d50da:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <os_mutex_recursive_unlock+0xc>)
   d50dc:	681b      	ldr	r3, [r3, #0]
   d50de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d50e0:	9301      	str	r3, [sp, #4]
   d50e2:	bd08      	pop	{r3, pc}
   d50e4:	00030248 	.word	0x00030248

000d50e8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d50e8:	b508      	push	{r3, lr}
   d50ea:	4b02      	ldr	r3, [pc, #8]	; (d50f4 <inet_inet_ntop+0xc>)
   d50ec:	681b      	ldr	r3, [r3, #0]
   d50ee:	695b      	ldr	r3, [r3, #20]
   d50f0:	9301      	str	r3, [sp, #4]
   d50f2:	bd08      	pop	{r3, pc}
   d50f4:	00030264 	.word	0x00030264

000d50f8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b02      	ldr	r3, [pc, #8]	; (d5104 <HAL_USART_Init+0xc>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	681b      	ldr	r3, [r3, #0]
   d5100:	9301      	str	r3, [sp, #4]
   d5102:	bd08      	pop	{r3, pc}
   d5104:	0003023c 	.word	0x0003023c

000d5108 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d5108:	b508      	push	{r3, lr}
   d510a:	4b02      	ldr	r3, [pc, #8]	; (d5114 <HAL_USART_End+0xc>)
   d510c:	681b      	ldr	r3, [r3, #0]
   d510e:	689b      	ldr	r3, [r3, #8]
   d5110:	9301      	str	r3, [sp, #4]
   d5112:	bd08      	pop	{r3, pc}
   d5114:	0003023c 	.word	0x0003023c

000d5118 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d5118:	b508      	push	{r3, lr}
   d511a:	4b02      	ldr	r3, [pc, #8]	; (d5124 <HAL_USART_Write_Data+0xc>)
   d511c:	681b      	ldr	r3, [r3, #0]
   d511e:	68db      	ldr	r3, [r3, #12]
   d5120:	9301      	str	r3, [sp, #4]
   d5122:	bd08      	pop	{r3, pc}
   d5124:	0003023c 	.word	0x0003023c

000d5128 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <HAL_USART_Available_Data+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	691b      	ldr	r3, [r3, #16]
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	0003023c 	.word	0x0003023c

000d5138 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <HAL_USART_Read_Data+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	695b      	ldr	r3, [r3, #20]
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	0003023c 	.word	0x0003023c

000d5148 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <HAL_USART_Peek_Data+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	699b      	ldr	r3, [r3, #24]
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	0003023c 	.word	0x0003023c

000d5158 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <HAL_USART_Flush_Data+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	69db      	ldr	r3, [r3, #28]
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	0003023c 	.word	0x0003023c

000d5168 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <HAL_USART_Available_Data_For_Write+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	0003023c 	.word	0x0003023c

000d5178 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b02      	ldr	r3, [pc, #8]	; (d5184 <HAL_USART_BeginConfig+0xc>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5180:	9301      	str	r3, [sp, #4]
   d5182:	bd08      	pop	{r3, pc}
   d5184:	0003023c 	.word	0x0003023c

000d5188 <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d5188:	b508      	push	{r3, lr}
   d518a:	4b02      	ldr	r3, [pc, #8]	; (d5194 <dct_write_app_data+0xc>)
   d518c:	681b      	ldr	r3, [r3, #0]
   d518e:	685b      	ldr	r3, [r3, #4]
   d5190:	9301      	str	r3, [sp, #4]
   d5192:	bd08      	pop	{r3, pc}
   d5194:	00030258 	.word	0x00030258

000d5198 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5198:	b508      	push	{r3, lr}
   d519a:	4b02      	ldr	r3, [pc, #8]	; (d51a4 <HAL_USB_USART_Init+0xc>)
   d519c:	681b      	ldr	r3, [r3, #0]
   d519e:	681b      	ldr	r3, [r3, #0]
   d51a0:	9301      	str	r3, [sp, #4]
   d51a2:	bd08      	pop	{r3, pc}
   d51a4:	0003024c 	.word	0x0003024c

000d51a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d51a8:	b508      	push	{r3, lr}
   d51aa:	4b02      	ldr	r3, [pc, #8]	; (d51b4 <HAL_USB_USART_Begin+0xc>)
   d51ac:	681b      	ldr	r3, [r3, #0]
   d51ae:	685b      	ldr	r3, [r3, #4]
   d51b0:	9301      	str	r3, [sp, #4]
   d51b2:	bd08      	pop	{r3, pc}
   d51b4:	0003024c 	.word	0x0003024c

000d51b8 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d51b8:	b508      	push	{r3, lr}
   d51ba:	4b02      	ldr	r3, [pc, #8]	; (d51c4 <HAL_USB_USART_End+0xc>)
   d51bc:	681b      	ldr	r3, [r3, #0]
   d51be:	689b      	ldr	r3, [r3, #8]
   d51c0:	9301      	str	r3, [sp, #4]
   d51c2:	bd08      	pop	{r3, pc}
   d51c4:	0003024c 	.word	0x0003024c

000d51c8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d51c8:	b508      	push	{r3, lr}
   d51ca:	4b02      	ldr	r3, [pc, #8]	; (d51d4 <HAL_USB_USART_Available_Data+0xc>)
   d51cc:	681b      	ldr	r3, [r3, #0]
   d51ce:	691b      	ldr	r3, [r3, #16]
   d51d0:	9301      	str	r3, [sp, #4]
   d51d2:	bd08      	pop	{r3, pc}
   d51d4:	0003024c 	.word	0x0003024c

000d51d8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d51d8:	b508      	push	{r3, lr}
   d51da:	4b02      	ldr	r3, [pc, #8]	; (d51e4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d51dc:	681b      	ldr	r3, [r3, #0]
   d51de:	695b      	ldr	r3, [r3, #20]
   d51e0:	9301      	str	r3, [sp, #4]
   d51e2:	bd08      	pop	{r3, pc}
   d51e4:	0003024c 	.word	0x0003024c

000d51e8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51e8:	b508      	push	{r3, lr}
   d51ea:	4b02      	ldr	r3, [pc, #8]	; (d51f4 <HAL_USB_USART_Receive_Data+0xc>)
   d51ec:	681b      	ldr	r3, [r3, #0]
   d51ee:	699b      	ldr	r3, [r3, #24]
   d51f0:	9301      	str	r3, [sp, #4]
   d51f2:	bd08      	pop	{r3, pc}
   d51f4:	0003024c 	.word	0x0003024c

000d51f8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <HAL_USB_USART_Send_Data+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	69db      	ldr	r3, [r3, #28]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	0003024c 	.word	0x0003024c

000d5208 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <HAL_USB_USART_Flush_Data+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	6a1b      	ldr	r3, [r3, #32]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	0003024c 	.word	0x0003024c

000d5218 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <LED_SetSignalingColor+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	685b      	ldr	r3, [r3, #4]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	00030260 	.word	0x00030260

000d5228 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <LED_Signaling_Start+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	689b      	ldr	r3, [r3, #8]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	00030260 	.word	0x00030260

000d5238 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <LED_Signaling_Stop+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	68db      	ldr	r3, [r3, #12]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	00030260 	.word	0x00030260

000d5248 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <LED_RGB_IsOverRidden+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	699b      	ldr	r3, [r3, #24]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	00030260 	.word	0x00030260

000d5258 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <LED_On+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	69db      	ldr	r3, [r3, #28]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030260 	.word	0x00030260

000d5268 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <panic_+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030260 	.word	0x00030260

000d5278 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <log_message+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030260 	.word	0x00030260

000d5288 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <log_message_v+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030260 	.word	0x00030260

000d5298 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <log_level_name+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030260 	.word	0x00030260

000d52a8 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <log_set_callbacks+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030260 	.word	0x00030260

000d52b8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <set_system_mode+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	685b      	ldr	r3, [r3, #4]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030220 	.word	0x00030220

000d52c8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <system_delay_ms+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	695b      	ldr	r3, [r3, #20]
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030220 	.word	0x00030220

000d52d8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b03      	ldr	r3, [pc, #12]	; (d52e8 <system_ctrl_set_app_request_handler+0x10>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d52e2:	9301      	str	r3, [sp, #4]
   d52e4:	bd08      	pop	{r3, pc}
   d52e6:	0000      	.short	0x0000
   d52e8:	00030220 	.word	0x00030220

000d52ec <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b03      	ldr	r3, [pc, #12]	; (d52fc <system_ctrl_set_result+0x10>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d52f6:	9301      	str	r3, [sp, #4]
   d52f8:	bd08      	pop	{r3, pc}
   d52fa:	0000      	.short	0x0000
   d52fc:	00030220 	.word	0x00030220

000d5300 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <network_connect+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	685b      	ldr	r3, [r3, #4]
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	00030240 	.word	0x00030240

000d5310 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <network_connecting+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	689b      	ldr	r3, [r3, #8]
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	00030240 	.word	0x00030240

000d5320 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5320:	b508      	push	{r3, lr}
   d5322:	4b02      	ldr	r3, [pc, #8]	; (d532c <network_disconnect+0xc>)
   d5324:	681b      	ldr	r3, [r3, #0]
   d5326:	68db      	ldr	r3, [r3, #12]
   d5328:	9301      	str	r3, [sp, #4]
   d532a:	bd08      	pop	{r3, pc}
   d532c:	00030240 	.word	0x00030240

000d5330 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5330:	b508      	push	{r3, lr}
   d5332:	4b02      	ldr	r3, [pc, #8]	; (d533c <network_ready+0xc>)
   d5334:	681b      	ldr	r3, [r3, #0]
   d5336:	691b      	ldr	r3, [r3, #16]
   d5338:	9301      	str	r3, [sp, #4]
   d533a:	bd08      	pop	{r3, pc}
   d533c:	00030240 	.word	0x00030240

000d5340 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5340:	b508      	push	{r3, lr}
   d5342:	4b02      	ldr	r3, [pc, #8]	; (d534c <network_on+0xc>)
   d5344:	681b      	ldr	r3, [r3, #0]
   d5346:	695b      	ldr	r3, [r3, #20]
   d5348:	9301      	str	r3, [sp, #4]
   d534a:	bd08      	pop	{r3, pc}
   d534c:	00030240 	.word	0x00030240

000d5350 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b02      	ldr	r3, [pc, #8]	; (d535c <network_off+0xc>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	699b      	ldr	r3, [r3, #24]
   d5358:	9301      	str	r3, [sp, #4]
   d535a:	bd08      	pop	{r3, pc}
   d535c:	00030240 	.word	0x00030240

000d5360 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5360:	b508      	push	{r3, lr}
   d5362:	4b02      	ldr	r3, [pc, #8]	; (d536c <network_listen+0xc>)
   d5364:	681b      	ldr	r3, [r3, #0]
   d5366:	69db      	ldr	r3, [r3, #28]
   d5368:	9301      	str	r3, [sp, #4]
   d536a:	bd08      	pop	{r3, pc}
   d536c:	00030240 	.word	0x00030240

000d5370 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5370:	b508      	push	{r3, lr}
   d5372:	4b02      	ldr	r3, [pc, #8]	; (d537c <network_listening+0xc>)
   d5374:	681b      	ldr	r3, [r3, #0]
   d5376:	6a1b      	ldr	r3, [r3, #32]
   d5378:	9301      	str	r3, [sp, #4]
   d537a:	bd08      	pop	{r3, pc}
   d537c:	00030240 	.word	0x00030240

000d5380 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5380:	b508      	push	{r3, lr}
   d5382:	4b02      	ldr	r3, [pc, #8]	; (d538c <network_set_listen_timeout+0xc>)
   d5384:	681b      	ldr	r3, [r3, #0]
   d5386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5388:	9301      	str	r3, [sp, #4]
   d538a:	bd08      	pop	{r3, pc}
   d538c:	00030240 	.word	0x00030240

000d5390 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5390:	b508      	push	{r3, lr}
   d5392:	4b02      	ldr	r3, [pc, #8]	; (d539c <network_get_listen_timeout+0xc>)
   d5394:	681b      	ldr	r3, [r3, #0]
   d5396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5398:	9301      	str	r3, [sp, #4]
   d539a:	bd08      	pop	{r3, pc}
   d539c:	00030240 	.word	0x00030240

000d53a0 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b02      	ldr	r3, [pc, #8]	; (d53ac <spark_function+0xc>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	685b      	ldr	r3, [r3, #4]
   d53a8:	9301      	str	r3, [sp, #4]
   d53aa:	bd08      	pop	{r3, pc}
   d53ac:	00030244 	.word	0x00030244

000d53b0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d53b0:	b508      	push	{r3, lr}
   d53b2:	4b02      	ldr	r3, [pc, #8]	; (d53bc <spark_set_random_seed_from_cloud_handler+0xc>)
   d53b4:	681b      	ldr	r3, [r3, #0]
   d53b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d53b8:	9301      	str	r3, [sp, #4]
   d53ba:	bd08      	pop	{r3, pc}
   d53bc:	00030244 	.word	0x00030244

000d53c0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d53c0:	b508      	push	{r3, lr}
   d53c2:	4b02      	ldr	r3, [pc, #8]	; (d53cc <malloc+0xc>)
   d53c4:	681b      	ldr	r3, [r3, #0]
   d53c6:	681b      	ldr	r3, [r3, #0]
   d53c8:	9301      	str	r3, [sp, #4]
   d53ca:	bd08      	pop	{r3, pc}
   d53cc:	0003021c 	.word	0x0003021c

000d53d0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d53d0:	b508      	push	{r3, lr}
   d53d2:	4b02      	ldr	r3, [pc, #8]	; (d53dc <free+0xc>)
   d53d4:	681b      	ldr	r3, [r3, #0]
   d53d6:	685b      	ldr	r3, [r3, #4]
   d53d8:	9301      	str	r3, [sp, #4]
   d53da:	bd08      	pop	{r3, pc}
   d53dc:	0003021c 	.word	0x0003021c

000d53e0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d53e0:	b508      	push	{r3, lr}
   d53e2:	4b02      	ldr	r3, [pc, #8]	; (d53ec <realloc+0xc>)
   d53e4:	681b      	ldr	r3, [r3, #0]
   d53e6:	689b      	ldr	r3, [r3, #8]
   d53e8:	9301      	str	r3, [sp, #4]
   d53ea:	bd08      	pop	{r3, pc}
   d53ec:	0003021c 	.word	0x0003021c

000d53f0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d53f0:	b508      	push	{r3, lr}
   d53f2:	4b02      	ldr	r3, [pc, #8]	; (d53fc <siprintf+0xc>)
   d53f4:	681b      	ldr	r3, [r3, #0]
   d53f6:	691b      	ldr	r3, [r3, #16]
   d53f8:	9301      	str	r3, [sp, #4]
   d53fa:	bd08      	pop	{r3, pc}
   d53fc:	0003021c 	.word	0x0003021c

000d5400 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5400:	b508      	push	{r3, lr}
   d5402:	4b02      	ldr	r3, [pc, #8]	; (d540c <siscanf+0xc>)
   d5404:	681b      	ldr	r3, [r3, #0]
   d5406:	699b      	ldr	r3, [r3, #24]
   d5408:	9301      	str	r3, [sp, #4]
   d540a:	bd08      	pop	{r3, pc}
   d540c:	0003021c 	.word	0x0003021c

000d5410 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5410:	b508      	push	{r3, lr}
   d5412:	4b02      	ldr	r3, [pc, #8]	; (d541c <vsnprintf+0xc>)
   d5414:	681b      	ldr	r3, [r3, #0]
   d5416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5418:	9301      	str	r3, [sp, #4]
   d541a:	bd08      	pop	{r3, pc}
   d541c:	0003021c 	.word	0x0003021c

000d5420 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5420:	b508      	push	{r3, lr}
   d5422:	4b02      	ldr	r3, [pc, #8]	; (d542c <_malloc_r+0xc>)
   d5424:	681b      	ldr	r3, [r3, #0]
   d5426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5428:	9301      	str	r3, [sp, #4]
   d542a:	bd08      	pop	{r3, pc}
   d542c:	0003021c 	.word	0x0003021c

000d5430 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5430:	2200      	movs	r2, #0
   d5432:	4611      	mov	r1, r2
   d5434:	6840      	ldr	r0, [r0, #4]
   d5436:	f7ff bf9b 	b.w	d5370 <network_listening>

000d543a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d543a:	2200      	movs	r2, #0
   d543c:	4611      	mov	r1, r2
   d543e:	6840      	ldr	r0, [r0, #4]
   d5440:	f7ff bfa6 	b.w	d5390 <network_get_listen_timeout>

000d5444 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5444:	2200      	movs	r2, #0
   d5446:	6840      	ldr	r0, [r0, #4]
   d5448:	f7ff bf9a 	b.w	d5380 <network_set_listen_timeout>

000d544c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d544c:	2200      	movs	r2, #0
   d544e:	f081 0101 	eor.w	r1, r1, #1
   d5452:	6840      	ldr	r0, [r0, #4]
   d5454:	f7ff bf84 	b.w	d5360 <network_listen>

000d5458 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d5458:	2300      	movs	r3, #0
   d545a:	461a      	mov	r2, r3
   d545c:	4619      	mov	r1, r3
   d545e:	6840      	ldr	r0, [r0, #4]
   d5460:	f7ff bf76 	b.w	d5350 <network_off>

000d5464 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5464:	2300      	movs	r3, #0
   d5466:	461a      	mov	r2, r3
   d5468:	4619      	mov	r1, r3
   d546a:	6840      	ldr	r0, [r0, #4]
   d546c:	f7ff bf68 	b.w	d5340 <network_on>

000d5470 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5470:	2200      	movs	r2, #0
   d5472:	4611      	mov	r1, r2
   d5474:	6840      	ldr	r0, [r0, #4]
   d5476:	f7ff bf5b 	b.w	d5330 <network_ready>

000d547a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d547a:	2200      	movs	r2, #0
   d547c:	4611      	mov	r1, r2
   d547e:	6840      	ldr	r0, [r0, #4]
   d5480:	f7ff bf46 	b.w	d5310 <network_connecting>

000d5484 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5484:	2200      	movs	r2, #0
   d5486:	2102      	movs	r1, #2
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	f7ff bf49 	b.w	d5320 <network_disconnect>

000d548e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d548e:	2300      	movs	r3, #0
   d5490:	461a      	mov	r2, r3
   d5492:	6840      	ldr	r0, [r0, #4]
   d5494:	f7ff bf34 	b.w	d5300 <network_connect>

000d5498 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5498:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d549a:	2203      	movs	r2, #3
   d549c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d549e:	4a02      	ldr	r2, [pc, #8]	; (d54a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54a0:	601a      	str	r2, [r3, #0]
   d54a2:	4770      	bx	lr
   d54a4:	2003e388 	.word	0x2003e388
   d54a8:	000da360 	.word	0x000da360

000d54ac <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d54ac:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d54ae:	4c09      	ldr	r4, [pc, #36]	; (d54d4 <_GLOBAL__sub_I_System+0x28>)
   d54b0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d54b2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d54b6:	6020      	str	r0, [r4, #0]
   d54b8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d54ba:	71a0      	strb	r0, [r4, #6]
   d54bc:	8120      	strh	r0, [r4, #8]
   d54be:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d54c0:	f7ff fefa 	bl	d52b8 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d54c4:	4620      	mov	r0, r4
   d54c6:	4a04      	ldr	r2, [pc, #16]	; (d54d8 <_GLOBAL__sub_I_System+0x2c>)
   d54c8:	4904      	ldr	r1, [pc, #16]	; (d54dc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d54ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d54ce:	f003 bbee 	b.w	d8cae <__aeabi_atexit>
   d54d2:	bf00      	nop
   d54d4:	2003e390 	.word	0x2003e390
   d54d8:	2003d880 	.word	0x2003d880
   d54dc:	000d41a9 	.word	0x000d41a9

000d54e0 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d54e0:	2300      	movs	r3, #0
   d54e2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d54e4:	6043      	str	r3, [r0, #4]
	len = 0;
   d54e6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d54e8:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d54ea:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d54ec:	680c      	ldr	r4, [r1, #0]
   d54ee:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d54f0:	684c      	ldr	r4, [r1, #4]
   d54f2:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d54f4:	688c      	ldr	r4, [r1, #8]
   d54f6:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d54f8:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d54fa:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d54fc:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d54fe:	bd10      	pop	{r4, pc}

000d5500 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5500:	b510      	push	{r4, lr}
   d5502:	4604      	mov	r4, r0
{
	free(buffer);
   d5504:	6800      	ldr	r0, [r0, #0]
   d5506:	f7ff ff63 	bl	d53d0 <free>
}
   d550a:	4620      	mov	r0, r4
   d550c:	bd10      	pop	{r4, pc}

000d550e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d550e:	b510      	push	{r4, lr}
   d5510:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5512:	6800      	ldr	r0, [r0, #0]
   d5514:	b108      	cbz	r0, d551a <_ZN6String10invalidateEv+0xc>
   d5516:	f7ff ff5b 	bl	d53d0 <free>
	buffer = NULL;
   d551a:	2300      	movs	r3, #0
   d551c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d551e:	60a3      	str	r3, [r4, #8]
   d5520:	6063      	str	r3, [r4, #4]
   d5522:	bd10      	pop	{r4, pc}

000d5524 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5524:	b538      	push	{r3, r4, r5, lr}
   d5526:	4604      	mov	r4, r0
   d5528:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d552a:	6800      	ldr	r0, [r0, #0]
   d552c:	3101      	adds	r1, #1
   d552e:	f7ff ff57 	bl	d53e0 <realloc>
	if (newbuffer) {
   d5532:	b110      	cbz	r0, d553a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5534:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5538:	2001      	movs	r0, #1
	}
	return 0;
}
   d553a:	bd38      	pop	{r3, r4, r5, pc}

000d553c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d553c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d553e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5540:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5542:	b113      	cbz	r3, d554a <_ZN6String7reserveEj+0xe>
   d5544:	6843      	ldr	r3, [r0, #4]
   d5546:	428b      	cmp	r3, r1
   d5548:	d207      	bcs.n	d555a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d554a:	4620      	mov	r0, r4
   d554c:	f7ff ffea 	bl	d5524 <_ZN6String12changeBufferEj>
   d5550:	b120      	cbz	r0, d555c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5552:	68a3      	ldr	r3, [r4, #8]
   d5554:	b90b      	cbnz	r3, d555a <_ZN6String7reserveEj+0x1e>
   d5556:	6822      	ldr	r2, [r4, #0]
   d5558:	7013      	strb	r3, [r2, #0]
   d555a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d555c:	bd10      	pop	{r4, pc}

000d555e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d555e:	b570      	push	{r4, r5, r6, lr}
   d5560:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5562:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5564:	4604      	mov	r4, r0
   d5566:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5568:	f7ff ffe8 	bl	d553c <_ZN6String7reserveEj>
   d556c:	b918      	cbnz	r0, d5576 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d556e:	4620      	mov	r0, r4
   d5570:	f7ff ffcd 	bl	d550e <_ZN6String10invalidateEv>
		return *this;
   d5574:	e009      	b.n	d558a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5576:	462a      	mov	r2, r5
   d5578:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d557a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d557c:	6820      	ldr	r0, [r4, #0]
   d557e:	f003 fe52 	bl	d9226 <memcpy>
	buffer[len] = 0;
   d5582:	6822      	ldr	r2, [r4, #0]
   d5584:	68a3      	ldr	r3, [r4, #8]
   d5586:	2100      	movs	r1, #0
   d5588:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d558a:	4620      	mov	r0, r4
   d558c:	bd70      	pop	{r4, r5, r6, pc}

000d558e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d558e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5590:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5592:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5594:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5596:	6043      	str	r3, [r0, #4]
	len = 0;
   d5598:	6083      	str	r3, [r0, #8]
	flags = 0;
   d559a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d559c:	460d      	mov	r5, r1
   d559e:	b139      	cbz	r1, d55b0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d55a0:	4608      	mov	r0, r1
   d55a2:	f003 fec1 	bl	d9328 <strlen>
   d55a6:	4629      	mov	r1, r5
   d55a8:	4602      	mov	r2, r0
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff ffd7 	bl	d555e <_ZN6String4copyEPKcj>
}
   d55b0:	4620      	mov	r0, r4
   d55b2:	bd38      	pop	{r3, r4, r5, pc}

000d55b4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d55b4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d55b6:	b510      	push	{r4, lr}
   d55b8:	460b      	mov	r3, r1
   d55ba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d55bc:	d007      	beq.n	d55ce <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d55be:	6809      	ldr	r1, [r1, #0]
   d55c0:	b119      	cbz	r1, d55ca <_ZN6StringaSERKS_+0x16>
   d55c2:	689a      	ldr	r2, [r3, #8]
   d55c4:	f7ff ffcb 	bl	d555e <_ZN6String4copyEPKcj>
   d55c8:	e001      	b.n	d55ce <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d55ca:	f7ff ffa0 	bl	d550e <_ZN6String10invalidateEv>

	return *this;
}
   d55ce:	4620      	mov	r0, r4
   d55d0:	bd10      	pop	{r4, pc}

000d55d2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d55d2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55d4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d55d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d55d8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d55da:	6043      	str	r3, [r0, #4]
	len = 0;
   d55dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d55de:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d55e0:	f7ff ffe8 	bl	d55b4 <_ZN6StringaSERKS_>
}
   d55e4:	4620      	mov	r0, r4
   d55e6:	bd10      	pop	{r4, pc}

000d55e8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d55e8:	b538      	push	{r3, r4, r5, lr}
   d55ea:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d55ec:	460c      	mov	r4, r1
   d55ee:	b141      	cbz	r1, d5602 <_ZN6StringaSEPKc+0x1a>
   d55f0:	4608      	mov	r0, r1
   d55f2:	f003 fe99 	bl	d9328 <strlen>
   d55f6:	4621      	mov	r1, r4
   d55f8:	4602      	mov	r2, r0
   d55fa:	4628      	mov	r0, r5
   d55fc:	f7ff ffaf 	bl	d555e <_ZN6String4copyEPKcj>
   d5600:	e001      	b.n	d5606 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5602:	f7ff ff84 	bl	d550e <_ZN6String10invalidateEv>

	return *this;
}
   d5606:	4628      	mov	r0, r5
   d5608:	bd38      	pop	{r3, r4, r5, pc}

000d560a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d560a:	b570      	push	{r4, r5, r6, lr}
   d560c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d560e:	460e      	mov	r6, r1
   d5610:	b909      	cbnz	r1, d5616 <_ZN6String6concatEPKcj+0xc>
   d5612:	2000      	movs	r0, #0
   d5614:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5616:	b16a      	cbz	r2, d5634 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5618:	6883      	ldr	r3, [r0, #8]
   d561a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d561c:	4629      	mov	r1, r5
   d561e:	f7ff ff8d 	bl	d553c <_ZN6String7reserveEj>
   d5622:	2800      	cmp	r0, #0
   d5624:	d0f5      	beq.n	d5612 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5626:	6820      	ldr	r0, [r4, #0]
   d5628:	68a3      	ldr	r3, [r4, #8]
   d562a:	4631      	mov	r1, r6
   d562c:	4418      	add	r0, r3
   d562e:	f003 fe73 	bl	d9318 <strcpy>
	len = newlen;
   d5632:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5634:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5636:	bd70      	pop	{r4, r5, r6, pc}

000d5638 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5638:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d563a:	688a      	ldr	r2, [r1, #8]
   d563c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d563e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5640:	f7ff ffe3 	bl	d560a <_ZN6String6concatEPKcj>
   d5644:	b910      	cbnz	r0, d564c <_ZplRK15StringSumHelperRK6String+0x14>
   d5646:	4620      	mov	r0, r4
   d5648:	f7ff ff61 	bl	d550e <_ZN6String10invalidateEv>
	return a;
}
   d564c:	4620      	mov	r0, r4
   d564e:	bd10      	pop	{r4, pc}

000d5650 <_ZNK6String16equalsIgnoreCaseERKS_>:
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d5650:	4288      	cmp	r0, r1
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
   d5652:	b570      	push	{r4, r5, r6, lr}
	if (this == &s2) return 1;
   d5654:	d015      	beq.n	d5682 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
	if (len != s2.len) return 0;
   d5656:	6883      	ldr	r3, [r0, #8]
   d5658:	688a      	ldr	r2, [r1, #8]
   d565a:	4293      	cmp	r3, r2
   d565c:	d10f      	bne.n	d567e <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
	if (len == 0) return 1;
   d565e:	b183      	cbz	r3, d5682 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
   d5660:	6804      	ldr	r4, [r0, #0]
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
   d5662:	680d      	ldr	r5, [r1, #0]
   d5664:	3c01      	subs	r4, #1
	while (*p1) {
   d5666:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   d566a:	b150      	cbz	r0, d5682 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
   d566c:	f003 ffca 	bl	d9604 <tolower>
   d5670:	4606      	mov	r6, r0
   d5672:	f815 0b01 	ldrb.w	r0, [r5], #1
   d5676:	f003 ffc5 	bl	d9604 <tolower>
   d567a:	4286      	cmp	r6, r0
   d567c:	d0f3      	beq.n	d5666 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
   d567e:	2000      	movs	r0, #0
   d5680:	bd70      	pop	{r4, r5, r6, pc}
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d5682:	2001      	movs	r0, #1
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	}
	return 1;
}
   d5684:	bd70      	pop	{r4, r5, r6, pc}

000d5686 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d5686:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d5688:	6883      	ldr	r3, [r0, #8]
   d568a:	4293      	cmp	r3, r2
   d568c:	d907      	bls.n	d569e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d568e:	6804      	ldr	r4, [r0, #0]
   d5690:	6809      	ldr	r1, [r1, #0]
   d5692:	18a0      	adds	r0, r4, r2
   d5694:	f003 fe84 	bl	d93a0 <strstr>
	if (found == NULL) return -1;
   d5698:	b108      	cbz	r0, d569e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d569a:	1b00      	subs	r0, r0, r4
   d569c:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d569e:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d56a2:	bd10      	pop	{r4, pc}

000d56a4 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d56a4:	2200      	movs	r2, #0
   d56a6:	f7ff bfee 	b.w	d5686 <_ZNK6String7indexOfERKS_j>
	...

000d56ac <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d56ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d56ae:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d56b0:	460f      	mov	r7, r1
   d56b2:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d56b4:	490c      	ldr	r1, [pc, #48]	; (d56e8 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d56b6:	bf88      	it	hi
   d56b8:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d56ba:	4614      	mov	r4, r2
   d56bc:	4606      	mov	r6, r0
	if (left > right) {
   d56be:	bf84      	itt	hi
   d56c0:	462c      	movhi	r4, r5
   d56c2:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d56c4:	f7ff ff63 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d56c8:	68ba      	ldr	r2, [r7, #8]
   d56ca:	4294      	cmp	r4, r2
   d56cc:	d80a      	bhi.n	d56e4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d56ce:	6839      	ldr	r1, [r7, #0]
   d56d0:	4295      	cmp	r5, r2
   d56d2:	bf94      	ite	ls
   d56d4:	ebc4 0205 	rsbls	r2, r4, r5
   d56d8:	ebc4 0202 	rsbhi	r2, r4, r2
   d56dc:	4421      	add	r1, r4
   d56de:	4630      	mov	r0, r6
   d56e0:	f7ff ff3d 	bl	d555e <_ZN6String4copyEPKcj>
	return out;
}
   d56e4:	4630      	mov	r0, r6
   d56e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d56e8:	000da664 	.word	0x000da664

000d56ec <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d56ec:	b538      	push	{r3, r4, r5, lr}
   d56ee:	4604      	mov	r4, r0
   d56f0:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d56f2:	68a3      	ldr	r3, [r4, #8]
   d56f4:	428b      	cmp	r3, r1
   d56f6:	d911      	bls.n	d571c <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d56f8:	b182      	cbz	r2, d571c <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d56fa:	4411      	add	r1, r2
   d56fc:	428b      	cmp	r3, r1
   d56fe:	bf38      	it	cc
   d5700:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d5702:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d5704:	1a9b      	subs	r3, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d5706:	1811      	adds	r1, r2, r0
String& String::remove(unsigned int index, unsigned int count){
	if (index >= len) { return *this; }
	if (count <= 0) { return *this; }
	if (index + count > len) { count = len - index; }
	char *writeTo = buffer + index;
	len = len - count;
   d5708:	60a3      	str	r3, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d570a:	1a1a      	subs	r2, r3, r0
   d570c:	4429      	add	r1, r5
   d570e:	4428      	add	r0, r5
   d5710:	f003 fd94 	bl	d923c <memmove>
	buffer[len] = 0;
   d5714:	6822      	ldr	r2, [r4, #0]
   d5716:	68a3      	ldr	r3, [r4, #8]
   d5718:	2100      	movs	r1, #0
   d571a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d571c:	4620      	mov	r0, r4
   d571e:	bd38      	pop	{r3, r4, r5, pc}

000d5720 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5720:	6800      	ldr	r0, [r0, #0]
   d5722:	b108      	cbz	r0, d5728 <_ZNK6String5toIntEv+0x8>
   d5724:	f003 bc66 	b.w	d8ff4 <atol>
	return 0;
}
   d5728:	4770      	bx	lr

000d572a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d572a:	4770      	bx	lr

000d572c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d572c:	2000      	movs	r0, #0
   d572e:	4770      	bx	lr

000d5730 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5730:	4770      	bx	lr

000d5732 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5732:	2000      	movs	r0, #0
   d5734:	4770      	bx	lr

000d5736 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5736:	4770      	bx	lr

000d5738 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5738:	2000      	movs	r0, #0
   d573a:	4770      	bx	lr

000d573c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d573c:	b510      	push	{r4, lr}
   d573e:	2114      	movs	r1, #20
   d5740:	4604      	mov	r4, r0
   d5742:	f003 fac1 	bl	d8cc8 <_ZdlPvj>
   d5746:	4620      	mov	r0, r4
   d5748:	bd10      	pop	{r4, pc}

000d574a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d574a:	b510      	push	{r4, lr}
   d574c:	2114      	movs	r1, #20
   d574e:	4604      	mov	r4, r0
   d5750:	f003 faba 	bl	d8cc8 <_ZdlPvj>
   d5754:	4620      	mov	r0, r4
   d5756:	bd10      	pop	{r4, pc}

000d5758 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5758:	b510      	push	{r4, lr}
   d575a:	2114      	movs	r1, #20
   d575c:	4604      	mov	r4, r0
   d575e:	f003 fab3 	bl	d8cc8 <_ZdlPvj>
   d5762:	4620      	mov	r0, r4
   d5764:	bd10      	pop	{r4, pc}

000d5766 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5766:	f7fe bc98 	b.w	d409a <_ZdlPv>

000d576a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d576a:	f7fe bc96 	b.w	d409a <_ZdlPv>

000d576e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d576e:	f7fe bc94 	b.w	d409a <_ZdlPv>

000d5772 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5772:	b510      	push	{r4, lr}
   d5774:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5776:	6800      	ldr	r0, [r0, #0]
   d5778:	b108      	cbz	r0, d577e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d577a:	f7ff fc9d 	bl	d50b8 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d577e:	4620      	mov	r0, r4
   d5780:	bd10      	pop	{r4, pc}
	...

000d5784 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d5784:	b530      	push	{r4, r5, lr}
   d5786:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d5788:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d578a:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d578c:	2400      	movs	r4, #0
   d578e:	9302      	str	r3, [sp, #8]
   d5790:	4b08      	ldr	r3, [pc, #32]	; (d57b4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d5792:	9300      	str	r3, [sp, #0]
   d5794:	aa02      	add	r2, sp, #8
   d5796:	4623      	mov	r3, r4
   d5798:	4907      	ldr	r1, [pc, #28]	; (d57b8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d579a:	9403      	str	r4, [sp, #12]
   d579c:	2001      	movs	r0, #1
   d579e:	f7ff fd6b 	bl	d5278 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d57a2:	6828      	ldr	r0, [r5, #0]
   d57a4:	4905      	ldr	r1, [pc, #20]	; (d57bc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d57a6:	8800      	ldrh	r0, [r0, #0]
   d57a8:	4623      	mov	r3, r4
   d57aa:	462a      	mov	r2, r5
   d57ac:	f7ff fc00 	bl	d4fb0 <hal_ble_gatt_client_discover_all_services>
    }
   d57b0:	b00b      	add	sp, #44	; 0x2c
   d57b2:	bd30      	pop	{r4, r5, pc}
   d57b4:	000da3eb 	.word	0x000da3eb
   d57b8:	000da3e0 	.word	0x000da3e0
   d57bc:	000d6ef1 	.word	0x000d6ef1

000d57c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d57c0:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d57c2:	200a      	movs	r0, #10
   d57c4:	4a02      	ldr	r2, [pc, #8]	; (d57d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d57c6:	2100      	movs	r1, #0
   d57c8:	f7ff fd4e 	bl	d5268 <panic_>
    }
}
   d57cc:	bd08      	pop	{r3, pc}
   d57ce:	bf00      	nop
   d57d0:	000d4f25 	.word	0x000d4f25

000d57d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57d4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d57d6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57d8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d57da:	689b      	ldr	r3, [r3, #8]
   d57dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d57de:	68a3      	ldr	r3, [r4, #8]
   d57e0:	3b01      	subs	r3, #1
   d57e2:	60a3      	str	r3, [r4, #8]
   d57e4:	b92b      	cbnz	r3, d57f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d57e6:	6823      	ldr	r3, [r4, #0]
   d57e8:	4620      	mov	r0, r4
   d57ea:	68db      	ldr	r3, [r3, #12]
        }
    }
   d57ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d57f0:	4718      	bx	r3
   d57f2:	bd10      	pop	{r4, pc}

000d57f4 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d57f4:	b570      	push	{r4, r5, r6, lr}
   d57f6:	1c93      	adds	r3, r2, #2
   d57f8:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d57fa:	4288      	cmp	r0, r1
   d57fc:	d018      	beq.n	d5830 <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d57fe:	7804      	ldrb	r4, [r0, #0]
   d5800:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d5802:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d5806:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5808:	bf88      	it	hi
   d580a:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d580e:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d5810:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d5814:	7834      	ldrb	r4, [r6, #0]
   d5816:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d581a:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d581e:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5820:	bf88      	it	hi
   d5822:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d5826:	f803 5c01 	strb.w	r5, [r3, #-1]
   d582a:	3001      	adds	r0, #1
   d582c:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d582e:	e7e4      	b.n	d57fa <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d5830:	4610      	mov	r0, r2
   d5832:	bd70      	pop	{r4, r5, r6, pc}

000d5834 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5834:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5838:	b2da      	uxtb	r2, r3
   d583a:	2a09      	cmp	r2, #9
   d583c:	d801      	bhi.n	d5842 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d583e:	4618      	mov	r0, r3
   d5840:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5842:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5846:	2b05      	cmp	r3, #5
   d5848:	d801      	bhi.n	d584e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d584a:	3857      	subs	r0, #87	; 0x57
   d584c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d584e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5852:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5854:	bf94      	ite	ls
   d5856:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5858:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d585c:	4770      	bx	lr
	...

000d5860 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5860:	b510      	push	{r4, lr}
            locked_(false) {
   d5862:	2300      	movs	r3, #0
   d5864:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5866:	4b04      	ldr	r3, [pc, #16]	; (d5878 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5868:	4604      	mov	r4, r0
   d586a:	6818      	ldr	r0, [r3, #0]
   d586c:	f7ff fc2c 	bl	d50c8 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5870:	2301      	movs	r3, #1
   d5872:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5874:	4620      	mov	r0, r4
   d5876:	bd10      	pop	{r4, pc}
   d5878:	2003e3a4 	.word	0x2003e3a4

000d587c <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d587c:	b510      	push	{r4, lr}
        if (locked_) {
   d587e:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5880:	4604      	mov	r4, r0
        if (locked_) {
   d5882:	b11b      	cbz	r3, d588c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5884:	4b02      	ldr	r3, [pc, #8]	; (d5890 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5886:	6818      	ldr	r0, [r3, #0]
   d5888:	f7ff fc26 	bl	d50d8 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d588c:	4620      	mov	r0, r4
   d588e:	bd10      	pop	{r4, pc}
   d5890:	2003e3a4 	.word	0x2003e3a4

000d5894 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5894:	2200      	movs	r2, #0
   d5896:	6002      	str	r2, [r0, #0]
   d5898:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d589a:	4770      	bx	lr

000d589c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d589c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d589e:	7982      	ldrb	r2, [r0, #6]
   d58a0:	798b      	ldrb	r3, [r1, #6]
   d58a2:	429a      	cmp	r2, r3
   d58a4:	d106      	bne.n	d58b4 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d58a6:	2206      	movs	r2, #6
   d58a8:	f003 fcae 	bl	d9208 <memcmp>
   d58ac:	fab0 f080 	clz	r0, r0
   d58b0:	0940      	lsrs	r0, r0, #5
   d58b2:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d58b4:	2000      	movs	r0, #0
}
   d58b6:	bd08      	pop	{r3, pc}

000d58b8 <_ZNK8particle10BleAddress11toBigEndianEPh>:

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d58b8:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d58ba:	2305      	movs	r3, #5
        buf[i] = address_.addr[j];
   d58bc:	5cc2      	ldrb	r2, [r0, r3]
   d58be:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    return false;
}

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d58c2:	3b01      	subs	r3, #1
   d58c4:	b2db      	uxtb	r3, r3
   d58c6:	2bff      	cmp	r3, #255	; 0xff
   d58c8:	d1f8      	bne.n	d58bc <_ZNK8particle10BleAddress11toBigEndianEPh+0x4>
        buf[i] = address_.addr[j];
    }
}
   d58ca:	4770      	bx	lr

000d58cc <_ZNK8particle10BleAddress8toStringEPcjb>:
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d58cc:	b570      	push	{r4, r5, r6, lr}
   d58ce:	4614      	mov	r4, r2
   d58d0:	b088      	sub	sp, #32
   d58d2:	461d      	mov	r5, r3
    if (!buf || len == 0) {
   d58d4:	460e      	mov	r6, r1
   d58d6:	2900      	cmp	r1, #0
   d58d8:	d046      	beq.n	d5968 <_ZNK8particle10BleAddress8toStringEPcjb+0x9c>
   d58da:	2a00      	cmp	r2, #0
   d58dc:	d046      	beq.n	d596c <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
   d58de:	a901      	add	r1, sp, #4
   d58e0:	f7ff ffea 	bl	d58b8 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d58e4:	aa03      	add	r2, sp, #12
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
    if (stripped) {
   d58e6:	b115      	cbz	r5, d58ee <_ZNK8particle10BleAddress8toStringEPcjb+0x22>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d58e8:	2106      	movs	r1, #6
   d58ea:	a801      	add	r0, sp, #4
   d58ec:	e02d      	b.n	d594a <_ZNK8particle10BleAddress8toStringEPcjb+0x7e>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d58ee:	2101      	movs	r1, #1
   d58f0:	a801      	add	r0, sp, #4
   d58f2:	f7ff ff7f 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2] = ':';
   d58f6:	253a      	movs	r5, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d58f8:	f10d 020f 	add.w	r2, sp, #15
   d58fc:	2101      	movs	r1, #1
   d58fe:	f10d 0005 	add.w	r0, sp, #5
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
   d5902:	f88d 500e 	strb.w	r5, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d5906:	f7ff ff75 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d590a:	f10d 0212 	add.w	r2, sp, #18
   d590e:	2101      	movs	r1, #1
   d5910:	f10d 0006 	add.w	r0, sp, #6
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
   d5914:	f88d 5011 	strb.w	r5, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d5918:	f7ff ff6c 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d591c:	f10d 0215 	add.w	r2, sp, #21
   d5920:	2101      	movs	r1, #1
   d5922:	f10d 0007 	add.w	r0, sp, #7
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
   d5926:	f88d 5014 	strb.w	r5, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d592a:	f7ff ff63 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 3] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d592e:	aa06      	add	r2, sp, #24
   d5930:	2101      	movs	r1, #1
   d5932:	a802      	add	r0, sp, #8
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
        idx++;
        cStr[idx * 2 + 3] = ':';
   d5934:	f88d 5017 	strb.w	r5, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d5938:	f7ff ff5c 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 4] = ':';
   d593c:	f88d 501a 	strb.w	r5, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d5940:	f10d 021b 	add.w	r2, sp, #27
   d5944:	2101      	movs	r1, #1
   d5946:	f10d 0009 	add.w	r0, sp, #9
   d594a:	3c01      	subs	r4, #1
   d594c:	f7ff ff52 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
   d5950:	2c11      	cmp	r4, #17
   d5952:	bf28      	it	cs
   d5954:	2411      	movcs	r4, #17
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d5956:	4622      	mov	r2, r4
   d5958:	a903      	add	r1, sp, #12
   d595a:	4630      	mov	r0, r6
   d595c:	f003 fc63 	bl	d9226 <memcpy>
    buf[len++] = '\0';
   d5960:	2300      	movs	r3, #0
   d5962:	5533      	strb	r3, [r6, r4]
   d5964:	1c60      	adds	r0, r4, #1
   d5966:	e002      	b.n	d596e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d5968:	4608      	mov	r0, r1
   d596a:	e000      	b.n	d596e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
   d596c:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d596e:	b008      	add	sp, #32
   d5970:	bd70      	pop	{r4, r5, r6, pc}

000d5972 <_ZNK8particle10BleAddress8toStringEb>:

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d5972:	b510      	push	{r4, lr}
   d5974:	b086      	sub	sp, #24
   d5976:	4604      	mov	r4, r0
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d5978:	4613      	mov	r3, r2

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d597a:	4608      	mov	r0, r1
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d597c:	2212      	movs	r2, #18
   d597e:	a901      	add	r1, sp, #4
   d5980:	f7ff ffa4 	bl	d58cc <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d5984:	a901      	add	r1, sp, #4
   d5986:	4620      	mov	r0, r4
   d5988:	f7ff fe01 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d598c:	4620      	mov	r0, r4
   d598e:	b006      	add	sp, #24
   d5990:	bd10      	pop	{r4, pc}
	...

000d5994 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5994:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d5996:	2301      	movs	r3, #1
   d5998:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d599a:	4b05      	ldr	r3, [pc, #20]	; (d59b0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d599c:	4602      	mov	r2, r0
   d599e:	f103 0110 	add.w	r1, r3, #16
   d59a2:	f853 4b04 	ldr.w	r4, [r3], #4
   d59a6:	f842 4b04 	str.w	r4, [r2], #4
   d59aa:	428b      	cmp	r3, r1
   d59ac:	d1f9      	bne.n	d59a2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d59ae:	bd10      	pop	{r4, pc}
   d59b0:	000da580 	.word	0x000da580

000d59b4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d59b4:	7c0b      	ldrb	r3, [r1, #16]
   d59b6:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d59ba:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d59bc:	d110      	bne.n	d59e0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d59be:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d59c0:	4b0d      	ldr	r3, [pc, #52]	; (d59f8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d59c2:	4602      	mov	r2, r0
   d59c4:	f103 0410 	add.w	r4, r3, #16
   d59c8:	f853 5b04 	ldr.w	r5, [r3], #4
   d59cc:	f842 5b04 	str.w	r5, [r2], #4
   d59d0:	42a3      	cmp	r3, r4
   d59d2:	d1f9      	bne.n	d59c8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d59d4:	880b      	ldrh	r3, [r1, #0]
   d59d6:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d59d8:	880b      	ldrh	r3, [r1, #0]
   d59da:	121b      	asrs	r3, r3, #8
   d59dc:	7343      	strb	r3, [r0, #13]
   d59de:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d59e0:	2301      	movs	r3, #1
   d59e2:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d59e4:	f101 0210 	add.w	r2, r1, #16
   d59e8:	4603      	mov	r3, r0
   d59ea:	f851 4b04 	ldr.w	r4, [r1], #4
   d59ee:	f843 4b04 	str.w	r4, [r3], #4
   d59f2:	4291      	cmp	r1, r2
   d59f4:	d1f9      	bne.n	d59ea <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d59f6:	bd30      	pop	{r4, r5, pc}
   d59f8:	000da580 	.word	0x000da580

000d59fc <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d59fc:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d59fe:	690b      	ldr	r3, [r1, #16]
   d5a00:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5a02:	f101 0210 	add.w	r2, r1, #16
   d5a06:	4603      	mov	r3, r0
   d5a08:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a0c:	f843 4b04 	str.w	r4, [r3], #4
   d5a10:	4291      	cmp	r1, r2
   d5a12:	d1f9      	bne.n	d5a08 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5a14:	bd10      	pop	{r4, pc}

000d5a16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5a16:	b510      	push	{r4, lr}
    if (uuid128) {
   d5a18:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5a1a:	4604      	mov	r4, r0
    if (uuid128) {
   d5a1c:	b1b9      	cbz	r1, d5a4e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d5a1e:	2a01      	cmp	r2, #1
   d5a20:	d109      	bne.n	d5a36 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5a22:	4603      	mov	r3, r0
   d5a24:	f101 0210 	add.w	r2, r1, #16
   d5a28:	f851 0b04 	ldr.w	r0, [r1], #4
   d5a2c:	f843 0b04 	str.w	r0, [r3], #4
   d5a30:	4291      	cmp	r1, r2
   d5a32:	d1f9      	bne.n	d5a28 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d5a34:	e008      	b.n	d5a48 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d5a36:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d5a38:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d5a3a:	5c98      	ldrb	r0, [r3, r2]
   d5a3c:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5a40:	3a01      	subs	r2, #1
   d5a42:	b2d2      	uxtb	r2, r2
   d5a44:	2aff      	cmp	r2, #255	; 0xff
   d5a46:	d1f8      	bne.n	d5a3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d5a48:	2301      	movs	r3, #1
   d5a4a:	6123      	str	r3, [r4, #16]
   d5a4c:	e002      	b.n	d5a54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5a4e:	2210      	movs	r2, #16
   d5a50:	f003 fc0f 	bl	d9272 <memset>
    }
}
   d5a54:	4620      	mov	r0, r4
   d5a56:	bd10      	pop	{r4, pc}

000d5a58 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d5a58:	b538      	push	{r3, r4, r5, lr}
   d5a5a:	4604      	mov	r4, r0
   d5a5c:	460d      	mov	r5, r1
        : BleUuid() {
   d5a5e:	f7ff ff99 	bl	d5994 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d5a62:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5a64:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5a66:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d5a68:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5a6a:	7365      	strb	r5, [r4, #13]
}
   d5a6c:	4620      	mov	r0, r4
   d5a6e:	bd38      	pop	{r3, r4, r5, pc}

000d5a70 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5a70:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d5a72:	690b      	ldr	r3, [r1, #16]
   d5a74:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5a76:	f101 0210 	add.w	r2, r1, #16
   d5a7a:	4603      	mov	r3, r0
   d5a7c:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a80:	f843 4b04 	str.w	r4, [r3], #4
   d5a84:	4291      	cmp	r1, r2
   d5a86:	d1f9      	bne.n	d5a7c <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d5a88:	bd10      	pop	{r4, pc}

000d5a8a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5a8a:	b510      	push	{r4, lr}
   d5a8c:	b086      	sub	sp, #24
   d5a8e:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d5a90:	2201      	movs	r2, #1
   d5a92:	a801      	add	r0, sp, #4
   d5a94:	f7ff ffbf 	bl	d5a16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5a98:	a901      	add	r1, sp, #4
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	f7ff ffe8 	bl	d5a70 <_ZN8particle7BleUuidaSERKS0_>
}
   d5aa0:	b006      	add	sp, #24
   d5aa2:	bd10      	pop	{r4, pc}

000d5aa4 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d5aa4:	b510      	push	{r4, lr}
   d5aa6:	b086      	sub	sp, #24
   d5aa8:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d5aaa:	a801      	add	r0, sp, #4
   d5aac:	f7ff ffd4 	bl	d5a58 <_ZN8particle7BleUuidC1Et>
   d5ab0:	a901      	add	r1, sp, #4
   d5ab2:	4620      	mov	r0, r4
   d5ab4:	f7ff ffdc 	bl	d5a70 <_ZN8particle7BleUuidaSERKS0_>
}
   d5ab8:	b006      	add	sp, #24
   d5aba:	bd10      	pop	{r4, pc}

000d5abc <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d5abc:	b510      	push	{r4, lr}
   d5abe:	b086      	sub	sp, #24
   d5ac0:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d5ac2:	a801      	add	r0, sp, #4
   d5ac4:	f7ff ff76 	bl	d59b4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d5ac8:	a901      	add	r1, sp, #4
   d5aca:	4620      	mov	r0, r4
   d5acc:	f7ff ffd0 	bl	d5a70 <_ZN8particle7BleUuidaSERKS0_>
}
   d5ad0:	b006      	add	sp, #24
   d5ad2:	bd10      	pop	{r4, pc}

000d5ad4 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5ad4:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5ad6:	6902      	ldr	r2, [r0, #16]
   d5ad8:	690b      	ldr	r3, [r1, #16]
   d5ada:	429a      	cmp	r2, r3
   d5adc:	d106      	bne.n	d5aec <_ZNK8particle7BleUuideqERKS0_+0x18>
   d5ade:	2210      	movs	r2, #16
   d5ae0:	f003 fb92 	bl	d9208 <memcmp>
   d5ae4:	fab0 f080 	clz	r0, r0
   d5ae8:	0940      	lsrs	r0, r0, #5
   d5aea:	bd08      	pop	{r3, pc}
   d5aec:	2000      	movs	r0, #0
}
   d5aee:	bd08      	pop	{r3, pc}

000d5af0 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d5af0:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5af2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d5af4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5af6:	4b31      	ldr	r3, [pc, #196]	; (d5bbc <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5af8:	460e      	mov	r6, r1
   d5afa:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5afc:	4602      	mov	r2, r0
   d5afe:	f103 0110 	add.w	r1, r3, #16
   d5b02:	f853 0b04 	ldr.w	r0, [r3], #4
   d5b06:	f842 0b04 	str.w	r0, [r2], #4
   d5b0a:	428b      	cmp	r3, r1
   d5b0c:	d1f9      	bne.n	d5b02 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d5b0e:	2e00      	cmp	r6, #0
   d5b10:	d051      	beq.n	d5bb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5b12:	2124      	movs	r1, #36	; 0x24
   d5b14:	4630      	mov	r0, r6
   d5b16:	f003 fc24 	bl	d9362 <strnlen>
   d5b1a:	2804      	cmp	r0, #4
   d5b1c:	d010      	beq.n	d5b40 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d5b1e:	2700      	movs	r7, #0
   d5b20:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5b22:	2124      	movs	r1, #36	; 0x24
   d5b24:	4630      	mov	r0, r6
   d5b26:	f003 fc1c 	bl	d9362 <strnlen>
   d5b2a:	42b8      	cmp	r0, r7
   d5b2c:	d901      	bls.n	d5b32 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d5b2e:	bb44      	cbnz	r4, d5b82 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d5b30:	e041      	b.n	d5bb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d5b32:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d5b34:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5b36:	42a5      	cmp	r5, r4
   d5b38:	d03d      	beq.n	d5bb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d5b3a:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d5b3e:	e7fa      	b.n	d5b36 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5b40:	7830      	ldrb	r0, [r6, #0]
   d5b42:	f7ff fe77 	bl	d5834 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5b46:	1e04      	subs	r4, r0, #0
   d5b48:	db18      	blt.n	d5b7c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5b4a:	7870      	ldrb	r0, [r6, #1]
   d5b4c:	f7ff fe72 	bl	d5834 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5b50:	2800      	cmp	r0, #0
   d5b52:	db13      	blt.n	d5b7c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5b54:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5b58:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5b5c:	78b0      	ldrb	r0, [r6, #2]
   d5b5e:	f7ff fe69 	bl	d5834 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5b62:	1e04      	subs	r4, r0, #0
   d5b64:	db0a      	blt.n	d5b7c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5b66:	78f0      	ldrb	r0, [r6, #3]
   d5b68:	f7ff fe64 	bl	d5834 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5b6c:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5b6e:	bfa1      	itttt	ge
   d5b70:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d5b74:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d5b78:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d5b7a:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d5b7c:	2300      	movs	r3, #0
   d5b7e:	612b      	str	r3, [r5, #16]
   d5b80:	e019      	b.n	d5bb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d5b82:	5df0      	ldrb	r0, [r6, r7]
   d5b84:	f7ff fe56 	bl	d5834 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5b88:	0603      	lsls	r3, r0, #24
   d5b8a:	d412      	bmi.n	d5bb2 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d5b8c:	3c01      	subs	r4, #1
   d5b8e:	0100      	lsls	r0, r0, #4
   d5b90:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5b92:	2124      	movs	r1, #36	; 0x24
   d5b94:	4630      	mov	r0, r6
   d5b96:	f003 fbe4 	bl	d9362 <strnlen>
   d5b9a:	3701      	adds	r7, #1
   d5b9c:	4287      	cmp	r7, r0
   d5b9e:	d208      	bcs.n	d5bb2 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d5ba0:	5df0      	ldrb	r0, [r6, r7]
   d5ba2:	f7ff fe47 	bl	d5834 <_ZN8particle11hexToNibbleEc>
   d5ba6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5ba8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5baa:	bfa2      	ittt	ge
   d5bac:	5d2b      	ldrbge	r3, [r5, r4]
   d5bae:	4318      	orrge	r0, r3
   d5bb0:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5bb2:	3701      	adds	r7, #1
   d5bb4:	e7b5      	b.n	d5b22 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d5bb6:	b003      	add	sp, #12
   d5bb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5bba:	bf00      	nop
   d5bbc:	000da580 	.word	0x000da580

000d5bc0 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d5bc0:	b538      	push	{r3, r4, r5, lr}
   d5bc2:	4604      	mov	r4, r0
   d5bc4:	460d      	mov	r5, r1
        : BleUuid() {
   d5bc6:	f7ff fee5 	bl	d5994 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5bca:	4620      	mov	r0, r4
   d5bcc:	4629      	mov	r1, r5
   d5bce:	f7ff ff8f 	bl	d5af0 <_ZN8particle7BleUuid9constructEPKc>
}
   d5bd2:	4620      	mov	r0, r4
   d5bd4:	bd38      	pop	{r3, r4, r5, pc}

000d5bd6 <_ZNK8particle7BleUuid11toBigEndianEPh>:
        uuid128_[len - 1] = 0x00;
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d5bd6:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5bd8:	230f      	movs	r3, #15
        buf[i] = uuid128_[j];
   d5bda:	5cc2      	ldrb	r2, [r0, r3]
   d5bdc:	f801 2f01 	strb.w	r2, [r1, #1]!
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5be0:	3b01      	subs	r3, #1
   d5be2:	b2db      	uxtb	r3, r3
   d5be4:	2bff      	cmp	r3, #255	; 0xff
   d5be6:	d1f8      	bne.n	d5bda <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid128_[j];
    }
}
   d5be8:	4770      	bx	lr

000d5bea <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d5bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bee:	4698      	mov	r8, r3
   d5bf0:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d5bf2:	460d      	mov	r5, r1
   d5bf4:	2900      	cmp	r1, #0
   d5bf6:	d057      	beq.n	d5ca8 <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
   d5bf8:	2a00      	cmp	r2, #0
   d5bfa:	d057      	beq.n	d5cac <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d5bfc:	6906      	ldr	r6, [r0, #16]
   d5bfe:	1e54      	subs	r4, r2, #1
   d5c00:	b9ae      	cbnz	r6, d5c2e <_ZNK8particle7BleUuid8toStringEPcjb+0x44>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5c02:	7b02      	ldrb	r2, [r0, #12]
   d5c04:	7b43      	ldrb	r3, [r0, #13]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d5c06:	9605      	str	r6, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5c08:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5c0c:	2102      	movs	r1, #2
   d5c0e:	aa05      	add	r2, sp, #20
   d5c10:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5c12:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5c16:	f7ff fded 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
   d5c1a:	2c04      	cmp	r4, #4
   d5c1c:	bf28      	it	cs
   d5c1e:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d5c20:	4622      	mov	r2, r4
   d5c22:	a905      	add	r1, sp, #20
   d5c24:	4628      	mov	r0, r5
   d5c26:	f003 fafe 	bl	d9226 <memcpy>
        buf[len++] = '\0';
   d5c2a:	552e      	strb	r6, [r5, r4]
   d5c2c:	e03a      	b.n	d5ca4 <_ZNK8particle7BleUuid8toStringEPcjb+0xba>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d5c2e:	a901      	add	r1, sp, #4
   d5c30:	f7ff ffd1 	bl	d5bd6 <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5c34:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d5c36:	f1b8 0f00 	cmp.w	r8, #0
   d5c3a:	d002      	beq.n	d5c42 <_ZNK8particle7BleUuid8toStringEPcjb+0x58>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5c3c:	2110      	movs	r1, #16
   d5c3e:	a801      	add	r0, sp, #4
   d5c40:	e024      	b.n	d5c8c <_ZNK8particle7BleUuid8toStringEPcjb+0xa2>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d5c42:	2104      	movs	r1, #4
   d5c44:	eb0d 0001 	add.w	r0, sp, r1
   d5c48:	f7ff fdd4 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d5c4c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d5c4e:	f10d 021d 	add.w	r2, sp, #29
   d5c52:	2102      	movs	r1, #2
   d5c54:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d5c56:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d5c5a:	f7ff fdcb 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d5c5e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d5c62:	2102      	movs	r1, #2
   d5c64:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d5c68:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d5c6c:	f7ff fdc2 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d5c70:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d5c74:	2102      	movs	r1, #2
   d5c76:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d5c78:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d5c7c:	f7ff fdba 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d5c80:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d5c84:	aa0b      	add	r2, sp, #44	; 0x2c
   d5c86:	2106      	movs	r1, #6
   d5c88:	f10d 000e 	add.w	r0, sp, #14
   d5c8c:	f7ff fdb2 	bl	d57f4 <_ZL12bytes2hexbufPKhjPc>
   d5c90:	2c24      	cmp	r4, #36	; 0x24
   d5c92:	bf28      	it	cs
   d5c94:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d5c96:	4622      	mov	r2, r4
   d5c98:	a905      	add	r1, sp, #20
   d5c9a:	4628      	mov	r0, r5
   d5c9c:	f003 fac3 	bl	d9226 <memcpy>
    buf[len++] = '\0';
   d5ca0:	2300      	movs	r3, #0
   d5ca2:	552b      	strb	r3, [r5, r4]
   d5ca4:	1c60      	adds	r0, r4, #1
   d5ca6:	e002      	b.n	d5cae <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d5ca8:	4608      	mov	r0, r1
   d5caa:	e000      	b.n	d5cae <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
   d5cac:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d5cae:	b00e      	add	sp, #56	; 0x38
   d5cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5cb4 <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d5cb4:	b510      	push	{r4, lr}
   d5cb6:	b08a      	sub	sp, #40	; 0x28
   d5cb8:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d5cba:	2300      	movs	r3, #0
   d5cbc:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d5cbe:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d5cc0:	4669      	mov	r1, sp
   d5cc2:	f7ff ff92 	bl	d5bea <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d5cc6:	4669      	mov	r1, sp
   d5cc8:	4620      	mov	r0, r4
   d5cca:	f7ff fc60 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5cce:	4620      	mov	r0, r4
   d5cd0:	b00a      	add	sp, #40	; 0x28
   d5cd2:	bd10      	pop	{r4, pc}

000d5cd4 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d5cd4:	b538      	push	{r3, r4, r5, lr}
   d5cd6:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5cd8:	b101      	cbz	r1, d5cdc <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d5cda:	b912      	cbnz	r2, d5ce2 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d5cdc:	2000      	movs	r0, #0
   d5cde:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d5ce0:	bd38      	pop	{r3, r4, r5, pc}
   d5ce2:	2a1f      	cmp	r2, #31
   d5ce4:	bf28      	it	cs
   d5ce6:	221f      	movcs	r2, #31
   d5ce8:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d5cea:	f003 fa9c 	bl	d9226 <memcpy>
    selfLen_ = len;
   d5cee:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d5cf0:	4620      	mov	r0, r4
}
   d5cf2:	bd38      	pop	{r3, r4, r5, pc}

000d5cf4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5cf6:	b18b      	cbz	r3, d5d1c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5cf8:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5cfa:	1ce5      	adds	r5, r4, #3
   d5cfc:	428d      	cmp	r5, r1
   d5cfe:	d80f      	bhi.n	d5d20 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5d00:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5d02:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5d04:	5d87      	ldrb	r7, [r0, r6]
   d5d06:	4297      	cmp	r7, r2
   d5d08:	d105      	bne.n	d5d16 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5d0a:	442e      	add	r6, r5
   d5d0c:	42b1      	cmp	r1, r6
   d5d0e:	d307      	bcc.n	d5d20 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5d10:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5d12:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5d16:	3501      	adds	r5, #1
   d5d18:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5d1a:	e7ee      	b.n	d5cfa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5d1c:	4618      	mov	r0, r3
   d5d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5d20:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5d24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5d24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5d28:	4604      	mov	r4, r0
   d5d2a:	460e      	mov	r6, r1
   d5d2c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5d2e:	4617      	mov	r7, r2
   d5d30:	2a00      	cmp	r2, #0
   d5d32:	d03a      	beq.n	d5daa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5d34:	460a      	mov	r2, r1
   d5d36:	ab01      	add	r3, sp, #4
   d5d38:	6a01      	ldr	r1, [r0, #32]
   d5d3a:	f7ff ffdb 	bl	d5cf4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5d3e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5d42:	6a22      	ldr	r2, [r4, #32]
   d5d44:	bb03      	cbnz	r3, d5d88 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5d46:	b1f8      	cbz	r0, d5d88 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5d48:	1c96      	adds	r6, r2, #2
   d5d4a:	442e      	add	r6, r5
   d5d4c:	1a36      	subs	r6, r6, r0
   d5d4e:	2e1f      	cmp	r6, #31
   d5d50:	d82b      	bhi.n	d5daa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5d52:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5d56:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5d5a:	ebc8 0202 	rsb	r2, r8, r2
   d5d5e:	1a12      	subs	r2, r2, r0
   d5d60:	eb00 0108 	add.w	r1, r0, r8
   d5d64:	eb05 0009 	add.w	r0, r5, r9
   d5d68:	b292      	uxth	r2, r2
   d5d6a:	4421      	add	r1, r4
   d5d6c:	4420      	add	r0, r4
   d5d6e:	f003 fa65 	bl	d923c <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5d72:	1c6b      	adds	r3, r5, #1
   d5d74:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5d78:	462a      	mov	r2, r5
   d5d7a:	4639      	mov	r1, r7
   d5d7c:	eb04 0009 	add.w	r0, r4, r9
   d5d80:	f003 fa51 	bl	d9226 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5d84:	6226      	str	r6, [r4, #32]
   d5d86:	e010      	b.n	d5daa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5d88:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5d8a:	182b      	adds	r3, r5, r0
   d5d8c:	2b1f      	cmp	r3, #31
   d5d8e:	d80c      	bhi.n	d5daa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5d90:	1c6b      	adds	r3, r5, #1
   d5d92:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5d94:	4422      	add	r2, r4
   d5d96:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5d98:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5d9a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5d9c:	4420      	add	r0, r4
   d5d9e:	462a      	mov	r2, r5
   d5da0:	f003 fa41 	bl	d9226 <memcpy>
        selfLen_ += len;
   d5da4:	6a22      	ldr	r2, [r4, #32]
   d5da6:	442a      	add	r2, r5
   d5da8:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5daa:	6a20      	ldr	r0, [r4, #32]
}
   d5dac:	b003      	add	sp, #12
   d5dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5db2 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5db2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5db4:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5db6:	4603      	mov	r3, r0
   d5db8:	f100 021f 	add.w	r2, r0, #31
   d5dbc:	2000      	movs	r0, #0
   d5dbe:	f803 0b01 	strb.w	r0, [r3], #1
   d5dc2:	4293      	cmp	r3, r2
   d5dc4:	f04f 0100 	mov.w	r1, #0
   d5dc8:	d1f9      	bne.n	d5dbe <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5dca:	aa04      	add	r2, sp, #16
   d5dcc:	2306      	movs	r3, #6
   d5dce:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5dd2:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5dd4:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5dd6:	9100      	str	r1, [sp, #0]
   d5dd8:	4620      	mov	r0, r4
   d5dda:	4619      	mov	r1, r3
   d5ddc:	f7ff ffa2 	bl	d5d24 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5de0:	4620      	mov	r0, r4
   d5de2:	b004      	add	sp, #16
   d5de4:	bd10      	pop	{r4, pc}

000d5de6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5de6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5dea:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5dec:	b085      	sub	sp, #20
   d5dee:	4606      	mov	r6, r0
   d5df0:	4689      	mov	r9, r1
   d5df2:	4617      	mov	r7, r2
   d5df4:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d5df6:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d5df8:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5dfc:	6a31      	ldr	r1, [r6, #32]
   d5dfe:	428d      	cmp	r5, r1
   d5e00:	d22a      	bcs.n	d5e58 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d5e02:	ab03      	add	r3, sp, #12
   d5e04:	464a      	mov	r2, r9
   d5e06:	1b49      	subs	r1, r1, r5
   d5e08:	1970      	adds	r0, r6, r5
   d5e0a:	f7ff ff73 	bl	d5cf4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d5e0e:	4683      	mov	fp, r0
   d5e10:	b310      	cbz	r0, d5e58 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d5e12:	4554      	cmp	r4, sl
   d5e14:	d220      	bcs.n	d5e58 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d5e16:	2804      	cmp	r0, #4
   d5e18:	9903      	ldr	r1, [sp, #12]
   d5e1a:	d10c      	bne.n	d5e36 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d5e1c:	4429      	add	r1, r5
   d5e1e:	1872      	adds	r2, r6, r1
   d5e20:	1c63      	adds	r3, r4, #1
   d5e22:	78d1      	ldrb	r1, [r2, #3]
   d5e24:	7892      	ldrb	r2, [r2, #2]
   d5e26:	9301      	str	r3, [sp, #4]
   d5e28:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d5e2c:	fb08 7004 	mla	r0, r8, r4, r7
   d5e30:	f7ff fe38 	bl	d5aa4 <_ZN8particle7BleUuidaSEt>
   d5e34:	e00a      	b.n	d5e4c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d5e36:	2812      	cmp	r0, #18
   d5e38:	d10a      	bne.n	d5e50 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d5e3a:	3102      	adds	r1, #2
   d5e3c:	4429      	add	r1, r5
   d5e3e:	1c63      	adds	r3, r4, #1
   d5e40:	4431      	add	r1, r6
   d5e42:	fb08 7004 	mla	r0, r8, r4, r7
   d5e46:	9301      	str	r3, [sp, #4]
   d5e48:	f7ff fe1f 	bl	d5a8a <_ZN8particle7BleUuidaSEPKh>
   d5e4c:	9b01      	ldr	r3, [sp, #4]
   d5e4e:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5e50:	9b03      	ldr	r3, [sp, #12]
   d5e52:	445b      	add	r3, fp
   d5e54:	441d      	add	r5, r3
   d5e56:	e7d1      	b.n	d5dfc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d5e58:	4620      	mov	r0, r4
   d5e5a:	b005      	add	sp, #20
   d5e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5e60 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e64:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5e66:	460d      	mov	r5, r1
   d5e68:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e6a:	460a      	mov	r2, r1
   d5e6c:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5e6e:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e70:	f7ff ffb9 	bl	d5de6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5e74:	f04f 0814 	mov.w	r8, #20
   d5e78:	1a33      	subs	r3, r6, r0
   d5e7a:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e7e:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5e80:	2103      	movs	r1, #3
   d5e82:	4638      	mov	r0, r7
   d5e84:	f7ff ffaf 	bl	d5de6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5e88:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e8a:	1b33      	subs	r3, r6, r4
   d5e8c:	fb08 5204 	mla	r2, r8, r4, r5
   d5e90:	2106      	movs	r1, #6
   d5e92:	4638      	mov	r0, r7
   d5e94:	f7ff ffa7 	bl	d5de6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5e98:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d5e9a:	1b33      	subs	r3, r6, r4
   d5e9c:	fb08 5204 	mla	r2, r8, r4, r5
   d5ea0:	2107      	movs	r1, #7
   d5ea2:	4638      	mov	r0, r7
   d5ea4:	f7ff ff9f 	bl	d5de6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d5ea8:	4420      	add	r0, r4
   d5eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5eb0 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5eb0:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5eb2:	2500      	movs	r5, #0
   d5eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5eb8:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5eba:	8043      	strh	r3, [r0, #2]
   d5ebc:	220e      	movs	r2, #14
   d5ebe:	4629      	mov	r1, r5
   d5ec0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5ec2:	7105      	strb	r5, [r0, #4]
   d5ec4:	3006      	adds	r0, #6
   d5ec6:	f003 f9d4 	bl	d9272 <memset>
   d5eca:	f104 0014 	add.w	r0, r4, #20
   d5ece:	f7ff fd61 	bl	d5994 <_ZN8particle7BleUuidC1Ev>
   d5ed2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5ed6:	f7ff fd5d 	bl	d5994 <_ZN8particle7BleUuidC1Ev>
   d5eda:	4904      	ldr	r1, [pc, #16]	; (d5eec <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5edc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5ee0:	f7ff fb55 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
   d5ee4:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5ee6:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5ee8:	4620      	mov	r0, r4
   d5eea:	bd38      	pop	{r3, r4, r5, pc}
   d5eec:	000da664 	.word	0x000da664

000d5ef0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5ef0:	b510      	push	{r4, lr}
   d5ef2:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5ef4:	69c2      	ldr	r2, [r0, #28]
   d5ef6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5efa:	4293      	cmp	r3, r2
   d5efc:	4618      	mov	r0, r3
   d5efe:	d006      	beq.n	d5f0e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5f00:	6804      	ldr	r4, [r0, #0]
   d5f02:	8824      	ldrh	r4, [r4, #0]
   d5f04:	428c      	cmp	r4, r1
   d5f06:	f103 0308 	add.w	r3, r3, #8
   d5f0a:	d1f6      	bne.n	d5efa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5f0c:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5f0e:	2000      	movs	r0, #0
    }
   d5f10:	bd10      	pop	{r4, pc}
	...

000d5f14 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5f14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5f18:	4680      	mov	r8, r0
   d5f1a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5f1c:	460e      	mov	r6, r1
   d5f1e:	b369      	cbz	r1, d5f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5f20:	b362      	cbz	r2, d5f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5f22:	2af4      	cmp	r2, #244	; 0xf4
   d5f24:	6805      	ldr	r5, [r0, #0]
   d5f26:	bf28      	it	cs
   d5f28:	22f4      	movcs	r2, #244	; 0xf4
   d5f2a:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5f2c:	782a      	ldrb	r2, [r5, #0]
   d5f2e:	b1a2      	cbz	r2, d5f5a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d5f30:	792b      	ldrb	r3, [r5, #4]
   d5f32:	0798      	lsls	r0, r3, #30
   d5f34:	d507      	bpl.n	d5f46 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5f36:	2300      	movs	r3, #0
   d5f38:	4622      	mov	r2, r4
   d5f3a:	89a8      	ldrh	r0, [r5, #12]
   d5f3c:	f7ff f82e 	bl	d4f9c <hal_ble_gatt_server_set_characteristic_value>
   d5f40:	2800      	cmp	r0, #0
   d5f42:	da02      	bge.n	d5f4a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5f44:	e043      	b.n	d5fce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5f46:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5f4a:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d5f4e:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d5f50:	06da      	lsls	r2, r3, #27
   d5f52:	d518      	bpl.n	d5f86 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5f54:	2f01      	cmp	r7, #1
   d5f56:	d123      	bne.n	d5fa0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5f58:	e015      	b.n	d5f86 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5f5a:	8868      	ldrh	r0, [r5, #2]
   d5f5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5f60:	4298      	cmp	r0, r3
   d5f62:	d00d      	beq.n	d5f80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d5f64:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5f66:	0759      	lsls	r1, r3, #29
   d5f68:	d523      	bpl.n	d5fb2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5f6a:	2f01      	cmp	r7, #1
   d5f6c:	d021      	beq.n	d5fb2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f6e:	89a9      	ldrh	r1, [r5, #12]
   d5f70:	9200      	str	r2, [sp, #0]
   d5f72:	4623      	mov	r3, r4
   d5f74:	4632      	mov	r2, r6
   d5f76:	f7ff f839 	bl	d4fec <hal_ble_gatt_client_write_without_response>
   d5f7a:	e028      	b.n	d5fce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5f7c:	4815      	ldr	r0, [pc, #84]	; (d5fd4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d5f7e:	e026      	b.n	d5fce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5f80:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5f84:	e023      	b.n	d5fce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5f86:	069a      	lsls	r2, r3, #26
   d5f88:	d521      	bpl.n	d5fce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5f8a:	2f02      	cmp	r7, #2
   d5f8c:	d01f      	beq.n	d5fce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f8e:	89a8      	ldrh	r0, [r5, #12]
   d5f90:	2300      	movs	r3, #0
   d5f92:	4622      	mov	r2, r4
   d5f94:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5f96:	b002      	add	sp, #8
   d5f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f9c:	f7ff b862 	b.w	d5064 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5fa0:	89a8      	ldrh	r0, [r5, #12]
   d5fa2:	2300      	movs	r3, #0
   d5fa4:	4622      	mov	r2, r4
   d5fa6:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5fa8:	b002      	add	sp, #8
   d5faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5fae:	f7ff b84f 	b.w	d5050 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5fb2:	071b      	lsls	r3, r3, #28
   d5fb4:	d501      	bpl.n	d5fba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5fb6:	2f02      	cmp	r7, #2
   d5fb8:	d102      	bne.n	d5fc0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5fba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5fbe:	e006      	b.n	d5fce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5fc0:	2300      	movs	r3, #0
   d5fc2:	89a9      	ldrh	r1, [r5, #12]
   d5fc4:	9300      	str	r3, [sp, #0]
   d5fc6:	4632      	mov	r2, r6
   d5fc8:	4623      	mov	r3, r4
   d5fca:	f7ff f805 	bl	d4fd8 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5fce:	b002      	add	sp, #8
   d5fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fd4:	fffffef2 	.word	0xfffffef2

000d5fd8 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5fd8:	b570      	push	{r4, r5, r6, lr}
   d5fda:	6804      	ldr	r4, [r0, #0]
   d5fdc:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5fde:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5fe0:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5fe2:	2900      	cmp	r1, #0
   d5fe4:	d12e      	bne.n	d6044 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d5fe6:	8862      	ldrh	r2, [r4, #2]
   d5fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5fec:	429a      	cmp	r2, r3
   d5fee:	d029      	beq.n	d6044 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5ff0:	8a23      	ldrh	r3, [r4, #16]
   d5ff2:	b353      	cbz	r3, d604a <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d5ff4:	2518      	movs	r5, #24
   d5ff6:	462a      	mov	r2, r5
   d5ff8:	4668      	mov	r0, sp
   d5ffa:	f003 f93a 	bl	d9272 <memset>
    config.version = BLE_API_VERSION;
   d5ffe:	2301      	movs	r3, #1
   d6000:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d6004:	4b13      	ldr	r3, [pc, #76]	; (d6054 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d6006:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d600a:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d600c:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d600e:	8863      	ldrh	r3, [r4, #2]
   d6010:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d6014:	8a23      	ldrh	r3, [r4, #16]
   d6016:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d601a:	89a3      	ldrh	r3, [r4, #12]
   d601c:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d6020:	b15e      	cbz	r6, d603a <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d6022:	7923      	ldrb	r3, [r4, #4]
   d6024:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d6026:	bf44      	itt	mi
   d6028:	2302      	movmi	r3, #2
   d602a:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d602c:	7923      	ldrb	r3, [r4, #4]
   d602e:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d6030:	bf42      	ittt	mi
   d6032:	9b05      	ldrmi	r3, [sp, #20]
   d6034:	f043 0301 	orrmi.w	r3, r3, #1
   d6038:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d603a:	2100      	movs	r1, #0
   d603c:	4668      	mov	r0, sp
   d603e:	f7fe fffd 	bl	d503c <hal_ble_gatt_client_configure_cccd>
   d6042:	e004      	b.n	d604e <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d6044:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6048:	e001      	b.n	d604e <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d604a:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d604e:	b006      	add	sp, #24
   d6050:	bd70      	pop	{r4, r5, r6, pc}
   d6052:	bf00      	nop
   d6054:	000d6231 	.word	0x000d6231

000d6058 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d6058:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d605a:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d605c:	651a      	str	r2, [r3, #80]	; 0x50
   d605e:	4770      	bx	lr

000d6060 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d6060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6064:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d6066:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d6068:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d606a:	9302      	str	r3, [sp, #8]
   d606c:	2500      	movs	r5, #0
   d606e:	4b2e      	ldr	r3, [pc, #184]	; (d6128 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d6070:	9300      	str	r3, [sp, #0]
   d6072:	aa02      	add	r2, sp, #8
   d6074:	462b      	mov	r3, r5
   d6076:	492d      	ldr	r1, [pc, #180]	; (d612c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d6078:	9503      	str	r5, [sp, #12]
   d607a:	2001      	movs	r0, #1
   d607c:	f7ff f8fc 	bl	d5278 <log_message>
   d6080:	6833      	ldr	r3, [r6, #0]
   d6082:	68dc      	ldr	r4, [r3, #12]
   d6084:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d6086:	f04f 081c 	mov.w	r8, #28
   d608a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d608e:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d6090:	f1a4 0308 	sub.w	r3, r4, #8
   d6094:	429f      	cmp	r7, r3
   d6096:	6832      	ldr	r2, [r6, #0]
   d6098:	d017      	beq.n	d60ca <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d609a:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d609e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d60a2:	8a9b      	ldrh	r3, [r3, #20]
   d60a4:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d60a8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d60ac:	8adb      	ldrh	r3, [r3, #22]
   d60ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d60b2:	8810      	ldrh	r0, [r2, #0]
   d60b4:	9500      	str	r5, [sp, #0]
   d60b6:	4633      	mov	r3, r6
   d60b8:	4a1d      	ldr	r2, [pc, #116]	; (d6130 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d60ba:	a902      	add	r1, sp, #8
   d60bc:	f7fe ff82 	bl	d4fc4 <hal_ble_gatt_client_discover_characteristics>
   d60c0:	2800      	cmp	r0, #0
   d60c2:	f104 0408 	add.w	r4, r4, #8
   d60c6:	dae3      	bge.n	d6090 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d60c8:	e02a      	b.n	d6120 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d60ca:	6994      	ldr	r4, [r2, #24]
   d60cc:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d60ce:	2700      	movs	r7, #0
   d60d0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d60d4:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d60d6:	f1a4 0308 	sub.w	r3, r4, #8
   d60da:	429d      	cmp	r5, r3
   d60dc:	d01f      	beq.n	d611e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d60de:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d60e2:	89db      	ldrh	r3, [r3, #14]
   d60e4:	b1cb      	cbz	r3, d611a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d60e6:	2214      	movs	r2, #20
   d60e8:	2100      	movs	r1, #0
   d60ea:	a802      	add	r0, sp, #8
   d60ec:	f003 f8c1 	bl	d9272 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d60f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d60f4:	89d9      	ldrh	r1, [r3, #14]
   d60f6:	6833      	ldr	r3, [r6, #0]
   d60f8:	aa02      	add	r2, sp, #8
   d60fa:	8818      	ldrh	r0, [r3, #0]
   d60fc:	9700      	str	r7, [sp, #0]
   d60fe:	2313      	movs	r3, #19
   d6100:	f7fe ff7e 	bl	d5000 <hal_ble_gatt_client_read>
                if (len > 0) {
   d6104:	b148      	cbz	r0, d611a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d6106:	ab0a      	add	r3, sp, #40	; 0x28
   d6108:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d610a:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d610c:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d6110:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d6114:	303c      	adds	r0, #60	; 0x3c
   d6116:	f7ff fa67 	bl	d55e8 <_ZN6StringaSEPKc>
   d611a:	3408      	adds	r4, #8
   d611c:	e7db      	b.n	d60d6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d611e:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d6120:	b00a      	add	sp, #40	; 0x28
   d6122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6126:	bf00      	nop
   d6128:	000da407 	.word	0x000da407
   d612c:	000da3e0 	.word	0x000da3e0
   d6130:	000d6d39 	.word	0x000d6d39

000d6134 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d6134:	6803      	ldr	r3, [r0, #0]
   d6136:	8818      	ldrh	r0, [r3, #0]
}
   d6138:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d613c:	1ac0      	subs	r0, r0, r3
   d613e:	bf18      	it	ne
   d6140:	2001      	movne	r0, #1
   d6142:	4770      	bx	lr

000d6144 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d6144:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d6146:	680b      	ldr	r3, [r1, #0]
   d6148:	f8c2 3002 	str.w	r3, [r2, #2]
   d614c:	684b      	ldr	r3, [r1, #4]
   d614e:	f8c2 3006 	str.w	r3, [r2, #6]
   d6152:	4770      	bx	lr

000d6154 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d6154:	b510      	push	{r4, lr}
    return impl()->address();
   d6156:	680a      	ldr	r2, [r1, #0]
   d6158:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d615c:	6003      	str	r3, [r0, #0]
   d615e:	6853      	ldr	r3, [r2, #4]
   d6160:	6043      	str	r3, [r0, #4]
}
   d6162:	bd10      	pop	{r4, pc}

000d6164 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6166:	6802      	ldr	r2, [r0, #0]
   d6168:	680b      	ldr	r3, [r1, #0]
   d616a:	8812      	ldrh	r2, [r2, #0]
   d616c:	881b      	ldrh	r3, [r3, #0]
   d616e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6170:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6172:	d10c      	bne.n	d618e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d6174:	4601      	mov	r1, r0
   d6176:	4668      	mov	r0, sp
   d6178:	f7ff ffec 	bl	d6154 <_ZNK8particle13BlePeerDevice7addressEv>
   d617c:	4621      	mov	r1, r4
   d617e:	a802      	add	r0, sp, #8
   d6180:	f7ff ffe8 	bl	d6154 <_ZNK8particle13BlePeerDevice7addressEv>
   d6184:	a902      	add	r1, sp, #8
   d6186:	4668      	mov	r0, sp
   d6188:	f7ff fb88 	bl	d589c <_ZNK8particle10BleAddresseqERKS0_>
   d618c:	b900      	cbnz	r0, d6190 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d618e:	2000      	movs	r0, #0
}
   d6190:	b004      	add	sp, #16
   d6192:	bd10      	pop	{r4, pc}

000d6194 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6194:	b510      	push	{r4, lr}
   d6196:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6198:	2034      	movs	r0, #52	; 0x34
   d619a:	f7fd ff7c 	bl	d4096 <_Znwj>
   d619e:	4601      	mov	r1, r0
   d61a0:	b168      	cbz	r0, d61be <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61a2:	2300      	movs	r3, #0
   d61a4:	6003      	str	r3, [r0, #0]
   d61a6:	6043      	str	r3, [r0, #4]
   d61a8:	6083      	str	r3, [r0, #8]
   d61aa:	60c3      	str	r3, [r0, #12]
   d61ac:	6103      	str	r3, [r0, #16]
   d61ae:	6143      	str	r3, [r0, #20]
   d61b0:	6183      	str	r3, [r0, #24]
   d61b2:	61c3      	str	r3, [r0, #28]
   d61b4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d61b6:	6243      	str	r3, [r0, #36]	; 0x24
   d61b8:	6283      	str	r3, [r0, #40]	; 0x28
   d61ba:	62c3      	str	r3, [r0, #44]	; 0x2c
   d61bc:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d61be:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d61c0:	b919      	cbnz	r1, d61ca <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d61c2:	4a0a      	ldr	r2, [pc, #40]	; (d61ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d61c4:	200a      	movs	r0, #10
   d61c6:	f7ff f84f 	bl	d5268 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d61ca:	2000      	movs	r0, #0
   d61cc:	f7fe fec2 	bl	d4f54 <hal_ble_stack_init>
   d61d0:	b120      	cbz	r0, d61dc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d61d2:	4a06      	ldr	r2, [pc, #24]	; (d61ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d61d4:	2100      	movs	r1, #0
   d61d6:	200a      	movs	r0, #10
   d61d8:	f7ff f846 	bl	d5268 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d61dc:	2200      	movs	r2, #0
   d61de:	6821      	ldr	r1, [r4, #0]
   d61e0:	4803      	ldr	r0, [pc, #12]	; (d61f0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d61e2:	f7fe ff21 	bl	d5028 <hal_ble_set_callback_on_periph_link_events>
}
   d61e6:	4620      	mov	r0, r4
   d61e8:	bd10      	pop	{r4, pc}
   d61ea:	bf00      	nop
   d61ec:	000d4f25 	.word	0x000d4f25
   d61f0:	000d6665 	.word	0x000d6665

000d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d61f4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d61f6:	4c0a      	ldr	r4, [pc, #40]	; (d6220 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d61f8:	6823      	ldr	r3, [r4, #0]
   d61fa:	07db      	lsls	r3, r3, #31
   d61fc:	d40e      	bmi.n	d621c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d61fe:	4620      	mov	r0, r4
   d6200:	f7fd ff5a 	bl	d40b8 <__cxa_guard_acquire>
   d6204:	b150      	cbz	r0, d621c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6206:	4807      	ldr	r0, [pc, #28]	; (d6224 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6208:	f7ff ffc4 	bl	d6194 <_ZN8particle14BleLocalDeviceC1Ev>
   d620c:	4620      	mov	r0, r4
   d620e:	f7fd ff58 	bl	d40c2 <__cxa_guard_release>
   d6212:	4a05      	ldr	r2, [pc, #20]	; (d6228 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6214:	4905      	ldr	r1, [pc, #20]	; (d622c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6216:	4803      	ldr	r0, [pc, #12]	; (d6224 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6218:	f002 fd49 	bl	d8cae <__aeabi_atexit>
    return instance;
}
   d621c:	4801      	ldr	r0, [pc, #4]	; (d6224 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d621e:	bd10      	pop	{r4, pc}
   d6220:	2003e3a0 	.word	0x2003e3a0
   d6224:	2003e39c 	.word	0x2003e39c
   d6228:	2003d880 	.word	0x2003d880
   d622c:	000d63cd 	.word	0x000d63cd

000d6230 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6230:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d6232:	6803      	ldr	r3, [r0, #0]
   d6234:	3b09      	subs	r3, #9
   d6236:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6238:	b08a      	sub	sp, #40	; 0x28
   d623a:	4604      	mov	r4, r0
   d623c:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d623e:	d819      	bhi.n	d6274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6240:	f7ff ffd8 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6244:	88a1      	ldrh	r1, [r4, #4]
   d6246:	6800      	ldr	r0, [r0, #0]
   d6248:	f7ff fe52 	bl	d5ef0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d624c:	4602      	mov	r2, r0
   d624e:	b958      	cbnz	r0, d6268 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6250:	2320      	movs	r3, #32
   d6252:	9302      	str	r3, [sp, #8]
   d6254:	4b08      	ldr	r3, [pc, #32]	; (d6278 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d6256:	9003      	str	r0, [sp, #12]
   d6258:	9300      	str	r3, [sp, #0]
   d625a:	aa02      	add	r2, sp, #8
   d625c:	4603      	mov	r3, r0
   d625e:	4907      	ldr	r1, [pc, #28]	; (d627c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d6260:	2032      	movs	r0, #50	; 0x32
   d6262:	f7ff f809 	bl	d5278 <log_message>
   d6266:	e005      	b.n	d6274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d6268:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d626a:	b11d      	cbz	r5, d6274 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d626c:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d626e:	68e1      	ldr	r1, [r4, #12]
   d6270:	6920      	ldr	r0, [r4, #16]
   d6272:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d6274:	b00a      	add	sp, #40	; 0x28
   d6276:	bd70      	pop	{r4, r5, r6, pc}
   d6278:	000da42a 	.word	0x000da42a
   d627c:	000da3e0 	.word	0x000da3e0

000d6280 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6280:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6282:	a801      	add	r0, sp, #4
   d6284:	f7ff faec 	bl	d5860 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d6288:	2000      	movs	r0, #0
   d628a:	f7fe fe63 	bl	d4f54 <hal_ble_stack_init>
   d628e:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d6290:	a801      	add	r0, sp, #4
   d6292:	f7ff faf3 	bl	d587c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d6296:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d629a:	b002      	add	sp, #8
   d629c:	bd10      	pop	{r4, pc}
	...

000d62a0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d62a0:	b530      	push	{r4, r5, lr}
   d62a2:	b08b      	sub	sp, #44	; 0x2c
   d62a4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d62a6:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d62a8:	4614      	mov	r4, r2
    WiringBleLock lk;
   d62aa:	f7ff fad9 	bl	d5860 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d62ae:	b1b5      	cbz	r5, d62de <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d62b0:	b1ac      	cbz	r4, d62de <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d62b2:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d62b4:	a902      	add	r1, sp, #8
   d62b6:	480d      	ldr	r0, [pc, #52]	; (d62ec <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d62b8:	9406      	str	r4, [sp, #24]
   d62ba:	9202      	str	r2, [sp, #8]
   d62bc:	9203      	str	r2, [sp, #12]
   d62be:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d62c0:	9207      	str	r2, [sp, #28]
   d62c2:	9208      	str	r2, [sp, #32]
   d62c4:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d62c6:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d62c8:	f7fe fe4c 	bl	d4f64 <hal_ble_gap_start_scan>
   d62cc:	2800      	cmp	r0, #0
   d62ce:	bfb8      	it	lt
   d62d0:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d62d2:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d62d4:	bfa8      	it	ge
   d62d6:	9c07      	ldrge	r4, [sp, #28]
   d62d8:	f7ff f87a 	bl	d53d0 <free>
   d62dc:	e000      	b.n	d62e0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d62de:	4c04      	ldr	r4, [pc, #16]	; (d62f0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d62e0:	a801      	add	r0, sp, #4
   d62e2:	f7ff facb 	bl	d587c <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d62e6:	4620      	mov	r0, r4
   d62e8:	b00b      	add	sp, #44	; 0x2c
   d62ea:	bd30      	pop	{r4, r5, pc}
   d62ec:	000d67d3 	.word	0x000d67d3
   d62f0:	fffffef2 	.word	0xfffffef2

000d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d62f4:	680b      	ldr	r3, [r1, #0]
   d62f6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d62f8:	b113      	cbz	r3, d6300 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d62fa:	685a      	ldr	r2, [r3, #4]
   d62fc:	3201      	adds	r2, #1
   d62fe:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6300:	4770      	bx	lr

000d6302 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6302:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6304:	f851 3b04 	ldr.w	r3, [r1], #4
   d6308:	4604      	mov	r4, r0
   d630a:	f840 3b04 	str.w	r3, [r0], #4
   d630e:	f7ff fff1 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d6312:	6823      	ldr	r3, [r4, #0]
   d6314:	b90b      	cbnz	r3, d631a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6316:	f7ff fa53 	bl	d57c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d631a:	4620      	mov	r0, r4
   d631c:	bd10      	pop	{r4, pc}

000d631e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d631e:	b510      	push	{r4, lr}
   d6320:	f851 3b04 	ldr.w	r3, [r1], #4
   d6324:	4604      	mov	r4, r0
   d6326:	f840 3b04 	str.w	r3, [r0], #4
   d632a:	f7ff ffe3 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d632e:	4620      	mov	r0, r4
   d6330:	bd10      	pop	{r4, pc}

000d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6332:	b510      	push	{r4, lr}
   d6334:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6336:	6800      	ldr	r0, [r0, #0]
   d6338:	b128      	cbz	r0, d6346 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d633a:	6843      	ldr	r3, [r0, #4]
   d633c:	3b01      	subs	r3, #1
   d633e:	6043      	str	r3, [r0, #4]
   d6340:	b90b      	cbnz	r3, d6346 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6342:	f7ff fa47 	bl	d57d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6346:	4620      	mov	r0, r4
   d6348:	bd10      	pop	{r4, pc}

000d634a <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d634a:	b510      	push	{r4, lr}
   d634c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d634e:	3004      	adds	r0, #4
   d6350:	f7ff ffef 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6354:	4620      	mov	r0, r4
   d6356:	bd10      	pop	{r4, pc}

000d6358 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d6358:	b510      	push	{r4, lr}
   d635a:	4604      	mov	r4, r0
   d635c:	3004      	adds	r0, #4
   d635e:	f7ff ffe8 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6362:	4620      	mov	r0, r4
   d6364:	bd10      	pop	{r4, pc}

000d6366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6366:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6368:	6804      	ldr	r4, [r0, #0]
   d636a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d636c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d636e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6372:	42a6      	cmp	r6, r4
   d6374:	d004      	beq.n	d6380 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6376:	1d20      	adds	r0, r4, #4
   d6378:	f7ff ffdb 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d637c:	3408      	adds	r4, #8
   d637e:	e7f8      	b.n	d6372 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6380:	6828      	ldr	r0, [r5, #0]
   d6382:	f7ff f825 	bl	d53d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6386:	4628      	mov	r0, r5
   d6388:	bd70      	pop	{r4, r5, r6, pc}

000d638a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d638a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d638c:	6804      	ldr	r4, [r0, #0]
   d638e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6390:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6392:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6396:	42a6      	cmp	r6, r4
   d6398:	d004      	beq.n	d63a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d639a:	1d20      	adds	r0, r4, #4
   d639c:	f7ff ffc9 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63a0:	3408      	adds	r4, #8
   d63a2:	e7f8      	b.n	d6396 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d63a4:	6828      	ldr	r0, [r5, #0]
   d63a6:	f7ff f813 	bl	d53d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d63aa:	4628      	mov	r0, r5
   d63ac:	bd70      	pop	{r4, r5, r6, pc}

000d63ae <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d63ae:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d63b0:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d63b2:	f104 0018 	add.w	r0, r4, #24
   d63b6:	f7ff ffe8 	bl	d638a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d63ba:	f104 000c 	add.w	r0, r4, #12
   d63be:	f7ff ffd2 	bl	d6366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d63c2:	4620      	mov	r0, r4
   d63c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d63c8:	f7fd be67 	b.w	d409a <_ZdlPv>

000d63cc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d63cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d63ce:	6804      	ldr	r4, [r0, #0]
   d63d0:	4607      	mov	r7, r0
   d63d2:	b1c4      	cbz	r4, d6406 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d63d4:	69a5      	ldr	r5, [r4, #24]
   d63d6:	69e3      	ldr	r3, [r4, #28]
   d63d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d63dc:	42ae      	cmp	r6, r5
   d63de:	d004      	beq.n	d63ea <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d63e0:	1d28      	adds	r0, r5, #4
   d63e2:	f7ff ffa6 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d63e6:	3508      	adds	r5, #8
   d63e8:	e7f8      	b.n	d63dc <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d63ea:	69a0      	ldr	r0, [r4, #24]
   d63ec:	f7fe fff0 	bl	d53d0 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d63f0:	f104 000c 	add.w	r0, r4, #12
   d63f4:	f7ff ffc9 	bl	d638a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d63f8:	4620      	mov	r0, r4
   d63fa:	f7ff ffb4 	bl	d6366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d63fe:	2134      	movs	r1, #52	; 0x34
   d6400:	4620      	mov	r0, r4
   d6402:	f002 fc61 	bl	d8cc8 <_ZdlPvj>
   d6406:	4638      	mov	r0, r7
   d6408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d640c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d640c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d640e:	2500      	movs	r5, #0
   d6410:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6412:	6045      	str	r5, [r0, #4]
   d6414:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6416:	2024      	movs	r0, #36	; 0x24
   d6418:	f7fd fe3d 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d641c:	4604      	mov	r4, r0
   d641e:	b178      	cbz	r0, d6440 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6420:	4603      	mov	r3, r0
   d6422:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6426:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d642a:	f8c0 5002 	str.w	r5, [r0, #2]
   d642e:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6430:	7285      	strb	r5, [r0, #10]
   d6432:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6434:	60c5      	str	r5, [r0, #12]
   d6436:	6105      	str	r5, [r0, #16]
   d6438:	6145      	str	r5, [r0, #20]
   d643a:	6185      	str	r5, [r0, #24]
   d643c:	61c5      	str	r5, [r0, #28]
   d643e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6440:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6442:	2014      	movs	r0, #20
   d6444:	9301      	str	r3, [sp, #4]
   d6446:	f7fd fe26 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d644a:	4603      	mov	r3, r0
   d644c:	b128      	cbz	r0, d645a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d644e:	2201      	movs	r2, #1
   d6450:	6042      	str	r2, [r0, #4]
   d6452:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6454:	4a08      	ldr	r2, [pc, #32]	; (d6478 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d6456:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6458:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d645a:	a802      	add	r0, sp, #8
   d645c:	6872      	ldr	r2, [r6, #4]
   d645e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6462:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6464:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6466:	f7ff ff64 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d646a:	6833      	ldr	r3, [r6, #0]
   d646c:	b90b      	cbnz	r3, d6472 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d646e:	f7ff f9a7 	bl	d57c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6472:	4630      	mov	r0, r6
   d6474:	b002      	add	sp, #8
   d6476:	bd70      	pop	{r4, r5, r6, pc}
   d6478:	000da3cc 	.word	0x000da3cc

000d647c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d647c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d647e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d6480:	6803      	ldr	r3, [r0, #0]
   d6482:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d6484:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d6486:	d00c      	beq.n	d64a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d6488:	b114      	cbz	r4, d6490 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d648a:	6863      	ldr	r3, [r4, #4]
   d648c:	3301      	adds	r3, #1
   d648e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d6490:	6828      	ldr	r0, [r5, #0]
   d6492:	b128      	cbz	r0, d64a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6494:	6843      	ldr	r3, [r0, #4]
   d6496:	3b01      	subs	r3, #1
   d6498:	6043      	str	r3, [r0, #4]
   d649a:	b90b      	cbnz	r3, d64a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d649c:	f7ff f99a 	bl	d57d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d64a0:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d64a2:	4628      	mov	r0, r5
   d64a4:	bd38      	pop	{r3, r4, r5, pc}

000d64a6 <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d64a6:	b510      	push	{r4, lr}
   d64a8:	6802      	ldr	r2, [r0, #0]
   d64aa:	680b      	ldr	r3, [r1, #0]
   d64ac:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d64ae:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d64b0:	b110      	cbz	r0, d64b8 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d64b2:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d64b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d64b6:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d64b8:	4620      	mov	r0, r4
   d64ba:	f851 3b04 	ldr.w	r3, [r1], #4
   d64be:	f840 3b04 	str.w	r3, [r0], #4
   d64c2:	f7ff ffdb 	bl	d647c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d64c6:	4620      	mov	r0, r4
   d64c8:	bd10      	pop	{r4, pc}

000d64ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d64ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d64ce:	6803      	ldr	r3, [r0, #0]
   d64d0:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d64d2:	69de      	ldr	r6, [r3, #28]
   d64d4:	b087      	sub	sp, #28
   d64d6:	460f      	mov	r7, r1
   d64d8:	4690      	mov	r8, r2
   d64da:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d64de:	42b4      	cmp	r4, r6
   d64e0:	46a1      	mov	r9, r4
   d64e2:	d011      	beq.n	d6508 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d64e4:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d64e8:	a801      	add	r0, sp, #4
   d64ea:	3114      	adds	r1, #20
   d64ec:	f7ff fa86 	bl	d59fc <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d64f0:	4641      	mov	r1, r8
   d64f2:	a801      	add	r0, sp, #4
   d64f4:	f7ff faee 	bl	d5ad4 <_ZNK8particle7BleUuideqERKS0_>
   d64f8:	4605      	mov	r5, r0
   d64fa:	2800      	cmp	r0, #0
   d64fc:	d0ef      	beq.n	d64de <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d64fe:	4649      	mov	r1, r9
   d6500:	4638      	mov	r0, r7
   d6502:	f7ff ffd0 	bl	d64a6 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d6506:	e000      	b.n	d650a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d6508:	2500      	movs	r5, #0
}
   d650a:	4628      	mov	r0, r5
   d650c:	b007      	add	sp, #28
   d650e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6512 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d6512:	b510      	push	{r4, lr}
   d6514:	f851 3b04 	ldr.w	r3, [r1], #4
   d6518:	4604      	mov	r4, r0
   d651a:	f840 3b04 	str.w	r3, [r0], #4
   d651e:	f7ff ffad 	bl	d647c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d6522:	4620      	mov	r0, r4
   d6524:	bd10      	pop	{r4, pc}

000d6526 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6526:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6528:	b570      	push	{r4, r5, r6, lr}
   d652a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d652c:	d91a      	bls.n	d6564 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d652e:	4290      	cmp	r0, r2
   d6530:	d219      	bcs.n	d6566 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6532:	f1a1 0608 	sub.w	r6, r1, #8
   d6536:	1a51      	subs	r1, r2, r1
   d6538:	3904      	subs	r1, #4
   d653a:	1f15      	subs	r5, r2, #4
   d653c:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d653e:	1f2b      	subs	r3, r5, #4
   d6540:	429e      	cmp	r6, r3
   d6542:	d025      	beq.n	d6590 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6544:	2c04      	cmp	r4, #4
   d6546:	d007      	beq.n	d6558 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6548:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d654c:	f844 3c04 	str.w	r3, [r4, #-4]
   d6550:	4629      	mov	r1, r5
   d6552:	4620      	mov	r0, r4
   d6554:	f7ff fece 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6558:	4628      	mov	r0, r5
   d655a:	f7ff feea 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d655e:	3d08      	subs	r5, #8
   d6560:	3c08      	subs	r4, #8
   d6562:	e7ec      	b.n	d653e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6564:	d014      	beq.n	d6590 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6566:	1d0c      	adds	r4, r1, #4
   d6568:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d656a:	1f23      	subs	r3, r4, #4
   d656c:	429d      	cmp	r5, r3
   d656e:	d00f      	beq.n	d6590 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6570:	2e04      	cmp	r6, #4
   d6572:	d007      	beq.n	d6584 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6574:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6578:	f846 3c04 	str.w	r3, [r6, #-4]
   d657c:	4621      	mov	r1, r4
   d657e:	4630      	mov	r0, r6
   d6580:	f7ff feb8 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6584:	4620      	mov	r0, r4
   d6586:	f7ff fed4 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d658a:	3408      	adds	r4, #8
   d658c:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d658e:	e7ec      	b.n	d656a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6590:	bd70      	pop	{r4, r5, r6, pc}

000d6592 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6596:	6804      	ldr	r4, [r0, #0]
   d6598:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d659a:	4605      	mov	r5, r0
   d659c:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d659e:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d65a2:	42a7      	cmp	r7, r4
   d65a4:	d018      	beq.n	d65d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d65a6:	4641      	mov	r1, r8
   d65a8:	4620      	mov	r0, r4
   d65aa:	f7ff fddb 	bl	d6164 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d65ae:	4606      	mov	r6, r0
   d65b0:	b908      	cbnz	r0, d65b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d65b2:	3408      	adds	r4, #8
   d65b4:	e7f5      	b.n	d65a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d65b6:	b18c      	cbz	r4, d65dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d65b8:	1d20      	adds	r0, r4, #4
   d65ba:	f7ff feba 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d65be:	682b      	ldr	r3, [r5, #0]
   d65c0:	686a      	ldr	r2, [r5, #4]
   d65c2:	f104 0108 	add.w	r1, r4, #8
   d65c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d65ca:	4620      	mov	r0, r4
   d65cc:	f7ff ffab 	bl	d6526 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d65d0:	686b      	ldr	r3, [r5, #4]
   d65d2:	3b01      	subs	r3, #1
   d65d4:	606b      	str	r3, [r5, #4]
    return true;
   d65d6:	e002      	b.n	d65de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d65d8:	2600      	movs	r6, #0
   d65da:	e000      	b.n	d65de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d65dc:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d65de:	4630      	mov	r0, r6
   d65e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d65e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d65e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d65e6:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d65e8:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d65ec:	6847      	ldr	r7, [r0, #4]
   d65ee:	9300      	str	r3, [sp, #0]
   d65f0:	a801      	add	r0, sp, #4
   d65f2:	f7ff fe7f 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d65f6:	6866      	ldr	r6, [r4, #4]
   d65f8:	68a3      	ldr	r3, [r4, #8]
   d65fa:	429e      	cmp	r6, r3
   d65fc:	db14      	blt.n	d6628 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d65fe:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6600:	2e00      	cmp	r6, #0
   d6602:	dd0b      	ble.n	d661c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6604:	00f0      	lsls	r0, r6, #3
   d6606:	f7fe fedb 	bl	d53c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d660a:	4605      	mov	r5, r0
   d660c:	b318      	cbz	r0, d6656 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d660e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6612:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6616:	f7ff ff86 	bl	d6526 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d661a:	e000      	b.n	d661e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d661c:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d661e:	6820      	ldr	r0, [r4, #0]
   d6620:	f7fe fed6 	bl	d53d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6624:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6626:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6628:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d662a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d662c:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6630:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6634:	4629      	mov	r1, r5
   d6636:	f105 0008 	add.w	r0, r5, #8
   d663a:	f7ff ff74 	bl	d6526 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d663e:	b135      	cbz	r5, d664e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6640:	9b00      	ldr	r3, [sp, #0]
   d6642:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6646:	a901      	add	r1, sp, #4
   d6648:	1d28      	adds	r0, r5, #4
   d664a:	f7ff fe53 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d664e:	6863      	ldr	r3, [r4, #4]
   d6650:	3301      	adds	r3, #1
   d6652:	6063      	str	r3, [r4, #4]
   d6654:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6656:	a801      	add	r0, sp, #4
   d6658:	f7ff fe6b 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d665c:	4628      	mov	r0, r5
   d665e:	b003      	add	sp, #12
   d6660:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6664 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6668:	4604      	mov	r4, r0
   d666a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d666c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d666e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6670:	f7ff f8f6 	bl	d5860 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6674:	6823      	ldr	r3, [r4, #0]
   d6676:	2b03      	cmp	r3, #3
   d6678:	d002      	beq.n	d6680 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d667a:	2b04      	cmp	r3, #4
   d667c:	d042      	beq.n	d6704 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d667e:	e087      	b.n	d6790 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6680:	a804      	add	r0, sp, #16
   d6682:	f7ff fec3 	bl	d640c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6686:	9b04      	ldr	r3, [sp, #16]
   d6688:	8922      	ldrh	r2, [r4, #8]
   d668a:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d668c:	6862      	ldr	r2, [r4, #4]
   d668e:	9904      	ldr	r1, [sp, #16]
   d6690:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6694:	f8c1 3002 	str.w	r3, [r1, #2]
   d6698:	6853      	ldr	r3, [r2, #4]
   d669a:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d669e:	a807      	add	r0, sp, #28
   d66a0:	9b04      	ldr	r3, [sp, #16]
   d66a2:	9306      	str	r3, [sp, #24]
   d66a4:	a905      	add	r1, sp, #20
   d66a6:	f7ff fe25 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d66aa:	a906      	add	r1, sp, #24
   d66ac:	f105 0018 	add.w	r0, r5, #24
   d66b0:	f7ff ff98 	bl	d65e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d66b4:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d66b6:	a807      	add	r0, sp, #28
   d66b8:	f7ff fe3b 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66bc:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d66be:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d66c0:	b974      	cbnz	r4, d66e0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d66c2:	4b36      	ldr	r3, [pc, #216]	; (d679c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d66c4:	9300      	str	r3, [sp, #0]
   d66c6:	aa06      	add	r2, sp, #24
   d66c8:	4623      	mov	r3, r4
   d66ca:	4935      	ldr	r1, [pc, #212]	; (d67a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d66cc:	9407      	str	r4, [sp, #28]
   d66ce:	2032      	movs	r0, #50	; 0x32
   d66d0:	f7fe fdd2 	bl	d5278 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d66d4:	9b04      	ldr	r3, [sp, #16]
   d66d6:	4621      	mov	r1, r4
   d66d8:	8818      	ldrh	r0, [r3, #0]
   d66da:	f7fe fc55 	bl	d4f88 <hal_ble_gap_disconnect>
   d66de:	e00d      	b.n	d66fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d66e0:	4a30      	ldr	r2, [pc, #192]	; (d67a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d66e2:	9200      	str	r2, [sp, #0]
   d66e4:	2300      	movs	r3, #0
   d66e6:	aa06      	add	r2, sp, #24
   d66e8:	492d      	ldr	r1, [pc, #180]	; (d67a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d66ea:	9307      	str	r3, [sp, #28]
   d66ec:	2001      	movs	r0, #1
   d66ee:	f7fe fdc3 	bl	d5278 <log_message>
                if (impl->connectedCb_) {
   d66f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d66f4:	b113      	cbz	r3, d66fc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d66f6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d66f8:	a804      	add	r0, sp, #16
   d66fa:	4798      	blx	r3
   d66fc:	a805      	add	r0, sp, #20
   d66fe:	f7ff fe18 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6702:	e045      	b.n	d6790 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6704:	8921      	ldrh	r1, [r4, #8]
   d6706:	4628      	mov	r0, r5
   d6708:	f7ff fbf2 	bl	d5ef0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d670c:	4607      	mov	r7, r0
   d670e:	2800      	cmp	r0, #0
   d6710:	d03e      	beq.n	d6790 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d6712:	6804      	ldr	r4, [r0, #0]
   d6714:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6716:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6718:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d671c:	8022      	strh	r2, [r4, #0]
   d671e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6722:	4299      	cmp	r1, r3
   d6724:	d003      	beq.n	d672e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d6726:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d672a:	8042      	strh	r2, [r0, #2]
   d672c:	e7f9      	b.n	d6722 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d672e:	68e6      	ldr	r6, [r4, #12]
   d6730:	6923      	ldr	r3, [r4, #16]
   d6732:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6736:	45b0      	cmp	r8, r6
   d6738:	d004      	beq.n	d6744 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d673a:	1d30      	adds	r0, r6, #4
   d673c:	f7ff fdf9 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6740:	3608      	adds	r6, #8
   d6742:	e7f8      	b.n	d6736 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6744:	2300      	movs	r3, #0
   d6746:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6748:	69a6      	ldr	r6, [r4, #24]
   d674a:	69e3      	ldr	r3, [r4, #28]
   d674c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6750:	45b0      	cmp	r8, r6
   d6752:	d004      	beq.n	d675e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d6754:	1d30      	adds	r0, r6, #4
   d6756:	f7ff fdec 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d675a:	3608      	adds	r6, #8
   d675c:	e7f8      	b.n	d6750 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d675e:	2300      	movs	r3, #0
   d6760:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d6762:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d6764:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d6766:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6768:	b113      	cbz	r3, d6770 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d676a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d676c:	4638      	mov	r0, r7
   d676e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d6770:	2320      	movs	r3, #32
   d6772:	4a0d      	ldr	r2, [pc, #52]	; (d67a8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6774:	9306      	str	r3, [sp, #24]
   d6776:	9200      	str	r2, [sp, #0]
   d6778:	2300      	movs	r3, #0
   d677a:	4909      	ldr	r1, [pc, #36]	; (d67a0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d677c:	9307      	str	r3, [sp, #28]
   d677e:	2001      	movs	r0, #1
   d6780:	aa06      	add	r2, sp, #24
   d6782:	f7fe fd79 	bl	d5278 <log_message>
                    impl->peers_.removeOne(*peer);
   d6786:	4639      	mov	r1, r7
   d6788:	f105 0018 	add.w	r0, r5, #24
   d678c:	f7ff ff01 	bl	d6592 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6790:	a803      	add	r0, sp, #12
   d6792:	f7ff f873 	bl	d587c <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d6796:	b00e      	add	sp, #56	; 0x38
   d6798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d679c:	000da442 	.word	0x000da442
   d67a0:	000da3e0 	.word	0x000da3e0
   d67a4:	000da468 	.word	0x000da468
   d67a8:	000da485 	.word	0x000da485

000d67ac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d67ac:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d67ae:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d67b0:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d67b2:	dd06      	ble.n	d67c2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d67b4:	2154      	movs	r1, #84	; 0x54
   d67b6:	4369      	muls	r1, r5
   d67b8:	6800      	ldr	r0, [r0, #0]
   d67ba:	f7fe fe11 	bl	d53e0 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d67be:	b920      	cbnz	r0, d67ca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d67c0:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d67c2:	6800      	ldr	r0, [r0, #0]
   d67c4:	f7fe fe04 	bl	d53d0 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d67c8:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d67ca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d67cc:	60a5      	str	r5, [r4, #8]
        return true;
   d67ce:	2001      	movs	r0, #1
    }
   d67d0:	bd38      	pop	{r3, r4, r5, pc}

000d67d2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d67d2:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d67d4:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d67d6:	b0c0      	sub	sp, #256	; 0x100
   d67d8:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d67da:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d67dc:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d67de:	a801      	add	r0, sp, #4
   d67e0:	2100      	movs	r1, #0
   d67e2:	f002 fd46 	bl	d9272 <memset>
   d67e6:	a803      	add	r0, sp, #12
   d67e8:	f7ff fae3 	bl	d5db2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d67ec:	a80c      	add	r0, sp, #48	; 0x30
   d67ee:	f7ff fae0 	bl	d5db2 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d67f2:	462a      	mov	r2, r5
   d67f4:	ab01      	add	r3, sp, #4
   d67f6:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d67fa:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d67fc:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d67fe:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6800:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6802:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6804:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6808:	a80c      	add	r0, sp, #48	; 0x30
   d680a:	f7ff fa63 	bl	d5cd4 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d680e:	89aa      	ldrh	r2, [r5, #12]
   d6810:	6869      	ldr	r1, [r5, #4]
   d6812:	a803      	add	r0, sp, #12
   d6814:	f7ff fa5e 	bl	d5cd4 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d6818:	69a5      	ldr	r5, [r4, #24]
   d681a:	b11d      	cbz	r5, d6824 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d681c:	69e1      	ldr	r1, [r4, #28]
   d681e:	a801      	add	r0, sp, #4
   d6820:	47a8      	blx	r5
   d6822:	e03c      	b.n	d689e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d6824:	68e0      	ldr	r0, [r4, #12]
   d6826:	b198      	cbz	r0, d6850 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d6828:	6963      	ldr	r3, [r4, #20]
   d682a:	6922      	ldr	r2, [r4, #16]
   d682c:	4293      	cmp	r3, r2
   d682e:	d239      	bcs.n	d68a4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d6830:	1c5a      	adds	r2, r3, #1
   d6832:	6162      	str	r2, [r4, #20]
   d6834:	fb06 0003 	mla	r0, r6, r3, r0
   d6838:	2251      	movs	r2, #81	; 0x51
   d683a:	a901      	add	r1, sp, #4
   d683c:	f002 fcf3 	bl	d9226 <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d6840:	6962      	ldr	r2, [r4, #20]
   d6842:	6923      	ldr	r3, [r4, #16]
   d6844:	429a      	cmp	r2, r3
   d6846:	d32d      	bcc.n	d68a4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d6848:	4628      	mov	r0, r5
   d684a:	f7fe fb93 	bl	d4f74 <hal_ble_gap_stop_scan>
   d684e:	e029      	b.n	d68a4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d6850:	4632      	mov	r2, r6
   d6852:	a901      	add	r1, sp, #4
   d6854:	a816      	add	r0, sp, #88	; 0x58
   d6856:	f002 fce6 	bl	d9226 <memcpy>
   d685a:	4632      	mov	r2, r6
   d685c:	a916      	add	r1, sp, #88	; 0x58
   d685e:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6860:	6865      	ldr	r5, [r4, #4]
   d6862:	f002 fce0 	bl	d9226 <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6866:	68a3      	ldr	r3, [r4, #8]
   d6868:	429d      	cmp	r5, r3
   d686a:	db04      	blt.n	d6876 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d686c:	1c69      	adds	r1, r5, #1
   d686e:	4620      	mov	r0, r4
   d6870:	f7ff ff9c 	bl	d67ac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6874:	b1b0      	cbz	r0, d68a4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6876:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6878:	6822      	ldr	r2, [r4, #0]
   d687a:	2654      	movs	r6, #84	; 0x54
   d687c:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6880:	fb06 2203 	mla	r2, r6, r3, r2
   d6884:	1b52      	subs	r2, r2, r5
   d6886:	4629      	mov	r1, r5
   d6888:	19a8      	adds	r0, r5, r6
   d688a:	f002 fcd7 	bl	d923c <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d688e:	4632      	mov	r2, r6
   d6890:	a92b      	add	r1, sp, #172	; 0xac
   d6892:	4628      	mov	r0, r5
   d6894:	f002 fcc7 	bl	d9226 <memcpy>
    ++size_;
   d6898:	6863      	ldr	r3, [r4, #4]
   d689a:	3301      	adds	r3, #1
   d689c:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d689e:	6963      	ldr	r3, [r4, #20]
   d68a0:	3301      	adds	r3, #1
   d68a2:	6163      	str	r3, [r4, #20]
        }
    }
   d68a4:	b040      	add	sp, #256	; 0x100
   d68a6:	bd70      	pop	{r4, r5, r6, pc}

000d68a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d68a8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d68aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d68ac:	4606      	mov	r6, r0
   d68ae:	460c      	mov	r4, r1
   d68b0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d68b2:	d914      	bls.n	d68de <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d68b4:	4290      	cmp	r0, r2
   d68b6:	d213      	bcs.n	d68e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d68b8:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d68bc:	1a6c      	subs	r4, r5, r1
   d68be:	f1a1 0708 	sub.w	r7, r1, #8
   d68c2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d68c4:	42af      	cmp	r7, r5
   d68c6:	d018      	beq.n	d68fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d68c8:	b11c      	cbz	r4, d68d2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d68ca:	4629      	mov	r1, r5
   d68cc:	4620      	mov	r0, r4
   d68ce:	f7ff fd26 	bl	d631e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d68d2:	1d28      	adds	r0, r5, #4
   d68d4:	f7ff fd2d 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d68d8:	3d08      	subs	r5, #8
   d68da:	3c08      	subs	r4, #8
   d68dc:	e7f2      	b.n	d68c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d68de:	d00c      	beq.n	d68fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d68e0:	42ac      	cmp	r4, r5
   d68e2:	d00a      	beq.n	d68fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d68e4:	b11e      	cbz	r6, d68ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d68e6:	4621      	mov	r1, r4
   d68e8:	4630      	mov	r0, r6
   d68ea:	f7ff fd18 	bl	d631e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d68ee:	1d20      	adds	r0, r4, #4
   d68f0:	f7ff fd1f 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d68f4:	3408      	adds	r4, #8
   d68f6:	3608      	adds	r6, #8
   d68f8:	e7f2      	b.n	d68e0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d68fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d68fc:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d68fe:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6900:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6902:	dd0b      	ble.n	d691c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6904:	00f0      	lsls	r0, r6, #3
   d6906:	f7fe fd5b 	bl	d53c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d690a:	4604      	mov	r4, r0
   d690c:	b170      	cbz	r0, d692c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d690e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6912:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6916:	f7ff ffc7 	bl	d68a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d691a:	e000      	b.n	d691e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d691c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d691e:	6828      	ldr	r0, [r5, #0]
   d6920:	f7fe fd56 	bl	d53d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6924:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6926:	60ae      	str	r6, [r5, #8]
        return true;
   d6928:	2001      	movs	r0, #1
   d692a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d692c:	bd70      	pop	{r4, r5, r6, pc}

000d692e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d692e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6932:	2300      	movs	r3, #0
   d6934:	6003      	str	r3, [r0, #0]
   d6936:	6043      	str	r3, [r0, #4]
   d6938:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d693a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d693c:	6849      	ldr	r1, [r1, #4]
   d693e:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6940:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6942:	dd13      	ble.n	d696c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6944:	f7ff ffda 	bl	d68fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6948:	b180      	cbz	r0, d696c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d694a:	6835      	ldr	r5, [r6, #0]
   d694c:	6873      	ldr	r3, [r6, #4]
   d694e:	6827      	ldr	r7, [r4, #0]
   d6950:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6954:	4545      	cmp	r5, r8
   d6956:	d007      	beq.n	d6968 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6958:	b11f      	cbz	r7, d6962 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d695a:	4629      	mov	r1, r5
   d695c:	4638      	mov	r0, r7
   d695e:	f7ff fcde 	bl	d631e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6962:	3508      	adds	r5, #8
   d6964:	3708      	adds	r7, #8
   d6966:	e7f5      	b.n	d6954 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6968:	6873      	ldr	r3, [r6, #4]
   d696a:	6063      	str	r3, [r4, #4]
    }
}
   d696c:	4620      	mov	r0, r4
   d696e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6972 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6972:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6974:	680b      	ldr	r3, [r1, #0]
   d6976:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6978:	4605      	mov	r5, r0
   d697a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d697c:	b933      	cbnz	r3, d698c <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d697e:	4608      	mov	r0, r1
   d6980:	f7fe ff00 	bl	d5784 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d6984:	b910      	cbnz	r0, d698c <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d6986:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d6988:	2201      	movs	r2, #1
   d698a:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d698c:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d698e:	4628      	mov	r0, r5
   d6990:	310c      	adds	r1, #12
   d6992:	f7ff ffcc 	bl	d692e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d6996:	4628      	mov	r0, r5
   d6998:	bd38      	pop	{r3, r4, r5, pc}

000d699a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d699a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d699c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d699e:	6845      	ldr	r5, [r0, #4]
   d69a0:	4668      	mov	r0, sp
   d69a2:	f7ff fcbc 	bl	d631e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d69a6:	6861      	ldr	r1, [r4, #4]
   d69a8:	68a3      	ldr	r3, [r4, #8]
   d69aa:	4299      	cmp	r1, r3
   d69ac:	db05      	blt.n	d69ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d69ae:	3101      	adds	r1, #1
   d69b0:	4620      	mov	r0, r4
   d69b2:	f7ff ffa3 	bl	d68fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d69b6:	4606      	mov	r6, r0
   d69b8:	b198      	cbz	r0, d69e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d69ba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d69bc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d69be:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d69c2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d69c6:	4629      	mov	r1, r5
   d69c8:	f105 0008 	add.w	r0, r5, #8
   d69cc:	f7ff ff6c 	bl	d68a8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d69d0:	b11d      	cbz	r5, d69da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d69d2:	4669      	mov	r1, sp
   d69d4:	4628      	mov	r0, r5
   d69d6:	f7ff fca2 	bl	d631e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d69da:	6863      	ldr	r3, [r4, #4]
   d69dc:	3301      	adds	r3, #1
   d69de:	6063      	str	r3, [r4, #4]
   d69e0:	2601      	movs	r6, #1
   d69e2:	a801      	add	r0, sp, #4
   d69e4:	f7ff fca5 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d69e8:	4630      	mov	r0, r6
   d69ea:	b002      	add	sp, #8
   d69ec:	bd70      	pop	{r4, r5, r6, pc}

000d69ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d69ee:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d69f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69f2:	4606      	mov	r6, r0
   d69f4:	460c      	mov	r4, r1
   d69f6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d69f8:	d914      	bls.n	d6a24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d69fa:	4290      	cmp	r0, r2
   d69fc:	d213      	bcs.n	d6a26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d69fe:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6a02:	1a6c      	subs	r4, r5, r1
   d6a04:	f1a1 0708 	sub.w	r7, r1, #8
   d6a08:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6a0a:	42af      	cmp	r7, r5
   d6a0c:	d018      	beq.n	d6a40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6a0e:	b11c      	cbz	r4, d6a18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6a10:	4629      	mov	r1, r5
   d6a12:	4620      	mov	r0, r4
   d6a14:	f7ff fc75 	bl	d6302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6a18:	1d28      	adds	r0, r5, #4
   d6a1a:	f7ff fc8a 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6a1e:	3d08      	subs	r5, #8
   d6a20:	3c08      	subs	r4, #8
   d6a22:	e7f2      	b.n	d6a0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6a24:	d00c      	beq.n	d6a40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6a26:	42ac      	cmp	r4, r5
   d6a28:	d00a      	beq.n	d6a40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6a2a:	b11e      	cbz	r6, d6a34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6a2c:	4621      	mov	r1, r4
   d6a2e:	4630      	mov	r0, r6
   d6a30:	f7ff fc67 	bl	d6302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6a34:	1d20      	adds	r0, r4, #4
   d6a36:	f7ff fc7c 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6a3a:	3408      	adds	r4, #8
   d6a3c:	3608      	adds	r6, #8
   d6a3e:	e7f2      	b.n	d6a26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6a42:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6a44:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6a46:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6a48:	dd0b      	ble.n	d6a62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6a4a:	00f0      	lsls	r0, r6, #3
   d6a4c:	f7fe fcb8 	bl	d53c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6a50:	4604      	mov	r4, r0
   d6a52:	b170      	cbz	r0, d6a72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6a54:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6a58:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6a5c:	f7ff ffc7 	bl	d69ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6a60:	e000      	b.n	d6a64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6a62:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a64:	6828      	ldr	r0, [r5, #0]
   d6a66:	f7fe fcb3 	bl	d53d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6a6a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6a6c:	60ae      	str	r6, [r5, #8]
        return true;
   d6a6e:	2001      	movs	r0, #1
   d6a70:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6a72:	bd70      	pop	{r4, r5, r6, pc}

000d6a74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a78:	2300      	movs	r3, #0
   d6a7a:	6003      	str	r3, [r0, #0]
   d6a7c:	6043      	str	r3, [r0, #4]
   d6a7e:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6a80:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6a82:	6849      	ldr	r1, [r1, #4]
   d6a84:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6a86:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6a88:	dd13      	ble.n	d6ab2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6a8a:	f7ff ffda 	bl	d6a42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6a8e:	b180      	cbz	r0, d6ab2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6a90:	6835      	ldr	r5, [r6, #0]
   d6a92:	6873      	ldr	r3, [r6, #4]
   d6a94:	6827      	ldr	r7, [r4, #0]
   d6a96:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6a9a:	4545      	cmp	r5, r8
   d6a9c:	d007      	beq.n	d6aae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6a9e:	b11f      	cbz	r7, d6aa8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6aa0:	4629      	mov	r1, r5
   d6aa2:	4638      	mov	r0, r7
   d6aa4:	f7ff fc2d 	bl	d6302 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6aa8:	3508      	adds	r5, #8
   d6aaa:	3708      	adds	r7, #8
   d6aac:	e7f5      	b.n	d6a9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6aae:	6873      	ldr	r3, [r6, #4]
   d6ab0:	6063      	str	r3, [r4, #4]
    }
}
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6ab8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6ab8:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6aba:	680b      	ldr	r3, [r1, #0]
   d6abc:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6abe:	b085      	sub	sp, #20
   d6ac0:	4605      	mov	r5, r0
   d6ac2:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6ac4:	b92b      	cbnz	r3, d6ad2 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d6ac6:	a801      	add	r0, sp, #4
   d6ac8:	f7ff ff53 	bl	d6972 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d6acc:	a801      	add	r0, sp, #4
   d6ace:	f7ff fc4a 	bl	d6366 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d6ad2:	6823      	ldr	r3, [r4, #0]
   d6ad4:	7adb      	ldrb	r3, [r3, #11]
   d6ad6:	b93b      	cbnz	r3, d6ae8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d6ad8:	4621      	mov	r1, r4
   d6ada:	a801      	add	r0, sp, #4
   d6adc:	f7ff fac0 	bl	d6060 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d6ae0:	b910      	cbnz	r0, d6ae8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d6ae2:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d6ae4:	2201      	movs	r2, #1
   d6ae6:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6ae8:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d6aea:	4628      	mov	r0, r5
   d6aec:	3118      	adds	r1, #24
   d6aee:	f7ff ffc1 	bl	d6a74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d6af2:	4628      	mov	r0, r5
   d6af4:	b005      	add	sp, #20
   d6af6:	bd30      	pop	{r4, r5, pc}

000d6af8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6af8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6afc:	460d      	mov	r5, r1
   d6afe:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d6b00:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6b04:	4617      	mov	r7, r2
   d6b06:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d6b08:	4642      	mov	r2, r8
   d6b0a:	2100      	movs	r1, #0
   d6b0c:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6b0e:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d6b10:	f002 fbaf 	bl	d9272 <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6b14:	6869      	ldr	r1, [r5, #4]
   d6b16:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d6b18:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6b1a:	ab02      	add	r3, sp, #8
   d6b1c:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6b1e:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d6b22:	ab05      	add	r3, sp, #20
   d6b24:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6b28:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d6b2c:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d6b30:	f7ff fb60 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6b34:	4b34      	ldr	r3, [pc, #208]	; (d6c08 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d6b36:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6b38:	f7ff fb5c 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6b3c:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6b3e:	6803      	ldr	r3, [r0, #0]
   d6b40:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6b42:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6b44:	a804      	add	r0, sp, #16
   d6b46:	f7fe fa65 	bl	d5014 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d6b4a:	4607      	mov	r7, r0
   d6b4c:	b120      	cbz	r0, d6b58 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d6b4e:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6b50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6b54:	801a      	strh	r2, [r3, #0]
        return ret;
   d6b56:	e053      	b.n	d6c00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d6b58:	4629      	mov	r1, r5
   d6b5a:	4630      	mov	r0, r6
   d6b5c:	f7ff faf2 	bl	d6144 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6b60:	f7ff fb48 	bl	d61f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b64:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d6b66:	6803      	ldr	r3, [r0, #0]
   d6b68:	ad12      	add	r5, sp, #72	; 0x48
   d6b6a:	f103 0818 	add.w	r8, r3, #24
   d6b6e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b72:	f845 3d20 	str.w	r3, [r5, #-32]!
   d6b76:	a80b      	add	r0, sp, #44	; 0x2c
   d6b78:	f7ff fbbc 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6b7c:	4629      	mov	r1, r5
   d6b7e:	4640      	mov	r0, r8
   d6b80:	f7ff fd30 	bl	d65e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6b84:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b86:	a80b      	add	r0, sp, #44	; 0x2c
   d6b88:	f7ff fbd3 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b8c:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d6b8e:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6b90:	f1b8 0f00 	cmp.w	r8, #0
   d6b94:	d114      	bne.n	d6bc0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d6b96:	4b1d      	ldr	r3, [pc, #116]	; (d6c0c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d6b98:	9300      	str	r3, [sp, #0]
   d6b9a:	462a      	mov	r2, r5
   d6b9c:	4643      	mov	r3, r8
   d6b9e:	491c      	ldr	r1, [pc, #112]	; (d6c10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6ba0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d6ba4:	2032      	movs	r0, #50	; 0x32
   d6ba6:	f7fe fb67 	bl	d5278 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d6baa:	6833      	ldr	r3, [r6, #0]
   d6bac:	4641      	mov	r1, r8
   d6bae:	8818      	ldrh	r0, [r3, #0]
   d6bb0:	f7fe f9ea 	bl	d4f88 <hal_ble_gap_disconnect>
   d6bb4:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d6bb6:	4817      	ldr	r0, [pc, #92]	; (d6c14 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6bbc:	801a      	strh	r2, [r3, #0]
   d6bbe:	e01f      	b.n	d6c00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d6bc0:	4b15      	ldr	r3, [pc, #84]	; (d6c18 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d6bc2:	9300      	str	r3, [sp, #0]
   d6bc4:	462a      	mov	r2, r5
   d6bc6:	463b      	mov	r3, r7
   d6bc8:	4911      	ldr	r1, [pc, #68]	; (d6c10 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6bca:	970b      	str	r7, [sp, #44]	; 0x2c
   d6bcc:	4648      	mov	r0, r9
   d6bce:	f7fe fb53 	bl	d5278 <log_message>
    if (automatic) {
   d6bd2:	b1a4      	cbz	r4, d6bfe <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6bd4:	4631      	mov	r1, r6
   d6bd6:	4628      	mov	r0, r5
   d6bd8:	f7ff ff6e 	bl	d6ab8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d6bdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6be0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d6be4:	42a6      	cmp	r6, r4
   d6be6:	d005      	beq.n	d6bf4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d6be8:	4620      	mov	r0, r4
   d6bea:	2101      	movs	r1, #1
   d6bec:	f7ff f9f4 	bl	d5fd8 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d6bf0:	3408      	adds	r4, #8
   d6bf2:	e7f7      	b.n	d6be4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6bf4:	4628      	mov	r0, r5
   d6bf6:	f7ff fbc8 	bl	d638a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d6bfa:	2000      	movs	r0, #0
   d6bfc:	e000      	b.n	d6c00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d6bfe:	4620      	mov	r0, r4
}
   d6c00:	b013      	add	sp, #76	; 0x4c
   d6c02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6c06:	bf00      	nop
   d6c08:	000d6665 	.word	0x000d6665
   d6c0c:	000da4a4 	.word	0x000da4a4
   d6c10:	000da3e0 	.word	0x000da3e0
   d6c14:	fffffefc 	.word	0xfffffefc
   d6c18:	000da4c0 	.word	0x000da4c0

000d6c1c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d6c1c:	b570      	push	{r4, r5, r6, lr}
   d6c1e:	4604      	mov	r4, r0
   d6c20:	4615      	mov	r5, r2
   d6c22:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d6c24:	f7ff fbf2 	bl	d640c <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d6c28:	4633      	mov	r3, r6
   d6c2a:	2200      	movs	r2, #0
   d6c2c:	4629      	mov	r1, r5
   d6c2e:	4620      	mov	r0, r4
   d6c30:	f7ff ff62 	bl	d6af8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d6c34:	4620      	mov	r0, r4
   d6c36:	bd70      	pop	{r4, r5, r6, pc}

000d6c38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6c38:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6c3a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6c3c:	6845      	ldr	r5, [r0, #4]
   d6c3e:	4668      	mov	r0, sp
   d6c40:	f7ff fb5f 	bl	d6302 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c44:	6861      	ldr	r1, [r4, #4]
   d6c46:	68a3      	ldr	r3, [r4, #8]
   d6c48:	4299      	cmp	r1, r3
   d6c4a:	db05      	blt.n	d6c58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6c4c:	3101      	adds	r1, #1
   d6c4e:	4620      	mov	r0, r4
   d6c50:	f7ff fef7 	bl	d6a42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6c54:	4606      	mov	r6, r0
   d6c56:	b198      	cbz	r0, d6c80 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6c58:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6c5a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c5c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6c60:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6c64:	4629      	mov	r1, r5
   d6c66:	f105 0008 	add.w	r0, r5, #8
   d6c6a:	f7ff fec0 	bl	d69ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6c6e:	b11d      	cbz	r5, d6c78 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6c70:	4669      	mov	r1, sp
   d6c72:	4628      	mov	r0, r5
   d6c74:	f7ff fb45 	bl	d6302 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6c78:	6863      	ldr	r3, [r4, #4]
   d6c7a:	3301      	adds	r3, #1
   d6c7c:	6063      	str	r3, [r4, #4]
   d6c7e:	2601      	movs	r6, #1
   d6c80:	a801      	add	r0, sp, #4
   d6c82:	f7ff fb56 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6c86:	4630      	mov	r0, r6
   d6c88:	b002      	add	sp, #8
   d6c8a:	bd70      	pop	{r4, r5, r6, pc}

000d6c8c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6c8c:	b510      	push	{r4, lr}
   d6c8e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6c90:	6840      	ldr	r0, [r0, #4]
   d6c92:	b108      	cbz	r0, d6c98 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6c94:	f7fd fa01 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6c98:	4620      	mov	r0, r4
   d6c9a:	bd10      	pop	{r4, pc}

000d6c9c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6c9c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6c9e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6ca0:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6ca2:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6ca6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6caa:	f7fe fc29 	bl	d5500 <_ZN6StringD1Ev>
   d6cae:	4668      	mov	r0, sp
   d6cb0:	f7ff ffec 	bl	d6c8c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6cb4:	b003      	add	sp, #12
   d6cb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6cbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6cbc:	b538      	push	{r3, r4, r5, lr}
   d6cbe:	2300      	movs	r3, #0
   d6cc0:	4604      	mov	r4, r0
   d6cc2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6cc4:	2014      	movs	r0, #20
   d6cc6:	460d      	mov	r5, r1
   d6cc8:	f7fd f9e5 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6ccc:	b128      	cbz	r0, d6cda <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6cce:	2301      	movs	r3, #1
   d6cd0:	6043      	str	r3, [r0, #4]
   d6cd2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6cd4:	4b02      	ldr	r3, [pc, #8]	; (d6ce0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6cd6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6cd8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6cda:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6cdc:	4620      	mov	r0, r4
   d6cde:	bd38      	pop	{r3, r4, r5, pc}
   d6ce0:	000da394 	.word	0x000da394

000d6ce4 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d6ce4:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6ce6:	2500      	movs	r5, #0
   d6ce8:	b086      	sub	sp, #24
   d6cea:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6cec:	6045      	str	r5, [r0, #4]
   d6cee:	4604      	mov	r4, r0
   d6cf0:	2054      	movs	r0, #84	; 0x54
   d6cf2:	f7fd f9d0 	bl	d4096 <_Znwj>
   d6cf6:	f8cd d010 	str.w	sp, [sp, #16]
   d6cfa:	4606      	mov	r6, r0
   d6cfc:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6cfe:	b108      	cbz	r0, d6d04 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d6d00:	f7ff f8d6 	bl	d5eb0 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6d04:	4631      	mov	r1, r6
   d6d06:	ab01      	add	r3, sp, #4
   d6d08:	aa02      	add	r2, sp, #8
   d6d0a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6d0c:	9505      	str	r5, [sp, #20]
   d6d0e:	f7ff ffd5 	bl	d6cbc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6d12:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6d14:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6d16:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6d18:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6d1a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6d1c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6d1e:	f7ff fb08 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6d22:	a804      	add	r0, sp, #16
   d6d24:	f7ff ffb2 	bl	d6c8c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d6d28:	6823      	ldr	r3, [r4, #0]
   d6d2a:	b90b      	cbnz	r3, d6d30 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d6d2c:	f7fe fd48 	bl	d57c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d6d30:	4620      	mov	r0, r4
   d6d32:	b006      	add	sp, #24
   d6d34:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6d38 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6d3c:	f8df 8104 	ldr.w	r8, [pc, #260]	; d6e44 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6d40:	b08c      	sub	sp, #48	; 0x30
   d6d42:	4605      	mov	r5, r0
   d6d44:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6d46:	2600      	movs	r6, #0
   d6d48:	682b      	ldr	r3, [r5, #0]
   d6d4a:	429e      	cmp	r6, r3
   d6d4c:	d275      	bcs.n	d6e3a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d6d4e:	a802      	add	r0, sp, #8
   d6d50:	f7ff ffc8 	bl	d6ce4 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d6d54:	9b02      	ldr	r3, [sp, #8]
   d6d56:	892a      	ldrh	r2, [r5, #8]
   d6d58:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6d5a:	686b      	ldr	r3, [r5, #4]
   d6d5c:	9802      	ldr	r0, [sp, #8]
   d6d5e:	242a      	movs	r4, #42	; 0x2a
   d6d60:	4374      	muls	r4, r6
   d6d62:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d6d64:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6d66:	7e5b      	ldrb	r3, [r3, #25]
   d6d68:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d6d6c:	bf1e      	ittt	ne
   d6d6e:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d6d72:	f043 0302 	orrne.w	r3, r3, #2
   d6d76:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d6d7a:	686b      	ldr	r3, [r5, #4]
   d6d7c:	4423      	add	r3, r4
   d6d7e:	7e5b      	ldrb	r3, [r3, #25]
   d6d80:	075b      	lsls	r3, r3, #29
   d6d82:	bf42      	ittt	mi
   d6d84:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6d88:	f043 0304 	orrmi.w	r3, r3, #4
   d6d8c:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d6d90:	686b      	ldr	r3, [r5, #4]
   d6d92:	4423      	add	r3, r4
   d6d94:	7e5b      	ldrb	r3, [r3, #25]
   d6d96:	0719      	lsls	r1, r3, #28
   d6d98:	bf42      	ittt	mi
   d6d9a:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6d9e:	f043 0308 	orrmi.w	r3, r3, #8
   d6da2:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d6da6:	686b      	ldr	r3, [r5, #4]
   d6da8:	4423      	add	r3, r4
   d6daa:	7e5b      	ldrb	r3, [r3, #25]
   d6dac:	06da      	lsls	r2, r3, #27
   d6dae:	bf42      	ittt	mi
   d6db0:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6db4:	f043 0310 	orrmi.w	r3, r3, #16
   d6db8:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6dbc:	686b      	ldr	r3, [r5, #4]
   d6dbe:	4423      	add	r3, r4
   d6dc0:	7e5b      	ldrb	r3, [r3, #25]
   d6dc2:	069b      	lsls	r3, r3, #26
   d6dc4:	bf42      	ittt	mi
   d6dc6:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6dca:	f043 0320 	orrmi.w	r3, r3, #32
   d6dce:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d6dd2:	6869      	ldr	r1, [r5, #4]
   d6dd4:	4421      	add	r1, r4
   d6dd6:	3104      	adds	r1, #4
   d6dd8:	f7fe fe70 	bl	d5abc <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6ddc:	686a      	ldr	r2, [r5, #4]
   d6dde:	9b02      	ldr	r3, [sp, #8]
   d6de0:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d6de2:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d6de4:	8be2      	ldrh	r2, [r4, #30]
   d6de6:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d6de8:	8c22      	ldrh	r2, [r4, #32]
   d6dea:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d6dec:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d6dee:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d6df0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d6df2:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d6df4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d6df6:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d6df8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d6dfa:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6dfc:	6838      	ldr	r0, [r7, #0]
   d6dfe:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d6e02:	a804      	add	r0, sp, #16
   d6e04:	f7ff fa7d 	bl	d6302 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6e08:	4620      	mov	r0, r4
   d6e0a:	a904      	add	r1, sp, #16
   d6e0c:	f7ff ff14 	bl	d6c38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6e10:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6e12:	a805      	add	r0, sp, #20
   d6e14:	f7ff fa8d 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e18:	b954      	cbnz	r4, d6e30 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6e1a:	2320      	movs	r3, #32
   d6e1c:	9304      	str	r3, [sp, #16]
   d6e1e:	f8cd 8000 	str.w	r8, [sp]
   d6e22:	4623      	mov	r3, r4
   d6e24:	aa04      	add	r2, sp, #16
   d6e26:	4906      	ldr	r1, [pc, #24]	; (d6e40 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d6e28:	9405      	str	r4, [sp, #20]
   d6e2a:	2032      	movs	r0, #50	; 0x32
   d6e2c:	f7fe fa24 	bl	d5278 <log_message>
   d6e30:	a803      	add	r0, sp, #12
   d6e32:	f7ff fa7e 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6e36:	3601      	adds	r6, #1
   d6e38:	e786      	b.n	d6d48 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d6e3a:	b00c      	add	sp, #48	; 0x30
   d6e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e40:	000da3e0 	.word	0x000da3e0
   d6e44:	000da4dd 	.word	0x000da4dd

000d6e48 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6e48:	b510      	push	{r4, lr}
   d6e4a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6e4c:	6840      	ldr	r0, [r0, #4]
   d6e4e:	b108      	cbz	r0, d6e54 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6e50:	f7fd f923 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6e54:	4620      	mov	r0, r4
   d6e56:	bd10      	pop	{r4, pc}

000d6e58 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6e58:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6e5a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6e5c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6e5e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6e62:	4668      	mov	r0, sp
   d6e64:	f7ff fff0 	bl	d6e48 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6e68:	b003      	add	sp, #12
   d6e6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6e70:	b538      	push	{r3, r4, r5, lr}
   d6e72:	2300      	movs	r3, #0
   d6e74:	4604      	mov	r4, r0
   d6e76:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6e78:	2014      	movs	r0, #20
   d6e7a:	460d      	mov	r5, r1
   d6e7c:	f7fd f90b 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6e80:	b128      	cbz	r0, d6e8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6e82:	2301      	movs	r3, #1
   d6e84:	6043      	str	r3, [r0, #4]
   d6e86:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6e88:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6e8a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6e8c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6e8e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6e90:	4620      	mov	r0, r4
   d6e92:	bd38      	pop	{r3, r4, r5, pc}
   d6e94:	000da3b0 	.word	0x000da3b0

000d6e98 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d6e98:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6e9a:	2500      	movs	r5, #0
   d6e9c:	b086      	sub	sp, #24
   d6e9e:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6ea0:	6045      	str	r5, [r0, #4]
   d6ea2:	4604      	mov	r4, r0
   d6ea4:	2018      	movs	r0, #24
   d6ea6:	f7fd f8f6 	bl	d4096 <_Znwj>
   d6eaa:	f8cd d010 	str.w	sp, [sp, #16]
   d6eae:	4606      	mov	r6, r0
   d6eb0:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6eb2:	b118      	cbz	r0, d6ebc <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6eb4:	f7fe fd6e 	bl	d5994 <_ZN8particle7BleUuidC1Ev>
   d6eb8:	82b5      	strh	r5, [r6, #20]
   d6eba:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6ebc:	4631      	mov	r1, r6
   d6ebe:	ab01      	add	r3, sp, #4
   d6ec0:	aa02      	add	r2, sp, #8
   d6ec2:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6ec4:	9505      	str	r5, [sp, #20]
   d6ec6:	f7ff ffd3 	bl	d6e70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6eca:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6ecc:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6ece:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6ed0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6ed2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6ed4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6ed6:	f7ff fa2c 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6eda:	a804      	add	r0, sp, #16
   d6edc:	f7ff ffb4 	bl	d6e48 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d6ee0:	6823      	ldr	r3, [r4, #0]
   d6ee2:	b90b      	cbnz	r3, d6ee8 <_ZN8particle10BleServiceC1Ev+0x50>
   d6ee4:	f7fe fc6c 	bl	d57c0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6ee8:	4620      	mov	r0, r4
   d6eea:	b006      	add	sp, #24
   d6eec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ef0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d6ef4:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6f78 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6ef8:	b08c      	sub	sp, #48	; 0x30
   d6efa:	4606      	mov	r6, r0
   d6efc:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6efe:	2500      	movs	r5, #0
   d6f00:	6833      	ldr	r3, [r6, #0]
   d6f02:	429d      	cmp	r5, r3
   d6f04:	d233      	bcs.n	d6f6e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d6f06:	a802      	add	r0, sp, #8
   d6f08:	f7ff ffc6 	bl	d6e98 <_ZN8particle10BleServiceC1Ev>
   d6f0c:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d6f0e:	6871      	ldr	r1, [r6, #4]
   d6f10:	9802      	ldr	r0, [sp, #8]
   d6f12:	436c      	muls	r4, r5
   d6f14:	4421      	add	r1, r4
   d6f16:	3104      	adds	r1, #4
   d6f18:	f7fe fdd0 	bl	d5abc <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d6f1c:	6873      	ldr	r3, [r6, #4]
   d6f1e:	9a02      	ldr	r2, [sp, #8]
   d6f20:	4423      	add	r3, r4
   d6f22:	a902      	add	r1, sp, #8
   d6f24:	8b1b      	ldrh	r3, [r3, #24]
   d6f26:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d6f28:	6873      	ldr	r3, [r6, #4]
   d6f2a:	441c      	add	r4, r3
   d6f2c:	8b63      	ldrh	r3, [r4, #26]
   d6f2e:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d6f30:	6838      	ldr	r0, [r7, #0]
   d6f32:	f100 040c 	add.w	r4, r0, #12
   d6f36:	a804      	add	r0, sp, #16
   d6f38:	f7ff f9f1 	bl	d631e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	a904      	add	r1, sp, #16
   d6f40:	f7ff fd2b 	bl	d699a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6f44:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f46:	a805      	add	r0, sp, #20
   d6f48:	f7ff f9f3 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f4c:	b954      	cbnz	r4, d6f64 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d6f4e:	2320      	movs	r3, #32
   d6f50:	9304      	str	r3, [sp, #16]
   d6f52:	f8cd 8000 	str.w	r8, [sp]
   d6f56:	4623      	mov	r3, r4
   d6f58:	aa04      	add	r2, sp, #16
   d6f5a:	4906      	ldr	r1, [pc, #24]	; (d6f74 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d6f5c:	9405      	str	r4, [sp, #20]
   d6f5e:	2032      	movs	r0, #50	; 0x32
   d6f60:	f7fe f98a 	bl	d5278 <log_message>
   d6f64:	a803      	add	r0, sp, #12
   d6f66:	f7ff f9e4 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6f6a:	3501      	adds	r5, #1
   d6f6c:	e7c8      	b.n	d6f00 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d6f6e:	b00c      	add	sp, #48	; 0x30
   d6f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f74:	000da3e0 	.word	0x000da3e0
   d6f78:	000da509 	.word	0x000da509

000d6f7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6f7c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f7e:	4c06      	ldr	r4, [pc, #24]	; (d6f98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6f80:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6f82:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f84:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6f86:	f7fe f88f 	bl	d50a8 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6f8a:	4620      	mov	r0, r4
   d6f8c:	4a03      	ldr	r2, [pc, #12]	; (d6f9c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6f8e:	4904      	ldr	r1, [pc, #16]	; (d6fa0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6f94:	f001 be8b 	b.w	d8cae <__aeabi_atexit>
   d6f98:	2003e3a4 	.word	0x2003e3a4
   d6f9c:	2003d880 	.word	0x2003d880
   d6fa0:	000d5773 	.word	0x000d5773

000d6fa4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fa6:	4606      	mov	r6, r0
   d6fa8:	460d      	mov	r5, r1
   d6faa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6fac:	2400      	movs	r4, #0
  while (size--) {
   d6fae:	42bd      	cmp	r5, r7
   d6fb0:	d00c      	beq.n	d6fcc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6fb2:	6833      	ldr	r3, [r6, #0]
   d6fb4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6fb8:	689b      	ldr	r3, [r3, #8]
   d6fba:	4630      	mov	r0, r6
   d6fbc:	4798      	blx	r3
     if (chunk>=0)
   d6fbe:	2800      	cmp	r0, #0
   d6fc0:	db01      	blt.n	d6fc6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6fc2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6fc4:	e7f3      	b.n	d6fae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6fc6:	2c00      	cmp	r4, #0
   d6fc8:	bf08      	it	eq
   d6fca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6fcc:	4620      	mov	r0, r4
   d6fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6fd0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6fd0:	b570      	push	{r4, r5, r6, lr}
   d6fd2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6fd4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6fd6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6fd8:	b149      	cbz	r1, d6fee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6fda:	f002 f9a5 	bl	d9328 <strlen>
   d6fde:	682b      	ldr	r3, [r5, #0]
   d6fe0:	4602      	mov	r2, r0
   d6fe2:	4621      	mov	r1, r4
   d6fe4:	4628      	mov	r0, r5
   d6fe6:	68db      	ldr	r3, [r3, #12]
    }
   d6fe8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6fec:	4718      	bx	r3
    }
   d6fee:	bd70      	pop	{r4, r5, r6, pc}

000d6ff0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6ff0:	6803      	ldr	r3, [r0, #0]
   d6ff2:	689b      	ldr	r3, [r3, #8]
   d6ff4:	4718      	bx	r3

000d6ff6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6ff6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6ff8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6ffa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6ffc:	f7ff fff8 	bl	d6ff0 <_ZN5Print5printEc>
  n += print('\n');
   d7000:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d7002:	4604      	mov	r4, r0
  n += print('\n');
   d7004:	4628      	mov	r0, r5
   d7006:	f7ff fff3 	bl	d6ff0 <_ZN5Print5printEc>
  return n;
}
   d700a:	4420      	add	r0, r4
   d700c:	bd38      	pop	{r3, r4, r5, pc}

000d700e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d700e:	b530      	push	{r4, r5, lr}
   d7010:	b08b      	sub	sp, #44	; 0x2c
   d7012:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7014:	2100      	movs	r1, #0
   d7016:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d701a:	2a01      	cmp	r2, #1
   d701c:	bf98      	it	ls
   d701e:	220a      	movls	r2, #10
   d7020:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d7024:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7028:	fb05 3312 	mls	r3, r5, r2, r3
   d702c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7030:	2b09      	cmp	r3, #9
   d7032:	bf94      	ite	ls
   d7034:	3330      	addls	r3, #48	; 0x30
   d7036:	3337      	addhi	r3, #55	; 0x37
   d7038:	b2db      	uxtb	r3, r3
   d703a:	4621      	mov	r1, r4
   d703c:	f804 3901 	strb.w	r3, [r4], #-1
   d7040:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d7042:	2d00      	cmp	r5, #0
   d7044:	d1ee      	bne.n	d7024 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7046:	f7ff ffc3 	bl	d6fd0 <_ZN5Print5writeEPKc>
}
   d704a:	b00b      	add	sp, #44	; 0x2c
   d704c:	bd30      	pop	{r4, r5, pc}

000d704e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d704e:	b40c      	push	{r2, r3}
   d7050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7054:	b087      	sub	sp, #28
   d7056:	af00      	add	r7, sp, #0
   d7058:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d705c:	4605      	mov	r5, r0
   d705e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d7062:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7064:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d7066:	4623      	mov	r3, r4
   d7068:	464a      	mov	r2, r9
   d706a:	2114      	movs	r1, #20
   d706c:	1d38      	adds	r0, r7, #4
   d706e:	f7fe f9cf 	bl	d5410 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d7072:	2813      	cmp	r0, #19
   d7074:	d805      	bhi.n	d7082 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7076:	1d39      	adds	r1, r7, #4
   d7078:	4628      	mov	r0, r5
   d707a:	f7ff ffa9 	bl	d6fd0 <_ZN5Print5writeEPKc>
   d707e:	4604      	mov	r4, r0
   d7080:	e013      	b.n	d70aa <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7082:	f100 0308 	add.w	r3, r0, #8
   d7086:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d708a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d708c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7090:	1c41      	adds	r1, r0, #1
   d7092:	4623      	mov	r3, r4
   d7094:	464a      	mov	r2, r9
   d7096:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7098:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d709a:	f7fe f9b9 	bl	d5410 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d709e:	4669      	mov	r1, sp
   d70a0:	4628      	mov	r0, r5
   d70a2:	f7ff ff95 	bl	d6fd0 <_ZN5Print5writeEPKc>
   d70a6:	4604      	mov	r4, r0
   d70a8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d70aa:	b11e      	cbz	r6, d70b4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d70ac:	4628      	mov	r0, r5
   d70ae:	f7ff ffa2 	bl	d6ff6 <_ZN5Print7printlnEv>
   d70b2:	4404      	add	r4, r0
    return n;
}
   d70b4:	4620      	mov	r0, r4
   d70b6:	371c      	adds	r7, #28
   d70b8:	46bd      	mov	sp, r7
   d70ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d70be:	b002      	add	sp, #8
   d70c0:	4770      	bx	lr

000d70c2 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d70c2:	6880      	ldr	r0, [r0, #8]
   d70c4:	6803      	ldr	r3, [r0, #0]
   d70c6:	68db      	ldr	r3, [r3, #12]
   d70c8:	4718      	bx	r3

000d70ca <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d70ca:	4770      	bx	lr

000d70cc <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d70cc:	b119      	cbz	r1, d70d6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d70ce:	680b      	ldr	r3, [r1, #0]
   d70d0:	4608      	mov	r0, r1
   d70d2:	685b      	ldr	r3, [r3, #4]
   d70d4:	4718      	bx	r3
   d70d6:	4770      	bx	lr

000d70d8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d70d8:	b119      	cbz	r1, d70e2 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d70da:	680b      	ldr	r3, [r1, #0]
   d70dc:	4608      	mov	r0, r1
   d70de:	685b      	ldr	r3, [r3, #4]
   d70e0:	4718      	bx	r3
   d70e2:	4770      	bx	lr

000d70e4 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d70e4:	4770      	bx	lr

000d70e6 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d70e6:	4770      	bx	lr

000d70e8 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d70e8:	4770      	bx	lr

000d70ea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d70ea:	b538      	push	{r3, r4, r5, lr}
   d70ec:	4604      	mov	r4, r0
   d70ee:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d70f0:	6800      	ldr	r0, [r0, #0]
   d70f2:	212e      	movs	r1, #46	; 0x2e
   d70f4:	f002 f8fc 	bl	d92f0 <strchrnul>
    size = s - category;
   d70f8:	6823      	ldr	r3, [r4, #0]
   d70fa:	1ac3      	subs	r3, r0, r3
   d70fc:	602b      	str	r3, [r5, #0]
    if (size) {
   d70fe:	b123      	cbz	r3, d710a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d7100:	7803      	ldrb	r3, [r0, #0]
   d7102:	b103      	cbz	r3, d7106 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d7104:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d7106:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7108:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d710a:	4618      	mov	r0, r3
}
   d710c:	bd38      	pop	{r3, r4, r5, pc}

000d710e <_ZN5spark16JSONStreamWriterD0Ev>:
   d710e:	b510      	push	{r4, lr}
   d7110:	210c      	movs	r1, #12
   d7112:	4604      	mov	r4, r0
   d7114:	f001 fdd8 	bl	d8cc8 <_ZdlPvj>
   d7118:	4620      	mov	r0, r4
   d711a:	bd10      	pop	{r4, pc}

000d711c <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d711c:	b510      	push	{r4, lr}
   d711e:	2104      	movs	r1, #4
   d7120:	4604      	mov	r4, r0
   d7122:	f001 fdd1 	bl	d8cc8 <_ZdlPvj>
   d7126:	4620      	mov	r0, r4
   d7128:	bd10      	pop	{r4, pc}

000d712a <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d712a:	b510      	push	{r4, lr}
   d712c:	2104      	movs	r1, #4
   d712e:	4604      	mov	r4, r0
   d7130:	f001 fdca 	bl	d8cc8 <_ZdlPvj>
   d7134:	4620      	mov	r0, r4
   d7136:	bd10      	pop	{r4, pc}

000d7138 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d7138:	b538      	push	{r3, r4, r5, lr}
   d713a:	460c      	mov	r4, r1
   d713c:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d713e:	f001 f9a3 	bl	d8488 <_Z16_fetch_usbserialv>
   d7142:	4284      	cmp	r4, r0
   d7144:	d00d      	beq.n	d7162 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d7146:	f001 fa27 	bl	d8598 <_Z22__fetch_global_Serial1v>
   d714a:	4284      	cmp	r4, r0
   d714c:	d105      	bne.n	d715a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d714e:	f001 fa23 	bl	d8598 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d7152:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d7156:	f001 ba1c 	b.w	d8592 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d715a:	4621      	mov	r1, r4
   d715c:	4628      	mov	r0, r5
   d715e:	f7ff ffbb 	bl	d70d8 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d7162:	bd38      	pop	{r3, r4, r5, pc}

000d7164 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d7164:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d7166:	f002 f8cd 	bl	d9304 <strcmp>
}
   d716a:	fab0 f080 	clz	r0, r0
   d716e:	0940      	lsrs	r0, r0, #5
   d7170:	bd08      	pop	{r3, pc}

000d7172 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7172:	b538      	push	{r3, r4, r5, lr}
   d7174:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d7176:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7178:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d717a:	f002 f8d5 	bl	d9328 <strlen>
   d717e:	4621      	mov	r1, r4
   d7180:	4602      	mov	r2, r0
   d7182:	4628      	mov	r0, r5
}
   d7184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d7188:	f001 bd2f 	b.w	d8bea <_ZN5spark10JSONWriter5valueEPKcj>

000d718c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d718c:	6800      	ldr	r0, [r0, #0]
   d718e:	f7fd bf9b 	b.w	d50c8 <os_mutex_recursive_lock>

000d7192 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d7192:	b570      	push	{r4, r5, r6, lr}
   d7194:	4604      	mov	r4, r0
    write(str, strlen(str));
   d7196:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d7198:	460d      	mov	r5, r1
    write(str, strlen(str));
   d719a:	f002 f8c5 	bl	d9328 <strlen>
   d719e:	6823      	ldr	r3, [r4, #0]
   d71a0:	4602      	mov	r2, r0
   d71a2:	4629      	mov	r1, r5
   d71a4:	4620      	mov	r0, r4
   d71a6:	68db      	ldr	r3, [r3, #12]
}
   d71a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d71ac:	4718      	bx	r3

000d71ae <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d71ae:	b513      	push	{r0, r1, r4, lr}
   d71b0:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d71b2:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d71b4:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d71b8:	68d4      	ldr	r4, [r2, #12]
   d71ba:	4619      	mov	r1, r3
   d71bc:	2201      	movs	r2, #1
   d71be:	47a0      	blx	r4
}
   d71c0:	b002      	add	sp, #8
   d71c2:	bd10      	pop	{r4, pc}

000d71c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d71c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d71c8:	6845      	ldr	r5, [r0, #4]
   d71ca:	6807      	ldr	r7, [r0, #0]
   d71cc:	b085      	sub	sp, #20
   d71ce:	4691      	mov	r9, r2
   d71d0:	2214      	movs	r2, #20
   d71d2:	4355      	muls	r5, r2
   d71d4:	9301      	str	r3, [sp, #4]
   d71d6:	10ab      	asrs	r3, r5, #2
   d71d8:	4d19      	ldr	r5, [pc, #100]	; (d7240 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d71da:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d71dc:	435d      	muls	r5, r3
   d71de:	468b      	mov	fp, r1
   d71e0:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d71e2:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d71e4:	2d00      	cmp	r5, #0
   d71e6:	9303      	str	r3, [sp, #12]
   d71e8:	dd23      	ble.n	d7232 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d71ea:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d71ec:	106e      	asrs	r6, r5, #1
   d71ee:	fb03 f006 	mul.w	r0, r3, r6
   d71f2:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d71f6:	464a      	mov	r2, r9
   d71f8:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d71fc:	5820      	ldr	r0, [r4, r0]
   d71fe:	45d1      	cmp	r9, sl
   d7200:	bf28      	it	cs
   d7202:	4652      	movcs	r2, sl
   d7204:	4659      	mov	r1, fp
   d7206:	f002 f897 	bl	d9338 <strncmp>
                if (cmp == 0) {
   d720a:	9b03      	ldr	r3, [sp, #12]
   d720c:	b948      	cbnz	r0, d7222 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d720e:	45d1      	cmp	r9, sl
   d7210:	d103      	bne.n	d721a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d7212:	9a01      	ldr	r2, [sp, #4]
   d7214:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d7216:	4635      	mov	r5, r6
   d7218:	e7e4      	b.n	d71e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d721a:	bf8c      	ite	hi
   d721c:	2001      	movhi	r0, #1
   d721e:	2000      	movls	r0, #0
   d7220:	e000      	b.n	d7224 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d7222:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d7224:	2800      	cmp	r0, #0
   d7226:	d0f6      	beq.n	d7216 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d7228:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d722a:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d722e:	3e01      	subs	r6, #1
   d7230:	e7f1      	b.n	d7216 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d7232:	1be4      	subs	r4, r4, r7
}
   d7234:	4802      	ldr	r0, [pc, #8]	; (d7240 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d7236:	10a4      	asrs	r4, r4, #2
}
   d7238:	4360      	muls	r0, r4
   d723a:	b005      	add	sp, #20
   d723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7240:	cccccccd 	.word	0xcccccccd

000d7244 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7244:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7246:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d7248:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d724a:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d724c:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d724e:	b313      	cbz	r3, d7296 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d7250:	b309      	cbz	r1, d7296 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7252:	af04      	add	r7, sp, #16
   d7254:	2300      	movs	r3, #0
   d7256:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d725a:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d725e:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7260:	4639      	mov	r1, r7
   d7262:	a801      	add	r0, sp, #4
   d7264:	f7ff ff41 	bl	d70ea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7268:	4601      	mov	r1, r0
   d726a:	b1a0      	cbz	r0, d7296 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d726c:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d726e:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7270:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d7274:	4620      	mov	r0, r4
   d7276:	f7ff ffa5 	bl	d71c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d727a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d727e:	b153      	cbz	r3, d7296 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d7280:	6823      	ldr	r3, [r4, #0]
   d7282:	2414      	movs	r4, #20
   d7284:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d7288:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d728a:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d728e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7290:	bfa8      	it	ge
   d7292:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7294:	e7e4      	b.n	d7260 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d7296:	4630      	mov	r0, r6
   d7298:	b005      	add	sp, #20
   d729a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d729c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d729c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d729e:	4c09      	ldr	r4, [pc, #36]	; (d72c4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d72a0:	6823      	ldr	r3, [r4, #0]
   d72a2:	07db      	lsls	r3, r3, #31
   d72a4:	d40b      	bmi.n	d72be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d72a6:	4620      	mov	r0, r4
   d72a8:	f7fc ff06 	bl	d40b8 <__cxa_guard_acquire>
   d72ac:	b138      	cbz	r0, d72be <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d72ae:	4620      	mov	r0, r4
   d72b0:	f7fc ff07 	bl	d40c2 <__cxa_guard_release>
   d72b4:	4a04      	ldr	r2, [pc, #16]	; (d72c8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d72b6:	4905      	ldr	r1, [pc, #20]	; (d72cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d72b8:	4805      	ldr	r0, [pc, #20]	; (d72d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d72ba:	f001 fcf8 	bl	d8cae <__aeabi_atexit>
    return &factory;
}
   d72be:	4804      	ldr	r0, [pc, #16]	; (d72d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d72c0:	bd10      	pop	{r4, pc}
   d72c2:	bf00      	nop
   d72c4:	2003e3a8 	.word	0x2003e3a8
   d72c8:	2003d880 	.word	0x2003d880
   d72cc:	000d70e7 	.word	0x000d70e7
   d72d0:	2003d7c4 	.word	0x2003d7c4

000d72d4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d72d4:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d72d6:	4c09      	ldr	r4, [pc, #36]	; (d72fc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d72d8:	6823      	ldr	r3, [r4, #0]
   d72da:	07db      	lsls	r3, r3, #31
   d72dc:	d40b      	bmi.n	d72f6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d72de:	4620      	mov	r0, r4
   d72e0:	f7fc feea 	bl	d40b8 <__cxa_guard_acquire>
   d72e4:	b138      	cbz	r0, d72f6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d72e6:	4620      	mov	r0, r4
   d72e8:	f7fc feeb 	bl	d40c2 <__cxa_guard_release>
   d72ec:	4a04      	ldr	r2, [pc, #16]	; (d7300 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d72ee:	4905      	ldr	r1, [pc, #20]	; (d7304 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d72f0:	4805      	ldr	r0, [pc, #20]	; (d7308 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d72f2:	f001 fcdc 	bl	d8cae <__aeabi_atexit>
    return &factory;
}
   d72f6:	4804      	ldr	r0, [pc, #16]	; (d7308 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d72f8:	bd10      	pop	{r4, pc}
   d72fa:	bf00      	nop
   d72fc:	2003e3d8 	.word	0x2003e3d8
   d7300:	2003d880 	.word	0x2003d880
   d7304:	000d70e5 	.word	0x000d70e5
   d7308:	2003d7c0 	.word	0x2003d7c0

000d730c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d730c:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d730e:	2500      	movs	r5, #0
   d7310:	4604      	mov	r4, r0
   d7312:	6005      	str	r5, [r0, #0]
   d7314:	6045      	str	r5, [r0, #4]
   d7316:	6085      	str	r5, [r0, #8]
   d7318:	6105      	str	r5, [r0, #16]
   d731a:	6145      	str	r5, [r0, #20]
   d731c:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d731e:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d7322:	f7fd fec1 	bl	d50a8 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d7326:	f7ff ffb9 	bl	d729c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d732a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d732c:	f7ff ffd2 	bl	d72d4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d7330:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7332:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d7334:	4620      	mov	r0, r4
   d7336:	bd38      	pop	{r3, r4, r5, pc}

000d7338 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d7338:	b510      	push	{r4, lr}
    static LogManager mgr;
   d733a:	4c0a      	ldr	r4, [pc, #40]	; (d7364 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d733c:	6823      	ldr	r3, [r4, #0]
   d733e:	07db      	lsls	r3, r3, #31
   d7340:	d40e      	bmi.n	d7360 <_ZN5spark10LogManager8instanceEv+0x28>
   d7342:	4620      	mov	r0, r4
   d7344:	f7fc feb8 	bl	d40b8 <__cxa_guard_acquire>
   d7348:	b150      	cbz	r0, d7360 <_ZN5spark10LogManager8instanceEv+0x28>
   d734a:	4807      	ldr	r0, [pc, #28]	; (d7368 <_ZN5spark10LogManager8instanceEv+0x30>)
   d734c:	f7ff ffde 	bl	d730c <_ZN5spark10LogManagerC1Ev>
   d7350:	4620      	mov	r0, r4
   d7352:	f7fc feb6 	bl	d40c2 <__cxa_guard_release>
   d7356:	4a05      	ldr	r2, [pc, #20]	; (d736c <_ZN5spark10LogManager8instanceEv+0x34>)
   d7358:	4905      	ldr	r1, [pc, #20]	; (d7370 <_ZN5spark10LogManager8instanceEv+0x38>)
   d735a:	4803      	ldr	r0, [pc, #12]	; (d7368 <_ZN5spark10LogManager8instanceEv+0x30>)
   d735c:	f001 fca7 	bl	d8cae <__aeabi_atexit>
    return &mgr;
}
   d7360:	4801      	ldr	r0, [pc, #4]	; (d7368 <_ZN5spark10LogManager8instanceEv+0x30>)
   d7362:	bd10      	pop	{r4, pc}
   d7364:	2003e3ac 	.word	0x2003e3ac
   d7368:	2003e3b0 	.word	0x2003e3b0
   d736c:	2003d880 	.word	0x2003d880
   d7370:	000d77a3 	.word	0x000d77a3

000d7374 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d7374:	2300      	movs	r3, #0
   d7376:	4a02      	ldr	r2, [pc, #8]	; (d7380 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7378:	4902      	ldr	r1, [pc, #8]	; (d7384 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d737a:	4803      	ldr	r0, [pc, #12]	; (d7388 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d737c:	f7fd bf94 	b.w	d52a8 <log_set_callbacks>
   d7380:	000d7685 	.word	0x000d7685
   d7384:	000d7615 	.word	0x000d7615
   d7388:	000d759d 	.word	0x000d759d

000d738c <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d738c:	2300      	movs	r3, #0
   d738e:	461a      	mov	r2, r3
   d7390:	4619      	mov	r1, r3
   d7392:	4618      	mov	r0, r3
   d7394:	f7fd bf88 	b.w	d52a8 <log_set_callbacks>

000d7398 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7398:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d739a:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d739c:	688e      	ldr	r6, [r1, #8]
   d739e:	f851 3b04 	ldr.w	r3, [r1], #4
   d73a2:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d73a6:	4605      	mov	r5, r0
   d73a8:	a801      	add	r0, sp, #4
   d73aa:	f7fe ffa3 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d73ae:	4622      	mov	r2, r4
   d73b0:	4631      	mov	r1, r6
   d73b2:	4628      	mov	r0, r5
   d73b4:	f001 fc50 	bl	d8c58 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d73b8:	a801      	add	r0, sp, #4
   d73ba:	f7fe ffba 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d73be:	4628      	mov	r0, r5
   d73c0:	b002      	add	sp, #8
   d73c2:	bd70      	pop	{r4, r5, r6, pc}

000d73c4 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d73c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d73c6:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d73c8:	690e      	ldr	r6, [r1, #16]
   d73ca:	f851 3b04 	ldr.w	r3, [r1], #4
   d73ce:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d73d2:	4605      	mov	r5, r0
   d73d4:	a801      	add	r0, sp, #4
   d73d6:	f7fe ff8d 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d73da:	4622      	mov	r2, r4
   d73dc:	4631      	mov	r1, r6
   d73de:	4628      	mov	r0, r5
   d73e0:	f001 fc55 	bl	d8c8e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d73e4:	a801      	add	r0, sp, #4
   d73e6:	f7fe ffa4 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d73ea:	4628      	mov	r0, r5
   d73ec:	b002      	add	sp, #8
   d73ee:	bd70      	pop	{r4, r5, r6, pc}

000d73f0 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d73f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d73f2:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d73f4:	68ce      	ldr	r6, [r1, #12]
   d73f6:	f851 3b04 	ldr.w	r3, [r1], #4
   d73fa:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d73fe:	4605      	mov	r5, r0
   d7400:	a801      	add	r0, sp, #4
   d7402:	f7fe ff77 	bl	d62f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d7406:	4622      	mov	r2, r4
   d7408:	4631      	mov	r1, r6
   d740a:	4628      	mov	r0, r5
   d740c:	f001 fbfc 	bl	d8c08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7410:	a801      	add	r0, sp, #4
   d7412:	f7fe ff8e 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7416:	4628      	mov	r0, r5
   d7418:	b002      	add	sp, #8
   d741a:	bd70      	pop	{r4, r5, r6, pc}

000d741c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d741c:	b530      	push	{r4, r5, lr}
   d741e:	b08b      	sub	sp, #44	; 0x2c
   d7420:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d7422:	4601      	mov	r1, r0
   d7424:	a804      	add	r0, sp, #16
   d7426:	f7ff ffb7 	bl	d7398 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d742a:	a804      	add	r0, sp, #16
   d742c:	f001 fb1f 	bl	d8a6e <_ZN5spark18JSONObjectIterator4nextEv>
   d7430:	b1e8      	cbz	r0, d746e <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d7432:	a904      	add	r1, sp, #16
   d7434:	4668      	mov	r0, sp
   d7436:	f7ff ffdb 	bl	d73f0 <_ZNK5spark18JSONObjectIterator4nameEv>
   d743a:	490f      	ldr	r1, [pc, #60]	; (d7478 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d743c:	9802      	ldr	r0, [sp, #8]
   d743e:	f7ff fe91 	bl	d7164 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d7442:	4604      	mov	r4, r0
   d7444:	b110      	cbz	r0, d744c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d7446:	1c2c      	adds	r4, r5, #0
   d7448:	bf18      	it	ne
   d744a:	2401      	movne	r4, #1
   d744c:	a801      	add	r0, sp, #4
   d744e:	f7fe ff70 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7452:	2c00      	cmp	r4, #0
   d7454:	d0e9      	beq.n	d742a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d7456:	a904      	add	r1, sp, #16
   d7458:	4668      	mov	r0, sp
   d745a:	f7ff ffb3 	bl	d73c4 <_ZNK5spark18JSONObjectIterator5valueEv>
   d745e:	4668      	mov	r0, sp
   d7460:	f001 fae5 	bl	d8a2e <_ZNK5spark9JSONValue5toIntEv>
   d7464:	6028      	str	r0, [r5, #0]
   d7466:	a801      	add	r0, sp, #4
   d7468:	f7fe ff63 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d746c:	e7dd      	b.n	d742a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d746e:	a805      	add	r0, sp, #20
   d7470:	f7fe ff5f 	bl	d6332 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d7474:	b00b      	add	sp, #44	; 0x2c
   d7476:	bd30      	pop	{r4, r5, pc}
   d7478:	000da5c0 	.word	0x000da5c0

000d747c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d747c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d747e:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d7480:	4620      	mov	r0, r4
   d7482:	4913      	ldr	r1, [pc, #76]	; (d74d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7484:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d7486:	f001 ff3d 	bl	d9304 <strcmp>
   d748a:	b940      	cbnz	r0, d749e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d748c:	f000 fffc 	bl	d8488 <_Z16_fetch_usbserialv>
   d7490:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d7494:	f000 ffe8 	bl	d8468 <_ZN9USBSerial5beginEl>
        return &Serial;
   d7498:	f000 fff6 	bl	d8488 <_Z16_fetch_usbserialv>
   d749c:	e015      	b.n	d74ca <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d749e:	490d      	ldr	r1, [pc, #52]	; (d74d4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d74a0:	4620      	mov	r0, r4
   d74a2:	f001 ff2f 	bl	d9304 <strcmp>
   d74a6:	b978      	cbnz	r0, d74c8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d74a8:	a902      	add	r1, sp, #8
   d74aa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d74ae:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d74b2:	4628      	mov	r0, r5
   d74b4:	f7ff ffb2 	bl	d741c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d74b8:	f001 f86e 	bl	d8598 <_Z22__fetch_global_Serial1v>
   d74bc:	9901      	ldr	r1, [sp, #4]
   d74be:	f001 f865 	bl	d858c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d74c2:	f001 f869 	bl	d8598 <_Z22__fetch_global_Serial1v>
   d74c6:	e000      	b.n	d74ca <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d74c8:	2000      	movs	r0, #0
}
   d74ca:	b003      	add	sp, #12
   d74cc:	bd30      	pop	{r4, r5, pc}
   d74ce:	bf00      	nop
   d74d0:	000da5c5 	.word	0x000da5c5
   d74d4:	000da5cc 	.word	0x000da5cc

000d74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d74d8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d74da:	6804      	ldr	r4, [r0, #0]
   d74dc:	6843      	ldr	r3, [r0, #4]
   d74de:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d74e0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d74e2:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d74e6:	42a6      	cmp	r6, r4
   d74e8:	d005      	beq.n	d74f6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d74ea:	f104 0008 	add.w	r0, r4, #8
   d74ee:	f7ff fff3 	bl	d74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d74f2:	3414      	adds	r4, #20
   d74f4:	e7f7      	b.n	d74e6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d74f6:	6828      	ldr	r0, [r5, #0]
   d74f8:	f7fd ff6a 	bl	d53d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d74fc:	4628      	mov	r0, r5
   d74fe:	bd70      	pop	{r4, r5, r6, pc}

000d7500 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7500:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7502:	6804      	ldr	r4, [r0, #0]
   d7504:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7506:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7508:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d750c:	42a6      	cmp	r6, r4
   d750e:	d004      	beq.n	d751a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7510:	4620      	mov	r0, r4
   d7512:	f7fd fff5 	bl	d5500 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7516:	3410      	adds	r4, #16
   d7518:	e7f8      	b.n	d750c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d751a:	6828      	ldr	r0, [r5, #0]
   d751c:	f7fd ff58 	bl	d53d0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7520:	4628      	mov	r0, r5
   d7522:	bd70      	pop	{r4, r5, r6, pc}

000d7524 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d7524:	b510      	push	{r4, lr}
   d7526:	4604      	mov	r4, r0
   d7528:	300c      	adds	r0, #12
   d752a:	f7ff ffd5 	bl	d74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d752e:	4620      	mov	r0, r4
   d7530:	f7ff ffe6 	bl	d7500 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7534:	4620      	mov	r0, r4
   d7536:	bd10      	pop	{r4, pc}

000d7538 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7538:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d753a:	4b04      	ldr	r3, [pc, #16]	; (d754c <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d753c:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d753e:	f840 3b04 	str.w	r3, [r0], #4
   d7542:	f7ff ffef 	bl	d7524 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7546:	4620      	mov	r0, r4
   d7548:	bd10      	pop	{r4, pc}
   d754a:	bf00      	nop
   d754c:	000d9c5c 	.word	0x000d9c5c

000d7550 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7550:	b510      	push	{r4, lr}
   d7552:	4604      	mov	r4, r0
   d7554:	f7ff fff0 	bl	d7538 <_ZN5spark16StreamLogHandlerD1Ev>
   d7558:	4620      	mov	r0, r4
   d755a:	2124      	movs	r1, #36	; 0x24
   d755c:	f001 fbb4 	bl	d8cc8 <_ZdlPvj>
   d7560:	4620      	mov	r0, r4
   d7562:	bd10      	pop	{r4, pc}

000d7564 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d7564:	b510      	push	{r4, lr}
   d7566:	4b03      	ldr	r3, [pc, #12]	; (d7574 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7568:	6003      	str	r3, [r0, #0]
   d756a:	4604      	mov	r4, r0
   d756c:	f7ff ffe4 	bl	d7538 <_ZN5spark16StreamLogHandlerD1Ev>
   d7570:	4620      	mov	r0, r4
   d7572:	bd10      	pop	{r4, pc}
   d7574:	000da5b0 	.word	0x000da5b0

000d7578 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7578:	b510      	push	{r4, lr}
   d757a:	4604      	mov	r4, r0
   d757c:	f7ff fff2 	bl	d7564 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7580:	4620      	mov	r0, r4
   d7582:	2124      	movs	r1, #36	; 0x24
   d7584:	f001 fba0 	bl	d8cc8 <_ZdlPvj>
   d7588:	4620      	mov	r0, r4
   d758a:	bd10      	pop	{r4, pc}

000d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d758c:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d758e:	6803      	ldr	r3, [r0, #0]
   d7590:	4604      	mov	r4, r0
   d7592:	6818      	ldr	r0, [r3, #0]
   d7594:	f7fd fda0 	bl	d50d8 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7598:	4620      	mov	r0, r4
   d759a:	bd10      	pop	{r4, pc}

000d759c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d759c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75a0:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d75a2:	4b1b      	ldr	r3, [pc, #108]	; (d7610 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d75a4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d75a6:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d75aa:	b085      	sub	sp, #20
   d75ac:	4682      	mov	sl, r0
   d75ae:	460e      	mov	r6, r1
   d75b0:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d75b2:	bb53      	cbnz	r3, d760a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d75b4:	f7ff fec0 	bl	d7338 <_ZN5spark10LogManager8instanceEv>
   d75b8:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d75ba:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d75bc:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d75be:	f7ff fde5 	bl	d718c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d75c2:	7b23      	ldrb	r3, [r4, #12]
   d75c4:	b9f3      	cbnz	r3, d7604 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d75c6:	2301      	movs	r3, #1
   d75c8:	7323      	strb	r3, [r4, #12]
   d75ca:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d75cc:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d75ce:	b2f6      	uxtb	r6, r6
   d75d0:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d75d4:	454d      	cmp	r5, r9
   d75d6:	d013      	beq.n	d7600 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d75d8:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d75dc:	4641      	mov	r1, r8
   d75de:	1d38      	adds	r0, r7, #4
   d75e0:	f7ff fe30 	bl	d7244 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d75e4:	4286      	cmp	r6, r0
   d75e6:	d3f5      	bcc.n	d75d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d75e8:	683b      	ldr	r3, [r7, #0]
   d75ea:	f8cd b000 	str.w	fp, [sp]
   d75ee:	689b      	ldr	r3, [r3, #8]
   d75f0:	469e      	mov	lr, r3
   d75f2:	4638      	mov	r0, r7
   d75f4:	4643      	mov	r3, r8
   d75f6:	4632      	mov	r2, r6
   d75f8:	4651      	mov	r1, sl
   d75fa:	4677      	mov	r7, lr
   d75fc:	47b8      	blx	r7
   d75fe:	e7e9      	b.n	d75d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7600:	2300      	movs	r3, #0
   d7602:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d7604:	a803      	add	r0, sp, #12
   d7606:	f7ff ffc1 	bl	d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d760a:	b005      	add	sp, #20
   d760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7610:	e000ed00 	.word	0xe000ed00

000d7614 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7614:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7618:	4699      	mov	r9, r3
   d761a:	4b19      	ldr	r3, [pc, #100]	; (d7680 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d761c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d761e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7622:	4607      	mov	r7, r0
   d7624:	4688      	mov	r8, r1
   d7626:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7628:	bb33      	cbnz	r3, d7678 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d762a:	f7ff fe85 	bl	d7338 <_ZN5spark10LogManager8instanceEv>
   d762e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7630:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7632:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7634:	f7ff fdaa 	bl	d718c <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d7638:	7b23      	ldrb	r3, [r4, #12]
   d763a:	b9d3      	cbnz	r3, d7672 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d763c:	2301      	movs	r3, #1
   d763e:	7323      	strb	r3, [r4, #12]
   d7640:	6825      	ldr	r5, [r4, #0]
   d7642:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d7644:	fa5f fb86 	uxtb.w	fp, r6
   d7648:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d764c:	4555      	cmp	r5, sl
   d764e:	d00e      	beq.n	d766e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d7650:	f855 6b04 	ldr.w	r6, [r5], #4
   d7654:	4649      	mov	r1, r9
   d7656:	1d30      	adds	r0, r6, #4
   d7658:	f7ff fdf4 	bl	d7244 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d765c:	4583      	cmp	fp, r0
   d765e:	d3f5      	bcc.n	d764c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d7660:	6833      	ldr	r3, [r6, #0]
   d7662:	4642      	mov	r2, r8
   d7664:	68db      	ldr	r3, [r3, #12]
   d7666:	4639      	mov	r1, r7
   d7668:	4630      	mov	r0, r6
   d766a:	4798      	blx	r3
   d766c:	e7ee      	b.n	d764c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d766e:	2300      	movs	r3, #0
   d7670:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d7672:	a801      	add	r0, sp, #4
   d7674:	f7ff ff8a 	bl	d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d7678:	b003      	add	sp, #12
   d767a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d767e:	bf00      	nop
   d7680:	e000ed00 	.word	0xe000ed00

000d7684 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7684:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7688:	4b15      	ldr	r3, [pc, #84]	; (d76e0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d768a:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d768c:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7690:	4604      	mov	r4, r0
   d7692:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7694:	b9fb      	cbnz	r3, d76d6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d7696:	f7ff fe4f 	bl	d7338 <_ZN5spark10LogManager8instanceEv>
   d769a:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d769c:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d769e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d76a0:	f7ff fd74 	bl	d718c <_ZN14RecursiveMutex4lockEv>
   d76a4:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d76a8:	2646      	movs	r6, #70	; 0x46
   d76aa:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d76ae:	42af      	cmp	r7, r5
   d76b0:	d107      	bne.n	d76c2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d76b2:	a801      	add	r0, sp, #4
   d76b4:	f7ff ff6a 	bl	d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d76b8:	42b4      	cmp	r4, r6
   d76ba:	bfb4      	ite	lt
   d76bc:	2000      	movlt	r0, #0
   d76be:	2001      	movge	r0, #1
   d76c0:	e00a      	b.n	d76d8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d76c2:	f855 0b04 	ldr.w	r0, [r5], #4
   d76c6:	4641      	mov	r1, r8
   d76c8:	3004      	adds	r0, #4
   d76ca:	f7ff fdbb 	bl	d7244 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d76ce:	4286      	cmp	r6, r0
   d76d0:	bfa8      	it	ge
   d76d2:	4606      	movge	r6, r0
   d76d4:	e7eb      	b.n	d76ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d76d6:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d76d8:	b002      	add	sp, #8
   d76da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d76de:	bf00      	nop
   d76e0:	e000ed00 	.word	0xe000ed00

000d76e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d76e4:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d76e6:	6803      	ldr	r3, [r0, #0]
   d76e8:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d76ea:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d76ec:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d76f0:	429a      	cmp	r2, r3
   d76f2:	4618      	mov	r0, r3
   d76f4:	d00e      	beq.n	d7714 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d76f6:	6806      	ldr	r6, [r0, #0]
   d76f8:	680d      	ldr	r5, [r1, #0]
   d76fa:	42ae      	cmp	r6, r5
   d76fc:	f103 0304 	add.w	r3, r3, #4
   d7700:	d1f6      	bne.n	d76f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7702:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7704:	1a52      	subs	r2, r2, r1
   d7706:	f001 fd99 	bl	d923c <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d770a:	6863      	ldr	r3, [r4, #4]
   d770c:	3b01      	subs	r3, #1
   d770e:	6063      	str	r3, [r4, #4]
    return true;
   d7710:	2001      	movs	r0, #1
}
   d7712:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7714:	2000      	movs	r0, #0
   d7716:	bd70      	pop	{r4, r5, r6, pc}

000d7718 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d771a:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d771c:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d771e:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7720:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d7722:	f7ff fd33 	bl	d718c <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7726:	a901      	add	r1, sp, #4
   d7728:	4620      	mov	r0, r4
   d772a:	f7ff ffdb 	bl	d76e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d772e:	b920      	cbnz	r0, d773a <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7730:	a803      	add	r0, sp, #12
   d7732:	f7ff ff2b 	bl	d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d7736:	b004      	add	sp, #16
   d7738:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d773a:	6863      	ldr	r3, [r4, #4]
   d773c:	2b00      	cmp	r3, #0
   d773e:	d1f7      	bne.n	d7730 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d7740:	f7ff fe24 	bl	d738c <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d7744:	e7f4      	b.n	d7730 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d7746 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d7746:	b570      	push	{r4, r5, r6, lr}
   d7748:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d774a:	6943      	ldr	r3, [r0, #20]
   d774c:	2618      	movs	r6, #24
   d774e:	4604      	mov	r4, r0
   d7750:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7754:	42ae      	cmp	r6, r5
   d7756:	d015      	beq.n	d7784 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7758:	f105 0110 	add.w	r1, r5, #16
   d775c:	4620      	mov	r0, r4
   d775e:	f7ff ffc1 	bl	d76e4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7762:	6863      	ldr	r3, [r4, #4]
   d7764:	b90b      	cbnz	r3, d776a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7766:	f7ff fe11 	bl	d738c <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d776a:	69e0      	ldr	r0, [r4, #28]
   d776c:	6929      	ldr	r1, [r5, #16]
   d776e:	6803      	ldr	r3, [r0, #0]
   d7770:	68db      	ldr	r3, [r3, #12]
   d7772:	4798      	blx	r3
        if (h.stream) {
   d7774:	6969      	ldr	r1, [r5, #20]
   d7776:	b119      	cbz	r1, d7780 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7778:	6a20      	ldr	r0, [r4, #32]
   d777a:	6803      	ldr	r3, [r0, #0]
   d777c:	68db      	ldr	r3, [r3, #12]
   d777e:	4798      	blx	r3
   d7780:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d7782:	e7e7      	b.n	d7754 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7784:	6925      	ldr	r5, [r4, #16]
   d7786:	6963      	ldr	r3, [r4, #20]
   d7788:	2618      	movs	r6, #24
   d778a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d778e:	42b5      	cmp	r5, r6
   d7790:	d004      	beq.n	d779c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d7792:	4628      	mov	r0, r5
   d7794:	f7fd feb4 	bl	d5500 <_ZN6StringD1Ev>
   d7798:	3518      	adds	r5, #24
   d779a:	e7f8      	b.n	d778e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d779c:	2300      	movs	r3, #0
   d779e:	6163      	str	r3, [r4, #20]
   d77a0:	bd70      	pop	{r4, r5, r6, pc}

000d77a2 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d77a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d77a4:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d77a6:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d77a8:	f7ff fdf0 	bl	d738c <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d77ac:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d77b0:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d77b4:	f7ff fcea 	bl	d718c <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d77b8:	4620      	mov	r0, r4
   d77ba:	f7ff ffc4 	bl	d7746 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d77be:	4628      	mov	r0, r5
   d77c0:	f7ff fee4 	bl	d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d77c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d77c6:	b108      	cbz	r0, d77cc <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d77c8:	f7fd fc76 	bl	d50b8 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d77cc:	6925      	ldr	r5, [r4, #16]
   d77ce:	6963      	ldr	r3, [r4, #20]
   d77d0:	2618      	movs	r6, #24
   d77d2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d77d6:	42b5      	cmp	r5, r6
   d77d8:	d004      	beq.n	d77e4 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d77da:	4628      	mov	r0, r5
   d77dc:	f7fd fe90 	bl	d5500 <_ZN6StringD1Ev>
   d77e0:	3518      	adds	r5, #24
   d77e2:	e7f8      	b.n	d77d6 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d77e4:	6920      	ldr	r0, [r4, #16]
   d77e6:	f7fd fdf3 	bl	d53d0 <free>
   d77ea:	6820      	ldr	r0, [r4, #0]
   d77ec:	f7fd fdf0 	bl	d53d0 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d77f0:	4620      	mov	r0, r4
   d77f2:	b002      	add	sp, #8
   d77f4:	bd70      	pop	{r4, r5, r6, pc}

000d77f6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77f6:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d77f8:	680a      	ldr	r2, [r1, #0]
   d77fa:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d77fc:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77fe:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7800:	684a      	ldr	r2, [r1, #4]
   d7802:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7804:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7806:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7808:	688a      	ldr	r2, [r1, #8]
   d780a:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d780c:	608b      	str	r3, [r1, #8]
   d780e:	4770      	bx	lr

000d7810 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7810:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7812:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7814:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7816:	6003      	str	r3, [r0, #0]
   d7818:	6043      	str	r3, [r0, #4]
   d781a:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d781c:	f7ff ffeb 	bl	d77f6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d7820:	4620      	mov	r0, r4
   d7822:	bd10      	pop	{r4, pc}

000d7824 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7824:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7826:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7828:	4604      	mov	r4, r0
   d782a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d782c:	d925      	bls.n	d787a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d782e:	4290      	cmp	r0, r2
   d7830:	d224      	bcs.n	d787c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d7832:	1a55      	subs	r5, r2, r1
   d7834:	3d14      	subs	r5, #20
   d7836:	442c      	add	r4, r5
   d7838:	f1a1 0714 	sub.w	r7, r1, #20
   d783c:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7840:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7842:	f1a5 0308 	sub.w	r3, r5, #8
   d7846:	429f      	cmp	r7, r3
   d7848:	d037      	beq.n	d78ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d784a:	b184      	cbz	r4, d786e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d784c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7850:	6023      	str	r3, [r4, #0]
   d7852:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7856:	80a3      	strh	r3, [r4, #4]
   d7858:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d785c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d785e:	60a6      	str	r6, [r4, #8]
   d7860:	60e6      	str	r6, [r4, #12]
   d7862:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7864:	4629      	mov	r1, r5
   d7866:	f104 0008 	add.w	r0, r4, #8
   d786a:	f7ff ffc4 	bl	d77f6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d786e:	4628      	mov	r0, r5
   d7870:	f7ff fe32 	bl	d74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7874:	3c14      	subs	r4, #20
   d7876:	3d14      	subs	r5, #20
   d7878:	e7e3      	b.n	d7842 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d787a:	d01e      	beq.n	d78ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d787c:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7880:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7882:	f1a5 0308 	sub.w	r3, r5, #8
   d7886:	429e      	cmp	r6, r3
   d7888:	d017      	beq.n	d78ba <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d788a:	b184      	cbz	r4, d78ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d788c:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7890:	6023      	str	r3, [r4, #0]
   d7892:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7896:	80a3      	strh	r3, [r4, #4]
   d7898:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d789c:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d789e:	60a7      	str	r7, [r4, #8]
   d78a0:	60e7      	str	r7, [r4, #12]
   d78a2:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d78a4:	4629      	mov	r1, r5
   d78a6:	f104 0008 	add.w	r0, r4, #8
   d78aa:	f7ff ffa4 	bl	d77f6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d78ae:	4628      	mov	r0, r5
   d78b0:	f7ff fe12 	bl	d74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d78b4:	3414      	adds	r4, #20
   d78b6:	3514      	adds	r5, #20
   d78b8:	e7e3      	b.n	d7882 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d78ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d78bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d78be:	6845      	ldr	r5, [r0, #4]
   d78c0:	6883      	ldr	r3, [r0, #8]
   d78c2:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d78c4:	4604      	mov	r4, r0
   d78c6:	460e      	mov	r6, r1
   d78c8:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d78ca:	db0e      	blt.n	d78ea <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d78cc:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d78ce:	2d00      	cmp	r5, #0
   d78d0:	dd05      	ble.n	d78de <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d78d2:	00a9      	lsls	r1, r5, #2
   d78d4:	6800      	ldr	r0, [r0, #0]
   d78d6:	f7fd fd83 	bl	d53e0 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d78da:	b920      	cbnz	r0, d78e6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d78dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d78de:	6800      	ldr	r0, [r0, #0]
   d78e0:	f7fd fd76 	bl	d53d0 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d78e4:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d78e6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d78e8:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d78ea:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d78ec:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d78ee:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d78f2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d78f6:	1a52      	subs	r2, r2, r1
   d78f8:	1d08      	adds	r0, r1, #4
   d78fa:	f001 fc9f 	bl	d923c <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d78fe:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7902:	6863      	ldr	r3, [r4, #4]
   d7904:	3301      	adds	r3, #1
   d7906:	6063      	str	r3, [r4, #4]
   d7908:	2001      	movs	r0, #1
    return true;
}
   d790a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d790c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d790c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d790e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7910:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7912:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7914:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7916:	f7ff fc39 	bl	d718c <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d791a:	6823      	ldr	r3, [r4, #0]
   d791c:	6861      	ldr	r1, [r4, #4]
   d791e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7922:	4283      	cmp	r3, r0
   d7924:	461a      	mov	r2, r3
   d7926:	d009      	beq.n	d793c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d7928:	6812      	ldr	r2, [r2, #0]
   d792a:	42aa      	cmp	r2, r5
   d792c:	f103 0304 	add.w	r3, r3, #4
   d7930:	d1f7      	bne.n	d7922 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d7932:	a801      	add	r0, sp, #4
   d7934:	f7ff fe2a 	bl	d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7938:	2500      	movs	r5, #0
   d793a:	e00e      	b.n	d795a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d793c:	462a      	mov	r2, r5
   d793e:	4620      	mov	r0, r4
   d7940:	f7ff ffbc 	bl	d78bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7944:	4605      	mov	r5, r0
   d7946:	2800      	cmp	r0, #0
   d7948:	d0f3      	beq.n	d7932 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d794a:	6863      	ldr	r3, [r4, #4]
   d794c:	2b01      	cmp	r3, #1
   d794e:	d101      	bne.n	d7954 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d7950:	f7ff fd10 	bl	d7374 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7954:	a801      	add	r0, sp, #4
   d7956:	f7ff fe19 	bl	d758c <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d795a:	4628      	mov	r0, r5
   d795c:	b003      	add	sp, #12
   d795e:	bd30      	pop	{r4, r5, pc}

000d7960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7960:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7964:	4606      	mov	r6, r0
   d7966:	460c      	mov	r4, r1
   d7968:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d796a:	d914      	bls.n	d7996 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d796c:	4290      	cmp	r0, r2
   d796e:	d213      	bcs.n	d7998 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7970:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d7974:	1a6c      	subs	r4, r5, r1
   d7976:	f1a1 0710 	sub.w	r7, r1, #16
   d797a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d797c:	42af      	cmp	r7, r5
   d797e:	d018      	beq.n	d79b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7980:	b11c      	cbz	r4, d798a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7982:	4629      	mov	r1, r5
   d7984:	4620      	mov	r0, r4
   d7986:	f7fd fdab 	bl	d54e0 <_ZN6StringC1EOS_>
                end->~T();
   d798a:	4628      	mov	r0, r5
   d798c:	f7fd fdb8 	bl	d5500 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7990:	3d10      	subs	r5, #16
   d7992:	3c10      	subs	r4, #16
   d7994:	e7f2      	b.n	d797c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7996:	d00c      	beq.n	d79b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7998:	42ac      	cmp	r4, r5
   d799a:	d00a      	beq.n	d79b2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d799c:	b11e      	cbz	r6, d79a6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d799e:	4621      	mov	r1, r4
   d79a0:	4630      	mov	r0, r6
   d79a2:	f7fd fd9d 	bl	d54e0 <_ZN6StringC1EOS_>
                p->~T();
   d79a6:	4620      	mov	r0, r4
   d79a8:	f7fd fdaa 	bl	d5500 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d79ac:	3410      	adds	r4, #16
   d79ae:	3610      	adds	r6, #16
   d79b0:	e7f2      	b.n	d7998 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d79b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d79b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d79b4:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d79b6:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d79b8:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d79ba:	dd0b      	ble.n	d79d4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d79bc:	0130      	lsls	r0, r6, #4
   d79be:	f7fd fcff 	bl	d53c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d79c2:	4604      	mov	r4, r0
   d79c4:	b170      	cbz	r0, d79e4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d79c6:	e895 0006 	ldmia.w	r5, {r1, r2}
   d79ca:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d79ce:	f7ff ffc7 	bl	d7960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d79d2:	e000      	b.n	d79d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d79d4:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d79d6:	6828      	ldr	r0, [r5, #0]
   d79d8:	f7fd fcfa 	bl	d53d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d79dc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d79de:	60ae      	str	r6, [r5, #8]
        return true;
   d79e0:	2001      	movs	r0, #1
   d79e2:	bd70      	pop	{r4, r5, r6, pc}
    }
   d79e4:	bd70      	pop	{r4, r5, r6, pc}

000d79e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d79e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d79ea:	2300      	movs	r3, #0
   d79ec:	b095      	sub	sp, #84	; 0x54
   d79ee:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d79f0:	2246      	movs	r2, #70	; 0x46
   d79f2:	6003      	str	r3, [r0, #0]
   d79f4:	6043      	str	r3, [r0, #4]
   d79f6:	6083      	str	r3, [r0, #8]
   d79f8:	60c3      	str	r3, [r0, #12]
   d79fa:	6103      	str	r3, [r0, #16]
   d79fc:	6143      	str	r3, [r0, #20]
   d79fe:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7a00:	9102      	str	r1, [sp, #8]
   d7a02:	f8da 1004 	ldr.w	r1, [sl, #4]
   d7a06:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7a08:	4299      	cmp	r1, r3
   d7a0a:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7a0c:	9309      	str	r3, [sp, #36]	; 0x24
   d7a0e:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7a10:	f340 809d 	ble.w	d7b4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7a14:	a808      	add	r0, sp, #32
   d7a16:	f7ff ffcd 	bl	d79b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7a1a:	2800      	cmp	r0, #0
   d7a1c:	f040 8097 	bne.w	d7b4e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7a20:	e08e      	b.n	d7b40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d7a22:	4621      	mov	r1, r4
   d7a24:	a80b      	add	r0, sp, #44	; 0x2c
   d7a26:	f7fd fd5b 	bl	d54e0 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7a2a:	a90b      	add	r1, sp, #44	; 0x2c
   d7a2c:	a80f      	add	r0, sp, #60	; 0x3c
   d7a2e:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7a30:	f7fd fd56 	bl	d54e0 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7a34:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7a38:	4299      	cmp	r1, r3
   d7a3a:	f2c0 80ce 	blt.w	d7bda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d7a3e:	3101      	adds	r1, #1
   d7a40:	a808      	add	r0, sp, #32
   d7a42:	f7ff ffb7 	bl	d79b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7a46:	2800      	cmp	r0, #0
   d7a48:	f040 80c7 	bne.w	d7bda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7a4c:	a80f      	add	r0, sp, #60	; 0x3c
   d7a4e:	f7fd fd57 	bl	d5500 <_ZN6StringD1Ev>
   d7a52:	a80b      	add	r0, sp, #44	; 0x2c
   d7a54:	f7fd fd54 	bl	d5500 <_ZN6StringD1Ev>
   d7a58:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d7a5a:	42a7      	cmp	r7, r4
   d7a5c:	d1e1      	bne.n	d7a22 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7a5e:	2600      	movs	r6, #0
   d7a60:	960b      	str	r6, [sp, #44]	; 0x2c
   d7a62:	960c      	str	r6, [sp, #48]	; 0x30
   d7a64:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7a66:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7a6a:	429e      	cmp	r6, r3
   d7a6c:	f280 80a8 	bge.w	d7bc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7a70:	0133      	lsls	r3, r6, #4
   d7a72:	9a08      	ldr	r2, [sp, #32]
   d7a74:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d7a76:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7a78:	2b00      	cmp	r3, #0
   d7a7a:	f000 809f 	beq.w	d7bbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d7a7e:	2314      	movs	r3, #20
   d7a80:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7a82:	f8cd 901c 	str.w	r9, [sp, #28]
   d7a86:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7a88:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7a8a:	a907      	add	r1, sp, #28
   d7a8c:	a806      	add	r0, sp, #24
   d7a8e:	f7ff fb2c 	bl	d70ea <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7a92:	4607      	mov	r7, r0
   d7a94:	2800      	cmp	r0, #0
   d7a96:	f000 8091 	beq.w	d7bbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7a9a:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7a9c:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7a9e:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d7aa2:	9a07      	ldr	r2, [sp, #28]
   d7aa4:	4620      	mov	r0, r4
   d7aa6:	f7ff fb8d 	bl	d71c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7aaa:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d7aae:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7ab0:	f1b8 0f00 	cmp.w	r8, #0
   d7ab4:	d153      	bne.n	d7b5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d7ab6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7aba:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7ac2:	970f      	str	r7, [sp, #60]	; 0x3c
   d7ac4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7ac8:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7acc:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7ad0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7ad4:	6867      	ldr	r7, [r4, #4]
   d7ad6:	68a3      	ldr	r3, [r4, #8]
   d7ad8:	429f      	cmp	r7, r3
   d7ada:	da4f      	bge.n	d7b7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7adc:	9b00      	ldr	r3, [sp, #0]
   d7ade:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d7ae2:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7ae4:	2214      	movs	r2, #20
   d7ae6:	4353      	muls	r3, r2
   d7ae8:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7aec:	fb02 b201 	mla	r2, r2, r1, fp
   d7af0:	f107 0014 	add.w	r0, r7, #20
   d7af4:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7af6:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7af8:	f7ff fe94 	bl	d7824 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7afc:	b1a7      	cbz	r7, d7b28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7afe:	9b03      	ldr	r3, [sp, #12]
   d7b00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7b02:	f84b 2003 	str.w	r2, [fp, r3]
   d7b06:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7b0a:	80bb      	strh	r3, [r7, #4]
   d7b0c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7b10:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7b12:	f8c7 9008 	str.w	r9, [r7, #8]
   d7b16:	f8c7 900c 	str.w	r9, [r7, #12]
   d7b1a:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7b1e:	a911      	add	r1, sp, #68	; 0x44
   d7b20:	f107 0008 	add.w	r0, r7, #8
   d7b24:	f7ff fe67 	bl	d77f6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7b28:	6863      	ldr	r3, [r4, #4]
   d7b2a:	3301      	adds	r3, #1
   d7b2c:	6063      	str	r3, [r4, #4]
   d7b2e:	a811      	add	r0, sp, #68	; 0x44
   d7b30:	f7ff fcd2 	bl	d74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7b34:	f1b8 0f00 	cmp.w	r8, #0
   d7b38:	d011      	beq.n	d7b5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d7b3a:	a80b      	add	r0, sp, #44	; 0x2c
   d7b3c:	f7ff fccc 	bl	d74d8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7b40:	a808      	add	r0, sp, #32
   d7b42:	f7ff fcdd 	bl	d7500 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d7b46:	4628      	mov	r0, r5
   d7b48:	b015      	add	sp, #84	; 0x54
   d7b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b4e:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7b52:	f8da 3004 	ldr.w	r3, [sl, #4]
   d7b56:	2714      	movs	r7, #20
   d7b58:	fb07 4703 	mla	r7, r7, r3, r4
   d7b5c:	e77d      	b.n	d7a5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d7b5e:	6823      	ldr	r3, [r4, #0]
   d7b60:	9a00      	ldr	r2, [sp, #0]
   d7b62:	2414      	movs	r4, #20
   d7b64:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7b68:	9b06      	ldr	r3, [sp, #24]
   d7b6a:	781b      	ldrb	r3, [r3, #0]
   d7b6c:	bb23      	cbnz	r3, d7bb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d7b6e:	f8da 3000 	ldr.w	r3, [sl]
   d7b72:	9a01      	ldr	r2, [sp, #4]
   d7b74:	4413      	add	r3, r2
   d7b76:	7c1b      	ldrb	r3, [r3, #16]
   d7b78:	80e3      	strh	r3, [r4, #6]
   d7b7a:	e01d      	b.n	d7bb8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b7c:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7b7e:	2f00      	cmp	r7, #0
   d7b80:	dd0f      	ble.n	d7ba2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7b82:	2314      	movs	r3, #20
   d7b84:	fb03 f007 	mul.w	r0, r3, r7
   d7b88:	9303      	str	r3, [sp, #12]
   d7b8a:	f7fd fc19 	bl	d53c0 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7b8e:	4683      	mov	fp, r0
   d7b90:	b178      	cbz	r0, d7bb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d7b92:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7b96:	9b03      	ldr	r3, [sp, #12]
   d7b98:	fb03 1202 	mla	r2, r3, r2, r1
   d7b9c:	f7ff fe42 	bl	d7824 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7ba0:	e000      	b.n	d7ba4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7ba2:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7ba4:	6820      	ldr	r0, [r4, #0]
   d7ba6:	f7fd fc13 	bl	d53d0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7baa:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7bae:	60a7      	str	r7, [r4, #8]
   d7bb0:	e794      	b.n	d7adc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7bb2:	f04f 0801 	mov.w	r8, #1
   d7bb6:	e7ba      	b.n	d7b2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7bb8:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7bba:	e766      	b.n	d7a8a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7bbc:	3601      	adds	r6, #1
   d7bbe:	e753      	b.n	d7a68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7bc0:	a908      	add	r1, sp, #32
   d7bc2:	4628      	mov	r0, r5
   d7bc4:	f7ff fe17 	bl	d77f6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7bc8:	a90b      	add	r1, sp, #44	; 0x2c
   d7bca:	f105 000c 	add.w	r0, r5, #12
   d7bce:	f7ff fe12 	bl	d77f6 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d7bd2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7bd6:	762b      	strb	r3, [r5, #24]
   d7bd8:	e7af      	b.n	d7b3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7bda:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7bdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7bde:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7be2:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7be6:	4631      	mov	r1, r6
   d7be8:	f106 0010 	add.w	r0, r6, #16
   d7bec:	f7ff feb8 	bl	d7960 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7bf0:	b11e      	cbz	r6, d7bfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7bf2:	a90f      	add	r1, sp, #60	; 0x3c
   d7bf4:	4630      	mov	r0, r6
   d7bf6:	f7fd fc73 	bl	d54e0 <_ZN6StringC1EOS_>
    ++size_;
   d7bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7bfc:	3301      	adds	r3, #1
   d7bfe:	9309      	str	r3, [sp, #36]	; 0x24
   d7c00:	e724      	b.n	d7a4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7c04 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7c06:	4604      	mov	r4, r0
   d7c08:	4b09      	ldr	r3, [pc, #36]	; (d7c30 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7c0a:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7c0e:	4605      	mov	r5, r0
   d7c10:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7c12:	a801      	add	r0, sp, #4
   d7c14:	4611      	mov	r1, r2
   d7c16:	f7fd f823 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7c1a:	aa01      	add	r2, sp, #4
   d7c1c:	4631      	mov	r1, r6
   d7c1e:	4620      	mov	r0, r4
   d7c20:	f7ff fee1 	bl	d79e6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7c24:	a801      	add	r0, sp, #4
   d7c26:	f7fc ff3b 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7c2a:	4628      	mov	r0, r5
   d7c2c:	b004      	add	sp, #16
   d7c2e:	bd70      	pop	{r4, r5, r6, pc}
   d7c30:	000d9c5c 	.word	0x000d9c5c

000d7c34 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7c34:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7c36:	460f      	mov	r7, r1
   d7c38:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7c3a:	492b      	ldr	r1, [pc, #172]	; (d7ce8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7c3c:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7c3e:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7c40:	4616      	mov	r6, r2
   d7c42:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7c44:	f001 fb5e 	bl	d9304 <strcmp>
   d7c48:	bb28      	cbnz	r0, d7c96 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d7c4a:	2c00      	cmp	r4, #0
   d7c4c:	d049      	beq.n	d7ce2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7c4e:	4629      	mov	r1, r5
   d7c50:	a801      	add	r0, sp, #4
   d7c52:	f7ff fddd 	bl	d7810 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7c56:	4925      	ldr	r1, [pc, #148]	; (d7cec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7c58:	2024      	movs	r0, #36	; 0x24
   d7c5a:	f001 f837 	bl	d8ccc <_ZnwjRKSt9nothrow_t>
   d7c5e:	4605      	mov	r5, r0
   d7c60:	b1b8      	cbz	r0, d7c92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7c62:	a901      	add	r1, sp, #4
   d7c64:	a804      	add	r0, sp, #16
   d7c66:	f7ff fdd3 	bl	d7810 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7c6a:	a904      	add	r1, sp, #16
   d7c6c:	a807      	add	r0, sp, #28
   d7c6e:	f7fc fff7 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7c72:	aa07      	add	r2, sp, #28
   d7c74:	4631      	mov	r1, r6
   d7c76:	4628      	mov	r0, r5
   d7c78:	f7ff ffc4 	bl	d7c04 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7c7c:	a807      	add	r0, sp, #28
   d7c7e:	f7fc ff0f 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7c82:	4b1b      	ldr	r3, [pc, #108]	; (d7cf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7c84:	602b      	str	r3, [r5, #0]
   d7c86:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7c88:	a804      	add	r0, sp, #16
   d7c8a:	f7fc ff09 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7c8e:	4b19      	ldr	r3, [pc, #100]	; (d7cf4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d7c90:	602b      	str	r3, [r5, #0]
   d7c92:	a801      	add	r0, sp, #4
   d7c94:	e01f      	b.n	d7cd6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7c96:	4918      	ldr	r1, [pc, #96]	; (d7cf8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7c98:	4638      	mov	r0, r7
   d7c9a:	f001 fb33 	bl	d9304 <strcmp>
   d7c9e:	b9f0      	cbnz	r0, d7cde <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d7ca0:	b1fc      	cbz	r4, d7ce2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7ca2:	4629      	mov	r1, r5
   d7ca4:	a804      	add	r0, sp, #16
   d7ca6:	f7ff fdb3 	bl	d7810 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7caa:	4910      	ldr	r1, [pc, #64]	; (d7cec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7cac:	2024      	movs	r0, #36	; 0x24
   d7cae:	f001 f80d 	bl	d8ccc <_ZnwjRKSt9nothrow_t>
   d7cb2:	4605      	mov	r5, r0
   d7cb4:	b170      	cbz	r0, d7cd4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7cb6:	a904      	add	r1, sp, #16
   d7cb8:	a807      	add	r0, sp, #28
   d7cba:	f7fc ffd1 	bl	d4c60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7cbe:	aa07      	add	r2, sp, #28
   d7cc0:	4631      	mov	r1, r6
   d7cc2:	4628      	mov	r0, r5
   d7cc4:	f7ff ff9e 	bl	d7c04 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7cc8:	a807      	add	r0, sp, #28
   d7cca:	f7fc fee9 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7cce:	4b08      	ldr	r3, [pc, #32]	; (d7cf0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7cd0:	602b      	str	r3, [r5, #0]
   d7cd2:	622c      	str	r4, [r5, #32]
   d7cd4:	a804      	add	r0, sp, #16
   d7cd6:	f7fc fee3 	bl	d4aa0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7cda:	4628      	mov	r0, r5
   d7cdc:	e002      	b.n	d7ce4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7cde:	2000      	movs	r0, #0
   d7ce0:	e000      	b.n	d7ce4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d7ce2:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7ce4:	b00b      	add	sp, #44	; 0x2c
   d7ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7ce8:	000da61e 	.word	0x000da61e
   d7cec:	000da83b 	.word	0x000da83b
   d7cf0:	000da6a0 	.word	0x000da6a0
   d7cf4:	000da5b0 	.word	0x000da5b0
   d7cf8:	000da622 	.word	0x000da622

000d7cfc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7cfc:	4b01      	ldr	r3, [pc, #4]	; (d7d04 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7cfe:	4a02      	ldr	r2, [pc, #8]	; (d7d08 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7d00:	601a      	str	r2, [r3, #0]
   d7d02:	4770      	bx	lr
   d7d04:	2003e3dc 	.word	0x2003e3dc
   d7d08:	000da633 	.word	0x000da633

000d7d0c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7d10:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7d12:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7d16:	4604      	mov	r4, r0
   d7d18:	460e      	mov	r6, r1
   d7d1a:	4617      	mov	r7, r2
   d7d1c:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7d1e:	f000 fbb3 	bl	d8488 <_Z16_fetch_usbserialv>
   d7d22:	4581      	cmp	r9, r0
   d7d24:	d105      	bne.n	d7d32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d7d26:	485a      	ldr	r0, [pc, #360]	; (d7e90 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7d28:	f000 fd87 	bl	d883a <_ZN5spark12NetworkClass9listeningEv>
   d7d2c:	2800      	cmp	r0, #0
   d7d2e:	f040 80ac 	bne.w	d7e8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d7d32:	792b      	ldrb	r3, [r5, #4]
   d7d34:	071b      	lsls	r3, r3, #28
   d7d36:	d505      	bpl.n	d7d44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7d38:	696b      	ldr	r3, [r5, #20]
   d7d3a:	4a56      	ldr	r2, [pc, #344]	; (d7e94 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7d3c:	6a20      	ldr	r0, [r4, #32]
   d7d3e:	2100      	movs	r1, #0
   d7d40:	f7ff f985 	bl	d704e <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d7d44:	f1b8 0f00 	cmp.w	r8, #0
   d7d48:	d00d      	beq.n	d7d66 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d7d4a:	215b      	movs	r1, #91	; 0x5b
   d7d4c:	4620      	mov	r0, r4
   d7d4e:	f7ff fa2e 	bl	d71ae <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7d52:	4641      	mov	r1, r8
   d7d54:	4620      	mov	r0, r4
   d7d56:	f7ff fa1c 	bl	d7192 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7d5a:	6823      	ldr	r3, [r4, #0]
   d7d5c:	494e      	ldr	r1, [pc, #312]	; (d7e98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7d5e:	68db      	ldr	r3, [r3, #12]
   d7d60:	2202      	movs	r2, #2
   d7d62:	4620      	mov	r0, r4
   d7d64:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d7d66:	792b      	ldrb	r3, [r5, #4]
   d7d68:	07d9      	lsls	r1, r3, #31
   d7d6a:	d525      	bpl.n	d7db8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d7d6c:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7d70:	212f      	movs	r1, #47	; 0x2f
   d7d72:	4640      	mov	r0, r8
   d7d74:	f001 fb01 	bl	d937a <strrchr>
    if (s1) {
   d7d78:	b108      	cbz	r0, d7d7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d7d7a:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d7d7e:	4641      	mov	r1, r8
   d7d80:	4620      	mov	r0, r4
   d7d82:	f7ff fa06 	bl	d7192 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7d86:	792b      	ldrb	r3, [r5, #4]
   d7d88:	079a      	lsls	r2, r3, #30
   d7d8a:	d509      	bpl.n	d7da0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7d8c:	213a      	movs	r1, #58	; 0x3a
   d7d8e:	4620      	mov	r0, r4
   d7d90:	f7ff fa0d 	bl	d71ae <_ZN5spark16StreamLogHandler5writeEc>
   d7d94:	68eb      	ldr	r3, [r5, #12]
   d7d96:	4a41      	ldr	r2, [pc, #260]	; (d7e9c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7d98:	6a20      	ldr	r0, [r4, #32]
   d7d9a:	2100      	movs	r1, #0
   d7d9c:	f7ff f957 	bl	d704e <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d7da0:	792b      	ldrb	r3, [r5, #4]
   d7da2:	f013 0f04 	tst.w	r3, #4
   d7da6:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7da8:	bf18      	it	ne
   d7daa:	493d      	ldrne	r1, [pc, #244]	; (d7ea0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7dac:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d7dae:	bf08      	it	eq
   d7db0:	493c      	ldreq	r1, [pc, #240]	; (d7ea4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d7db2:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7db4:	4620      	mov	r0, r4
   d7db6:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7db8:	792b      	ldrb	r3, [r5, #4]
   d7dba:	075b      	lsls	r3, r3, #29
   d7dbc:	d518      	bpl.n	d7df0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7dbe:	6929      	ldr	r1, [r5, #16]
   d7dc0:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7dc2:	4613      	mov	r3, r2
   d7dc4:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7dc8:	b138      	cbz	r0, d7dda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7dca:	2820      	cmp	r0, #32
   d7dcc:	d101      	bne.n	d7dd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d7dce:	4619      	mov	r1, r3
   d7dd0:	e001      	b.n	d7dd6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d7dd2:	2828      	cmp	r0, #40	; 0x28
   d7dd4:	d001      	beq.n	d7dda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7dd6:	461a      	mov	r2, r3
   d7dd8:	e7f3      	b.n	d7dc2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7dda:	6823      	ldr	r3, [r4, #0]
   d7ddc:	1a52      	subs	r2, r2, r1
   d7dde:	68db      	ldr	r3, [r3, #12]
   d7de0:	4620      	mov	r0, r4
   d7de2:	4798      	blx	r3
        write("(): ", 4);
   d7de4:	6823      	ldr	r3, [r4, #0]
   d7de6:	4930      	ldr	r1, [pc, #192]	; (d7ea8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7de8:	68db      	ldr	r3, [r3, #12]
   d7dea:	2204      	movs	r2, #4
   d7dec:	4620      	mov	r0, r4
   d7dee:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7df0:	2100      	movs	r1, #0
   d7df2:	4638      	mov	r0, r7
   d7df4:	f7fd fa50 	bl	d5298 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7df8:	4601      	mov	r1, r0
   d7dfa:	4620      	mov	r0, r4
   d7dfc:	f7ff f9c9 	bl	d7192 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7e00:	6823      	ldr	r3, [r4, #0]
   d7e02:	4928      	ldr	r1, [pc, #160]	; (d7ea4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7e04:	68db      	ldr	r3, [r3, #12]
   d7e06:	2202      	movs	r2, #2
   d7e08:	4620      	mov	r0, r4
   d7e0a:	4798      	blx	r3
    // Message
    if (msg) {
   d7e0c:	b11e      	cbz	r6, d7e16 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d7e0e:	4631      	mov	r1, r6
   d7e10:	4620      	mov	r0, r4
   d7e12:	f7ff f9be 	bl	d7192 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d7e16:	792b      	ldrb	r3, [r5, #4]
   d7e18:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7e1c:	d02d      	beq.n	d7e7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d7e1e:	6823      	ldr	r3, [r4, #0]
   d7e20:	4922      	ldr	r1, [pc, #136]	; (d7eac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7e22:	68db      	ldr	r3, [r3, #12]
   d7e24:	4620      	mov	r0, r4
   d7e26:	2202      	movs	r2, #2
   d7e28:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d7e2a:	792b      	ldrb	r3, [r5, #4]
   d7e2c:	06d8      	lsls	r0, r3, #27
   d7e2e:	d50b      	bpl.n	d7e48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d7e30:	6823      	ldr	r3, [r4, #0]
   d7e32:	491f      	ldr	r1, [pc, #124]	; (d7eb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d7e34:	68db      	ldr	r3, [r3, #12]
   d7e36:	2207      	movs	r2, #7
   d7e38:	4620      	mov	r0, r4
   d7e3a:	4798      	blx	r3
   d7e3c:	69ab      	ldr	r3, [r5, #24]
   d7e3e:	4a1d      	ldr	r2, [pc, #116]	; (d7eb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d7e40:	6a20      	ldr	r0, [r4, #32]
   d7e42:	2100      	movs	r1, #0
   d7e44:	f7ff f903 	bl	d704e <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d7e48:	792b      	ldrb	r3, [r5, #4]
   d7e4a:	0699      	lsls	r1, r3, #26
   d7e4c:	d511      	bpl.n	d7e72 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d7e4e:	06da      	lsls	r2, r3, #27
   d7e50:	d505      	bpl.n	d7e5e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d7e52:	6823      	ldr	r3, [r4, #0]
   d7e54:	4912      	ldr	r1, [pc, #72]	; (d7ea0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7e56:	68db      	ldr	r3, [r3, #12]
   d7e58:	2202      	movs	r2, #2
   d7e5a:	4620      	mov	r0, r4
   d7e5c:	4798      	blx	r3
            }
            write("details = ", 10);
   d7e5e:	6823      	ldr	r3, [r4, #0]
   d7e60:	4915      	ldr	r1, [pc, #84]	; (d7eb8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d7e62:	68db      	ldr	r3, [r3, #12]
   d7e64:	4620      	mov	r0, r4
   d7e66:	220a      	movs	r2, #10
   d7e68:	4798      	blx	r3
            write(attr.details);
   d7e6a:	69e9      	ldr	r1, [r5, #28]
   d7e6c:	4620      	mov	r0, r4
   d7e6e:	f7ff f990 	bl	d7192 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d7e72:	215d      	movs	r1, #93	; 0x5d
   d7e74:	4620      	mov	r0, r4
   d7e76:	f7ff f99a 	bl	d71ae <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7e7a:	6823      	ldr	r3, [r4, #0]
   d7e7c:	490f      	ldr	r1, [pc, #60]	; (d7ebc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7e7e:	68db      	ldr	r3, [r3, #12]
   d7e80:	4620      	mov	r0, r4
   d7e82:	2202      	movs	r2, #2
}
   d7e84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7e88:	4718      	bx	r3
   d7e8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7e8e:	bf00      	nop
   d7e90:	2003e718 	.word	0x2003e718
   d7e94:	000da637 	.word	0x000da637
   d7e98:	000da63e 	.word	0x000da63e
   d7e9c:	000d9fc3 	.word	0x000d9fc3
   d7ea0:	000da641 	.word	0x000da641
   d7ea4:	000da646 	.word	0x000da646
   d7ea8:	000da644 	.word	0x000da644
   d7eac:	000da649 	.word	0x000da649
   d7eb0:	000da64c 	.word	0x000da64c
   d7eb4:	000da654 	.word	0x000da654
   d7eb8:	000da657 	.word	0x000da657
   d7ebc:	000da662 	.word	0x000da662

000d7ec0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7ec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7ec4:	b085      	sub	sp, #20
   d7ec6:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7eca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7ecc:	4606      	mov	r6, r0
   d7ece:	460f      	mov	r7, r1
   d7ed0:	4691      	mov	r9, r2
   d7ed2:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7ed4:	f000 fad8 	bl	d8488 <_Z16_fetch_usbserialv>
   d7ed8:	4580      	cmp	r8, r0
   d7eda:	d105      	bne.n	d7ee8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7edc:	484a      	ldr	r0, [pc, #296]	; (d8008 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7ede:	f000 fcac 	bl	d883a <_ZN5spark12NetworkClass9listeningEv>
   d7ee2:	2800      	cmp	r0, #0
   d7ee4:	f040 808c 	bne.w	d8000 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7ee8:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7eea:	4a48      	ldr	r2, [pc, #288]	; (d800c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7eec:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7eee:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d7ef2:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7ef4:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7ef6:	f88d 8008 	strb.w	r8, [sp, #8]
   d7efa:	f000 fde2 	bl	d8ac2 <_ZN5spark10JSONWriter11beginObjectEv>
   d7efe:	4641      	mov	r1, r8
   d7f00:	4648      	mov	r0, r9
   d7f02:	f7fd f9c9 	bl	d5298 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7f06:	4942      	ldr	r1, [pc, #264]	; (d8010 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7f08:	4680      	mov	r8, r0
   d7f0a:	2201      	movs	r2, #1
   d7f0c:	a801      	add	r0, sp, #4
   d7f0e:	f000 fe5d 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7f12:	4641      	mov	r1, r8
   d7f14:	f7ff f92d 	bl	d7172 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d7f18:	b13f      	cbz	r7, d7f2a <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7f1a:	493e      	ldr	r1, [pc, #248]	; (d8014 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7f1c:	2201      	movs	r2, #1
   d7f1e:	a801      	add	r0, sp, #4
   d7f20:	f000 fe54 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7f24:	4639      	mov	r1, r7
   d7f26:	f7ff f924 	bl	d7172 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d7f2a:	b13d      	cbz	r5, d7f3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7f2c:	493a      	ldr	r1, [pc, #232]	; (d8018 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7f2e:	2201      	movs	r2, #1
   d7f30:	a801      	add	r0, sp, #4
   d7f32:	f000 fe4b 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7f36:	4629      	mov	r1, r5
   d7f38:	f7ff f91b 	bl	d7172 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d7f3c:	7923      	ldrb	r3, [r4, #4]
   d7f3e:	07df      	lsls	r7, r3, #31
   d7f40:	d50e      	bpl.n	d7f60 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7f42:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7f44:	212f      	movs	r1, #47	; 0x2f
   d7f46:	4628      	mov	r0, r5
   d7f48:	f001 fa17 	bl	d937a <strrchr>
    if (s1) {
   d7f4c:	b100      	cbz	r0, d7f50 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7f4e:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d7f50:	4932      	ldr	r1, [pc, #200]	; (d801c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7f52:	2201      	movs	r2, #1
   d7f54:	a801      	add	r0, sp, #4
   d7f56:	f000 fe39 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7f5a:	4629      	mov	r1, r5
   d7f5c:	f7ff f909 	bl	d7172 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d7f60:	7923      	ldrb	r3, [r4, #4]
   d7f62:	079d      	lsls	r5, r3, #30
   d7f64:	d507      	bpl.n	d7f76 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7f66:	492e      	ldr	r1, [pc, #184]	; (d8020 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7f68:	2202      	movs	r2, #2
   d7f6a:	a801      	add	r0, sp, #4
   d7f6c:	f000 fe2e 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7f70:	68e1      	ldr	r1, [r4, #12]
   d7f72:	f000 fdb3 	bl	d8adc <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7f76:	7923      	ldrb	r3, [r4, #4]
   d7f78:	0758      	lsls	r0, r3, #29
   d7f7a:	d516      	bpl.n	d7faa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7f7c:	6925      	ldr	r5, [r4, #16]
   d7f7e:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7f80:	463b      	mov	r3, r7
   d7f82:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f86:	b13a      	cbz	r2, d7f98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7f88:	2a20      	cmp	r2, #32
   d7f8a:	d101      	bne.n	d7f90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7f8c:	461d      	mov	r5, r3
   d7f8e:	e001      	b.n	d7f94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7f90:	2a28      	cmp	r2, #40	; 0x28
   d7f92:	d001      	beq.n	d7f98 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7f94:	461f      	mov	r7, r3
   d7f96:	e7f3      	b.n	d7f80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7f98:	2202      	movs	r2, #2
   d7f9a:	4922      	ldr	r1, [pc, #136]	; (d8024 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7f9c:	a801      	add	r0, sp, #4
   d7f9e:	f000 fe15 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7fa2:	1b7a      	subs	r2, r7, r5
   d7fa4:	4629      	mov	r1, r5
   d7fa6:	f000 fe20 	bl	d8bea <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7faa:	7923      	ldrb	r3, [r4, #4]
   d7fac:	0719      	lsls	r1, r3, #28
   d7fae:	d507      	bpl.n	d7fc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7fb0:	491d      	ldr	r1, [pc, #116]	; (d8028 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7fb2:	2201      	movs	r2, #1
   d7fb4:	a801      	add	r0, sp, #4
   d7fb6:	f000 fe09 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7fba:	6961      	ldr	r1, [r4, #20]
   d7fbc:	f000 fda0 	bl	d8b00 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7fc0:	7923      	ldrb	r3, [r4, #4]
   d7fc2:	06da      	lsls	r2, r3, #27
   d7fc4:	d508      	bpl.n	d7fd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7fc6:	2204      	movs	r2, #4
   d7fc8:	4918      	ldr	r1, [pc, #96]	; (d802c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7fca:	eb0d 0002 	add.w	r0, sp, r2
   d7fce:	f000 fdfd 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7fd2:	69a1      	ldr	r1, [r4, #24]
   d7fd4:	f000 fd82 	bl	d8adc <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7fd8:	7923      	ldrb	r3, [r4, #4]
   d7fda:	069b      	lsls	r3, r3, #26
   d7fdc:	d507      	bpl.n	d7fee <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7fde:	4914      	ldr	r1, [pc, #80]	; (d8030 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7fe0:	2206      	movs	r2, #6
   d7fe2:	a801      	add	r0, sp, #4
   d7fe4:	f000 fdf2 	bl	d8bcc <_ZN5spark10JSONWriter4nameEPKcj>
   d7fe8:	69e1      	ldr	r1, [r4, #28]
   d7fea:	f7ff f8c2 	bl	d7172 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7fee:	a801      	add	r0, sp, #4
   d7ff0:	f000 fd51 	bl	d8a96 <_ZN5spark10JSONWriter9endObjectEv>
   d7ff4:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7ff6:	490f      	ldr	r1, [pc, #60]	; (d8034 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7ff8:	6803      	ldr	r3, [r0, #0]
   d7ffa:	2202      	movs	r2, #2
   d7ffc:	68db      	ldr	r3, [r3, #12]
   d7ffe:	4798      	blx	r3
}
   d8000:	b005      	add	sp, #20
   d8002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8006:	bf00      	nop
   d8008:	2003e718 	.word	0x2003e718
   d800c:	000da598 	.word	0x000da598
   d8010:	000da5ca 	.word	0x000da5ca
   d8014:	000da5dd 	.word	0x000da5dd
   d8018:	000da0c8 	.word	0x000da0c8
   d801c:	000da0a3 	.word	0x000da0a3
   d8020:	000da665 	.word	0x000da665
   d8024:	000da668 	.word	0x000da668
   d8028:	000da5f2 	.word	0x000da5f2
   d802c:	000da66b 	.word	0x000da66b
   d8030:	000da670 	.word	0x000da670
   d8034:	000da662 	.word	0x000da662

000d8038 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d8038:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d803a:	f7fc ff83 	bl	d4f44 <HAL_RTC_Get_UnixTime>
   d803e:	4b03      	ldr	r3, [pc, #12]	; (d804c <_ZN9TimeClass5localEv+0x14>)
   d8040:	681b      	ldr	r3, [r3, #0]
   d8042:	4418      	add	r0, r3
   d8044:	4b02      	ldr	r3, [pc, #8]	; (d8050 <_ZN9TimeClass5localEv+0x18>)
   d8046:	681b      	ldr	r3, [r3, #0]
}
   d8048:	4418      	add	r0, r3
   d804a:	bd08      	pop	{r3, pc}
   d804c:	2003e3e8 	.word	0x2003e3e8
   d8050:	2003e3e4 	.word	0x2003e3e4

000d8054 <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d8054:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d8058:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d805c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8060:	d40f      	bmi.n	d8082 <_ZN9TimeClass4zoneEf+0x2e>
   d8062:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d8066:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d806a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d806e:	dc08      	bgt.n	d8082 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d8070:	eddf 7a04 	vldr	s15, [pc, #16]	; d8084 <_ZN9TimeClass4zoneEf+0x30>
   d8074:	4b04      	ldr	r3, [pc, #16]	; (d8088 <_ZN9TimeClass4zoneEf+0x34>)
   d8076:	ee20 0a27 	vmul.f32	s0, s0, s15
   d807a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d807e:	ed83 0a00 	vstr	s0, [r3]
   d8082:	4770      	bx	lr
   d8084:	45610000 	.word	0x45610000
   d8088:	2003e3e8 	.word	0x2003e3e8

000d808c <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d808c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d808e:	4b0e      	ldr	r3, [pc, #56]	; (d80c8 <_ZN9TimeClass7timeStrEl+0x3c>)
   d8090:	681b      	ldr	r3, [r3, #0]
   d8092:	4419      	add	r1, r3
   d8094:	4b0d      	ldr	r3, [pc, #52]	; (d80cc <_ZN9TimeClass7timeStrEl+0x40>)
   d8096:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8098:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d809a:	a802      	add	r0, sp, #8
   d809c:	4419      	add	r1, r3
   d809e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d80a2:	f000 ffb9 	bl	d9018 <localtime>
        char* ascstr = asctime(calendar_time);
   d80a6:	f000 ff69 	bl	d8f7c <asctime>
   d80aa:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d80ac:	f001 f93c 	bl	d9328 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d80b0:	4428      	add	r0, r5
   d80b2:	2300      	movs	r3, #0
   d80b4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d80b8:	4629      	mov	r1, r5
   d80ba:	4620      	mov	r0, r4
   d80bc:	f7fd fa67 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d80c0:	4620      	mov	r0, r4
   d80c2:	b003      	add	sp, #12
   d80c4:	bd30      	pop	{r4, r5, pc}
   d80c6:	bf00      	nop
   d80c8:	2003e3e8 	.word	0x2003e3e8
   d80cc:	2003e3e4 	.word	0x2003e3e4

000d80d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d80d0:	4b02      	ldr	r3, [pc, #8]	; (d80dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d80d2:	681a      	ldr	r2, [r3, #0]
   d80d4:	4b02      	ldr	r3, [pc, #8]	; (d80e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d80d6:	601a      	str	r2, [r3, #0]
   d80d8:	4770      	bx	lr
   d80da:	bf00      	nop
   d80dc:	2003d7c8 	.word	0x2003d7c8
   d80e0:	2003e3e0 	.word	0x2003e3e0

000d80e4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d80e4:	2100      	movs	r1, #0
   d80e6:	f7fd b8ef 	b.w	d52c8 <system_delay_ms>

000d80ea <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d80ea:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d80ec:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d80ee:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d80f0:	b113      	cbz	r3, d80f8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d80f2:	2203      	movs	r2, #3
   d80f4:	4601      	mov	r1, r0
   d80f6:	4798      	blx	r3
    }
   d80f8:	4620      	mov	r0, r4
   d80fa:	bd10      	pop	{r4, pc}

000d80fc <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d80fc:	b510      	push	{r4, lr}
   d80fe:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8100:	f7ff fff3 	bl	d80ea <_ZNSt14_Function_baseD1Ev>
   d8104:	4620      	mov	r0, r4
   d8106:	bd10      	pop	{r4, pc}

000d8108 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d8108:	b510      	push	{r4, lr}
   d810a:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d810c:	f7fd f89c 	bl	d5248 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d8110:	4284      	cmp	r4, r0
   d8112:	d008      	beq.n	d8126 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d8114:	b11c      	cbz	r4, d811e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d8116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d811a:	f7fd b885 	b.w	d5228 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d811e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d8122:	f7fd b889 	b.w	d5238 <LED_Signaling_Stop>
   d8126:	bd10      	pop	{r4, pc}

000d8128 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d8128:	b570      	push	{r4, r5, r6, lr}
   d812a:	4605      	mov	r5, r0
   d812c:	460e      	mov	r6, r1
   d812e:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d8130:	f7fd f88a 	bl	d5248 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d8134:	b150      	cbz	r0, d814c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d8136:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d813a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d813e:	f7fd f86b 	bl	d5218 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d8142:	20e7      	movs	r0, #231	; 0xe7
}
   d8144:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d8148:	f7fd b886 	b.w	d5258 <LED_On>
   d814c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8150 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8150:	4803      	ldr	r0, [pc, #12]	; (d8160 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8152:	4a04      	ldr	r2, [pc, #16]	; (d8164 <_GLOBAL__sub_I_RGB+0x14>)
   d8154:	4904      	ldr	r1, [pc, #16]	; (d8168 <_GLOBAL__sub_I_RGB+0x18>)
   d8156:	2300      	movs	r3, #0
   d8158:	6083      	str	r3, [r0, #8]
   d815a:	f000 bda8 	b.w	d8cae <__aeabi_atexit>
   d815e:	bf00      	nop
   d8160:	2003e3ec 	.word	0x2003e3ec
   d8164:	2003d880 	.word	0x2003d880
   d8168:	000d80fd 	.word	0x000d80fd

000d816c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d816c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d816e:	4b0c      	ldr	r3, [pc, #48]	; (d81a0 <serialEventRun+0x34>)
   d8170:	b133      	cbz	r3, d8180 <serialEventRun+0x14>
   d8172:	f000 f989 	bl	d8488 <_Z16_fetch_usbserialv>
   d8176:	6803      	ldr	r3, [r0, #0]
   d8178:	691b      	ldr	r3, [r3, #16]
   d817a:	4798      	blx	r3
   d817c:	2800      	cmp	r0, #0
   d817e:	dc09      	bgt.n	d8194 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8180:	4b08      	ldr	r3, [pc, #32]	; (d81a4 <serialEventRun+0x38>)
   d8182:	b163      	cbz	r3, d819e <serialEventRun+0x32>
   d8184:	f000 fa08 	bl	d8598 <_Z22__fetch_global_Serial1v>
   d8188:	6803      	ldr	r3, [r0, #0]
   d818a:	691b      	ldr	r3, [r3, #16]
   d818c:	4798      	blx	r3
   d818e:	2800      	cmp	r0, #0
   d8190:	dc03      	bgt.n	d819a <serialEventRun+0x2e>
   d8192:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8194:	f3af 8000 	nop.w
   d8198:	e7f2      	b.n	d8180 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d819a:	f3af 8000 	nop.w
   d819e:	bd08      	pop	{r3, pc}
	...

000d81a8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d81a8:	b508      	push	{r3, lr}
	serialEventRun();
   d81aa:	f7ff ffdf 	bl	d816c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d81ae:	f7fc fec1 	bl	d4f34 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d81b2:	4b01      	ldr	r3, [pc, #4]	; (d81b8 <_post_loop+0x10>)
   d81b4:	6018      	str	r0, [r3, #0]
   d81b6:	bd08      	pop	{r3, pc}
   d81b8:	2003e720 	.word	0x2003e720

000d81bc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d81bc:	4802      	ldr	r0, [pc, #8]	; (d81c8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d81be:	4a03      	ldr	r2, [pc, #12]	; (d81cc <_Z33system_initialize_user_backup_ramv+0x10>)
   d81c0:	4903      	ldr	r1, [pc, #12]	; (d81d0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d81c2:	1a12      	subs	r2, r2, r0
   d81c4:	f001 b82f 	b.w	d9226 <memcpy>
   d81c8:	2003f400 	.word	0x2003f400
   d81cc:	2003f404 	.word	0x2003f404
   d81d0:	000daad0 	.word	0x000daad0

000d81d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d81d4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d81d6:	2300      	movs	r3, #0
   d81d8:	9300      	str	r3, [sp, #0]
   d81da:	461a      	mov	r2, r3
   d81dc:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d81e0:	f7fd f884 	bl	d52ec <system_ctrl_set_result>
}
   d81e4:	b003      	add	sp, #12
   d81e6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d81ec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d81ec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d81ee:	8843      	ldrh	r3, [r0, #2]
   d81f0:	2b0a      	cmp	r3, #10
   d81f2:	d008      	beq.n	d8206 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d81f4:	2b50      	cmp	r3, #80	; 0x50
   d81f6:	d109      	bne.n	d820c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d81f8:	4b09      	ldr	r3, [pc, #36]	; (d8220 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d81fa:	681b      	ldr	r3, [r3, #0]
   d81fc:	b13b      	cbz	r3, d820e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d81fe:	b003      	add	sp, #12
   d8200:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d8204:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d8206:	f7ff ffe5 	bl	d81d4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d820a:	e006      	b.n	d821a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d820c:	2300      	movs	r3, #0
   d820e:	9300      	str	r3, [sp, #0]
   d8210:	461a      	mov	r2, r3
   d8212:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8216:	f7fd f869 	bl	d52ec <system_ctrl_set_result>
        break;
    }
}
   d821a:	b003      	add	sp, #12
   d821c:	f85d fb04 	ldr.w	pc, [sp], #4
   d8220:	2003e3fc 	.word	0x2003e3fc

000d8224 <module_user_init_hook>:

void module_user_init_hook()
{
   d8224:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8226:	4c10      	ldr	r4, [pc, #64]	; (d8268 <module_user_init_hook+0x44>)
   d8228:	4d10      	ldr	r5, [pc, #64]	; (d826c <module_user_init_hook+0x48>)
   d822a:	6823      	ldr	r3, [r4, #0]
   d822c:	42ab      	cmp	r3, r5
   d822e:	4b10      	ldr	r3, [pc, #64]	; (d8270 <module_user_init_hook+0x4c>)
   d8230:	bf0c      	ite	eq
   d8232:	2201      	moveq	r2, #1
   d8234:	2200      	movne	r2, #0
   d8236:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8238:	d002      	beq.n	d8240 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d823a:	f7ff ffbf 	bl	d81bc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d823e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8240:	f7fc fe68 	bl	d4f14 <HAL_RNG_GetRandomNumber>
   d8244:	4604      	mov	r4, r0
    srand(seed);
   d8246:	f001 f81d 	bl	d9284 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d824a:	4b0a      	ldr	r3, [pc, #40]	; (d8274 <module_user_init_hook+0x50>)
   d824c:	b113      	cbz	r3, d8254 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d824e:	4620      	mov	r0, r4
   d8250:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8254:	2100      	movs	r1, #0
   d8256:	4807      	ldr	r0, [pc, #28]	; (d8274 <module_user_init_hook+0x50>)
   d8258:	f7fd f8aa 	bl	d53b0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d825c:	2100      	movs	r1, #0
   d825e:	4806      	ldr	r0, [pc, #24]	; (d8278 <module_user_init_hook+0x54>)
}
   d8260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8264:	f7fd b838 	b.w	d52d8 <system_ctrl_set_app_request_handler>
   d8268:	2003f400 	.word	0x2003f400
   d826c:	9a271c1e 	.word	0x9a271c1e
   d8270:	2003e400 	.word	0x2003e400
   d8274:	00000000 	.word	0x00000000
   d8278:	000d81ed 	.word	0x000d81ed

000d827c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d827c:	b510      	push	{r4, lr}
   d827e:	b088      	sub	sp, #32
   d8280:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d8282:	4668      	mov	r0, sp
   d8284:	f7fd f983 	bl	d558e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d8288:	4669      	mov	r1, sp
   d828a:	a804      	add	r0, sp, #16
   d828c:	f7fd f9a1 	bl	d55d2 <_ZN6StringC1ERKS_>
   d8290:	a804      	add	r0, sp, #16
   d8292:	47a0      	blx	r4
   d8294:	4604      	mov	r4, r0
   d8296:	a804      	add	r0, sp, #16
   d8298:	f7fd f932 	bl	d5500 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d829c:	4668      	mov	r0, sp
   d829e:	f7fd f92f 	bl	d5500 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d82a2:	4620      	mov	r0, r4
   d82a4:	b008      	add	sp, #32
   d82a6:	bd10      	pop	{r4, pc}

000d82a8 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d82a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d82aa:	2410      	movs	r4, #16
   d82ac:	b085      	sub	sp, #20
   d82ae:	4607      	mov	r7, r0
   d82b0:	460e      	mov	r6, r1
   d82b2:	4615      	mov	r5, r2
   d82b4:	2100      	movs	r1, #0
   d82b6:	4622      	mov	r2, r4
   d82b8:	4668      	mov	r0, sp
   d82ba:	f000 ffda 	bl	d9272 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d82be:	2200      	movs	r2, #0
   d82c0:	4669      	mov	r1, sp
   d82c2:	4610      	mov	r0, r2
         size = sizeof(*this);
   d82c4:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d82c8:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d82ca:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d82cc:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d82ce:	f7fd f867 	bl	d53a0 <spark_function>
}
   d82d2:	b005      	add	sp, #20
   d82d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d82d6 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d82d6:	4770      	bx	lr

000d82d8 <_ZN9IPAddressD0Ev>:
   d82d8:	b510      	push	{r4, lr}
   d82da:	2118      	movs	r1, #24
   d82dc:	4604      	mov	r4, r0
   d82de:	f000 fcf3 	bl	d8cc8 <_ZdlPvj>
   d82e2:	4620      	mov	r0, r4
   d82e4:	bd10      	pop	{r4, pc}

000d82e6 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d82e6:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d82e8:	7d03      	ldrb	r3, [r0, #20]
   d82ea:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d82ec:	b08d      	sub	sp, #52	; 0x34
   d82ee:	460e      	mov	r6, r1
   d82f0:	f100 0704 	add.w	r7, r0, #4
   d82f4:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d82f8:	d002      	beq.n	d8300 <_ZNK9IPAddress7printToER5Print+0x1a>
   d82fa:	f100 0508 	add.w	r5, r0, #8
   d82fe:	e018      	b.n	d8332 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8300:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8302:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8304:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8308:	232f      	movs	r3, #47	; 0x2f
   d830a:	462a      	mov	r2, r5
   d830c:	200a      	movs	r0, #10
   d830e:	f7fc feeb 	bl	d50e8 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8312:	4628      	mov	r0, r5
   d8314:	f001 f808 	bl	d9328 <strlen>
   d8318:	6833      	ldr	r3, [r6, #0]
   d831a:	4602      	mov	r2, r0
   d831c:	68db      	ldr	r3, [r3, #12]
   d831e:	4629      	mov	r1, r5
   d8320:	4630      	mov	r0, r6
   d8322:	4798      	blx	r3
   d8324:	e00f      	b.n	d8346 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8326:	b124      	cbz	r4, d8332 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8328:	212e      	movs	r1, #46	; 0x2e
   d832a:	4630      	mov	r0, r6
   d832c:	f7fe fe60 	bl	d6ff0 <_ZN5Print5printEc>
   d8330:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d8332:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d8336:	220a      	movs	r2, #10
   d8338:	4630      	mov	r0, r6
   d833a:	f7fe fe68 	bl	d700e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d833e:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8340:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8342:	d1f0      	bne.n	d8326 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8344:	4620      	mov	r0, r4
    }
    return n;
}
   d8346:	b00d      	add	sp, #52	; 0x34
   d8348:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d834c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d834c:	b510      	push	{r4, lr}
   d834e:	4b05      	ldr	r3, [pc, #20]	; (d8364 <_ZN9IPAddressC1Ev+0x18>)
   d8350:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8352:	2211      	movs	r2, #17
   d8354:	f840 3b04 	str.w	r3, [r0], #4
   d8358:	2100      	movs	r1, #0
   d835a:	f000 ff8a 	bl	d9272 <memset>
{
    clear();
}
   d835e:	4620      	mov	r0, r4
   d8360:	bd10      	pop	{r4, pc}
   d8362:	bf00      	nop
   d8364:	000da710 	.word	0x000da710

000d8368 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8368:	4603      	mov	r3, r0
   d836a:	4a07      	ldr	r2, [pc, #28]	; (d8388 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d836c:	b510      	push	{r4, lr}
   d836e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d8372:	f101 0210 	add.w	r2, r1, #16
   d8376:	f851 4b04 	ldr.w	r4, [r1], #4
   d837a:	f843 4b04 	str.w	r4, [r3], #4
   d837e:	4291      	cmp	r1, r2
   d8380:	d1f9      	bne.n	d8376 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d8382:	780a      	ldrb	r2, [r1, #0]
   d8384:	701a      	strb	r2, [r3, #0]
}
   d8386:	bd10      	pop	{r4, pc}
   d8388:	000da710 	.word	0x000da710

000d838c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d838c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d838e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8392:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d8396:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d839a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d839e:	2304      	movs	r3, #4
   d83a0:	6041      	str	r1, [r0, #4]
   d83a2:	7503      	strb	r3, [r0, #20]
   d83a4:	bd10      	pop	{r4, pc}

000d83a6 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d83a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d83a8:	780d      	ldrb	r5, [r1, #0]
   d83aa:	788b      	ldrb	r3, [r1, #2]
   d83ac:	784a      	ldrb	r2, [r1, #1]
   d83ae:	78c9      	ldrb	r1, [r1, #3]
   d83b0:	9100      	str	r1, [sp, #0]
   d83b2:	4629      	mov	r1, r5
   d83b4:	f7ff ffea 	bl	d838c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d83b8:	b003      	add	sp, #12
   d83ba:	bd30      	pop	{r4, r5, pc}

000d83bc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83bc:	7441      	strb	r1, [r0, #17]
   d83be:	4770      	bx	lr

000d83c0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d83c0:	4770      	bx	lr

000d83c2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d83c2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d83c4:	2100      	movs	r1, #0
   d83c6:	7c00      	ldrb	r0, [r0, #16]
   d83c8:	f7fc ff0e 	bl	d51e8 <HAL_USB_USART_Receive_Data>
}
   d83cc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d83d0:	bf28      	it	cs
   d83d2:	f04f 30ff 	movcs.w	r0, #4294967295
   d83d6:	bd08      	pop	{r3, pc}

000d83d8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d83d8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d83da:	2101      	movs	r1, #1
   d83dc:	7c00      	ldrb	r0, [r0, #16]
   d83de:	f7fc ff03 	bl	d51e8 <HAL_USB_USART_Receive_Data>
}
   d83e2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d83e6:	bf28      	it	cs
   d83e8:	f04f 30ff 	movcs.w	r0, #4294967295
   d83ec:	bd08      	pop	{r3, pc}

000d83ee <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d83ee:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d83f0:	7c00      	ldrb	r0, [r0, #16]
   d83f2:	f7fc fef1 	bl	d51d8 <HAL_USB_USART_Available_Data_For_Write>
}
   d83f6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83fa:	bd08      	pop	{r3, pc}

000d83fc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d83fc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d83fe:	7c00      	ldrb	r0, [r0, #16]
   d8400:	f7fc fee2 	bl	d51c8 <HAL_USB_USART_Available_Data>
}
   d8404:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8408:	bd08      	pop	{r3, pc}

000d840a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d840a:	7c00      	ldrb	r0, [r0, #16]
   d840c:	f7fc befc 	b.w	d5208 <HAL_USB_USART_Flush_Data>

000d8410 <_ZN9USBSerialD0Ev>:
   d8410:	b510      	push	{r4, lr}
   d8412:	2114      	movs	r1, #20
   d8414:	4604      	mov	r4, r0
   d8416:	f000 fc57 	bl	d8cc8 <_ZdlPvj>
   d841a:	4620      	mov	r0, r4
   d841c:	bd10      	pop	{r4, pc}

000d841e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d841e:	b538      	push	{r3, r4, r5, lr}
   d8420:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8422:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8424:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8426:	f7fc fed7 	bl	d51d8 <HAL_USB_USART_Available_Data_For_Write>
   d842a:	2800      	cmp	r0, #0
   d842c:	dc01      	bgt.n	d8432 <_ZN9USBSerial5writeEh+0x14>
   d842e:	7c60      	ldrb	r0, [r4, #17]
   d8430:	b128      	cbz	r0, d843e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8432:	4629      	mov	r1, r5
   d8434:	7c20      	ldrb	r0, [r4, #16]
   d8436:	f7fc fedf 	bl	d51f8 <HAL_USB_USART_Send_Data>
   d843a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d843e:	bd38      	pop	{r3, r4, r5, pc}

000d8440 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8440:	b510      	push	{r4, lr}
   d8442:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8444:	2300      	movs	r3, #0
   d8446:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8448:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d844c:	60a3      	str	r3, [r4, #8]
   d844e:	4b05      	ldr	r3, [pc, #20]	; (d8464 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8450:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d8452:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8454:	4608      	mov	r0, r1
{
  _serial = serial;
   d8456:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8458:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d845a:	4611      	mov	r1, r2
   d845c:	f7fc fe9c 	bl	d5198 <HAL_USB_USART_Init>
}
   d8460:	4620      	mov	r0, r4
   d8462:	bd10      	pop	{r4, pc}
   d8464:	000da724 	.word	0x000da724

000d8468 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8468:	2200      	movs	r2, #0
   d846a:	7c00      	ldrb	r0, [r0, #16]
   d846c:	f7fc be9c 	b.w	d51a8 <HAL_USB_USART_Begin>

000d8470 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d8470:	7c00      	ldrb	r0, [r0, #16]
   d8472:	f7fc bea1 	b.w	d51b8 <HAL_USB_USART_End>

000d8476 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8476:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8478:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d847a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d847c:	2100      	movs	r1, #0
   d847e:	f000 fef8 	bl	d9272 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8482:	4620      	mov	r0, r4
   d8484:	bd10      	pop	{r4, pc}
	...

000d8488 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8488:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d848a:	4d0e      	ldr	r5, [pc, #56]	; (d84c4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d848c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d848e:	a801      	add	r0, sp, #4
   d8490:	f7ff fff1 	bl	d8476 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8494:	6829      	ldr	r1, [r5, #0]
   d8496:	f011 0401 	ands.w	r4, r1, #1
   d849a:	d110      	bne.n	d84be <_Z16_fetch_usbserialv+0x36>
   d849c:	4628      	mov	r0, r5
   d849e:	f7fb fe0b 	bl	d40b8 <__cxa_guard_acquire>
   d84a2:	b160      	cbz	r0, d84be <_Z16_fetch_usbserialv+0x36>
   d84a4:	aa01      	add	r2, sp, #4
   d84a6:	4621      	mov	r1, r4
   d84a8:	4807      	ldr	r0, [pc, #28]	; (d84c8 <_Z16_fetch_usbserialv+0x40>)
   d84aa:	f7ff ffc9 	bl	d8440 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d84ae:	4628      	mov	r0, r5
   d84b0:	f7fb fe07 	bl	d40c2 <__cxa_guard_release>
   d84b4:	4a05      	ldr	r2, [pc, #20]	; (d84cc <_Z16_fetch_usbserialv+0x44>)
   d84b6:	4906      	ldr	r1, [pc, #24]	; (d84d0 <_Z16_fetch_usbserialv+0x48>)
   d84b8:	4803      	ldr	r0, [pc, #12]	; (d84c8 <_Z16_fetch_usbserialv+0x40>)
   d84ba:	f000 fbf8 	bl	d8cae <__aeabi_atexit>
	return _usbserial;
}
   d84be:	4802      	ldr	r0, [pc, #8]	; (d84c8 <_Z16_fetch_usbserialv+0x40>)
   d84c0:	b007      	add	sp, #28
   d84c2:	bd30      	pop	{r4, r5, pc}
   d84c4:	2003e404 	.word	0x2003e404
   d84c8:	2003e408 	.word	0x2003e408
   d84cc:	2003d880 	.word	0x2003d880
   d84d0:	000d83c1 	.word	0x000d83c1

000d84d4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d84d4:	4770      	bx	lr

000d84d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d84d6:	7441      	strb	r1, [r0, #17]
   d84d8:	4770      	bx	lr

000d84da <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d84da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d84dc:	7c00      	ldrb	r0, [r0, #16]
   d84de:	f7fc fe43 	bl	d5168 <HAL_USART_Available_Data_For_Write>
}
   d84e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d84e6:	bd08      	pop	{r3, pc}

000d84e8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d84e8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d84ea:	7c00      	ldrb	r0, [r0, #16]
   d84ec:	f7fc fe1c 	bl	d5128 <HAL_USART_Available_Data>
}
   d84f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d84f4:	bd08      	pop	{r3, pc}

000d84f6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d84f6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d84f8:	7c00      	ldrb	r0, [r0, #16]
   d84fa:	f7fc fe25 	bl	d5148 <HAL_USART_Peek_Data>
}
   d84fe:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8502:	bf28      	it	cs
   d8504:	f04f 30ff 	movcs.w	r0, #4294967295
   d8508:	bd08      	pop	{r3, pc}

000d850a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d850a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d850c:	7c00      	ldrb	r0, [r0, #16]
   d850e:	f7fc fe13 	bl	d5138 <HAL_USART_Read_Data>
}
   d8512:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8516:	bf28      	it	cs
   d8518:	f04f 30ff 	movcs.w	r0, #4294967295
   d851c:	bd08      	pop	{r3, pc}

000d851e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d851e:	7c00      	ldrb	r0, [r0, #16]
   d8520:	f7fc be1a 	b.w	d5158 <HAL_USART_Flush_Data>

000d8524 <_ZN11USARTSerialD0Ev>:
   d8524:	b510      	push	{r4, lr}
   d8526:	2114      	movs	r1, #20
   d8528:	4604      	mov	r4, r0
   d852a:	f000 fbcd 	bl	d8cc8 <_ZdlPvj>
   d852e:	4620      	mov	r0, r4
   d8530:	bd10      	pop	{r4, pc}

000d8532 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8532:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8534:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8536:	4604      	mov	r4, r0
   d8538:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d853a:	b925      	cbnz	r5, d8546 <_ZN11USARTSerial5writeEh+0x14>
   d853c:	7c00      	ldrb	r0, [r0, #16]
   d853e:	f7fc fe13 	bl	d5168 <HAL_USART_Available_Data_For_Write>
   d8542:	2800      	cmp	r0, #0
   d8544:	dd05      	ble.n	d8552 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8546:	4631      	mov	r1, r6
   d8548:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d854a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d854e:	f7fc bde3 	b.w	d5118 <HAL_USART_Write_Data>
  }
  return 0;
}
   d8552:	4628      	mov	r0, r5
   d8554:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8558 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8558:	b510      	push	{r4, lr}
   d855a:	4604      	mov	r4, r0
   d855c:	4608      	mov	r0, r1
   d855e:	4611      	mov	r1, r2
   d8560:	2200      	movs	r2, #0
   d8562:	6062      	str	r2, [r4, #4]
   d8564:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8568:	60a2      	str	r2, [r4, #8]
   d856a:	4a05      	ldr	r2, [pc, #20]	; (d8580 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d856c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d856e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8570:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d8572:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8574:	461a      	mov	r2, r3
   d8576:	f7fc fdbf 	bl	d50f8 <HAL_USART_Init>
}
   d857a:	4620      	mov	r0, r4
   d857c:	bd10      	pop	{r4, pc}
   d857e:	bf00      	nop
   d8580:	000da754 	.word	0x000da754

000d8584 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d8584:	2300      	movs	r3, #0
   d8586:	7c00      	ldrb	r0, [r0, #16]
   d8588:	f7fc bdf6 	b.w	d5178 <HAL_USART_BeginConfig>

000d858c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d858c:	2200      	movs	r2, #0
   d858e:	f7ff bff9 	b.w	d8584 <_ZN11USARTSerial5beginEmm>

000d8592 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d8592:	7c00      	ldrb	r0, [r0, #16]
   d8594:	f7fc bdb8 	b.w	d5108 <HAL_USART_End>

000d8598 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8598:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d859a:	4d0c      	ldr	r5, [pc, #48]	; (d85cc <_Z22__fetch_global_Serial1v+0x34>)
   d859c:	6829      	ldr	r1, [r5, #0]
   d859e:	f011 0401 	ands.w	r4, r1, #1
   d85a2:	d111      	bne.n	d85c8 <_Z22__fetch_global_Serial1v+0x30>
   d85a4:	4628      	mov	r0, r5
   d85a6:	f7fb fd87 	bl	d40b8 <__cxa_guard_acquire>
   d85aa:	b168      	cbz	r0, d85c8 <_Z22__fetch_global_Serial1v+0x30>
   d85ac:	4a08      	ldr	r2, [pc, #32]	; (d85d0 <_Z22__fetch_global_Serial1v+0x38>)
   d85ae:	4b09      	ldr	r3, [pc, #36]	; (d85d4 <_Z22__fetch_global_Serial1v+0x3c>)
   d85b0:	4809      	ldr	r0, [pc, #36]	; (d85d8 <_Z22__fetch_global_Serial1v+0x40>)
   d85b2:	4621      	mov	r1, r4
   d85b4:	f7ff ffd0 	bl	d8558 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d85b8:	4628      	mov	r0, r5
   d85ba:	f7fb fd82 	bl	d40c2 <__cxa_guard_release>
   d85be:	4a07      	ldr	r2, [pc, #28]	; (d85dc <_Z22__fetch_global_Serial1v+0x44>)
   d85c0:	4907      	ldr	r1, [pc, #28]	; (d85e0 <_Z22__fetch_global_Serial1v+0x48>)
   d85c2:	4805      	ldr	r0, [pc, #20]	; (d85d8 <_Z22__fetch_global_Serial1v+0x40>)
   d85c4:	f000 fb73 	bl	d8cae <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d85c8:	4803      	ldr	r0, [pc, #12]	; (d85d8 <_Z22__fetch_global_Serial1v+0x40>)
   d85ca:	bd38      	pop	{r3, r4, r5, pc}
   d85cc:	2003e4b4 	.word	0x2003e4b4
   d85d0:	2003e4b8 	.word	0x2003e4b8
   d85d4:	2003e430 	.word	0x2003e430
   d85d8:	2003e41c 	.word	0x2003e41c
   d85dc:	2003d880 	.word	0x2003d880
   d85e0:	000d84d5 	.word	0x000d84d5

000d85e4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d85e4:	2200      	movs	r2, #0
   d85e6:	4611      	mov	r1, r2
   d85e8:	6840      	ldr	r0, [r0, #4]
   d85ea:	f7fc bec1 	b.w	d5370 <network_listening>

000d85ee <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d85ee:	2200      	movs	r2, #0
   d85f0:	4611      	mov	r1, r2
   d85f2:	6840      	ldr	r0, [r0, #4]
   d85f4:	f7fc becc 	b.w	d5390 <network_get_listen_timeout>

000d85f8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d85f8:	2200      	movs	r2, #0
   d85fa:	6840      	ldr	r0, [r0, #4]
   d85fc:	f7fc bec0 	b.w	d5380 <network_set_listen_timeout>

000d8600 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8600:	2200      	movs	r2, #0
   d8602:	f081 0101 	eor.w	r1, r1, #1
   d8606:	6840      	ldr	r0, [r0, #4]
   d8608:	f7fc beaa 	b.w	d5360 <network_listen>

000d860c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d860c:	2300      	movs	r3, #0
   d860e:	461a      	mov	r2, r3
   d8610:	2101      	movs	r1, #1
   d8612:	6840      	ldr	r0, [r0, #4]
   d8614:	f7fc be9c 	b.w	d5350 <network_off>

000d8618 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8618:	2300      	movs	r3, #0
   d861a:	461a      	mov	r2, r3
   d861c:	4619      	mov	r1, r3
   d861e:	6840      	ldr	r0, [r0, #4]
   d8620:	f7fc be8e 	b.w	d5340 <network_on>

000d8624 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8624:	2200      	movs	r2, #0
   d8626:	4611      	mov	r1, r2
   d8628:	6840      	ldr	r0, [r0, #4]
   d862a:	f7fc be81 	b.w	d5330 <network_ready>

000d862e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d862e:	2200      	movs	r2, #0
   d8630:	4611      	mov	r1, r2
   d8632:	6840      	ldr	r0, [r0, #4]
   d8634:	f7fc be6c 	b.w	d5310 <network_connecting>

000d8638 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8638:	2200      	movs	r2, #0
   d863a:	2102      	movs	r1, #2
   d863c:	6840      	ldr	r0, [r0, #4]
   d863e:	f7fc be6f 	b.w	d5320 <network_disconnect>

000d8642 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8642:	2300      	movs	r3, #0
   d8644:	461a      	mov	r2, r3
   d8646:	6840      	ldr	r0, [r0, #4]
   d8648:	f7fc be5a 	b.w	d5300 <network_connect>

000d864c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d864c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d864e:	4605      	mov	r5, r0
   d8650:	b188      	cbz	r0, d8676 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8652:	6804      	ldr	r4, [r0, #0]
   d8654:	b14c      	cbz	r4, d866a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d8656:	68a3      	ldr	r3, [r4, #8]
   d8658:	b11b      	cbz	r3, d8662 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d865a:	2203      	movs	r2, #3
   d865c:	4621      	mov	r1, r4
   d865e:	4620      	mov	r0, r4
   d8660:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8662:	2110      	movs	r1, #16
   d8664:	4620      	mov	r0, r4
   d8666:	f000 fb2f 	bl	d8cc8 <_ZdlPvj>
   d866a:	4628      	mov	r0, r5
   d866c:	2114      	movs	r1, #20
      }
   d866e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8672:	f000 bb29 	b.w	d8cc8 <_ZdlPvj>
   d8676:	bd38      	pop	{r3, r4, r5, pc}

000d8678 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8678:	b110      	cbz	r0, d8680 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d867a:	6803      	ldr	r3, [r0, #0]
   d867c:	685b      	ldr	r3, [r3, #4]
   d867e:	4718      	bx	r3
   d8680:	4770      	bx	lr

000d8682 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8682:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8684:	6803      	ldr	r3, [r0, #0]
   d8686:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8688:	b1bb      	cbz	r3, d86ba <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d868a:	6858      	ldr	r0, [r3, #4]
   d868c:	f7fc fcf4 	bl	d5078 <os_thread_is_current>
   d8690:	b978      	cbnz	r0, d86b2 <_ZN6ThreadD1Ev+0x30>
   d8692:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8694:	7c5a      	ldrb	r2, [r3, #17]
   d8696:	b912      	cbnz	r2, d869e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8698:	6858      	ldr	r0, [r3, #4]
   d869a:	f7fc fcf5 	bl	d5088 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d869e:	6823      	ldr	r3, [r4, #0]
   d86a0:	6858      	ldr	r0, [r3, #4]
   d86a2:	f7fc fcf9 	bl	d5098 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d86a6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d86a8:	2300      	movs	r3, #0
   d86aa:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d86ac:	b128      	cbz	r0, d86ba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d86ae:	f7ff ffcd 	bl	d864c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d86b2:	6820      	ldr	r0, [r4, #0]
   d86b4:	b108      	cbz	r0, d86ba <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d86b6:	f7ff ffc9 	bl	d864c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d86ba:	4620      	mov	r0, r4
   d86bc:	bd10      	pop	{r4, pc}

000d86be <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d86be:	b538      	push	{r3, r4, r5, lr}
   d86c0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d86c2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d86c6:	b108      	cbz	r0, d86cc <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d86c8:	f7fb fce9 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d86cc:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d86d0:	b108      	cbz	r0, d86d6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d86d2:	f7fc fcf1 	bl	d50b8 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d86d6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d86da:	b135      	cbz	r5, d86ea <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d86dc:	4628      	mov	r0, r5
   d86de:	f7ff ffd0 	bl	d8682 <_ZN6ThreadD1Ev>
   d86e2:	2104      	movs	r1, #4
   d86e4:	4628      	mov	r0, r5
   d86e6:	f000 faef 	bl	d8cc8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d86ea:	6820      	ldr	r0, [r4, #0]
   d86ec:	b108      	cbz	r0, d86f2 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d86ee:	f7ff ffc3 	bl	d8678 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d86f2:	4620      	mov	r0, r4
   d86f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d86f8 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d86f8:	b510      	push	{r4, lr}
   d86fa:	4b04      	ldr	r3, [pc, #16]	; (d870c <_ZN5spark9MeshClassD1Ev+0x14>)
   d86fc:	4604      	mov	r4, r0
   d86fe:	f840 3b08 	str.w	r3, [r0], #8
   d8702:	f7ff ffdc 	bl	d86be <_ZN5spark11MeshPublishD1Ev>
   d8706:	4620      	mov	r0, r4
   d8708:	bd10      	pop	{r4, pc}
   d870a:	bf00      	nop
   d870c:	000da784 	.word	0x000da784

000d8710 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8710:	b538      	push	{r3, r4, r5, lr}
   d8712:	4c0e      	ldr	r4, [pc, #56]	; (d874c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8714:	4b0e      	ldr	r3, [pc, #56]	; (d8750 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8716:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8718:	2500      	movs	r5, #0
   d871a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d871c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8720:	6063      	str	r3, [r4, #4]
   d8722:	60a5      	str	r5, [r4, #8]
   d8724:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8728:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d872c:	f7fc fcbc 	bl	d50a8 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8730:	4b08      	ldr	r3, [pc, #32]	; (d8754 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8732:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8736:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d873a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d873c:	4620      	mov	r0, r4
   d873e:	4a06      	ldr	r2, [pc, #24]	; (d8758 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8740:	4906      	ldr	r1, [pc, #24]	; (d875c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8746:	f000 bab2 	b.w	d8cae <__aeabi_atexit>
   d874a:	bf00      	nop
   d874c:	2003e53c 	.word	0x2003e53c
   d8750:	000da7ec 	.word	0x000da7ec
   d8754:	000da784 	.word	0x000da784
   d8758:	2003d880 	.word	0x2003d880
   d875c:	000d86f9 	.word	0x000d86f9

000d8760 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8760:	2200      	movs	r2, #0
   d8762:	4611      	mov	r1, r2
   d8764:	6840      	ldr	r0, [r0, #4]
   d8766:	f7fc bde3 	b.w	d5330 <network_ready>

000d876a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d876a:	2200      	movs	r2, #0
   d876c:	4611      	mov	r1, r2
   d876e:	6840      	ldr	r0, [r0, #4]
   d8770:	f7fc bdfe 	b.w	d5370 <network_listening>

000d8774 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8774:	2200      	movs	r2, #0
   d8776:	4611      	mov	r1, r2
   d8778:	6840      	ldr	r0, [r0, #4]
   d877a:	f7fc be09 	b.w	d5390 <network_get_listen_timeout>

000d877e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d877e:	2200      	movs	r2, #0
   d8780:	6840      	ldr	r0, [r0, #4]
   d8782:	f7fc bdfd 	b.w	d5380 <network_set_listen_timeout>

000d8786 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8786:	2200      	movs	r2, #0
   d8788:	f081 0101 	eor.w	r1, r1, #1
   d878c:	6840      	ldr	r0, [r0, #4]
   d878e:	f7fc bde7 	b.w	d5360 <network_listen>

000d8792 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8792:	2300      	movs	r3, #0
   d8794:	461a      	mov	r2, r3
   d8796:	4619      	mov	r1, r3
   d8798:	6840      	ldr	r0, [r0, #4]
   d879a:	f7fc bdd9 	b.w	d5350 <network_off>

000d879e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d879e:	2300      	movs	r3, #0
   d87a0:	461a      	mov	r2, r3
   d87a2:	4619      	mov	r1, r3
   d87a4:	6840      	ldr	r0, [r0, #4]
   d87a6:	f7fc bdcb 	b.w	d5340 <network_on>

000d87aa <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d87aa:	2200      	movs	r2, #0
   d87ac:	4611      	mov	r1, r2
   d87ae:	6840      	ldr	r0, [r0, #4]
   d87b0:	f7fc bdae 	b.w	d5310 <network_connecting>

000d87b4 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d87b4:	2200      	movs	r2, #0
   d87b6:	2102      	movs	r1, #2
   d87b8:	6840      	ldr	r0, [r0, #4]
   d87ba:	f7fc bdb1 	b.w	d5320 <network_disconnect>

000d87be <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d87be:	2300      	movs	r3, #0
   d87c0:	461a      	mov	r2, r3
   d87c2:	6840      	ldr	r0, [r0, #4]
   d87c4:	f7fc bd9c 	b.w	d5300 <network_connect>

000d87c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d87c8:	4b02      	ldr	r3, [pc, #8]	; (d87d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d87ca:	2204      	movs	r2, #4
   d87cc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d87ce:	4a02      	ldr	r2, [pc, #8]	; (d87d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d87d0:	601a      	str	r2, [r3, #0]
   d87d2:	4770      	bx	lr
   d87d4:	2003e710 	.word	0x2003e710
   d87d8:	000da7b8 	.word	0x000da7b8

000d87dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d87dc:	2300      	movs	r3, #0
   d87de:	461a      	mov	r2, r3
   d87e0:	6840      	ldr	r0, [r0, #4]
   d87e2:	f7fc bd8d 	b.w	d5300 <network_connect>

000d87e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d87e6:	2200      	movs	r2, #0
   d87e8:	2102      	movs	r1, #2
   d87ea:	6840      	ldr	r0, [r0, #4]
   d87ec:	f7fc bd98 	b.w	d5320 <network_disconnect>

000d87f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d87f0:	2200      	movs	r2, #0
   d87f2:	4611      	mov	r1, r2
   d87f4:	6840      	ldr	r0, [r0, #4]
   d87f6:	f7fc bd8b 	b.w	d5310 <network_connecting>

000d87fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d87fa:	2200      	movs	r2, #0
   d87fc:	4611      	mov	r1, r2
   d87fe:	6840      	ldr	r0, [r0, #4]
   d8800:	f7fc bd96 	b.w	d5330 <network_ready>

000d8804 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8804:	2300      	movs	r3, #0
   d8806:	461a      	mov	r2, r3
   d8808:	4619      	mov	r1, r3
   d880a:	6840      	ldr	r0, [r0, #4]
   d880c:	f7fc bd98 	b.w	d5340 <network_on>

000d8810 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8810:	2300      	movs	r3, #0
   d8812:	461a      	mov	r2, r3
   d8814:	4619      	mov	r1, r3
   d8816:	6840      	ldr	r0, [r0, #4]
   d8818:	f7fc bd9a 	b.w	d5350 <network_off>

000d881c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d881c:	2200      	movs	r2, #0
   d881e:	f081 0101 	eor.w	r1, r1, #1
   d8822:	6840      	ldr	r0, [r0, #4]
   d8824:	f7fc bd9c 	b.w	d5360 <network_listen>

000d8828 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8828:	2200      	movs	r2, #0
   d882a:	6840      	ldr	r0, [r0, #4]
   d882c:	f7fc bda8 	b.w	d5380 <network_set_listen_timeout>

000d8830 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8830:	2200      	movs	r2, #0
   d8832:	4611      	mov	r1, r2
   d8834:	6840      	ldr	r0, [r0, #4]
   d8836:	f7fc bdab 	b.w	d5390 <network_get_listen_timeout>

000d883a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d883a:	2200      	movs	r2, #0
   d883c:	4611      	mov	r1, r2
   d883e:	6840      	ldr	r0, [r0, #4]
   d8840:	f7fc bd96 	b.w	d5370 <network_listening>

000d8844 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8848:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d884a:	b095      	sub	sp, #84	; 0x54
   d884c:	4616      	mov	r6, r2
   d884e:	460d      	mov	r5, r1
   d8850:	4607      	mov	r7, r0
    IPAddress addr;
   d8852:	f7ff fd7b 	bl	d834c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8856:	4621      	mov	r1, r4
   d8858:	2220      	movs	r2, #32
   d885a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d885c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d885e:	f000 fd08 	bl	d9272 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8862:	2340      	movs	r3, #64	; 0x40
   d8864:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8866:	4621      	mov	r1, r4
   d8868:	466b      	mov	r3, sp
   d886a:	aa0c      	add	r2, sp, #48	; 0x30
   d886c:	4630      	mov	r0, r6
   d886e:	f7fc fb41 	bl	d4ef4 <netdb_getaddrinfo>
    if (!r) {
   d8872:	4604      	mov	r4, r0
   d8874:	2800      	cmp	r0, #0
   d8876:	d144      	bne.n	d8902 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8878:	4602      	mov	r2, r0
   d887a:	2101      	movs	r1, #1
   d887c:	6868      	ldr	r0, [r5, #4]
   d887e:	f7fc fd57 	bl	d5330 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8882:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8884:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8886:	4622      	mov	r2, r4
   d8888:	6868      	ldr	r0, [r5, #4]
   d888a:	f7fc fd51 	bl	d5330 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d888e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8890:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8892:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8894:	2e00      	cmp	r6, #0
   d8896:	d034      	beq.n	d8902 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8898:	2900      	cmp	r1, #0
   d889a:	d132      	bne.n	d8902 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d889c:	6873      	ldr	r3, [r6, #4]
   d889e:	2b02      	cmp	r3, #2
   d88a0:	d002      	beq.n	d88a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d88a2:	2b0a      	cmp	r3, #10
   d88a4:	d009      	beq.n	d88ba <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d88a6:	e02a      	b.n	d88fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d88a8:	f1b8 0f00 	cmp.w	r8, #0
   d88ac:	d027      	beq.n	d88fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d88ae:	6971      	ldr	r1, [r6, #20]
   d88b0:	4638      	mov	r0, r7
   d88b2:	3104      	adds	r1, #4
   d88b4:	f7ff fd77 	bl	d83a6 <_ZN9IPAddressaSEPKh>
   d88b8:	e020      	b.n	d88fc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d88ba:	f1b9 0f00 	cmp.w	r9, #0
   d88be:	d01e      	beq.n	d88fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d88c0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d88c2:	2211      	movs	r2, #17
   d88c4:	a801      	add	r0, sp, #4
   d88c6:	f000 fcd4 	bl	d9272 <memset>
                    a.v = 6;
   d88ca:	2306      	movs	r3, #6
   d88cc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d88d0:	ad01      	add	r5, sp, #4
   d88d2:	f104 0308 	add.w	r3, r4, #8
   d88d6:	3418      	adds	r4, #24
   d88d8:	6818      	ldr	r0, [r3, #0]
   d88da:	6859      	ldr	r1, [r3, #4]
   d88dc:	462a      	mov	r2, r5
   d88de:	c203      	stmia	r2!, {r0, r1}
   d88e0:	3308      	adds	r3, #8
   d88e2:	42a3      	cmp	r3, r4
   d88e4:	4615      	mov	r5, r2
   d88e6:	d1f7      	bne.n	d88d8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d88e8:	a901      	add	r1, sp, #4
   d88ea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d88ec:	ad07      	add	r5, sp, #28
   d88ee:	f7ff fd3b 	bl	d8368 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d88f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d88f4:	1d3c      	adds	r4, r7, #4
   d88f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d88f8:	682b      	ldr	r3, [r5, #0]
   d88fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d88fc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d88fe:	69f6      	ldr	r6, [r6, #28]
   d8900:	e7c8      	b.n	d8894 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8902:	9800      	ldr	r0, [sp, #0]
   d8904:	f7fc faee 	bl	d4ee4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8908:	4638      	mov	r0, r7
   d890a:	b015      	add	sp, #84	; 0x54
   d890c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8910 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8910:	4b02      	ldr	r3, [pc, #8]	; (d891c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8912:	4a03      	ldr	r2, [pc, #12]	; (d8920 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8914:	601a      	str	r2, [r3, #0]
   d8916:	2200      	movs	r2, #0
   d8918:	605a      	str	r2, [r3, #4]
   d891a:	4770      	bx	lr
   d891c:	2003e718 	.word	0x2003e718
   d8920:	000da7ec 	.word	0x000da7ec

000d8924 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d8924:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d8928:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d892a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d892e:	2901      	cmp	r1, #1
   d8930:	4610      	mov	r0, r2
   d8932:	d104      	bne.n	d893e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d8934:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d8938:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d893c:	e004      	b.n	d8948 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d893e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8940:	bf04      	itt	eq
   d8942:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d8946:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d8948:	3b01      	subs	r3, #1
   d894a:	f102 0210 	add.w	r2, r2, #16
   d894e:	d1ec      	bne.n	d892a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d8950:	4770      	bx	lr

000d8952 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8952:	b40e      	push	{r1, r2, r3}
   d8954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8958:	b087      	sub	sp, #28
   d895a:	af00      	add	r7, sp, #0
   d895c:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d8960:	4605      	mov	r5, r0
   d8962:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d8966:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8968:	4623      	mov	r3, r4
   d896a:	4632      	mov	r2, r6
   d896c:	2110      	movs	r1, #16
   d896e:	f107 0008 	add.w	r0, r7, #8
   d8972:	f7fc fd4d 	bl	d5410 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8976:	280f      	cmp	r0, #15
   d8978:	d916      	bls.n	d89a8 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d897a:	f100 0308 	add.w	r3, r0, #8
   d897e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d8982:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d8984:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8988:	4632      	mov	r2, r6
   d898a:	1c41      	adds	r1, r0, #1
   d898c:	4623      	mov	r3, r4
   d898e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d8990:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8992:	f7fc fd3d 	bl	d5410 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d8996:	1e02      	subs	r2, r0, #0
   d8998:	dd04      	ble.n	d89a4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d899a:	682b      	ldr	r3, [r5, #0]
   d899c:	4669      	mov	r1, sp
   d899e:	689b      	ldr	r3, [r3, #8]
   d89a0:	4628      	mov	r0, r5
   d89a2:	4798      	blx	r3
   d89a4:	46c5      	mov	sp, r8
   d89a6:	e007      	b.n	d89b8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d89a8:	b130      	cbz	r0, d89b8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d89aa:	682b      	ldr	r3, [r5, #0]
   d89ac:	4602      	mov	r2, r0
   d89ae:	689b      	ldr	r3, [r3, #8]
   d89b0:	f107 0108 	add.w	r1, r7, #8
   d89b4:	4628      	mov	r0, r5
   d89b6:	4798      	blx	r3
    }
}
   d89b8:	371c      	adds	r7, #28
   d89ba:	46bd      	mov	sp, r7
   d89bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d89c0:	b003      	add	sp, #12
   d89c2:	4770      	bx	lr

000d89c4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d89c4:	b513      	push	{r0, r1, r4, lr}
   d89c6:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d89c8:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d89ca:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d89ce:	6894      	ldr	r4, [r2, #8]
   d89d0:	4619      	mov	r1, r3
   d89d2:	2201      	movs	r2, #1
   d89d4:	47a0      	blx	r4
}
   d89d6:	b002      	add	sp, #8
   d89d8:	bd10      	pop	{r4, pc}

000d89da <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d89da:	6883      	ldr	r3, [r0, #8]
   d89dc:	b1fb      	cbz	r3, d8a1e <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d89de:	781a      	ldrb	r2, [r3, #0]
   d89e0:	2a03      	cmp	r2, #3
   d89e2:	d81a      	bhi.n	d8a1a <_ZNK5spark9JSONValue4typeEv+0x40>
   d89e4:	e8df f002 	tbb	[pc, r2]
   d89e8:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d89ec:	2005      	movs	r0, #5
   d89ee:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d89f0:	6802      	ldr	r2, [r0, #0]
   d89f2:	685b      	ldr	r3, [r3, #4]
   d89f4:	6852      	ldr	r2, [r2, #4]
   d89f6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d89f8:	282d      	cmp	r0, #45	; 0x2d
   d89fa:	d014      	beq.n	d8a26 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d89fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8a00:	2b09      	cmp	r3, #9
   d8a02:	d910      	bls.n	d8a26 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8a04:	2874      	cmp	r0, #116	; 0x74
   d8a06:	d010      	beq.n	d8a2a <_ZNK5spark9JSONValue4typeEv+0x50>
   d8a08:	2866      	cmp	r0, #102	; 0x66
   d8a0a:	d00e      	beq.n	d8a2a <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8a0c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8a10:	4258      	negs	r0, r3
   d8a12:	4158      	adcs	r0, r3
   d8a14:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d8a16:	2006      	movs	r0, #6
   d8a18:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8a1a:	2000      	movs	r0, #0
   d8a1c:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8a1e:	4618      	mov	r0, r3
   d8a20:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d8a22:	2004      	movs	r0, #4
   d8a24:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d8a26:	2003      	movs	r0, #3
   d8a28:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d8a2a:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d8a2c:	4770      	bx	lr

000d8a2e <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d8a2e:	b510      	push	{r4, lr}
   d8a30:	4604      	mov	r4, r0
    switch (type()) {
   d8a32:	f7ff ffd2 	bl	d89da <_ZNK5spark9JSONValue4typeEv>
   d8a36:	2802      	cmp	r0, #2
   d8a38:	d00d      	beq.n	d8a56 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d8a3a:	d316      	bcc.n	d8a6a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d8a3c:	2804      	cmp	r0, #4
   d8a3e:	d814      	bhi.n	d8a6a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d8a40:	6822      	ldr	r2, [r4, #0]
   d8a42:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d8a44:	6850      	ldr	r0, [r2, #4]
   d8a46:	685b      	ldr	r3, [r3, #4]
   d8a48:	220a      	movs	r2, #10
   d8a4a:	2100      	movs	r1, #0
   d8a4c:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d8a4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d8a52:	f000 bd45 	b.w	d94e0 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d8a56:	6822      	ldr	r2, [r4, #0]
   d8a58:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8a5a:	6852      	ldr	r2, [r2, #4]
   d8a5c:	685b      	ldr	r3, [r3, #4]
   d8a5e:	5cd0      	ldrb	r0, [r2, r3]
   d8a60:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d8a64:	4258      	negs	r0, r3
   d8a66:	4158      	adcs	r0, r3
   d8a68:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d8a6a:	2000      	movs	r0, #0
    }
}
   d8a6c:	bd10      	pop	{r4, pc}

000d8a6e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8a6e:	b510      	push	{r4, lr}
    if (!n_) {
   d8a70:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8a72:	4604      	mov	r4, r0
    if (!n_) {
   d8a74:	b15b      	cbz	r3, d8a8e <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d8a76:	6880      	ldr	r0, [r0, #8]
   d8a78:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d8a7a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d8a7c:	3010      	adds	r0, #16
   d8a7e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8a80:	6120      	str	r0, [r4, #16]
    --n_;
   d8a82:	6163      	str	r3, [r4, #20]
    if (n_) {
   d8a84:	b12b      	cbz	r3, d8a92 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d8a86:	f7ff ff4d 	bl	d8924 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8a8a:	60a0      	str	r0, [r4, #8]
   d8a8c:	e001      	b.n	d8a92 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d8a8e:	4618      	mov	r0, r3
   d8a90:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d8a92:	2001      	movs	r0, #1
}
   d8a94:	bd10      	pop	{r4, pc}

000d8a96 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d8a96:	b510      	push	{r4, lr}
    write('}');
   d8a98:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d8a9a:	4604      	mov	r4, r0
    write('}');
   d8a9c:	f7ff ff92 	bl	d89c4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8aa0:	2301      	movs	r3, #1
   d8aa2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8aa4:	4620      	mov	r0, r4
   d8aa6:	bd10      	pop	{r4, pc}

000d8aa8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d8aa8:	b508      	push	{r3, lr}
    switch (state_) {
   d8aaa:	7903      	ldrb	r3, [r0, #4]
   d8aac:	2b01      	cmp	r3, #1
   d8aae:	d002      	beq.n	d8ab6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d8ab0:	2b02      	cmp	r3, #2
   d8ab2:	d002      	beq.n	d8aba <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d8ab4:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d8ab6:	212c      	movs	r1, #44	; 0x2c
   d8ab8:	e000      	b.n	d8abc <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d8aba:	213a      	movs	r1, #58	; 0x3a
   d8abc:	f7ff ff82 	bl	d89c4 <_ZN5spark10JSONWriter5writeEc>
   d8ac0:	bd08      	pop	{r3, pc}

000d8ac2 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d8ac2:	b510      	push	{r4, lr}
   d8ac4:	4604      	mov	r4, r0
    writeSeparator();
   d8ac6:	f7ff ffef 	bl	d8aa8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8aca:	4620      	mov	r0, r4
   d8acc:	217b      	movs	r1, #123	; 0x7b
   d8ace:	f7ff ff79 	bl	d89c4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d8ad2:	2300      	movs	r3, #0
   d8ad4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8ad6:	4620      	mov	r0, r4
   d8ad8:	bd10      	pop	{r4, pc}
	...

000d8adc <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8adc:	b538      	push	{r3, r4, r5, lr}
   d8ade:	4604      	mov	r4, r0
   d8ae0:	460d      	mov	r5, r1
    writeSeparator();
   d8ae2:	f7ff ffe1 	bl	d8aa8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8ae6:	6823      	ldr	r3, [r4, #0]
   d8ae8:	4904      	ldr	r1, [pc, #16]	; (d8afc <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8aea:	68db      	ldr	r3, [r3, #12]
   d8aec:	4620      	mov	r0, r4
   d8aee:	462a      	mov	r2, r5
   d8af0:	4798      	blx	r3
    state_ = NEXT;
   d8af2:	2301      	movs	r3, #1
   d8af4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8af6:	4620      	mov	r0, r4
   d8af8:	bd38      	pop	{r3, r4, r5, pc}
   d8afa:	bf00      	nop
   d8afc:	000d9fc3 	.word	0x000d9fc3

000d8b00 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8b00:	b538      	push	{r3, r4, r5, lr}
   d8b02:	4604      	mov	r4, r0
   d8b04:	460d      	mov	r5, r1
    writeSeparator();
   d8b06:	f7ff ffcf 	bl	d8aa8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8b0a:	6823      	ldr	r3, [r4, #0]
   d8b0c:	4904      	ldr	r1, [pc, #16]	; (d8b20 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8b0e:	68db      	ldr	r3, [r3, #12]
   d8b10:	4620      	mov	r0, r4
   d8b12:	462a      	mov	r2, r5
   d8b14:	4798      	blx	r3
    state_ = NEXT;
   d8b16:	2301      	movs	r3, #1
   d8b18:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8b1a:	4620      	mov	r0, r4
   d8b1c:	bd38      	pop	{r3, r4, r5, pc}
   d8b1e:	bf00      	nop
   d8b20:	000d9d62 	.word	0x000d9d62

000d8b24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8b26:	460d      	mov	r5, r1
   d8b28:	4617      	mov	r7, r2
    write('"');
   d8b2a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8b2c:	4604      	mov	r4, r0
   d8b2e:	442f      	add	r7, r5
    write('"');
   d8b30:	f7ff ff48 	bl	d89c4 <_ZN5spark10JSONWriter5writeEc>
   d8b34:	462a      	mov	r2, r5
    const char* const end = str + size;
   d8b36:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d8b38:	42ba      	cmp	r2, r7
   d8b3a:	d038      	beq.n	d8bae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d8b3c:	4616      	mov	r6, r2
   d8b3e:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8b42:	2d22      	cmp	r5, #34	; 0x22
   d8b44:	d003      	beq.n	d8b4e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8b46:	2d5c      	cmp	r5, #92	; 0x5c
   d8b48:	d001      	beq.n	d8b4e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8b4a:	2d1f      	cmp	r5, #31
   d8b4c:	d82d      	bhi.n	d8baa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d8b4e:	6823      	ldr	r3, [r4, #0]
   d8b50:	1a52      	subs	r2, r2, r1
   d8b52:	689b      	ldr	r3, [r3, #8]
   d8b54:	4620      	mov	r0, r4
   d8b56:	4798      	blx	r3
            write('\\');
   d8b58:	215c      	movs	r1, #92	; 0x5c
   d8b5a:	4620      	mov	r0, r4
   d8b5c:	f7ff ff32 	bl	d89c4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8b60:	2d0c      	cmp	r5, #12
   d8b62:	d019      	beq.n	d8b98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d8b64:	d807      	bhi.n	d8b76 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d8b66:	2d09      	cmp	r5, #9
   d8b68:	d00f      	beq.n	d8b8a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d8b6a:	2d0a      	cmp	r5, #10
   d8b6c:	d012      	beq.n	d8b94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d8b6e:	2d08      	cmp	r5, #8
   d8b70:	d114      	bne.n	d8b9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d8b72:	2162      	movs	r1, #98	; 0x62
   d8b74:	e00a      	b.n	d8b8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d8b76:	2d22      	cmp	r5, #34	; 0x22
   d8b78:	d005      	beq.n	d8b86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8b7a:	2d5c      	cmp	r5, #92	; 0x5c
   d8b7c:	d003      	beq.n	d8b86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8b7e:	2d0d      	cmp	r5, #13
   d8b80:	d10c      	bne.n	d8b9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d8b82:	2172      	movs	r1, #114	; 0x72
   d8b84:	e002      	b.n	d8b8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d8b86:	4629      	mov	r1, r5
   d8b88:	e000      	b.n	d8b8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d8b8a:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d8b8c:	4620      	mov	r0, r4
   d8b8e:	f7ff ff19 	bl	d89c4 <_ZN5spark10JSONWriter5writeEc>
                break;
   d8b92:	e009      	b.n	d8ba8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d8b94:	216e      	movs	r1, #110	; 0x6e
   d8b96:	e7f9      	b.n	d8b8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d8b98:	2166      	movs	r1, #102	; 0x66
   d8b9a:	e7f7      	b.n	d8b8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8b9c:	6823      	ldr	r3, [r4, #0]
   d8b9e:	490a      	ldr	r1, [pc, #40]	; (d8bc8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d8ba0:	68db      	ldr	r3, [r3, #12]
   d8ba2:	462a      	mov	r2, r5
   d8ba4:	4620      	mov	r0, r4
   d8ba6:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d8ba8:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d8baa:	4632      	mov	r2, r6
   d8bac:	e7c4      	b.n	d8b38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d8bae:	4291      	cmp	r1, r2
   d8bb0:	d004      	beq.n	d8bbc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d8bb2:	6823      	ldr	r3, [r4, #0]
   d8bb4:	1a52      	subs	r2, r2, r1
   d8bb6:	689d      	ldr	r5, [r3, #8]
   d8bb8:	4620      	mov	r0, r4
   d8bba:	47a8      	blx	r5
    }
    write('"');
   d8bbc:	2122      	movs	r1, #34	; 0x22
   d8bbe:	4620      	mov	r0, r4
   d8bc0:	f7ff ff00 	bl	d89c4 <_ZN5spark10JSONWriter5writeEc>
   d8bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8bc6:	bf00      	nop
   d8bc8:	000da835 	.word	0x000da835

000d8bcc <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8bcc:	b570      	push	{r4, r5, r6, lr}
   d8bce:	4604      	mov	r4, r0
   d8bd0:	460d      	mov	r5, r1
   d8bd2:	4616      	mov	r6, r2
    writeSeparator();
   d8bd4:	f7ff ff68 	bl	d8aa8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8bd8:	4620      	mov	r0, r4
   d8bda:	4632      	mov	r2, r6
   d8bdc:	4629      	mov	r1, r5
   d8bde:	f7ff ffa1 	bl	d8b24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d8be2:	2302      	movs	r3, #2
   d8be4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8be6:	4620      	mov	r0, r4
   d8be8:	bd70      	pop	{r4, r5, r6, pc}

000d8bea <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8bea:	b570      	push	{r4, r5, r6, lr}
   d8bec:	4604      	mov	r4, r0
   d8bee:	460d      	mov	r5, r1
   d8bf0:	4616      	mov	r6, r2
    writeSeparator();
   d8bf2:	f7ff ff59 	bl	d8aa8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d8bf6:	4620      	mov	r0, r4
   d8bf8:	4632      	mov	r2, r6
   d8bfa:	4629      	mov	r1, r5
   d8bfc:	f7ff ff92 	bl	d8b24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8c00:	2301      	movs	r3, #1
   d8c02:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8c04:	4620      	mov	r0, r4
   d8c06:	bd70      	pop	{r4, r5, r6, pc}

000d8c08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8c08:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8c0a:	2300      	movs	r3, #0
   d8c0c:	4604      	mov	r4, r0
   d8c0e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8c10:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d8c12:	4810      	ldr	r0, [pc, #64]	; (d8c54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d8c14:	60a0      	str	r0, [r4, #8]
   d8c16:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8c18:	b1d1      	cbz	r1, d8c50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d8c1a:	780b      	ldrb	r3, [r1, #0]
   d8c1c:	2b03      	cmp	r3, #3
   d8c1e:	d006      	beq.n	d8c2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8c20:	b9b3      	cbnz	r3, d8c50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d8c22:	6813      	ldr	r3, [r2, #0]
   d8c24:	6858      	ldr	r0, [r3, #4]
   d8c26:	684b      	ldr	r3, [r1, #4]
   d8c28:	5cc3      	ldrb	r3, [r0, r3]
   d8c2a:	2b6e      	cmp	r3, #110	; 0x6e
   d8c2c:	d008      	beq.n	d8c40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d8c2e:	6813      	ldr	r3, [r2, #0]
   d8c30:	6858      	ldr	r0, [r3, #4]
   d8c32:	684b      	ldr	r3, [r1, #4]
   d8c34:	4403      	add	r3, r0
   d8c36:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d8c38:	688b      	ldr	r3, [r1, #8]
   d8c3a:	6849      	ldr	r1, [r1, #4]
   d8c3c:	1a5b      	subs	r3, r3, r1
   d8c3e:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8c40:	4611      	mov	r1, r2
   d8c42:	4620      	mov	r0, r4
   d8c44:	f851 3b04 	ldr.w	r3, [r1], #4
   d8c48:	f840 3b04 	str.w	r3, [r0], #4
   d8c4c:	f7fd fc16 	bl	d647c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d8c50:	4620      	mov	r0, r4
   d8c52:	bd10      	pop	{r4, pc}
   d8c54:	000da664 	.word	0x000da664

000d8c58 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8c58:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8c5a:	b510      	push	{r4, lr}
   d8c5c:	4604      	mov	r4, r0
   d8c5e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8c60:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d8c62:	6083      	str	r3, [r0, #8]
   d8c64:	60c3      	str	r3, [r0, #12]
   d8c66:	6103      	str	r3, [r0, #16]
   d8c68:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d8c6a:	b171      	cbz	r1, d8c8a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d8c6c:	780b      	ldrb	r3, [r1, #0]
   d8c6e:	2b01      	cmp	r3, #1
   d8c70:	d10b      	bne.n	d8c8a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d8c72:	f101 0310 	add.w	r3, r1, #16
   d8c76:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d8c78:	68cb      	ldr	r3, [r1, #12]
   d8c7a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8c7c:	4611      	mov	r1, r2
   d8c7e:	f851 3b04 	ldr.w	r3, [r1], #4
   d8c82:	f840 3b04 	str.w	r3, [r0], #4
   d8c86:	f7fd fbf9 	bl	d647c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d8c8a:	4620      	mov	r0, r4
   d8c8c:	bd10      	pop	{r4, pc}

000d8c8e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8c8e:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8c90:	b510      	push	{r4, lr}
   d8c92:	4604      	mov	r4, r0
   d8c94:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8c96:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d8c98:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d8c9a:	b131      	cbz	r1, d8caa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8c9c:	4611      	mov	r1, r2
   d8c9e:	f851 3b04 	ldr.w	r3, [r1], #4
   d8ca2:	f840 3b04 	str.w	r3, [r0], #4
   d8ca6:	f7fd fbe9 	bl	d647c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d8caa:	4620      	mov	r0, r4
   d8cac:	bd10      	pop	{r4, pc}

000d8cae <__aeabi_atexit>:
   d8cae:	460b      	mov	r3, r1
   d8cb0:	4601      	mov	r1, r0
   d8cb2:	4618      	mov	r0, r3
   d8cb4:	f000 b9a2 	b.w	d8ffc <__cxa_atexit>

000d8cb8 <_ZSt15get_new_handlerv>:
   d8cb8:	4b02      	ldr	r3, [pc, #8]	; (d8cc4 <_ZSt15get_new_handlerv+0xc>)
   d8cba:	6818      	ldr	r0, [r3, #0]
   d8cbc:	f3bf 8f5f 	dmb	sy
   d8cc0:	4770      	bx	lr
   d8cc2:	bf00      	nop
   d8cc4:	2003e724 	.word	0x2003e724

000d8cc8 <_ZdlPvj>:
   d8cc8:	f7fb b9e7 	b.w	d409a <_ZdlPv>

000d8ccc <_ZnwjRKSt9nothrow_t>:
   d8ccc:	b510      	push	{r4, lr}
   d8cce:	2800      	cmp	r0, #0
   d8cd0:	bf14      	ite	ne
   d8cd2:	4604      	movne	r4, r0
   d8cd4:	2401      	moveq	r4, #1
   d8cd6:	4620      	mov	r0, r4
   d8cd8:	f7fc fb72 	bl	d53c0 <malloc>
   d8cdc:	b920      	cbnz	r0, d8ce8 <_ZnwjRKSt9nothrow_t+0x1c>
   d8cde:	f7ff ffeb 	bl	d8cb8 <_ZSt15get_new_handlerv>
   d8ce2:	b108      	cbz	r0, d8ce8 <_ZnwjRKSt9nothrow_t+0x1c>
   d8ce4:	4780      	blx	r0
   d8ce6:	e7f6      	b.n	d8cd6 <_ZnwjRKSt9nothrow_t+0xa>
   d8ce8:	bd10      	pop	{r4, pc}
	...

000d8cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8cec:	4b18      	ldr	r3, [pc, #96]	; (d8d50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8cee:	681a      	ldr	r2, [r3, #0]
   d8cf0:	07d1      	lsls	r1, r2, #31
   d8cf2:	bf5c      	itt	pl
   d8cf4:	2201      	movpl	r2, #1
   d8cf6:	601a      	strpl	r2, [r3, #0]
   d8cf8:	4b16      	ldr	r3, [pc, #88]	; (d8d54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8cfa:	681a      	ldr	r2, [r3, #0]
   d8cfc:	07d2      	lsls	r2, r2, #31
   d8cfe:	bf5c      	itt	pl
   d8d00:	2201      	movpl	r2, #1
   d8d02:	601a      	strpl	r2, [r3, #0]
   d8d04:	4b14      	ldr	r3, [pc, #80]	; (d8d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8d06:	681a      	ldr	r2, [r3, #0]
   d8d08:	07d0      	lsls	r0, r2, #31
   d8d0a:	bf5c      	itt	pl
   d8d0c:	2201      	movpl	r2, #1
   d8d0e:	601a      	strpl	r2, [r3, #0]
   d8d10:	4b12      	ldr	r3, [pc, #72]	; (d8d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8d12:	681a      	ldr	r2, [r3, #0]
   d8d14:	07d1      	lsls	r1, r2, #31
   d8d16:	bf5c      	itt	pl
   d8d18:	2201      	movpl	r2, #1
   d8d1a:	601a      	strpl	r2, [r3, #0]
   d8d1c:	4b10      	ldr	r3, [pc, #64]	; (d8d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8d1e:	681a      	ldr	r2, [r3, #0]
   d8d20:	07d2      	lsls	r2, r2, #31
   d8d22:	bf5c      	itt	pl
   d8d24:	2201      	movpl	r2, #1
   d8d26:	601a      	strpl	r2, [r3, #0]
   d8d28:	4b0e      	ldr	r3, [pc, #56]	; (d8d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8d2a:	681a      	ldr	r2, [r3, #0]
   d8d2c:	07d0      	lsls	r0, r2, #31
   d8d2e:	bf5c      	itt	pl
   d8d30:	2201      	movpl	r2, #1
   d8d32:	601a      	strpl	r2, [r3, #0]
   d8d34:	4b0c      	ldr	r3, [pc, #48]	; (d8d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8d36:	681a      	ldr	r2, [r3, #0]
   d8d38:	07d1      	lsls	r1, r2, #31
   d8d3a:	bf5c      	itt	pl
   d8d3c:	2201      	movpl	r2, #1
   d8d3e:	601a      	strpl	r2, [r3, #0]
   d8d40:	4b0a      	ldr	r3, [pc, #40]	; (d8d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8d42:	681a      	ldr	r2, [r3, #0]
   d8d44:	07d2      	lsls	r2, r2, #31
   d8d46:	bf5c      	itt	pl
   d8d48:	2201      	movpl	r2, #1
   d8d4a:	601a      	strpl	r2, [r3, #0]
   d8d4c:	4770      	bx	lr
   d8d4e:	bf00      	nop
   d8d50:	2003e744 	.word	0x2003e744
   d8d54:	2003e740 	.word	0x2003e740
   d8d58:	2003e73c 	.word	0x2003e73c
   d8d5c:	2003e738 	.word	0x2003e738
   d8d60:	2003e734 	.word	0x2003e734
   d8d64:	2003e730 	.word	0x2003e730
   d8d68:	2003e72c 	.word	0x2003e72c
   d8d6c:	2003e728 	.word	0x2003e728

000d8d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8d70:	4b24      	ldr	r3, [pc, #144]	; (d8e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d8d72:	681a      	ldr	r2, [r3, #0]
   d8d74:	07d0      	lsls	r0, r2, #31
   d8d76:	bf5c      	itt	pl
   d8d78:	2201      	movpl	r2, #1
   d8d7a:	601a      	strpl	r2, [r3, #0]
   d8d7c:	4b22      	ldr	r3, [pc, #136]	; (d8e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8d7e:	681a      	ldr	r2, [r3, #0]
   d8d80:	07d1      	lsls	r1, r2, #31
   d8d82:	bf5c      	itt	pl
   d8d84:	2201      	movpl	r2, #1
   d8d86:	601a      	strpl	r2, [r3, #0]
   d8d88:	4b20      	ldr	r3, [pc, #128]	; (d8e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8d8a:	681a      	ldr	r2, [r3, #0]
   d8d8c:	07d2      	lsls	r2, r2, #31
   d8d8e:	bf5c      	itt	pl
   d8d90:	2201      	movpl	r2, #1
   d8d92:	601a      	strpl	r2, [r3, #0]
   d8d94:	4b1e      	ldr	r3, [pc, #120]	; (d8e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8d96:	681a      	ldr	r2, [r3, #0]
   d8d98:	07d0      	lsls	r0, r2, #31
   d8d9a:	bf5c      	itt	pl
   d8d9c:	2201      	movpl	r2, #1
   d8d9e:	601a      	strpl	r2, [r3, #0]
   d8da0:	4b1c      	ldr	r3, [pc, #112]	; (d8e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8da2:	681a      	ldr	r2, [r3, #0]
   d8da4:	07d1      	lsls	r1, r2, #31
   d8da6:	bf5c      	itt	pl
   d8da8:	2201      	movpl	r2, #1
   d8daa:	601a      	strpl	r2, [r3, #0]
   d8dac:	4b1a      	ldr	r3, [pc, #104]	; (d8e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8dae:	681a      	ldr	r2, [r3, #0]
   d8db0:	07d2      	lsls	r2, r2, #31
   d8db2:	bf5c      	itt	pl
   d8db4:	2201      	movpl	r2, #1
   d8db6:	601a      	strpl	r2, [r3, #0]
   d8db8:	4b18      	ldr	r3, [pc, #96]	; (d8e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8dba:	681a      	ldr	r2, [r3, #0]
   d8dbc:	07d0      	lsls	r0, r2, #31
   d8dbe:	bf5c      	itt	pl
   d8dc0:	2201      	movpl	r2, #1
   d8dc2:	601a      	strpl	r2, [r3, #0]
   d8dc4:	4b16      	ldr	r3, [pc, #88]	; (d8e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8dc6:	681a      	ldr	r2, [r3, #0]
   d8dc8:	07d1      	lsls	r1, r2, #31
   d8dca:	bf5c      	itt	pl
   d8dcc:	2201      	movpl	r2, #1
   d8dce:	601a      	strpl	r2, [r3, #0]
   d8dd0:	4b14      	ldr	r3, [pc, #80]	; (d8e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8dd2:	681a      	ldr	r2, [r3, #0]
   d8dd4:	07d2      	lsls	r2, r2, #31
   d8dd6:	bf5c      	itt	pl
   d8dd8:	2201      	movpl	r2, #1
   d8dda:	601a      	strpl	r2, [r3, #0]
   d8ddc:	4b12      	ldr	r3, [pc, #72]	; (d8e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8dde:	681a      	ldr	r2, [r3, #0]
   d8de0:	07d0      	lsls	r0, r2, #31
   d8de2:	bf5c      	itt	pl
   d8de4:	2201      	movpl	r2, #1
   d8de6:	601a      	strpl	r2, [r3, #0]
   d8de8:	4b10      	ldr	r3, [pc, #64]	; (d8e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d8dea:	681a      	ldr	r2, [r3, #0]
   d8dec:	07d1      	lsls	r1, r2, #31
   d8dee:	bf5c      	itt	pl
   d8df0:	2201      	movpl	r2, #1
   d8df2:	601a      	strpl	r2, [r3, #0]
   d8df4:	4b0e      	ldr	r3, [pc, #56]	; (d8e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d8df6:	681a      	ldr	r2, [r3, #0]
   d8df8:	07d2      	lsls	r2, r2, #31
   d8dfa:	bf5c      	itt	pl
   d8dfc:	2201      	movpl	r2, #1
   d8dfe:	601a      	strpl	r2, [r3, #0]
   d8e00:	4770      	bx	lr
   d8e02:	bf00      	nop
   d8e04:	2003e774 	.word	0x2003e774
   d8e08:	2003e770 	.word	0x2003e770
   d8e0c:	2003e76c 	.word	0x2003e76c
   d8e10:	2003e768 	.word	0x2003e768
   d8e14:	2003e764 	.word	0x2003e764
   d8e18:	2003e760 	.word	0x2003e760
   d8e1c:	2003e75c 	.word	0x2003e75c
   d8e20:	2003e758 	.word	0x2003e758
   d8e24:	2003e754 	.word	0x2003e754
   d8e28:	2003e750 	.word	0x2003e750
   d8e2c:	2003e74c 	.word	0x2003e74c
   d8e30:	2003e748 	.word	0x2003e748

000d8e34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8e34:	4b24      	ldr	r3, [pc, #144]	; (d8ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8e36:	681a      	ldr	r2, [r3, #0]
   d8e38:	07d0      	lsls	r0, r2, #31
   d8e3a:	bf5c      	itt	pl
   d8e3c:	2201      	movpl	r2, #1
   d8e3e:	601a      	strpl	r2, [r3, #0]
   d8e40:	4b22      	ldr	r3, [pc, #136]	; (d8ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8e42:	681a      	ldr	r2, [r3, #0]
   d8e44:	07d1      	lsls	r1, r2, #31
   d8e46:	bf5c      	itt	pl
   d8e48:	2201      	movpl	r2, #1
   d8e4a:	601a      	strpl	r2, [r3, #0]
   d8e4c:	4b20      	ldr	r3, [pc, #128]	; (d8ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8e4e:	681a      	ldr	r2, [r3, #0]
   d8e50:	07d2      	lsls	r2, r2, #31
   d8e52:	bf5c      	itt	pl
   d8e54:	2201      	movpl	r2, #1
   d8e56:	601a      	strpl	r2, [r3, #0]
   d8e58:	4b1e      	ldr	r3, [pc, #120]	; (d8ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8e5a:	681a      	ldr	r2, [r3, #0]
   d8e5c:	07d0      	lsls	r0, r2, #31
   d8e5e:	bf5c      	itt	pl
   d8e60:	2201      	movpl	r2, #1
   d8e62:	601a      	strpl	r2, [r3, #0]
   d8e64:	4b1c      	ldr	r3, [pc, #112]	; (d8ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8e66:	681a      	ldr	r2, [r3, #0]
   d8e68:	07d1      	lsls	r1, r2, #31
   d8e6a:	bf5c      	itt	pl
   d8e6c:	2201      	movpl	r2, #1
   d8e6e:	601a      	strpl	r2, [r3, #0]
   d8e70:	4b1a      	ldr	r3, [pc, #104]	; (d8edc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8e72:	681a      	ldr	r2, [r3, #0]
   d8e74:	07d2      	lsls	r2, r2, #31
   d8e76:	bf5c      	itt	pl
   d8e78:	2201      	movpl	r2, #1
   d8e7a:	601a      	strpl	r2, [r3, #0]
   d8e7c:	4b18      	ldr	r3, [pc, #96]	; (d8ee0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8e7e:	681a      	ldr	r2, [r3, #0]
   d8e80:	07d0      	lsls	r0, r2, #31
   d8e82:	bf5c      	itt	pl
   d8e84:	2201      	movpl	r2, #1
   d8e86:	601a      	strpl	r2, [r3, #0]
   d8e88:	4b16      	ldr	r3, [pc, #88]	; (d8ee4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8e8a:	681a      	ldr	r2, [r3, #0]
   d8e8c:	07d1      	lsls	r1, r2, #31
   d8e8e:	bf5c      	itt	pl
   d8e90:	2201      	movpl	r2, #1
   d8e92:	601a      	strpl	r2, [r3, #0]
   d8e94:	4b14      	ldr	r3, [pc, #80]	; (d8ee8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8e96:	681a      	ldr	r2, [r3, #0]
   d8e98:	07d2      	lsls	r2, r2, #31
   d8e9a:	bf5c      	itt	pl
   d8e9c:	2201      	movpl	r2, #1
   d8e9e:	601a      	strpl	r2, [r3, #0]
   d8ea0:	4b12      	ldr	r3, [pc, #72]	; (d8eec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8ea2:	681a      	ldr	r2, [r3, #0]
   d8ea4:	07d0      	lsls	r0, r2, #31
   d8ea6:	bf5c      	itt	pl
   d8ea8:	2201      	movpl	r2, #1
   d8eaa:	601a      	strpl	r2, [r3, #0]
   d8eac:	4b10      	ldr	r3, [pc, #64]	; (d8ef0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8eae:	681a      	ldr	r2, [r3, #0]
   d8eb0:	07d1      	lsls	r1, r2, #31
   d8eb2:	bf5c      	itt	pl
   d8eb4:	2201      	movpl	r2, #1
   d8eb6:	601a      	strpl	r2, [r3, #0]
   d8eb8:	4b0e      	ldr	r3, [pc, #56]	; (d8ef4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8eba:	681a      	ldr	r2, [r3, #0]
   d8ebc:	07d2      	lsls	r2, r2, #31
   d8ebe:	bf5c      	itt	pl
   d8ec0:	2201      	movpl	r2, #1
   d8ec2:	601a      	strpl	r2, [r3, #0]
   d8ec4:	4770      	bx	lr
   d8ec6:	bf00      	nop
   d8ec8:	2003e7a4 	.word	0x2003e7a4
   d8ecc:	2003e7a0 	.word	0x2003e7a0
   d8ed0:	2003e79c 	.word	0x2003e79c
   d8ed4:	2003e798 	.word	0x2003e798
   d8ed8:	2003e794 	.word	0x2003e794
   d8edc:	2003e790 	.word	0x2003e790
   d8ee0:	2003e78c 	.word	0x2003e78c
   d8ee4:	2003e788 	.word	0x2003e788
   d8ee8:	2003e784 	.word	0x2003e784
   d8eec:	2003e780 	.word	0x2003e780
   d8ef0:	2003e77c 	.word	0x2003e77c
   d8ef4:	2003e778 	.word	0x2003e778

000d8ef8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8ef8:	4b18      	ldr	r3, [pc, #96]	; (d8f5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8efa:	681a      	ldr	r2, [r3, #0]
   d8efc:	07d1      	lsls	r1, r2, #31
   d8efe:	bf5c      	itt	pl
   d8f00:	2201      	movpl	r2, #1
   d8f02:	601a      	strpl	r2, [r3, #0]
   d8f04:	4b16      	ldr	r3, [pc, #88]	; (d8f60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8f06:	681a      	ldr	r2, [r3, #0]
   d8f08:	07d2      	lsls	r2, r2, #31
   d8f0a:	bf5c      	itt	pl
   d8f0c:	2201      	movpl	r2, #1
   d8f0e:	601a      	strpl	r2, [r3, #0]
   d8f10:	4b14      	ldr	r3, [pc, #80]	; (d8f64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8f12:	681a      	ldr	r2, [r3, #0]
   d8f14:	07d0      	lsls	r0, r2, #31
   d8f16:	bf5c      	itt	pl
   d8f18:	2201      	movpl	r2, #1
   d8f1a:	601a      	strpl	r2, [r3, #0]
   d8f1c:	4b12      	ldr	r3, [pc, #72]	; (d8f68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8f1e:	681a      	ldr	r2, [r3, #0]
   d8f20:	07d1      	lsls	r1, r2, #31
   d8f22:	bf5c      	itt	pl
   d8f24:	2201      	movpl	r2, #1
   d8f26:	601a      	strpl	r2, [r3, #0]
   d8f28:	4b10      	ldr	r3, [pc, #64]	; (d8f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8f2a:	681a      	ldr	r2, [r3, #0]
   d8f2c:	07d2      	lsls	r2, r2, #31
   d8f2e:	bf5c      	itt	pl
   d8f30:	2201      	movpl	r2, #1
   d8f32:	601a      	strpl	r2, [r3, #0]
   d8f34:	4b0e      	ldr	r3, [pc, #56]	; (d8f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8f36:	681a      	ldr	r2, [r3, #0]
   d8f38:	07d0      	lsls	r0, r2, #31
   d8f3a:	bf5c      	itt	pl
   d8f3c:	2201      	movpl	r2, #1
   d8f3e:	601a      	strpl	r2, [r3, #0]
   d8f40:	4b0c      	ldr	r3, [pc, #48]	; (d8f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8f42:	681a      	ldr	r2, [r3, #0]
   d8f44:	07d1      	lsls	r1, r2, #31
   d8f46:	bf5c      	itt	pl
   d8f48:	2201      	movpl	r2, #1
   d8f4a:	601a      	strpl	r2, [r3, #0]
   d8f4c:	4b0a      	ldr	r3, [pc, #40]	; (d8f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8f4e:	681a      	ldr	r2, [r3, #0]
   d8f50:	07d2      	lsls	r2, r2, #31
   d8f52:	bf5c      	itt	pl
   d8f54:	2201      	movpl	r2, #1
   d8f56:	601a      	strpl	r2, [r3, #0]
   d8f58:	4770      	bx	lr
   d8f5a:	bf00      	nop
   d8f5c:	2003e7c4 	.word	0x2003e7c4
   d8f60:	2003e7c0 	.word	0x2003e7c0
   d8f64:	2003e7bc 	.word	0x2003e7bc
   d8f68:	2003e7b8 	.word	0x2003e7b8
   d8f6c:	2003e7b4 	.word	0x2003e7b4
   d8f70:	2003e7b0 	.word	0x2003e7b0
   d8f74:	2003e7ac 	.word	0x2003e7ac
   d8f78:	2003e7a8 	.word	0x2003e7a8

000d8f7c <asctime>:
   d8f7c:	4b09      	ldr	r3, [pc, #36]	; (d8fa4 <asctime+0x28>)
   d8f7e:	b570      	push	{r4, r5, r6, lr}
   d8f80:	681c      	ldr	r4, [r3, #0]
   d8f82:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d8f84:	4606      	mov	r6, r0
   d8f86:	b93d      	cbnz	r5, d8f98 <asctime+0x1c>
   d8f88:	201a      	movs	r0, #26
   d8f8a:	f7fc fa19 	bl	d53c0 <malloc>
   d8f8e:	221a      	movs	r2, #26
   d8f90:	6420      	str	r0, [r4, #64]	; 0x40
   d8f92:	4629      	mov	r1, r5
   d8f94:	f000 f96d 	bl	d9272 <memset>
   d8f98:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d8f9a:	4630      	mov	r0, r6
   d8f9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8fa0:	f000 b802 	b.w	d8fa8 <asctime_r>
   d8fa4:	2003d830 	.word	0x2003d830

000d8fa8 <asctime_r>:
   d8fa8:	b510      	push	{r4, lr}
   d8faa:	460c      	mov	r4, r1
   d8fac:	6941      	ldr	r1, [r0, #20]
   d8fae:	6903      	ldr	r3, [r0, #16]
   d8fb0:	6982      	ldr	r2, [r0, #24]
   d8fb2:	b086      	sub	sp, #24
   d8fb4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8fb8:	9104      	str	r1, [sp, #16]
   d8fba:	6801      	ldr	r1, [r0, #0]
   d8fbc:	9103      	str	r1, [sp, #12]
   d8fbe:	6841      	ldr	r1, [r0, #4]
   d8fc0:	9102      	str	r1, [sp, #8]
   d8fc2:	6881      	ldr	r1, [r0, #8]
   d8fc4:	9101      	str	r1, [sp, #4]
   d8fc6:	68c1      	ldr	r1, [r0, #12]
   d8fc8:	9100      	str	r1, [sp, #0]
   d8fca:	4907      	ldr	r1, [pc, #28]	; (d8fe8 <asctime_r+0x40>)
   d8fcc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8fd0:	440b      	add	r3, r1
   d8fd2:	4906      	ldr	r1, [pc, #24]	; (d8fec <asctime_r+0x44>)
   d8fd4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8fd8:	440a      	add	r2, r1
   d8fda:	4620      	mov	r0, r4
   d8fdc:	4904      	ldr	r1, [pc, #16]	; (d8ff0 <asctime_r+0x48>)
   d8fde:	f7fc fa07 	bl	d53f0 <siprintf>
   d8fe2:	4620      	mov	r0, r4
   d8fe4:	b006      	add	sp, #24
   d8fe6:	bd10      	pop	{r4, pc}
   d8fe8:	000da851 	.word	0x000da851
   d8fec:	000da83c 	.word	0x000da83c
   d8ff0:	000da875 	.word	0x000da875

000d8ff4 <atol>:
   d8ff4:	220a      	movs	r2, #10
   d8ff6:	2100      	movs	r1, #0
   d8ff8:	f000 ba72 	b.w	d94e0 <strtol>

000d8ffc <__cxa_atexit>:
   d8ffc:	b510      	push	{r4, lr}
   d8ffe:	4c05      	ldr	r4, [pc, #20]	; (d9014 <__cxa_atexit+0x18>)
   d9000:	4613      	mov	r3, r2
   d9002:	b12c      	cbz	r4, d9010 <__cxa_atexit+0x14>
   d9004:	460a      	mov	r2, r1
   d9006:	4601      	mov	r1, r0
   d9008:	2002      	movs	r0, #2
   d900a:	f3af 8000 	nop.w
   d900e:	bd10      	pop	{r4, pc}
   d9010:	4620      	mov	r0, r4
   d9012:	bd10      	pop	{r4, pc}
   d9014:	00000000 	.word	0x00000000

000d9018 <localtime>:
   d9018:	b538      	push	{r3, r4, r5, lr}
   d901a:	4b07      	ldr	r3, [pc, #28]	; (d9038 <localtime+0x20>)
   d901c:	681c      	ldr	r4, [r3, #0]
   d901e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9020:	4605      	mov	r5, r0
   d9022:	b91b      	cbnz	r3, d902c <localtime+0x14>
   d9024:	2024      	movs	r0, #36	; 0x24
   d9026:	f7fc f9cb 	bl	d53c0 <malloc>
   d902a:	63e0      	str	r0, [r4, #60]	; 0x3c
   d902c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d902e:	4628      	mov	r0, r5
   d9030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9034:	f000 b802 	b.w	d903c <localtime_r>
   d9038:	2003d830 	.word	0x2003d830

000d903c <localtime_r>:
   d903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9040:	460c      	mov	r4, r1
   d9042:	4680      	mov	r8, r0
   d9044:	f000 fd5e 	bl	d9b04 <__gettzinfo>
   d9048:	4621      	mov	r1, r4
   d904a:	4607      	mov	r7, r0
   d904c:	4640      	mov	r0, r8
   d904e:	f000 fd5d 	bl	d9b0c <gmtime_r>
   d9052:	6946      	ldr	r6, [r0, #20]
   d9054:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9058:	07b3      	lsls	r3, r6, #30
   d905a:	4604      	mov	r4, r0
   d905c:	d105      	bne.n	d906a <localtime_r+0x2e>
   d905e:	2264      	movs	r2, #100	; 0x64
   d9060:	fb96 f3f2 	sdiv	r3, r6, r2
   d9064:	fb02 6313 	mls	r3, r2, r3, r6
   d9068:	b94b      	cbnz	r3, d907e <localtime_r+0x42>
   d906a:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d906e:	fb96 f3f5 	sdiv	r3, r6, r5
   d9072:	fb05 6513 	mls	r5, r5, r3, r6
   d9076:	fab5 f385 	clz	r3, r5
   d907a:	095b      	lsrs	r3, r3, #5
   d907c:	e000      	b.n	d9080 <localtime_r+0x44>
   d907e:	2301      	movs	r3, #1
   d9080:	4a5f      	ldr	r2, [pc, #380]	; (d9200 <localtime_r+0x1c4>)
   d9082:	2530      	movs	r5, #48	; 0x30
   d9084:	fb05 2503 	mla	r5, r5, r3, r2
   d9088:	f000 fb70 	bl	d976c <__tz_lock>
   d908c:	f000 fb70 	bl	d9770 <_tzset_unlocked>
   d9090:	4b5c      	ldr	r3, [pc, #368]	; (d9204 <localtime_r+0x1c8>)
   d9092:	681b      	ldr	r3, [r3, #0]
   d9094:	b1f3      	cbz	r3, d90d4 <localtime_r+0x98>
   d9096:	687b      	ldr	r3, [r7, #4]
   d9098:	429e      	cmp	r6, r3
   d909a:	d105      	bne.n	d90a8 <localtime_r+0x6c>
   d909c:	6839      	ldr	r1, [r7, #0]
   d909e:	f8d8 3000 	ldr.w	r3, [r8]
   d90a2:	69fa      	ldr	r2, [r7, #28]
   d90a4:	b941      	cbnz	r1, d90b8 <localtime_r+0x7c>
   d90a6:	e00a      	b.n	d90be <localtime_r+0x82>
   d90a8:	4630      	mov	r0, r6
   d90aa:	f000 fab7 	bl	d961c <__tzcalc_limits>
   d90ae:	2800      	cmp	r0, #0
   d90b0:	d1f4      	bne.n	d909c <localtime_r+0x60>
   d90b2:	f04f 33ff 	mov.w	r3, #4294967295
   d90b6:	e00d      	b.n	d90d4 <localtime_r+0x98>
   d90b8:	4293      	cmp	r3, r2
   d90ba:	db08      	blt.n	d90ce <localtime_r+0x92>
   d90bc:	e001      	b.n	d90c2 <localtime_r+0x86>
   d90be:	4293      	cmp	r3, r2
   d90c0:	da07      	bge.n	d90d2 <localtime_r+0x96>
   d90c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d90c4:	4293      	cmp	r3, r2
   d90c6:	bfac      	ite	ge
   d90c8:	2300      	movge	r3, #0
   d90ca:	2301      	movlt	r3, #1
   d90cc:	e002      	b.n	d90d4 <localtime_r+0x98>
   d90ce:	2300      	movs	r3, #0
   d90d0:	e000      	b.n	d90d4 <localtime_r+0x98>
   d90d2:	2301      	movs	r3, #1
   d90d4:	6223      	str	r3, [r4, #32]
   d90d6:	6a23      	ldr	r3, [r4, #32]
   d90d8:	2b01      	cmp	r3, #1
   d90da:	bf0c      	ite	eq
   d90dc:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d90de:	6a39      	ldrne	r1, [r7, #32]
   d90e0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d90e4:	203c      	movs	r0, #60	; 0x3c
   d90e6:	fb91 f6f3 	sdiv	r6, r1, r3
   d90ea:	fb03 1316 	mls	r3, r3, r6, r1
   d90ee:	6861      	ldr	r1, [r4, #4]
   d90f0:	fb93 f2f0 	sdiv	r2, r3, r0
   d90f4:	fb00 3012 	mls	r0, r0, r2, r3
   d90f8:	6823      	ldr	r3, [r4, #0]
   d90fa:	1a89      	subs	r1, r1, r2
   d90fc:	68a2      	ldr	r2, [r4, #8]
   d90fe:	6061      	str	r1, [r4, #4]
   d9100:	1a1b      	subs	r3, r3, r0
   d9102:	1b92      	subs	r2, r2, r6
   d9104:	2b3b      	cmp	r3, #59	; 0x3b
   d9106:	6023      	str	r3, [r4, #0]
   d9108:	60a2      	str	r2, [r4, #8]
   d910a:	dd03      	ble.n	d9114 <localtime_r+0xd8>
   d910c:	3101      	adds	r1, #1
   d910e:	6061      	str	r1, [r4, #4]
   d9110:	3b3c      	subs	r3, #60	; 0x3c
   d9112:	e004      	b.n	d911e <localtime_r+0xe2>
   d9114:	2b00      	cmp	r3, #0
   d9116:	da03      	bge.n	d9120 <localtime_r+0xe4>
   d9118:	3901      	subs	r1, #1
   d911a:	6061      	str	r1, [r4, #4]
   d911c:	333c      	adds	r3, #60	; 0x3c
   d911e:	6023      	str	r3, [r4, #0]
   d9120:	6863      	ldr	r3, [r4, #4]
   d9122:	2b3b      	cmp	r3, #59	; 0x3b
   d9124:	dd03      	ble.n	d912e <localtime_r+0xf2>
   d9126:	3201      	adds	r2, #1
   d9128:	60a2      	str	r2, [r4, #8]
   d912a:	3b3c      	subs	r3, #60	; 0x3c
   d912c:	e004      	b.n	d9138 <localtime_r+0xfc>
   d912e:	2b00      	cmp	r3, #0
   d9130:	da03      	bge.n	d913a <localtime_r+0xfe>
   d9132:	3a01      	subs	r2, #1
   d9134:	60a2      	str	r2, [r4, #8]
   d9136:	333c      	adds	r3, #60	; 0x3c
   d9138:	6063      	str	r3, [r4, #4]
   d913a:	68a3      	ldr	r3, [r4, #8]
   d913c:	2b17      	cmp	r3, #23
   d913e:	dd22      	ble.n	d9186 <localtime_r+0x14a>
   d9140:	69e2      	ldr	r2, [r4, #28]
   d9142:	3201      	adds	r2, #1
   d9144:	61e2      	str	r2, [r4, #28]
   d9146:	69a2      	ldr	r2, [r4, #24]
   d9148:	3201      	adds	r2, #1
   d914a:	2a06      	cmp	r2, #6
   d914c:	bfc8      	it	gt
   d914e:	2200      	movgt	r2, #0
   d9150:	61a2      	str	r2, [r4, #24]
   d9152:	68e2      	ldr	r2, [r4, #12]
   d9154:	3b18      	subs	r3, #24
   d9156:	3201      	adds	r2, #1
   d9158:	60a3      	str	r3, [r4, #8]
   d915a:	6923      	ldr	r3, [r4, #16]
   d915c:	60e2      	str	r2, [r4, #12]
   d915e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d9162:	428a      	cmp	r2, r1
   d9164:	dd46      	ble.n	d91f4 <localtime_r+0x1b8>
   d9166:	3301      	adds	r3, #1
   d9168:	2b0c      	cmp	r3, #12
   d916a:	bf0c      	ite	eq
   d916c:	6963      	ldreq	r3, [r4, #20]
   d916e:	6123      	strne	r3, [r4, #16]
   d9170:	eba2 0201 	sub.w	r2, r2, r1
   d9174:	60e2      	str	r2, [r4, #12]
   d9176:	bf01      	itttt	eq
   d9178:	3301      	addeq	r3, #1
   d917a:	2200      	moveq	r2, #0
   d917c:	6122      	streq	r2, [r4, #16]
   d917e:	6163      	streq	r3, [r4, #20]
   d9180:	bf08      	it	eq
   d9182:	61e2      	streq	r2, [r4, #28]
   d9184:	e036      	b.n	d91f4 <localtime_r+0x1b8>
   d9186:	2b00      	cmp	r3, #0
   d9188:	da34      	bge.n	d91f4 <localtime_r+0x1b8>
   d918a:	69e2      	ldr	r2, [r4, #28]
   d918c:	3a01      	subs	r2, #1
   d918e:	61e2      	str	r2, [r4, #28]
   d9190:	69a2      	ldr	r2, [r4, #24]
   d9192:	3a01      	subs	r2, #1
   d9194:	bf48      	it	mi
   d9196:	2206      	movmi	r2, #6
   d9198:	61a2      	str	r2, [r4, #24]
   d919a:	68e2      	ldr	r2, [r4, #12]
   d919c:	3318      	adds	r3, #24
   d919e:	3a01      	subs	r2, #1
   d91a0:	60e2      	str	r2, [r4, #12]
   d91a2:	60a3      	str	r3, [r4, #8]
   d91a4:	bb32      	cbnz	r2, d91f4 <localtime_r+0x1b8>
   d91a6:	6923      	ldr	r3, [r4, #16]
   d91a8:	3b01      	subs	r3, #1
   d91aa:	d401      	bmi.n	d91b0 <localtime_r+0x174>
   d91ac:	6123      	str	r3, [r4, #16]
   d91ae:	e01d      	b.n	d91ec <localtime_r+0x1b0>
   d91b0:	230b      	movs	r3, #11
   d91b2:	6123      	str	r3, [r4, #16]
   d91b4:	6963      	ldr	r3, [r4, #20]
   d91b6:	1e5a      	subs	r2, r3, #1
   d91b8:	f012 0f03 	tst.w	r2, #3
   d91bc:	6162      	str	r2, [r4, #20]
   d91be:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d91c2:	d105      	bne.n	d91d0 <localtime_r+0x194>
   d91c4:	2164      	movs	r1, #100	; 0x64
   d91c6:	fb93 f2f1 	sdiv	r2, r3, r1
   d91ca:	fb01 3212 	mls	r2, r1, r2, r3
   d91ce:	b94a      	cbnz	r2, d91e4 <localtime_r+0x1a8>
   d91d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d91d4:	fb93 f2f1 	sdiv	r2, r3, r1
   d91d8:	fb01 3312 	mls	r3, r1, r2, r3
   d91dc:	fab3 f383 	clz	r3, r3
   d91e0:	095b      	lsrs	r3, r3, #5
   d91e2:	e000      	b.n	d91e6 <localtime_r+0x1aa>
   d91e4:	2301      	movs	r3, #1
   d91e6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d91ea:	61e3      	str	r3, [r4, #28]
   d91ec:	6923      	ldr	r3, [r4, #16]
   d91ee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d91f2:	60e3      	str	r3, [r4, #12]
   d91f4:	f000 fabb 	bl	d976e <__tz_unlock>
   d91f8:	4620      	mov	r0, r4
   d91fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d91fe:	bf00      	nop
   d9200:	000da9fc 	.word	0x000da9fc
   d9204:	2003e7e4 	.word	0x2003e7e4

000d9208 <memcmp>:
   d9208:	b510      	push	{r4, lr}
   d920a:	3901      	subs	r1, #1
   d920c:	4402      	add	r2, r0
   d920e:	4290      	cmp	r0, r2
   d9210:	d007      	beq.n	d9222 <memcmp+0x1a>
   d9212:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9216:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d921a:	42a3      	cmp	r3, r4
   d921c:	d0f7      	beq.n	d920e <memcmp+0x6>
   d921e:	1b18      	subs	r0, r3, r4
   d9220:	bd10      	pop	{r4, pc}
   d9222:	2000      	movs	r0, #0
   d9224:	bd10      	pop	{r4, pc}

000d9226 <memcpy>:
   d9226:	b510      	push	{r4, lr}
   d9228:	1e43      	subs	r3, r0, #1
   d922a:	440a      	add	r2, r1
   d922c:	4291      	cmp	r1, r2
   d922e:	d004      	beq.n	d923a <memcpy+0x14>
   d9230:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9234:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9238:	e7f8      	b.n	d922c <memcpy+0x6>
   d923a:	bd10      	pop	{r4, pc}

000d923c <memmove>:
   d923c:	4288      	cmp	r0, r1
   d923e:	b510      	push	{r4, lr}
   d9240:	eb01 0302 	add.w	r3, r1, r2
   d9244:	d801      	bhi.n	d924a <memmove+0xe>
   d9246:	1e42      	subs	r2, r0, #1
   d9248:	e00b      	b.n	d9262 <memmove+0x26>
   d924a:	4298      	cmp	r0, r3
   d924c:	d2fb      	bcs.n	d9246 <memmove+0xa>
   d924e:	1881      	adds	r1, r0, r2
   d9250:	1ad2      	subs	r2, r2, r3
   d9252:	42d3      	cmn	r3, r2
   d9254:	d004      	beq.n	d9260 <memmove+0x24>
   d9256:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d925a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d925e:	e7f8      	b.n	d9252 <memmove+0x16>
   d9260:	bd10      	pop	{r4, pc}
   d9262:	4299      	cmp	r1, r3
   d9264:	d004      	beq.n	d9270 <memmove+0x34>
   d9266:	f811 4b01 	ldrb.w	r4, [r1], #1
   d926a:	f802 4f01 	strb.w	r4, [r2, #1]!
   d926e:	e7f8      	b.n	d9262 <memmove+0x26>
   d9270:	bd10      	pop	{r4, pc}

000d9272 <memset>:
   d9272:	4402      	add	r2, r0
   d9274:	4603      	mov	r3, r0
   d9276:	4293      	cmp	r3, r2
   d9278:	d002      	beq.n	d9280 <memset+0xe>
   d927a:	f803 1b01 	strb.w	r1, [r3], #1
   d927e:	e7fa      	b.n	d9276 <memset+0x4>
   d9280:	4770      	bx	lr
	...

000d9284 <srand>:
   d9284:	b538      	push	{r3, r4, r5, lr}
   d9286:	4b12      	ldr	r3, [pc, #72]	; (d92d0 <srand+0x4c>)
   d9288:	681c      	ldr	r4, [r3, #0]
   d928a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d928c:	4605      	mov	r5, r0
   d928e:	b9d3      	cbnz	r3, d92c6 <srand+0x42>
   d9290:	2018      	movs	r0, #24
   d9292:	f7fc f895 	bl	d53c0 <malloc>
   d9296:	f243 330e 	movw	r3, #13070	; 0x330e
   d929a:	63a0      	str	r0, [r4, #56]	; 0x38
   d929c:	8003      	strh	r3, [r0, #0]
   d929e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d92a2:	8043      	strh	r3, [r0, #2]
   d92a4:	f241 2334 	movw	r3, #4660	; 0x1234
   d92a8:	8083      	strh	r3, [r0, #4]
   d92aa:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d92ae:	80c3      	strh	r3, [r0, #6]
   d92b0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d92b4:	8103      	strh	r3, [r0, #8]
   d92b6:	2305      	movs	r3, #5
   d92b8:	8143      	strh	r3, [r0, #10]
   d92ba:	230b      	movs	r3, #11
   d92bc:	8183      	strh	r3, [r0, #12]
   d92be:	2201      	movs	r2, #1
   d92c0:	2300      	movs	r3, #0
   d92c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d92c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d92c8:	2200      	movs	r2, #0
   d92ca:	611d      	str	r5, [r3, #16]
   d92cc:	615a      	str	r2, [r3, #20]
   d92ce:	bd38      	pop	{r3, r4, r5, pc}
   d92d0:	2003d830 	.word	0x2003d830

000d92d4 <strchr>:
   d92d4:	b2c9      	uxtb	r1, r1
   d92d6:	4603      	mov	r3, r0
   d92d8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d92dc:	b11a      	cbz	r2, d92e6 <strchr+0x12>
   d92de:	4291      	cmp	r1, r2
   d92e0:	d1f9      	bne.n	d92d6 <strchr+0x2>
   d92e2:	4618      	mov	r0, r3
   d92e4:	4770      	bx	lr
   d92e6:	2900      	cmp	r1, #0
   d92e8:	bf0c      	ite	eq
   d92ea:	4618      	moveq	r0, r3
   d92ec:	2000      	movne	r0, #0
   d92ee:	4770      	bx	lr

000d92f0 <strchrnul>:
   d92f0:	b510      	push	{r4, lr}
   d92f2:	4604      	mov	r4, r0
   d92f4:	f7ff ffee 	bl	d92d4 <strchr>
   d92f8:	b918      	cbnz	r0, d9302 <strchrnul+0x12>
   d92fa:	4620      	mov	r0, r4
   d92fc:	f000 f814 	bl	d9328 <strlen>
   d9300:	4420      	add	r0, r4
   d9302:	bd10      	pop	{r4, pc}

000d9304 <strcmp>:
   d9304:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9308:	f811 3b01 	ldrb.w	r3, [r1], #1
   d930c:	2a01      	cmp	r2, #1
   d930e:	bf28      	it	cs
   d9310:	429a      	cmpcs	r2, r3
   d9312:	d0f7      	beq.n	d9304 <strcmp>
   d9314:	1ad0      	subs	r0, r2, r3
   d9316:	4770      	bx	lr

000d9318 <strcpy>:
   d9318:	4603      	mov	r3, r0
   d931a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d931e:	f803 2b01 	strb.w	r2, [r3], #1
   d9322:	2a00      	cmp	r2, #0
   d9324:	d1f9      	bne.n	d931a <strcpy+0x2>
   d9326:	4770      	bx	lr

000d9328 <strlen>:
   d9328:	4603      	mov	r3, r0
   d932a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d932e:	2a00      	cmp	r2, #0
   d9330:	d1fb      	bne.n	d932a <strlen+0x2>
   d9332:	1a18      	subs	r0, r3, r0
   d9334:	3801      	subs	r0, #1
   d9336:	4770      	bx	lr

000d9338 <strncmp>:
   d9338:	b530      	push	{r4, r5, lr}
   d933a:	b182      	cbz	r2, d935e <strncmp+0x26>
   d933c:	1e45      	subs	r5, r0, #1
   d933e:	3901      	subs	r1, #1
   d9340:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9344:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9348:	42a3      	cmp	r3, r4
   d934a:	d106      	bne.n	d935a <strncmp+0x22>
   d934c:	43ec      	mvns	r4, r5
   d934e:	4414      	add	r4, r2
   d9350:	42e0      	cmn	r0, r4
   d9352:	d001      	beq.n	d9358 <strncmp+0x20>
   d9354:	2b00      	cmp	r3, #0
   d9356:	d1f3      	bne.n	d9340 <strncmp+0x8>
   d9358:	461c      	mov	r4, r3
   d935a:	1b18      	subs	r0, r3, r4
   d935c:	bd30      	pop	{r4, r5, pc}
   d935e:	4610      	mov	r0, r2
   d9360:	bd30      	pop	{r4, r5, pc}

000d9362 <strnlen>:
   d9362:	b510      	push	{r4, lr}
   d9364:	4603      	mov	r3, r0
   d9366:	4401      	add	r1, r0
   d9368:	428b      	cmp	r3, r1
   d936a:	d004      	beq.n	d9376 <strnlen+0x14>
   d936c:	781a      	ldrb	r2, [r3, #0]
   d936e:	1c5c      	adds	r4, r3, #1
   d9370:	b10a      	cbz	r2, d9376 <strnlen+0x14>
   d9372:	4623      	mov	r3, r4
   d9374:	e7f8      	b.n	d9368 <strnlen+0x6>
   d9376:	1a18      	subs	r0, r3, r0
   d9378:	bd10      	pop	{r4, pc}

000d937a <strrchr>:
   d937a:	b538      	push	{r3, r4, r5, lr}
   d937c:	4603      	mov	r3, r0
   d937e:	460d      	mov	r5, r1
   d9380:	b141      	cbz	r1, d9394 <strrchr+0x1a>
   d9382:	2400      	movs	r4, #0
   d9384:	4629      	mov	r1, r5
   d9386:	4618      	mov	r0, r3
   d9388:	f7ff ffa4 	bl	d92d4 <strchr>
   d938c:	b130      	cbz	r0, d939c <strrchr+0x22>
   d938e:	1c43      	adds	r3, r0, #1
   d9390:	4604      	mov	r4, r0
   d9392:	e7f7      	b.n	d9384 <strrchr+0xa>
   d9394:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9398:	f7ff bf9c 	b.w	d92d4 <strchr>
   d939c:	4620      	mov	r0, r4
   d939e:	bd38      	pop	{r3, r4, r5, pc}

000d93a0 <strstr>:
   d93a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d93a2:	7803      	ldrb	r3, [r0, #0]
   d93a4:	b963      	cbnz	r3, d93c0 <strstr+0x20>
   d93a6:	780b      	ldrb	r3, [r1, #0]
   d93a8:	2b00      	cmp	r3, #0
   d93aa:	bf18      	it	ne
   d93ac:	2000      	movne	r0, #0
   d93ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d93b0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d93b4:	b162      	cbz	r2, d93d0 <strstr+0x30>
   d93b6:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d93ba:	4297      	cmp	r7, r2
   d93bc:	4630      	mov	r0, r6
   d93be:	d0f7      	beq.n	d93b0 <strstr+0x10>
   d93c0:	4603      	mov	r3, r0
   d93c2:	1c46      	adds	r6, r0, #1
   d93c4:	7800      	ldrb	r0, [r0, #0]
   d93c6:	b110      	cbz	r0, d93ce <strstr+0x2e>
   d93c8:	1e4d      	subs	r5, r1, #1
   d93ca:	1e5c      	subs	r4, r3, #1
   d93cc:	e7f0      	b.n	d93b0 <strstr+0x10>
   d93ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d93d0:	4618      	mov	r0, r3
   d93d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d93d4 <_strtol_r>:
   d93d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93d8:	4680      	mov	r8, r0
   d93da:	4840      	ldr	r0, [pc, #256]	; (d94dc <_strtol_r+0x108>)
   d93dc:	f8d0 9000 	ldr.w	r9, [r0]
   d93e0:	460f      	mov	r7, r1
   d93e2:	463d      	mov	r5, r7
   d93e4:	f815 4b01 	ldrb.w	r4, [r5], #1
   d93e8:	eb09 0004 	add.w	r0, r9, r4
   d93ec:	7840      	ldrb	r0, [r0, #1]
   d93ee:	f000 0008 	and.w	r0, r0, #8
   d93f2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d93f6:	b108      	cbz	r0, d93fc <_strtol_r+0x28>
   d93f8:	462f      	mov	r7, r5
   d93fa:	e7f2      	b.n	d93e2 <_strtol_r+0xe>
   d93fc:	2c2d      	cmp	r4, #45	; 0x2d
   d93fe:	d103      	bne.n	d9408 <_strtol_r+0x34>
   d9400:	1cbd      	adds	r5, r7, #2
   d9402:	787c      	ldrb	r4, [r7, #1]
   d9404:	2601      	movs	r6, #1
   d9406:	e003      	b.n	d9410 <_strtol_r+0x3c>
   d9408:	2c2b      	cmp	r4, #43	; 0x2b
   d940a:	bf04      	itt	eq
   d940c:	787c      	ldrbeq	r4, [r7, #1]
   d940e:	1cbd      	addeq	r5, r7, #2
   d9410:	b113      	cbz	r3, d9418 <_strtol_r+0x44>
   d9412:	2b10      	cmp	r3, #16
   d9414:	d10a      	bne.n	d942c <_strtol_r+0x58>
   d9416:	e05b      	b.n	d94d0 <_strtol_r+0xfc>
   d9418:	2c30      	cmp	r4, #48	; 0x30
   d941a:	d157      	bne.n	d94cc <_strtol_r+0xf8>
   d941c:	7828      	ldrb	r0, [r5, #0]
   d941e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9422:	2858      	cmp	r0, #88	; 0x58
   d9424:	d14d      	bne.n	d94c2 <_strtol_r+0xee>
   d9426:	786c      	ldrb	r4, [r5, #1]
   d9428:	2310      	movs	r3, #16
   d942a:	3502      	adds	r5, #2
   d942c:	2e00      	cmp	r6, #0
   d942e:	bf14      	ite	ne
   d9430:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9434:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9438:	2700      	movs	r7, #0
   d943a:	fbbc faf3 	udiv	sl, ip, r3
   d943e:	4638      	mov	r0, r7
   d9440:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9444:	eb09 0e04 	add.w	lr, r9, r4
   d9448:	f89e e001 	ldrb.w	lr, [lr, #1]
   d944c:	f01e 0f04 	tst.w	lr, #4
   d9450:	d001      	beq.n	d9456 <_strtol_r+0x82>
   d9452:	3c30      	subs	r4, #48	; 0x30
   d9454:	e00b      	b.n	d946e <_strtol_r+0x9a>
   d9456:	f01e 0e03 	ands.w	lr, lr, #3
   d945a:	d01b      	beq.n	d9494 <_strtol_r+0xc0>
   d945c:	f1be 0f01 	cmp.w	lr, #1
   d9460:	bf0c      	ite	eq
   d9462:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9466:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d946a:	ebce 0404 	rsb	r4, lr, r4
   d946e:	42a3      	cmp	r3, r4
   d9470:	dd10      	ble.n	d9494 <_strtol_r+0xc0>
   d9472:	f1b7 3fff 	cmp.w	r7, #4294967295
   d9476:	d00a      	beq.n	d948e <_strtol_r+0xba>
   d9478:	4550      	cmp	r0, sl
   d947a:	d806      	bhi.n	d948a <_strtol_r+0xb6>
   d947c:	d101      	bne.n	d9482 <_strtol_r+0xae>
   d947e:	4564      	cmp	r4, ip
   d9480:	dc03      	bgt.n	d948a <_strtol_r+0xb6>
   d9482:	fb03 4000 	mla	r0, r3, r0, r4
   d9486:	2701      	movs	r7, #1
   d9488:	e001      	b.n	d948e <_strtol_r+0xba>
   d948a:	f04f 37ff 	mov.w	r7, #4294967295
   d948e:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9492:	e7d7      	b.n	d9444 <_strtol_r+0x70>
   d9494:	1c7b      	adds	r3, r7, #1
   d9496:	d10c      	bne.n	d94b2 <_strtol_r+0xde>
   d9498:	2e00      	cmp	r6, #0
   d949a:	f04f 0322 	mov.w	r3, #34	; 0x22
   d949e:	bf14      	ite	ne
   d94a0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d94a4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d94a8:	f8c8 3000 	str.w	r3, [r8]
   d94ac:	b92a      	cbnz	r2, d94ba <_strtol_r+0xe6>
   d94ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94b2:	b106      	cbz	r6, d94b6 <_strtol_r+0xe2>
   d94b4:	4240      	negs	r0, r0
   d94b6:	b172      	cbz	r2, d94d6 <_strtol_r+0x102>
   d94b8:	b107      	cbz	r7, d94bc <_strtol_r+0xe8>
   d94ba:	1e69      	subs	r1, r5, #1
   d94bc:	6011      	str	r1, [r2, #0]
   d94be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94c2:	2430      	movs	r4, #48	; 0x30
   d94c4:	2b00      	cmp	r3, #0
   d94c6:	d1b1      	bne.n	d942c <_strtol_r+0x58>
   d94c8:	2308      	movs	r3, #8
   d94ca:	e7af      	b.n	d942c <_strtol_r+0x58>
   d94cc:	230a      	movs	r3, #10
   d94ce:	e7ad      	b.n	d942c <_strtol_r+0x58>
   d94d0:	2c30      	cmp	r4, #48	; 0x30
   d94d2:	d0a3      	beq.n	d941c <_strtol_r+0x48>
   d94d4:	e7aa      	b.n	d942c <_strtol_r+0x58>
   d94d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94da:	bf00      	nop
   d94dc:	2003d7cc 	.word	0x2003d7cc

000d94e0 <strtol>:
   d94e0:	4613      	mov	r3, r2
   d94e2:	460a      	mov	r2, r1
   d94e4:	4601      	mov	r1, r0
   d94e6:	4802      	ldr	r0, [pc, #8]	; (d94f0 <strtol+0x10>)
   d94e8:	6800      	ldr	r0, [r0, #0]
   d94ea:	f7ff bf73 	b.w	d93d4 <_strtol_r>
   d94ee:	bf00      	nop
   d94f0:	2003d830 	.word	0x2003d830

000d94f4 <_strtoul_r>:
   d94f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d94f8:	4680      	mov	r8, r0
   d94fa:	483c      	ldr	r0, [pc, #240]	; (d95ec <_strtoul_r+0xf8>)
   d94fc:	f8d0 9000 	ldr.w	r9, [r0]
   d9500:	460e      	mov	r6, r1
   d9502:	4635      	mov	r5, r6
   d9504:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9508:	eb09 0004 	add.w	r0, r9, r4
   d950c:	7840      	ldrb	r0, [r0, #1]
   d950e:	f000 0008 	and.w	r0, r0, #8
   d9512:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d9516:	b108      	cbz	r0, d951c <_strtoul_r+0x28>
   d9518:	462e      	mov	r6, r5
   d951a:	e7f2      	b.n	d9502 <_strtoul_r+0xe>
   d951c:	2c2d      	cmp	r4, #45	; 0x2d
   d951e:	d103      	bne.n	d9528 <_strtoul_r+0x34>
   d9520:	1cb5      	adds	r5, r6, #2
   d9522:	7874      	ldrb	r4, [r6, #1]
   d9524:	2701      	movs	r7, #1
   d9526:	e003      	b.n	d9530 <_strtoul_r+0x3c>
   d9528:	2c2b      	cmp	r4, #43	; 0x2b
   d952a:	bf04      	itt	eq
   d952c:	7874      	ldrbeq	r4, [r6, #1]
   d952e:	1cb5      	addeq	r5, r6, #2
   d9530:	b113      	cbz	r3, d9538 <_strtoul_r+0x44>
   d9532:	2b10      	cmp	r3, #16
   d9534:	d10a      	bne.n	d954c <_strtoul_r+0x58>
   d9536:	e053      	b.n	d95e0 <_strtoul_r+0xec>
   d9538:	2c30      	cmp	r4, #48	; 0x30
   d953a:	d14f      	bne.n	d95dc <_strtoul_r+0xe8>
   d953c:	7828      	ldrb	r0, [r5, #0]
   d953e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9542:	2858      	cmp	r0, #88	; 0x58
   d9544:	d145      	bne.n	d95d2 <_strtoul_r+0xde>
   d9546:	786c      	ldrb	r4, [r5, #1]
   d9548:	2310      	movs	r3, #16
   d954a:	3502      	adds	r5, #2
   d954c:	f04f 3cff 	mov.w	ip, #4294967295
   d9550:	2600      	movs	r6, #0
   d9552:	fbbc fcf3 	udiv	ip, ip, r3
   d9556:	fb03 fa0c 	mul.w	sl, r3, ip
   d955a:	ea6f 0a0a 	mvn.w	sl, sl
   d955e:	4630      	mov	r0, r6
   d9560:	eb09 0e04 	add.w	lr, r9, r4
   d9564:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9568:	f01e 0f04 	tst.w	lr, #4
   d956c:	d001      	beq.n	d9572 <_strtoul_r+0x7e>
   d956e:	3c30      	subs	r4, #48	; 0x30
   d9570:	e00b      	b.n	d958a <_strtoul_r+0x96>
   d9572:	f01e 0e03 	ands.w	lr, lr, #3
   d9576:	d01a      	beq.n	d95ae <_strtoul_r+0xba>
   d9578:	f1be 0f01 	cmp.w	lr, #1
   d957c:	bf0c      	ite	eq
   d957e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9582:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9586:	ebce 0404 	rsb	r4, lr, r4
   d958a:	42a3      	cmp	r3, r4
   d958c:	dd0f      	ble.n	d95ae <_strtoul_r+0xba>
   d958e:	2e00      	cmp	r6, #0
   d9590:	db08      	blt.n	d95a4 <_strtoul_r+0xb0>
   d9592:	4560      	cmp	r0, ip
   d9594:	d806      	bhi.n	d95a4 <_strtoul_r+0xb0>
   d9596:	d101      	bne.n	d959c <_strtoul_r+0xa8>
   d9598:	4554      	cmp	r4, sl
   d959a:	dc03      	bgt.n	d95a4 <_strtoul_r+0xb0>
   d959c:	fb03 4000 	mla	r0, r3, r0, r4
   d95a0:	2601      	movs	r6, #1
   d95a2:	e001      	b.n	d95a8 <_strtoul_r+0xb4>
   d95a4:	f04f 36ff 	mov.w	r6, #4294967295
   d95a8:	f815 4b01 	ldrb.w	r4, [r5], #1
   d95ac:	e7d8      	b.n	d9560 <_strtoul_r+0x6c>
   d95ae:	2e00      	cmp	r6, #0
   d95b0:	da07      	bge.n	d95c2 <_strtoul_r+0xce>
   d95b2:	2322      	movs	r3, #34	; 0x22
   d95b4:	f8c8 3000 	str.w	r3, [r8]
   d95b8:	f04f 30ff 	mov.w	r0, #4294967295
   d95bc:	b92a      	cbnz	r2, d95ca <_strtoul_r+0xd6>
   d95be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95c2:	b107      	cbz	r7, d95c6 <_strtoul_r+0xd2>
   d95c4:	4240      	negs	r0, r0
   d95c6:	b172      	cbz	r2, d95e6 <_strtoul_r+0xf2>
   d95c8:	b106      	cbz	r6, d95cc <_strtoul_r+0xd8>
   d95ca:	1e69      	subs	r1, r5, #1
   d95cc:	6011      	str	r1, [r2, #0]
   d95ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95d2:	2430      	movs	r4, #48	; 0x30
   d95d4:	2b00      	cmp	r3, #0
   d95d6:	d1b9      	bne.n	d954c <_strtoul_r+0x58>
   d95d8:	2308      	movs	r3, #8
   d95da:	e7b7      	b.n	d954c <_strtoul_r+0x58>
   d95dc:	230a      	movs	r3, #10
   d95de:	e7b5      	b.n	d954c <_strtoul_r+0x58>
   d95e0:	2c30      	cmp	r4, #48	; 0x30
   d95e2:	d0ab      	beq.n	d953c <_strtoul_r+0x48>
   d95e4:	e7b2      	b.n	d954c <_strtoul_r+0x58>
   d95e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95ea:	bf00      	nop
   d95ec:	2003d7cc 	.word	0x2003d7cc

000d95f0 <strtoul>:
   d95f0:	4613      	mov	r3, r2
   d95f2:	460a      	mov	r2, r1
   d95f4:	4601      	mov	r1, r0
   d95f6:	4802      	ldr	r0, [pc, #8]	; (d9600 <strtoul+0x10>)
   d95f8:	6800      	ldr	r0, [r0, #0]
   d95fa:	f7ff bf7b 	b.w	d94f4 <_strtoul_r>
   d95fe:	bf00      	nop
   d9600:	2003d830 	.word	0x2003d830

000d9604 <tolower>:
   d9604:	4b04      	ldr	r3, [pc, #16]	; (d9618 <tolower+0x14>)
   d9606:	681b      	ldr	r3, [r3, #0]
   d9608:	4403      	add	r3, r0
   d960a:	785b      	ldrb	r3, [r3, #1]
   d960c:	f003 0303 	and.w	r3, r3, #3
   d9610:	2b01      	cmp	r3, #1
   d9612:	bf08      	it	eq
   d9614:	3020      	addeq	r0, #32
   d9616:	4770      	bx	lr
   d9618:	2003d7cc 	.word	0x2003d7cc

000d961c <__tzcalc_limits>:
   d961c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9620:	4604      	mov	r4, r0
   d9622:	f000 fa6f 	bl	d9b04 <__gettzinfo>
   d9626:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d962a:	429c      	cmp	r4, r3
   d962c:	f340 8096 	ble.w	d975c <__tzcalc_limits+0x140>
   d9630:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d9634:	18e3      	adds	r3, r4, r3
   d9636:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d963a:	109b      	asrs	r3, r3, #2
   d963c:	f240 156d 	movw	r5, #365	; 0x16d
   d9640:	fb05 3502 	mla	r5, r5, r2, r3
   d9644:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d9648:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d964c:	fb92 f3f3 	sdiv	r3, r2, r3
   d9650:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9654:	442b      	add	r3, r5
   d9656:	18a5      	adds	r5, r4, r2
   d9658:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d965c:	fb95 f5f2 	sdiv	r5, r5, r2
   d9660:	441d      	add	r5, r3
   d9662:	2364      	movs	r3, #100	; 0x64
   d9664:	fb94 f7f2 	sdiv	r7, r4, r2
   d9668:	fb94 f6f3 	sdiv	r6, r4, r3
   d966c:	fb02 4717 	mls	r7, r2, r7, r4
   d9670:	fb03 4616 	mls	r6, r3, r6, r4
   d9674:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d9678:	fab7 fe87 	clz	lr, r7
   d967c:	9301      	str	r3, [sp, #4]
   d967e:	f004 0303 	and.w	r3, r4, #3
   d9682:	6044      	str	r4, [r0, #4]
   d9684:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9688:	4601      	mov	r1, r0
   d968a:	9300      	str	r3, [sp, #0]
   d968c:	f04f 0c07 	mov.w	ip, #7
   d9690:	7a0b      	ldrb	r3, [r1, #8]
   d9692:	2b4a      	cmp	r3, #74	; 0x4a
   d9694:	d10e      	bne.n	d96b4 <__tzcalc_limits+0x98>
   d9696:	694b      	ldr	r3, [r1, #20]
   d9698:	9a00      	ldr	r2, [sp, #0]
   d969a:	18ec      	adds	r4, r5, r3
   d969c:	b902      	cbnz	r2, d96a0 <__tzcalc_limits+0x84>
   d969e:	b906      	cbnz	r6, d96a2 <__tzcalc_limits+0x86>
   d96a0:	b927      	cbnz	r7, d96ac <__tzcalc_limits+0x90>
   d96a2:	2b3b      	cmp	r3, #59	; 0x3b
   d96a4:	bfd4      	ite	le
   d96a6:	2300      	movle	r3, #0
   d96a8:	2301      	movgt	r3, #1
   d96aa:	e000      	b.n	d96ae <__tzcalc_limits+0x92>
   d96ac:	2300      	movs	r3, #0
   d96ae:	4423      	add	r3, r4
   d96b0:	3b01      	subs	r3, #1
   d96b2:	e03f      	b.n	d9734 <__tzcalc_limits+0x118>
   d96b4:	2b44      	cmp	r3, #68	; 0x44
   d96b6:	d102      	bne.n	d96be <__tzcalc_limits+0xa2>
   d96b8:	694b      	ldr	r3, [r1, #20]
   d96ba:	442b      	add	r3, r5
   d96bc:	e03a      	b.n	d9734 <__tzcalc_limits+0x118>
   d96be:	9b00      	ldr	r3, [sp, #0]
   d96c0:	b92b      	cbnz	r3, d96ce <__tzcalc_limits+0xb2>
   d96c2:	2e00      	cmp	r6, #0
   d96c4:	bf0c      	ite	eq
   d96c6:	46f0      	moveq	r8, lr
   d96c8:	f04f 0801 	movne.w	r8, #1
   d96cc:	e000      	b.n	d96d0 <__tzcalc_limits+0xb4>
   d96ce:	46f0      	mov	r8, lr
   d96d0:	4b24      	ldr	r3, [pc, #144]	; (d9764 <__tzcalc_limits+0x148>)
   d96d2:	68cc      	ldr	r4, [r1, #12]
   d96d4:	2230      	movs	r2, #48	; 0x30
   d96d6:	fb02 3808 	mla	r8, r2, r8, r3
   d96da:	f1a8 0a04 	sub.w	sl, r8, #4
   d96de:	46a9      	mov	r9, r5
   d96e0:	2301      	movs	r3, #1
   d96e2:	42a3      	cmp	r3, r4
   d96e4:	da04      	bge.n	d96f0 <__tzcalc_limits+0xd4>
   d96e6:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d96ea:	3301      	adds	r3, #1
   d96ec:	44d9      	add	r9, fp
   d96ee:	e7f8      	b.n	d96e2 <__tzcalc_limits+0xc6>
   d96f0:	f109 0304 	add.w	r3, r9, #4
   d96f4:	fb93 fbfc 	sdiv	fp, r3, ip
   d96f8:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d96fc:	2c01      	cmp	r4, #1
   d96fe:	ebca 0a03 	rsb	sl, sl, r3
   d9702:	694b      	ldr	r3, [r1, #20]
   d9704:	bfb8      	it	lt
   d9706:	2401      	movlt	r4, #1
   d9708:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d970c:	ebb3 0a0a 	subs.w	sl, r3, sl
   d9710:	690b      	ldr	r3, [r1, #16]
   d9712:	f104 34ff 	add.w	r4, r4, #4294967295
   d9716:	f103 33ff 	add.w	r3, r3, #4294967295
   d971a:	bf48      	it	mi
   d971c:	f10a 0a07 	addmi.w	sl, sl, #7
   d9720:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9724:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d9728:	4453      	add	r3, sl
   d972a:	42a3      	cmp	r3, r4
   d972c:	db01      	blt.n	d9732 <__tzcalc_limits+0x116>
   d972e:	3b07      	subs	r3, #7
   d9730:	e7fb      	b.n	d972a <__tzcalc_limits+0x10e>
   d9732:	444b      	add	r3, r9
   d9734:	698c      	ldr	r4, [r1, #24]
   d9736:	4a0c      	ldr	r2, [pc, #48]	; (d9768 <__tzcalc_limits+0x14c>)
   d9738:	fb02 4303 	mla	r3, r2, r3, r4
   d973c:	6a0c      	ldr	r4, [r1, #32]
   d973e:	4423      	add	r3, r4
   d9740:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9744:	9b01      	ldr	r3, [sp, #4]
   d9746:	4299      	cmp	r1, r3
   d9748:	d1a2      	bne.n	d9690 <__tzcalc_limits+0x74>
   d974a:	69c3      	ldr	r3, [r0, #28]
   d974c:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d974e:	4293      	cmp	r3, r2
   d9750:	bfac      	ite	ge
   d9752:	2300      	movge	r3, #0
   d9754:	2301      	movlt	r3, #1
   d9756:	6003      	str	r3, [r0, #0]
   d9758:	2001      	movs	r0, #1
   d975a:	e000      	b.n	d975e <__tzcalc_limits+0x142>
   d975c:	2000      	movs	r0, #0
   d975e:	b003      	add	sp, #12
   d9760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9764:	000da9fc 	.word	0x000da9fc
   d9768:	00015180 	.word	0x00015180

000d976c <__tz_lock>:
   d976c:	4770      	bx	lr

000d976e <__tz_unlock>:
   d976e:	4770      	bx	lr

000d9770 <_tzset_unlocked>:
   d9770:	4b01      	ldr	r3, [pc, #4]	; (d9778 <_tzset_unlocked+0x8>)
   d9772:	6818      	ldr	r0, [r3, #0]
   d9774:	f000 b802 	b.w	d977c <_tzset_unlocked_r>
   d9778:	2003d830 	.word	0x2003d830

000d977c <_tzset_unlocked_r>:
   d977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9780:	b08d      	sub	sp, #52	; 0x34
   d9782:	4607      	mov	r7, r0
   d9784:	f000 f9be 	bl	d9b04 <__gettzinfo>
   d9788:	49b0      	ldr	r1, [pc, #704]	; (d9a4c <_tzset_unlocked_r+0x2d0>)
   d978a:	4eb1      	ldr	r6, [pc, #708]	; (d9a50 <_tzset_unlocked_r+0x2d4>)
   d978c:	4604      	mov	r4, r0
   d978e:	4638      	mov	r0, r7
   d9790:	f000 f9b0 	bl	d9af4 <_getenv_r>
   d9794:	4605      	mov	r5, r0
   d9796:	b960      	cbnz	r0, d97b2 <_tzset_unlocked_r+0x36>
   d9798:	4bae      	ldr	r3, [pc, #696]	; (d9a54 <_tzset_unlocked_r+0x2d8>)
   d979a:	4aaf      	ldr	r2, [pc, #700]	; (d9a58 <_tzset_unlocked_r+0x2dc>)
   d979c:	6018      	str	r0, [r3, #0]
   d979e:	4baf      	ldr	r3, [pc, #700]	; (d9a5c <_tzset_unlocked_r+0x2e0>)
   d97a0:	6018      	str	r0, [r3, #0]
   d97a2:	4baf      	ldr	r3, [pc, #700]	; (d9a60 <_tzset_unlocked_r+0x2e4>)
   d97a4:	6830      	ldr	r0, [r6, #0]
   d97a6:	601a      	str	r2, [r3, #0]
   d97a8:	605a      	str	r2, [r3, #4]
   d97aa:	f7fb fe11 	bl	d53d0 <free>
   d97ae:	6035      	str	r5, [r6, #0]
   d97b0:	e148      	b.n	d9a44 <_tzset_unlocked_r+0x2c8>
   d97b2:	6831      	ldr	r1, [r6, #0]
   d97b4:	b979      	cbnz	r1, d97d6 <_tzset_unlocked_r+0x5a>
   d97b6:	6830      	ldr	r0, [r6, #0]
   d97b8:	f7fb fe0a 	bl	d53d0 <free>
   d97bc:	4628      	mov	r0, r5
   d97be:	f7ff fdb3 	bl	d9328 <strlen>
   d97c2:	1c41      	adds	r1, r0, #1
   d97c4:	4638      	mov	r0, r7
   d97c6:	f7fb fe2b 	bl	d5420 <_malloc_r>
   d97ca:	6030      	str	r0, [r6, #0]
   d97cc:	b148      	cbz	r0, d97e2 <_tzset_unlocked_r+0x66>
   d97ce:	4629      	mov	r1, r5
   d97d0:	f7ff fda2 	bl	d9318 <strcpy>
   d97d4:	e005      	b.n	d97e2 <_tzset_unlocked_r+0x66>
   d97d6:	f7ff fd95 	bl	d9304 <strcmp>
   d97da:	2800      	cmp	r0, #0
   d97dc:	f000 8132 	beq.w	d9a44 <_tzset_unlocked_r+0x2c8>
   d97e0:	e7e9      	b.n	d97b6 <_tzset_unlocked_r+0x3a>
   d97e2:	782b      	ldrb	r3, [r5, #0]
   d97e4:	4a9f      	ldr	r2, [pc, #636]	; (d9a64 <_tzset_unlocked_r+0x2e8>)
   d97e6:	49a0      	ldr	r1, [pc, #640]	; (d9a68 <_tzset_unlocked_r+0x2ec>)
   d97e8:	2b3a      	cmp	r3, #58	; 0x3a
   d97ea:	bf08      	it	eq
   d97ec:	3501      	addeq	r5, #1
   d97ee:	ae0a      	add	r6, sp, #40	; 0x28
   d97f0:	4633      	mov	r3, r6
   d97f2:	4628      	mov	r0, r5
   d97f4:	f7fb fe04 	bl	d5400 <siscanf>
   d97f8:	2800      	cmp	r0, #0
   d97fa:	f340 8123 	ble.w	d9a44 <_tzset_unlocked_r+0x2c8>
   d97fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9800:	18ef      	adds	r7, r5, r3
   d9802:	5ceb      	ldrb	r3, [r5, r3]
   d9804:	2b2d      	cmp	r3, #45	; 0x2d
   d9806:	d103      	bne.n	d9810 <_tzset_unlocked_r+0x94>
   d9808:	3701      	adds	r7, #1
   d980a:	f04f 35ff 	mov.w	r5, #4294967295
   d980e:	e003      	b.n	d9818 <_tzset_unlocked_r+0x9c>
   d9810:	2b2b      	cmp	r3, #43	; 0x2b
   d9812:	bf08      	it	eq
   d9814:	3701      	addeq	r7, #1
   d9816:	2501      	movs	r5, #1
   d9818:	f10d 0a20 	add.w	sl, sp, #32
   d981c:	f10d 0b1e 	add.w	fp, sp, #30
   d9820:	f04f 0800 	mov.w	r8, #0
   d9824:	9603      	str	r6, [sp, #12]
   d9826:	f8cd a008 	str.w	sl, [sp, #8]
   d982a:	9601      	str	r6, [sp, #4]
   d982c:	f8cd b000 	str.w	fp, [sp]
   d9830:	4633      	mov	r3, r6
   d9832:	aa07      	add	r2, sp, #28
   d9834:	498d      	ldr	r1, [pc, #564]	; (d9a6c <_tzset_unlocked_r+0x2f0>)
   d9836:	f8ad 801e 	strh.w	r8, [sp, #30]
   d983a:	4638      	mov	r0, r7
   d983c:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9840:	f7fb fdde 	bl	d5400 <siscanf>
   d9844:	4540      	cmp	r0, r8
   d9846:	f340 80fd 	ble.w	d9a44 <_tzset_unlocked_r+0x2c8>
   d984a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d984e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9852:	f8df 9224 	ldr.w	r9, [pc, #548]	; d9a78 <_tzset_unlocked_r+0x2fc>
   d9856:	213c      	movs	r1, #60	; 0x3c
   d9858:	fb01 3302 	mla	r3, r1, r2, r3
   d985c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9860:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9864:	fb01 3302 	mla	r3, r1, r2, r3
   d9868:	435d      	muls	r5, r3
   d986a:	6225      	str	r5, [r4, #32]
   d986c:	4d7c      	ldr	r5, [pc, #496]	; (d9a60 <_tzset_unlocked_r+0x2e4>)
   d986e:	4b7d      	ldr	r3, [pc, #500]	; (d9a64 <_tzset_unlocked_r+0x2e8>)
   d9870:	602b      	str	r3, [r5, #0]
   d9872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9874:	497c      	ldr	r1, [pc, #496]	; (d9a68 <_tzset_unlocked_r+0x2ec>)
   d9876:	441f      	add	r7, r3
   d9878:	464a      	mov	r2, r9
   d987a:	4633      	mov	r3, r6
   d987c:	4638      	mov	r0, r7
   d987e:	f7fb fdbf 	bl	d5400 <siscanf>
   d9882:	4540      	cmp	r0, r8
   d9884:	dc08      	bgt.n	d9898 <_tzset_unlocked_r+0x11c>
   d9886:	682b      	ldr	r3, [r5, #0]
   d9888:	606b      	str	r3, [r5, #4]
   d988a:	4b72      	ldr	r3, [pc, #456]	; (d9a54 <_tzset_unlocked_r+0x2d8>)
   d988c:	6a22      	ldr	r2, [r4, #32]
   d988e:	601a      	str	r2, [r3, #0]
   d9890:	4b72      	ldr	r3, [pc, #456]	; (d9a5c <_tzset_unlocked_r+0x2e0>)
   d9892:	f8c3 8000 	str.w	r8, [r3]
   d9896:	e0d5      	b.n	d9a44 <_tzset_unlocked_r+0x2c8>
   d9898:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d989a:	f8c5 9004 	str.w	r9, [r5, #4]
   d989e:	18fd      	adds	r5, r7, r3
   d98a0:	5cfb      	ldrb	r3, [r7, r3]
   d98a2:	2b2d      	cmp	r3, #45	; 0x2d
   d98a4:	d103      	bne.n	d98ae <_tzset_unlocked_r+0x132>
   d98a6:	3501      	adds	r5, #1
   d98a8:	f04f 37ff 	mov.w	r7, #4294967295
   d98ac:	e003      	b.n	d98b6 <_tzset_unlocked_r+0x13a>
   d98ae:	2b2b      	cmp	r3, #43	; 0x2b
   d98b0:	bf08      	it	eq
   d98b2:	3501      	addeq	r5, #1
   d98b4:	2701      	movs	r7, #1
   d98b6:	2300      	movs	r3, #0
   d98b8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d98bc:	f8ad 301e 	strh.w	r3, [sp, #30]
   d98c0:	f8ad 3020 	strh.w	r3, [sp, #32]
   d98c4:	930a      	str	r3, [sp, #40]	; 0x28
   d98c6:	9603      	str	r6, [sp, #12]
   d98c8:	f8cd a008 	str.w	sl, [sp, #8]
   d98cc:	9601      	str	r6, [sp, #4]
   d98ce:	f8cd b000 	str.w	fp, [sp]
   d98d2:	4633      	mov	r3, r6
   d98d4:	aa07      	add	r2, sp, #28
   d98d6:	4965      	ldr	r1, [pc, #404]	; (d9a6c <_tzset_unlocked_r+0x2f0>)
   d98d8:	4628      	mov	r0, r5
   d98da:	f7fb fd91 	bl	d5400 <siscanf>
   d98de:	2800      	cmp	r0, #0
   d98e0:	dc04      	bgt.n	d98ec <_tzset_unlocked_r+0x170>
   d98e2:	6a23      	ldr	r3, [r4, #32]
   d98e4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d98e8:	63e3      	str	r3, [r4, #60]	; 0x3c
   d98ea:	e00e      	b.n	d990a <_tzset_unlocked_r+0x18e>
   d98ec:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d98f0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d98f4:	213c      	movs	r1, #60	; 0x3c
   d98f6:	fb01 3302 	mla	r3, r1, r2, r3
   d98fa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d98fe:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9902:	fb01 3302 	mla	r3, r1, r2, r3
   d9906:	435f      	muls	r7, r3
   d9908:	63e7      	str	r7, [r4, #60]	; 0x3c
   d990a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d990c:	4627      	mov	r7, r4
   d990e:	441d      	add	r5, r3
   d9910:	f04f 0900 	mov.w	r9, #0
   d9914:	782b      	ldrb	r3, [r5, #0]
   d9916:	2b2c      	cmp	r3, #44	; 0x2c
   d9918:	bf08      	it	eq
   d991a:	3501      	addeq	r5, #1
   d991c:	f895 8000 	ldrb.w	r8, [r5]
   d9920:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9924:	d126      	bne.n	d9974 <_tzset_unlocked_r+0x1f8>
   d9926:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d992a:	9302      	str	r3, [sp, #8]
   d992c:	ab09      	add	r3, sp, #36	; 0x24
   d992e:	9300      	str	r3, [sp, #0]
   d9930:	9603      	str	r6, [sp, #12]
   d9932:	9601      	str	r6, [sp, #4]
   d9934:	4633      	mov	r3, r6
   d9936:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d993a:	494d      	ldr	r1, [pc, #308]	; (d9a70 <_tzset_unlocked_r+0x2f4>)
   d993c:	4628      	mov	r0, r5
   d993e:	f7fb fd5f 	bl	d5400 <siscanf>
   d9942:	2803      	cmp	r0, #3
   d9944:	d17e      	bne.n	d9a44 <_tzset_unlocked_r+0x2c8>
   d9946:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d994a:	1e4b      	subs	r3, r1, #1
   d994c:	2b0b      	cmp	r3, #11
   d994e:	d879      	bhi.n	d9a44 <_tzset_unlocked_r+0x2c8>
   d9950:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9954:	1e53      	subs	r3, r2, #1
   d9956:	2b04      	cmp	r3, #4
   d9958:	d874      	bhi.n	d9a44 <_tzset_unlocked_r+0x2c8>
   d995a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d995e:	2b06      	cmp	r3, #6
   d9960:	d870      	bhi.n	d9a44 <_tzset_unlocked_r+0x2c8>
   d9962:	f887 8008 	strb.w	r8, [r7, #8]
   d9966:	60f9      	str	r1, [r7, #12]
   d9968:	613a      	str	r2, [r7, #16]
   d996a:	617b      	str	r3, [r7, #20]
   d996c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d996e:	eb05 0803 	add.w	r8, r5, r3
   d9972:	e02a      	b.n	d99ca <_tzset_unlocked_r+0x24e>
   d9974:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9978:	bf06      	itte	eq
   d997a:	3501      	addeq	r5, #1
   d997c:	4643      	moveq	r3, r8
   d997e:	2344      	movne	r3, #68	; 0x44
   d9980:	220a      	movs	r2, #10
   d9982:	a90b      	add	r1, sp, #44	; 0x2c
   d9984:	4628      	mov	r0, r5
   d9986:	9305      	str	r3, [sp, #20]
   d9988:	f7ff fe32 	bl	d95f0 <strtoul>
   d998c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9990:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9994:	4545      	cmp	r5, r8
   d9996:	9b05      	ldr	r3, [sp, #20]
   d9998:	d114      	bne.n	d99c4 <_tzset_unlocked_r+0x248>
   d999a:	234d      	movs	r3, #77	; 0x4d
   d999c:	f1b9 0f00 	cmp.w	r9, #0
   d99a0:	d107      	bne.n	d99b2 <_tzset_unlocked_r+0x236>
   d99a2:	7223      	strb	r3, [r4, #8]
   d99a4:	2303      	movs	r3, #3
   d99a6:	60e3      	str	r3, [r4, #12]
   d99a8:	2302      	movs	r3, #2
   d99aa:	6123      	str	r3, [r4, #16]
   d99ac:	f8c4 9014 	str.w	r9, [r4, #20]
   d99b0:	e00b      	b.n	d99ca <_tzset_unlocked_r+0x24e>
   d99b2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d99b6:	230b      	movs	r3, #11
   d99b8:	62a3      	str	r3, [r4, #40]	; 0x28
   d99ba:	2301      	movs	r3, #1
   d99bc:	62e3      	str	r3, [r4, #44]	; 0x2c
   d99be:	2300      	movs	r3, #0
   d99c0:	6323      	str	r3, [r4, #48]	; 0x30
   d99c2:	e002      	b.n	d99ca <_tzset_unlocked_r+0x24e>
   d99c4:	b280      	uxth	r0, r0
   d99c6:	723b      	strb	r3, [r7, #8]
   d99c8:	6178      	str	r0, [r7, #20]
   d99ca:	2302      	movs	r3, #2
   d99cc:	f8ad 301c 	strh.w	r3, [sp, #28]
   d99d0:	2300      	movs	r3, #0
   d99d2:	f8ad 301e 	strh.w	r3, [sp, #30]
   d99d6:	f8ad 3020 	strh.w	r3, [sp, #32]
   d99da:	930a      	str	r3, [sp, #40]	; 0x28
   d99dc:	f898 3000 	ldrb.w	r3, [r8]
   d99e0:	2b2f      	cmp	r3, #47	; 0x2f
   d99e2:	d10b      	bne.n	d99fc <_tzset_unlocked_r+0x280>
   d99e4:	9603      	str	r6, [sp, #12]
   d99e6:	f8cd a008 	str.w	sl, [sp, #8]
   d99ea:	9601      	str	r6, [sp, #4]
   d99ec:	f8cd b000 	str.w	fp, [sp]
   d99f0:	4633      	mov	r3, r6
   d99f2:	aa07      	add	r2, sp, #28
   d99f4:	491f      	ldr	r1, [pc, #124]	; (d9a74 <_tzset_unlocked_r+0x2f8>)
   d99f6:	4640      	mov	r0, r8
   d99f8:	f7fb fd02 	bl	d5400 <siscanf>
   d99fc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9a00:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9a04:	213c      	movs	r1, #60	; 0x3c
   d9a06:	fb01 3302 	mla	r3, r1, r2, r3
   d9a0a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9a0e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9a12:	fb01 3302 	mla	r3, r1, r2, r3
   d9a16:	61bb      	str	r3, [r7, #24]
   d9a18:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d9a1a:	f109 0901 	add.w	r9, r9, #1
   d9a1e:	f1b9 0f02 	cmp.w	r9, #2
   d9a22:	4445      	add	r5, r8
   d9a24:	f107 071c 	add.w	r7, r7, #28
   d9a28:	f47f af74 	bne.w	d9914 <_tzset_unlocked_r+0x198>
   d9a2c:	6860      	ldr	r0, [r4, #4]
   d9a2e:	f7ff fdf5 	bl	d961c <__tzcalc_limits>
   d9a32:	4b08      	ldr	r3, [pc, #32]	; (d9a54 <_tzset_unlocked_r+0x2d8>)
   d9a34:	6a22      	ldr	r2, [r4, #32]
   d9a36:	601a      	str	r2, [r3, #0]
   d9a38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d9a3a:	1a9b      	subs	r3, r3, r2
   d9a3c:	4a07      	ldr	r2, [pc, #28]	; (d9a5c <_tzset_unlocked_r+0x2e0>)
   d9a3e:	bf18      	it	ne
   d9a40:	2301      	movne	r3, #1
   d9a42:	6013      	str	r3, [r2, #0]
   d9a44:	b00d      	add	sp, #52	; 0x34
   d9a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a4a:	bf00      	nop
   d9a4c:	000daa5c 	.word	0x000daa5c
   d9a50:	2003e7e0 	.word	0x2003e7e0
   d9a54:	2003e7e8 	.word	0x2003e7e8
   d9a58:	000daa5f 	.word	0x000daa5f
   d9a5c:	2003e7e4 	.word	0x2003e7e4
   d9a60:	2003d834 	.word	0x2003d834
   d9a64:	2003e7d3 	.word	0x2003e7d3
   d9a68:	000daa63 	.word	0x000daa63
   d9a6c:	000daa86 	.word	0x000daa86
   d9a70:	000daa72 	.word	0x000daa72
   d9a74:	000daa85 	.word	0x000daa85
   d9a78:	2003e7c8 	.word	0x2003e7c8

000d9a7c <_findenv_r>:
   d9a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9a80:	4607      	mov	r7, r0
   d9a82:	468b      	mov	fp, r1
   d9a84:	4690      	mov	r8, r2
   d9a86:	f000 f8d9 	bl	d9c3c <__env_lock>
   d9a8a:	4b19      	ldr	r3, [pc, #100]	; (d9af0 <_findenv_r+0x74>)
   d9a8c:	681d      	ldr	r5, [r3, #0]
   d9a8e:	469a      	mov	sl, r3
   d9a90:	b13d      	cbz	r5, d9aa2 <_findenv_r+0x26>
   d9a92:	465c      	mov	r4, fp
   d9a94:	4623      	mov	r3, r4
   d9a96:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9a9a:	b142      	cbz	r2, d9aae <_findenv_r+0x32>
   d9a9c:	2a3d      	cmp	r2, #61	; 0x3d
   d9a9e:	461c      	mov	r4, r3
   d9aa0:	d1f8      	bne.n	d9a94 <_findenv_r+0x18>
   d9aa2:	4638      	mov	r0, r7
   d9aa4:	f000 f8cb 	bl	d9c3e <__env_unlock>
   d9aa8:	2000      	movs	r0, #0
   d9aaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9aae:	ebcb 0404 	rsb	r4, fp, r4
   d9ab2:	46a9      	mov	r9, r5
   d9ab4:	f859 0b04 	ldr.w	r0, [r9], #4
   d9ab8:	2800      	cmp	r0, #0
   d9aba:	d0f2      	beq.n	d9aa2 <_findenv_r+0x26>
   d9abc:	4622      	mov	r2, r4
   d9abe:	4659      	mov	r1, fp
   d9ac0:	f7ff fc3a 	bl	d9338 <strncmp>
   d9ac4:	b988      	cbnz	r0, d9aea <_findenv_r+0x6e>
   d9ac6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d9aca:	191e      	adds	r6, r3, r4
   d9acc:	5d1b      	ldrb	r3, [r3, r4]
   d9ace:	2b3d      	cmp	r3, #61	; 0x3d
   d9ad0:	d10b      	bne.n	d9aea <_findenv_r+0x6e>
   d9ad2:	f8da 3000 	ldr.w	r3, [sl]
   d9ad6:	1aed      	subs	r5, r5, r3
   d9ad8:	10ad      	asrs	r5, r5, #2
   d9ada:	4638      	mov	r0, r7
   d9adc:	f8c8 5000 	str.w	r5, [r8]
   d9ae0:	f000 f8ad 	bl	d9c3e <__env_unlock>
   d9ae4:	1c70      	adds	r0, r6, #1
   d9ae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9aea:	464d      	mov	r5, r9
   d9aec:	e7e1      	b.n	d9ab2 <_findenv_r+0x36>
   d9aee:	bf00      	nop
   d9af0:	2003d87c 	.word	0x2003d87c

000d9af4 <_getenv_r>:
   d9af4:	b507      	push	{r0, r1, r2, lr}
   d9af6:	aa01      	add	r2, sp, #4
   d9af8:	f7ff ffc0 	bl	d9a7c <_findenv_r>
   d9afc:	b003      	add	sp, #12
   d9afe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9b04 <__gettzinfo>:
   d9b04:	4800      	ldr	r0, [pc, #0]	; (d9b08 <__gettzinfo+0x4>)
   d9b06:	4770      	bx	lr
   d9b08:	2003d83c 	.word	0x2003d83c

000d9b0c <gmtime_r>:
   d9b0c:	6802      	ldr	r2, [r0, #0]
   d9b0e:	4b47      	ldr	r3, [pc, #284]	; (d9c2c <gmtime_r+0x120>)
   d9b10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9b12:	fb92 f4f3 	sdiv	r4, r2, r3
   d9b16:	fb03 2214 	mls	r2, r3, r4, r2
   d9b1a:	2a00      	cmp	r2, #0
   d9b1c:	bfbc      	itt	lt
   d9b1e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9b22:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9b26:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d9b2a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d9b2e:	fb92 f3f0 	sdiv	r3, r2, r0
   d9b32:	fb00 2213 	mls	r2, r0, r3, r2
   d9b36:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d9b3a:	bfac      	ite	ge
   d9b3c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d9b40:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d9b44:	608b      	str	r3, [r1, #8]
   d9b46:	fb92 f3f0 	sdiv	r3, r2, r0
   d9b4a:	fb00 2213 	mls	r2, r0, r3, r2
   d9b4e:	604b      	str	r3, [r1, #4]
   d9b50:	600a      	str	r2, [r1, #0]
   d9b52:	2307      	movs	r3, #7
   d9b54:	1ce2      	adds	r2, r4, #3
   d9b56:	fb92 f3f3 	sdiv	r3, r2, r3
   d9b5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9b5e:	1ad3      	subs	r3, r2, r3
   d9b60:	618b      	str	r3, [r1, #24]
   d9b62:	4b33      	ldr	r3, [pc, #204]	; (d9c30 <gmtime_r+0x124>)
   d9b64:	4d33      	ldr	r5, [pc, #204]	; (d9c34 <gmtime_r+0x128>)
   d9b66:	fb94 f5f5 	sdiv	r5, r4, r5
   d9b6a:	fb03 4405 	mla	r4, r3, r5, r4
   d9b6e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9b72:	fbb4 f2f2 	udiv	r2, r4, r2
   d9b76:	4422      	add	r2, r4
   d9b78:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d9b7c:	fbb4 f3f7 	udiv	r3, r4, r7
   d9b80:	1ad2      	subs	r2, r2, r3
   d9b82:	482d      	ldr	r0, [pc, #180]	; (d9c38 <gmtime_r+0x12c>)
   d9b84:	fbb4 f0f0 	udiv	r0, r4, r0
   d9b88:	f648 6694 	movw	r6, #36500	; 0x8e94
   d9b8c:	1a13      	subs	r3, r2, r0
   d9b8e:	fbb3 f6f6 	udiv	r6, r3, r6
   d9b92:	4434      	add	r4, r6
   d9b94:	f240 126d 	movw	r2, #365	; 0x16d
   d9b98:	fbb3 f0f2 	udiv	r0, r3, r2
   d9b9c:	fbb3 f3f7 	udiv	r3, r3, r7
   d9ba0:	1ae3      	subs	r3, r4, r3
   d9ba2:	fb02 3310 	mls	r3, r2, r0, r3
   d9ba6:	2499      	movs	r4, #153	; 0x99
   d9ba8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d9bac:	3202      	adds	r2, #2
   d9bae:	fbb2 f2f4 	udiv	r2, r2, r4
   d9bb2:	2a0a      	cmp	r2, #10
   d9bb4:	fb04 f402 	mul.w	r4, r4, r2
   d9bb8:	f104 0602 	add.w	r6, r4, #2
   d9bbc:	f04f 0405 	mov.w	r4, #5
   d9bc0:	fbb6 f4f4 	udiv	r4, r6, r4
   d9bc4:	bf34      	ite	cc
   d9bc6:	2602      	movcc	r6, #2
   d9bc8:	f06f 0609 	mvncs.w	r6, #9
   d9bcc:	4416      	add	r6, r2
   d9bce:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9bd2:	fb02 0505 	mla	r5, r2, r5, r0
   d9bd6:	1c5f      	adds	r7, r3, #1
   d9bd8:	2e01      	cmp	r6, #1
   d9bda:	bf98      	it	ls
   d9bdc:	3501      	addls	r5, #1
   d9bde:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9be2:	eba7 0704 	sub.w	r7, r7, r4
   d9be6:	d302      	bcc.n	d9bee <gmtime_r+0xe2>
   d9be8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d9bec:	e014      	b.n	d9c18 <gmtime_r+0x10c>
   d9bee:	0782      	lsls	r2, r0, #30
   d9bf0:	d105      	bne.n	d9bfe <gmtime_r+0xf2>
   d9bf2:	2464      	movs	r4, #100	; 0x64
   d9bf4:	fbb0 f2f4 	udiv	r2, r0, r4
   d9bf8:	fb04 0212 	mls	r2, r4, r2, r0
   d9bfc:	b94a      	cbnz	r2, d9c12 <gmtime_r+0x106>
   d9bfe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9c02:	fbb0 f4f2 	udiv	r4, r0, r2
   d9c06:	fb02 0014 	mls	r0, r2, r4, r0
   d9c0a:	fab0 f280 	clz	r2, r0
   d9c0e:	0952      	lsrs	r2, r2, #5
   d9c10:	e000      	b.n	d9c14 <gmtime_r+0x108>
   d9c12:	2201      	movs	r2, #1
   d9c14:	333b      	adds	r3, #59	; 0x3b
   d9c16:	441a      	add	r2, r3
   d9c18:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d9c1c:	2300      	movs	r3, #0
   d9c1e:	61ca      	str	r2, [r1, #28]
   d9c20:	614d      	str	r5, [r1, #20]
   d9c22:	610e      	str	r6, [r1, #16]
   d9c24:	60cf      	str	r7, [r1, #12]
   d9c26:	620b      	str	r3, [r1, #32]
   d9c28:	4608      	mov	r0, r1
   d9c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9c2c:	00015180 	.word	0x00015180
   d9c30:	fffdc54f 	.word	0xfffdc54f
   d9c34:	00023ab1 	.word	0x00023ab1
   d9c38:	00023ab0 	.word	0x00023ab0

000d9c3c <__env_lock>:
   d9c3c:	4770      	bx	lr

000d9c3e <__env_unlock>:
   d9c3e:	4770      	bx	lr

000d9c40 <dynalib_user>:
   d9c40:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9c50:	0000 0000                                   ....

000d9c54 <_ZTVN5spark10LogHandlerE>:
	...
   d9c64:	40a5 000d 40c9 000d                         .@...@..

000d9c6c <_ZTVN5spark16SerialLogHandlerE>:
	...
   d9c74:	41b9 000d 41ed 000d 7d0d 000d 40cb 000d     .A...A...}...@..
   d9c84:	002c 6553 736e 726f 3120 2d20 5420 6d65     ,.Sensor 1 - Tem
   d9c94:	6570 6172 7574 6572 203a 7525 6420 6765     perature: %u deg
   d9ca4:	6572 7365 4320 6c65 6973 7375 5300 6e65     rees Celsius.Sen
   d9cb4:	6f73 2072 2031 202d 7548 696d 6964 7974     sor 1 - Humidity
   d9cc4:	203a 7525 2525 5300 6e65 6f73 2072 2031     : %u%%.Sensor 1 
   d9cd4:	202d 7543 7272 6e65 3a74 2520 2075 6d41     - Current: %u Am
   d9ce4:	7370 5300 6e65 6f73 2072 2032 202d 7543     ps.Sensor 2 - Cu
   d9cf4:	7272 6e65 3a74 2520 2075 6d41 7370 5300     rrent: %u Amps.S
   d9d04:	6e65 6f73 2072 2032 202d 6554 706d 7265     ensor 2 - Temper
   d9d14:	7461 7275 3a65 2520 2064 6564 7267 6565     ature: %d degree
   d9d24:	2073 6543 736c 7569 0073 6553 736e 726f     s Celsius.Sensor
   d9d34:	3220 2d20 4c20 6769 7468 203a 7525 4c20      2 - Light: %u L
   d9d44:	7875 5300 6e65 6f73 2072 2032 202d 7548     ux.Sensor 2 - Hu
   d9d54:	616d 206e 6564 6574 7463 726f 203a 7525     man detector: %u
   d9d64:	5300 6e65 6f73 2072 2032 202d 7548 616d     .Sensor 2 - Huma
   d9d74:	206e 6f6c 7473 2e2e 002e 6553 736e 726f     n lost....Sensor
   d9d84:	3220 2d20 4820 6d75 6e61 6420 7465 6365      2 - Human detec
   d9d94:	6574 2164 5300 6e65 6f73 2072 2032 202d     ted!.Sensor 2 - 
   d9da4:	6e49 6176 696c 2064 7568 616d 206e 6564     Invalid human de
   d9db4:	6574 7463 726f 6d20 7365 6173 6567 202e     tector message. 
   d9dc4:	7845 6570 7463 6465 3020 6f20 2072 2c31     Expected 0 or 1,
   d9dd4:	7220 6365 6965 6576 2064 7525 4000 4040      received %u.@@@
   d9de4:	4040 2040 5245 4f52 2052 202d 6e69 6176     @@@ ERROR - inva
   d9df4:	696c 2064 6c61 7261 206d 756e 626d 7265     lid alarm number
   d9e04:	7320 7075 6c70 6569 2064 6f74 2720 6c61      supplied to 'al
   d9e14:	7261 436d 6e6f 6964 6974 6e6f 4d73 7465     armConditionsMet
   d9e24:	2027 7566 636e 6974 6e6f 202e 7845 6570     ' function. Expe
   d9e34:	7463 6465 7620 6c61 6575 6620 6f72 206d     cted value from 
   d9e44:	2030 202d 2c33 6720 746f 2520 0064 6341     0 - 3, got %d.Ac
   d9e54:	6974 6176 6974 676e 6120 616c 6d72 2520     tivating alarm %
   d9e64:	2064 7266 6d6f 7320 6e65 6f73 2072 6f6e     d from sensor no
   d9e74:	6564 2520 0075 4040 4040 4040 4520 5252     de %u.@@@@@@ ERR
   d9e84:	524f 2d20 6920 766e 6c61 6469 6120 616c     OR - invalid ala
   d9e94:	6d72 6e20 6d75 6562 2072 7573 7070 696c     rm number suppli
   d9ea4:	6465 7420 206f 7327 6174 7472 6c41 7261     ed to 'startAlar
   d9eb4:	276d 6620 6e75 7463 6f69 2e6e 4520 7078     m' function. Exp
   d9ec4:	6365 6574 2064 6176 756c 2065 7266 6d6f     ected value from
   d9ed4:	3020 2d20 3320 202c 6f67 2074 6425 5300      0 - 3, got %d.S
   d9ee4:	6e65 6f73 2072 2031 202d 6944 7473 6e61     ensor 1 - Distan
   d9ef4:	6563 203a 7525 6320 006d 6553 736e 726f     ce: %u cm.Sensor
   d9f04:	3220 2d20 5320 756f 646e 203a 7525 6420      2 - Sound: %u d
   d9f14:	0042 6c41 7261 206d 6425 6520 6576 746e     B.Alarm %d event
   d9f24:	7420 6972 6767 7265 6465 6220 2079 6553      triggered by Se
   d9f34:	736e 726f 4e20 646f 2065 7525 6120 2074     nsor Node %u at 
   d9f44:	7325 202e 7544 6172 6974 6e6f 203a 6425     %s. Duration: %d
   d9f54:	7320 6365 6e6f 7364 4000 4040 4040 2040      seconds.@@@@@@ 
   d9f64:	5245 4f52 2052 202d 6e69 6176 696c 2064     ERROR - invalid 
   d9f74:	6c61 7261 206d 756e 626d 7265 7320 7075     alarm number sup
   d9f84:	6c70 6569 2064 6f74 2720 6572 6573 4174     plied to 'resetA
   d9f94:	616c 6d72 2027 7566 636e 6974 6e6f 202e     larm' function. 
   d9fa4:	7845 6570 7463 6465 7620 6c61 6575 6620     Expected value f
   d9fb4:	6f72 206d 2030 202d 2c33 6720 746f 2520     rom 0 - 3, got %
   d9fc4:	0064 6c61 006c 6241 756f 2074 6f74 7320     d.all.About to s
   d9fd4:	6163 2e6e 2e2e 4600 756f 646e 6120 6220     can....Found a b
   d9fe4:	756c 7465 6f6f 6874 6420 7665 6369 2e65     luetooth device.
   d9ff4:	4100 6464 6572 7373 203a 4600 756f 646e     .Address: .Found
   da004:	5520 4955 3a44 0020 6553 736e 726f 6f4e      UUID: .SensorNo
   da014:	6564 2031 5555 4449 203a 5300 6e65 6f73     de1 UUID: .Senso
   da024:	4e72 646f 3265 5520 4955 3a44 0020 7553     rNode2 UUID: .Su
   da034:	6363 7365 6673 6c75 796c 6320 6e6f 656e     ccessfully conne
   da044:	7463 6465 7420 206f 6573 736e 726f 6e20     cted to sensor n
   da054:	646f 2065 2131 6200 3763 3166 6438 2d39     ode 1!.bc7f18d9-
   da064:	6332 3334 342d 3830 2d65 6562 3532 362d     2c43-408e-be25-6
   da074:	6632 3034 3436 3935 3738 0063 3939 3061     2f40645987c.99a0
   da084:	3264 3966 312d 6663 2d61 3234 3362 622d     d2f9-1cfa-42b3-b
   da094:	6235 2d61 6231 6434 3334 3134 3933 6632     5ba-1b4d4341392f
   da0a4:	3400 6235 3465 3561 2d36 3834 3566 342d     .45be4a56-48f5-4
   da0b4:	3338 2d63 6238 3162 642d 6633 6565 3334     83c-8bb1-d3fee43
   da0c4:	6333 3332 0063 3832 3232 3661 3031 332d     3c23c.2822a610-3
   da0d4:	6432 2d36 3534 3165 622d 6639 2d62 3432     2d6-45e1-b9fb-24
   da0e4:	3137 3833 6366 6438 3766 3200 6639 6162     7138fc8df7.29fba
   da0f4:	6633 2d35 6334 3865 342d 6236 2d63 6438     3f5-4ce8-46bc-8d
   da104:	3537 372d 3837 3630 6264 3232 3363 0031     75-77806db22c31.
   da114:	6146 6c69 6465 7420 206f 6f63 6e6e 6365     Failed to connec
   da124:	2074 6f74 7320 6e65 6f73 2072 6f6e 6564     t to sensor node
   da134:	3120 002e 6553 736e 726f 6e20 646f 2065      1..Sensor node 
   da144:	2031 6c61 6572 6461 2079 6f63 6e6e 6365     1 already connec
   da154:	6574 2e64 5300 6375 6563 7373 7566 6c6c     ted..Successfull
   da164:	2079 6f63 6e6e 6365 6574 2064 6f74 7320     y connected to s
   da174:	6e65 6f73 2072 6f6e 6564 3220 0021 6165     ensor node 2!.ea
   da184:	3235 3834 3461 342d 6333 2d63 3134 3839     5248a4-43cc-4198
   da194:	612d 6134 2d61 3937 3032 6130 3537 3830     -a4aa-79200a7508
   da1a4:	3533 3800 6238 3261 3566 2d64 6531 3839     35.88ba2f5d-1e98
   da1b4:	342d 6139 2d66 3638 3739 642d 3530 3631     -49af-8697-d0516
   da1c4:	6664 3330 6562 0039 3462 3238 3564 3135     df03be9.b482d551
   da1d4:	632d 6133 2d65 6434 6564 622d 3231 2d35     -c3ae-4dde-b125-
   da1e4:	6563 3432 6434 3837 3639 3062 3900 3037     ce244d7896b0.970
   da1f4:	3731 3736 2d34 3639 3531 342d 6266 2d61     17674-9615-4fba-
   da204:	3739 3231 362d 3238 6639 3032 3534 3338     9712-6829f204583
   da214:	0036 6146 6c69 6465 7420 206f 6f63 6e6e     6.Failed to conn
   da224:	6365 2074 6f74 7320 6e65 6f73 2072 6f6e     ect to sensor no
   da234:	6564 3220 002e 6553 736e 726f 6e20 646f     de 2..Sensor nod
   da244:	2065 2032 6c61 6572 6461 2079 6f63 6e6e     e 2 already conn
   da254:	6365 6574 2e64 2500 2064 6564 6976 6563     ected..%d device
   da264:	2073 6f66 6e75 0064 6f46 6e75 2064 6573     s found.Found se
   da274:	736e 726f 6e20 646f 2065 2e31 4600 756f     nsor node 1..Fou
   da284:	646e 7320 6e65 6f73 2072 6f6e 6564 3220     nd sensor node 2
   da294:	002e 6572 6573 4174 616c 6d72 7300 7465     ..resetAlarm.set
   da2a4:	6c41 7261 436d 6f6f 6f6c 6666 6544 616c     AlarmCooloffDela
   da2b4:	0079 6573 4474 7369 6174 636e 5465 7268     y.setDistanceThr
   da2c4:	7365 6f68 646c 7300 7465 694c 6867 5474     eshold.setLightT
   da2d4:	7268 7365 6f68 646c 7300 7465 6f56 756c     hreshold.setVolu
   da2e4:	656d 6854 6572 6873 6c6f 7364 7300 7465     meThresholds.set
   da2f4:	6f53 6e75 4464 7275 7461 6f69 546e 7268     SoundDurationThr
   da304:	7365 6f68 646c 0073 3537 6534 6662 6535     esholds.754ebf5e
   da314:	632d 3365 2d31 3334 3030 392d 6466 2d35     -ce31-4300-9fd5-
   da324:	3861 6266 6534 3465 3861 3131 3900 3737     a8fb4ee4a811.977
   da334:	3832 6461 2d39 3961 3839 342d 3236 2d39     28ad9-a998-4629-
   da344:	3862 3535 652d 3265 3536 6338 3061 6631     b855-ee2658ca01f
   da354:	0037 0000                                   7...

000da358 <_ZTVN5spark13EthernetClassE>:
	...
   da360:	548f 000d 5485 000d 547b 000d 5471 000d     .T...T..{T..qT..
   da370:	5465 000d 5459 000d 544d 000d 5445 000d     eT..YT..MT..ET..
   da380:	543b 000d 5431 000d 8845 000d               ;T..1T..E...

000da38c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da394:	5737 000d 573d 000d 6c9d 000d 5767 000d     7W..=W...l..gW..
   da3a4:	5739 000d                                   9W..

000da3a8 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da3b0:	5731 000d 574b 000d 6e59 000d 576b 000d     1W..KW..Yn..kW..
   da3c0:	5733 000d                                   3W..

000da3c4 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da3cc:	572b 000d 5759 000d 63af 000d 576f 000d     +W..YW...c..oW..
   da3dc:	572d 000d 6977 6972 676e 622e 656c 5300     -W..wiring.ble.S
   da3ec:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   da3fc:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   da40c:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   da41c:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   da42c:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   da43c:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   da44c:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   da45c:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   da46c:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   da47c:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   da48c:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   da49c:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   da4ac:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   da4bc:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   da4cc:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   da4dc:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   da4ec:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   da4fc:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   da50c:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   da51c:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   da52c:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   da53c:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   da54c:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   da55c:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   da56c:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   da57c:	6465 002e                                   ed..

000da580 <_ZN8particle7BleUuid9BASE_UUIDE>:
   da580:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000da590 <_ZTVN5spark16JSONStreamWriterE>:
	...
   da598:	70e9 000d 710f 000d 70c3 000d 8953 000d     .p...q...p..S...

000da5a8 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   da5b0:	7565 000d 7579 000d 7ec1 000d 70cb 000d     eu..yu...~...p..
   da5c0:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   da5d0:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   da5e0:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   da5f0:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   da600:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   da610:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   da620:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   da630:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   da640:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   da650:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   da660:	0020 0a0d 6c00 006e 6e66 6300 646f 0065      ....ln.fn.code.
   da670:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   da680:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   da690:	0072 6170 696e 0063                         r.panic.

000da698 <_ZTVN5spark16StreamLogHandlerE>:
	...
   da6a0:	7539 000d 7551 000d 7d0d 000d 40cb 000d     9u..Qu...}...@..

000da6b0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   da6b8:	70e7 000d 711d 000d 7c35 000d 70cd 000d     .p...q..5|...p..

000da6c8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   da6d0:	70e5 000d 712b 000d 747d 000d 7139 000d     .p..+q..}t..9q..
   da6e0:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   da6f0:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   da700:	6373 6974 656d 0000                         sctime..

000da708 <_ZTV9IPAddress>:
	...
   da710:	82e7 000d 82d7 000d 82d9 000d               ............

000da71c <_ZTV9USBSerial>:
	...
   da724:	83c1 000d 8411 000d 841f 000d 6fa5 000d     .............o..
   da734:	83fd 000d 83c3 000d 83d9 000d 840b 000d     ................
   da744:	83ef 000d 83bd 000d                         ........

000da74c <_ZTV11USARTSerial>:
	...
   da754:	84d5 000d 8525 000d 8533 000d 6fa5 000d     ....%...3....o..
   da764:	84e9 000d 850b 000d 84f7 000d 851f 000d     ................
   da774:	84d7 000d 84db 000d                         ........

000da77c <_ZTVN5spark9MeshClassE>:
	...
   da784:	8643 000d 8639 000d 862f 000d 8625 000d     C...9.../...%...
   da794:	8619 000d 860d 000d 8601 000d 85f9 000d     ................
   da7a4:	85ef 000d 85e5 000d 8845 000d               ........E...

000da7b0 <_ZTVN5spark9WiFiClassE>:
	...
   da7b8:	87bf 000d 87b5 000d 87ab 000d 8761 000d     ............a...
   da7c8:	879f 000d 8793 000d 8787 000d 877f 000d     ................
   da7d8:	8775 000d 876b 000d 8845 000d               u...k...E...

000da7e4 <_ZTVN5spark12NetworkClassE>:
	...
   da7ec:	87dd 000d 87e7 000d 87f1 000d 87fb 000d     ................
   da7fc:	8805 000d 8811 000d 881d 000d 8829 000d     ............)...
   da80c:	8831 000d 883b 000d 8845 000d 2e30 0030     1...;...E...0.0.
   da81c:	6166 736c 0065 7274 6575 2500 2a2e 666c     false.true.%.*lf
   da82c:	2500 0067 756e 6c6c 7500 3025 7834 0000          .%g.null.u%04x.

000da83b <_ZSt7nothrow>:
	...

000da83c <day_name.4725>:
   da83c:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   da84c:	6972 6153 4a74                                   riSat

000da851 <mon_name.4726>:
   da851:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   da861:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   da871:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   da881:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   da891:	6425 000a                                   %d..

000da895 <_ctype_>:
   da895:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da8a5:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da8b5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da8c5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da8d5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da8e5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da8f5:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da905:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da915:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da998 <__sf_fake_stdin>:
	...

000da9b8 <__sf_fake_stdout>:
	...

000da9d8 <__sf_fake_stderr>:
	...
   da9f8:	0043 0000                                   C...

000da9fc <__month_lengths>:
   da9fc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   daa0c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   daa1c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   daa2c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   daa3c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   daa4c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   daa5c:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   daa6c:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   daa7c:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   daa8c:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000daa98 <link_const_variable_data_end>:
   daa98:	000d4cc9 	.word	0x000d4cc9
   daa9c:	000d5499 	.word	0x000d5499
   daaa0:	000d54ad 	.word	0x000d54ad
   daaa4:	000d6f7d 	.word	0x000d6f7d
   daaa8:	000d7cfd 	.word	0x000d7cfd
   daaac:	000d80d1 	.word	0x000d80d1
   daab0:	000d8151 	.word	0x000d8151
   daab4:	000d8711 	.word	0x000d8711
   daab8:	000d87c9 	.word	0x000d87c9
   daabc:	000d8911 	.word	0x000d8911
   daac0:	000d8ced 	.word	0x000d8ced
   daac4:	000d8d71 	.word	0x000d8d71
   daac8:	000d8e35 	.word	0x000d8e35
   daacc:	000d8ef9 	.word	0x000d8ef9
