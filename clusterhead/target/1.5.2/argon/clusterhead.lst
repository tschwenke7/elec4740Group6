
d:/UoN/ELEC4470/Repo/elec4740Group6/clusterhead/target/1.5.2/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006304  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da320  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003d850  000da324  0001d850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f28  2003d8c8  2003d8c8  0002d8c8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da39c  000da39c  0002a39c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da3c4  000da3c4  0002a3c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000dca47  00000000  00000000  0002a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001025c  00000000  00000000  00106e0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000220d0  00000000  00000000  0011706b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ac0  00000000  00000000  0013913b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004f90  00000000  00000000  0013bbfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032db6  00000000  00000000  00140b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000263a9  00000000  00000000  00173941  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109077  00000000  00000000  00199cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ddb4  00000000  00000000  002a2d64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 f9de 	bl	d93ee <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 f9fe 	bl	d943a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d850 	.word	0x2003d850
   d4048:	000da324 	.word	0x000da324
   d404c:	2003d8c8 	.word	0x2003d8c8
   d4050:	2003d8c8 	.word	0x2003d8c8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 f845 	bl	d80e8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da31c 	.word	0x000da31c
   d4080:	000da2dc 	.word	0x000da2dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b922 	b.w	d42cc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f98d 	bl	d43a8 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bfeb 	b.w	d806c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 b9e5 	b.w	d5464 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f001 b9e3 	b.w	d5464 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b9e9 	b.w	d5474 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f001 b9e7 	b.w	d5474 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f001 f93c 	bl	d532c <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d4fc9 	.word	0x000d4fc9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40da:	6800      	ldr	r0, [r0, #0]
   d40dc:	b108      	cbz	r0, d40e2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40de:	f001 f9c9 	bl	d5474 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e2:	4620      	mov	r0, r4
   d40e4:	bd10      	pop	{r4, pc}
	...

000d40e8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ea:	b510      	push	{r4, lr}
   d40ec:	4604      	mov	r4, r0
   d40ee:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40f0:	f003 f8f6 	bl	d72e0 <_ZN5spark10LogManager8instanceEv>
   d40f4:	4621      	mov	r1, r4
   d40f6:	f003 fae3 	bl	d76c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40fa:	f004 f919 	bl	d8330 <_Z16_fetch_usbserialv>
   d40fe:	f004 f90b 	bl	d8318 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4102:	4620      	mov	r0, r4
   d4104:	4b04      	ldr	r3, [pc, #16]	; (d4118 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4106:	f840 3b04 	str.w	r3, [r0], #4
   d410a:	f003 f9df 	bl	d74cc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d410e:	4620      	mov	r0, r4
   d4110:	bd10      	pop	{r4, pc}
   d4112:	bf00      	nop
   d4114:	000d96bc 	.word	0x000d96bc
   d4118:	000d96a4 	.word	0x000d96a4

000d411c <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	2124      	movs	r1, #36	; 0x24
   d4128:	f004 ffea 	bl	d9100 <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4130:	b40e      	push	{r1, r2, r3}
   d4132:	b500      	push	{lr}
   d4134:	b08c      	sub	sp, #48	; 0x30
   d4136:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4138:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d413a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d413e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4140:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4144:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4146:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4148:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d414a:	aa04      	add	r2, sp, #16
   d414c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d414e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4150:	f001 f8fc 	bl	d534c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4154:	b00c      	add	sp, #48	; 0x30
   d4156:	f85d eb04 	ldr.w	lr, [sp], #4
   d415a:	b003      	add	sp, #12
   d415c:	4770      	bx	lr
	...

000d4160 <_Z8callbackPcPhj>:
// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];

//apparently needed even though no callback used since we don't subscribe to any topics here.
void callback(char* topic, byte* payload, unsigned int length) {
   d4160:	b508      	push	{r3, lr}
    Log.info("This message should not be appearing (from mqtt callback)");
   d4162:	4902      	ldr	r1, [pc, #8]	; (d416c <_Z8callbackPcPhj+0xc>)
   d4164:	4802      	ldr	r0, [pc, #8]	; (d4170 <_Z8callbackPcPhj+0x10>)
   d4166:	f7ff ffe3 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d416a:	bd08      	pop	{r3, pc}
   d416c:	000d96cc 	.word	0x000d96cc
   d4170:	2003e40c 	.word	0x2003e40c

000d4174 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
    }
}

/* These functions are where we do something with the data (in bytes) we've received via bluetooth */

void onTemperatureReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4174:	b510      	push	{r4, lr}

    
    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(receivedTemp), sizeof(sentTime));
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
   d4176:	f990 4000 	ldrsb.w	r4, [r0]
    

    Log.info("Sensor 1 - Temperature: %u degrees Celsius", receivedTemp);
   d417a:	4904      	ldr	r1, [pc, #16]	; (d418c <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   d417c:	4804      	ldr	r0, [pc, #16]	; (d4190 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d417e:	4622      	mov	r2, r4
   d4180:	f7ff ffd6 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    getTempsn1 = receivedTemp;
   d4184:	4b03      	ldr	r3, [pc, #12]	; (d4194 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4186:	701c      	strb	r4, [r3, #0]
   d4188:	bd10      	pop	{r4, pc}
   d418a:	bf00      	nop
   d418c:	000d9706 	.word	0x000d9706
   d4190:	2003e40c 	.word	0x2003e40c
   d4194:	2003d850 	.word	0x2003d850

000d4198 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    // Log.info("Temp/humidity transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onHumidityReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4198:	b508      	push	{r3, lr}
    uint8_t receivedHumidity;
    memcpy(&receivedHumidity, &data[0], sizeof(receivedHumidity));
    Log.info("Sensor 1 - Humidity: %u%%", receivedHumidity);
   d419a:	4903      	ldr	r1, [pc, #12]	; (d41a8 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d419c:	7802      	ldrb	r2, [r0, #0]
   d419e:	4803      	ldr	r0, [pc, #12]	; (d41ac <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d41a0:	f7ff ffc6 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d41a4:	bd08      	pop	{r3, pc}
   d41a6:	bf00      	nop
   d41a8:	000d9731 	.word	0x000d9731
   d41ac:	2003e40c 	.word	0x2003e40c

000d41b0 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
}

void onCurrentReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41b0:	b507      	push	{r0, r1, r2, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d41b2:	8803      	ldrh	r3, [r0, #0]
   d41b4:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 1 - Current: %u Amps", twoByteValue);
   d41b8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d41bc:	4903      	ldr	r1, [pc, #12]	; (d41cc <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41be:	4804      	ldr	r0, [pc, #16]	; (d41d0 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41c0:	f7ff ffb6 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
}
   d41c4:	b003      	add	sp, #12
   d41c6:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ca:	bf00      	nop
   d41cc:	000d974b 	.word	0x000d974b
   d41d0:	2003e40c 	.word	0x2003e40c

000d41d4 <_Z19onSolenoidReceived2PKhjRKN8particle13BlePeerDeviceEPv>:

void onSolenoidReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41d4:	b507      	push	{r0, r1, r2, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d41d6:	8803      	ldrh	r3, [r0, #0]
   d41d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 2 - Solenoid: %u ", twoByteValue);
   d41dc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d41e0:	4903      	ldr	r1, [pc, #12]	; (d41f0 <_Z19onSolenoidReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41e2:	4804      	ldr	r0, [pc, #16]	; (d41f4 <_Z19onSolenoidReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41e4:	f7ff ffa4 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
}
   d41e8:	b003      	add	sp, #12
   d41ea:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ee:	bf00      	nop
   d41f0:	000d9767 	.word	0x000d9767
   d41f4:	2003e40c 	.word	0x2003e40c

000d41f8 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
    
    Log.info("Sensor 2 - Current: %u Amps", twoByteValue);
}

void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41f8:	b510      	push	{r4, lr}
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(byteValue), sizeof(sentTime));

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
   d41fa:	7804      	ldrb	r4, [r0, #0]
    Log.info("Sensor 1 - Distance: %u cm", byteValue);
   d41fc:	4909      	ldr	r1, [pc, #36]	; (d4224 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2c>)
   d41fe:	480a      	ldr	r0, [pc, #40]	; (d4228 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>)
   d4200:	4622      	mov	r2, r4
   d4202:	f7ff ff95 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>

    //set 'moving' flag if it has changed by more than 1cm since last reading
    moving = (abs(byteValue - currentDistance) > 1);
   d4206:	4a09      	ldr	r2, [pc, #36]	; (d422c <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>)
   d4208:	4909      	ldr	r1, [pc, #36]	; (d4230 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d420a:	7813      	ldrb	r3, [r2, #0]
    
    currentDistance = byteValue;
   d420c:	7014      	strb	r4, [r2, #0]

    memcpy(&byteValue, &data[0], sizeof(uint8_t));
    Log.info("Sensor 1 - Distance: %u cm", byteValue);

    //set 'moving' flag if it has changed by more than 1cm since last reading
    moving = (abs(byteValue - currentDistance) > 1);
   d420e:	1ae3      	subs	r3, r4, r3
   d4210:	2b00      	cmp	r3, #0
   d4212:	bfb8      	it	lt
   d4214:	425b      	neglt	r3, r3
   d4216:	2b01      	cmp	r3, #1
   d4218:	bfd4      	ite	le
   d421a:	2300      	movle	r3, #0
   d421c:	2301      	movgt	r3, #1
   d421e:	700b      	strb	r3, [r1, #0]
    
    currentDistance = byteValue;
   d4220:	bd10      	pop	{r4, pc}
   d4222:	bf00      	nop
   d4224:	000d9780 	.word	0x000d9780
   d4228:	2003e40c 	.word	0x2003e40c
   d422c:	2003e370 	.word	0x2003e370
   d4230:	2003d8cc 	.word	0x2003d8cc

000d4234 <_Z20onRainsteamReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onRainsteamReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4234:	b508      	push	{r3, lr}

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(rainsteam), sizeof(sentTime));

    memcpy(&rainsteam, &data[0], sizeof(rainsteam));
    Log.info("Sensor 2 - Rainsteam: %d ", rainsteam);
   d4236:	4903      	ldr	r1, [pc, #12]	; (d4244 <_Z20onRainsteamReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d4238:	f990 2000 	ldrsb.w	r2, [r0]
   d423c:	4802      	ldr	r0, [pc, #8]	; (d4248 <_Z20onRainsteamReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d423e:	f7ff ff77 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d4242:	bd08      	pop	{r3, pc}
   d4244:	000d979b 	.word	0x000d979b
   d4248:	2003e40c 	.word	0x2003e40c

000d424c <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}

void onLightReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d424c:	b513      	push	{r0, r1, r4, lr}
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(twoByteValue), sizeof(sentTime));

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d424e:	8803      	ldrh	r3, [r0, #0]
   d4250:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Light: %u Lux", twoByteValue);
   d4254:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d4258:	4904      	ldr	r1, [pc, #16]	; (d426c <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d425a:	4805      	ldr	r0, [pc, #20]	; (d4270 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d425c:	4622      	mov	r2, r4
   d425e:	f7ff ff67 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>

    currentLight = twoByteValue;
   d4262:	4b04      	ldr	r3, [pc, #16]	; (d4274 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d4264:	801c      	strh	r4, [r3, #0]
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}
   d4266:	b002      	add	sp, #8
   d4268:	bd10      	pop	{r4, pc}
   d426a:	bf00      	nop
   d426c:	000d97b5 	.word	0x000d97b5
   d4270:	2003e40c 	.word	0x2003e40c
   d4274:	2003e3a0 	.word	0x2003e3a0

000d4278 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv>:


void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4278:	b513      	push	{r0, r1, r4, lr}
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d427a:	4602      	mov	r2, r0
    currentLight = twoByteValue;
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
}


void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d427c:	4604      	mov	r4, r0
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d427e:	f852 0f01 	ldr.w	r0, [r2, #1]!

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
   d4282:	7824      	ldrb	r4, [r4, #0]
void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
    uint8_t humanSeen;
    uint64_t sentTime;

    //read the time of sending, to calculate transmission delay
    memcpy(&sentTime, &data[0] + sizeof(uint8_t), sizeof(sentTime));
   d4284:	6851      	ldr	r1, [r2, #4]
   d4286:	466b      	mov	r3, sp
   d4288:	c303      	stmia	r3!, {r0, r1}

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
    Log.info("Sensor 2 - Human detector: %u", humanSeen);
   d428a:	4622      	mov	r2, r4
   d428c:	490a      	ldr	r1, [pc, #40]	; (d42b8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d428e:	480b      	ldr	r0, [pc, #44]	; (d42bc <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4290:	f7ff ff4e 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    if(humanSeen == 0x00){
   d4294:	b90c      	cbnz	r4, d429a <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
        Log.info("Sensor 2 - Human lost...");
   d4296:	490a      	ldr	r1, [pc, #40]	; (d42c0 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4298:	e002      	b.n	d42a0 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>
    }
    else if (humanSeen == 0x01){
   d429a:	2c01      	cmp	r4, #1
   d429c:	d104      	bne.n	d42a8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
        Log.info("Sensor 2 - Human detected!");
   d429e:	4909      	ldr	r1, [pc, #36]	; (d42c4 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d42a0:	4806      	ldr	r0, [pc, #24]	; (d42bc <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d42a2:	f7ff ff45 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d42a6:	e004      	b.n	d42b2 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
   d42a8:	4622      	mov	r2, r4
   d42aa:	4907      	ldr	r1, [pc, #28]	; (d42c8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d42ac:	4803      	ldr	r0, [pc, #12]	; (d42bc <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d42ae:	f7ff ff3f 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d42b2:	b002      	add	sp, #8
   d42b4:	bd10      	pop	{r4, pc}
   d42b6:	bf00      	nop
   d42b8:	000d97ce 	.word	0x000d97ce
   d42bc:	2003e40c 	.word	0x2003e40c
   d42c0:	000d97ec 	.word	0x000d97ec
   d42c4:	000d9805 	.word	0x000d9805
   d42c8:	000d9820 	.word	0x000d9820

000d42cc <setup>:
    Log.info("This message should not be appearing (from mqtt callback)");
}
//MQTT client used to publish MQTT messages
MQTT client("tcp://broker.mqttdashboard.com", 1883, callback);

void setup() {
   d42cc:	b507      	push	{r0, r1, r2, lr}

    bool connected = client.connect("elec4740g6publisher");
   d42ce:	4921      	ldr	r1, [pc, #132]	; (d4354 <setup+0x88>)
   d42d0:	4821      	ldr	r0, [pc, #132]	; (d4358 <setup+0x8c>)
   d42d2:	f000 fda7 	bl	d4e24 <_ZN4MQTT7connectEPKc>
    if(connected){
   d42d6:	b108      	cbz	r0, d42dc <setup+0x10>
        Log.info("MQTT connected successfully!");
   d42d8:	4920      	ldr	r1, [pc, #128]	; (d435c <setup+0x90>)
   d42da:	e000      	b.n	d42de <setup+0x12>
    }
    else{
        Log.info("MQTT connection failed");
   d42dc:	4920      	ldr	r1, [pc, #128]	; (d4360 <setup+0x94>)
   d42de:	4821      	ldr	r0, [pc, #132]	; (d4364 <setup+0x98>)
   d42e0:	f7ff ff26 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    }

    const uint8_t val = 0x01;
   d42e4:	a802      	add	r0, sp, #8
   d42e6:	2201      	movs	r2, #1
   d42e8:	f800 2d01 	strb.w	r2, [r0, #-1]!
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d42ec:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d42f0:	f000 ffd4 	bl	d529c <dct_write_app_data>
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning

    BLE.on();
   d42f4:	f001 ff52 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42f8:	f001 ff96 	bl	d6228 <_ZNK8particle14BleLocalDevice2onEv>
    
    
    //map functions to be called whenever new data is received for a characteristic
    temperatureSensorCharacteristic.onDataReceived(onTemperatureReceived1, NULL);
   d42fc:	2200      	movs	r2, #0
   d42fe:	491a      	ldr	r1, [pc, #104]	; (d4368 <setup+0x9c>)
   d4300:	481a      	ldr	r0, [pc, #104]	; (d436c <setup+0xa0>)
   d4302:	f001 fe7d 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humiditySensorCharacteristic.onDataReceived(onHumidityReceived, NULL);
   d4306:	2200      	movs	r2, #0
   d4308:	4919      	ldr	r1, [pc, #100]	; (d4370 <setup+0xa4>)
   d430a:	481a      	ldr	r0, [pc, #104]	; (d4374 <setup+0xa8>)
   d430c:	f001 fe78 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    lightSensorCharacteristic.onDataReceived(onDistanceReceived, NULL);
   d4310:	2200      	movs	r2, #0
   d4312:	4919      	ldr	r1, [pc, #100]	; (d4378 <setup+0xac>)
   d4314:	4819      	ldr	r0, [pc, #100]	; (d437c <setup+0xb0>)
   d4316:	f001 fe73 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    moistureSensorCharacteristic.onDataReceived(onCurrentReceived1, NULL);
   d431a:	2200      	movs	r2, #0
   d431c:	4918      	ldr	r1, [pc, #96]	; (d4380 <setup+0xb4>)
   d431e:	4819      	ldr	r0, [pc, #100]	; (d4384 <setup+0xb8>)
   d4320:	f001 fe6e 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

    rainsteamSensorCharacteristic.onDataReceived(onRainsteamReceived2, NULL);
   d4324:	2200      	movs	r2, #0
   d4326:	4918      	ldr	r1, [pc, #96]	; (d4388 <setup+0xbc>)
   d4328:	4818      	ldr	r0, [pc, #96]	; (d438c <setup+0xc0>)
   d432a:	f001 fe69 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    liquidSensorCharacteristic.onDataReceived(onLightReceived2, NULL);
   d432e:	2200      	movs	r2, #0
   d4330:	4917      	ldr	r1, [pc, #92]	; (d4390 <setup+0xc4>)
   d4332:	4818      	ldr	r0, [pc, #96]	; (d4394 <setup+0xc8>)
   d4334:	f001 fe64 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
   d4338:	2200      	movs	r2, #0
   d433a:	4917      	ldr	r1, [pc, #92]	; (d4398 <setup+0xcc>)
   d433c:	4817      	ldr	r0, [pc, #92]	; (d439c <setup+0xd0>)
   d433e:	f001 fe5f 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    solenoidVoltageCharacteristic.onDataReceived(onSolenoidReceived2, NULL);
   d4342:	2200      	movs	r2, #0
   d4344:	4916      	ldr	r1, [pc, #88]	; (d43a0 <setup+0xd4>)
   d4346:	4817      	ldr	r0, [pc, #92]	; (d43a4 <setup+0xd8>)
   d4348:	f001 fe5a 	bl	d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

}
   d434c:	b003      	add	sp, #12
   d434e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4352:	bf00      	nop
   d4354:	000d9868 	.word	0x000d9868
   d4358:	2003d8f8 	.word	0x2003d8f8
   d435c:	000d987c 	.word	0x000d987c
   d4360:	000d9899 	.word	0x000d9899
   d4364:	2003e40c 	.word	0x2003e40c
   d4368:	000d4175 	.word	0x000d4175
   d436c:	2003d970 	.word	0x2003d970
   d4370:	000d4199 	.word	0x000d4199
   d4374:	2003e3a4 	.word	0x2003e3a4
   d4378:	000d41f9 	.word	0x000d41f9
   d437c:	2003d8e4 	.word	0x2003d8e4
   d4380:	000d41b1 	.word	0x000d41b1
   d4384:	2003d978 	.word	0x2003d978
   d4388:	000d4235 	.word	0x000d4235
   d438c:	2003e374 	.word	0x2003e374
   d4390:	000d424d 	.word	0x000d424d
   d4394:	2003e3ac 	.word	0x2003e3ac
   d4398:	000d4279 	.word	0x000d4279
   d439c:	2003e368 	.word	0x2003e368
   d43a0:	000d41d5 	.word	0x000d41d5
   d43a4:	2003d968 	.word	0x2003d968

000d43a8 <loop>:

void loop() { 
   d43a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
   d43ac:	48ad      	ldr	r0, [pc, #692]	; (d4664 <loop+0x2bc>)
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
    solenoidVoltageCharacteristic.onDataReceived(onSolenoidReceived2, NULL);

}

void loop() { 
   d43ae:	b08e      	sub	sp, #56	; 0x38
    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
   d43b0:	f001 fe94 	bl	d60dc <_ZNK8particle13BlePeerDevice9connectedEv>
   d43b4:	2800      	cmp	r0, #0
   d43b6:	f040 80dc 	bne.w	d4572 <loop+0x1ca>
   d43ba:	48ab      	ldr	r0, [pc, #684]	; (d4668 <loop+0x2c0>)
   d43bc:	f001 fe8e 	bl	d60dc <_ZNK8particle13BlePeerDevice9connectedEv>
   d43c0:	4605      	mov	r5, r0
   d43c2:	2800      	cmp	r0, #0
   d43c4:	f040 80d5 	bne.w	d4572 <loop+0x1ca>

        }
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d43c8:	49a8      	ldr	r1, [pc, #672]	; (d466c <loop+0x2c4>)
   d43ca:	48a9      	ldr	r0, [pc, #676]	; (d4670 <loop+0x2c8>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d43cc:	4fa9      	ldr	r7, [pc, #676]	; (d4674 <loop+0x2cc>)

        }
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d43ce:	f7ff feaf 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d43d2:	f001 fee3 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43d6:	221e      	movs	r2, #30
   d43d8:	49a6      	ldr	r1, [pc, #664]	; (d4674 <loop+0x2cc>)
   d43da:	f001 ff35 	bl	d6248 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d43de:	4606      	mov	r6, r0
        for (int i = 0; i < count; i++) {
   d43e0:	42b5      	cmp	r5, r6
   d43e2:	f280 80be 	bge.w	d4562 <loop+0x1ba>
   d43e6:	2454      	movs	r4, #84	; 0x54
   d43e8:	436c      	muls	r4, r5
            BleUuid foundService;
   d43ea:	a804      	add	r0, sp, #16
   d43ec:	f001 faa6 	bl	d593c <_ZN8particle7BleUuidC1Ev>
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d43f0:	f104 0008 	add.w	r0, r4, #8
   d43f4:	2201      	movs	r2, #1
   d43f6:	a904      	add	r1, sp, #16
   d43f8:	4438      	add	r0, r7
   d43fa:	f001 fd05 	bl	d5e08 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>

            Log.info("Found a bluetooth device.");
   d43fe:	499e      	ldr	r1, [pc, #632]	; (d4678 <loop+0x2d0>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4400:	4680      	mov	r8, r0

            Log.info("Found a bluetooth device.");
   d4402:	489b      	ldr	r0, [pc, #620]	; (d4670 <loop+0x2c8>)
   d4404:	f7ff fe94 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d4408:	443c      	add	r4, r7

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d440a:	499c      	ldr	r1, [pc, #624]	; (d467c <loop+0x2d4>)
   d440c:	a809      	add	r0, sp, #36	; 0x24
   d440e:	f001 f900 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Address: " + scanResults[i].address.toString());
   d4412:	2200      	movs	r2, #0
   d4414:	4621      	mov	r1, r4
   d4416:	4668      	mov	r0, sp
   d4418:	f001 fa7f 	bl	d591a <_ZNK8particle10BleAddress8toStringEb>
   d441c:	4669      	mov	r1, sp
   d441e:	a809      	add	r0, sp, #36	; 0x24
   d4420:	f001 f94c 	bl	d56bc <_ZplRK15StringSumHelperRK6String>
   d4424:	6801      	ldr	r1, [r0, #0]
   d4426:	4892      	ldr	r0, [pc, #584]	; (d4670 <loop+0x2c8>)
   d4428:	f7ff fe82 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d442c:	4668      	mov	r0, sp
   d442e:	f001 f8a9 	bl	d5584 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4432:	a809      	add	r0, sp, #36	; 0x24
   d4434:	f001 f8a6 	bl	d5584 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4438:	4991      	ldr	r1, [pc, #580]	; (d4680 <loop+0x2d8>)
   d443a:	a809      	add	r0, sp, #36	; 0x24
   d443c:	f001 f8e9 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Found UUID: " + foundService.toString());
   d4440:	2200      	movs	r2, #0
   d4442:	a904      	add	r1, sp, #16
   d4444:	4668      	mov	r0, sp
   d4446:	f001 fc09 	bl	d5c5c <_ZNK8particle7BleUuid8toStringEb>
   d444a:	4669      	mov	r1, sp
   d444c:	a809      	add	r0, sp, #36	; 0x24
   d444e:	f001 f935 	bl	d56bc <_ZplRK15StringSumHelperRK6String>
   d4452:	6801      	ldr	r1, [r0, #0]
   d4454:	4886      	ldr	r0, [pc, #536]	; (d4670 <loop+0x2c8>)
   d4456:	f7ff fe6b 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d445a:	4668      	mov	r0, sp
   d445c:	f001 f892 	bl	d5584 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4460:	a809      	add	r0, sp, #36	; 0x24
   d4462:	f001 f88f 	bl	d5584 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4466:	4987      	ldr	r1, [pc, #540]	; (d4684 <loop+0x2dc>)
   d4468:	a809      	add	r0, sp, #36	; 0x24
   d446a:	f001 f8d2 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode1 UUID: " + sensorNode1ServiceUuid.toString());
   d446e:	2200      	movs	r2, #0
   d4470:	4985      	ldr	r1, [pc, #532]	; (d4688 <loop+0x2e0>)
   d4472:	4668      	mov	r0, sp
   d4474:	f001 fbf2 	bl	d5c5c <_ZNK8particle7BleUuid8toStringEb>
   d4478:	4669      	mov	r1, sp
   d447a:	a809      	add	r0, sp, #36	; 0x24
   d447c:	f001 f91e 	bl	d56bc <_ZplRK15StringSumHelperRK6String>
   d4480:	6801      	ldr	r1, [r0, #0]
   d4482:	487b      	ldr	r0, [pc, #492]	; (d4670 <loop+0x2c8>)
   d4484:	f7ff fe54 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d4488:	4668      	mov	r0, sp
   d448a:	f001 f87b 	bl	d5584 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d448e:	a809      	add	r0, sp, #36	; 0x24
   d4490:	f001 f878 	bl	d5584 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4494:	497d      	ldr	r1, [pc, #500]	; (d468c <loop+0x2e4>)
   d4496:	a809      	add	r0, sp, #36	; 0x24
   d4498:	f001 f8bb 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode2 UUID: " + sensorNode2ServiceUuid.toString());
   d449c:	2200      	movs	r2, #0
   d449e:	497c      	ldr	r1, [pc, #496]	; (d4690 <loop+0x2e8>)
   d44a0:	4668      	mov	r0, sp
   d44a2:	f001 fbdb 	bl	d5c5c <_ZNK8particle7BleUuid8toStringEb>
   d44a6:	4669      	mov	r1, sp
   d44a8:	a809      	add	r0, sp, #36	; 0x24
   d44aa:	f001 f907 	bl	d56bc <_ZplRK15StringSumHelperRK6String>
   d44ae:	6801      	ldr	r1, [r0, #0]
   d44b0:	486f      	ldr	r0, [pc, #444]	; (d4670 <loop+0x2c8>)
   d44b2:	f7ff fe3d 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d44b6:	4668      	mov	r0, sp
   d44b8:	f001 f864 	bl	d5584 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44bc:	a809      	add	r0, sp, #36	; 0x24
   d44be:	f001 f861 	bl	d5584 <_ZN6StringD1Ev>

            //Check if it matches UUID for sensor node 1
            if (len > 0 && foundService == sensorNode1ServiceUuid){
   d44c2:	f1b8 0f00 	cmp.w	r8, #0
   d44c6:	d04a      	beq.n	d455e <loop+0x1b6>
   d44c8:	496f      	ldr	r1, [pc, #444]	; (d4688 <loop+0x2e0>)
   d44ca:	a804      	add	r0, sp, #16
   d44cc:	f001 fad6 	bl	d5a7c <_ZNK8particle7BleUuideqERKS0_>
   d44d0:	2800      	cmp	r0, #0
   d44d2:	d078      	beq.n	d45c6 <loop+0x21e>
                Log.info("Found sensor node 1.");
   d44d4:	4866      	ldr	r0, [pc, #408]	; (d4670 <loop+0x2c8>)
   d44d6:	496f      	ldr	r1, [pc, #444]	; (d4694 <loop+0x2ec>)
   d44d8:	f7ff fe2a 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode1.connected() == false){
   d44dc:	4861      	ldr	r0, [pc, #388]	; (d4664 <loop+0x2bc>)
   d44de:	f001 fdfd 	bl	d60dc <_ZNK8particle13BlePeerDevice9connectedEv>
   d44e2:	2800      	cmp	r0, #0
   d44e4:	d168      	bne.n	d45b8 <loop+0x210>
                    sensorNode1 = BLE.connect(scanResults[i].address);
   d44e6:	f001 fe59 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44ea:	2301      	movs	r3, #1
   d44ec:	4622      	mov	r2, r4
   d44ee:	4601      	mov	r1, r0
   d44f0:	a809      	add	r0, sp, #36	; 0x24
   d44f2:	f002 fb67 	bl	d6bc4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d44f6:	a909      	add	r1, sp, #36	; 0x24
   d44f8:	485a      	ldr	r0, [pc, #360]	; (d4664 <loop+0x2bc>)
   d44fa:	f001 ffde 	bl	d64ba <_ZN8particle13BlePeerDeviceaSERKS0_>
   d44fe:	a809      	add	r0, sp, #36	; 0x24
   d4500:	f001 fefe 	bl	d6300 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode1.connected()){
   d4504:	4857      	ldr	r0, [pc, #348]	; (d4664 <loop+0x2bc>)
   d4506:	f001 fde9 	bl	d60dc <_ZNK8particle13BlePeerDevice9connectedEv>
   d450a:	2800      	cmp	r0, #0
   d450c:	d052      	beq.n	d45b4 <loop+0x20c>
                        Log.info("Successfully connected to sensor node 1!");
   d450e:	4962      	ldr	r1, [pc, #392]	; (d4698 <loop+0x2f0>)
   d4510:	4857      	ldr	r0, [pc, #348]	; (d4670 <loop+0x2c8>)
   d4512:	f7ff fe0d 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode1.getCharacteristicByUUID(temperatureSensorCharacteristic, "29fba3f5-4ce8-46bc-8d75-77806db22c31");
   d4516:	4961      	ldr	r1, [pc, #388]	; (d469c <loop+0x2f4>)
   d4518:	a809      	add	r0, sp, #36	; 0x24
   d451a:	f001 fb25 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d451e:	aa09      	add	r2, sp, #36	; 0x24
   d4520:	495f      	ldr	r1, [pc, #380]	; (d46a0 <loop+0x2f8>)
   d4522:	4850      	ldr	r0, [pc, #320]	; (d4664 <loop+0x2bc>)
   d4524:	f001 ffa5 	bl	d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
   d4528:	495e      	ldr	r1, [pc, #376]	; (d46a4 <loop+0x2fc>)
   d452a:	a809      	add	r0, sp, #36	; 0x24
   d452c:	f001 fb1c 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d4530:	aa09      	add	r2, sp, #36	; 0x24
   d4532:	495d      	ldr	r1, [pc, #372]	; (d46a8 <loop+0x300>)
   d4534:	484b      	ldr	r0, [pc, #300]	; (d4664 <loop+0x2bc>)
   d4536:	f001 ff9c 	bl	d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
   d453a:	495c      	ldr	r1, [pc, #368]	; (d46ac <loop+0x304>)
   d453c:	a809      	add	r0, sp, #36	; 0x24
   d453e:	f001 fb13 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d4542:	aa09      	add	r2, sp, #36	; 0x24
   d4544:	495a      	ldr	r1, [pc, #360]	; (d46b0 <loop+0x308>)
   d4546:	4847      	ldr	r0, [pc, #284]	; (d4664 <loop+0x2bc>)
   d4548:	f001 ff93 	bl	d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(moistureSensorCharacteristic, "ea5248a4-43cc-4198-a4aa-79200a750835");
   d454c:	4959      	ldr	r1, [pc, #356]	; (d46b4 <loop+0x30c>)
   d454e:	a809      	add	r0, sp, #36	; 0x24
   d4550:	f001 fb0a 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d4554:	4958      	ldr	r1, [pc, #352]	; (d46b8 <loop+0x310>)
   d4556:	4843      	ldr	r0, [pc, #268]	; (d4664 <loop+0x2bc>)
   d4558:	aa09      	add	r2, sp, #36	; 0x24
                        Log.info("Successfully connected to sensor node 2!");
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(rainsteamSensorCharacteristic, "bc7f18d9-2c43-408e-be25-62f40645987c");
                        sensorNode2.getCharacteristicByUUID(liquidSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d455a:	f001 ff8a 	bl	d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
        for (int i = 0; i < count; i++) {
   d455e:	3501      	adds	r5, #1
   d4560:	e73e      	b.n	d43e0 <loop+0x38>
                    Log.info("Sensor node 2 already connected.");
                }
            }
        }

        if (count > 0) {
   d4562:	2e00      	cmp	r6, #0
   d4564:	dd7b      	ble.n	d465e <loop+0x2b6>
            Log.info("%d devices found", count);
   d4566:	4632      	mov	r2, r6
   d4568:	4954      	ldr	r1, [pc, #336]	; (d46bc <loop+0x314>)
   d456a:	4841      	ldr	r0, [pc, #260]	; (d4670 <loop+0x2c8>)
   d456c:	f7ff fde0 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
        }
    }
}
   d4570:	e075      	b.n	d465e <loop+0x2b6>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4572:	f000 fd31 	bl	d4fd8 <HAL_Timer_Get_Milli_Seconds>

void loop() { 
    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d4576:	4b52      	ldr	r3, [pc, #328]	; (d46c0 <loop+0x318>)

        //TEST
        client.publish("elec4740g6/data","hello world");
   d4578:	4a52      	ldr	r2, [pc, #328]	; (d46c4 <loop+0x31c>)

void loop() { 
    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d457a:	6018      	str	r0, [r3, #0]

        //TEST
        client.publish("elec4740g6/data","hello world");
   d457c:	4952      	ldr	r1, [pc, #328]	; (d46c8 <loop+0x320>)
   d457e:	4853      	ldr	r0, [pc, #332]	; (d46cc <loop+0x324>)
   d4580:	f000 fcd0 	bl	d4f24 <_ZN4MQTT7publishEPKcS1_>
        
        //Sensor logic for watering
        if(isWatering == false)
   d4584:	4a52      	ldr	r2, [pc, #328]	; (d46d0 <loop+0x328>)
   d4586:	7813      	ldrb	r3, [r2, #0]
   d4588:	4614      	mov	r4, r2
   d458a:	b933      	cbnz	r3, d459a <loop+0x1f2>
        {
            solenoidVoltageCharacteristic.setValue(0);
   d458c:	a90e      	add	r1, sp, #56	; 0x38
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d458e:	2204      	movs	r2, #4
   d4590:	f841 3d14 	str.w	r3, [r1, #-20]!
   d4594:	484f      	ldr	r0, [pc, #316]	; (d46d4 <loop+0x32c>)
   d4596:	f001 fc91 	bl	d5ebc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
        }
        if(isWatering == true)
   d459a:	7823      	ldrb	r3, [r4, #0]
   d459c:	2b00      	cmp	r3, #0
   d459e:	d05e      	beq.n	d465e <loop+0x2b6>
        {
            solenoidVoltageCharacteristic.setValue(1);
   d45a0:	a90e      	add	r1, sp, #56	; 0x38
   d45a2:	2301      	movs	r3, #1
   d45a4:	f841 3d14 	str.w	r3, [r1, #-20]!
   d45a8:	2204      	movs	r2, #4
   d45aa:	2300      	movs	r3, #0
   d45ac:	4849      	ldr	r0, [pc, #292]	; (d46d4 <loop+0x32c>)
   d45ae:	f001 fc85 	bl	d5ebc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d45b2:	e054      	b.n	d465e <loop+0x2b6>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
                        sensorNode1.getCharacteristicByUUID(moistureSensorCharacteristic, "ea5248a4-43cc-4198-a4aa-79200a750835");
                    }
                    else{
                        Log.info("Failed to connect to sensor node 1.");
   d45b4:	4948      	ldr	r1, [pc, #288]	; (d46d8 <loop+0x330>)
   d45b6:	e002      	b.n	d45be <loop+0x216>
                    }
                }
                else{
                    Log.info("Sensor node 1 already connected.");
   d45b8:	4948      	ldr	r1, [pc, #288]	; (d46dc <loop+0x334>)
   d45ba:	e000      	b.n	d45be <loop+0x216>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");

                    }
                    else{
                        Log.info("Failed to connect to sensor node 2.");
   d45bc:	4948      	ldr	r1, [pc, #288]	; (d46e0 <loop+0x338>)
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d45be:	482c      	ldr	r0, [pc, #176]	; (d4670 <loop+0x2c8>)
   d45c0:	f7ff fdb6 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
   d45c4:	e7cb      	b.n	d455e <loop+0x1b6>
                    Log.info("Sensor node 1 already connected.");
                }
            }

            //Check if it matches UUID for sensor node 2
            else if (len > 0 && foundService == sensorNode2ServiceUuid){
   d45c6:	4932      	ldr	r1, [pc, #200]	; (d4690 <loop+0x2e8>)
   d45c8:	a804      	add	r0, sp, #16
   d45ca:	f001 fa57 	bl	d5a7c <_ZNK8particle7BleUuideqERKS0_>
   d45ce:	2800      	cmp	r0, #0
   d45d0:	d0c5      	beq.n	d455e <loop+0x1b6>
                Log.info("Found sensor node 2.");
   d45d2:	4827      	ldr	r0, [pc, #156]	; (d4670 <loop+0x2c8>)
   d45d4:	4943      	ldr	r1, [pc, #268]	; (d46e4 <loop+0x33c>)
   d45d6:	f7ff fdab 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode2.connected() == false){
   d45da:	4823      	ldr	r0, [pc, #140]	; (d4668 <loop+0x2c0>)
   d45dc:	f001 fd7e 	bl	d60dc <_ZNK8particle13BlePeerDevice9connectedEv>
   d45e0:	2800      	cmp	r0, #0
   d45e2:	d13a      	bne.n	d465a <loop+0x2b2>
                    sensorNode2 = BLE.connect(scanResults[i].address);
   d45e4:	f001 fdda 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45e8:	2301      	movs	r3, #1
   d45ea:	4622      	mov	r2, r4
   d45ec:	4601      	mov	r1, r0
   d45ee:	a809      	add	r0, sp, #36	; 0x24
   d45f0:	f002 fae8 	bl	d6bc4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d45f4:	a909      	add	r1, sp, #36	; 0x24
   d45f6:	481c      	ldr	r0, [pc, #112]	; (d4668 <loop+0x2c0>)
   d45f8:	f001 ff5f 	bl	d64ba <_ZN8particle13BlePeerDeviceaSERKS0_>
   d45fc:	a809      	add	r0, sp, #36	; 0x24
   d45fe:	f001 fe7f 	bl	d6300 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode2.connected()){
   d4602:	4819      	ldr	r0, [pc, #100]	; (d4668 <loop+0x2c0>)
   d4604:	f001 fd6a 	bl	d60dc <_ZNK8particle13BlePeerDevice9connectedEv>
   d4608:	2800      	cmp	r0, #0
   d460a:	d0d7      	beq.n	d45bc <loop+0x214>
                        Log.info("Successfully connected to sensor node 2!");
   d460c:	4936      	ldr	r1, [pc, #216]	; (d46e8 <loop+0x340>)
   d460e:	4818      	ldr	r0, [pc, #96]	; (d4670 <loop+0x2c8>)
   d4610:	f7ff fd8e 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(rainsteamSensorCharacteristic, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d4614:	4935      	ldr	r1, [pc, #212]	; (d46ec <loop+0x344>)
   d4616:	a809      	add	r0, sp, #36	; 0x24
   d4618:	f001 faa6 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d461c:	aa09      	add	r2, sp, #36	; 0x24
   d461e:	4934      	ldr	r1, [pc, #208]	; (d46f0 <loop+0x348>)
   d4620:	4811      	ldr	r0, [pc, #68]	; (d4668 <loop+0x2c0>)
   d4622:	f001 ff26 	bl	d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(liquidSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
   d4626:	4933      	ldr	r1, [pc, #204]	; (d46f4 <loop+0x34c>)
   d4628:	a809      	add	r0, sp, #36	; 0x24
   d462a:	f001 fa9d 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d462e:	aa09      	add	r2, sp, #36	; 0x24
   d4630:	4931      	ldr	r1, [pc, #196]	; (d46f8 <loop+0x350>)
   d4632:	480d      	ldr	r0, [pc, #52]	; (d4668 <loop+0x2c0>)
   d4634:	f001 ff1d 	bl	d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
   d4638:	4930      	ldr	r1, [pc, #192]	; (d46fc <loop+0x354>)
   d463a:	a809      	add	r0, sp, #36	; 0x24
   d463c:	f001 fa94 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d4640:	aa09      	add	r2, sp, #36	; 0x24
   d4642:	492f      	ldr	r1, [pc, #188]	; (d4700 <loop+0x358>)
   d4644:	4808      	ldr	r0, [pc, #32]	; (d4668 <loop+0x2c0>)
   d4646:	f001 ff14 	bl	d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d464a:	492e      	ldr	r1, [pc, #184]	; (d4704 <loop+0x35c>)
   d464c:	a809      	add	r0, sp, #36	; 0x24
   d464e:	f001 fa8b 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
   d4652:	aa09      	add	r2, sp, #36	; 0x24
   d4654:	491f      	ldr	r1, [pc, #124]	; (d46d4 <loop+0x32c>)
   d4656:	4804      	ldr	r0, [pc, #16]	; (d4668 <loop+0x2c0>)
   d4658:	e77f      	b.n	d455a <loop+0x1b2>
                    else{
                        Log.info("Failed to connect to sensor node 2.");
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d465a:	492b      	ldr	r1, [pc, #172]	; (d4708 <loop+0x360>)
   d465c:	e7af      	b.n	d45be <loop+0x216>

        if (count > 0) {
            Log.info("%d devices found", count);
        }
    }
}
   d465e:	b00e      	add	sp, #56	; 0x38
   d4660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4664:	2003d980 	.word	0x2003d980
   d4668:	2003d988 	.word	0x2003d988
   d466c:	000d9b1c 	.word	0x000d9b1c
   d4670:	2003e40c 	.word	0x2003e40c
   d4674:	2003d990 	.word	0x2003d990
   d4678:	000d98b0 	.word	0x000d98b0
   d467c:	000d98ca 	.word	0x000d98ca
   d4680:	000d98d4 	.word	0x000d98d4
   d4684:	000d98e1 	.word	0x000d98e1
   d4688:	2003d950 	.word	0x2003d950
   d468c:	000d98f4 	.word	0x000d98f4
   d4690:	2003d8d0 	.word	0x2003d8d0
   d4694:	000d9b49 	.word	0x000d9b49
   d4698:	000d9907 	.word	0x000d9907
   d469c:	000d9930 	.word	0x000d9930
   d46a0:	2003d970 	.word	0x2003d970
   d46a4:	000d9955 	.word	0x000d9955
   d46a8:	2003e3a4 	.word	0x2003e3a4
   d46ac:	000d997a 	.word	0x000d997a
   d46b0:	2003d8e4 	.word	0x2003d8e4
   d46b4:	000d999f 	.word	0x000d999f
   d46b8:	2003d978 	.word	0x2003d978
   d46bc:	000d9b0b 	.word	0x000d9b0b
   d46c0:	2003d964 	.word	0x2003d964
   d46c4:	000d9b2d 	.word	0x000d9b2d
   d46c8:	000d9b39 	.word	0x000d9b39
   d46cc:	2003d8f8 	.word	0x2003d8f8
   d46d0:	2003e3b4 	.word	0x2003e3b4
   d46d4:	2003d968 	.word	0x2003d968
   d46d8:	000d99c4 	.word	0x000d99c4
   d46dc:	000d99e8 	.word	0x000d99e8
   d46e0:	000d9ac6 	.word	0x000d9ac6
   d46e4:	000d9b5e 	.word	0x000d9b5e
   d46e8:	000d9a09 	.word	0x000d9a09
   d46ec:	000d9a32 	.word	0x000d9a32
   d46f0:	2003e374 	.word	0x2003e374
   d46f4:	000d9a57 	.word	0x000d9a57
   d46f8:	2003e3ac 	.word	0x2003e3ac
   d46fc:	000d9a7c 	.word	0x000d9a7c
   d4700:	2003e368 	.word	0x2003e368
   d4704:	000d9aa1 	.word	0x000d9aa1
   d4708:	000d9aea 	.word	0x000d9aea

000d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d470c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d470e:	6804      	ldr	r4, [r0, #0]
   d4710:	6843      	ldr	r3, [r0, #4]
   d4712:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4714:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4716:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d471a:	42a6      	cmp	r6, r4
   d471c:	d004      	beq.n	d4728 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d471e:	4620      	mov	r0, r4
   d4720:	f000 ff30 	bl	d5584 <_ZN6StringD1Ev>
   d4724:	3414      	adds	r4, #20
   d4726:	e7f8      	b.n	d471a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4728:	6828      	ldr	r0, [r5, #0]
   d472a:	f000 fea3 	bl	d5474 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d472e:	4628      	mov	r0, r5
   d4730:	bd70      	pop	{r4, r5, r6, pc}

000d4732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4732:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4736:	4606      	mov	r6, r0
   d4738:	460c      	mov	r4, r1
   d473a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d473c:	d916      	bls.n	d476c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d473e:	4290      	cmp	r0, r2
   d4740:	d215      	bcs.n	d476e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4742:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4746:	1a6c      	subs	r4, r5, r1
   d4748:	f1a1 0714 	sub.w	r7, r1, #20
   d474c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d474e:	42af      	cmp	r7, r5
   d4750:	d01c      	beq.n	d478c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4752:	b12c      	cbz	r4, d4760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4754:	4629      	mov	r1, r5
   d4756:	4620      	mov	r0, r4
   d4758:	f000 ff04 	bl	d5564 <_ZN6StringC1EOS_>
   d475c:	7c2b      	ldrb	r3, [r5, #16]
   d475e:	7423      	strb	r3, [r4, #16]
   d4760:	4628      	mov	r0, r5
   d4762:	f000 ff0f 	bl	d5584 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4766:	3d14      	subs	r5, #20
   d4768:	3c14      	subs	r4, #20
   d476a:	e7f0      	b.n	d474e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d476c:	d00e      	beq.n	d478c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d476e:	42ac      	cmp	r4, r5
   d4770:	d00c      	beq.n	d478c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4772:	b12e      	cbz	r6, d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4774:	4621      	mov	r1, r4
   d4776:	4630      	mov	r0, r6
   d4778:	f000 fef4 	bl	d5564 <_ZN6StringC1EOS_>
   d477c:	7c23      	ldrb	r3, [r4, #16]
   d477e:	7433      	strb	r3, [r6, #16]
   d4780:	4620      	mov	r0, r4
   d4782:	f000 feff 	bl	d5584 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4786:	3414      	adds	r4, #20
   d4788:	3614      	adds	r6, #20
   d478a:	e7f0      	b.n	d476e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d478c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d478e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4792:	2300      	movs	r3, #0
   d4794:	6003      	str	r3, [r0, #0]
   d4796:	6043      	str	r3, [r0, #4]
   d4798:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d479a:	684e      	ldr	r6, [r1, #4]
   d479c:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d479e:	4604      	mov	r4, r0
   d47a0:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d47a2:	dd24      	ble.n	d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d47a4:	f04f 0814 	mov.w	r8, #20
   d47a8:	fb08 f006 	mul.w	r0, r8, r6
   d47ac:	f000 fe5a 	bl	d5464 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d47b0:	4605      	mov	r5, r0
   d47b2:	b1e0      	cbz	r0, d47ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d47b4:	e894 0006 	ldmia.w	r4, {r1, r2}
   d47b8:	fb08 1202 	mla	r2, r8, r2, r1
   d47bc:	f7ff ffb9 	bl	d4732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d47c0:	6820      	ldr	r0, [r4, #0]
   d47c2:	f000 fe57 	bl	d5474 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d47c6:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d47c8:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d47ca:	683e      	ldr	r6, [r7, #0]
   d47cc:	687b      	ldr	r3, [r7, #4]
   d47ce:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d47d2:	4546      	cmp	r6, r8
   d47d4:	d009      	beq.n	d47ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d47d6:	b12d      	cbz	r5, d47e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d47d8:	4631      	mov	r1, r6
   d47da:	4628      	mov	r0, r5
   d47dc:	f000 ff3b 	bl	d5656 <_ZN6StringC1ERKS_>
   d47e0:	7c33      	ldrb	r3, [r6, #16]
   d47e2:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d47e4:	3614      	adds	r6, #20
   d47e6:	3514      	adds	r5, #20
   d47e8:	e7f3      	b.n	d47d2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d47ea:	687b      	ldr	r3, [r7, #4]
   d47ec:	6063      	str	r3, [r4, #4]
    }
}
   d47ee:	4620      	mov	r0, r4
   d47f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d47f4 <_GLOBAL__sub_I_SystemMode>:
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d47f4:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d47f6:	4d64      	ldr	r5, [pc, #400]	; (d4988 <_GLOBAL__sub_I_SystemMode+0x194>)
   d47f8:	b08c      	sub	sp, #48	; 0x30

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d47fa:	f000 fbcd 	bl	d4f98 <HAL_Pin_Map>
   d47fe:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4800:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4804:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4806:	602c      	str	r4, [r5, #0]
   d4808:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d480a:	71ac      	strb	r4, [r5, #6]
   d480c:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d480e:	2001      	movs	r0, #1
   d4810:	f000 fdb4 	bl	d537c <set_system_mode>
 * Date: 07/05/2020
 */

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(AUTOMATIC);
   d4814:	4a5d      	ldr	r2, [pc, #372]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d4816:	495e      	ldr	r1, [pc, #376]	; (d4990 <_GLOBAL__sub_I_SystemMode+0x19c>)
   d4818:	4628      	mov	r0, r5
   d481a:	f004 fc64 	bl	d90e6 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d481e:	9400      	str	r4, [sp, #0]
   d4820:	9401      	str	r4, [sp, #4]
   d4822:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4824:	f003 fd84 	bl	d8330 <_Z16_fetch_usbserialv>
   d4828:	4669      	mov	r1, sp
   d482a:	4606      	mov	r6, r0
   d482c:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d482e:	4d59      	ldr	r5, [pc, #356]	; (d4994 <_GLOBAL__sub_I_SystemMode+0x1a0>)
   d4830:	f7ff ffad 	bl	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4834:	a903      	add	r1, sp, #12
   d4836:	a806      	add	r0, sp, #24
   d4838:	f7ff ffa9 	bl	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d483c:	4b56      	ldr	r3, [pc, #344]	; (d4998 <_GLOBAL__sub_I_SystemMode+0x1a4>)
   d483e:	602b      	str	r3, [r5, #0]
   d4840:	a906      	add	r1, sp, #24
   d4842:	a809      	add	r0, sp, #36	; 0x24
   d4844:	f7ff ffa3 	bl	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4848:	aa09      	add	r2, sp, #36	; 0x24
   d484a:	2101      	movs	r1, #1
   d484c:	1d28      	adds	r0, r5, #4
   d484e:	f003 f89e 	bl	d798e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4852:	a809      	add	r0, sp, #36	; 0x24
   d4854:	f7ff ff5a 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4858:	a806      	add	r0, sp, #24
   d485a:	f7ff ff57 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d485e:	4b4f      	ldr	r3, [pc, #316]	; (d499c <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d4860:	602b      	str	r3, [r5, #0]
   d4862:	622e      	str	r6, [r5, #32]
   d4864:	a803      	add	r0, sp, #12
   d4866:	f7ff ff51 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d486a:	4b4d      	ldr	r3, [pc, #308]	; (d49a0 <_GLOBAL__sub_I_SystemMode+0x1ac>)
   d486c:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d486e:	f003 fd5f 	bl	d8330 <_Z16_fetch_usbserialv>
   d4872:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4876:	f003 fd4b 	bl	d8310 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d487a:	f002 fd31 	bl	d72e0 <_ZN5spark10LogManager8instanceEv>
   d487e:	4629      	mov	r1, r5
   d4880:	f003 f818 	bl	d78b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4884:	4668      	mov	r0, sp
   d4886:	f7ff ff41 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d488a:	4a40      	ldr	r2, [pc, #256]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d488c:	4945      	ldr	r1, [pc, #276]	; (d49a4 <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d488e:	4628      	mov	r0, r5
   d4890:	f004 fc29 	bl	d90e6 <__aeabi_atexit>
//true if the difference between the last two distance readings was more than 1cm
bool moving = false;

/* Bluetooth variables */
//bluetooth devices we want to connect to and their service ids
BlePeerDevice sensorNode1;
   d4894:	4844      	ldr	r0, [pc, #272]	; (d49a8 <_GLOBAL__sub_I_SystemMode+0x1b4>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4896:	4d45      	ldr	r5, [pc, #276]	; (d49ac <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4898:	f001 fd8c 	bl	d63b4 <_ZN8particle13BlePeerDeviceC1Ev>
   d489c:	4a3b      	ldr	r2, [pc, #236]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d489e:	4944      	ldr	r1, [pc, #272]	; (d49b0 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d48a0:	4841      	ldr	r0, [pc, #260]	; (d49a8 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d48a2:	f004 fc20 	bl	d90e6 <__aeabi_atexit>
BlePeerDevice sensorNode2;
   d48a6:	4843      	ldr	r0, [pc, #268]	; (d49b4 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d48a8:	f001 fd84 	bl	d63b4 <_ZN8particle13BlePeerDeviceC1Ev>
   d48ac:	4a37      	ldr	r2, [pc, #220]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d48ae:	4940      	ldr	r1, [pc, #256]	; (d49b0 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d48b0:	4840      	ldr	r0, [pc, #256]	; (d49b4 <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d48b2:	f004 fc18 	bl	d90e6 <__aeabi_atexit>
BleUuid sensorNode1ServiceUuid("754ebf5e-ce31-4300-9fd5-a8fb4ee4a811");
   d48b6:	4940      	ldr	r1, [pc, #256]	; (d49b8 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d48b8:	4840      	ldr	r0, [pc, #256]	; (d49bc <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d48ba:	f001 f955 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>
BleUuid sensorNode2ServiceUuid("97728ad9-a998-4629-b855-ee2658ca01f7");
   d48be:	4940      	ldr	r1, [pc, #256]	; (d49c0 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d48c0:	4840      	ldr	r0, [pc, #256]	; (d49c4 <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d48c2:	f001 f951 	bl	d5b68 <_ZN8particle7BleUuidC1EPKc>

//characteristics we want to track
//for sensor node 1
BleCharacteristic temperatureSensorCharacteristic;
   d48c6:	4840      	ldr	r0, [pc, #256]	; (d49c8 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d48c8:	f002 f9e0 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d48cc:	4a2f      	ldr	r2, [pc, #188]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d48ce:	493f      	ldr	r1, [pc, #252]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d48d0:	483d      	ldr	r0, [pc, #244]	; (d49c8 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d48d2:	f004 fc08 	bl	d90e6 <__aeabi_atexit>
BleCharacteristic humiditySensorCharacteristic;
   d48d6:	483e      	ldr	r0, [pc, #248]	; (d49d0 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d48d8:	f002 f9d8 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d48dc:	4a2b      	ldr	r2, [pc, #172]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d48de:	493b      	ldr	r1, [pc, #236]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d48e0:	483b      	ldr	r0, [pc, #236]	; (d49d0 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d48e2:	f004 fc00 	bl	d90e6 <__aeabi_atexit>
BleCharacteristic lightSensorCharacteristic;
   d48e6:	483b      	ldr	r0, [pc, #236]	; (d49d4 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d48e8:	f002 f9d0 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d48ec:	4a27      	ldr	r2, [pc, #156]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d48ee:	4937      	ldr	r1, [pc, #220]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d48f0:	4838      	ldr	r0, [pc, #224]	; (d49d4 <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d48f2:	f004 fbf8 	bl	d90e6 <__aeabi_atexit>
BleCharacteristic moistureSensorCharacteristic;
   d48f6:	4838      	ldr	r0, [pc, #224]	; (d49d8 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d48f8:	f002 f9c8 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d48fc:	4a23      	ldr	r2, [pc, #140]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d48fe:	4933      	ldr	r1, [pc, #204]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4900:	4835      	ldr	r0, [pc, #212]	; (d49d8 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4902:	f004 fbf0 	bl	d90e6 <__aeabi_atexit>

//for sensor node 2
BleCharacteristic rainsteamSensorCharacteristic;
   d4906:	4835      	ldr	r0, [pc, #212]	; (d49dc <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4908:	f002 f9c0 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d490c:	4a1f      	ldr	r2, [pc, #124]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d490e:	492f      	ldr	r1, [pc, #188]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4910:	4832      	ldr	r0, [pc, #200]	; (d49dc <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4912:	f004 fbe8 	bl	d90e6 <__aeabi_atexit>
BleCharacteristic liquidSensorCharacteristic;
   d4916:	4832      	ldr	r0, [pc, #200]	; (d49e0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4918:	f002 f9b8 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d491c:	4a1b      	ldr	r2, [pc, #108]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d491e:	492b      	ldr	r1, [pc, #172]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4920:	482f      	ldr	r0, [pc, #188]	; (d49e0 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4922:	f004 fbe0 	bl	d90e6 <__aeabi_atexit>
BleCharacteristic humanDetectorCharacteristic;
   d4926:	482f      	ldr	r0, [pc, #188]	; (d49e4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4928:	f002 f9b0 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d492c:	4a17      	ldr	r2, [pc, #92]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d492e:	4927      	ldr	r1, [pc, #156]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4930:	482c      	ldr	r0, [pc, #176]	; (d49e4 <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4932:	f004 fbd8 	bl	d90e6 <__aeabi_atexit>
BleCharacteristic solenoidVoltageCharacteristic;
   d4936:	482c      	ldr	r0, [pc, #176]	; (d49e8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4938:	f002 f9a8 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
   d493c:	4a13      	ldr	r2, [pc, #76]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d493e:	4923      	ldr	r1, [pc, #140]	; (d49cc <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4940:	4829      	ldr	r0, [pc, #164]	; (d49e8 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4942:	f004 fbd0 	bl	d90e6 <__aeabi_atexit>
bool isWatering = false;    //Is the solenoid active or not?


// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d4946:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d494a:	1928      	adds	r0, r5, r4
   d494c:	f000 ff76 	bl	d583c <_ZN8particle10BleAddressC1Ev>
   d4950:	f104 0008 	add.w	r0, r4, #8
   d4954:	4428      	add	r0, r5
   d4956:	f001 fa00 	bl	d5d5a <_ZN8particle18BleAdvertisingDataC1Ev>
   d495a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d495e:	4428      	add	r0, r5
   d4960:	3454      	adds	r4, #84	; 0x54
   d4962:	f001 f9fa 	bl	d5d5a <_ZN8particle18BleAdvertisingDataC1Ev>
   d4966:	42b4      	cmp	r4, r6
   d4968:	d1ef      	bne.n	d494a <_GLOBAL__sub_I_SystemMode+0x156>
//apparently needed even though no callback used since we don't subscribe to any topics here.
void callback(char* topic, byte* payload, unsigned int length) {
    Log.info("This message should not be appearing (from mqtt callback)");
}
//MQTT client used to publish MQTT messages
MQTT client("tcp://broker.mqttdashboard.com", 1883, callback);
   d496a:	4b20      	ldr	r3, [pc, #128]	; (d49ec <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d496c:	4920      	ldr	r1, [pc, #128]	; (d49f0 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d496e:	4821      	ldr	r0, [pc, #132]	; (d49f4 <_GLOBAL__sub_I_SystemMode+0x200>)
   d4970:	f240 725b 	movw	r2, #1883	; 0x75b
   d4974:	f000 f88a 	bl	d4a8c <_ZN4MQTTC1EPctPFvS0_PhjE>
   d4978:	4a04      	ldr	r2, [pc, #16]	; (d498c <_GLOBAL__sub_I_SystemMode+0x198>)
   d497a:	491f      	ldr	r1, [pc, #124]	; (d49f8 <_GLOBAL__sub_I_SystemMode+0x204>)
   d497c:	481d      	ldr	r0, [pc, #116]	; (d49f4 <_GLOBAL__sub_I_SystemMode+0x200>)
   d497e:	f004 fbb2 	bl	d90e6 <__aeabi_atexit>
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
    // Log.info("Transmission delay: %llu seconds", calculateTransmissionDelay(sentTime));
   d4982:	b00c      	add	sp, #48	; 0x30
   d4984:	bd70      	pop	{r4, r5, r6, pc}
   d4986:	bf00      	nop
   d4988:	2003d8ec 	.word	0x2003d8ec
   d498c:	2003d8c8 	.word	0x2003d8c8
   d4990:	000d40d7 	.word	0x000d40d7
   d4994:	2003e37c 	.word	0x2003e37c
   d4998:	000d96a4 	.word	0x000d96a4
   d499c:	000d9f54 	.word	0x000d9f54
   d49a0:	000d96bc 	.word	0x000d96bc
   d49a4:	000d40e9 	.word	0x000d40e9
   d49a8:	2003d980 	.word	0x2003d980
   d49ac:	2003d990 	.word	0x2003d990
   d49b0:	000d6301 	.word	0x000d6301
   d49b4:	2003d988 	.word	0x2003d988
   d49b8:	000d9b8f 	.word	0x000d9b8f
   d49bc:	2003d950 	.word	0x2003d950
   d49c0:	000d9bb4 	.word	0x000d9bb4
   d49c4:	2003d8d0 	.word	0x2003d8d0
   d49c8:	2003d970 	.word	0x2003d970
   d49cc:	000d62f3 	.word	0x000d62f3
   d49d0:	2003e3a4 	.word	0x2003e3a4
   d49d4:	2003d8e4 	.word	0x2003d8e4
   d49d8:	2003d978 	.word	0x2003d978
   d49dc:	2003e374 	.word	0x2003e374
   d49e0:	2003e3ac 	.word	0x2003e3ac
   d49e4:	2003e368 	.word	0x2003e368
   d49e8:	2003d968 	.word	0x2003d968
   d49ec:	000d4161 	.word	0x000d4161
   d49f0:	000d9bd9 	.word	0x000d9bd9
   d49f4:	2003d8f8 	.word	0x2003d8f8
   d49f8:	000d4f4b 	.word	0x000d4f4b

000d49fc <_GLOBAL__sub_I__ZN13LiquidCrystalC2Ehhhhhhhhhhh>:
   d49fc:	f000 bacc 	b.w	d4f98 <HAL_Pin_Map>

000d4a00 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4a00:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4a02:	6984      	ldr	r4, [r0, #24]
   d4a04:	4b0a      	ldr	r3, [pc, #40]	; (d4a30 <_ZN9TCPClientD1Ev+0x30>)
   d4a06:	6003      	str	r3, [r0, #0]
   d4a08:	4605      	mov	r5, r0
   d4a0a:	b17c      	cbz	r4, d4a2c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4a0c:	6863      	ldr	r3, [r4, #4]
   d4a0e:	3b01      	subs	r3, #1
   d4a10:	6063      	str	r3, [r4, #4]
   d4a12:	b95b      	cbnz	r3, d4a2c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4a14:	6823      	ldr	r3, [r4, #0]
   d4a16:	4620      	mov	r0, r4
   d4a18:	689b      	ldr	r3, [r3, #8]
   d4a1a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4a1c:	68a3      	ldr	r3, [r4, #8]
   d4a1e:	3b01      	subs	r3, #1
   d4a20:	60a3      	str	r3, [r4, #8]
   d4a22:	b91b      	cbnz	r3, d4a2c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4a24:	6823      	ldr	r3, [r4, #0]
   d4a26:	4620      	mov	r0, r4
   d4a28:	68db      	ldr	r3, [r3, #12]
   d4a2a:	4798      	blx	r3
   d4a2c:	4628      	mov	r0, r5
   d4a2e:	bd38      	pop	{r3, r4, r5, pc}
   d4a30:	000da08c 	.word	0x000da08c

000d4a34 <_ZN9TCPClientD0Ev>:
   d4a34:	b510      	push	{r4, lr}
   d4a36:	4604      	mov	r4, r0
   d4a38:	f7ff ffe2 	bl	d4a00 <_ZN9TCPClientD1Ev>
   d4a3c:	4620      	mov	r0, r4
   d4a3e:	211c      	movs	r1, #28
   d4a40:	f004 fb5e 	bl	d9100 <_ZdlPvj>
   d4a44:	4620      	mov	r0, r4
   d4a46:	bd10      	pop	{r4, pc}

000d4a48 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4a48:	b538      	push	{r3, r4, r5, lr}
   d4a4a:	461d      	mov	r5, r3
    this->callback = callback;
   d4a4c:	9b05      	ldr	r3, [sp, #20]
   d4a4e:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d4a50:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d4a52:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d4a54:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d4a56:	b102      	cbz	r2, d4a5a <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d4a58:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d4a5a:	b119      	cbz	r1, d4a64 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d4a5c:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4a60:	f000 fe04 	bl	d566c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4a64:	9b04      	ldr	r3, [sp, #16]
   d4a66:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4a68:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d4a6a:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d4a6c:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4a70:	2bff      	cmp	r3, #255	; 0xff
   d4a72:	bfb8      	it	lt
   d4a74:	23ff      	movlt	r3, #255	; 0xff
   d4a76:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d4a7a:	b108      	cbz	r0, d4a80 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d4a7c:	f7ff fb11 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4a80:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4a84:	f7ff fb09 	bl	d409a <_Znaj>
   d4a88:	61e0      	str	r0, [r4, #28]
   d4a8a:	bd38      	pop	{r3, r4, r5, pc}

000d4a8c <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4a8c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4a90:	4604      	mov	r4, r0
   d4a92:	2500      	movs	r5, #0
   d4a94:	4617      	mov	r7, r2
   d4a96:	4698      	mov	r8, r3
   d4a98:	460e      	mov	r6, r1
   d4a9a:	f004 f85f 	bl	d8b5c <_ZN9TCPClientC1Ev>
   d4a9e:	61e5      	str	r5, [r4, #28]
   d4aa0:	490a      	ldr	r1, [pc, #40]	; (d4acc <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
   d4aa2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4aa6:	f000 fdb4 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4aaa:	23ff      	movs	r3, #255	; 0xff
   d4aac:	9302      	str	r3, [sp, #8]
   d4aae:	230f      	movs	r3, #15
   d4ab0:	9300      	str	r3, [sp, #0]
   d4ab2:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
   d4ab4:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
   d4ab6:	f8cd 8004 	str.w	r8, [sp, #4]
   d4aba:	463b      	mov	r3, r7
   d4abc:	462a      	mov	r2, r5
   d4abe:	4631      	mov	r1, r6
   d4ac0:	f7ff ffc2 	bl	d4a48 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d4ac4:	4620      	mov	r0, r4
   d4ac6:	b004      	add	sp, #16
   d4ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4acc:	000d9f14 	.word	0x000d9f14

000d4ad0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d4ad0:	b510      	push	{r4, lr}
   d4ad2:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d4ad4:	4620      	mov	r0, r4
   d4ad6:	f003 ffa5 	bl	d8a24 <_ZN9TCPClient9availableEv>
   d4ada:	2800      	cmp	r0, #0
   d4adc:	d0fa      	beq.n	d4ad4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d4ade:	4620      	mov	r0, r4
   d4ae0:	f003 fe49 	bl	d8776 <_ZN9TCPClient4readEv>
}
   d4ae4:	b2c0      	uxtb	r0, r0
   d4ae6:	bd10      	pop	{r4, pc}

000d4ae8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4aec:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4aee:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4af0:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4af2:	f7ff ffed 	bl	d4ad0 <_ZN4MQTT8readByteEv>
   d4af6:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4af8:	69eb      	ldr	r3, [r5, #28]
   d4afa:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d4afe:	f04f 0901 	mov.w	r9, #1
   d4b02:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4b06:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d4b08:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4b0a:	4628      	mov	r0, r5
   d4b0c:	f7ff ffe0 	bl	d4ad0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d4b10:	69eb      	ldr	r3, [r5, #28]
   d4b12:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4b14:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4b18:	fb13 f309 	smulbb	r3, r3, r9
   d4b1c:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4b1e:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4b20:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4b22:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4b24:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d4b26:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d4b2a:	d501      	bpl.n	d4b30 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d4b2c:	4626      	mov	r6, r4
   d4b2e:	e7ec      	b.n	d4b0a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4b30:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4b32:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d4b36:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d4b3a:	d113      	bne.n	d4b64 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4b3c:	4628      	mov	r0, r5
   d4b3e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4b42:	f7ff ffc5 	bl	d4ad0 <_ZN4MQTT8readByteEv>
   d4b46:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d4b4a:	4628      	mov	r0, r5
   d4b4c:	1cf4      	adds	r4, r6, #3
   d4b4e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d4b52:	3602      	adds	r6, #2
   d4b54:	f7ff ffbc 	bl	d4ad0 <_ZN4MQTT8readByteEv>
   d4b58:	b2b6      	uxth	r6, r6
   d4b5a:	b2a4      	uxth	r4, r4
   d4b5c:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4b60:	2302      	movs	r3, #2
   d4b62:	e000      	b.n	d4b66 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d4b64:	2300      	movs	r3, #0
   d4b66:	1b1b      	subs	r3, r3, r4
   d4b68:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4b6a:	19a3      	adds	r3, r4, r6
   d4b6c:	b29b      	uxth	r3, r3
   d4b6e:	429f      	cmp	r7, r3
   d4b70:	d90b      	bls.n	d4b8a <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4b72:	4628      	mov	r0, r5
   d4b74:	f7ff ffac 	bl	d4ad0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4b78:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d4b7c:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d4b7e:	bf84      	itt	hi
   d4b80:	69eb      	ldrhi	r3, [r5, #28]
   d4b82:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d4b84:	3401      	adds	r4, #1
   d4b86:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4b88:	e7ef      	b.n	d4b6a <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d4b8a:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d4b8e:	42a0      	cmp	r0, r4
   d4b90:	bf2c      	ite	cs
   d4b92:	4620      	movcs	r0, r4
   d4b94:	2000      	movcc	r0, #0
   d4b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d4b9a <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d4b9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4b9c:	4607      	mov	r7, r0
   d4b9e:	468e      	mov	lr, r1
   d4ba0:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d4ba2:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d4ba4:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4ba6:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d4ba8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4bac:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d4bae:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d4bb0:	bf18      	it	ne
   d4bb2:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d4bb6:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d4bb8:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d4bbc:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d4bbe:	2d00      	cmp	r5, #0
   d4bc0:	d1f1      	bne.n	d4ba6 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d4bc2:	f1c4 0304 	rsb	r3, r4, #4
   d4bc6:	18d1      	adds	r1, r2, r3
   d4bc8:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4bcc:	42a5      	cmp	r5, r4
   d4bce:	da06      	bge.n	d4bde <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d4bd0:	1b2b      	subs	r3, r5, r4
   d4bd2:	a801      	add	r0, sp, #4
   d4bd4:	4413      	add	r3, r2
   d4bd6:	5c28      	ldrb	r0, [r5, r0]
   d4bd8:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d4bda:	3501      	adds	r5, #1
   d4bdc:	e7f6      	b.n	d4bcc <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4bde:	1c72      	adds	r2, r6, #1
   d4be0:	4422      	add	r2, r4
   d4be2:	4638      	mov	r0, r7
   d4be4:	f003 fd1d 	bl	d8622 <_ZN9TCPClient5writeEPKhj>
   d4be8:	4605      	mov	r5, r0
   d4bea:	f000 f9f5 	bl	d4fd8 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4bee:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d4bf0:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4bf2:	4434      	add	r4, r6
   d4bf4:	b2a8      	uxth	r0, r5
}
   d4bf6:	1a23      	subs	r3, r4, r0
   d4bf8:	4258      	negs	r0, r3
   d4bfa:	4158      	adcs	r0, r3
   d4bfc:	b003      	add	sp, #12
   d4bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c00 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4c00:	b510      	push	{r4, lr}
    buffer[0] = MQTTDISCONNECT;
   d4c02:	69c3      	ldr	r3, [r0, #28]
   d4c04:	22e0      	movs	r2, #224	; 0xe0
   d4c06:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4c08:	69c3      	ldr	r3, [r0, #28]
   d4c0a:	2200      	movs	r2, #0
   d4c0c:	705a      	strb	r2, [r3, #1]
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4c0e:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
    buffer[1] = 0;
    _client.write(buffer,2);
   d4c10:	2202      	movs	r2, #2
   d4c12:	69c1      	ldr	r1, [r0, #28]
   d4c14:	f003 fd05 	bl	d8622 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4c18:	4620      	mov	r0, r4
   d4c1a:	f003 feeb 	bl	d89f4 <_ZN9TCPClient4stopEv>
   d4c1e:	f000 f9db 	bl	d4fd8 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d4c22:	6260      	str	r0, [r4, #36]	; 0x24
   d4c24:	62a0      	str	r0, [r4, #40]	; 0x28
   d4c26:	bd10      	pop	{r4, pc}

000d4c28 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4c28:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d4c2a:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d4c2c:	b29b      	uxth	r3, r3
   d4c2e:	460d      	mov	r5, r1
   d4c30:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d4c32:	f815 6b01 	ldrb.w	r6, [r5], #1
   d4c36:	b2a4      	uxth	r4, r4
   d4c38:	b13e      	cbz	r6, d4c4a <_ZN4MQTT11writeStringEPKcPht+0x22>
   d4c3a:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d4c3e:	429f      	cmp	r7, r3
   d4c40:	d903      	bls.n	d4c4a <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d4c42:	1c5c      	adds	r4, r3, #1
   d4c44:	54d6      	strb	r6, [r2, r3]
   d4c46:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d4c48:	e7f2      	b.n	d4c30 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d4c4a:	1b19      	subs	r1, r3, r4
   d4c4c:	440a      	add	r2, r1
   d4c4e:	1221      	asrs	r1, r4, #8
   d4c50:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d4c54:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d4c58:	4618      	mov	r0, r3
   d4c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4c5c <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d4c5c:	b538      	push	{r3, r4, r5, lr}
   d4c5e:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d4c60:	f003 fcf5 	bl	d864e <_ZN9TCPClient9connectedEv>
   d4c64:	2800      	cmp	r0, #0
   d4c66:	bf14      	ite	ne
   d4c68:	2401      	movne	r4, #1
   d4c6a:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d4c6c:	d102      	bne.n	d4c74 <_ZN4MQTT11isConnectedEv+0x18>
   d4c6e:	4628      	mov	r0, r5
   d4c70:	f003 fec0 	bl	d89f4 <_ZN9TCPClient4stopEv>
    return rc;
}
   d4c74:	4620      	mov	r0, r4
   d4c76:	bd38      	pop	{r3, r4, r5, pc}

000d4c78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d4c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4c7c:	b087      	sub	sp, #28
   d4c7e:	4604      	mov	r4, r0
   d4c80:	4689      	mov	r9, r1
   d4c82:	4617      	mov	r7, r2
   d4c84:	461e      	mov	r6, r3
   d4c86:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d4c8a:	f7ff ffe7 	bl	d4c5c <_ZN4MQTT11isConnectedEv>
   d4c8e:	4605      	mov	r5, r0
   d4c90:	2800      	cmp	r0, #0
   d4c92:	f040 80bd 	bne.w	d4e10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d4c96:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d4c98:	b939      	cbnz	r1, d4caa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d4c9a:	4603      	mov	r3, r0
   d4c9c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4ca0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4ca2:	4620      	mov	r0, r4
   d4ca4:	f003 fdaa 	bl	d87fc <_ZN9TCPClient7connectEPKctm>
   d4ca8:	e009      	b.n	d4cbe <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d4caa:	4668      	mov	r0, sp
   d4cac:	f003 fad0 	bl	d8250 <_ZN9IPAddressC1EPKh>
   d4cb0:	462b      	mov	r3, r5
   d4cb2:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4cb6:	4669      	mov	r1, sp
   d4cb8:	4620      	mov	r0, r4
   d4cba:	f003 fe21 	bl	d8900 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d4cbe:	2800      	cmp	r0, #0
   d4cc0:	f000 80a2 	beq.w	d4e08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d4cc4:	2301      	movs	r3, #1
   d4cc6:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d4cc8:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d4ccc:	2b04      	cmp	r3, #4
   d4cce:	d115      	bne.n	d4cfc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4cd0:	4b52      	ldr	r3, [pc, #328]	; (d4e1c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d4cd2:	6818      	ldr	r0, [r3, #0]
   d4cd4:	889a      	ldrh	r2, [r3, #4]
   d4cd6:	f8ad 2004 	strh.w	r2, [sp, #4]
   d4cda:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4cdc:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4cde:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4ce0:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4ce2:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4ce6:	1d53      	adds	r3, r2, #5
   d4ce8:	f8c2 0005 	str.w	r0, [r2, #5]
   d4cec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d4cf0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d4cf4:	719a      	strb	r2, [r3, #6]
   d4cf6:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d4cf8:	230c      	movs	r3, #12
   d4cfa:	e012      	b.n	d4d22 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4cfc:	4b48      	ldr	r3, [pc, #288]	; (d4e20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4cfe:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4d02:	6818      	ldr	r0, [r3, #0]
   d4d04:	6859      	ldr	r1, [r3, #4]
   d4d06:	7a1b      	ldrb	r3, [r3, #8]
   d4d08:	466a      	mov	r2, sp
   d4d0a:	c203      	stmia	r2!, {r0, r1}
   d4d0c:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4d0e:	466b      	mov	r3, sp
   d4d10:	cb03      	ldmia	r3!, {r0, r1}
   d4d12:	f8cc 0005 	str.w	r0, [ip, #5]
   d4d16:	f8cc 1009 	str.w	r1, [ip, #9]
   d4d1a:	7813      	ldrb	r3, [r2, #0]
   d4d1c:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4d20:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d4d22:	f1b8 0f00 	cmp.w	r8, #0
   d4d26:	d00a      	beq.n	d4d3e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4d28:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d4d2c:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d4d30:	0152      	lsls	r2, r2, #5
   d4d32:	f042 0206 	orr.w	r2, r2, #6
   d4d36:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d4d3a:	b2d2      	uxtb	r2, r2
   d4d3c:	e000      	b.n	d4d40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d4d3e:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d4d40:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d4d44:	b909      	cbnz	r1, d4d4a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d4d46:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d4d4a:	b12f      	cbz	r7, d4d58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d4d4c:	b916      	cbnz	r6, d4d54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d4d4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d4d52:	e001      	b.n	d4d58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d4d54:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d4d58:	69e1      	ldr	r1, [r4, #28]
   d4d5a:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d4d5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4d5e:	69e1      	ldr	r1, [r4, #28]
   d4d60:	1c58      	adds	r0, r3, #1
   d4d62:	1212      	asrs	r2, r2, #8
   d4d64:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4d66:	1c9a      	adds	r2, r3, #2
   d4d68:	69e1      	ldr	r1, [r4, #28]
   d4d6a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4d6c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d4d6e:	3303      	adds	r3, #3
   d4d70:	69e2      	ldr	r2, [r4, #28]
   d4d72:	4649      	mov	r1, r9
   d4d74:	4620      	mov	r0, r4
   d4d76:	f7ff ff57 	bl	d4c28 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d4d7a:	f1b8 0f00 	cmp.w	r8, #0
   d4d7e:	d00b      	beq.n	d4d98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d4d80:	4603      	mov	r3, r0
   d4d82:	69e2      	ldr	r2, [r4, #28]
   d4d84:	4641      	mov	r1, r8
   d4d86:	4620      	mov	r0, r4
   d4d88:	f7ff ff4e 	bl	d4c28 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d4d8c:	69e2      	ldr	r2, [r4, #28]
   d4d8e:	9911      	ldr	r1, [sp, #68]	; 0x44
   d4d90:	4603      	mov	r3, r0
   d4d92:	4620      	mov	r0, r4
   d4d94:	f7ff ff48 	bl	d4c28 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d4d98:	b167      	cbz	r7, d4db4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d4d9a:	4603      	mov	r3, r0
   d4d9c:	69e2      	ldr	r2, [r4, #28]
   d4d9e:	4639      	mov	r1, r7
   d4da0:	4620      	mov	r0, r4
   d4da2:	f7ff ff41 	bl	d4c28 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d4da6:	b12e      	cbz	r6, d4db4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d4da8:	4603      	mov	r3, r0
   d4daa:	69e2      	ldr	r2, [r4, #28]
   d4dac:	4631      	mov	r1, r6
   d4dae:	4620      	mov	r0, r4
   d4db0:	f7ff ff3a 	bl	d4c28 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d4db4:	1f43      	subs	r3, r0, #5
   d4db6:	b29b      	uxth	r3, r3
   d4db8:	69e2      	ldr	r2, [r4, #28]
   d4dba:	2110      	movs	r1, #16
   d4dbc:	4620      	mov	r0, r4
   d4dbe:	f7ff feec 	bl	d4b9a <_ZN4MQTT5writeEhPht>
   d4dc2:	f000 f909 	bl	d4fd8 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4dc6:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d4dca:	6260      	str	r0, [r4, #36]	; 0x24
   d4dcc:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d4dce:	4620      	mov	r0, r4
   d4dd0:	f003 fe28 	bl	d8a24 <_ZN9TCPClient9availableEv>
   d4dd4:	b940      	cbnz	r0, d4de8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d4dd6:	f000 f8ff 	bl	d4fd8 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d4dda:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d4ddc:	1ac0      	subs	r0, r0, r3
   d4dde:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4de0:	4373      	muls	r3, r6
   d4de2:	4298      	cmp	r0, r3
   d4de4:	d9f3      	bls.n	d4dce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d4de6:	e00f      	b.n	d4e08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d4de8:	4669      	mov	r1, sp
   d4dea:	4620      	mov	r0, r4
   d4dec:	f7ff fe7c 	bl	d4ae8 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d4df0:	2804      	cmp	r0, #4
   d4df2:	d109      	bne.n	d4e08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d4df4:	69e3      	ldr	r3, [r4, #28]
   d4df6:	78de      	ldrb	r6, [r3, #3]
   d4df8:	b936      	cbnz	r6, d4e08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d4dfa:	f000 f8ed 	bl	d4fd8 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d4dfe:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d4e00:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4e02:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d4e06:	e004      	b.n	d4e12 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d4e08:	4620      	mov	r0, r4
   d4e0a:	f003 fdf3 	bl	d89f4 <_ZN9TCPClient4stopEv>
   d4e0e:	e000      	b.n	d4e12 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d4e10:	2500      	movs	r5, #0
}
   d4e12:	4628      	mov	r0, r5
   d4e14:	b007      	add	sp, #28
   d4e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4e1a:	bf00      	nop
   d4e1c:	000d9bf8 	.word	0x000d9bf8
   d4e20:	000d9bff 	.word	0x000d9bff

000d4e24 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d4e24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d4e26:	2304      	movs	r3, #4
   d4e28:	9305      	str	r3, [sp, #20]
   d4e2a:	2301      	movs	r3, #1
   d4e2c:	9304      	str	r3, [sp, #16]
   d4e2e:	2300      	movs	r3, #0
   d4e30:	9303      	str	r3, [sp, #12]
   d4e32:	9302      	str	r3, [sp, #8]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	9300      	str	r3, [sp, #0]
   d4e38:	461a      	mov	r2, r3
   d4e3a:	f7ff ff1d 	bl	d4c78 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4e3e:	b007      	add	sp, #28
   d4e40:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e44 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4e44:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e48:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d4e4a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d4e4e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4e52:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d4e56:	4604      	mov	r4, r0
   d4e58:	468b      	mov	fp, r1
   d4e5a:	4691      	mov	r9, r2
   d4e5c:	469a      	mov	sl, r3
    if (isConnected()) {
   d4e5e:	f7ff fefd 	bl	d4c5c <_ZN4MQTT11isConnectedEv>
   d4e62:	2800      	cmp	r0, #0
   d4e64:	d04c      	beq.n	d4f00 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d4e66:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d4e6a:	69e0      	ldr	r0, [r4, #28]
   d4e6c:	2100      	movs	r1, #0
   d4e6e:	f004 fae4 	bl	d943a <memset>

        length = writeString(topic, buffer, length);
   d4e72:	2305      	movs	r3, #5
   d4e74:	69e2      	ldr	r2, [r4, #28]
   d4e76:	4659      	mov	r1, fp
   d4e78:	4620      	mov	r0, r4
   d4e7a:	f7ff fed5 	bl	d4c28 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d4e7e:	1e6b      	subs	r3, r5, #1
   d4e80:	2b01      	cmp	r3, #1
   d4e82:	d812      	bhi.n	d4eaa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d4e84:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4e86:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d4e88:	3301      	adds	r3, #1
   d4e8a:	b29b      	uxth	r3, r3
   d4e8c:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4e8e:	121b      	asrs	r3, r3, #8
   d4e90:	5413      	strb	r3, [r2, r0]
   d4e92:	1c41      	adds	r1, r0, #1
   d4e94:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d4e96:	69e3      	ldr	r3, [r4, #28]
   d4e98:	8c22      	ldrh	r2, [r4, #32]
   d4e9a:	545a      	strb	r2, [r3, r1]
   d4e9c:	3002      	adds	r0, #2
   d4e9e:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4ea0:	b11e      	cbz	r6, d4eaa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d4ea2:	8c23      	ldrh	r3, [r4, #32]
   d4ea4:	1c5a      	adds	r2, r3, #1
   d4ea6:	8422      	strh	r2, [r4, #32]
   d4ea8:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4eaa:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4eac:	b291      	uxth	r1, r2
   d4eae:	1883      	adds	r3, r0, r2
   d4eb0:	458a      	cmp	sl, r1
   d4eb2:	b29b      	uxth	r3, r3
   d4eb4:	d90a      	bls.n	d4ecc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d4eb6:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d4eba:	429e      	cmp	r6, r3
   d4ebc:	f102 0201 	add.w	r2, r2, #1
   d4ec0:	d904      	bls.n	d4ecc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d4ec2:	f819 6001 	ldrb.w	r6, [r9, r1]
   d4ec6:	69e1      	ldr	r1, [r4, #28]
   d4ec8:	54ce      	strb	r6, [r1, r3]
   d4eca:	e7ef      	b.n	d4eac <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d4ecc:	f1b8 0f00 	cmp.w	r8, #0
   d4ed0:	bf0c      	ite	eq
   d4ed2:	2130      	moveq	r1, #48	; 0x30
   d4ed4:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d4ed6:	b10f      	cbz	r7, d4edc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d4ed8:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d4edc:	2d02      	cmp	r5, #2
   d4ede:	d102      	bne.n	d4ee6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d4ee0:	f041 0104 	orr.w	r1, r1, #4
   d4ee4:	e003      	b.n	d4eee <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d4ee6:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4ee8:	bf08      	it	eq
   d4eea:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4eee:	3b05      	subs	r3, #5
   d4ef0:	69e2      	ldr	r2, [r4, #28]
   d4ef2:	b29b      	uxth	r3, r3
   d4ef4:	4620      	mov	r0, r4
    }
    return false;
}
   d4ef6:	b001      	add	sp, #4
   d4ef8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d4efc:	f7ff be4d 	b.w	d4b9a <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d4f00:	b001      	add	sp, #4
   d4f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d4f06 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4f06:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4f08:	9c08      	ldr	r4, [sp, #32]
   d4f0a:	9403      	str	r4, [sp, #12]
   d4f0c:	2400      	movs	r4, #0
   d4f0e:	9402      	str	r4, [sp, #8]
   d4f10:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4f14:	9401      	str	r4, [sp, #4]
   d4f16:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4f1a:	9400      	str	r4, [sp, #0]
   d4f1c:	f7ff ff92 	bl	d4e44 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4f20:	b004      	add	sp, #16
   d4f22:	bd10      	pop	{r4, pc}

000d4f24 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4f24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4f26:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4f28:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d4f2a:	460e      	mov	r6, r1
   d4f2c:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4f2e:	f004 fadf 	bl	d94f0 <strlen>
   d4f32:	2300      	movs	r3, #0
   d4f34:	9302      	str	r3, [sp, #8]
   d4f36:	9301      	str	r3, [sp, #4]
   d4f38:	9300      	str	r3, [sp, #0]
   d4f3a:	4622      	mov	r2, r4
   d4f3c:	4603      	mov	r3, r0
   d4f3e:	4631      	mov	r1, r6
   d4f40:	4628      	mov	r0, r5
   d4f42:	f7ff ffe0 	bl	d4f06 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4f46:	b004      	add	sp, #16
   d4f48:	bd70      	pop	{r4, r5, r6, pc}

000d4f4a <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4f4a:	b510      	push	{r4, lr}
   d4f4c:	4604      	mov	r4, r0
    if (isConnected()) {
   d4f4e:	f7ff fe85 	bl	d4c5c <_ZN4MQTT11isConnectedEv>
   d4f52:	b110      	cbz	r0, d4f5a <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d4f54:	4620      	mov	r0, r4
   d4f56:	f7ff fe53 	bl	d4c00 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
   d4f5a:	69e0      	ldr	r0, [r4, #28]
   d4f5c:	b108      	cbz	r0, d4f62 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d4f5e:	f7ff f8a0 	bl	d40a2 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
   d4f62:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4f66:	f000 fb0d 	bl	d5584 <_ZN6StringD1Ev>
   d4f6a:	4620      	mov	r0, r4
   d4f6c:	f7ff fd48 	bl	d4a00 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
   d4f70:	4620      	mov	r0, r4
   d4f72:	bd10      	pop	{r4, pc}

000d4f74 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4f74:	f000 b810 	b.w	d4f98 <HAL_Pin_Map>

000d4f78 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f78:	b508      	push	{r3, lr}
   d4f7a:	4b02      	ldr	r3, [pc, #8]	; (d4f84 <netdb_freeaddrinfo+0xc>)
   d4f7c:	681b      	ldr	r3, [r3, #0]
   d4f7e:	689b      	ldr	r3, [r3, #8]
   d4f80:	9301      	str	r3, [sp, #4]
   d4f82:	bd08      	pop	{r3, pc}
   d4f84:	00030268 	.word	0x00030268

000d4f88 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f88:	b508      	push	{r3, lr}
   d4f8a:	4b02      	ldr	r3, [pc, #8]	; (d4f94 <netdb_getaddrinfo+0xc>)
   d4f8c:	681b      	ldr	r3, [r3, #0]
   d4f8e:	68db      	ldr	r3, [r3, #12]
   d4f90:	9301      	str	r3, [sp, #4]
   d4f92:	bd08      	pop	{r3, pc}
   d4f94:	00030268 	.word	0x00030268

000d4f98 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4f98:	b508      	push	{r3, lr}
   d4f9a:	4b02      	ldr	r3, [pc, #8]	; (d4fa4 <HAL_Pin_Map+0xc>)
   d4f9c:	681b      	ldr	r3, [r3, #0]
   d4f9e:	681b      	ldr	r3, [r3, #0]
   d4fa0:	9301      	str	r3, [sp, #4]
   d4fa2:	bd08      	pop	{r3, pc}
   d4fa4:	0003022c 	.word	0x0003022c

000d4fa8 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b02      	ldr	r3, [pc, #8]	; (d4fb4 <if_index_to_name+0xc>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	695b      	ldr	r3, [r3, #20]
   d4fb0:	9301      	str	r3, [sp, #4]
   d4fb2:	bd08      	pop	{r3, pc}
   d4fb4:	0003026c 	.word	0x0003026c

000d4fb8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4fb8:	b508      	push	{r3, lr}
   d4fba:	4b02      	ldr	r3, [pc, #8]	; (d4fc4 <HAL_RNG_GetRandomNumber+0xc>)
   d4fbc:	681b      	ldr	r3, [r3, #0]
   d4fbe:	685b      	ldr	r3, [r3, #4]
   d4fc0:	9301      	str	r3, [sp, #4]
   d4fc2:	bd08      	pop	{r3, pc}
   d4fc4:	00030218 	.word	0x00030218

000d4fc8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4fc8:	b508      	push	{r3, lr}
   d4fca:	4b02      	ldr	r3, [pc, #8]	; (d4fd4 <HAL_Delay_Microseconds+0xc>)
   d4fcc:	681b      	ldr	r3, [r3, #0]
   d4fce:	68db      	ldr	r3, [r3, #12]
   d4fd0:	9301      	str	r3, [sp, #4]
   d4fd2:	bd08      	pop	{r3, pc}
   d4fd4:	00030218 	.word	0x00030218

000d4fd8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4fd8:	b508      	push	{r3, lr}
   d4fda:	4b02      	ldr	r3, [pc, #8]	; (d4fe4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4fdc:	681b      	ldr	r3, [r3, #0]
   d4fde:	695b      	ldr	r3, [r3, #20]
   d4fe0:	9301      	str	r3, [sp, #4]
   d4fe2:	bd08      	pop	{r3, pc}
   d4fe4:	00030218 	.word	0x00030218

000d4fe8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	4b02      	ldr	r3, [pc, #8]	; (d4ff4 <hal_ble_stack_init+0xc>)
   d4fec:	681b      	ldr	r3, [r3, #0]
   d4fee:	689b      	ldr	r3, [r3, #8]
   d4ff0:	9301      	str	r3, [sp, #4]
   d4ff2:	bd08      	pop	{r3, pc}
   d4ff4:	00030278 	.word	0x00030278

000d4ff8 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4ff8:	b508      	push	{r3, lr}
   d4ffa:	4b02      	ldr	r3, [pc, #8]	; (d5004 <hal_ble_gap_start_scan+0xc>)
   d4ffc:	681b      	ldr	r3, [r3, #0]
   d4ffe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d5000:	9301      	str	r3, [sp, #4]
   d5002:	bd08      	pop	{r3, pc}
   d5004:	00030278 	.word	0x00030278

000d5008 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d5008:	b508      	push	{r3, lr}
   d500a:	4b03      	ldr	r3, [pc, #12]	; (d5018 <hal_ble_gap_stop_scan+0x10>)
   d500c:	681b      	ldr	r3, [r3, #0]
   d500e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d5012:	9301      	str	r3, [sp, #4]
   d5014:	bd08      	pop	{r3, pc}
   d5016:	0000      	.short	0x0000
   d5018:	00030278 	.word	0x00030278

000d501c <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b03      	ldr	r3, [pc, #12]	; (d502c <hal_ble_gap_disconnect+0x10>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5026:	9301      	str	r3, [sp, #4]
   d5028:	bd08      	pop	{r3, pc}
   d502a:	0000      	.short	0x0000
   d502c:	00030278 	.word	0x00030278

000d5030 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5030:	b508      	push	{r3, lr}
   d5032:	4b03      	ldr	r3, [pc, #12]	; (d5040 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5034:	681b      	ldr	r3, [r3, #0]
   d5036:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d503a:	9301      	str	r3, [sp, #4]
   d503c:	bd08      	pop	{r3, pc}
   d503e:	0000      	.short	0x0000
   d5040:	00030278 	.word	0x00030278

000d5044 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b03      	ldr	r3, [pc, #12]	; (d5054 <hal_ble_gatt_client_discover_all_services+0x10>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d504e:	9301      	str	r3, [sp, #4]
   d5050:	bd08      	pop	{r3, pc}
   d5052:	0000      	.short	0x0000
   d5054:	00030278 	.word	0x00030278

000d5058 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d5058:	b508      	push	{r3, lr}
   d505a:	4b03      	ldr	r3, [pc, #12]	; (d5068 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d505c:	681b      	ldr	r3, [r3, #0]
   d505e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d5062:	9301      	str	r3, [sp, #4]
   d5064:	bd08      	pop	{r3, pc}
   d5066:	0000      	.short	0x0000
   d5068:	00030278 	.word	0x00030278

000d506c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b03      	ldr	r3, [pc, #12]	; (d507c <hal_ble_gatt_client_write_with_response+0x10>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5076:	9301      	str	r3, [sp, #4]
   d5078:	bd08      	pop	{r3, pc}
   d507a:	0000      	.short	0x0000
   d507c:	00030278 	.word	0x00030278

000d5080 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5080:	b508      	push	{r3, lr}
   d5082:	4b03      	ldr	r3, [pc, #12]	; (d5090 <hal_ble_gatt_client_write_without_response+0x10>)
   d5084:	681b      	ldr	r3, [r3, #0]
   d5086:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d508a:	9301      	str	r3, [sp, #4]
   d508c:	bd08      	pop	{r3, pc}
   d508e:	0000      	.short	0x0000
   d5090:	00030278 	.word	0x00030278

000d5094 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b03      	ldr	r3, [pc, #12]	; (d50a4 <hal_ble_gatt_client_read+0x10>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d509e:	9301      	str	r3, [sp, #4]
   d50a0:	bd08      	pop	{r3, pc}
   d50a2:	0000      	.short	0x0000
   d50a4:	00030278 	.word	0x00030278

000d50a8 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d50a8:	b508      	push	{r3, lr}
   d50aa:	4b03      	ldr	r3, [pc, #12]	; (d50b8 <hal_ble_gap_connect+0x10>)
   d50ac:	681b      	ldr	r3, [r3, #0]
   d50ae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d50b2:	9301      	str	r3, [sp, #4]
   d50b4:	bd08      	pop	{r3, pc}
   d50b6:	0000      	.short	0x0000
   d50b8:	00030278 	.word	0x00030278

000d50bc <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b03      	ldr	r3, [pc, #12]	; (d50cc <hal_ble_set_callback_on_periph_link_events+0x10>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d50c6:	9301      	str	r3, [sp, #4]
   d50c8:	bd08      	pop	{r3, pc}
   d50ca:	0000      	.short	0x0000
   d50cc:	00030278 	.word	0x00030278

000d50d0 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d50d0:	b508      	push	{r3, lr}
   d50d2:	4b03      	ldr	r3, [pc, #12]	; (d50e0 <hal_ble_gatt_client_configure_cccd+0x10>)
   d50d4:	681b      	ldr	r3, [r3, #0]
   d50d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d50da:	9301      	str	r3, [sp, #4]
   d50dc:	bd08      	pop	{r3, pc}
   d50de:	0000      	.short	0x0000
   d50e0:	00030278 	.word	0x00030278

000d50e4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b03      	ldr	r3, [pc, #12]	; (d50f4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d50ee:	9301      	str	r3, [sp, #4]
   d50f0:	bd08      	pop	{r3, pc}
   d50f2:	0000      	.short	0x0000
   d50f4:	00030278 	.word	0x00030278

000d50f8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d50f8:	b508      	push	{r3, lr}
   d50fa:	4b03      	ldr	r3, [pc, #12]	; (d5108 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d50fc:	681b      	ldr	r3, [r3, #0]
   d50fe:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d5102:	9301      	str	r3, [sp, #4]
   d5104:	bd08      	pop	{r3, pc}
   d5106:	0000      	.short	0x0000
   d5108:	00030278 	.word	0x00030278

000d510c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <os_thread_is_current+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	689b      	ldr	r3, [r3, #8]
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030248 	.word	0x00030248

000d511c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <os_thread_join+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	691b      	ldr	r3, [r3, #16]
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030248 	.word	0x00030248

000d512c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <os_thread_cleanup+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	695b      	ldr	r3, [r3, #20]
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030248 	.word	0x00030248

000d513c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <os_mutex_recursive_create+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030248 	.word	0x00030248

000d514c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <os_mutex_recursive_destroy+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030248 	.word	0x00030248

000d515c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <os_mutex_recursive_lock+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030248 	.word	0x00030248

000d516c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <os_mutex_recursive_unlock+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030248 	.word	0x00030248

000d517c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <inet_inet_ntop+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	695b      	ldr	r3, [r3, #20]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030264 	.word	0x00030264

000d518c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <inet_htonl+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6a1b      	ldr	r3, [r3, #32]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030264 	.word	0x00030264

000d519c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <inet_htons+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030264 	.word	0x00030264

000d51ac <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <HAL_USART_Init+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	681b      	ldr	r3, [r3, #0]
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	0003023c 	.word	0x0003023c

000d51bc <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <HAL_USART_End+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	689b      	ldr	r3, [r3, #8]
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	0003023c 	.word	0x0003023c

000d51cc <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <HAL_USART_Write_Data+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	68db      	ldr	r3, [r3, #12]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	0003023c 	.word	0x0003023c

000d51dc <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <HAL_USART_Available_Data+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	691b      	ldr	r3, [r3, #16]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	0003023c 	.word	0x0003023c

000d51ec <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <HAL_USART_Read_Data+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	695b      	ldr	r3, [r3, #20]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	0003023c 	.word	0x0003023c

000d51fc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <HAL_USART_Peek_Data+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	699b      	ldr	r3, [r3, #24]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003023c 	.word	0x0003023c

000d520c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <HAL_USART_Flush_Data+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	69db      	ldr	r3, [r3, #28]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003023c 	.word	0x0003023c

000d521c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_USART_Available_Data_For_Write+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003023c 	.word	0x0003023c

000d522c <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_USART_BeginConfig+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	0003023c 	.word	0x0003023c

000d523c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <sock_setsockopt+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	699b      	ldr	r3, [r3, #24]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	00030238 	.word	0x00030238

000d524c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <sock_close+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	69db      	ldr	r3, [r3, #28]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	00030238 	.word	0x00030238

000d525c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <sock_connect+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	6a1b      	ldr	r3, [r3, #32]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	00030238 	.word	0x00030238

000d526c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <sock_recv+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030238 	.word	0x00030238

000d527c <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <sock_send+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030238 	.word	0x00030238

000d528c <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <sock_socket+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030238 	.word	0x00030238

000d529c <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <dct_write_app_data+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	685b      	ldr	r3, [r3, #4]
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030258 	.word	0x00030258

000d52ac <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <HAL_USB_USART_Init+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	681b      	ldr	r3, [r3, #0]
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	0003024c 	.word	0x0003024c

000d52bc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <HAL_USB_USART_Begin+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	685b      	ldr	r3, [r3, #4]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	0003024c 	.word	0x0003024c

000d52cc <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <HAL_USB_USART_End+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	689b      	ldr	r3, [r3, #8]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	0003024c 	.word	0x0003024c

000d52dc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b02      	ldr	r3, [pc, #8]	; (d52e8 <HAL_USB_USART_Available_Data+0xc>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	691b      	ldr	r3, [r3, #16]
   d52e4:	9301      	str	r3, [sp, #4]
   d52e6:	bd08      	pop	{r3, pc}
   d52e8:	0003024c 	.word	0x0003024c

000d52ec <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b02      	ldr	r3, [pc, #8]	; (d52f8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	695b      	ldr	r3, [r3, #20]
   d52f4:	9301      	str	r3, [sp, #4]
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	0003024c 	.word	0x0003024c

000d52fc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d52fc:	b508      	push	{r3, lr}
   d52fe:	4b02      	ldr	r3, [pc, #8]	; (d5308 <HAL_USB_USART_Receive_Data+0xc>)
   d5300:	681b      	ldr	r3, [r3, #0]
   d5302:	699b      	ldr	r3, [r3, #24]
   d5304:	9301      	str	r3, [sp, #4]
   d5306:	bd08      	pop	{r3, pc}
   d5308:	0003024c 	.word	0x0003024c

000d530c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d530c:	b508      	push	{r3, lr}
   d530e:	4b02      	ldr	r3, [pc, #8]	; (d5318 <HAL_USB_USART_Send_Data+0xc>)
   d5310:	681b      	ldr	r3, [r3, #0]
   d5312:	69db      	ldr	r3, [r3, #28]
   d5314:	9301      	str	r3, [sp, #4]
   d5316:	bd08      	pop	{r3, pc}
   d5318:	0003024c 	.word	0x0003024c

000d531c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d531c:	b508      	push	{r3, lr}
   d531e:	4b02      	ldr	r3, [pc, #8]	; (d5328 <HAL_USB_USART_Flush_Data+0xc>)
   d5320:	681b      	ldr	r3, [r3, #0]
   d5322:	6a1b      	ldr	r3, [r3, #32]
   d5324:	9301      	str	r3, [sp, #4]
   d5326:	bd08      	pop	{r3, pc}
   d5328:	0003024c 	.word	0x0003024c

000d532c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d532c:	b508      	push	{r3, lr}
   d532e:	4b02      	ldr	r3, [pc, #8]	; (d5338 <panic_+0xc>)
   d5330:	681b      	ldr	r3, [r3, #0]
   d5332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5334:	9301      	str	r3, [sp, #4]
   d5336:	bd08      	pop	{r3, pc}
   d5338:	00030260 	.word	0x00030260

000d533c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b02      	ldr	r3, [pc, #8]	; (d5348 <log_message+0xc>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5344:	9301      	str	r3, [sp, #4]
   d5346:	bd08      	pop	{r3, pc}
   d5348:	00030260 	.word	0x00030260

000d534c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d534c:	b508      	push	{r3, lr}
   d534e:	4b02      	ldr	r3, [pc, #8]	; (d5358 <log_message_v+0xc>)
   d5350:	681b      	ldr	r3, [r3, #0]
   d5352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5354:	9301      	str	r3, [sp, #4]
   d5356:	bd08      	pop	{r3, pc}
   d5358:	00030260 	.word	0x00030260

000d535c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d535c:	b508      	push	{r3, lr}
   d535e:	4b02      	ldr	r3, [pc, #8]	; (d5368 <log_level_name+0xc>)
   d5360:	681b      	ldr	r3, [r3, #0]
   d5362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5364:	9301      	str	r3, [sp, #4]
   d5366:	bd08      	pop	{r3, pc}
   d5368:	00030260 	.word	0x00030260

000d536c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d536c:	b508      	push	{r3, lr}
   d536e:	4b02      	ldr	r3, [pc, #8]	; (d5378 <log_set_callbacks+0xc>)
   d5370:	681b      	ldr	r3, [r3, #0]
   d5372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5374:	9301      	str	r3, [sp, #4]
   d5376:	bd08      	pop	{r3, pc}
   d5378:	00030260 	.word	0x00030260

000d537c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d537c:	b508      	push	{r3, lr}
   d537e:	4b02      	ldr	r3, [pc, #8]	; (d5388 <set_system_mode+0xc>)
   d5380:	681b      	ldr	r3, [r3, #0]
   d5382:	685b      	ldr	r3, [r3, #4]
   d5384:	9301      	str	r3, [sp, #4]
   d5386:	bd08      	pop	{r3, pc}
   d5388:	00030220 	.word	0x00030220

000d538c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b03      	ldr	r3, [pc, #12]	; (d539c <system_ctrl_set_app_request_handler+0x10>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5396:	9301      	str	r3, [sp, #4]
   d5398:	bd08      	pop	{r3, pc}
   d539a:	0000      	.short	0x0000
   d539c:	00030220 	.word	0x00030220

000d53a0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b03      	ldr	r3, [pc, #12]	; (d53b0 <system_ctrl_set_result+0x10>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d53aa:	9301      	str	r3, [sp, #4]
   d53ac:	bd08      	pop	{r3, pc}
   d53ae:	0000      	.short	0x0000
   d53b0:	00030220 	.word	0x00030220

000d53b4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b02      	ldr	r3, [pc, #8]	; (d53c0 <network_connect+0xc>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	685b      	ldr	r3, [r3, #4]
   d53bc:	9301      	str	r3, [sp, #4]
   d53be:	bd08      	pop	{r3, pc}
   d53c0:	00030240 	.word	0x00030240

000d53c4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d53c4:	b508      	push	{r3, lr}
   d53c6:	4b02      	ldr	r3, [pc, #8]	; (d53d0 <network_connecting+0xc>)
   d53c8:	681b      	ldr	r3, [r3, #0]
   d53ca:	689b      	ldr	r3, [r3, #8]
   d53cc:	9301      	str	r3, [sp, #4]
   d53ce:	bd08      	pop	{r3, pc}
   d53d0:	00030240 	.word	0x00030240

000d53d4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d53d4:	b508      	push	{r3, lr}
   d53d6:	4b02      	ldr	r3, [pc, #8]	; (d53e0 <network_disconnect+0xc>)
   d53d8:	681b      	ldr	r3, [r3, #0]
   d53da:	68db      	ldr	r3, [r3, #12]
   d53dc:	9301      	str	r3, [sp, #4]
   d53de:	bd08      	pop	{r3, pc}
   d53e0:	00030240 	.word	0x00030240

000d53e4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d53e4:	b508      	push	{r3, lr}
   d53e6:	4b02      	ldr	r3, [pc, #8]	; (d53f0 <network_ready+0xc>)
   d53e8:	681b      	ldr	r3, [r3, #0]
   d53ea:	691b      	ldr	r3, [r3, #16]
   d53ec:	9301      	str	r3, [sp, #4]
   d53ee:	bd08      	pop	{r3, pc}
   d53f0:	00030240 	.word	0x00030240

000d53f4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d53f4:	b508      	push	{r3, lr}
   d53f6:	4b02      	ldr	r3, [pc, #8]	; (d5400 <network_on+0xc>)
   d53f8:	681b      	ldr	r3, [r3, #0]
   d53fa:	695b      	ldr	r3, [r3, #20]
   d53fc:	9301      	str	r3, [sp, #4]
   d53fe:	bd08      	pop	{r3, pc}
   d5400:	00030240 	.word	0x00030240

000d5404 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5404:	b508      	push	{r3, lr}
   d5406:	4b02      	ldr	r3, [pc, #8]	; (d5410 <network_off+0xc>)
   d5408:	681b      	ldr	r3, [r3, #0]
   d540a:	699b      	ldr	r3, [r3, #24]
   d540c:	9301      	str	r3, [sp, #4]
   d540e:	bd08      	pop	{r3, pc}
   d5410:	00030240 	.word	0x00030240

000d5414 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5414:	b508      	push	{r3, lr}
   d5416:	4b02      	ldr	r3, [pc, #8]	; (d5420 <network_listen+0xc>)
   d5418:	681b      	ldr	r3, [r3, #0]
   d541a:	69db      	ldr	r3, [r3, #28]
   d541c:	9301      	str	r3, [sp, #4]
   d541e:	bd08      	pop	{r3, pc}
   d5420:	00030240 	.word	0x00030240

000d5424 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <network_listening+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	6a1b      	ldr	r3, [r3, #32]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030240 	.word	0x00030240

000d5434 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <network_set_listen_timeout+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030240 	.word	0x00030240

000d5444 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <network_get_listen_timeout+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	00030240 	.word	0x00030240

000d5454 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	00030244 	.word	0x00030244

000d5464 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <malloc+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	681b      	ldr	r3, [r3, #0]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	0003021c 	.word	0x0003021c

000d5474 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <free+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	685b      	ldr	r3, [r3, #4]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	0003021c 	.word	0x0003021c

000d5484 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <realloc+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	689b      	ldr	r3, [r3, #8]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	0003021c 	.word	0x0003021c

000d5494 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <vsnprintf+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	0003021c 	.word	0x0003021c

000d54a4 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <__errno+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	0003021c 	.word	0x0003021c

000d54b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54b4:	2200      	movs	r2, #0
   d54b6:	4611      	mov	r1, r2
   d54b8:	6840      	ldr	r0, [r0, #4]
   d54ba:	f7ff bfb3 	b.w	d5424 <network_listening>

000d54be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d54be:	2200      	movs	r2, #0
   d54c0:	4611      	mov	r1, r2
   d54c2:	6840      	ldr	r0, [r0, #4]
   d54c4:	f7ff bfbe 	b.w	d5444 <network_get_listen_timeout>

000d54c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d54c8:	2200      	movs	r2, #0
   d54ca:	6840      	ldr	r0, [r0, #4]
   d54cc:	f7ff bfb2 	b.w	d5434 <network_set_listen_timeout>

000d54d0 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d54d0:	2200      	movs	r2, #0
   d54d2:	f081 0101 	eor.w	r1, r1, #1
   d54d6:	6840      	ldr	r0, [r0, #4]
   d54d8:	f7ff bf9c 	b.w	d5414 <network_listen>

000d54dc <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d54dc:	2300      	movs	r3, #0
   d54de:	461a      	mov	r2, r3
   d54e0:	4619      	mov	r1, r3
   d54e2:	6840      	ldr	r0, [r0, #4]
   d54e4:	f7ff bf8e 	b.w	d5404 <network_off>

000d54e8 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d54e8:	2300      	movs	r3, #0
   d54ea:	461a      	mov	r2, r3
   d54ec:	4619      	mov	r1, r3
   d54ee:	6840      	ldr	r0, [r0, #4]
   d54f0:	f7ff bf80 	b.w	d53f4 <network_on>

000d54f4 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54f4:	2200      	movs	r2, #0
   d54f6:	4611      	mov	r1, r2
   d54f8:	6840      	ldr	r0, [r0, #4]
   d54fa:	f7ff bf73 	b.w	d53e4 <network_ready>

000d54fe <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54fe:	2200      	movs	r2, #0
   d5500:	4611      	mov	r1, r2
   d5502:	6840      	ldr	r0, [r0, #4]
   d5504:	f7ff bf5e 	b.w	d53c4 <network_connecting>

000d5508 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5508:	2200      	movs	r2, #0
   d550a:	2102      	movs	r1, #2
   d550c:	6840      	ldr	r0, [r0, #4]
   d550e:	f7ff bf61 	b.w	d53d4 <network_disconnect>

000d5512 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5512:	2300      	movs	r3, #0
   d5514:	461a      	mov	r2, r3
   d5516:	6840      	ldr	r0, [r0, #4]
   d5518:	f7ff bf4c 	b.w	d53b4 <network_connect>

000d551c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d551c:	4b02      	ldr	r3, [pc, #8]	; (d5528 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d551e:	2203      	movs	r2, #3
   d5520:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5522:	4a02      	ldr	r2, [pc, #8]	; (d552c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5524:	601a      	str	r2, [r3, #0]
   d5526:	4770      	bx	lr
   d5528:	2003e3b8 	.word	0x2003e3b8
   d552c:	000d9c10 	.word	0x000d9c10

000d5530 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5530:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d5532:	4c09      	ldr	r4, [pc, #36]	; (d5558 <_GLOBAL__sub_I_System+0x28>)
   d5534:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d5536:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d553a:	6020      	str	r0, [r4, #0]
   d553c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d553e:	71a0      	strb	r0, [r4, #6]
   d5540:	8120      	strh	r0, [r4, #8]
   d5542:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5544:	f7ff ff1a 	bl	d537c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5548:	4620      	mov	r0, r4
   d554a:	4a04      	ldr	r2, [pc, #16]	; (d555c <_GLOBAL__sub_I_System+0x2c>)
   d554c:	4904      	ldr	r1, [pc, #16]	; (d5560 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d554e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d5552:	f003 bdc8 	b.w	d90e6 <__aeabi_atexit>
   d5556:	bf00      	nop
   d5558:	2003e3c0 	.word	0x2003e3c0
   d555c:	2003d8c8 	.word	0x2003d8c8
   d5560:	000d40d7 	.word	0x000d40d7

000d5564 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5564:	2300      	movs	r3, #0
   d5566:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5568:	6043      	str	r3, [r0, #4]
	len = 0;
   d556a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d556c:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d556e:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d5570:	680c      	ldr	r4, [r1, #0]
   d5572:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d5574:	684c      	ldr	r4, [r1, #4]
   d5576:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d5578:	688c      	ldr	r4, [r1, #8]
   d557a:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d557c:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d557e:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d5580:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d5582:	bd10      	pop	{r4, pc}

000d5584 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5584:	b510      	push	{r4, lr}
   d5586:	4604      	mov	r4, r0
{
	free(buffer);
   d5588:	6800      	ldr	r0, [r0, #0]
   d558a:	f7ff ff73 	bl	d5474 <free>
}
   d558e:	4620      	mov	r0, r4
   d5590:	bd10      	pop	{r4, pc}

000d5592 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5592:	b510      	push	{r4, lr}
   d5594:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5596:	6800      	ldr	r0, [r0, #0]
   d5598:	b108      	cbz	r0, d559e <_ZN6String10invalidateEv+0xc>
   d559a:	f7ff ff6b 	bl	d5474 <free>
	buffer = NULL;
   d559e:	2300      	movs	r3, #0
   d55a0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d55a2:	60a3      	str	r3, [r4, #8]
   d55a4:	6063      	str	r3, [r4, #4]
   d55a6:	bd10      	pop	{r4, pc}

000d55a8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d55a8:	b538      	push	{r3, r4, r5, lr}
   d55aa:	4604      	mov	r4, r0
   d55ac:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d55ae:	6800      	ldr	r0, [r0, #0]
   d55b0:	3101      	adds	r1, #1
   d55b2:	f7ff ff67 	bl	d5484 <realloc>
	if (newbuffer) {
   d55b6:	b110      	cbz	r0, d55be <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d55b8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d55bc:	2001      	movs	r0, #1
	}
	return 0;
}
   d55be:	bd38      	pop	{r3, r4, r5, pc}

000d55c0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55c0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d55c2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d55c4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d55c6:	b113      	cbz	r3, d55ce <_ZN6String7reserveEj+0xe>
   d55c8:	6843      	ldr	r3, [r0, #4]
   d55ca:	428b      	cmp	r3, r1
   d55cc:	d207      	bcs.n	d55de <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d55ce:	4620      	mov	r0, r4
   d55d0:	f7ff ffea 	bl	d55a8 <_ZN6String12changeBufferEj>
   d55d4:	b120      	cbz	r0, d55e0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d55d6:	68a3      	ldr	r3, [r4, #8]
   d55d8:	b90b      	cbnz	r3, d55de <_ZN6String7reserveEj+0x1e>
   d55da:	6822      	ldr	r2, [r4, #0]
   d55dc:	7013      	strb	r3, [r2, #0]
   d55de:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d55e0:	bd10      	pop	{r4, pc}

000d55e2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55e2:	b570      	push	{r4, r5, r6, lr}
   d55e4:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d55e6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d55e8:	4604      	mov	r4, r0
   d55ea:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d55ec:	f7ff ffe8 	bl	d55c0 <_ZN6String7reserveEj>
   d55f0:	b918      	cbnz	r0, d55fa <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d55f2:	4620      	mov	r0, r4
   d55f4:	f7ff ffcd 	bl	d5592 <_ZN6String10invalidateEv>
		return *this;
   d55f8:	e009      	b.n	d560e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d55fa:	462a      	mov	r2, r5
   d55fc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d55fe:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5600:	6820      	ldr	r0, [r4, #0]
   d5602:	f003 fef4 	bl	d93ee <memcpy>
	buffer[len] = 0;
   d5606:	6822      	ldr	r2, [r4, #0]
   d5608:	68a3      	ldr	r3, [r4, #8]
   d560a:	2100      	movs	r1, #0
   d560c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d560e:	4620      	mov	r0, r4
   d5610:	bd70      	pop	{r4, r5, r6, pc}

000d5612 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5612:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5614:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5616:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5618:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d561a:	6043      	str	r3, [r0, #4]
	len = 0;
   d561c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d561e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5620:	460d      	mov	r5, r1
   d5622:	b139      	cbz	r1, d5634 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5624:	4608      	mov	r0, r1
   d5626:	f003 ff63 	bl	d94f0 <strlen>
   d562a:	4629      	mov	r1, r5
   d562c:	4602      	mov	r2, r0
   d562e:	4620      	mov	r0, r4
   d5630:	f7ff ffd7 	bl	d55e2 <_ZN6String4copyEPKcj>
}
   d5634:	4620      	mov	r0, r4
   d5636:	bd38      	pop	{r3, r4, r5, pc}

000d5638 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5638:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d563a:	b510      	push	{r4, lr}
   d563c:	460b      	mov	r3, r1
   d563e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5640:	d007      	beq.n	d5652 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5642:	6809      	ldr	r1, [r1, #0]
   d5644:	b119      	cbz	r1, d564e <_ZN6StringaSERKS_+0x16>
   d5646:	689a      	ldr	r2, [r3, #8]
   d5648:	f7ff ffcb 	bl	d55e2 <_ZN6String4copyEPKcj>
   d564c:	e001      	b.n	d5652 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d564e:	f7ff ffa0 	bl	d5592 <_ZN6String10invalidateEv>

	return *this;
}
   d5652:	4620      	mov	r0, r4
   d5654:	bd10      	pop	{r4, pc}

000d5656 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d5656:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5658:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d565a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d565c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d565e:	6043      	str	r3, [r0, #4]
	len = 0;
   d5660:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5662:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5664:	f7ff ffe8 	bl	d5638 <_ZN6StringaSERKS_>
}
   d5668:	4620      	mov	r0, r4
   d566a:	bd10      	pop	{r4, pc}

000d566c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d566c:	b538      	push	{r3, r4, r5, lr}
   d566e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5670:	460c      	mov	r4, r1
   d5672:	b141      	cbz	r1, d5686 <_ZN6StringaSEPKc+0x1a>
   d5674:	4608      	mov	r0, r1
   d5676:	f003 ff3b 	bl	d94f0 <strlen>
   d567a:	4621      	mov	r1, r4
   d567c:	4602      	mov	r2, r0
   d567e:	4628      	mov	r0, r5
   d5680:	f7ff ffaf 	bl	d55e2 <_ZN6String4copyEPKcj>
   d5684:	e001      	b.n	d568a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5686:	f7ff ff84 	bl	d5592 <_ZN6String10invalidateEv>

	return *this;
}
   d568a:	4628      	mov	r0, r5
   d568c:	bd38      	pop	{r3, r4, r5, pc}

000d568e <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d568e:	b570      	push	{r4, r5, r6, lr}
   d5690:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5692:	460e      	mov	r6, r1
   d5694:	b909      	cbnz	r1, d569a <_ZN6String6concatEPKcj+0xc>
   d5696:	2000      	movs	r0, #0
   d5698:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d569a:	b16a      	cbz	r2, d56b8 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d569c:	6883      	ldr	r3, [r0, #8]
   d569e:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d56a0:	4629      	mov	r1, r5
   d56a2:	f7ff ff8d 	bl	d55c0 <_ZN6String7reserveEj>
   d56a6:	2800      	cmp	r0, #0
   d56a8:	d0f5      	beq.n	d5696 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d56aa:	6820      	ldr	r0, [r4, #0]
   d56ac:	68a3      	ldr	r3, [r4, #8]
   d56ae:	4631      	mov	r1, r6
   d56b0:	4418      	add	r0, r3
   d56b2:	f003 ff15 	bl	d94e0 <strcpy>
	len = newlen;
   d56b6:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d56b8:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d56ba:	bd70      	pop	{r4, r5, r6, pc}

000d56bc <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d56bc:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d56be:	688a      	ldr	r2, [r1, #8]
   d56c0:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d56c2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d56c4:	f7ff ffe3 	bl	d568e <_ZN6String6concatEPKcj>
   d56c8:	b910      	cbnz	r0, d56d0 <_ZplRK15StringSumHelperRK6String+0x14>
   d56ca:	4620      	mov	r0, r4
   d56cc:	f7ff ff61 	bl	d5592 <_ZN6String10invalidateEv>
	return a;
}
   d56d0:	4620      	mov	r0, r4
   d56d2:	bd10      	pop	{r4, pc}

000d56d4 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d56d4:	4770      	bx	lr

000d56d6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d56d6:	2000      	movs	r0, #0
   d56d8:	4770      	bx	lr

000d56da <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d56da:	4770      	bx	lr

000d56dc <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d56dc:	2000      	movs	r0, #0
   d56de:	4770      	bx	lr

000d56e0 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d56e0:	4770      	bx	lr

000d56e2 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d56e2:	2000      	movs	r0, #0
   d56e4:	4770      	bx	lr

000d56e6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d56e6:	b510      	push	{r4, lr}
   d56e8:	2114      	movs	r1, #20
   d56ea:	4604      	mov	r4, r0
   d56ec:	f003 fd08 	bl	d9100 <_ZdlPvj>
   d56f0:	4620      	mov	r0, r4
   d56f2:	bd10      	pop	{r4, pc}

000d56f4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d56f4:	b510      	push	{r4, lr}
   d56f6:	2114      	movs	r1, #20
   d56f8:	4604      	mov	r4, r0
   d56fa:	f003 fd01 	bl	d9100 <_ZdlPvj>
   d56fe:	4620      	mov	r0, r4
   d5700:	bd10      	pop	{r4, pc}

000d5702 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5702:	b510      	push	{r4, lr}
   d5704:	2114      	movs	r1, #20
   d5706:	4604      	mov	r4, r0
   d5708:	f003 fcfa 	bl	d9100 <_ZdlPvj>
   d570c:	4620      	mov	r0, r4
   d570e:	bd10      	pop	{r4, pc}

000d5710 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5710:	f7fe bcc5 	b.w	d409e <_ZdlPv>

000d5714 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5714:	f7fe bcc3 	b.w	d409e <_ZdlPv>

000d5718 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5718:	f7fe bcc1 	b.w	d409e <_ZdlPv>

000d571c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d571c:	b510      	push	{r4, lr}
   d571e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5720:	6800      	ldr	r0, [r0, #0]
   d5722:	b108      	cbz	r0, d5728 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5724:	f7ff fd12 	bl	d514c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5728:	4620      	mov	r0, r4
   d572a:	bd10      	pop	{r4, pc}

000d572c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d572c:	b530      	push	{r4, r5, lr}
   d572e:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d5730:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d5732:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d5734:	2400      	movs	r4, #0
   d5736:	9302      	str	r3, [sp, #8]
   d5738:	4b08      	ldr	r3, [pc, #32]	; (d575c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d573a:	9300      	str	r3, [sp, #0]
   d573c:	aa02      	add	r2, sp, #8
   d573e:	4623      	mov	r3, r4
   d5740:	4907      	ldr	r1, [pc, #28]	; (d5760 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d5742:	9403      	str	r4, [sp, #12]
   d5744:	2001      	movs	r0, #1
   d5746:	f7ff fdf9 	bl	d533c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d574a:	6828      	ldr	r0, [r5, #0]
   d574c:	4905      	ldr	r1, [pc, #20]	; (d5764 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d574e:	8800      	ldrh	r0, [r0, #0]
   d5750:	4623      	mov	r3, r4
   d5752:	462a      	mov	r2, r5
   d5754:	f7ff fc76 	bl	d5044 <hal_ble_gatt_client_discover_all_services>
    }
   d5758:	b00b      	add	sp, #44	; 0x2c
   d575a:	bd30      	pop	{r4, r5, pc}
   d575c:	000d9c9b 	.word	0x000d9c9b
   d5760:	000d9c90 	.word	0x000d9c90
   d5764:	000d6e99 	.word	0x000d6e99

000d5768 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5768:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d576a:	200a      	movs	r0, #10
   d576c:	4a02      	ldr	r2, [pc, #8]	; (d5778 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d576e:	2100      	movs	r1, #0
   d5770:	f7ff fddc 	bl	d532c <panic_>
    }
}
   d5774:	bd08      	pop	{r3, pc}
   d5776:	bf00      	nop
   d5778:	000d4fc9 	.word	0x000d4fc9

000d577c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d577c:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d577e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5780:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5782:	689b      	ldr	r3, [r3, #8]
   d5784:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5786:	68a3      	ldr	r3, [r4, #8]
   d5788:	3b01      	subs	r3, #1
   d578a:	60a3      	str	r3, [r4, #8]
   d578c:	b92b      	cbnz	r3, d579a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d578e:	6823      	ldr	r3, [r4, #0]
   d5790:	4620      	mov	r0, r4
   d5792:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5798:	4718      	bx	r3
   d579a:	bd10      	pop	{r4, pc}

000d579c <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d579c:	b570      	push	{r4, r5, r6, lr}
   d579e:	1c93      	adds	r3, r2, #2
   d57a0:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d57a2:	4288      	cmp	r0, r1
   d57a4:	d018      	beq.n	d57d8 <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d57a6:	7804      	ldrb	r4, [r0, #0]
   d57a8:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d57aa:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d57ae:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d57b0:	bf88      	it	hi
   d57b2:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d57b6:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d57b8:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d57bc:	7834      	ldrb	r4, [r6, #0]
   d57be:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d57c2:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d57c6:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d57c8:	bf88      	it	hi
   d57ca:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d57ce:	f803 5c01 	strb.w	r5, [r3, #-1]
   d57d2:	3001      	adds	r0, #1
   d57d4:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d57d6:	e7e4      	b.n	d57a2 <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d57d8:	4610      	mov	r0, r2
   d57da:	bd70      	pop	{r4, r5, r6, pc}

000d57dc <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d57dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57e0:	b2da      	uxtb	r2, r3
   d57e2:	2a09      	cmp	r2, #9
   d57e4:	d801      	bhi.n	d57ea <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d57e6:	4618      	mov	r0, r3
   d57e8:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d57ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d57ee:	2b05      	cmp	r3, #5
   d57f0:	d801      	bhi.n	d57f6 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d57f2:	3857      	subs	r0, #87	; 0x57
   d57f4:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d57f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d57fa:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d57fc:	bf94      	ite	ls
   d57fe:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5800:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d5804:	4770      	bx	lr
	...

000d5808 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5808:	b510      	push	{r4, lr}
            locked_(false) {
   d580a:	2300      	movs	r3, #0
   d580c:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d580e:	4b04      	ldr	r3, [pc, #16]	; (d5820 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5810:	4604      	mov	r4, r0
   d5812:	6818      	ldr	r0, [r3, #0]
   d5814:	f7ff fca2 	bl	d515c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5818:	2301      	movs	r3, #1
   d581a:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d581c:	4620      	mov	r0, r4
   d581e:	bd10      	pop	{r4, pc}
   d5820:	2003e3d4 	.word	0x2003e3d4

000d5824 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5824:	b510      	push	{r4, lr}
        if (locked_) {
   d5826:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5828:	4604      	mov	r4, r0
        if (locked_) {
   d582a:	b11b      	cbz	r3, d5834 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d582c:	4b02      	ldr	r3, [pc, #8]	; (d5838 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d582e:	6818      	ldr	r0, [r3, #0]
   d5830:	f7ff fc9c 	bl	d516c <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5834:	4620      	mov	r0, r4
   d5836:	bd10      	pop	{r4, pc}
   d5838:	2003e3d4 	.word	0x2003e3d4

000d583c <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d583c:	2200      	movs	r2, #0
   d583e:	6002      	str	r2, [r0, #0]
   d5840:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d5842:	4770      	bx	lr

000d5844 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5844:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5846:	7982      	ldrb	r2, [r0, #6]
   d5848:	798b      	ldrb	r3, [r1, #6]
   d584a:	429a      	cmp	r2, r3
   d584c:	d106      	bne.n	d585c <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d584e:	2206      	movs	r2, #6
   d5850:	f003 fdbe 	bl	d93d0 <memcmp>
   d5854:	fab0 f080 	clz	r0, r0
   d5858:	0940      	lsrs	r0, r0, #5
   d585a:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d585c:	2000      	movs	r0, #0
}
   d585e:	bd08      	pop	{r3, pc}

000d5860 <_ZNK8particle10BleAddress11toBigEndianEPh>:

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d5860:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d5862:	2305      	movs	r3, #5
        buf[i] = address_.addr[j];
   d5864:	5cc2      	ldrb	r2, [r0, r3]
   d5866:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    return false;
}

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d586a:	3b01      	subs	r3, #1
   d586c:	b2db      	uxtb	r3, r3
   d586e:	2bff      	cmp	r3, #255	; 0xff
   d5870:	d1f8      	bne.n	d5864 <_ZNK8particle10BleAddress11toBigEndianEPh+0x4>
        buf[i] = address_.addr[j];
    }
}
   d5872:	4770      	bx	lr

000d5874 <_ZNK8particle10BleAddress8toStringEPcjb>:
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d5874:	b570      	push	{r4, r5, r6, lr}
   d5876:	4614      	mov	r4, r2
   d5878:	b088      	sub	sp, #32
   d587a:	461d      	mov	r5, r3
    if (!buf || len == 0) {
   d587c:	460e      	mov	r6, r1
   d587e:	2900      	cmp	r1, #0
   d5880:	d046      	beq.n	d5910 <_ZNK8particle10BleAddress8toStringEPcjb+0x9c>
   d5882:	2a00      	cmp	r2, #0
   d5884:	d046      	beq.n	d5914 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
   d5886:	a901      	add	r1, sp, #4
   d5888:	f7ff ffea 	bl	d5860 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d588c:	aa03      	add	r2, sp, #12
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
    if (stripped) {
   d588e:	b115      	cbz	r5, d5896 <_ZNK8particle10BleAddress8toStringEPcjb+0x22>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d5890:	2106      	movs	r1, #6
   d5892:	a801      	add	r0, sp, #4
   d5894:	e02d      	b.n	d58f2 <_ZNK8particle10BleAddress8toStringEPcjb+0x7e>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d5896:	2101      	movs	r1, #1
   d5898:	a801      	add	r0, sp, #4
   d589a:	f7ff ff7f 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2] = ':';
   d589e:	253a      	movs	r5, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d58a0:	f10d 020f 	add.w	r2, sp, #15
   d58a4:	2101      	movs	r1, #1
   d58a6:	f10d 0005 	add.w	r0, sp, #5
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
   d58aa:	f88d 500e 	strb.w	r5, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d58ae:	f7ff ff75 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d58b2:	f10d 0212 	add.w	r2, sp, #18
   d58b6:	2101      	movs	r1, #1
   d58b8:	f10d 0006 	add.w	r0, sp, #6
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
   d58bc:	f88d 5011 	strb.w	r5, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d58c0:	f7ff ff6c 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d58c4:	f10d 0215 	add.w	r2, sp, #21
   d58c8:	2101      	movs	r1, #1
   d58ca:	f10d 0007 	add.w	r0, sp, #7
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
   d58ce:	f88d 5014 	strb.w	r5, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d58d2:	f7ff ff63 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 3] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d58d6:	aa06      	add	r2, sp, #24
   d58d8:	2101      	movs	r1, #1
   d58da:	a802      	add	r0, sp, #8
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
        idx++;
        cStr[idx * 2 + 3] = ':';
   d58dc:	f88d 5017 	strb.w	r5, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d58e0:	f7ff ff5c 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 4] = ':';
   d58e4:	f88d 501a 	strb.w	r5, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d58e8:	f10d 021b 	add.w	r2, sp, #27
   d58ec:	2101      	movs	r1, #1
   d58ee:	f10d 0009 	add.w	r0, sp, #9
   d58f2:	3c01      	subs	r4, #1
   d58f4:	f7ff ff52 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
   d58f8:	2c11      	cmp	r4, #17
   d58fa:	bf28      	it	cs
   d58fc:	2411      	movcs	r4, #17
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d58fe:	4622      	mov	r2, r4
   d5900:	a903      	add	r1, sp, #12
   d5902:	4630      	mov	r0, r6
   d5904:	f003 fd73 	bl	d93ee <memcpy>
    buf[len++] = '\0';
   d5908:	2300      	movs	r3, #0
   d590a:	5533      	strb	r3, [r6, r4]
   d590c:	1c60      	adds	r0, r4, #1
   d590e:	e002      	b.n	d5916 <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d5910:	4608      	mov	r0, r1
   d5912:	e000      	b.n	d5916 <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
   d5914:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d5916:	b008      	add	sp, #32
   d5918:	bd70      	pop	{r4, r5, r6, pc}

000d591a <_ZNK8particle10BleAddress8toStringEb>:

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d591a:	b510      	push	{r4, lr}
   d591c:	b086      	sub	sp, #24
   d591e:	4604      	mov	r4, r0
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d5920:	4613      	mov	r3, r2

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d5922:	4608      	mov	r0, r1
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d5924:	2212      	movs	r2, #18
   d5926:	a901      	add	r1, sp, #4
   d5928:	f7ff ffa4 	bl	d5874 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d592c:	a901      	add	r1, sp, #4
   d592e:	4620      	mov	r0, r4
   d5930:	f7ff fe6f 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5934:	4620      	mov	r0, r4
   d5936:	b006      	add	sp, #24
   d5938:	bd10      	pop	{r4, pc}
	...

000d593c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d593c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d593e:	2301      	movs	r3, #1
   d5940:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5942:	4b05      	ldr	r3, [pc, #20]	; (d5958 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d5944:	4602      	mov	r2, r0
   d5946:	f103 0110 	add.w	r1, r3, #16
   d594a:	f853 4b04 	ldr.w	r4, [r3], #4
   d594e:	f842 4b04 	str.w	r4, [r2], #4
   d5952:	428b      	cmp	r3, r1
   d5954:	d1f9      	bne.n	d594a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d5956:	bd10      	pop	{r4, pc}
   d5958:	000d9e30 	.word	0x000d9e30

000d595c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d595c:	7c0b      	ldrb	r3, [r1, #16]
   d595e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d5962:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d5964:	d110      	bne.n	d5988 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d5966:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5968:	4b0d      	ldr	r3, [pc, #52]	; (d59a0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d596a:	4602      	mov	r2, r0
   d596c:	f103 0410 	add.w	r4, r3, #16
   d5970:	f853 5b04 	ldr.w	r5, [r3], #4
   d5974:	f842 5b04 	str.w	r5, [r2], #4
   d5978:	42a3      	cmp	r3, r4
   d597a:	d1f9      	bne.n	d5970 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d597c:	880b      	ldrh	r3, [r1, #0]
   d597e:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d5980:	880b      	ldrh	r3, [r1, #0]
   d5982:	121b      	asrs	r3, r3, #8
   d5984:	7343      	strb	r3, [r0, #13]
   d5986:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d5988:	2301      	movs	r3, #1
   d598a:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d598c:	f101 0210 	add.w	r2, r1, #16
   d5990:	4603      	mov	r3, r0
   d5992:	f851 4b04 	ldr.w	r4, [r1], #4
   d5996:	f843 4b04 	str.w	r4, [r3], #4
   d599a:	4291      	cmp	r1, r2
   d599c:	d1f9      	bne.n	d5992 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d599e:	bd30      	pop	{r4, r5, pc}
   d59a0:	000d9e30 	.word	0x000d9e30

000d59a4 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d59a4:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d59a6:	690b      	ldr	r3, [r1, #16]
   d59a8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d59aa:	f101 0210 	add.w	r2, r1, #16
   d59ae:	4603      	mov	r3, r0
   d59b0:	f851 4b04 	ldr.w	r4, [r1], #4
   d59b4:	f843 4b04 	str.w	r4, [r3], #4
   d59b8:	4291      	cmp	r1, r2
   d59ba:	d1f9      	bne.n	d59b0 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d59bc:	bd10      	pop	{r4, pc}

000d59be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d59be:	b510      	push	{r4, lr}
    if (uuid128) {
   d59c0:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d59c2:	4604      	mov	r4, r0
    if (uuid128) {
   d59c4:	b1b9      	cbz	r1, d59f6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d59c6:	2a01      	cmp	r2, #1
   d59c8:	d109      	bne.n	d59de <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d59ca:	4603      	mov	r3, r0
   d59cc:	f101 0210 	add.w	r2, r1, #16
   d59d0:	f851 0b04 	ldr.w	r0, [r1], #4
   d59d4:	f843 0b04 	str.w	r0, [r3], #4
   d59d8:	4291      	cmp	r1, r2
   d59da:	d1f9      	bne.n	d59d0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d59dc:	e008      	b.n	d59f0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d59de:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d59e0:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d59e2:	5c98      	ldrb	r0, [r3, r2]
   d59e4:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d59e8:	3a01      	subs	r2, #1
   d59ea:	b2d2      	uxtb	r2, r2
   d59ec:	2aff      	cmp	r2, #255	; 0xff
   d59ee:	d1f8      	bne.n	d59e2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d59f0:	2301      	movs	r3, #1
   d59f2:	6123      	str	r3, [r4, #16]
   d59f4:	e002      	b.n	d59fc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d59f6:	2210      	movs	r2, #16
   d59f8:	f003 fd1f 	bl	d943a <memset>
    }
}
   d59fc:	4620      	mov	r0, r4
   d59fe:	bd10      	pop	{r4, pc}

000d5a00 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d5a00:	b538      	push	{r3, r4, r5, lr}
   d5a02:	4604      	mov	r4, r0
   d5a04:	460d      	mov	r5, r1
        : BleUuid() {
   d5a06:	f7ff ff99 	bl	d593c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d5a0a:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5a0c:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5a0e:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d5a10:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5a12:	7365      	strb	r5, [r4, #13]
}
   d5a14:	4620      	mov	r0, r4
   d5a16:	bd38      	pop	{r3, r4, r5, pc}

000d5a18 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5a18:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d5a1a:	690b      	ldr	r3, [r1, #16]
   d5a1c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5a1e:	f101 0210 	add.w	r2, r1, #16
   d5a22:	4603      	mov	r3, r0
   d5a24:	f851 4b04 	ldr.w	r4, [r1], #4
   d5a28:	f843 4b04 	str.w	r4, [r3], #4
   d5a2c:	4291      	cmp	r1, r2
   d5a2e:	d1f9      	bne.n	d5a24 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d5a30:	bd10      	pop	{r4, pc}

000d5a32 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5a32:	b510      	push	{r4, lr}
   d5a34:	b086      	sub	sp, #24
   d5a36:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d5a38:	2201      	movs	r2, #1
   d5a3a:	a801      	add	r0, sp, #4
   d5a3c:	f7ff ffbf 	bl	d59be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5a40:	a901      	add	r1, sp, #4
   d5a42:	4620      	mov	r0, r4
   d5a44:	f7ff ffe8 	bl	d5a18 <_ZN8particle7BleUuidaSERKS0_>
}
   d5a48:	b006      	add	sp, #24
   d5a4a:	bd10      	pop	{r4, pc}

000d5a4c <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d5a4c:	b510      	push	{r4, lr}
   d5a4e:	b086      	sub	sp, #24
   d5a50:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d5a52:	a801      	add	r0, sp, #4
   d5a54:	f7ff ffd4 	bl	d5a00 <_ZN8particle7BleUuidC1Et>
   d5a58:	a901      	add	r1, sp, #4
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	f7ff ffdc 	bl	d5a18 <_ZN8particle7BleUuidaSERKS0_>
}
   d5a60:	b006      	add	sp, #24
   d5a62:	bd10      	pop	{r4, pc}

000d5a64 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d5a64:	b510      	push	{r4, lr}
   d5a66:	b086      	sub	sp, #24
   d5a68:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d5a6a:	a801      	add	r0, sp, #4
   d5a6c:	f7ff ff76 	bl	d595c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d5a70:	a901      	add	r1, sp, #4
   d5a72:	4620      	mov	r0, r4
   d5a74:	f7ff ffd0 	bl	d5a18 <_ZN8particle7BleUuidaSERKS0_>
}
   d5a78:	b006      	add	sp, #24
   d5a7a:	bd10      	pop	{r4, pc}

000d5a7c <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5a7c:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5a7e:	6902      	ldr	r2, [r0, #16]
   d5a80:	690b      	ldr	r3, [r1, #16]
   d5a82:	429a      	cmp	r2, r3
   d5a84:	d106      	bne.n	d5a94 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d5a86:	2210      	movs	r2, #16
   d5a88:	f003 fca2 	bl	d93d0 <memcmp>
   d5a8c:	fab0 f080 	clz	r0, r0
   d5a90:	0940      	lsrs	r0, r0, #5
   d5a92:	bd08      	pop	{r3, pc}
   d5a94:	2000      	movs	r0, #0
}
   d5a96:	bd08      	pop	{r3, pc}

000d5a98 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d5a98:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d5a9c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5a9e:	4b31      	ldr	r3, [pc, #196]	; (d5b64 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5aa0:	460e      	mov	r6, r1
   d5aa2:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5aa4:	4602      	mov	r2, r0
   d5aa6:	f103 0110 	add.w	r1, r3, #16
   d5aaa:	f853 0b04 	ldr.w	r0, [r3], #4
   d5aae:	f842 0b04 	str.w	r0, [r2], #4
   d5ab2:	428b      	cmp	r3, r1
   d5ab4:	d1f9      	bne.n	d5aaa <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d5ab6:	2e00      	cmp	r6, #0
   d5ab8:	d051      	beq.n	d5b5e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5aba:	2124      	movs	r1, #36	; 0x24
   d5abc:	4630      	mov	r0, r6
   d5abe:	f003 fd34 	bl	d952a <strnlen>
   d5ac2:	2804      	cmp	r0, #4
   d5ac4:	d010      	beq.n	d5ae8 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d5ac6:	2700      	movs	r7, #0
   d5ac8:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5aca:	2124      	movs	r1, #36	; 0x24
   d5acc:	4630      	mov	r0, r6
   d5ace:	f003 fd2c 	bl	d952a <strnlen>
   d5ad2:	42b8      	cmp	r0, r7
   d5ad4:	d901      	bls.n	d5ada <_ZN8particle7BleUuid9constructEPKc+0x42>
   d5ad6:	bb44      	cbnz	r4, d5b2a <_ZN8particle7BleUuid9constructEPKc+0x92>
   d5ad8:	e041      	b.n	d5b5e <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d5ada:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d5adc:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5ade:	42a5      	cmp	r5, r4
   d5ae0:	d03d      	beq.n	d5b5e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d5ae2:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d5ae6:	e7fa      	b.n	d5ade <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5ae8:	7830      	ldrb	r0, [r6, #0]
   d5aea:	f7ff fe77 	bl	d57dc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5aee:	1e04      	subs	r4, r0, #0
   d5af0:	db18      	blt.n	d5b24 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5af2:	7870      	ldrb	r0, [r6, #1]
   d5af4:	f7ff fe72 	bl	d57dc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5af8:	2800      	cmp	r0, #0
   d5afa:	db13      	blt.n	d5b24 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5afc:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5b00:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5b04:	78b0      	ldrb	r0, [r6, #2]
   d5b06:	f7ff fe69 	bl	d57dc <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5b0a:	1e04      	subs	r4, r0, #0
   d5b0c:	db0a      	blt.n	d5b24 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5b0e:	78f0      	ldrb	r0, [r6, #3]
   d5b10:	f7ff fe64 	bl	d57dc <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5b14:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5b16:	bfa1      	itttt	ge
   d5b18:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d5b1c:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d5b20:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d5b22:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d5b24:	2300      	movs	r3, #0
   d5b26:	612b      	str	r3, [r5, #16]
   d5b28:	e019      	b.n	d5b5e <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d5b2a:	5df0      	ldrb	r0, [r6, r7]
   d5b2c:	f7ff fe56 	bl	d57dc <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5b30:	0603      	lsls	r3, r0, #24
   d5b32:	d412      	bmi.n	d5b5a <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d5b34:	3c01      	subs	r4, #1
   d5b36:	0100      	lsls	r0, r0, #4
   d5b38:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5b3a:	2124      	movs	r1, #36	; 0x24
   d5b3c:	4630      	mov	r0, r6
   d5b3e:	f003 fcf4 	bl	d952a <strnlen>
   d5b42:	3701      	adds	r7, #1
   d5b44:	4287      	cmp	r7, r0
   d5b46:	d208      	bcs.n	d5b5a <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d5b48:	5df0      	ldrb	r0, [r6, r7]
   d5b4a:	f7ff fe47 	bl	d57dc <_ZN8particle11hexToNibbleEc>
   d5b4e:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5b50:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5b52:	bfa2      	ittt	ge
   d5b54:	5d2b      	ldrbge	r3, [r5, r4]
   d5b56:	4318      	orrge	r0, r3
   d5b58:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5b5a:	3701      	adds	r7, #1
   d5b5c:	e7b5      	b.n	d5aca <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d5b5e:	b003      	add	sp, #12
   d5b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b62:	bf00      	nop
   d5b64:	000d9e30 	.word	0x000d9e30

000d5b68 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d5b68:	b538      	push	{r3, r4, r5, lr}
   d5b6a:	4604      	mov	r4, r0
   d5b6c:	460d      	mov	r5, r1
        : BleUuid() {
   d5b6e:	f7ff fee5 	bl	d593c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5b72:	4620      	mov	r0, r4
   d5b74:	4629      	mov	r1, r5
   d5b76:	f7ff ff8f 	bl	d5a98 <_ZN8particle7BleUuid9constructEPKc>
}
   d5b7a:	4620      	mov	r0, r4
   d5b7c:	bd38      	pop	{r3, r4, r5, pc}

000d5b7e <_ZNK8particle7BleUuid11toBigEndianEPh>:
        uuid128_[len - 1] = 0x00;
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d5b7e:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5b80:	230f      	movs	r3, #15
        buf[i] = uuid128_[j];
   d5b82:	5cc2      	ldrb	r2, [r0, r3]
   d5b84:	f801 2f01 	strb.w	r2, [r1, #1]!
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5b88:	3b01      	subs	r3, #1
   d5b8a:	b2db      	uxtb	r3, r3
   d5b8c:	2bff      	cmp	r3, #255	; 0xff
   d5b8e:	d1f8      	bne.n	d5b82 <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid128_[j];
    }
}
   d5b90:	4770      	bx	lr

000d5b92 <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d5b92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b96:	4698      	mov	r8, r3
   d5b98:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d5b9a:	460d      	mov	r5, r1
   d5b9c:	2900      	cmp	r1, #0
   d5b9e:	d057      	beq.n	d5c50 <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
   d5ba0:	2a00      	cmp	r2, #0
   d5ba2:	d057      	beq.n	d5c54 <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d5ba4:	6906      	ldr	r6, [r0, #16]
   d5ba6:	1e54      	subs	r4, r2, #1
   d5ba8:	b9ae      	cbnz	r6, d5bd6 <_ZNK8particle7BleUuid8toStringEPcjb+0x44>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5baa:	7b02      	ldrb	r2, [r0, #12]
   d5bac:	7b43      	ldrb	r3, [r0, #13]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d5bae:	9605      	str	r6, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5bb0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5bb4:	2102      	movs	r1, #2
   d5bb6:	aa05      	add	r2, sp, #20
   d5bb8:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5bba:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5bbe:	f7ff fded 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
   d5bc2:	2c04      	cmp	r4, #4
   d5bc4:	bf28      	it	cs
   d5bc6:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d5bc8:	4622      	mov	r2, r4
   d5bca:	a905      	add	r1, sp, #20
   d5bcc:	4628      	mov	r0, r5
   d5bce:	f003 fc0e 	bl	d93ee <memcpy>
        buf[len++] = '\0';
   d5bd2:	552e      	strb	r6, [r5, r4]
   d5bd4:	e03a      	b.n	d5c4c <_ZNK8particle7BleUuid8toStringEPcjb+0xba>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d5bd6:	a901      	add	r1, sp, #4
   d5bd8:	f7ff ffd1 	bl	d5b7e <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5bdc:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d5bde:	f1b8 0f00 	cmp.w	r8, #0
   d5be2:	d002      	beq.n	d5bea <_ZNK8particle7BleUuid8toStringEPcjb+0x58>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5be4:	2110      	movs	r1, #16
   d5be6:	a801      	add	r0, sp, #4
   d5be8:	e024      	b.n	d5c34 <_ZNK8particle7BleUuid8toStringEPcjb+0xa2>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d5bea:	2104      	movs	r1, #4
   d5bec:	eb0d 0001 	add.w	r0, sp, r1
   d5bf0:	f7ff fdd4 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d5bf4:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d5bf6:	f10d 021d 	add.w	r2, sp, #29
   d5bfa:	2102      	movs	r1, #2
   d5bfc:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d5bfe:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d5c02:	f7ff fdcb 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d5c06:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d5c0a:	2102      	movs	r1, #2
   d5c0c:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d5c10:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d5c14:	f7ff fdc2 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d5c18:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d5c1c:	2102      	movs	r1, #2
   d5c1e:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d5c20:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d5c24:	f7ff fdba 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d5c28:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d5c2c:	aa0b      	add	r2, sp, #44	; 0x2c
   d5c2e:	2106      	movs	r1, #6
   d5c30:	f10d 000e 	add.w	r0, sp, #14
   d5c34:	f7ff fdb2 	bl	d579c <_ZL12bytes2hexbufPKhjPc>
   d5c38:	2c24      	cmp	r4, #36	; 0x24
   d5c3a:	bf28      	it	cs
   d5c3c:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d5c3e:	4622      	mov	r2, r4
   d5c40:	a905      	add	r1, sp, #20
   d5c42:	4628      	mov	r0, r5
   d5c44:	f003 fbd3 	bl	d93ee <memcpy>
    buf[len++] = '\0';
   d5c48:	2300      	movs	r3, #0
   d5c4a:	552b      	strb	r3, [r5, r4]
   d5c4c:	1c60      	adds	r0, r4, #1
   d5c4e:	e002      	b.n	d5c56 <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d5c50:	4608      	mov	r0, r1
   d5c52:	e000      	b.n	d5c56 <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
   d5c54:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d5c56:	b00e      	add	sp, #56	; 0x38
   d5c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c5c <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d5c5c:	b510      	push	{r4, lr}
   d5c5e:	b08a      	sub	sp, #40	; 0x28
   d5c60:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d5c62:	2300      	movs	r3, #0
   d5c64:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d5c66:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d5c68:	4669      	mov	r1, sp
   d5c6a:	f7ff ff92 	bl	d5b92 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d5c6e:	4669      	mov	r1, sp
   d5c70:	4620      	mov	r0, r4
   d5c72:	f7ff fcce 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5c76:	4620      	mov	r0, r4
   d5c78:	b00a      	add	sp, #40	; 0x28
   d5c7a:	bd10      	pop	{r4, pc}

000d5c7c <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d5c7c:	b538      	push	{r3, r4, r5, lr}
   d5c7e:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5c80:	b101      	cbz	r1, d5c84 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d5c82:	b912      	cbnz	r2, d5c8a <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d5c84:	2000      	movs	r0, #0
   d5c86:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d5c88:	bd38      	pop	{r3, r4, r5, pc}
   d5c8a:	2a1f      	cmp	r2, #31
   d5c8c:	bf28      	it	cs
   d5c8e:	221f      	movcs	r2, #31
   d5c90:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d5c92:	f003 fbac 	bl	d93ee <memcpy>
    selfLen_ = len;
   d5c96:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d5c98:	4620      	mov	r0, r4
}
   d5c9a:	bd38      	pop	{r3, r4, r5, pc}

000d5c9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5c9e:	b18b      	cbz	r3, d5cc4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5ca0:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5ca2:	1ce5      	adds	r5, r4, #3
   d5ca4:	428d      	cmp	r5, r1
   d5ca6:	d80f      	bhi.n	d5cc8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d5ca8:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5caa:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5cac:	5d87      	ldrb	r7, [r0, r6]
   d5cae:	4297      	cmp	r7, r2
   d5cb0:	d105      	bne.n	d5cbe <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5cb2:	442e      	add	r6, r5
   d5cb4:	42b1      	cmp	r1, r6
   d5cb6:	d307      	bcc.n	d5cc8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d5cb8:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d5cba:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5cbe:	3501      	adds	r5, #1
   d5cc0:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5cc2:	e7ee      	b.n	d5ca2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5cc4:	4618      	mov	r0, r3
   d5cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cc8:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d5cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5ccc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5ccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5cd0:	4604      	mov	r4, r0
   d5cd2:	460e      	mov	r6, r1
   d5cd4:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d5cd6:	4617      	mov	r7, r2
   d5cd8:	2a00      	cmp	r2, #0
   d5cda:	d03a      	beq.n	d5d52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5cdc:	460a      	mov	r2, r1
   d5cde:	ab01      	add	r3, sp, #4
   d5ce0:	6a01      	ldr	r1, [r0, #32]
   d5ce2:	f7ff ffdb 	bl	d5c9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d5ce6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d5cea:	6a22      	ldr	r2, [r4, #32]
   d5cec:	bb03      	cbnz	r3, d5d30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5cee:	b1f8      	cbz	r0, d5d30 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5cf0:	1c96      	adds	r6, r2, #2
   d5cf2:	442e      	add	r6, r5
   d5cf4:	1a36      	subs	r6, r6, r0
   d5cf6:	2e1f      	cmp	r6, #31
   d5cf8:	d82b      	bhi.n	d5d52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5cfa:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5cfe:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5d02:	ebc8 0202 	rsb	r2, r8, r2
   d5d06:	1a12      	subs	r2, r2, r0
   d5d08:	eb00 0108 	add.w	r1, r0, r8
   d5d0c:	eb05 0009 	add.w	r0, r5, r9
   d5d10:	b292      	uxth	r2, r2
   d5d12:	4421      	add	r1, r4
   d5d14:	4420      	add	r0, r4
   d5d16:	f003 fb75 	bl	d9404 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5d1a:	1c6b      	adds	r3, r5, #1
   d5d1c:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5d20:	462a      	mov	r2, r5
   d5d22:	4639      	mov	r1, r7
   d5d24:	eb04 0009 	add.w	r0, r4, r9
   d5d28:	f003 fb61 	bl	d93ee <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5d2c:	6226      	str	r6, [r4, #32]
   d5d2e:	e010      	b.n	d5d52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5d30:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5d32:	182b      	adds	r3, r5, r0
   d5d34:	2b1f      	cmp	r3, #31
   d5d36:	d80c      	bhi.n	d5d52 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d5d38:	1c6b      	adds	r3, r5, #1
   d5d3a:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5d3c:	4422      	add	r2, r4
   d5d3e:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5d40:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5d42:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d5d44:	4420      	add	r0, r4
   d5d46:	462a      	mov	r2, r5
   d5d48:	f003 fb51 	bl	d93ee <memcpy>
        selfLen_ += len;
   d5d4c:	6a22      	ldr	r2, [r4, #32]
   d5d4e:	442a      	add	r2, r5
   d5d50:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5d52:	6a20      	ldr	r0, [r4, #32]
}
   d5d54:	b003      	add	sp, #12
   d5d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5d5a <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5d5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5d5c:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5d5e:	4603      	mov	r3, r0
   d5d60:	f100 021f 	add.w	r2, r0, #31
   d5d64:	2000      	movs	r0, #0
   d5d66:	f803 0b01 	strb.w	r0, [r3], #1
   d5d6a:	4293      	cmp	r3, r2
   d5d6c:	f04f 0100 	mov.w	r1, #0
   d5d70:	d1f9      	bne.n	d5d66 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5d72:	aa04      	add	r2, sp, #16
   d5d74:	2306      	movs	r3, #6
   d5d76:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5d7a:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5d7c:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5d7e:	9100      	str	r1, [sp, #0]
   d5d80:	4620      	mov	r0, r4
   d5d82:	4619      	mov	r1, r3
   d5d84:	f7ff ffa2 	bl	d5ccc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5d88:	4620      	mov	r0, r4
   d5d8a:	b004      	add	sp, #16
   d5d8c:	bd10      	pop	{r4, pc}

000d5d8e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5d8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5d92:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5d94:	b085      	sub	sp, #20
   d5d96:	4606      	mov	r6, r0
   d5d98:	4689      	mov	r9, r1
   d5d9a:	4617      	mov	r7, r2
   d5d9c:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d5d9e:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d5da0:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5da4:	6a31      	ldr	r1, [r6, #32]
   d5da6:	428d      	cmp	r5, r1
   d5da8:	d22a      	bcs.n	d5e00 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d5daa:	ab03      	add	r3, sp, #12
   d5dac:	464a      	mov	r2, r9
   d5dae:	1b49      	subs	r1, r1, r5
   d5db0:	1970      	adds	r0, r6, r5
   d5db2:	f7ff ff73 	bl	d5c9c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d5db6:	4683      	mov	fp, r0
   d5db8:	b310      	cbz	r0, d5e00 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d5dba:	4554      	cmp	r4, sl
   d5dbc:	d220      	bcs.n	d5e00 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d5dbe:	2804      	cmp	r0, #4
   d5dc0:	9903      	ldr	r1, [sp, #12]
   d5dc2:	d10c      	bne.n	d5dde <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d5dc4:	4429      	add	r1, r5
   d5dc6:	1872      	adds	r2, r6, r1
   d5dc8:	1c63      	adds	r3, r4, #1
   d5dca:	78d1      	ldrb	r1, [r2, #3]
   d5dcc:	7892      	ldrb	r2, [r2, #2]
   d5dce:	9301      	str	r3, [sp, #4]
   d5dd0:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d5dd4:	fb08 7004 	mla	r0, r8, r4, r7
   d5dd8:	f7ff fe38 	bl	d5a4c <_ZN8particle7BleUuidaSEt>
   d5ddc:	e00a      	b.n	d5df4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d5dde:	2812      	cmp	r0, #18
   d5de0:	d10a      	bne.n	d5df8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d5de2:	3102      	adds	r1, #2
   d5de4:	4429      	add	r1, r5
   d5de6:	1c63      	adds	r3, r4, #1
   d5de8:	4431      	add	r1, r6
   d5dea:	fb08 7004 	mla	r0, r8, r4, r7
   d5dee:	9301      	str	r3, [sp, #4]
   d5df0:	f7ff fe1f 	bl	d5a32 <_ZN8particle7BleUuidaSEPKh>
   d5df4:	9b01      	ldr	r3, [sp, #4]
   d5df6:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5df8:	9b03      	ldr	r3, [sp, #12]
   d5dfa:	445b      	add	r3, fp
   d5dfc:	441d      	add	r5, r3
   d5dfe:	e7d1      	b.n	d5da4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d5e00:	4620      	mov	r0, r4
   d5e02:	b005      	add	sp, #20
   d5e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5e08 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e0c:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5e0e:	460d      	mov	r5, r1
   d5e10:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e12:	460a      	mov	r2, r1
   d5e14:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5e16:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e18:	f7ff ffb9 	bl	d5d8e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5e1c:	f04f 0814 	mov.w	r8, #20
   d5e20:	1a33      	subs	r3, r6, r0
   d5e22:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e26:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5e28:	2103      	movs	r1, #3
   d5e2a:	4638      	mov	r0, r7
   d5e2c:	f7ff ffaf 	bl	d5d8e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5e30:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5e32:	1b33      	subs	r3, r6, r4
   d5e34:	fb08 5204 	mla	r2, r8, r4, r5
   d5e38:	2106      	movs	r1, #6
   d5e3a:	4638      	mov	r0, r7
   d5e3c:	f7ff ffa7 	bl	d5d8e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5e40:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d5e42:	1b33      	subs	r3, r6, r4
   d5e44:	fb08 5204 	mla	r2, r8, r4, r5
   d5e48:	2107      	movs	r1, #7
   d5e4a:	4638      	mov	r0, r7
   d5e4c:	f7ff ff9f 	bl	d5d8e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d5e50:	4420      	add	r0, r4
   d5e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d5e58 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5e58:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5e5a:	2500      	movs	r5, #0
   d5e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d5e60:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d5e62:	8043      	strh	r3, [r0, #2]
   d5e64:	220e      	movs	r2, #14
   d5e66:	4629      	mov	r1, r5
   d5e68:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5e6a:	7105      	strb	r5, [r0, #4]
   d5e6c:	3006      	adds	r0, #6
   d5e6e:	f003 fae4 	bl	d943a <memset>
   d5e72:	f104 0014 	add.w	r0, r4, #20
   d5e76:	f7ff fd61 	bl	d593c <_ZN8particle7BleUuidC1Ev>
   d5e7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5e7e:	f7ff fd5d 	bl	d593c <_ZN8particle7BleUuidC1Ev>
   d5e82:	4904      	ldr	r1, [pc, #16]	; (d5e94 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5e84:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5e88:	f7ff fbc3 	bl	d5612 <_ZN6StringC1EPK19__FlashStringHelper>
   d5e8c:	64e5      	str	r5, [r4, #76]	; 0x4c
   d5e8e:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d5e90:	4620      	mov	r0, r4
   d5e92:	bd38      	pop	{r3, r4, r5, pc}
   d5e94:	000d9f14 	.word	0x000d9f14

000d5e98 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5e98:	b510      	push	{r4, lr}
   d5e9a:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5e9c:	69c2      	ldr	r2, [r0, #28]
   d5e9e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5ea2:	4293      	cmp	r3, r2
   d5ea4:	4618      	mov	r0, r3
   d5ea6:	d006      	beq.n	d5eb6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5ea8:	6804      	ldr	r4, [r0, #0]
   d5eaa:	8824      	ldrh	r4, [r4, #0]
   d5eac:	428c      	cmp	r4, r1
   d5eae:	f103 0308 	add.w	r3, r3, #8
   d5eb2:	d1f6      	bne.n	d5ea2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5eb4:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d5eb6:	2000      	movs	r0, #0
    }
   d5eb8:	bd10      	pop	{r4, pc}
	...

000d5ebc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5ebc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5ec0:	4680      	mov	r8, r0
   d5ec2:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5ec4:	460e      	mov	r6, r1
   d5ec6:	b369      	cbz	r1, d5f24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5ec8:	b362      	cbz	r2, d5f24 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d5eca:	2af4      	cmp	r2, #244	; 0xf4
   d5ecc:	6805      	ldr	r5, [r0, #0]
   d5ece:	bf28      	it	cs
   d5ed0:	22f4      	movcs	r2, #244	; 0xf4
   d5ed2:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5ed4:	782a      	ldrb	r2, [r5, #0]
   d5ed6:	b1a2      	cbz	r2, d5f02 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d5ed8:	792b      	ldrb	r3, [r5, #4]
   d5eda:	0798      	lsls	r0, r3, #30
   d5edc:	d507      	bpl.n	d5eee <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5ede:	2300      	movs	r3, #0
   d5ee0:	4622      	mov	r2, r4
   d5ee2:	89a8      	ldrh	r0, [r5, #12]
   d5ee4:	f7ff f8a4 	bl	d5030 <hal_ble_gatt_server_set_characteristic_value>
   d5ee8:	2800      	cmp	r0, #0
   d5eea:	da02      	bge.n	d5ef2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5eec:	e043      	b.n	d5f76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5eee:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5ef2:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d5ef6:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d5ef8:	06da      	lsls	r2, r3, #27
   d5efa:	d518      	bpl.n	d5f2e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5efc:	2f01      	cmp	r7, #1
   d5efe:	d123      	bne.n	d5f48 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5f00:	e015      	b.n	d5f2e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5f02:	8868      	ldrh	r0, [r5, #2]
   d5f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5f08:	4298      	cmp	r0, r3
   d5f0a:	d00d      	beq.n	d5f28 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d5f0c:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5f0e:	0759      	lsls	r1, r3, #29
   d5f10:	d523      	bpl.n	d5f5a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5f12:	2f01      	cmp	r7, #1
   d5f14:	d021      	beq.n	d5f5a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f16:	89a9      	ldrh	r1, [r5, #12]
   d5f18:	9200      	str	r2, [sp, #0]
   d5f1a:	4623      	mov	r3, r4
   d5f1c:	4632      	mov	r2, r6
   d5f1e:	f7ff f8af 	bl	d5080 <hal_ble_gatt_client_write_without_response>
   d5f22:	e028      	b.n	d5f76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5f24:	4815      	ldr	r0, [pc, #84]	; (d5f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d5f26:	e026      	b.n	d5f76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d5f28:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5f2c:	e023      	b.n	d5f76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5f2e:	069a      	lsls	r2, r3, #26
   d5f30:	d521      	bpl.n	d5f76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5f32:	2f02      	cmp	r7, #2
   d5f34:	d01f      	beq.n	d5f76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f36:	89a8      	ldrh	r0, [r5, #12]
   d5f38:	2300      	movs	r3, #0
   d5f3a:	4622      	mov	r2, r4
   d5f3c:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5f3e:	b002      	add	sp, #8
   d5f40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f44:	f7ff b8d8 	b.w	d50f8 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f48:	89a8      	ldrh	r0, [r5, #12]
   d5f4a:	2300      	movs	r3, #0
   d5f4c:	4622      	mov	r2, r4
   d5f4e:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5f50:	b002      	add	sp, #8
   d5f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f56:	f7ff b8c5 	b.w	d50e4 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5f5a:	071b      	lsls	r3, r3, #28
   d5f5c:	d501      	bpl.n	d5f62 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d5f5e:	2f02      	cmp	r7, #2
   d5f60:	d102      	bne.n	d5f68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5f62:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5f66:	e006      	b.n	d5f76 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5f68:	2300      	movs	r3, #0
   d5f6a:	89a9      	ldrh	r1, [r5, #12]
   d5f6c:	9300      	str	r3, [sp, #0]
   d5f6e:	4632      	mov	r2, r6
   d5f70:	4623      	mov	r3, r4
   d5f72:	f7ff f87b 	bl	d506c <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5f76:	b002      	add	sp, #8
   d5f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f7c:	fffffef2 	.word	0xfffffef2

000d5f80 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5f80:	b570      	push	{r4, r5, r6, lr}
   d5f82:	6804      	ldr	r4, [r0, #0]
   d5f84:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5f86:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5f88:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5f8a:	2900      	cmp	r1, #0
   d5f8c:	d12e      	bne.n	d5fec <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d5f8e:	8862      	ldrh	r2, [r4, #2]
   d5f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5f94:	429a      	cmp	r2, r3
   d5f96:	d029      	beq.n	d5fec <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5f98:	8a23      	ldrh	r3, [r4, #16]
   d5f9a:	b353      	cbz	r3, d5ff2 <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d5f9c:	2518      	movs	r5, #24
   d5f9e:	462a      	mov	r2, r5
   d5fa0:	4668      	mov	r0, sp
   d5fa2:	f003 fa4a 	bl	d943a <memset>
    config.version = BLE_API_VERSION;
   d5fa6:	2301      	movs	r3, #1
   d5fa8:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d5fac:	4b13      	ldr	r3, [pc, #76]	; (d5ffc <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d5fae:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d5fb2:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d5fb4:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d5fb6:	8863      	ldrh	r3, [r4, #2]
   d5fb8:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d5fbc:	8a23      	ldrh	r3, [r4, #16]
   d5fbe:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d5fc2:	89a3      	ldrh	r3, [r4, #12]
   d5fc4:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d5fc8:	b15e      	cbz	r6, d5fe2 <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d5fca:	7923      	ldrb	r3, [r4, #4]
   d5fcc:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d5fce:	bf44      	itt	mi
   d5fd0:	2302      	movmi	r3, #2
   d5fd2:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d5fd4:	7923      	ldrb	r3, [r4, #4]
   d5fd6:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d5fd8:	bf42      	ittt	mi
   d5fda:	9b05      	ldrmi	r3, [sp, #20]
   d5fdc:	f043 0301 	orrmi.w	r3, r3, #1
   d5fe0:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d5fe2:	2100      	movs	r1, #0
   d5fe4:	4668      	mov	r0, sp
   d5fe6:	f7ff f873 	bl	d50d0 <hal_ble_gatt_client_configure_cccd>
   d5fea:	e004      	b.n	d5ff6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5fec:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5ff0:	e001      	b.n	d5ff6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5ff2:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d5ff6:	b006      	add	sp, #24
   d5ff8:	bd70      	pop	{r4, r5, r6, pc}
   d5ffa:	bf00      	nop
   d5ffc:	000d61d9 	.word	0x000d61d9

000d6000 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d6000:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d6002:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d6004:	651a      	str	r2, [r3, #80]	; 0x50
   d6006:	4770      	bx	lr

000d6008 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d6008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d600c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d600e:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d6010:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d6012:	9302      	str	r3, [sp, #8]
   d6014:	2500      	movs	r5, #0
   d6016:	4b2e      	ldr	r3, [pc, #184]	; (d60d0 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d6018:	9300      	str	r3, [sp, #0]
   d601a:	aa02      	add	r2, sp, #8
   d601c:	462b      	mov	r3, r5
   d601e:	492d      	ldr	r1, [pc, #180]	; (d60d4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d6020:	9503      	str	r5, [sp, #12]
   d6022:	2001      	movs	r0, #1
   d6024:	f7ff f98a 	bl	d533c <log_message>
   d6028:	6833      	ldr	r3, [r6, #0]
   d602a:	68dc      	ldr	r4, [r3, #12]
   d602c:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d602e:	f04f 081c 	mov.w	r8, #28
   d6032:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d6036:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d6038:	f1a4 0308 	sub.w	r3, r4, #8
   d603c:	429f      	cmp	r7, r3
   d603e:	6832      	ldr	r2, [r6, #0]
   d6040:	d017      	beq.n	d6072 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d6042:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d6046:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d604a:	8a9b      	ldrh	r3, [r3, #20]
   d604c:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d6050:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d6054:	8adb      	ldrh	r3, [r3, #22]
   d6056:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d605a:	8810      	ldrh	r0, [r2, #0]
   d605c:	9500      	str	r5, [sp, #0]
   d605e:	4633      	mov	r3, r6
   d6060:	4a1d      	ldr	r2, [pc, #116]	; (d60d8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d6062:	a902      	add	r1, sp, #8
   d6064:	f7fe fff8 	bl	d5058 <hal_ble_gatt_client_discover_characteristics>
   d6068:	2800      	cmp	r0, #0
   d606a:	f104 0408 	add.w	r4, r4, #8
   d606e:	dae3      	bge.n	d6038 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d6070:	e02a      	b.n	d60c8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d6072:	6994      	ldr	r4, [r2, #24]
   d6074:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d6076:	2700      	movs	r7, #0
   d6078:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d607c:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d607e:	f1a4 0308 	sub.w	r3, r4, #8
   d6082:	429d      	cmp	r5, r3
   d6084:	d01f      	beq.n	d60c6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d6086:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d608a:	89db      	ldrh	r3, [r3, #14]
   d608c:	b1cb      	cbz	r3, d60c2 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d608e:	2214      	movs	r2, #20
   d6090:	2100      	movs	r1, #0
   d6092:	a802      	add	r0, sp, #8
   d6094:	f003 f9d1 	bl	d943a <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d6098:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d609c:	89d9      	ldrh	r1, [r3, #14]
   d609e:	6833      	ldr	r3, [r6, #0]
   d60a0:	aa02      	add	r2, sp, #8
   d60a2:	8818      	ldrh	r0, [r3, #0]
   d60a4:	9700      	str	r7, [sp, #0]
   d60a6:	2313      	movs	r3, #19
   d60a8:	f7fe fff4 	bl	d5094 <hal_ble_gatt_client_read>
                if (len > 0) {
   d60ac:	b148      	cbz	r0, d60c2 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d60ae:	ab0a      	add	r3, sp, #40	; 0x28
   d60b0:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d60b2:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d60b4:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d60b8:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d60bc:	303c      	adds	r0, #60	; 0x3c
   d60be:	f7ff fad5 	bl	d566c <_ZN6StringaSEPKc>
   d60c2:	3408      	adds	r4, #8
   d60c4:	e7db      	b.n	d607e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d60c6:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d60c8:	b00a      	add	sp, #40	; 0x28
   d60ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d60ce:	bf00      	nop
   d60d0:	000d9cb7 	.word	0x000d9cb7
   d60d4:	000d9c90 	.word	0x000d9c90
   d60d8:	000d6ce1 	.word	0x000d6ce1

000d60dc <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d60dc:	6803      	ldr	r3, [r0, #0]
   d60de:	8818      	ldrh	r0, [r3, #0]
}
   d60e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d60e4:	1ac0      	subs	r0, r0, r3
   d60e6:	bf18      	it	ne
   d60e8:	2001      	movne	r0, #1
   d60ea:	4770      	bx	lr

000d60ec <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d60ec:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d60ee:	680b      	ldr	r3, [r1, #0]
   d60f0:	f8c2 3002 	str.w	r3, [r2, #2]
   d60f4:	684b      	ldr	r3, [r1, #4]
   d60f6:	f8c2 3006 	str.w	r3, [r2, #6]
   d60fa:	4770      	bx	lr

000d60fc <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d60fc:	b510      	push	{r4, lr}
    return impl()->address();
   d60fe:	680a      	ldr	r2, [r1, #0]
   d6100:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d6104:	6003      	str	r3, [r0, #0]
   d6106:	6853      	ldr	r3, [r2, #4]
   d6108:	6043      	str	r3, [r0, #4]
}
   d610a:	bd10      	pop	{r4, pc}

000d610c <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d610c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d610e:	6802      	ldr	r2, [r0, #0]
   d6110:	680b      	ldr	r3, [r1, #0]
   d6112:	8812      	ldrh	r2, [r2, #0]
   d6114:	881b      	ldrh	r3, [r3, #0]
   d6116:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6118:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d611a:	d10c      	bne.n	d6136 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d611c:	4601      	mov	r1, r0
   d611e:	4668      	mov	r0, sp
   d6120:	f7ff ffec 	bl	d60fc <_ZNK8particle13BlePeerDevice7addressEv>
   d6124:	4621      	mov	r1, r4
   d6126:	a802      	add	r0, sp, #8
   d6128:	f7ff ffe8 	bl	d60fc <_ZNK8particle13BlePeerDevice7addressEv>
   d612c:	a902      	add	r1, sp, #8
   d612e:	4668      	mov	r0, sp
   d6130:	f7ff fb88 	bl	d5844 <_ZNK8particle10BleAddresseqERKS0_>
   d6134:	b900      	cbnz	r0, d6138 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d6136:	2000      	movs	r0, #0
}
   d6138:	b004      	add	sp, #16
   d613a:	bd10      	pop	{r4, pc}

000d613c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d613c:	b510      	push	{r4, lr}
   d613e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6140:	2034      	movs	r0, #52	; 0x34
   d6142:	f7fd ffa8 	bl	d4096 <_Znwj>
   d6146:	4601      	mov	r1, r0
   d6148:	b168      	cbz	r0, d6166 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d614a:	2300      	movs	r3, #0
   d614c:	6003      	str	r3, [r0, #0]
   d614e:	6043      	str	r3, [r0, #4]
   d6150:	6083      	str	r3, [r0, #8]
   d6152:	60c3      	str	r3, [r0, #12]
   d6154:	6103      	str	r3, [r0, #16]
   d6156:	6143      	str	r3, [r0, #20]
   d6158:	6183      	str	r3, [r0, #24]
   d615a:	61c3      	str	r3, [r0, #28]
   d615c:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d615e:	6243      	str	r3, [r0, #36]	; 0x24
   d6160:	6283      	str	r3, [r0, #40]	; 0x28
   d6162:	62c3      	str	r3, [r0, #44]	; 0x2c
   d6164:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6166:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6168:	b919      	cbnz	r1, d6172 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d616a:	4a0a      	ldr	r2, [pc, #40]	; (d6194 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d616c:	200a      	movs	r0, #10
   d616e:	f7ff f8dd 	bl	d532c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d6172:	2000      	movs	r0, #0
   d6174:	f7fe ff38 	bl	d4fe8 <hal_ble_stack_init>
   d6178:	b120      	cbz	r0, d6184 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d617a:	4a06      	ldr	r2, [pc, #24]	; (d6194 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d617c:	2100      	movs	r1, #0
   d617e:	200a      	movs	r0, #10
   d6180:	f7ff f8d4 	bl	d532c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d6184:	2200      	movs	r2, #0
   d6186:	6821      	ldr	r1, [r4, #0]
   d6188:	4803      	ldr	r0, [pc, #12]	; (d6198 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d618a:	f7fe ff97 	bl	d50bc <hal_ble_set_callback_on_periph_link_events>
}
   d618e:	4620      	mov	r0, r4
   d6190:	bd10      	pop	{r4, pc}
   d6192:	bf00      	nop
   d6194:	000d4fc9 	.word	0x000d4fc9
   d6198:	000d660d 	.word	0x000d660d

000d619c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d619c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d619e:	4c0a      	ldr	r4, [pc, #40]	; (d61c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d61a0:	6823      	ldr	r3, [r4, #0]
   d61a2:	07db      	lsls	r3, r3, #31
   d61a4:	d40e      	bmi.n	d61c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d61a6:	4620      	mov	r0, r4
   d61a8:	f7fd ff88 	bl	d40bc <__cxa_guard_acquire>
   d61ac:	b150      	cbz	r0, d61c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d61ae:	4807      	ldr	r0, [pc, #28]	; (d61cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d61b0:	f7ff ffc4 	bl	d613c <_ZN8particle14BleLocalDeviceC1Ev>
   d61b4:	4620      	mov	r0, r4
   d61b6:	f7fd ff86 	bl	d40c6 <__cxa_guard_release>
   d61ba:	4a05      	ldr	r2, [pc, #20]	; (d61d0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d61bc:	4905      	ldr	r1, [pc, #20]	; (d61d4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d61be:	4803      	ldr	r0, [pc, #12]	; (d61cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d61c0:	f002 ff91 	bl	d90e6 <__aeabi_atexit>
    return instance;
}
   d61c4:	4801      	ldr	r0, [pc, #4]	; (d61cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d61c6:	bd10      	pop	{r4, pc}
   d61c8:	2003e3d0 	.word	0x2003e3d0
   d61cc:	2003e3cc 	.word	0x2003e3cc
   d61d0:	2003d8c8 	.word	0x2003d8c8
   d61d4:	000d6375 	.word	0x000d6375

000d61d8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d61d8:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d61da:	6803      	ldr	r3, [r0, #0]
   d61dc:	3b09      	subs	r3, #9
   d61de:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d61e0:	b08a      	sub	sp, #40	; 0x28
   d61e2:	4604      	mov	r4, r0
   d61e4:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d61e6:	d819      	bhi.n	d621c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d61e8:	f7ff ffd8 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d61ec:	88a1      	ldrh	r1, [r4, #4]
   d61ee:	6800      	ldr	r0, [r0, #0]
   d61f0:	f7ff fe52 	bl	d5e98 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d61f4:	4602      	mov	r2, r0
   d61f6:	b958      	cbnz	r0, d6210 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d61f8:	2320      	movs	r3, #32
   d61fa:	9302      	str	r3, [sp, #8]
   d61fc:	4b08      	ldr	r3, [pc, #32]	; (d6220 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d61fe:	9003      	str	r0, [sp, #12]
   d6200:	9300      	str	r3, [sp, #0]
   d6202:	aa02      	add	r2, sp, #8
   d6204:	4603      	mov	r3, r0
   d6206:	4907      	ldr	r1, [pc, #28]	; (d6224 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d6208:	2032      	movs	r0, #50	; 0x32
   d620a:	f7ff f897 	bl	d533c <log_message>
   d620e:	e005      	b.n	d621c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d6210:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d6212:	b11d      	cbz	r5, d621c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d6214:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d6216:	68e1      	ldr	r1, [r4, #12]
   d6218:	6920      	ldr	r0, [r4, #16]
   d621a:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d621c:	b00a      	add	sp, #40	; 0x28
   d621e:	bd70      	pop	{r4, r5, r6, pc}
   d6220:	000d9cda 	.word	0x000d9cda
   d6224:	000d9c90 	.word	0x000d9c90

000d6228 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6228:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d622a:	a801      	add	r0, sp, #4
   d622c:	f7ff faec 	bl	d5808 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d6230:	2000      	movs	r0, #0
   d6232:	f7fe fed9 	bl	d4fe8 <hal_ble_stack_init>
   d6236:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d6238:	a801      	add	r0, sp, #4
   d623a:	f7ff faf3 	bl	d5824 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d623e:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d6242:	b002      	add	sp, #8
   d6244:	bd10      	pop	{r4, pc}
	...

000d6248 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d6248:	b530      	push	{r4, r5, lr}
   d624a:	b08b      	sub	sp, #44	; 0x2c
   d624c:	460d      	mov	r5, r1
    WiringBleLock lk;
   d624e:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d6250:	4614      	mov	r4, r2
    WiringBleLock lk;
   d6252:	f7ff fad9 	bl	d5808 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d6256:	b1b5      	cbz	r5, d6286 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d6258:	b1ac      	cbz	r4, d6286 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d625a:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d625c:	a902      	add	r1, sp, #8
   d625e:	480d      	ldr	r0, [pc, #52]	; (d6294 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d6260:	9406      	str	r4, [sp, #24]
   d6262:	9202      	str	r2, [sp, #8]
   d6264:	9203      	str	r2, [sp, #12]
   d6266:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d6268:	9207      	str	r2, [sp, #28]
   d626a:	9208      	str	r2, [sp, #32]
   d626c:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d626e:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d6270:	f7fe fec2 	bl	d4ff8 <hal_ble_gap_start_scan>
   d6274:	2800      	cmp	r0, #0
   d6276:	bfb8      	it	lt
   d6278:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d627a:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d627c:	bfa8      	it	ge
   d627e:	9c07      	ldrge	r4, [sp, #28]
   d6280:	f7ff f8f8 	bl	d5474 <free>
   d6284:	e000      	b.n	d6288 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d6286:	4c04      	ldr	r4, [pc, #16]	; (d6298 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d6288:	a801      	add	r0, sp, #4
   d628a:	f7ff facb 	bl	d5824 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d628e:	4620      	mov	r0, r4
   d6290:	b00b      	add	sp, #44	; 0x2c
   d6292:	bd30      	pop	{r4, r5, pc}
   d6294:	000d677b 	.word	0x000d677b
   d6298:	fffffef2 	.word	0xfffffef2

000d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d629c:	680b      	ldr	r3, [r1, #0]
   d629e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d62a0:	b113      	cbz	r3, d62a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d62a2:	685a      	ldr	r2, [r3, #4]
   d62a4:	3201      	adds	r2, #1
   d62a6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d62a8:	4770      	bx	lr

000d62aa <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d62aa:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62ac:	f851 3b04 	ldr.w	r3, [r1], #4
   d62b0:	4604      	mov	r4, r0
   d62b2:	f840 3b04 	str.w	r3, [r0], #4
   d62b6:	f7ff fff1 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d62ba:	6823      	ldr	r3, [r4, #0]
   d62bc:	b90b      	cbnz	r3, d62c2 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d62be:	f7ff fa53 	bl	d5768 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d62c2:	4620      	mov	r0, r4
   d62c4:	bd10      	pop	{r4, pc}

000d62c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d62c6:	b510      	push	{r4, lr}
   d62c8:	f851 3b04 	ldr.w	r3, [r1], #4
   d62cc:	4604      	mov	r4, r0
   d62ce:	f840 3b04 	str.w	r3, [r0], #4
   d62d2:	f7ff ffe3 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d62d6:	4620      	mov	r0, r4
   d62d8:	bd10      	pop	{r4, pc}

000d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d62da:	b510      	push	{r4, lr}
   d62dc:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d62de:	6800      	ldr	r0, [r0, #0]
   d62e0:	b128      	cbz	r0, d62ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d62e2:	6843      	ldr	r3, [r0, #4]
   d62e4:	3b01      	subs	r3, #1
   d62e6:	6043      	str	r3, [r0, #4]
   d62e8:	b90b      	cbnz	r3, d62ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d62ea:	f7ff fa47 	bl	d577c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d62ee:	4620      	mov	r0, r4
   d62f0:	bd10      	pop	{r4, pc}

000d62f2 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d62f2:	b510      	push	{r4, lr}
   d62f4:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d62f6:	3004      	adds	r0, #4
   d62f8:	f7ff ffef 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d62fc:	4620      	mov	r0, r4
   d62fe:	bd10      	pop	{r4, pc}

000d6300 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d6300:	b510      	push	{r4, lr}
   d6302:	4604      	mov	r4, r0
   d6304:	3004      	adds	r0, #4
   d6306:	f7ff ffe8 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d630a:	4620      	mov	r0, r4
   d630c:	bd10      	pop	{r4, pc}

000d630e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d630e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6310:	6804      	ldr	r4, [r0, #0]
   d6312:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6314:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6316:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d631a:	42a6      	cmp	r6, r4
   d631c:	d004      	beq.n	d6328 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d631e:	1d20      	adds	r0, r4, #4
   d6320:	f7ff ffdb 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6324:	3408      	adds	r4, #8
   d6326:	e7f8      	b.n	d631a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6328:	6828      	ldr	r0, [r5, #0]
   d632a:	f7ff f8a3 	bl	d5474 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d632e:	4628      	mov	r0, r5
   d6330:	bd70      	pop	{r4, r5, r6, pc}

000d6332 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6332:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6334:	6804      	ldr	r4, [r0, #0]
   d6336:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6338:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d633a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d633e:	42a6      	cmp	r6, r4
   d6340:	d004      	beq.n	d634c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6342:	1d20      	adds	r0, r4, #4
   d6344:	f7ff ffc9 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6348:	3408      	adds	r4, #8
   d634a:	e7f8      	b.n	d633e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d634c:	6828      	ldr	r0, [r5, #0]
   d634e:	f7ff f891 	bl	d5474 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6352:	4628      	mov	r0, r5
   d6354:	bd70      	pop	{r4, r5, r6, pc}

000d6356 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6356:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6358:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d635a:	f104 0018 	add.w	r0, r4, #24
   d635e:	f7ff ffe8 	bl	d6332 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6362:	f104 000c 	add.w	r0, r4, #12
   d6366:	f7ff ffd2 	bl	d630e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d636a:	4620      	mov	r0, r4
   d636c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d6370:	f7fd be95 	b.w	d409e <_ZdlPv>

000d6374 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6376:	6804      	ldr	r4, [r0, #0]
   d6378:	4607      	mov	r7, r0
   d637a:	b1c4      	cbz	r4, d63ae <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d637c:	69a5      	ldr	r5, [r4, #24]
   d637e:	69e3      	ldr	r3, [r4, #28]
   d6380:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6384:	42ae      	cmp	r6, r5
   d6386:	d004      	beq.n	d6392 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6388:	1d28      	adds	r0, r5, #4
   d638a:	f7ff ffa6 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d638e:	3508      	adds	r5, #8
   d6390:	e7f8      	b.n	d6384 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6392:	69a0      	ldr	r0, [r4, #24]
   d6394:	f7ff f86e 	bl	d5474 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d6398:	f104 000c 	add.w	r0, r4, #12
   d639c:	f7ff ffc9 	bl	d6332 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d63a0:	4620      	mov	r0, r4
   d63a2:	f7ff ffb4 	bl	d630e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d63a6:	2134      	movs	r1, #52	; 0x34
   d63a8:	4620      	mov	r0, r4
   d63aa:	f002 fea9 	bl	d9100 <_ZdlPvj>
   d63ae:	4638      	mov	r0, r7
   d63b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d63b4 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d63b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d63b6:	2500      	movs	r5, #0
   d63b8:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d63ba:	6045      	str	r5, [r0, #4]
   d63bc:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d63be:	2024      	movs	r0, #36	; 0x24
   d63c0:	f7fd fe69 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d63c4:	4604      	mov	r4, r0
   d63c6:	b178      	cbz	r0, d63e8 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d63c8:	4603      	mov	r3, r0
   d63ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d63ce:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d63d2:	f8c0 5002 	str.w	r5, [r0, #2]
   d63d6:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d63d8:	7285      	strb	r5, [r0, #10]
   d63da:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d63dc:	60c5      	str	r5, [r0, #12]
   d63de:	6105      	str	r5, [r0, #16]
   d63e0:	6145      	str	r5, [r0, #20]
   d63e2:	6185      	str	r5, [r0, #24]
   d63e4:	61c5      	str	r5, [r0, #28]
   d63e6:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d63e8:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d63ea:	2014      	movs	r0, #20
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	f7fd fe52 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d63f2:	4603      	mov	r3, r0
   d63f4:	b128      	cbz	r0, d6402 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d63f6:	2201      	movs	r2, #1
   d63f8:	6042      	str	r2, [r0, #4]
   d63fa:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d63fc:	4a08      	ldr	r2, [pc, #32]	; (d6420 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d63fe:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6400:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6402:	a802      	add	r0, sp, #8
   d6404:	6872      	ldr	r2, [r6, #4]
   d6406:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d640a:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d640c:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d640e:	f7ff ff64 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d6412:	6833      	ldr	r3, [r6, #0]
   d6414:	b90b      	cbnz	r3, d641a <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d6416:	f7ff f9a7 	bl	d5768 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d641a:	4630      	mov	r0, r6
   d641c:	b002      	add	sp, #8
   d641e:	bd70      	pop	{r4, r5, r6, pc}
   d6420:	000d9c7c 	.word	0x000d9c7c

000d6424 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d6424:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6426:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d6428:	6803      	ldr	r3, [r0, #0]
   d642a:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d642c:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d642e:	d00c      	beq.n	d644a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d6430:	b114      	cbz	r4, d6438 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d6432:	6863      	ldr	r3, [r4, #4]
   d6434:	3301      	adds	r3, #1
   d6436:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d6438:	6828      	ldr	r0, [r5, #0]
   d643a:	b128      	cbz	r0, d6448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d643c:	6843      	ldr	r3, [r0, #4]
   d643e:	3b01      	subs	r3, #1
   d6440:	6043      	str	r3, [r0, #4]
   d6442:	b90b      	cbnz	r3, d6448 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d6444:	f7ff f99a 	bl	d577c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d6448:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d644a:	4628      	mov	r0, r5
   d644c:	bd38      	pop	{r3, r4, r5, pc}

000d644e <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d644e:	b510      	push	{r4, lr}
   d6450:	6802      	ldr	r2, [r0, #0]
   d6452:	680b      	ldr	r3, [r1, #0]
   d6454:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d6456:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d6458:	b110      	cbz	r0, d6460 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d645a:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d645c:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d645e:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d6460:	4620      	mov	r0, r4
   d6462:	f851 3b04 	ldr.w	r3, [r1], #4
   d6466:	f840 3b04 	str.w	r3, [r0], #4
   d646a:	f7ff ffdb 	bl	d6424 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d646e:	4620      	mov	r0, r4
   d6470:	bd10      	pop	{r4, pc}

000d6472 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d6472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6476:	6803      	ldr	r3, [r0, #0]
   d6478:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d647a:	69de      	ldr	r6, [r3, #28]
   d647c:	b087      	sub	sp, #28
   d647e:	460f      	mov	r7, r1
   d6480:	4690      	mov	r8, r2
   d6482:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d6486:	42b4      	cmp	r4, r6
   d6488:	46a1      	mov	r9, r4
   d648a:	d011      	beq.n	d64b0 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d648c:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d6490:	a801      	add	r0, sp, #4
   d6492:	3114      	adds	r1, #20
   d6494:	f7ff fa86 	bl	d59a4 <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d6498:	4641      	mov	r1, r8
   d649a:	a801      	add	r0, sp, #4
   d649c:	f7ff faee 	bl	d5a7c <_ZNK8particle7BleUuideqERKS0_>
   d64a0:	4605      	mov	r5, r0
   d64a2:	2800      	cmp	r0, #0
   d64a4:	d0ef      	beq.n	d6486 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d64a6:	4649      	mov	r1, r9
   d64a8:	4638      	mov	r0, r7
   d64aa:	f7ff ffd0 	bl	d644e <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d64ae:	e000      	b.n	d64b2 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d64b0:	2500      	movs	r5, #0
}
   d64b2:	4628      	mov	r0, r5
   d64b4:	b007      	add	sp, #28
   d64b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d64ba <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d64ba:	b510      	push	{r4, lr}
   d64bc:	f851 3b04 	ldr.w	r3, [r1], #4
   d64c0:	4604      	mov	r4, r0
   d64c2:	f840 3b04 	str.w	r3, [r0], #4
   d64c6:	f7ff ffad 	bl	d6424 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d64ca:	4620      	mov	r0, r4
   d64cc:	bd10      	pop	{r4, pc}

000d64ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d64ce:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d64d0:	b570      	push	{r4, r5, r6, lr}
   d64d2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d64d4:	d91a      	bls.n	d650c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d64d6:	4290      	cmp	r0, r2
   d64d8:	d219      	bcs.n	d650e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d64da:	f1a1 0608 	sub.w	r6, r1, #8
   d64de:	1a51      	subs	r1, r2, r1
   d64e0:	3904      	subs	r1, #4
   d64e2:	1f15      	subs	r5, r2, #4
   d64e4:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d64e6:	1f2b      	subs	r3, r5, #4
   d64e8:	429e      	cmp	r6, r3
   d64ea:	d025      	beq.n	d6538 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d64ec:	2c04      	cmp	r4, #4
   d64ee:	d007      	beq.n	d6500 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64f0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d64f4:	f844 3c04 	str.w	r3, [r4, #-4]
   d64f8:	4629      	mov	r1, r5
   d64fa:	4620      	mov	r0, r4
   d64fc:	f7ff fece 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6500:	4628      	mov	r0, r5
   d6502:	f7ff feea 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6506:	3d08      	subs	r5, #8
   d6508:	3c08      	subs	r4, #8
   d650a:	e7ec      	b.n	d64e6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d650c:	d014      	beq.n	d6538 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d650e:	1d0c      	adds	r4, r1, #4
   d6510:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d6512:	1f23      	subs	r3, r4, #4
   d6514:	429d      	cmp	r5, r3
   d6516:	d00f      	beq.n	d6538 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6518:	2e04      	cmp	r6, #4
   d651a:	d007      	beq.n	d652c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d651c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6520:	f846 3c04 	str.w	r3, [r6, #-4]
   d6524:	4621      	mov	r1, r4
   d6526:	4630      	mov	r0, r6
   d6528:	f7ff feb8 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d652c:	4620      	mov	r0, r4
   d652e:	f7ff fed4 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6532:	3408      	adds	r4, #8
   d6534:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6536:	e7ec      	b.n	d6512 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6538:	bd70      	pop	{r4, r5, r6, pc}

000d653a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d653a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d653e:	6804      	ldr	r4, [r0, #0]
   d6540:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6542:	4605      	mov	r5, r0
   d6544:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6546:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d654a:	42a7      	cmp	r7, r4
   d654c:	d018      	beq.n	d6580 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d654e:	4641      	mov	r1, r8
   d6550:	4620      	mov	r0, r4
   d6552:	f7ff fddb 	bl	d610c <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6556:	4606      	mov	r6, r0
   d6558:	b908      	cbnz	r0, d655e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d655a:	3408      	adds	r4, #8
   d655c:	e7f5      	b.n	d654a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d655e:	b18c      	cbz	r4, d6584 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d6560:	1d20      	adds	r0, r4, #4
   d6562:	f7ff feba 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6566:	682b      	ldr	r3, [r5, #0]
   d6568:	686a      	ldr	r2, [r5, #4]
   d656a:	f104 0108 	add.w	r1, r4, #8
   d656e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6572:	4620      	mov	r0, r4
   d6574:	f7ff ffab 	bl	d64ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6578:	686b      	ldr	r3, [r5, #4]
   d657a:	3b01      	subs	r3, #1
   d657c:	606b      	str	r3, [r5, #4]
    return true;
   d657e:	e002      	b.n	d6586 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6580:	2600      	movs	r6, #0
   d6582:	e000      	b.n	d6586 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d6584:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d6586:	4630      	mov	r0, r6
   d6588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d658c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d658c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d658e:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6590:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d6594:	6847      	ldr	r7, [r0, #4]
   d6596:	9300      	str	r3, [sp, #0]
   d6598:	a801      	add	r0, sp, #4
   d659a:	f7ff fe7f 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d659e:	6866      	ldr	r6, [r4, #4]
   d65a0:	68a3      	ldr	r3, [r4, #8]
   d65a2:	429e      	cmp	r6, r3
   d65a4:	db14      	blt.n	d65d0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d65a6:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d65a8:	2e00      	cmp	r6, #0
   d65aa:	dd0b      	ble.n	d65c4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d65ac:	00f0      	lsls	r0, r6, #3
   d65ae:	f7fe ff59 	bl	d5464 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d65b2:	4605      	mov	r5, r0
   d65b4:	b318      	cbz	r0, d65fe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d65b6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d65ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d65be:	f7ff ff86 	bl	d64ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d65c2:	e000      	b.n	d65c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d65c4:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d65c6:	6820      	ldr	r0, [r4, #0]
   d65c8:	f7fe ff54 	bl	d5474 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d65cc:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d65ce:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d65d0:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d65d2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d65d4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d65d8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d65dc:	4629      	mov	r1, r5
   d65de:	f105 0008 	add.w	r0, r5, #8
   d65e2:	f7ff ff74 	bl	d64ce <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d65e6:	b135      	cbz	r5, d65f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d65e8:	9b00      	ldr	r3, [sp, #0]
   d65ea:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d65ee:	a901      	add	r1, sp, #4
   d65f0:	1d28      	adds	r0, r5, #4
   d65f2:	f7ff fe53 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d65f6:	6863      	ldr	r3, [r4, #4]
   d65f8:	3301      	adds	r3, #1
   d65fa:	6063      	str	r3, [r4, #4]
   d65fc:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d65fe:	a801      	add	r0, sp, #4
   d6600:	f7ff fe6b 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6604:	4628      	mov	r0, r5
   d6606:	b003      	add	sp, #12
   d6608:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d660c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d660c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6610:	4604      	mov	r4, r0
   d6612:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6614:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6616:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6618:	f7ff f8f6 	bl	d5808 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d661c:	6823      	ldr	r3, [r4, #0]
   d661e:	2b03      	cmp	r3, #3
   d6620:	d002      	beq.n	d6628 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d6622:	2b04      	cmp	r3, #4
   d6624:	d042      	beq.n	d66ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d6626:	e087      	b.n	d6738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6628:	a804      	add	r0, sp, #16
   d662a:	f7ff fec3 	bl	d63b4 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d662e:	9b04      	ldr	r3, [sp, #16]
   d6630:	8922      	ldrh	r2, [r4, #8]
   d6632:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6634:	6862      	ldr	r2, [r4, #4]
   d6636:	9904      	ldr	r1, [sp, #16]
   d6638:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d663c:	f8c1 3002 	str.w	r3, [r1, #2]
   d6640:	6853      	ldr	r3, [r2, #4]
   d6642:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6646:	a807      	add	r0, sp, #28
   d6648:	9b04      	ldr	r3, [sp, #16]
   d664a:	9306      	str	r3, [sp, #24]
   d664c:	a905      	add	r1, sp, #20
   d664e:	f7ff fe25 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6652:	a906      	add	r1, sp, #24
   d6654:	f105 0018 	add.w	r0, r5, #24
   d6658:	f7ff ff98 	bl	d658c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d665c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d665e:	a807      	add	r0, sp, #28
   d6660:	f7ff fe3b 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6664:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6666:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6668:	b974      	cbnz	r4, d6688 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d666a:	4b36      	ldr	r3, [pc, #216]	; (d6744 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d666c:	9300      	str	r3, [sp, #0]
   d666e:	aa06      	add	r2, sp, #24
   d6670:	4623      	mov	r3, r4
   d6672:	4935      	ldr	r1, [pc, #212]	; (d6748 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6674:	9407      	str	r4, [sp, #28]
   d6676:	2032      	movs	r0, #50	; 0x32
   d6678:	f7fe fe60 	bl	d533c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d667c:	9b04      	ldr	r3, [sp, #16]
   d667e:	4621      	mov	r1, r4
   d6680:	8818      	ldrh	r0, [r3, #0]
   d6682:	f7fe fccb 	bl	d501c <hal_ble_gap_disconnect>
   d6686:	e00d      	b.n	d66a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6688:	4a30      	ldr	r2, [pc, #192]	; (d674c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d668a:	9200      	str	r2, [sp, #0]
   d668c:	2300      	movs	r3, #0
   d668e:	aa06      	add	r2, sp, #24
   d6690:	492d      	ldr	r1, [pc, #180]	; (d6748 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6692:	9307      	str	r3, [sp, #28]
   d6694:	2001      	movs	r0, #1
   d6696:	f7fe fe51 	bl	d533c <log_message>
                if (impl->connectedCb_) {
   d669a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d669c:	b113      	cbz	r3, d66a4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d669e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d66a0:	a804      	add	r0, sp, #16
   d66a2:	4798      	blx	r3
   d66a4:	a805      	add	r0, sp, #20
   d66a6:	f7ff fe18 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66aa:	e045      	b.n	d6738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d66ac:	8921      	ldrh	r1, [r4, #8]
   d66ae:	4628      	mov	r0, r5
   d66b0:	f7ff fbf2 	bl	d5e98 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d66b4:	4607      	mov	r7, r0
   d66b6:	2800      	cmp	r0, #0
   d66b8:	d03e      	beq.n	d6738 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d66ba:	6804      	ldr	r4, [r0, #0]
   d66bc:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d66be:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d66c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d66c4:	8022      	strh	r2, [r4, #0]
   d66c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d66ca:	4299      	cmp	r1, r3
   d66cc:	d003      	beq.n	d66d6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d66ce:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d66d2:	8042      	strh	r2, [r0, #2]
   d66d4:	e7f9      	b.n	d66ca <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d66d6:	68e6      	ldr	r6, [r4, #12]
   d66d8:	6923      	ldr	r3, [r4, #16]
   d66da:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d66de:	45b0      	cmp	r8, r6
   d66e0:	d004      	beq.n	d66ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d66e2:	1d30      	adds	r0, r6, #4
   d66e4:	f7ff fdf9 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66e8:	3608      	adds	r6, #8
   d66ea:	e7f8      	b.n	d66de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d66ec:	2300      	movs	r3, #0
   d66ee:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d66f0:	69a6      	ldr	r6, [r4, #24]
   d66f2:	69e3      	ldr	r3, [r4, #28]
   d66f4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d66f8:	45b0      	cmp	r8, r6
   d66fa:	d004      	beq.n	d6706 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d66fc:	1d30      	adds	r0, r6, #4
   d66fe:	f7ff fdec 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6702:	3608      	adds	r6, #8
   d6704:	e7f8      	b.n	d66f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6706:	2300      	movs	r3, #0
   d6708:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d670a:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d670c:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d670e:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6710:	b113      	cbz	r3, d6718 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6712:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6714:	4638      	mov	r0, r7
   d6716:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d6718:	2320      	movs	r3, #32
   d671a:	4a0d      	ldr	r2, [pc, #52]	; (d6750 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d671c:	9306      	str	r3, [sp, #24]
   d671e:	9200      	str	r2, [sp, #0]
   d6720:	2300      	movs	r3, #0
   d6722:	4909      	ldr	r1, [pc, #36]	; (d6748 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6724:	9307      	str	r3, [sp, #28]
   d6726:	2001      	movs	r0, #1
   d6728:	aa06      	add	r2, sp, #24
   d672a:	f7fe fe07 	bl	d533c <log_message>
                    impl->peers_.removeOne(*peer);
   d672e:	4639      	mov	r1, r7
   d6730:	f105 0018 	add.w	r0, r5, #24
   d6734:	f7ff ff01 	bl	d653a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6738:	a803      	add	r0, sp, #12
   d673a:	f7ff f873 	bl	d5824 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d673e:	b00e      	add	sp, #56	; 0x38
   d6740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6744:	000d9cf2 	.word	0x000d9cf2
   d6748:	000d9c90 	.word	0x000d9c90
   d674c:	000d9d18 	.word	0x000d9d18
   d6750:	000d9d35 	.word	0x000d9d35

000d6754 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6754:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d6756:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6758:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d675a:	dd06      	ble.n	d676a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d675c:	2154      	movs	r1, #84	; 0x54
   d675e:	4369      	muls	r1, r5
   d6760:	6800      	ldr	r0, [r0, #0]
   d6762:	f7fe fe8f 	bl	d5484 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6766:	b920      	cbnz	r0, d6772 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d6768:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d676a:	6800      	ldr	r0, [r0, #0]
   d676c:	f7fe fe82 	bl	d5474 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6770:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6772:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6774:	60a5      	str	r5, [r4, #8]
        return true;
   d6776:	2001      	movs	r0, #1
    }
   d6778:	bd38      	pop	{r3, r4, r5, pc}

000d677a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d677a:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d677c:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d677e:	b0c0      	sub	sp, #256	; 0x100
   d6780:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6782:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6784:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6786:	a801      	add	r0, sp, #4
   d6788:	2100      	movs	r1, #0
   d678a:	f002 fe56 	bl	d943a <memset>
   d678e:	a803      	add	r0, sp, #12
   d6790:	f7ff fae3 	bl	d5d5a <_ZN8particle18BleAdvertisingDataC1Ev>
   d6794:	a80c      	add	r0, sp, #48	; 0x30
   d6796:	f7ff fae0 	bl	d5d5a <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d679a:	462a      	mov	r2, r5
   d679c:	ab01      	add	r3, sp, #4
   d679e:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d67a2:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d67a4:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d67a6:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d67a8:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d67aa:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d67ac:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d67b0:	a80c      	add	r0, sp, #48	; 0x30
   d67b2:	f7ff fa63 	bl	d5c7c <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d67b6:	89aa      	ldrh	r2, [r5, #12]
   d67b8:	6869      	ldr	r1, [r5, #4]
   d67ba:	a803      	add	r0, sp, #12
   d67bc:	f7ff fa5e 	bl	d5c7c <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d67c0:	69a5      	ldr	r5, [r4, #24]
   d67c2:	b11d      	cbz	r5, d67cc <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d67c4:	69e1      	ldr	r1, [r4, #28]
   d67c6:	a801      	add	r0, sp, #4
   d67c8:	47a8      	blx	r5
   d67ca:	e03c      	b.n	d6846 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d67cc:	68e0      	ldr	r0, [r4, #12]
   d67ce:	b198      	cbz	r0, d67f8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d67d0:	6963      	ldr	r3, [r4, #20]
   d67d2:	6922      	ldr	r2, [r4, #16]
   d67d4:	4293      	cmp	r3, r2
   d67d6:	d239      	bcs.n	d684c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d67d8:	1c5a      	adds	r2, r3, #1
   d67da:	6162      	str	r2, [r4, #20]
   d67dc:	fb06 0003 	mla	r0, r6, r3, r0
   d67e0:	2251      	movs	r2, #81	; 0x51
   d67e2:	a901      	add	r1, sp, #4
   d67e4:	f002 fe03 	bl	d93ee <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d67e8:	6962      	ldr	r2, [r4, #20]
   d67ea:	6923      	ldr	r3, [r4, #16]
   d67ec:	429a      	cmp	r2, r3
   d67ee:	d32d      	bcc.n	d684c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d67f0:	4628      	mov	r0, r5
   d67f2:	f7fe fc09 	bl	d5008 <hal_ble_gap_stop_scan>
   d67f6:	e029      	b.n	d684c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d67f8:	4632      	mov	r2, r6
   d67fa:	a901      	add	r1, sp, #4
   d67fc:	a816      	add	r0, sp, #88	; 0x58
   d67fe:	f002 fdf6 	bl	d93ee <memcpy>
   d6802:	4632      	mov	r2, r6
   d6804:	a916      	add	r1, sp, #88	; 0x58
   d6806:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6808:	6865      	ldr	r5, [r4, #4]
   d680a:	f002 fdf0 	bl	d93ee <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d680e:	68a3      	ldr	r3, [r4, #8]
   d6810:	429d      	cmp	r5, r3
   d6812:	db04      	blt.n	d681e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d6814:	1c69      	adds	r1, r5, #1
   d6816:	4620      	mov	r0, r4
   d6818:	f7ff ff9c 	bl	d6754 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d681c:	b1b0      	cbz	r0, d684c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d681e:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6820:	6822      	ldr	r2, [r4, #0]
   d6822:	2654      	movs	r6, #84	; 0x54
   d6824:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6828:	fb06 2203 	mla	r2, r6, r3, r2
   d682c:	1b52      	subs	r2, r2, r5
   d682e:	4629      	mov	r1, r5
   d6830:	19a8      	adds	r0, r5, r6
   d6832:	f002 fde7 	bl	d9404 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6836:	4632      	mov	r2, r6
   d6838:	a92b      	add	r1, sp, #172	; 0xac
   d683a:	4628      	mov	r0, r5
   d683c:	f002 fdd7 	bl	d93ee <memcpy>
    ++size_;
   d6840:	6863      	ldr	r3, [r4, #4]
   d6842:	3301      	adds	r3, #1
   d6844:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d6846:	6963      	ldr	r3, [r4, #20]
   d6848:	3301      	adds	r3, #1
   d684a:	6163      	str	r3, [r4, #20]
        }
    }
   d684c:	b040      	add	sp, #256	; 0x100
   d684e:	bd70      	pop	{r4, r5, r6, pc}

000d6850 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6850:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6854:	4606      	mov	r6, r0
   d6856:	460c      	mov	r4, r1
   d6858:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d685a:	d914      	bls.n	d6886 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d685c:	4290      	cmp	r0, r2
   d685e:	d213      	bcs.n	d6888 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6860:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6864:	1a6c      	subs	r4, r5, r1
   d6866:	f1a1 0708 	sub.w	r7, r1, #8
   d686a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d686c:	42af      	cmp	r7, r5
   d686e:	d018      	beq.n	d68a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6870:	b11c      	cbz	r4, d687a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6872:	4629      	mov	r1, r5
   d6874:	4620      	mov	r0, r4
   d6876:	f7ff fd26 	bl	d62c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d687a:	1d28      	adds	r0, r5, #4
   d687c:	f7ff fd2d 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6880:	3d08      	subs	r5, #8
   d6882:	3c08      	subs	r4, #8
   d6884:	e7f2      	b.n	d686c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6886:	d00c      	beq.n	d68a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6888:	42ac      	cmp	r4, r5
   d688a:	d00a      	beq.n	d68a2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d688c:	b11e      	cbz	r6, d6896 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d688e:	4621      	mov	r1, r4
   d6890:	4630      	mov	r0, r6
   d6892:	f7ff fd18 	bl	d62c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6896:	1d20      	adds	r0, r4, #4
   d6898:	f7ff fd1f 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d689c:	3408      	adds	r4, #8
   d689e:	3608      	adds	r6, #8
   d68a0:	e7f2      	b.n	d6888 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d68a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d68a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d68a4:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d68a6:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d68a8:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d68aa:	dd0b      	ble.n	d68c4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d68ac:	00f0      	lsls	r0, r6, #3
   d68ae:	f7fe fdd9 	bl	d5464 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d68b2:	4604      	mov	r4, r0
   d68b4:	b170      	cbz	r0, d68d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d68b6:	e895 0006 	ldmia.w	r5, {r1, r2}
   d68ba:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d68be:	f7ff ffc7 	bl	d6850 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d68c2:	e000      	b.n	d68c6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d68c4:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d68c6:	6828      	ldr	r0, [r5, #0]
   d68c8:	f7fe fdd4 	bl	d5474 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d68cc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d68ce:	60ae      	str	r6, [r5, #8]
        return true;
   d68d0:	2001      	movs	r0, #1
   d68d2:	bd70      	pop	{r4, r5, r6, pc}
    }
   d68d4:	bd70      	pop	{r4, r5, r6, pc}

000d68d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d68d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d68da:	2300      	movs	r3, #0
   d68dc:	6003      	str	r3, [r0, #0]
   d68de:	6043      	str	r3, [r0, #4]
   d68e0:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d68e2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d68e4:	6849      	ldr	r1, [r1, #4]
   d68e6:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d68e8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d68ea:	dd13      	ble.n	d6914 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d68ec:	f7ff ffda 	bl	d68a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d68f0:	b180      	cbz	r0, d6914 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d68f2:	6835      	ldr	r5, [r6, #0]
   d68f4:	6873      	ldr	r3, [r6, #4]
   d68f6:	6827      	ldr	r7, [r4, #0]
   d68f8:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d68fc:	4545      	cmp	r5, r8
   d68fe:	d007      	beq.n	d6910 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6900:	b11f      	cbz	r7, d690a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6902:	4629      	mov	r1, r5
   d6904:	4638      	mov	r0, r7
   d6906:	f7ff fcde 	bl	d62c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d690a:	3508      	adds	r5, #8
   d690c:	3708      	adds	r7, #8
   d690e:	e7f5      	b.n	d68fc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6910:	6873      	ldr	r3, [r6, #4]
   d6912:	6063      	str	r3, [r4, #4]
    }
}
   d6914:	4620      	mov	r0, r4
   d6916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d691a <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d691a:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d691c:	680b      	ldr	r3, [r1, #0]
   d691e:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6920:	4605      	mov	r5, r0
   d6922:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6924:	b933      	cbnz	r3, d6934 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d6926:	4608      	mov	r0, r1
   d6928:	f7fe ff00 	bl	d572c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d692c:	b910      	cbnz	r0, d6934 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d692e:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d6930:	2201      	movs	r2, #1
   d6932:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d6934:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d6936:	4628      	mov	r0, r5
   d6938:	310c      	adds	r1, #12
   d693a:	f7ff ffcc 	bl	d68d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d693e:	4628      	mov	r0, r5
   d6940:	bd38      	pop	{r3, r4, r5, pc}

000d6942 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6942:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6944:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6946:	6845      	ldr	r5, [r0, #4]
   d6948:	4668      	mov	r0, sp
   d694a:	f7ff fcbc 	bl	d62c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d694e:	6861      	ldr	r1, [r4, #4]
   d6950:	68a3      	ldr	r3, [r4, #8]
   d6952:	4299      	cmp	r1, r3
   d6954:	db05      	blt.n	d6962 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6956:	3101      	adds	r1, #1
   d6958:	4620      	mov	r0, r4
   d695a:	f7ff ffa3 	bl	d68a4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d695e:	4606      	mov	r6, r0
   d6960:	b198      	cbz	r0, d698a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6962:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6964:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6966:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d696a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d696e:	4629      	mov	r1, r5
   d6970:	f105 0008 	add.w	r0, r5, #8
   d6974:	f7ff ff6c 	bl	d6850 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6978:	b11d      	cbz	r5, d6982 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d697a:	4669      	mov	r1, sp
   d697c:	4628      	mov	r0, r5
   d697e:	f7ff fca2 	bl	d62c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6982:	6863      	ldr	r3, [r4, #4]
   d6984:	3301      	adds	r3, #1
   d6986:	6063      	str	r3, [r4, #4]
   d6988:	2601      	movs	r6, #1
   d698a:	a801      	add	r0, sp, #4
   d698c:	f7ff fca5 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6990:	4630      	mov	r0, r6
   d6992:	b002      	add	sp, #8
   d6994:	bd70      	pop	{r4, r5, r6, pc}

000d6996 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6996:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d699a:	4606      	mov	r6, r0
   d699c:	460c      	mov	r4, r1
   d699e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d69a0:	d914      	bls.n	d69cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d69a2:	4290      	cmp	r0, r2
   d69a4:	d213      	bcs.n	d69ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d69a6:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d69aa:	1a6c      	subs	r4, r5, r1
   d69ac:	f1a1 0708 	sub.w	r7, r1, #8
   d69b0:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d69b2:	42af      	cmp	r7, r5
   d69b4:	d018      	beq.n	d69e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d69b6:	b11c      	cbz	r4, d69c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d69b8:	4629      	mov	r1, r5
   d69ba:	4620      	mov	r0, r4
   d69bc:	f7ff fc75 	bl	d62aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d69c0:	1d28      	adds	r0, r5, #4
   d69c2:	f7ff fc8a 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d69c6:	3d08      	subs	r5, #8
   d69c8:	3c08      	subs	r4, #8
   d69ca:	e7f2      	b.n	d69b2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d69cc:	d00c      	beq.n	d69e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d69ce:	42ac      	cmp	r4, r5
   d69d0:	d00a      	beq.n	d69e8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d69d2:	b11e      	cbz	r6, d69dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d69d4:	4621      	mov	r1, r4
   d69d6:	4630      	mov	r0, r6
   d69d8:	f7ff fc67 	bl	d62aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d69dc:	1d20      	adds	r0, r4, #4
   d69de:	f7ff fc7c 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d69e2:	3408      	adds	r4, #8
   d69e4:	3608      	adds	r6, #8
   d69e6:	e7f2      	b.n	d69ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d69e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d69ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d69ea:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d69ec:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d69ee:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d69f0:	dd0b      	ble.n	d6a0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d69f2:	00f0      	lsls	r0, r6, #3
   d69f4:	f7fe fd36 	bl	d5464 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d69f8:	4604      	mov	r4, r0
   d69fa:	b170      	cbz	r0, d6a1a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d69fc:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6a00:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6a04:	f7ff ffc7 	bl	d6996 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6a08:	e000      	b.n	d6a0c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6a0a:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a0c:	6828      	ldr	r0, [r5, #0]
   d6a0e:	f7fe fd31 	bl	d5474 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6a12:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6a14:	60ae      	str	r6, [r5, #8]
        return true;
   d6a16:	2001      	movs	r0, #1
   d6a18:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6a1a:	bd70      	pop	{r4, r5, r6, pc}

000d6a1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a20:	2300      	movs	r3, #0
   d6a22:	6003      	str	r3, [r0, #0]
   d6a24:	6043      	str	r3, [r0, #4]
   d6a26:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6a28:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6a2a:	6849      	ldr	r1, [r1, #4]
   d6a2c:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6a2e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6a30:	dd13      	ble.n	d6a5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6a32:	f7ff ffda 	bl	d69ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6a36:	b180      	cbz	r0, d6a5a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6a38:	6835      	ldr	r5, [r6, #0]
   d6a3a:	6873      	ldr	r3, [r6, #4]
   d6a3c:	6827      	ldr	r7, [r4, #0]
   d6a3e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6a42:	4545      	cmp	r5, r8
   d6a44:	d007      	beq.n	d6a56 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6a46:	b11f      	cbz	r7, d6a50 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6a48:	4629      	mov	r1, r5
   d6a4a:	4638      	mov	r0, r7
   d6a4c:	f7ff fc2d 	bl	d62aa <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6a50:	3508      	adds	r5, #8
   d6a52:	3708      	adds	r7, #8
   d6a54:	e7f5      	b.n	d6a42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6a56:	6873      	ldr	r3, [r6, #4]
   d6a58:	6063      	str	r3, [r4, #4]
    }
}
   d6a5a:	4620      	mov	r0, r4
   d6a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6a60 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6a60:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6a62:	680b      	ldr	r3, [r1, #0]
   d6a64:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6a66:	b085      	sub	sp, #20
   d6a68:	4605      	mov	r5, r0
   d6a6a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6a6c:	b92b      	cbnz	r3, d6a7a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d6a6e:	a801      	add	r0, sp, #4
   d6a70:	f7ff ff53 	bl	d691a <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d6a74:	a801      	add	r0, sp, #4
   d6a76:	f7ff fc4a 	bl	d630e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d6a7a:	6823      	ldr	r3, [r4, #0]
   d6a7c:	7adb      	ldrb	r3, [r3, #11]
   d6a7e:	b93b      	cbnz	r3, d6a90 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d6a80:	4621      	mov	r1, r4
   d6a82:	a801      	add	r0, sp, #4
   d6a84:	f7ff fac0 	bl	d6008 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d6a88:	b910      	cbnz	r0, d6a90 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d6a8a:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d6a8c:	2201      	movs	r2, #1
   d6a8e:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6a90:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d6a92:	4628      	mov	r0, r5
   d6a94:	3118      	adds	r1, #24
   d6a96:	f7ff ffc1 	bl	d6a1c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d6a9a:	4628      	mov	r0, r5
   d6a9c:	b005      	add	sp, #20
   d6a9e:	bd30      	pop	{r4, r5, pc}

000d6aa0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6aa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6aa4:	460d      	mov	r5, r1
   d6aa6:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d6aa8:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6aac:	4617      	mov	r7, r2
   d6aae:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d6ab0:	4642      	mov	r2, r8
   d6ab2:	2100      	movs	r1, #0
   d6ab4:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6ab6:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d6ab8:	f002 fcbf 	bl	d943a <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6abc:	6869      	ldr	r1, [r5, #4]
   d6abe:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d6ac0:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6ac2:	ab02      	add	r3, sp, #8
   d6ac4:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6ac6:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d6aca:	ab05      	add	r3, sp, #20
   d6acc:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6ad0:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d6ad4:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d6ad8:	f7ff fb60 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6adc:	4b34      	ldr	r3, [pc, #208]	; (d6bb0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d6ade:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6ae0:	f7ff fb5c 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6ae4:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ae6:	6803      	ldr	r3, [r0, #0]
   d6ae8:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6aea:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6aec:	a804      	add	r0, sp, #16
   d6aee:	f7fe fadb 	bl	d50a8 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d6af2:	4607      	mov	r7, r0
   d6af4:	b120      	cbz	r0, d6b00 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d6af6:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6afc:	801a      	strh	r2, [r3, #0]
        return ret;
   d6afe:	e053      	b.n	d6ba8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d6b00:	4629      	mov	r1, r5
   d6b02:	4630      	mov	r0, r6
   d6b04:	f7ff faf2 	bl	d60ec <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6b08:	f7ff fb48 	bl	d619c <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b0c:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d6b0e:	6803      	ldr	r3, [r0, #0]
   d6b10:	ad12      	add	r5, sp, #72	; 0x48
   d6b12:	f103 0818 	add.w	r8, r3, #24
   d6b16:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b1a:	f845 3d20 	str.w	r3, [r5, #-32]!
   d6b1e:	a80b      	add	r0, sp, #44	; 0x2c
   d6b20:	f7ff fbbc 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6b24:	4629      	mov	r1, r5
   d6b26:	4640      	mov	r0, r8
   d6b28:	f7ff fd30 	bl	d658c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6b2c:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b2e:	a80b      	add	r0, sp, #44	; 0x2c
   d6b30:	f7ff fbd3 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b34:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d6b36:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6b38:	f1b8 0f00 	cmp.w	r8, #0
   d6b3c:	d114      	bne.n	d6b68 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d6b3e:	4b1d      	ldr	r3, [pc, #116]	; (d6bb4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d6b40:	9300      	str	r3, [sp, #0]
   d6b42:	462a      	mov	r2, r5
   d6b44:	4643      	mov	r3, r8
   d6b46:	491c      	ldr	r1, [pc, #112]	; (d6bb8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6b48:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d6b4c:	2032      	movs	r0, #50	; 0x32
   d6b4e:	f7fe fbf5 	bl	d533c <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d6b52:	6833      	ldr	r3, [r6, #0]
   d6b54:	4641      	mov	r1, r8
   d6b56:	8818      	ldrh	r0, [r3, #0]
   d6b58:	f7fe fa60 	bl	d501c <hal_ble_gap_disconnect>
   d6b5c:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d6b5e:	4817      	ldr	r0, [pc, #92]	; (d6bbc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6b60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6b64:	801a      	strh	r2, [r3, #0]
   d6b66:	e01f      	b.n	d6ba8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d6b68:	4b15      	ldr	r3, [pc, #84]	; (d6bc0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d6b6a:	9300      	str	r3, [sp, #0]
   d6b6c:	462a      	mov	r2, r5
   d6b6e:	463b      	mov	r3, r7
   d6b70:	4911      	ldr	r1, [pc, #68]	; (d6bb8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6b72:	970b      	str	r7, [sp, #44]	; 0x2c
   d6b74:	4648      	mov	r0, r9
   d6b76:	f7fe fbe1 	bl	d533c <log_message>
    if (automatic) {
   d6b7a:	b1a4      	cbz	r4, d6ba6 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6b7c:	4631      	mov	r1, r6
   d6b7e:	4628      	mov	r0, r5
   d6b80:	f7ff ff6e 	bl	d6a60 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d6b84:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6b86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6b88:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d6b8c:	42a6      	cmp	r6, r4
   d6b8e:	d005      	beq.n	d6b9c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d6b90:	4620      	mov	r0, r4
   d6b92:	2101      	movs	r1, #1
   d6b94:	f7ff f9f4 	bl	d5f80 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d6b98:	3408      	adds	r4, #8
   d6b9a:	e7f7      	b.n	d6b8c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6b9c:	4628      	mov	r0, r5
   d6b9e:	f7ff fbc8 	bl	d6332 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d6ba2:	2000      	movs	r0, #0
   d6ba4:	e000      	b.n	d6ba8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d6ba6:	4620      	mov	r0, r4
}
   d6ba8:	b013      	add	sp, #76	; 0x4c
   d6baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6bae:	bf00      	nop
   d6bb0:	000d660d 	.word	0x000d660d
   d6bb4:	000d9d54 	.word	0x000d9d54
   d6bb8:	000d9c90 	.word	0x000d9c90
   d6bbc:	fffffefc 	.word	0xfffffefc
   d6bc0:	000d9d70 	.word	0x000d9d70

000d6bc4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d6bc4:	b570      	push	{r4, r5, r6, lr}
   d6bc6:	4604      	mov	r4, r0
   d6bc8:	4615      	mov	r5, r2
   d6bca:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d6bcc:	f7ff fbf2 	bl	d63b4 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d6bd0:	4633      	mov	r3, r6
   d6bd2:	2200      	movs	r2, #0
   d6bd4:	4629      	mov	r1, r5
   d6bd6:	4620      	mov	r0, r4
   d6bd8:	f7ff ff62 	bl	d6aa0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d6bdc:	4620      	mov	r0, r4
   d6bde:	bd70      	pop	{r4, r5, r6, pc}

000d6be0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6be0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6be2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6be4:	6845      	ldr	r5, [r0, #4]
   d6be6:	4668      	mov	r0, sp
   d6be8:	f7ff fb5f 	bl	d62aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6bec:	6861      	ldr	r1, [r4, #4]
   d6bee:	68a3      	ldr	r3, [r4, #8]
   d6bf0:	4299      	cmp	r1, r3
   d6bf2:	db05      	blt.n	d6c00 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6bf4:	3101      	adds	r1, #1
   d6bf6:	4620      	mov	r0, r4
   d6bf8:	f7ff fef7 	bl	d69ea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6bfc:	4606      	mov	r6, r0
   d6bfe:	b198      	cbz	r0, d6c28 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6c00:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6c02:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c04:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6c08:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6c0c:	4629      	mov	r1, r5
   d6c0e:	f105 0008 	add.w	r0, r5, #8
   d6c12:	f7ff fec0 	bl	d6996 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6c16:	b11d      	cbz	r5, d6c20 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6c18:	4669      	mov	r1, sp
   d6c1a:	4628      	mov	r0, r5
   d6c1c:	f7ff fb45 	bl	d62aa <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d6c20:	6863      	ldr	r3, [r4, #4]
   d6c22:	3301      	adds	r3, #1
   d6c24:	6063      	str	r3, [r4, #4]
   d6c26:	2601      	movs	r6, #1
   d6c28:	a801      	add	r0, sp, #4
   d6c2a:	f7ff fb56 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6c2e:	4630      	mov	r0, r6
   d6c30:	b002      	add	sp, #8
   d6c32:	bd70      	pop	{r4, r5, r6, pc}

000d6c34 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6c34:	b510      	push	{r4, lr}
   d6c36:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6c38:	6840      	ldr	r0, [r0, #4]
   d6c3a:	b108      	cbz	r0, d6c40 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6c3c:	f7fd fa2f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6c40:	4620      	mov	r0, r4
   d6c42:	bd10      	pop	{r4, pc}

000d6c44 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6c44:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6c46:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6c48:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6c4a:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d6c4e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d6c52:	f7fe fc97 	bl	d5584 <_ZN6StringD1Ev>
   d6c56:	4668      	mov	r0, sp
   d6c58:	f7ff ffec 	bl	d6c34 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6c5c:	b003      	add	sp, #12
   d6c5e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6c64:	b538      	push	{r3, r4, r5, lr}
   d6c66:	2300      	movs	r3, #0
   d6c68:	4604      	mov	r4, r0
   d6c6a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6c6c:	2014      	movs	r0, #20
   d6c6e:	460d      	mov	r5, r1
   d6c70:	f7fd fa11 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6c74:	b128      	cbz	r0, d6c82 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6c76:	2301      	movs	r3, #1
   d6c78:	6043      	str	r3, [r0, #4]
   d6c7a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6c7c:	4b02      	ldr	r3, [pc, #8]	; (d6c88 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6c7e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6c80:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6c82:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6c84:	4620      	mov	r0, r4
   d6c86:	bd38      	pop	{r3, r4, r5, pc}
   d6c88:	000d9c44 	.word	0x000d9c44

000d6c8c <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d6c8c:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6c8e:	2500      	movs	r5, #0
   d6c90:	b086      	sub	sp, #24
   d6c92:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6c94:	6045      	str	r5, [r0, #4]
   d6c96:	4604      	mov	r4, r0
   d6c98:	2054      	movs	r0, #84	; 0x54
   d6c9a:	f7fd f9fc 	bl	d4096 <_Znwj>
   d6c9e:	f8cd d010 	str.w	sp, [sp, #16]
   d6ca2:	4606      	mov	r6, r0
   d6ca4:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6ca6:	b108      	cbz	r0, d6cac <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d6ca8:	f7ff f8d6 	bl	d5e58 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6cac:	4631      	mov	r1, r6
   d6cae:	ab01      	add	r3, sp, #4
   d6cb0:	aa02      	add	r2, sp, #8
   d6cb2:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6cb4:	9505      	str	r5, [sp, #20]
   d6cb6:	f7ff ffd5 	bl	d6c64 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6cba:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6cbc:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6cbe:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6cc0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6cc2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6cc4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6cc6:	f7ff fb08 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6cca:	a804      	add	r0, sp, #16
   d6ccc:	f7ff ffb2 	bl	d6c34 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d6cd0:	6823      	ldr	r3, [r4, #0]
   d6cd2:	b90b      	cbnz	r3, d6cd8 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d6cd4:	f7fe fd48 	bl	d5768 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d6cd8:	4620      	mov	r0, r4
   d6cda:	b006      	add	sp, #24
   d6cdc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6ce0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6ce4:	f8df 8104 	ldr.w	r8, [pc, #260]	; d6dec <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6ce8:	b08c      	sub	sp, #48	; 0x30
   d6cea:	4605      	mov	r5, r0
   d6cec:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6cee:	2600      	movs	r6, #0
   d6cf0:	682b      	ldr	r3, [r5, #0]
   d6cf2:	429e      	cmp	r6, r3
   d6cf4:	d275      	bcs.n	d6de2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d6cf6:	a802      	add	r0, sp, #8
   d6cf8:	f7ff ffc8 	bl	d6c8c <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d6cfc:	9b02      	ldr	r3, [sp, #8]
   d6cfe:	892a      	ldrh	r2, [r5, #8]
   d6d00:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6d02:	686b      	ldr	r3, [r5, #4]
   d6d04:	9802      	ldr	r0, [sp, #8]
   d6d06:	242a      	movs	r4, #42	; 0x2a
   d6d08:	4374      	muls	r4, r6
   d6d0a:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d6d0c:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6d0e:	7e5b      	ldrb	r3, [r3, #25]
   d6d10:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d6d14:	bf1e      	ittt	ne
   d6d16:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d6d1a:	f043 0302 	orrne.w	r3, r3, #2
   d6d1e:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d6d22:	686b      	ldr	r3, [r5, #4]
   d6d24:	4423      	add	r3, r4
   d6d26:	7e5b      	ldrb	r3, [r3, #25]
   d6d28:	075b      	lsls	r3, r3, #29
   d6d2a:	bf42      	ittt	mi
   d6d2c:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6d30:	f043 0304 	orrmi.w	r3, r3, #4
   d6d34:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d6d38:	686b      	ldr	r3, [r5, #4]
   d6d3a:	4423      	add	r3, r4
   d6d3c:	7e5b      	ldrb	r3, [r3, #25]
   d6d3e:	0719      	lsls	r1, r3, #28
   d6d40:	bf42      	ittt	mi
   d6d42:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6d46:	f043 0308 	orrmi.w	r3, r3, #8
   d6d4a:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d6d4e:	686b      	ldr	r3, [r5, #4]
   d6d50:	4423      	add	r3, r4
   d6d52:	7e5b      	ldrb	r3, [r3, #25]
   d6d54:	06da      	lsls	r2, r3, #27
   d6d56:	bf42      	ittt	mi
   d6d58:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6d5c:	f043 0310 	orrmi.w	r3, r3, #16
   d6d60:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6d64:	686b      	ldr	r3, [r5, #4]
   d6d66:	4423      	add	r3, r4
   d6d68:	7e5b      	ldrb	r3, [r3, #25]
   d6d6a:	069b      	lsls	r3, r3, #26
   d6d6c:	bf42      	ittt	mi
   d6d6e:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6d72:	f043 0320 	orrmi.w	r3, r3, #32
   d6d76:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d6d7a:	6869      	ldr	r1, [r5, #4]
   d6d7c:	4421      	add	r1, r4
   d6d7e:	3104      	adds	r1, #4
   d6d80:	f7fe fe70 	bl	d5a64 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6d84:	686a      	ldr	r2, [r5, #4]
   d6d86:	9b02      	ldr	r3, [sp, #8]
   d6d88:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d6d8a:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d6d8c:	8be2      	ldrh	r2, [r4, #30]
   d6d8e:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d6d90:	8c22      	ldrh	r2, [r4, #32]
   d6d92:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d6d94:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d6d96:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d6d98:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d6d9a:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d6d9c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d6d9e:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d6da0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d6da2:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6da4:	6838      	ldr	r0, [r7, #0]
   d6da6:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d6daa:	a804      	add	r0, sp, #16
   d6dac:	f7ff fa7d 	bl	d62aa <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6db0:	4620      	mov	r0, r4
   d6db2:	a904      	add	r1, sp, #16
   d6db4:	f7ff ff14 	bl	d6be0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6db8:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6dba:	a805      	add	r0, sp, #20
   d6dbc:	f7ff fa8d 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6dc0:	b954      	cbnz	r4, d6dd8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6dc2:	2320      	movs	r3, #32
   d6dc4:	9304      	str	r3, [sp, #16]
   d6dc6:	f8cd 8000 	str.w	r8, [sp]
   d6dca:	4623      	mov	r3, r4
   d6dcc:	aa04      	add	r2, sp, #16
   d6dce:	4906      	ldr	r1, [pc, #24]	; (d6de8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d6dd0:	9405      	str	r4, [sp, #20]
   d6dd2:	2032      	movs	r0, #50	; 0x32
   d6dd4:	f7fe fab2 	bl	d533c <log_message>
   d6dd8:	a803      	add	r0, sp, #12
   d6dda:	f7ff fa7e 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6dde:	3601      	adds	r6, #1
   d6de0:	e786      	b.n	d6cf0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d6de2:	b00c      	add	sp, #48	; 0x30
   d6de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6de8:	000d9c90 	.word	0x000d9c90
   d6dec:	000d9d8d 	.word	0x000d9d8d

000d6df0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6df0:	b510      	push	{r4, lr}
   d6df2:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6df4:	6840      	ldr	r0, [r0, #4]
   d6df6:	b108      	cbz	r0, d6dfc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6df8:	f7fd f951 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	bd10      	pop	{r4, pc}

000d6e00 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d6e00:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6e02:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d6e04:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d6e06:	e88d 0009 	stmia.w	sp, {r0, r3}
   d6e0a:	4668      	mov	r0, sp
   d6e0c:	f7ff fff0 	bl	d6df0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d6e10:	b003      	add	sp, #12
   d6e12:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6e18:	b538      	push	{r3, r4, r5, lr}
   d6e1a:	2300      	movs	r3, #0
   d6e1c:	4604      	mov	r4, r0
   d6e1e:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6e20:	2014      	movs	r0, #20
   d6e22:	460d      	mov	r5, r1
   d6e24:	f7fd f937 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6e28:	b128      	cbz	r0, d6e36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6e2a:	2301      	movs	r3, #1
   d6e2c:	6043      	str	r3, [r0, #4]
   d6e2e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6e30:	4b02      	ldr	r3, [pc, #8]	; (d6e3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d6e32:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6e34:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6e36:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6e38:	4620      	mov	r0, r4
   d6e3a:	bd38      	pop	{r3, r4, r5, pc}
   d6e3c:	000d9c60 	.word	0x000d9c60

000d6e40 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d6e40:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d6e42:	2500      	movs	r5, #0
   d6e44:	b086      	sub	sp, #24
   d6e46:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6e48:	6045      	str	r5, [r0, #4]
   d6e4a:	4604      	mov	r4, r0
   d6e4c:	2018      	movs	r0, #24
   d6e4e:	f7fd f922 	bl	d4096 <_Znwj>
   d6e52:	f8cd d010 	str.w	sp, [sp, #16]
   d6e56:	4606      	mov	r6, r0
   d6e58:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6e5a:	b118      	cbz	r0, d6e64 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d6e5c:	f7fe fd6e 	bl	d593c <_ZN8particle7BleUuidC1Ev>
   d6e60:	82b5      	strh	r5, [r6, #20]
   d6e62:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6e64:	4631      	mov	r1, r6
   d6e66:	ab01      	add	r3, sp, #4
   d6e68:	aa02      	add	r2, sp, #8
   d6e6a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6e6c:	9505      	str	r5, [sp, #20]
   d6e6e:	f7ff ffd3 	bl	d6e18 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6e72:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6e74:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6e76:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6e78:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6e7a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6e7c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6e7e:	f7ff fa2c 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6e82:	a804      	add	r0, sp, #16
   d6e84:	f7ff ffb4 	bl	d6df0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d6e88:	6823      	ldr	r3, [r4, #0]
   d6e8a:	b90b      	cbnz	r3, d6e90 <_ZN8particle10BleServiceC1Ev+0x50>
   d6e8c:	f7fe fc6c 	bl	d5768 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6e90:	4620      	mov	r0, r4
   d6e92:	b006      	add	sp, #24
   d6e94:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6e98 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d6e9c:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6f20 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6ea0:	b08c      	sub	sp, #48	; 0x30
   d6ea2:	4606      	mov	r6, r0
   d6ea4:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6ea6:	2500      	movs	r5, #0
   d6ea8:	6833      	ldr	r3, [r6, #0]
   d6eaa:	429d      	cmp	r5, r3
   d6eac:	d233      	bcs.n	d6f16 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d6eae:	a802      	add	r0, sp, #8
   d6eb0:	f7ff ffc6 	bl	d6e40 <_ZN8particle10BleServiceC1Ev>
   d6eb4:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d6eb6:	6871      	ldr	r1, [r6, #4]
   d6eb8:	9802      	ldr	r0, [sp, #8]
   d6eba:	436c      	muls	r4, r5
   d6ebc:	4421      	add	r1, r4
   d6ebe:	3104      	adds	r1, #4
   d6ec0:	f7fe fdd0 	bl	d5a64 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d6ec4:	6873      	ldr	r3, [r6, #4]
   d6ec6:	9a02      	ldr	r2, [sp, #8]
   d6ec8:	4423      	add	r3, r4
   d6eca:	a902      	add	r1, sp, #8
   d6ecc:	8b1b      	ldrh	r3, [r3, #24]
   d6ece:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d6ed0:	6873      	ldr	r3, [r6, #4]
   d6ed2:	441c      	add	r4, r3
   d6ed4:	8b63      	ldrh	r3, [r4, #26]
   d6ed6:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d6ed8:	6838      	ldr	r0, [r7, #0]
   d6eda:	f100 040c 	add.w	r4, r0, #12
   d6ede:	a804      	add	r0, sp, #16
   d6ee0:	f7ff f9f1 	bl	d62c6 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d6ee4:	4620      	mov	r0, r4
   d6ee6:	a904      	add	r1, sp, #16
   d6ee8:	f7ff fd2b 	bl	d6942 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6eec:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6eee:	a805      	add	r0, sp, #20
   d6ef0:	f7ff f9f3 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ef4:	b954      	cbnz	r4, d6f0c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d6ef6:	2320      	movs	r3, #32
   d6ef8:	9304      	str	r3, [sp, #16]
   d6efa:	f8cd 8000 	str.w	r8, [sp]
   d6efe:	4623      	mov	r3, r4
   d6f00:	aa04      	add	r2, sp, #16
   d6f02:	4906      	ldr	r1, [pc, #24]	; (d6f1c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d6f04:	9405      	str	r4, [sp, #20]
   d6f06:	2032      	movs	r0, #50	; 0x32
   d6f08:	f7fe fa18 	bl	d533c <log_message>
   d6f0c:	a803      	add	r0, sp, #12
   d6f0e:	f7ff f9e4 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6f12:	3501      	adds	r5, #1
   d6f14:	e7c8      	b.n	d6ea8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d6f16:	b00c      	add	sp, #48	; 0x30
   d6f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6f1c:	000d9c90 	.word	0x000d9c90
   d6f20:	000d9db9 	.word	0x000d9db9

000d6f24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6f24:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f26:	4c06      	ldr	r4, [pc, #24]	; (d6f40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6f28:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d6f2a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6f2c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6f2e:	f7fe f905 	bl	d513c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6f32:	4620      	mov	r0, r4
   d6f34:	4a03      	ldr	r2, [pc, #12]	; (d6f44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6f36:	4904      	ldr	r1, [pc, #16]	; (d6f48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6f3c:	f002 b8d3 	b.w	d90e6 <__aeabi_atexit>
   d6f40:	2003e3d4 	.word	0x2003e3d4
   d6f44:	2003d8c8 	.word	0x2003d8c8
   d6f48:	000d571d 	.word	0x000d571d

000d6f4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f4e:	4606      	mov	r6, r0
   d6f50:	460d      	mov	r5, r1
   d6f52:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6f54:	2400      	movs	r4, #0
  while (size--) {
   d6f56:	42bd      	cmp	r5, r7
   d6f58:	d00c      	beq.n	d6f74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6f5a:	6833      	ldr	r3, [r6, #0]
   d6f5c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6f60:	689b      	ldr	r3, [r3, #8]
   d6f62:	4630      	mov	r0, r6
   d6f64:	4798      	blx	r3
     if (chunk>=0)
   d6f66:	2800      	cmp	r0, #0
   d6f68:	db01      	blt.n	d6f6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6f6a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6f6c:	e7f3      	b.n	d6f56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6f6e:	2c00      	cmp	r4, #0
   d6f70:	bf08      	it	eq
   d6f72:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6f74:	4620      	mov	r0, r4
   d6f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6f78 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6f78:	b570      	push	{r4, r5, r6, lr}
   d6f7a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6f7c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6f7e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6f80:	b149      	cbz	r1, d6f96 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6f82:	f002 fab5 	bl	d94f0 <strlen>
   d6f86:	682b      	ldr	r3, [r5, #0]
   d6f88:	4602      	mov	r2, r0
   d6f8a:	4621      	mov	r1, r4
   d6f8c:	4628      	mov	r0, r5
   d6f8e:	68db      	ldr	r3, [r3, #12]
    }
   d6f90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6f94:	4718      	bx	r3
    }
   d6f96:	bd70      	pop	{r4, r5, r6, pc}

000d6f98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6f98:	6803      	ldr	r3, [r0, #0]
   d6f9a:	689b      	ldr	r3, [r3, #8]
   d6f9c:	4718      	bx	r3

000d6f9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6f9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6fa0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6fa2:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6fa4:	f7ff fff8 	bl	d6f98 <_ZN5Print5printEc>
  n += print('\n');
   d6fa8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6faa:	4604      	mov	r4, r0
  n += print('\n');
   d6fac:	4628      	mov	r0, r5
   d6fae:	f7ff fff3 	bl	d6f98 <_ZN5Print5printEc>
  return n;
}
   d6fb2:	4420      	add	r0, r4
   d6fb4:	bd38      	pop	{r3, r4, r5, pc}

000d6fb6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6fb6:	b530      	push	{r4, r5, lr}
   d6fb8:	b08b      	sub	sp, #44	; 0x2c
   d6fba:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6fbc:	2100      	movs	r1, #0
   d6fbe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6fc2:	2a01      	cmp	r2, #1
   d6fc4:	bf98      	it	ls
   d6fc6:	220a      	movls	r2, #10
   d6fc8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6fcc:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6fd0:	fb05 3312 	mls	r3, r5, r2, r3
   d6fd4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6fd8:	2b09      	cmp	r3, #9
   d6fda:	bf94      	ite	ls
   d6fdc:	3330      	addls	r3, #48	; 0x30
   d6fde:	3337      	addhi	r3, #55	; 0x37
   d6fe0:	b2db      	uxtb	r3, r3
   d6fe2:	4621      	mov	r1, r4
   d6fe4:	f804 3901 	strb.w	r3, [r4], #-1
   d6fe8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6fea:	2d00      	cmp	r5, #0
   d6fec:	d1ee      	bne.n	d6fcc <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6fee:	f7ff ffc3 	bl	d6f78 <_ZN5Print5writeEPKc>
}
   d6ff2:	b00b      	add	sp, #44	; 0x2c
   d6ff4:	bd30      	pop	{r4, r5, pc}

000d6ff6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6ff6:	b40c      	push	{r2, r3}
   d6ff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6ffc:	b087      	sub	sp, #28
   d6ffe:	af00      	add	r7, sp, #0
   d7000:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7004:	4605      	mov	r5, r0
   d7006:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d700a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d700c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d700e:	4623      	mov	r3, r4
   d7010:	464a      	mov	r2, r9
   d7012:	2114      	movs	r1, #20
   d7014:	1d38      	adds	r0, r7, #4
   d7016:	f7fe fa3d 	bl	d5494 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d701a:	2813      	cmp	r0, #19
   d701c:	d805      	bhi.n	d702a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d701e:	1d39      	adds	r1, r7, #4
   d7020:	4628      	mov	r0, r5
   d7022:	f7ff ffa9 	bl	d6f78 <_ZN5Print5writeEPKc>
   d7026:	4604      	mov	r4, r0
   d7028:	e013      	b.n	d7052 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d702a:	f100 0308 	add.w	r3, r0, #8
   d702e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7032:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7034:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7038:	1c41      	adds	r1, r0, #1
   d703a:	4623      	mov	r3, r4
   d703c:	464a      	mov	r2, r9
   d703e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d7040:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d7042:	f7fe fa27 	bl	d5494 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d7046:	4669      	mov	r1, sp
   d7048:	4628      	mov	r0, r5
   d704a:	f7ff ff95 	bl	d6f78 <_ZN5Print5writeEPKc>
   d704e:	4604      	mov	r4, r0
   d7050:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d7052:	b11e      	cbz	r6, d705c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d7054:	4628      	mov	r0, r5
   d7056:	f7ff ffa2 	bl	d6f9e <_ZN5Print7printlnEv>
   d705a:	4404      	add	r4, r0
    return n;
}
   d705c:	4620      	mov	r0, r4
   d705e:	371c      	adds	r7, #28
   d7060:	46bd      	mov	sp, r7
   d7062:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7066:	b002      	add	sp, #8
   d7068:	4770      	bx	lr

000d706a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d706a:	6880      	ldr	r0, [r0, #8]
   d706c:	6803      	ldr	r3, [r0, #0]
   d706e:	68db      	ldr	r3, [r3, #12]
   d7070:	4718      	bx	r3

000d7072 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d7072:	4770      	bx	lr

000d7074 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d7074:	b119      	cbz	r1, d707e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d7076:	680b      	ldr	r3, [r1, #0]
   d7078:	4608      	mov	r0, r1
   d707a:	685b      	ldr	r3, [r3, #4]
   d707c:	4718      	bx	r3
   d707e:	4770      	bx	lr

000d7080 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d7080:	b119      	cbz	r1, d708a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d7082:	680b      	ldr	r3, [r1, #0]
   d7084:	4608      	mov	r0, r1
   d7086:	685b      	ldr	r3, [r3, #4]
   d7088:	4718      	bx	r3
   d708a:	4770      	bx	lr

000d708c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d708c:	4770      	bx	lr

000d708e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d708e:	4770      	bx	lr

000d7090 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d7090:	4770      	bx	lr

000d7092 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d7092:	b538      	push	{r3, r4, r5, lr}
   d7094:	4604      	mov	r4, r0
   d7096:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d7098:	6800      	ldr	r0, [r0, #0]
   d709a:	212e      	movs	r1, #46	; 0x2e
   d709c:	f002 fa0c 	bl	d94b8 <strchrnul>
    size = s - category;
   d70a0:	6823      	ldr	r3, [r4, #0]
   d70a2:	1ac3      	subs	r3, r0, r3
   d70a4:	602b      	str	r3, [r5, #0]
    if (size) {
   d70a6:	b123      	cbz	r3, d70b2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d70a8:	7803      	ldrb	r3, [r0, #0]
   d70aa:	b103      	cbz	r3, d70ae <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d70ac:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d70ae:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d70b0:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d70b2:	4618      	mov	r0, r3
}
   d70b4:	bd38      	pop	{r3, r4, r5, pc}

000d70b6 <_ZN5spark16JSONStreamWriterD0Ev>:
   d70b6:	b510      	push	{r4, lr}
   d70b8:	210c      	movs	r1, #12
   d70ba:	4604      	mov	r4, r0
   d70bc:	f002 f820 	bl	d9100 <_ZdlPvj>
   d70c0:	4620      	mov	r0, r4
   d70c2:	bd10      	pop	{r4, pc}

000d70c4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d70c4:	b510      	push	{r4, lr}
   d70c6:	2104      	movs	r1, #4
   d70c8:	4604      	mov	r4, r0
   d70ca:	f002 f819 	bl	d9100 <_ZdlPvj>
   d70ce:	4620      	mov	r0, r4
   d70d0:	bd10      	pop	{r4, pc}

000d70d2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d70d2:	b510      	push	{r4, lr}
   d70d4:	2104      	movs	r1, #4
   d70d6:	4604      	mov	r4, r0
   d70d8:	f002 f812 	bl	d9100 <_ZdlPvj>
   d70dc:	4620      	mov	r0, r4
   d70de:	bd10      	pop	{r4, pc}

000d70e0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d70e0:	b538      	push	{r3, r4, r5, lr}
   d70e2:	460c      	mov	r4, r1
   d70e4:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d70e6:	f001 f923 	bl	d8330 <_Z16_fetch_usbserialv>
   d70ea:	4284      	cmp	r4, r0
   d70ec:	d00d      	beq.n	d710a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d70ee:	f001 f9a7 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d70f2:	4284      	cmp	r4, r0
   d70f4:	d105      	bne.n	d7102 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d70f6:	f001 f9a3 	bl	d8440 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d70fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d70fe:	f001 b99c 	b.w	d843a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d7102:	4621      	mov	r1, r4
   d7104:	4628      	mov	r0, r5
   d7106:	f7ff ffbb 	bl	d7080 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d710a:	bd38      	pop	{r3, r4, r5, pc}

000d710c <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d710c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d710e:	f002 f9dd 	bl	d94cc <strcmp>
}
   d7112:	fab0 f080 	clz	r0, r0
   d7116:	0940      	lsrs	r0, r0, #5
   d7118:	bd08      	pop	{r3, pc}

000d711a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d711a:	b538      	push	{r3, r4, r5, lr}
   d711c:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d711e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7120:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d7122:	f002 f9e5 	bl	d94f0 <strlen>
   d7126:	4621      	mov	r1, r4
   d7128:	4602      	mov	r2, r0
   d712a:	4628      	mov	r0, r5
}
   d712c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d7130:	f001 bf77 	b.w	d9022 <_ZN5spark10JSONWriter5valueEPKcj>

000d7134 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d7134:	6800      	ldr	r0, [r0, #0]
   d7136:	f7fe b811 	b.w	d515c <os_mutex_recursive_lock>

000d713a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d713a:	b570      	push	{r4, r5, r6, lr}
   d713c:	4604      	mov	r4, r0
    write(str, strlen(str));
   d713e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d7140:	460d      	mov	r5, r1
    write(str, strlen(str));
   d7142:	f002 f9d5 	bl	d94f0 <strlen>
   d7146:	6823      	ldr	r3, [r4, #0]
   d7148:	4602      	mov	r2, r0
   d714a:	4629      	mov	r1, r5
   d714c:	4620      	mov	r0, r4
   d714e:	68db      	ldr	r3, [r3, #12]
}
   d7150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d7154:	4718      	bx	r3

000d7156 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d7156:	b513      	push	{r0, r1, r4, lr}
   d7158:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d715a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d715c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d7160:	68d4      	ldr	r4, [r2, #12]
   d7162:	4619      	mov	r1, r3
   d7164:	2201      	movs	r2, #1
   d7166:	47a0      	blx	r4
}
   d7168:	b002      	add	sp, #8
   d716a:	bd10      	pop	{r4, pc}

000d716c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d716c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d7170:	6845      	ldr	r5, [r0, #4]
   d7172:	6807      	ldr	r7, [r0, #0]
   d7174:	b085      	sub	sp, #20
   d7176:	4691      	mov	r9, r2
   d7178:	2214      	movs	r2, #20
   d717a:	4355      	muls	r5, r2
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	10ab      	asrs	r3, r5, #2
   d7180:	4d19      	ldr	r5, [pc, #100]	; (d71e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d7182:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d7184:	435d      	muls	r5, r3
   d7186:	468b      	mov	fp, r1
   d7188:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d718a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d718c:	2d00      	cmp	r5, #0
   d718e:	9303      	str	r3, [sp, #12]
   d7190:	dd23      	ble.n	d71da <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d7192:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d7194:	106e      	asrs	r6, r5, #1
   d7196:	fb03 f006 	mul.w	r0, r3, r6
   d719a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d719e:	464a      	mov	r2, r9
   d71a0:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d71a4:	5820      	ldr	r0, [r4, r0]
   d71a6:	45d1      	cmp	r9, sl
   d71a8:	bf28      	it	cs
   d71aa:	4652      	movcs	r2, sl
   d71ac:	4659      	mov	r1, fp
   d71ae:	f002 f9a7 	bl	d9500 <strncmp>
                if (cmp == 0) {
   d71b2:	9b03      	ldr	r3, [sp, #12]
   d71b4:	b948      	cbnz	r0, d71ca <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d71b6:	45d1      	cmp	r9, sl
   d71b8:	d103      	bne.n	d71c2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d71ba:	9a01      	ldr	r2, [sp, #4]
   d71bc:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d71be:	4635      	mov	r5, r6
   d71c0:	e7e4      	b.n	d718c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d71c2:	bf8c      	ite	hi
   d71c4:	2001      	movhi	r0, #1
   d71c6:	2000      	movls	r0, #0
   d71c8:	e000      	b.n	d71cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d71ca:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d71cc:	2800      	cmp	r0, #0
   d71ce:	d0f6      	beq.n	d71be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d71d0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d71d2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d71d6:	3e01      	subs	r6, #1
   d71d8:	e7f1      	b.n	d71be <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d71da:	1be4      	subs	r4, r4, r7
}
   d71dc:	4802      	ldr	r0, [pc, #8]	; (d71e8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d71de:	10a4      	asrs	r4, r4, #2
}
   d71e0:	4360      	muls	r0, r4
   d71e2:	b005      	add	sp, #20
   d71e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d71e8:	cccccccd 	.word	0xcccccccd

000d71ec <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d71ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d71ee:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d71f0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d71f2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d71f4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d71f6:	b313      	cbz	r3, d723e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d71f8:	b309      	cbz	r1, d723e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d71fa:	af04      	add	r7, sp, #16
   d71fc:	2300      	movs	r3, #0
   d71fe:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d7202:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7206:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7208:	4639      	mov	r1, r7
   d720a:	a801      	add	r0, sp, #4
   d720c:	f7ff ff41 	bl	d7092 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7210:	4601      	mov	r1, r0
   d7212:	b1a0      	cbz	r0, d723e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d7214:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d7216:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7218:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d721c:	4620      	mov	r0, r4
   d721e:	f7ff ffa5 	bl	d716c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d7222:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7226:	b153      	cbz	r3, d723e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d7228:	6823      	ldr	r3, [r4, #0]
   d722a:	2414      	movs	r4, #20
   d722c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d7230:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d7232:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d7236:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7238:	bfa8      	it	ge
   d723a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d723c:	e7e4      	b.n	d7208 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d723e:	4630      	mov	r0, r6
   d7240:	b005      	add	sp, #20
   d7242:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7244 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d7244:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d7246:	4c09      	ldr	r4, [pc, #36]	; (d726c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d7248:	6823      	ldr	r3, [r4, #0]
   d724a:	07db      	lsls	r3, r3, #31
   d724c:	d40b      	bmi.n	d7266 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d724e:	4620      	mov	r0, r4
   d7250:	f7fc ff34 	bl	d40bc <__cxa_guard_acquire>
   d7254:	b138      	cbz	r0, d7266 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d7256:	4620      	mov	r0, r4
   d7258:	f7fc ff35 	bl	d40c6 <__cxa_guard_release>
   d725c:	4a04      	ldr	r2, [pc, #16]	; (d7270 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d725e:	4905      	ldr	r1, [pc, #20]	; (d7274 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d7260:	4805      	ldr	r0, [pc, #20]	; (d7278 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d7262:	f001 ff40 	bl	d90e6 <__aeabi_atexit>
    return &factory;
}
   d7266:	4804      	ldr	r0, [pc, #16]	; (d7278 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d7268:	bd10      	pop	{r4, pc}
   d726a:	bf00      	nop
   d726c:	2003e3d8 	.word	0x2003e3d8
   d7270:	2003d8c8 	.word	0x2003d8c8
   d7274:	000d708f 	.word	0x000d708f
   d7278:	2003d858 	.word	0x2003d858

000d727c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d727c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d727e:	4c09      	ldr	r4, [pc, #36]	; (d72a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d7280:	6823      	ldr	r3, [r4, #0]
   d7282:	07db      	lsls	r3, r3, #31
   d7284:	d40b      	bmi.n	d729e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d7286:	4620      	mov	r0, r4
   d7288:	f7fc ff18 	bl	d40bc <__cxa_guard_acquire>
   d728c:	b138      	cbz	r0, d729e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d728e:	4620      	mov	r0, r4
   d7290:	f7fc ff19 	bl	d40c6 <__cxa_guard_release>
   d7294:	4a04      	ldr	r2, [pc, #16]	; (d72a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d7296:	4905      	ldr	r1, [pc, #20]	; (d72ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7298:	4805      	ldr	r0, [pc, #20]	; (d72b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d729a:	f001 ff24 	bl	d90e6 <__aeabi_atexit>
    return &factory;
}
   d729e:	4804      	ldr	r0, [pc, #16]	; (d72b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d72a0:	bd10      	pop	{r4, pc}
   d72a2:	bf00      	nop
   d72a4:	2003e408 	.word	0x2003e408
   d72a8:	2003d8c8 	.word	0x2003d8c8
   d72ac:	000d708d 	.word	0x000d708d
   d72b0:	2003d854 	.word	0x2003d854

000d72b4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d72b4:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d72b6:	2500      	movs	r5, #0
   d72b8:	4604      	mov	r4, r0
   d72ba:	6005      	str	r5, [r0, #0]
   d72bc:	6045      	str	r5, [r0, #4]
   d72be:	6085      	str	r5, [r0, #8]
   d72c0:	6105      	str	r5, [r0, #16]
   d72c2:	6145      	str	r5, [r0, #20]
   d72c4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d72c6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d72ca:	f7fd ff37 	bl	d513c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d72ce:	f7ff ffb9 	bl	d7244 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d72d2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d72d4:	f7ff ffd2 	bl	d727c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d72d8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d72da:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d72dc:	4620      	mov	r0, r4
   d72de:	bd38      	pop	{r3, r4, r5, pc}

000d72e0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d72e0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d72e2:	4c0a      	ldr	r4, [pc, #40]	; (d730c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d72e4:	6823      	ldr	r3, [r4, #0]
   d72e6:	07db      	lsls	r3, r3, #31
   d72e8:	d40e      	bmi.n	d7308 <_ZN5spark10LogManager8instanceEv+0x28>
   d72ea:	4620      	mov	r0, r4
   d72ec:	f7fc fee6 	bl	d40bc <__cxa_guard_acquire>
   d72f0:	b150      	cbz	r0, d7308 <_ZN5spark10LogManager8instanceEv+0x28>
   d72f2:	4807      	ldr	r0, [pc, #28]	; (d7310 <_ZN5spark10LogManager8instanceEv+0x30>)
   d72f4:	f7ff ffde 	bl	d72b4 <_ZN5spark10LogManagerC1Ev>
   d72f8:	4620      	mov	r0, r4
   d72fa:	f7fc fee4 	bl	d40c6 <__cxa_guard_release>
   d72fe:	4a05      	ldr	r2, [pc, #20]	; (d7314 <_ZN5spark10LogManager8instanceEv+0x34>)
   d7300:	4905      	ldr	r1, [pc, #20]	; (d7318 <_ZN5spark10LogManager8instanceEv+0x38>)
   d7302:	4803      	ldr	r0, [pc, #12]	; (d7310 <_ZN5spark10LogManager8instanceEv+0x30>)
   d7304:	f001 feef 	bl	d90e6 <__aeabi_atexit>
    return &mgr;
}
   d7308:	4801      	ldr	r0, [pc, #4]	; (d7310 <_ZN5spark10LogManager8instanceEv+0x30>)
   d730a:	bd10      	pop	{r4, pc}
   d730c:	2003e3dc 	.word	0x2003e3dc
   d7310:	2003e3e0 	.word	0x2003e3e0
   d7314:	2003d8c8 	.word	0x2003d8c8
   d7318:	000d774b 	.word	0x000d774b

000d731c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d731c:	2300      	movs	r3, #0
   d731e:	4a02      	ldr	r2, [pc, #8]	; (d7328 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7320:	4902      	ldr	r1, [pc, #8]	; (d732c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7322:	4803      	ldr	r0, [pc, #12]	; (d7330 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d7324:	f7fe b822 	b.w	d536c <log_set_callbacks>
   d7328:	000d762d 	.word	0x000d762d
   d732c:	000d75bd 	.word	0x000d75bd
   d7330:	000d7545 	.word	0x000d7545

000d7334 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d7334:	2300      	movs	r3, #0
   d7336:	461a      	mov	r2, r3
   d7338:	4619      	mov	r1, r3
   d733a:	4618      	mov	r0, r3
   d733c:	f7fe b816 	b.w	d536c <log_set_callbacks>

000d7340 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7340:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7342:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d7344:	688e      	ldr	r6, [r1, #8]
   d7346:	f851 3b04 	ldr.w	r3, [r1], #4
   d734a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d734e:	4605      	mov	r5, r0
   d7350:	a801      	add	r0, sp, #4
   d7352:	f7fe ffa3 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d7356:	4622      	mov	r2, r4
   d7358:	4631      	mov	r1, r6
   d735a:	4628      	mov	r0, r5
   d735c:	f001 fe98 	bl	d9090 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7360:	a801      	add	r0, sp, #4
   d7362:	f7fe ffba 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7366:	4628      	mov	r0, r5
   d7368:	b002      	add	sp, #8
   d736a:	bd70      	pop	{r4, r5, r6, pc}

000d736c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d736c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d736e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d7370:	690e      	ldr	r6, [r1, #16]
   d7372:	f851 3b04 	ldr.w	r3, [r1], #4
   d7376:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d737a:	4605      	mov	r5, r0
   d737c:	a801      	add	r0, sp, #4
   d737e:	f7fe ff8d 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d7382:	4622      	mov	r2, r4
   d7384:	4631      	mov	r1, r6
   d7386:	4628      	mov	r0, r5
   d7388:	f001 fe9d 	bl	d90c6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d738c:	a801      	add	r0, sp, #4
   d738e:	f7fe ffa4 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7392:	4628      	mov	r0, r5
   d7394:	b002      	add	sp, #8
   d7396:	bd70      	pop	{r4, r5, r6, pc}

000d7398 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7398:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d739a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d739c:	68ce      	ldr	r6, [r1, #12]
   d739e:	f851 3b04 	ldr.w	r3, [r1], #4
   d73a2:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d73a6:	4605      	mov	r5, r0
   d73a8:	a801      	add	r0, sp, #4
   d73aa:	f7fe ff77 	bl	d629c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d73ae:	4622      	mov	r2, r4
   d73b0:	4631      	mov	r1, r6
   d73b2:	4628      	mov	r0, r5
   d73b4:	f001 fe44 	bl	d9040 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d73b8:	a801      	add	r0, sp, #4
   d73ba:	f7fe ff8e 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d73be:	4628      	mov	r0, r5
   d73c0:	b002      	add	sp, #8
   d73c2:	bd70      	pop	{r4, r5, r6, pc}

000d73c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d73c4:	b530      	push	{r4, r5, lr}
   d73c6:	b08b      	sub	sp, #44	; 0x2c
   d73c8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d73ca:	4601      	mov	r1, r0
   d73cc:	a804      	add	r0, sp, #16
   d73ce:	f7ff ffb7 	bl	d7340 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d73d2:	a804      	add	r0, sp, #16
   d73d4:	f001 fd67 	bl	d8ea6 <_ZN5spark18JSONObjectIterator4nextEv>
   d73d8:	b1e8      	cbz	r0, d7416 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d73da:	a904      	add	r1, sp, #16
   d73dc:	4668      	mov	r0, sp
   d73de:	f7ff ffdb 	bl	d7398 <_ZNK5spark18JSONObjectIterator4nameEv>
   d73e2:	490f      	ldr	r1, [pc, #60]	; (d7420 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d73e4:	9802      	ldr	r0, [sp, #8]
   d73e6:	f7ff fe91 	bl	d710c <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d73ea:	4604      	mov	r4, r0
   d73ec:	b110      	cbz	r0, d73f4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d73ee:	1c2c      	adds	r4, r5, #0
   d73f0:	bf18      	it	ne
   d73f2:	2401      	movne	r4, #1
   d73f4:	a801      	add	r0, sp, #4
   d73f6:	f7fe ff70 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73fa:	2c00      	cmp	r4, #0
   d73fc:	d0e9      	beq.n	d73d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d73fe:	a904      	add	r1, sp, #16
   d7400:	4668      	mov	r0, sp
   d7402:	f7ff ffb3 	bl	d736c <_ZNK5spark18JSONObjectIterator5valueEv>
   d7406:	4668      	mov	r0, sp
   d7408:	f001 fd2d 	bl	d8e66 <_ZNK5spark9JSONValue5toIntEv>
   d740c:	6028      	str	r0, [r5, #0]
   d740e:	a801      	add	r0, sp, #4
   d7410:	f7fe ff63 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7414:	e7dd      	b.n	d73d2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d7416:	a805      	add	r0, sp, #20
   d7418:	f7fe ff5f 	bl	d62da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d741c:	b00b      	add	sp, #44	; 0x2c
   d741e:	bd30      	pop	{r4, r5, pc}
   d7420:	000d9e70 	.word	0x000d9e70

000d7424 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7424:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7426:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d7428:	4620      	mov	r0, r4
   d742a:	4913      	ldr	r1, [pc, #76]	; (d7478 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d742c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d742e:	f002 f84d 	bl	d94cc <strcmp>
   d7432:	b940      	cbnz	r0, d7446 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d7434:	f000 ff7c 	bl	d8330 <_Z16_fetch_usbserialv>
   d7438:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d743c:	f000 ff68 	bl	d8310 <_ZN9USBSerial5beginEl>
        return &Serial;
   d7440:	f000 ff76 	bl	d8330 <_Z16_fetch_usbserialv>
   d7444:	e015      	b.n	d7472 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d7446:	490d      	ldr	r1, [pc, #52]	; (d747c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d7448:	4620      	mov	r0, r4
   d744a:	f002 f83f 	bl	d94cc <strcmp>
   d744e:	b978      	cbnz	r0, d7470 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d7450:	a902      	add	r1, sp, #8
   d7452:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d7456:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d745a:	4628      	mov	r0, r5
   d745c:	f7ff ffb2 	bl	d73c4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d7460:	f000 ffee 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d7464:	9901      	ldr	r1, [sp, #4]
   d7466:	f000 ffe5 	bl	d8434 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d746a:	f000 ffe9 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d746e:	e000      	b.n	d7472 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d7470:	2000      	movs	r0, #0
}
   d7472:	b003      	add	sp, #12
   d7474:	bd30      	pop	{r4, r5, pc}
   d7476:	bf00      	nop
   d7478:	000d9e75 	.word	0x000d9e75
   d747c:	000d9e7c 	.word	0x000d9e7c

000d7480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7480:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7482:	6804      	ldr	r4, [r0, #0]
   d7484:	6843      	ldr	r3, [r0, #4]
   d7486:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7488:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d748a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d748e:	42a6      	cmp	r6, r4
   d7490:	d005      	beq.n	d749e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7492:	f104 0008 	add.w	r0, r4, #8
   d7496:	f7ff fff3 	bl	d7480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d749a:	3414      	adds	r4, #20
   d749c:	e7f7      	b.n	d748e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d749e:	6828      	ldr	r0, [r5, #0]
   d74a0:	f7fd ffe8 	bl	d5474 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d74a4:	4628      	mov	r0, r5
   d74a6:	bd70      	pop	{r4, r5, r6, pc}

000d74a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d74a8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d74aa:	6804      	ldr	r4, [r0, #0]
   d74ac:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d74ae:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d74b0:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d74b4:	42a6      	cmp	r6, r4
   d74b6:	d004      	beq.n	d74c2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d74b8:	4620      	mov	r0, r4
   d74ba:	f7fe f863 	bl	d5584 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d74be:	3410      	adds	r4, #16
   d74c0:	e7f8      	b.n	d74b4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d74c2:	6828      	ldr	r0, [r5, #0]
   d74c4:	f7fd ffd6 	bl	d5474 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d74c8:	4628      	mov	r0, r5
   d74ca:	bd70      	pop	{r4, r5, r6, pc}

000d74cc <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d74cc:	b510      	push	{r4, lr}
   d74ce:	4604      	mov	r4, r0
   d74d0:	300c      	adds	r0, #12
   d74d2:	f7ff ffd5 	bl	d7480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d74d6:	4620      	mov	r0, r4
   d74d8:	f7ff ffe6 	bl	d74a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d74dc:	4620      	mov	r0, r4
   d74de:	bd10      	pop	{r4, pc}

000d74e0 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d74e0:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d74e2:	4b04      	ldr	r3, [pc, #16]	; (d74f4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d74e4:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d74e6:	f840 3b04 	str.w	r3, [r0], #4
   d74ea:	f7ff ffef 	bl	d74cc <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d74ee:	4620      	mov	r0, r4
   d74f0:	bd10      	pop	{r4, pc}
   d74f2:	bf00      	nop
   d74f4:	000d96a4 	.word	0x000d96a4

000d74f8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d74f8:	b510      	push	{r4, lr}
   d74fa:	4604      	mov	r4, r0
   d74fc:	f7ff fff0 	bl	d74e0 <_ZN5spark16StreamLogHandlerD1Ev>
   d7500:	4620      	mov	r0, r4
   d7502:	2124      	movs	r1, #36	; 0x24
   d7504:	f001 fdfc 	bl	d9100 <_ZdlPvj>
   d7508:	4620      	mov	r0, r4
   d750a:	bd10      	pop	{r4, pc}

000d750c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d750c:	b510      	push	{r4, lr}
   d750e:	4b03      	ldr	r3, [pc, #12]	; (d751c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7510:	6003      	str	r3, [r0, #0]
   d7512:	4604      	mov	r4, r0
   d7514:	f7ff ffe4 	bl	d74e0 <_ZN5spark16StreamLogHandlerD1Ev>
   d7518:	4620      	mov	r0, r4
   d751a:	bd10      	pop	{r4, pc}
   d751c:	000d9e60 	.word	0x000d9e60

000d7520 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7520:	b510      	push	{r4, lr}
   d7522:	4604      	mov	r4, r0
   d7524:	f7ff fff2 	bl	d750c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7528:	4620      	mov	r0, r4
   d752a:	2124      	movs	r1, #36	; 0x24
   d752c:	f001 fde8 	bl	d9100 <_ZdlPvj>
   d7530:	4620      	mov	r0, r4
   d7532:	bd10      	pop	{r4, pc}

000d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7534:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7536:	6803      	ldr	r3, [r0, #0]
   d7538:	4604      	mov	r4, r0
   d753a:	6818      	ldr	r0, [r3, #0]
   d753c:	f7fd fe16 	bl	d516c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7540:	4620      	mov	r0, r4
   d7542:	bd10      	pop	{r4, pc}

000d7544 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7548:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d754a:	4b1b      	ldr	r3, [pc, #108]	; (d75b8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d754c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d754e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d7552:	b085      	sub	sp, #20
   d7554:	4682      	mov	sl, r0
   d7556:	460e      	mov	r6, r1
   d7558:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d755a:	bb53      	cbnz	r3, d75b2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d755c:	f7ff fec0 	bl	d72e0 <_ZN5spark10LogManager8instanceEv>
   d7560:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7562:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7564:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d7566:	f7ff fde5 	bl	d7134 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d756a:	7b23      	ldrb	r3, [r4, #12]
   d756c:	b9f3      	cbnz	r3, d75ac <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d756e:	2301      	movs	r3, #1
   d7570:	7323      	strb	r3, [r4, #12]
   d7572:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7574:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d7576:	b2f6      	uxtb	r6, r6
   d7578:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d757c:	454d      	cmp	r5, r9
   d757e:	d013      	beq.n	d75a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d7580:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d7584:	4641      	mov	r1, r8
   d7586:	1d38      	adds	r0, r7, #4
   d7588:	f7ff fe30 	bl	d71ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   d758c:	4286      	cmp	r6, r0
   d758e:	d3f5      	bcc.n	d757c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d7590:	683b      	ldr	r3, [r7, #0]
   d7592:	f8cd b000 	str.w	fp, [sp]
   d7596:	689b      	ldr	r3, [r3, #8]
   d7598:	469e      	mov	lr, r3
   d759a:	4638      	mov	r0, r7
   d759c:	4643      	mov	r3, r8
   d759e:	4632      	mov	r2, r6
   d75a0:	4651      	mov	r1, sl
   d75a2:	4677      	mov	r7, lr
   d75a4:	47b8      	blx	r7
   d75a6:	e7e9      	b.n	d757c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d75a8:	2300      	movs	r3, #0
   d75aa:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d75ac:	a803      	add	r0, sp, #12
   d75ae:	f7ff ffc1 	bl	d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d75b2:	b005      	add	sp, #20
   d75b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d75b8:	e000ed00 	.word	0xe000ed00

000d75bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d75bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d75c0:	4699      	mov	r9, r3
   d75c2:	4b19      	ldr	r3, [pc, #100]	; (d7628 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d75c4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d75c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d75ca:	4607      	mov	r7, r0
   d75cc:	4688      	mov	r8, r1
   d75ce:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d75d0:	bb33      	cbnz	r3, d7620 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d75d2:	f7ff fe85 	bl	d72e0 <_ZN5spark10LogManager8instanceEv>
   d75d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d75d8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d75da:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d75dc:	f7ff fdaa 	bl	d7134 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d75e0:	7b23      	ldrb	r3, [r4, #12]
   d75e2:	b9d3      	cbnz	r3, d761a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d75e4:	2301      	movs	r3, #1
   d75e6:	7323      	strb	r3, [r4, #12]
   d75e8:	6825      	ldr	r5, [r4, #0]
   d75ea:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d75ec:	fa5f fb86 	uxtb.w	fp, r6
   d75f0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d75f4:	4555      	cmp	r5, sl
   d75f6:	d00e      	beq.n	d7616 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d75f8:	f855 6b04 	ldr.w	r6, [r5], #4
   d75fc:	4649      	mov	r1, r9
   d75fe:	1d30      	adds	r0, r6, #4
   d7600:	f7ff fdf4 	bl	d71ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7604:	4583      	cmp	fp, r0
   d7606:	d3f5      	bcc.n	d75f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d7608:	6833      	ldr	r3, [r6, #0]
   d760a:	4642      	mov	r2, r8
   d760c:	68db      	ldr	r3, [r3, #12]
   d760e:	4639      	mov	r1, r7
   d7610:	4630      	mov	r0, r6
   d7612:	4798      	blx	r3
   d7614:	e7ee      	b.n	d75f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7616:	2300      	movs	r3, #0
   d7618:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d761a:	a801      	add	r0, sp, #4
   d761c:	f7ff ff8a 	bl	d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d7620:	b003      	add	sp, #12
   d7622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7626:	bf00      	nop
   d7628:	e000ed00 	.word	0xe000ed00

000d762c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d762c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7630:	4b15      	ldr	r3, [pc, #84]	; (d7688 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d7632:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7634:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7638:	4604      	mov	r4, r0
   d763a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d763c:	b9fb      	cbnz	r3, d767e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d763e:	f7ff fe4f 	bl	d72e0 <_ZN5spark10LogManager8instanceEv>
   d7642:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d7644:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7646:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7648:	f7ff fd74 	bl	d7134 <_ZN14RecursiveMutex4lockEv>
   d764c:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d7650:	2646      	movs	r6, #70	; 0x46
   d7652:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7656:	42af      	cmp	r7, r5
   d7658:	d107      	bne.n	d766a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d765a:	a801      	add	r0, sp, #4
   d765c:	f7ff ff6a 	bl	d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d7660:	42b4      	cmp	r4, r6
   d7662:	bfb4      	ite	lt
   d7664:	2000      	movlt	r0, #0
   d7666:	2001      	movge	r0, #1
   d7668:	e00a      	b.n	d7680 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d766a:	f855 0b04 	ldr.w	r0, [r5], #4
   d766e:	4641      	mov	r1, r8
   d7670:	3004      	adds	r0, #4
   d7672:	f7ff fdbb 	bl	d71ec <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7676:	4286      	cmp	r6, r0
   d7678:	bfa8      	it	ge
   d767a:	4606      	movge	r6, r0
   d767c:	e7eb      	b.n	d7656 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d767e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d7680:	b002      	add	sp, #8
   d7682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7686:	bf00      	nop
   d7688:	e000ed00 	.word	0xe000ed00

000d768c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d768c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d768e:	6803      	ldr	r3, [r0, #0]
   d7690:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7692:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7694:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7698:	429a      	cmp	r2, r3
   d769a:	4618      	mov	r0, r3
   d769c:	d00e      	beq.n	d76bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d769e:	6806      	ldr	r6, [r0, #0]
   d76a0:	680d      	ldr	r5, [r1, #0]
   d76a2:	42ae      	cmp	r6, r5
   d76a4:	f103 0304 	add.w	r3, r3, #4
   d76a8:	d1f6      	bne.n	d7698 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d76aa:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d76ac:	1a52      	subs	r2, r2, r1
   d76ae:	f001 fea9 	bl	d9404 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d76b2:	6863      	ldr	r3, [r4, #4]
   d76b4:	3b01      	subs	r3, #1
   d76b6:	6063      	str	r3, [r4, #4]
    return true;
   d76b8:	2001      	movs	r0, #1
}
   d76ba:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d76bc:	2000      	movs	r0, #0
   d76be:	bd70      	pop	{r4, r5, r6, pc}

000d76c0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d76c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d76c2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d76c4:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d76c6:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d76c8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d76ca:	f7ff fd33 	bl	d7134 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d76ce:	a901      	add	r1, sp, #4
   d76d0:	4620      	mov	r0, r4
   d76d2:	f7ff ffdb 	bl	d768c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d76d6:	b920      	cbnz	r0, d76e2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d76d8:	a803      	add	r0, sp, #12
   d76da:	f7ff ff2b 	bl	d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d76de:	b004      	add	sp, #16
   d76e0:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d76e2:	6863      	ldr	r3, [r4, #4]
   d76e4:	2b00      	cmp	r3, #0
   d76e6:	d1f7      	bne.n	d76d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d76e8:	f7ff fe24 	bl	d7334 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d76ec:	e7f4      	b.n	d76d8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d76ee <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d76ee:	b570      	push	{r4, r5, r6, lr}
   d76f0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d76f2:	6943      	ldr	r3, [r0, #20]
   d76f4:	2618      	movs	r6, #24
   d76f6:	4604      	mov	r4, r0
   d76f8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d76fc:	42ae      	cmp	r6, r5
   d76fe:	d015      	beq.n	d772c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7700:	f105 0110 	add.w	r1, r5, #16
   d7704:	4620      	mov	r0, r4
   d7706:	f7ff ffc1 	bl	d768c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d770a:	6863      	ldr	r3, [r4, #4]
   d770c:	b90b      	cbnz	r3, d7712 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d770e:	f7ff fe11 	bl	d7334 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d7712:	69e0      	ldr	r0, [r4, #28]
   d7714:	6929      	ldr	r1, [r5, #16]
   d7716:	6803      	ldr	r3, [r0, #0]
   d7718:	68db      	ldr	r3, [r3, #12]
   d771a:	4798      	blx	r3
        if (h.stream) {
   d771c:	6969      	ldr	r1, [r5, #20]
   d771e:	b119      	cbz	r1, d7728 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7720:	6a20      	ldr	r0, [r4, #32]
   d7722:	6803      	ldr	r3, [r0, #0]
   d7724:	68db      	ldr	r3, [r3, #12]
   d7726:	4798      	blx	r3
   d7728:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d772a:	e7e7      	b.n	d76fc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d772c:	6925      	ldr	r5, [r4, #16]
   d772e:	6963      	ldr	r3, [r4, #20]
   d7730:	2618      	movs	r6, #24
   d7732:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7736:	42b5      	cmp	r5, r6
   d7738:	d004      	beq.n	d7744 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d773a:	4628      	mov	r0, r5
   d773c:	f7fd ff22 	bl	d5584 <_ZN6StringD1Ev>
   d7740:	3518      	adds	r5, #24
   d7742:	e7f8      	b.n	d7736 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7744:	2300      	movs	r3, #0
   d7746:	6163      	str	r3, [r4, #20]
   d7748:	bd70      	pop	{r4, r5, r6, pc}

000d774a <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d774a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d774c:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d774e:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d7750:	f7ff fdf0 	bl	d7334 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7754:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7758:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d775c:	f7ff fcea 	bl	d7134 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d7760:	4620      	mov	r0, r4
   d7762:	f7ff ffc4 	bl	d76ee <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7766:	4628      	mov	r0, r5
   d7768:	f7ff fee4 	bl	d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d776c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d776e:	b108      	cbz	r0, d7774 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d7770:	f7fd fcec 	bl	d514c <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7774:	6925      	ldr	r5, [r4, #16]
   d7776:	6963      	ldr	r3, [r4, #20]
   d7778:	2618      	movs	r6, #24
   d777a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d777e:	42b5      	cmp	r5, r6
   d7780:	d004      	beq.n	d778c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d7782:	4628      	mov	r0, r5
   d7784:	f7fd fefe 	bl	d5584 <_ZN6StringD1Ev>
   d7788:	3518      	adds	r5, #24
   d778a:	e7f8      	b.n	d777e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d778c:	6920      	ldr	r0, [r4, #16]
   d778e:	f7fd fe71 	bl	d5474 <free>
   d7792:	6820      	ldr	r0, [r4, #0]
   d7794:	f7fd fe6e 	bl	d5474 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d7798:	4620      	mov	r0, r4
   d779a:	b002      	add	sp, #8
   d779c:	bd70      	pop	{r4, r5, r6, pc}

000d779e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d779e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d77a0:	680a      	ldr	r2, [r1, #0]
   d77a2:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d77a4:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77a6:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d77a8:	684a      	ldr	r2, [r1, #4]
   d77aa:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d77ac:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d77ae:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d77b0:	688a      	ldr	r2, [r1, #8]
   d77b2:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d77b4:	608b      	str	r3, [r1, #8]
   d77b6:	4770      	bx	lr

000d77b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d77b8:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d77ba:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d77bc:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d77be:	6003      	str	r3, [r0, #0]
   d77c0:	6043      	str	r3, [r0, #4]
   d77c2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d77c4:	f7ff ffeb 	bl	d779e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d77c8:	4620      	mov	r0, r4
   d77ca:	bd10      	pop	{r4, pc}

000d77cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d77cc:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d77ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77d0:	4604      	mov	r4, r0
   d77d2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d77d4:	d925      	bls.n	d7822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d77d6:	4290      	cmp	r0, r2
   d77d8:	d224      	bcs.n	d7824 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d77da:	1a55      	subs	r5, r2, r1
   d77dc:	3d14      	subs	r5, #20
   d77de:	442c      	add	r4, r5
   d77e0:	f1a1 0714 	sub.w	r7, r1, #20
   d77e4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d77e8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d77ea:	f1a5 0308 	sub.w	r3, r5, #8
   d77ee:	429f      	cmp	r7, r3
   d77f0:	d037      	beq.n	d7862 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d77f2:	b184      	cbz	r4, d7816 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d77f4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d77f8:	6023      	str	r3, [r4, #0]
   d77fa:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d77fe:	80a3      	strh	r3, [r4, #4]
   d7800:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7804:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7806:	60a6      	str	r6, [r4, #8]
   d7808:	60e6      	str	r6, [r4, #12]
   d780a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d780c:	4629      	mov	r1, r5
   d780e:	f104 0008 	add.w	r0, r4, #8
   d7812:	f7ff ffc4 	bl	d779e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7816:	4628      	mov	r0, r5
   d7818:	f7ff fe32 	bl	d7480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d781c:	3c14      	subs	r4, #20
   d781e:	3d14      	subs	r5, #20
   d7820:	e7e3      	b.n	d77ea <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7822:	d01e      	beq.n	d7862 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d7824:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7828:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d782a:	f1a5 0308 	sub.w	r3, r5, #8
   d782e:	429e      	cmp	r6, r3
   d7830:	d017      	beq.n	d7862 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d7832:	b184      	cbz	r4, d7856 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d7834:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7838:	6023      	str	r3, [r4, #0]
   d783a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d783e:	80a3      	strh	r3, [r4, #4]
   d7840:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7844:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7846:	60a7      	str	r7, [r4, #8]
   d7848:	60e7      	str	r7, [r4, #12]
   d784a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d784c:	4629      	mov	r1, r5
   d784e:	f104 0008 	add.w	r0, r4, #8
   d7852:	f7ff ffa4 	bl	d779e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7856:	4628      	mov	r0, r5
   d7858:	f7ff fe12 	bl	d7480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d785c:	3414      	adds	r4, #20
   d785e:	3514      	adds	r5, #20
   d7860:	e7e3      	b.n	d782a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d7862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7864 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7866:	6845      	ldr	r5, [r0, #4]
   d7868:	6883      	ldr	r3, [r0, #8]
   d786a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d786c:	4604      	mov	r4, r0
   d786e:	460e      	mov	r6, r1
   d7870:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7872:	db0e      	blt.n	d7892 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d7874:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7876:	2d00      	cmp	r5, #0
   d7878:	dd05      	ble.n	d7886 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d787a:	00a9      	lsls	r1, r5, #2
   d787c:	6800      	ldr	r0, [r0, #0]
   d787e:	f7fd fe01 	bl	d5484 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7882:	b920      	cbnz	r0, d788e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d7884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7886:	6800      	ldr	r0, [r0, #0]
   d7888:	f7fd fdf4 	bl	d5474 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d788c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d788e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7890:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7892:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7894:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7896:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d789a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d789e:	1a52      	subs	r2, r2, r1
   d78a0:	1d08      	adds	r0, r1, #4
   d78a2:	f001 fdaf 	bl	d9404 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d78a6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d78aa:	6863      	ldr	r3, [r4, #4]
   d78ac:	3301      	adds	r3, #1
   d78ae:	6063      	str	r3, [r4, #4]
   d78b0:	2001      	movs	r0, #1
    return true;
}
   d78b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d78b4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d78b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d78b6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d78b8:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d78ba:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d78bc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d78be:	f7ff fc39 	bl	d7134 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d78c2:	6823      	ldr	r3, [r4, #0]
   d78c4:	6861      	ldr	r1, [r4, #4]
   d78c6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d78ca:	4283      	cmp	r3, r0
   d78cc:	461a      	mov	r2, r3
   d78ce:	d009      	beq.n	d78e4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d78d0:	6812      	ldr	r2, [r2, #0]
   d78d2:	42aa      	cmp	r2, r5
   d78d4:	f103 0304 	add.w	r3, r3, #4
   d78d8:	d1f7      	bne.n	d78ca <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d78da:	a801      	add	r0, sp, #4
   d78dc:	f7ff fe2a 	bl	d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d78e0:	2500      	movs	r5, #0
   d78e2:	e00e      	b.n	d7902 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d78e4:	462a      	mov	r2, r5
   d78e6:	4620      	mov	r0, r4
   d78e8:	f7ff ffbc 	bl	d7864 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d78ec:	4605      	mov	r5, r0
   d78ee:	2800      	cmp	r0, #0
   d78f0:	d0f3      	beq.n	d78da <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d78f2:	6863      	ldr	r3, [r4, #4]
   d78f4:	2b01      	cmp	r3, #1
   d78f6:	d101      	bne.n	d78fc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d78f8:	f7ff fd10 	bl	d731c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d78fc:	a801      	add	r0, sp, #4
   d78fe:	f7ff fe19 	bl	d7534 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d7902:	4628      	mov	r0, r5
   d7904:	b003      	add	sp, #12
   d7906:	bd30      	pop	{r4, r5, pc}

000d7908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7908:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d790a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d790c:	4606      	mov	r6, r0
   d790e:	460c      	mov	r4, r1
   d7910:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7912:	d914      	bls.n	d793e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7914:	4290      	cmp	r0, r2
   d7916:	d213      	bcs.n	d7940 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7918:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d791c:	1a6c      	subs	r4, r5, r1
   d791e:	f1a1 0710 	sub.w	r7, r1, #16
   d7922:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7924:	42af      	cmp	r7, r5
   d7926:	d018      	beq.n	d795a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7928:	b11c      	cbz	r4, d7932 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d792a:	4629      	mov	r1, r5
   d792c:	4620      	mov	r0, r4
   d792e:	f7fd fe19 	bl	d5564 <_ZN6StringC1EOS_>
                end->~T();
   d7932:	4628      	mov	r0, r5
   d7934:	f7fd fe26 	bl	d5584 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7938:	3d10      	subs	r5, #16
   d793a:	3c10      	subs	r4, #16
   d793c:	e7f2      	b.n	d7924 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d793e:	d00c      	beq.n	d795a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7940:	42ac      	cmp	r4, r5
   d7942:	d00a      	beq.n	d795a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7944:	b11e      	cbz	r6, d794e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7946:	4621      	mov	r1, r4
   d7948:	4630      	mov	r0, r6
   d794a:	f7fd fe0b 	bl	d5564 <_ZN6StringC1EOS_>
                p->~T();
   d794e:	4620      	mov	r0, r4
   d7950:	f7fd fe18 	bl	d5584 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7954:	3410      	adds	r4, #16
   d7956:	3610      	adds	r6, #16
   d7958:	e7f2      	b.n	d7940 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d795a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d795c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d795c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d795e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7960:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7962:	dd0b      	ble.n	d797c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7964:	0130      	lsls	r0, r6, #4
   d7966:	f7fd fd7d 	bl	d5464 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d796a:	4604      	mov	r4, r0
   d796c:	b170      	cbz	r0, d798c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d796e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7972:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7976:	f7ff ffc7 	bl	d7908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d797a:	e000      	b.n	d797e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d797c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d797e:	6828      	ldr	r0, [r5, #0]
   d7980:	f7fd fd78 	bl	d5474 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7984:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7986:	60ae      	str	r6, [r5, #8]
        return true;
   d7988:	2001      	movs	r0, #1
   d798a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d798c:	bd70      	pop	{r4, r5, r6, pc}

000d798e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d798e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7992:	2300      	movs	r3, #0
   d7994:	b095      	sub	sp, #84	; 0x54
   d7996:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7998:	2246      	movs	r2, #70	; 0x46
   d799a:	6003      	str	r3, [r0, #0]
   d799c:	6043      	str	r3, [r0, #4]
   d799e:	6083      	str	r3, [r0, #8]
   d79a0:	60c3      	str	r3, [r0, #12]
   d79a2:	6103      	str	r3, [r0, #16]
   d79a4:	6143      	str	r3, [r0, #20]
   d79a6:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d79a8:	9102      	str	r1, [sp, #8]
   d79aa:	f8da 1004 	ldr.w	r1, [sl, #4]
   d79ae:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d79b0:	4299      	cmp	r1, r3
   d79b2:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d79b4:	9309      	str	r3, [sp, #36]	; 0x24
   d79b6:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d79b8:	f340 809d 	ble.w	d7af6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d79bc:	a808      	add	r0, sp, #32
   d79be:	f7ff ffcd 	bl	d795c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d79c2:	2800      	cmp	r0, #0
   d79c4:	f040 8097 	bne.w	d7af6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d79c8:	e08e      	b.n	d7ae8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d79ca:	4621      	mov	r1, r4
   d79cc:	a80b      	add	r0, sp, #44	; 0x2c
   d79ce:	f7fd fdc9 	bl	d5564 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d79d2:	a90b      	add	r1, sp, #44	; 0x2c
   d79d4:	a80f      	add	r0, sp, #60	; 0x3c
   d79d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d79d8:	f7fd fdc4 	bl	d5564 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d79dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d79de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d79e0:	4299      	cmp	r1, r3
   d79e2:	f2c0 80ce 	blt.w	d7b82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d79e6:	3101      	adds	r1, #1
   d79e8:	a808      	add	r0, sp, #32
   d79ea:	f7ff ffb7 	bl	d795c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d79ee:	2800      	cmp	r0, #0
   d79f0:	f040 80c7 	bne.w	d7b82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d79f4:	a80f      	add	r0, sp, #60	; 0x3c
   d79f6:	f7fd fdc5 	bl	d5584 <_ZN6StringD1Ev>
   d79fa:	a80b      	add	r0, sp, #44	; 0x2c
   d79fc:	f7fd fdc2 	bl	d5584 <_ZN6StringD1Ev>
   d7a00:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d7a02:	42a7      	cmp	r7, r4
   d7a04:	d1e1      	bne.n	d79ca <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7a06:	2600      	movs	r6, #0
   d7a08:	960b      	str	r6, [sp, #44]	; 0x2c
   d7a0a:	960c      	str	r6, [sp, #48]	; 0x30
   d7a0c:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7a0e:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7a12:	429e      	cmp	r6, r3
   d7a14:	f280 80a8 	bge.w	d7b68 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7a18:	0133      	lsls	r3, r6, #4
   d7a1a:	9a08      	ldr	r2, [sp, #32]
   d7a1c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d7a1e:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7a20:	2b00      	cmp	r3, #0
   d7a22:	f000 809f 	beq.w	d7b64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d7a26:	2314      	movs	r3, #20
   d7a28:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7a2a:	f8cd 901c 	str.w	r9, [sp, #28]
   d7a2e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7a30:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7a32:	a907      	add	r1, sp, #28
   d7a34:	a806      	add	r0, sp, #24
   d7a36:	f7ff fb2c 	bl	d7092 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7a3a:	4607      	mov	r7, r0
   d7a3c:	2800      	cmp	r0, #0
   d7a3e:	f000 8091 	beq.w	d7b64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7a42:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7a44:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7a46:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d7a4a:	9a07      	ldr	r2, [sp, #28]
   d7a4c:	4620      	mov	r0, r4
   d7a4e:	f7ff fb8d 	bl	d716c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7a52:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d7a56:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7a58:	f1b8 0f00 	cmp.w	r8, #0
   d7a5c:	d153      	bne.n	d7b06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d7a5e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7a62:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7a6a:	970f      	str	r7, [sp, #60]	; 0x3c
   d7a6c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7a70:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7a74:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7a78:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7a7c:	6867      	ldr	r7, [r4, #4]
   d7a7e:	68a3      	ldr	r3, [r4, #8]
   d7a80:	429f      	cmp	r7, r3
   d7a82:	da4f      	bge.n	d7b24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7a84:	9b00      	ldr	r3, [sp, #0]
   d7a86:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d7a8a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7a8c:	2214      	movs	r2, #20
   d7a8e:	4353      	muls	r3, r2
   d7a90:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7a94:	fb02 b201 	mla	r2, r2, r1, fp
   d7a98:	f107 0014 	add.w	r0, r7, #20
   d7a9c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7a9e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7aa0:	f7ff fe94 	bl	d77cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7aa4:	b1a7      	cbz	r7, d7ad0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7aa6:	9b03      	ldr	r3, [sp, #12]
   d7aa8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7aaa:	f84b 2003 	str.w	r2, [fp, r3]
   d7aae:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7ab2:	80bb      	strh	r3, [r7, #4]
   d7ab4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7ab8:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7aba:	f8c7 9008 	str.w	r9, [r7, #8]
   d7abe:	f8c7 900c 	str.w	r9, [r7, #12]
   d7ac2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7ac6:	a911      	add	r1, sp, #68	; 0x44
   d7ac8:	f107 0008 	add.w	r0, r7, #8
   d7acc:	f7ff fe67 	bl	d779e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7ad0:	6863      	ldr	r3, [r4, #4]
   d7ad2:	3301      	adds	r3, #1
   d7ad4:	6063      	str	r3, [r4, #4]
   d7ad6:	a811      	add	r0, sp, #68	; 0x44
   d7ad8:	f7ff fcd2 	bl	d7480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7adc:	f1b8 0f00 	cmp.w	r8, #0
   d7ae0:	d011      	beq.n	d7b06 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d7ae2:	a80b      	add	r0, sp, #44	; 0x2c
   d7ae4:	f7ff fccc 	bl	d7480 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7ae8:	a808      	add	r0, sp, #32
   d7aea:	f7ff fcdd 	bl	d74a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d7aee:	4628      	mov	r0, r5
   d7af0:	b015      	add	sp, #84	; 0x54
   d7af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7af6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7afa:	f8da 3004 	ldr.w	r3, [sl, #4]
   d7afe:	2714      	movs	r7, #20
   d7b00:	fb07 4703 	mla	r7, r7, r3, r4
   d7b04:	e77d      	b.n	d7a02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d7b06:	6823      	ldr	r3, [r4, #0]
   d7b08:	9a00      	ldr	r2, [sp, #0]
   d7b0a:	2414      	movs	r4, #20
   d7b0c:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7b10:	9b06      	ldr	r3, [sp, #24]
   d7b12:	781b      	ldrb	r3, [r3, #0]
   d7b14:	bb23      	cbnz	r3, d7b60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d7b16:	f8da 3000 	ldr.w	r3, [sl]
   d7b1a:	9a01      	ldr	r2, [sp, #4]
   d7b1c:	4413      	add	r3, r2
   d7b1e:	7c1b      	ldrb	r3, [r3, #16]
   d7b20:	80e3      	strh	r3, [r4, #6]
   d7b22:	e01d      	b.n	d7b60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b24:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7b26:	2f00      	cmp	r7, #0
   d7b28:	dd0f      	ble.n	d7b4a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7b2a:	2314      	movs	r3, #20
   d7b2c:	fb03 f007 	mul.w	r0, r3, r7
   d7b30:	9303      	str	r3, [sp, #12]
   d7b32:	f7fd fc97 	bl	d5464 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7b36:	4683      	mov	fp, r0
   d7b38:	b178      	cbz	r0, d7b5a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d7b3a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7b3e:	9b03      	ldr	r3, [sp, #12]
   d7b40:	fb03 1202 	mla	r2, r3, r2, r1
   d7b44:	f7ff fe42 	bl	d77cc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7b48:	e000      	b.n	d7b4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7b4a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7b4c:	6820      	ldr	r0, [r4, #0]
   d7b4e:	f7fd fc91 	bl	d5474 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7b52:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7b56:	60a7      	str	r7, [r4, #8]
   d7b58:	e794      	b.n	d7a84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7b5a:	f04f 0801 	mov.w	r8, #1
   d7b5e:	e7ba      	b.n	d7ad6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7b60:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7b62:	e766      	b.n	d7a32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7b64:	3601      	adds	r6, #1
   d7b66:	e753      	b.n	d7a10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7b68:	a908      	add	r1, sp, #32
   d7b6a:	4628      	mov	r0, r5
   d7b6c:	f7ff fe17 	bl	d779e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7b70:	a90b      	add	r1, sp, #44	; 0x2c
   d7b72:	f105 000c 	add.w	r0, r5, #12
   d7b76:	f7ff fe12 	bl	d779e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d7b7a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7b7e:	762b      	strb	r3, [r5, #24]
   d7b80:	e7af      	b.n	d7ae2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b82:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7b84:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7b86:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7b8a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7b8e:	4631      	mov	r1, r6
   d7b90:	f106 0010 	add.w	r0, r6, #16
   d7b94:	f7ff feb8 	bl	d7908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7b98:	b11e      	cbz	r6, d7ba2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7b9a:	a90f      	add	r1, sp, #60	; 0x3c
   d7b9c:	4630      	mov	r0, r6
   d7b9e:	f7fd fce1 	bl	d5564 <_ZN6StringC1EOS_>
    ++size_;
   d7ba2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7ba4:	3301      	adds	r3, #1
   d7ba6:	9309      	str	r3, [sp, #36]	; 0x24
   d7ba8:	e724      	b.n	d79f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d7bac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7bac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7bae:	4604      	mov	r4, r0
   d7bb0:	4b09      	ldr	r3, [pc, #36]	; (d7bd8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7bb2:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7bb6:	4605      	mov	r5, r0
   d7bb8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7bba:	a801      	add	r0, sp, #4
   d7bbc:	4611      	mov	r1, r2
   d7bbe:	f7fc fde6 	bl	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7bc2:	aa01      	add	r2, sp, #4
   d7bc4:	4631      	mov	r1, r6
   d7bc6:	4620      	mov	r0, r4
   d7bc8:	f7ff fee1 	bl	d798e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7bcc:	a801      	add	r0, sp, #4
   d7bce:	f7fc fd9d 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7bd2:	4628      	mov	r0, r5
   d7bd4:	b004      	add	sp, #16
   d7bd6:	bd70      	pop	{r4, r5, r6, pc}
   d7bd8:	000d96a4 	.word	0x000d96a4

000d7bdc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7bde:	460f      	mov	r7, r1
   d7be0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7be2:	492b      	ldr	r1, [pc, #172]	; (d7c90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7be4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7be6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7be8:	4616      	mov	r6, r2
   d7bea:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7bec:	f001 fc6e 	bl	d94cc <strcmp>
   d7bf0:	bb28      	cbnz	r0, d7c3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d7bf2:	2c00      	cmp	r4, #0
   d7bf4:	d049      	beq.n	d7c8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7bf6:	4629      	mov	r1, r5
   d7bf8:	a801      	add	r0, sp, #4
   d7bfa:	f7ff fddd 	bl	d77b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7bfe:	4925      	ldr	r1, [pc, #148]	; (d7c94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7c00:	2024      	movs	r0, #36	; 0x24
   d7c02:	f001 fa7f 	bl	d9104 <_ZnwjRKSt9nothrow_t>
   d7c06:	4605      	mov	r5, r0
   d7c08:	b1b8      	cbz	r0, d7c3a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7c0a:	a901      	add	r1, sp, #4
   d7c0c:	a804      	add	r0, sp, #16
   d7c0e:	f7ff fdd3 	bl	d77b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7c12:	a904      	add	r1, sp, #16
   d7c14:	a807      	add	r0, sp, #28
   d7c16:	f7fc fdba 	bl	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7c1a:	aa07      	add	r2, sp, #28
   d7c1c:	4631      	mov	r1, r6
   d7c1e:	4628      	mov	r0, r5
   d7c20:	f7ff ffc4 	bl	d7bac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7c24:	a807      	add	r0, sp, #28
   d7c26:	f7fc fd71 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7c2a:	4b1b      	ldr	r3, [pc, #108]	; (d7c98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7c2c:	602b      	str	r3, [r5, #0]
   d7c2e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d7c30:	a804      	add	r0, sp, #16
   d7c32:	f7fc fd6b 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7c36:	4b19      	ldr	r3, [pc, #100]	; (d7c9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d7c38:	602b      	str	r3, [r5, #0]
   d7c3a:	a801      	add	r0, sp, #4
   d7c3c:	e01f      	b.n	d7c7e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7c3e:	4918      	ldr	r1, [pc, #96]	; (d7ca0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d7c40:	4638      	mov	r0, r7
   d7c42:	f001 fc43 	bl	d94cc <strcmp>
   d7c46:	b9f0      	cbnz	r0, d7c86 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d7c48:	b1fc      	cbz	r4, d7c8a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7c4a:	4629      	mov	r1, r5
   d7c4c:	a804      	add	r0, sp, #16
   d7c4e:	f7ff fdb3 	bl	d77b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7c52:	4910      	ldr	r1, [pc, #64]	; (d7c94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d7c54:	2024      	movs	r0, #36	; 0x24
   d7c56:	f001 fa55 	bl	d9104 <_ZnwjRKSt9nothrow_t>
   d7c5a:	4605      	mov	r5, r0
   d7c5c:	b170      	cbz	r0, d7c7c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d7c5e:	a904      	add	r1, sp, #16
   d7c60:	a807      	add	r0, sp, #28
   d7c62:	f7fc fd94 	bl	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7c66:	aa07      	add	r2, sp, #28
   d7c68:	4631      	mov	r1, r6
   d7c6a:	4628      	mov	r0, r5
   d7c6c:	f7ff ff9e 	bl	d7bac <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7c70:	a807      	add	r0, sp, #28
   d7c72:	f7fc fd4b 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7c76:	4b08      	ldr	r3, [pc, #32]	; (d7c98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7c78:	602b      	str	r3, [r5, #0]
   d7c7a:	622c      	str	r4, [r5, #32]
   d7c7c:	a804      	add	r0, sp, #16
   d7c7e:	f7fc fd45 	bl	d470c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7c82:	4628      	mov	r0, r5
   d7c84:	e002      	b.n	d7c8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7c86:	2000      	movs	r0, #0
   d7c88:	e000      	b.n	d7c8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d7c8a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d7c8c:	b00b      	add	sp, #44	; 0x2c
   d7c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7c90:	000d9ece 	.word	0x000d9ece
   d7c94:	000da173 	.word	0x000da173
   d7c98:	000d9f54 	.word	0x000d9f54
   d7c9c:	000d9e60 	.word	0x000d9e60
   d7ca0:	000d9ed2 	.word	0x000d9ed2

000d7ca4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7ca4:	4b01      	ldr	r3, [pc, #4]	; (d7cac <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7ca6:	4a02      	ldr	r2, [pc, #8]	; (d7cb0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7ca8:	601a      	str	r2, [r3, #0]
   d7caa:	4770      	bx	lr
   d7cac:	2003e40c 	.word	0x2003e40c
   d7cb0:	000d9ee3 	.word	0x000d9ee3

000d7cb4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7cb8:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7cba:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7cbe:	4604      	mov	r4, r0
   d7cc0:	460e      	mov	r6, r1
   d7cc2:	4617      	mov	r7, r2
   d7cc4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7cc6:	f000 fb33 	bl	d8330 <_Z16_fetch_usbserialv>
   d7cca:	4581      	cmp	r9, r0
   d7ccc:	d105      	bne.n	d7cda <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d7cce:	485a      	ldr	r0, [pc, #360]	; (d7e38 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7cd0:	f000 ffcf 	bl	d8c72 <_ZN5spark12NetworkClass9listeningEv>
   d7cd4:	2800      	cmp	r0, #0
   d7cd6:	f040 80ac 	bne.w	d7e32 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d7cda:	792b      	ldrb	r3, [r5, #4]
   d7cdc:	071b      	lsls	r3, r3, #28
   d7cde:	d505      	bpl.n	d7cec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7ce0:	696b      	ldr	r3, [r5, #20]
   d7ce2:	4a56      	ldr	r2, [pc, #344]	; (d7e3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7ce4:	6a20      	ldr	r0, [r4, #32]
   d7ce6:	2100      	movs	r1, #0
   d7ce8:	f7ff f985 	bl	d6ff6 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d7cec:	f1b8 0f00 	cmp.w	r8, #0
   d7cf0:	d00d      	beq.n	d7d0e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d7cf2:	215b      	movs	r1, #91	; 0x5b
   d7cf4:	4620      	mov	r0, r4
   d7cf6:	f7ff fa2e 	bl	d7156 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7cfa:	4641      	mov	r1, r8
   d7cfc:	4620      	mov	r0, r4
   d7cfe:	f7ff fa1c 	bl	d713a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7d02:	6823      	ldr	r3, [r4, #0]
   d7d04:	494e      	ldr	r1, [pc, #312]	; (d7e40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d7d06:	68db      	ldr	r3, [r3, #12]
   d7d08:	2202      	movs	r2, #2
   d7d0a:	4620      	mov	r0, r4
   d7d0c:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d7d0e:	792b      	ldrb	r3, [r5, #4]
   d7d10:	07d9      	lsls	r1, r3, #31
   d7d12:	d525      	bpl.n	d7d60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d7d14:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7d18:	212f      	movs	r1, #47	; 0x2f
   d7d1a:	4640      	mov	r0, r8
   d7d1c:	f001 fc11 	bl	d9542 <strrchr>
    if (s1) {
   d7d20:	b108      	cbz	r0, d7d26 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d7d22:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d7d26:	4641      	mov	r1, r8
   d7d28:	4620      	mov	r0, r4
   d7d2a:	f7ff fa06 	bl	d713a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d7d2e:	792b      	ldrb	r3, [r5, #4]
   d7d30:	079a      	lsls	r2, r3, #30
   d7d32:	d509      	bpl.n	d7d48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d7d34:	213a      	movs	r1, #58	; 0x3a
   d7d36:	4620      	mov	r0, r4
   d7d38:	f7ff fa0d 	bl	d7156 <_ZN5spark16StreamLogHandler5writeEc>
   d7d3c:	68eb      	ldr	r3, [r5, #12]
   d7d3e:	4a41      	ldr	r2, [pc, #260]	; (d7e44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7d40:	6a20      	ldr	r0, [r4, #32]
   d7d42:	2100      	movs	r1, #0
   d7d44:	f7ff f957 	bl	d6ff6 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d7d48:	792b      	ldrb	r3, [r5, #4]
   d7d4a:	f013 0f04 	tst.w	r3, #4
   d7d4e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d7d50:	bf18      	it	ne
   d7d52:	493d      	ldrne	r1, [pc, #244]	; (d7e48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7d54:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d7d56:	bf08      	it	eq
   d7d58:	493c      	ldreq	r1, [pc, #240]	; (d7e4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d7d5a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d7d5c:	4620      	mov	r0, r4
   d7d5e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7d60:	792b      	ldrb	r3, [r5, #4]
   d7d62:	075b      	lsls	r3, r3, #29
   d7d64:	d518      	bpl.n	d7d98 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7d66:	6929      	ldr	r1, [r5, #16]
   d7d68:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7d6a:	4613      	mov	r3, r2
   d7d6c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7d70:	b138      	cbz	r0, d7d82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7d72:	2820      	cmp	r0, #32
   d7d74:	d101      	bne.n	d7d7a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d7d76:	4619      	mov	r1, r3
   d7d78:	e001      	b.n	d7d7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d7d7a:	2828      	cmp	r0, #40	; 0x28
   d7d7c:	d001      	beq.n	d7d82 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7d7e:	461a      	mov	r2, r3
   d7d80:	e7f3      	b.n	d7d6a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7d82:	6823      	ldr	r3, [r4, #0]
   d7d84:	1a52      	subs	r2, r2, r1
   d7d86:	68db      	ldr	r3, [r3, #12]
   d7d88:	4620      	mov	r0, r4
   d7d8a:	4798      	blx	r3
        write("(): ", 4);
   d7d8c:	6823      	ldr	r3, [r4, #0]
   d7d8e:	4930      	ldr	r1, [pc, #192]	; (d7e50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7d90:	68db      	ldr	r3, [r3, #12]
   d7d92:	2204      	movs	r2, #4
   d7d94:	4620      	mov	r0, r4
   d7d96:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7d98:	2100      	movs	r1, #0
   d7d9a:	4638      	mov	r0, r7
   d7d9c:	f7fd fade 	bl	d535c <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7da0:	4601      	mov	r1, r0
   d7da2:	4620      	mov	r0, r4
   d7da4:	f7ff f9c9 	bl	d713a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7da8:	6823      	ldr	r3, [r4, #0]
   d7daa:	4928      	ldr	r1, [pc, #160]	; (d7e4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7dac:	68db      	ldr	r3, [r3, #12]
   d7dae:	2202      	movs	r2, #2
   d7db0:	4620      	mov	r0, r4
   d7db2:	4798      	blx	r3
    // Message
    if (msg) {
   d7db4:	b11e      	cbz	r6, d7dbe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d7db6:	4631      	mov	r1, r6
   d7db8:	4620      	mov	r0, r4
   d7dba:	f7ff f9be 	bl	d713a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d7dbe:	792b      	ldrb	r3, [r5, #4]
   d7dc0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7dc4:	d02d      	beq.n	d7e22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d7dc6:	6823      	ldr	r3, [r4, #0]
   d7dc8:	4922      	ldr	r1, [pc, #136]	; (d7e54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d7dca:	68db      	ldr	r3, [r3, #12]
   d7dcc:	4620      	mov	r0, r4
   d7dce:	2202      	movs	r2, #2
   d7dd0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d7dd2:	792b      	ldrb	r3, [r5, #4]
   d7dd4:	06d8      	lsls	r0, r3, #27
   d7dd6:	d50b      	bpl.n	d7df0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d7dd8:	6823      	ldr	r3, [r4, #0]
   d7dda:	491f      	ldr	r1, [pc, #124]	; (d7e58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d7ddc:	68db      	ldr	r3, [r3, #12]
   d7dde:	2207      	movs	r2, #7
   d7de0:	4620      	mov	r0, r4
   d7de2:	4798      	blx	r3
   d7de4:	69ab      	ldr	r3, [r5, #24]
   d7de6:	4a1d      	ldr	r2, [pc, #116]	; (d7e5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d7de8:	6a20      	ldr	r0, [r4, #32]
   d7dea:	2100      	movs	r1, #0
   d7dec:	f7ff f903 	bl	d6ff6 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d7df0:	792b      	ldrb	r3, [r5, #4]
   d7df2:	0699      	lsls	r1, r3, #26
   d7df4:	d511      	bpl.n	d7e1a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d7df6:	06da      	lsls	r2, r3, #27
   d7df8:	d505      	bpl.n	d7e06 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d7dfa:	6823      	ldr	r3, [r4, #0]
   d7dfc:	4912      	ldr	r1, [pc, #72]	; (d7e48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7dfe:	68db      	ldr	r3, [r3, #12]
   d7e00:	2202      	movs	r2, #2
   d7e02:	4620      	mov	r0, r4
   d7e04:	4798      	blx	r3
            }
            write("details = ", 10);
   d7e06:	6823      	ldr	r3, [r4, #0]
   d7e08:	4915      	ldr	r1, [pc, #84]	; (d7e60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d7e0a:	68db      	ldr	r3, [r3, #12]
   d7e0c:	4620      	mov	r0, r4
   d7e0e:	220a      	movs	r2, #10
   d7e10:	4798      	blx	r3
            write(attr.details);
   d7e12:	69e9      	ldr	r1, [r5, #28]
   d7e14:	4620      	mov	r0, r4
   d7e16:	f7ff f990 	bl	d713a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d7e1a:	215d      	movs	r1, #93	; 0x5d
   d7e1c:	4620      	mov	r0, r4
   d7e1e:	f7ff f99a 	bl	d7156 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7e22:	6823      	ldr	r3, [r4, #0]
   d7e24:	490f      	ldr	r1, [pc, #60]	; (d7e64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d7e26:	68db      	ldr	r3, [r3, #12]
   d7e28:	4620      	mov	r0, r4
   d7e2a:	2202      	movs	r2, #2
}
   d7e2c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7e30:	4718      	bx	r3
   d7e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7e36:	bf00      	nop
   d7e38:	2003e740 	.word	0x2003e740
   d7e3c:	000d9ee7 	.word	0x000d9ee7
   d7e40:	000d9eee 	.word	0x000d9eee
   d7e44:	000da0e4 	.word	0x000da0e4
   d7e48:	000d9ef1 	.word	0x000d9ef1
   d7e4c:	000d9ef6 	.word	0x000d9ef6
   d7e50:	000d9ef4 	.word	0x000d9ef4
   d7e54:	000d9ef9 	.word	0x000d9ef9
   d7e58:	000d9efc 	.word	0x000d9efc
   d7e5c:	000d9f04 	.word	0x000d9f04
   d7e60:	000d9f07 	.word	0x000d9f07
   d7e64:	000d9f12 	.word	0x000d9f12

000d7e68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7e68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7e6c:	b085      	sub	sp, #20
   d7e6e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7e72:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7e74:	4606      	mov	r6, r0
   d7e76:	460f      	mov	r7, r1
   d7e78:	4691      	mov	r9, r2
   d7e7a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7e7c:	f000 fa58 	bl	d8330 <_Z16_fetch_usbserialv>
   d7e80:	4580      	cmp	r8, r0
   d7e82:	d105      	bne.n	d7e90 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7e84:	484a      	ldr	r0, [pc, #296]	; (d7fb0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7e86:	f000 fef4 	bl	d8c72 <_ZN5spark12NetworkClass9listeningEv>
   d7e8a:	2800      	cmp	r0, #0
   d7e8c:	f040 808c 	bne.w	d7fa8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7e90:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7e92:	4a48      	ldr	r2, [pc, #288]	; (d7fb4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7e94:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7e96:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d7e9a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7e9c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7e9e:	f88d 8008 	strb.w	r8, [sp, #8]
   d7ea2:	f001 f82a 	bl	d8efa <_ZN5spark10JSONWriter11beginObjectEv>
   d7ea6:	4641      	mov	r1, r8
   d7ea8:	4648      	mov	r0, r9
   d7eaa:	f7fd fa57 	bl	d535c <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d7eae:	4942      	ldr	r1, [pc, #264]	; (d7fb8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7eb0:	4680      	mov	r8, r0
   d7eb2:	2201      	movs	r2, #1
   d7eb4:	a801      	add	r0, sp, #4
   d7eb6:	f001 f8a5 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7eba:	4641      	mov	r1, r8
   d7ebc:	f7ff f92d 	bl	d711a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d7ec0:	b13f      	cbz	r7, d7ed2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7ec2:	493e      	ldr	r1, [pc, #248]	; (d7fbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7ec4:	2201      	movs	r2, #1
   d7ec6:	a801      	add	r0, sp, #4
   d7ec8:	f001 f89c 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7ecc:	4639      	mov	r1, r7
   d7ece:	f7ff f924 	bl	d711a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d7ed2:	b13d      	cbz	r5, d7ee4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7ed4:	493a      	ldr	r1, [pc, #232]	; (d7fc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7ed6:	2201      	movs	r2, #1
   d7ed8:	a801      	add	r0, sp, #4
   d7eda:	f001 f893 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7ede:	4629      	mov	r1, r5
   d7ee0:	f7ff f91b 	bl	d711a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d7ee4:	7923      	ldrb	r3, [r4, #4]
   d7ee6:	07df      	lsls	r7, r3, #31
   d7ee8:	d50e      	bpl.n	d7f08 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d7eea:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7eec:	212f      	movs	r1, #47	; 0x2f
   d7eee:	4628      	mov	r0, r5
   d7ef0:	f001 fb27 	bl	d9542 <strrchr>
    if (s1) {
   d7ef4:	b100      	cbz	r0, d7ef8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7ef6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d7ef8:	4932      	ldr	r1, [pc, #200]	; (d7fc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d7efa:	2201      	movs	r2, #1
   d7efc:	a801      	add	r0, sp, #4
   d7efe:	f001 f881 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7f02:	4629      	mov	r1, r5
   d7f04:	f7ff f909 	bl	d711a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d7f08:	7923      	ldrb	r3, [r4, #4]
   d7f0a:	079d      	lsls	r5, r3, #30
   d7f0c:	d507      	bpl.n	d7f1e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7f0e:	492e      	ldr	r1, [pc, #184]	; (d7fc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7f10:	2202      	movs	r2, #2
   d7f12:	a801      	add	r0, sp, #4
   d7f14:	f001 f876 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7f18:	68e1      	ldr	r1, [r4, #12]
   d7f1a:	f000 fffb 	bl	d8f14 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7f1e:	7923      	ldrb	r3, [r4, #4]
   d7f20:	0758      	lsls	r0, r3, #29
   d7f22:	d516      	bpl.n	d7f52 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7f24:	6925      	ldr	r5, [r4, #16]
   d7f26:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d7f28:	463b      	mov	r3, r7
   d7f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f2e:	b13a      	cbz	r2, d7f40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7f30:	2a20      	cmp	r2, #32
   d7f32:	d101      	bne.n	d7f38 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7f34:	461d      	mov	r5, r3
   d7f36:	e001      	b.n	d7f3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d7f38:	2a28      	cmp	r2, #40	; 0x28
   d7f3a:	d001      	beq.n	d7f40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7f3c:	461f      	mov	r7, r3
   d7f3e:	e7f3      	b.n	d7f28 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7f40:	2202      	movs	r2, #2
   d7f42:	4922      	ldr	r1, [pc, #136]	; (d7fcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7f44:	a801      	add	r0, sp, #4
   d7f46:	f001 f85d 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7f4a:	1b7a      	subs	r2, r7, r5
   d7f4c:	4629      	mov	r1, r5
   d7f4e:	f001 f868 	bl	d9022 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7f52:	7923      	ldrb	r3, [r4, #4]
   d7f54:	0719      	lsls	r1, r3, #28
   d7f56:	d507      	bpl.n	d7f68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d7f58:	491d      	ldr	r1, [pc, #116]	; (d7fd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7f5a:	2201      	movs	r2, #1
   d7f5c:	a801      	add	r0, sp, #4
   d7f5e:	f001 f851 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7f62:	6961      	ldr	r1, [r4, #20]
   d7f64:	f000 ffe8 	bl	d8f38 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7f68:	7923      	ldrb	r3, [r4, #4]
   d7f6a:	06da      	lsls	r2, r3, #27
   d7f6c:	d508      	bpl.n	d7f80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7f6e:	2204      	movs	r2, #4
   d7f70:	4918      	ldr	r1, [pc, #96]	; (d7fd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7f72:	eb0d 0002 	add.w	r0, sp, r2
   d7f76:	f001 f845 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7f7a:	69a1      	ldr	r1, [r4, #24]
   d7f7c:	f000 ffca 	bl	d8f14 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7f80:	7923      	ldrb	r3, [r4, #4]
   d7f82:	069b      	lsls	r3, r3, #26
   d7f84:	d507      	bpl.n	d7f96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7f86:	4914      	ldr	r1, [pc, #80]	; (d7fd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7f88:	2206      	movs	r2, #6
   d7f8a:	a801      	add	r0, sp, #4
   d7f8c:	f001 f83a 	bl	d9004 <_ZN5spark10JSONWriter4nameEPKcj>
   d7f90:	69e1      	ldr	r1, [r4, #28]
   d7f92:	f7ff f8c2 	bl	d711a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7f96:	a801      	add	r0, sp, #4
   d7f98:	f000 ff99 	bl	d8ece <_ZN5spark10JSONWriter9endObjectEv>
   d7f9c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d7f9e:	490f      	ldr	r1, [pc, #60]	; (d7fdc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7fa0:	6803      	ldr	r3, [r0, #0]
   d7fa2:	2202      	movs	r2, #2
   d7fa4:	68db      	ldr	r3, [r3, #12]
   d7fa6:	4798      	blx	r3
}
   d7fa8:	b005      	add	sp, #20
   d7faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7fae:	bf00      	nop
   d7fb0:	2003e740 	.word	0x2003e740
   d7fb4:	000d9e48 	.word	0x000d9e48
   d7fb8:	000d9e7a 	.word	0x000d9e7a
   d7fbc:	000d9e8d 	.word	0x000d9e8d
   d7fc0:	000d999d 	.word	0x000d999d
   d7fc4:	000d9978 	.word	0x000d9978
   d7fc8:	000d9f15 	.word	0x000d9f15
   d7fcc:	000d9f18 	.word	0x000d9f18
   d7fd0:	000d9ea2 	.word	0x000d9ea2
   d7fd4:	000d9f1b 	.word	0x000d9f1b
   d7fd8:	000d9f20 	.word	0x000d9f20
   d7fdc:	000d9f12 	.word	0x000d9f12

000d7fe0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7fe0:	4b02      	ldr	r3, [pc, #8]	; (d7fec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7fe2:	681a      	ldr	r2, [r3, #0]
   d7fe4:	4b02      	ldr	r3, [pc, #8]	; (d7ff0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7fe6:	601a      	str	r2, [r3, #0]
   d7fe8:	4770      	bx	lr
   d7fea:	bf00      	nop
   d7fec:	2003d85c 	.word	0x2003d85c
   d7ff0:	2003e410 	.word	0x2003e410

000d7ff4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7ff4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7ff6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7ff8:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7ffa:	b113      	cbz	r3, d8002 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7ffc:	2203      	movs	r2, #3
   d7ffe:	4601      	mov	r1, r0
   d8000:	4798      	blx	r3
    }
   d8002:	4620      	mov	r0, r4
   d8004:	bd10      	pop	{r4, pc}

000d8006 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8006:	b510      	push	{r4, lr}
   d8008:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d800a:	f7ff fff3 	bl	d7ff4 <_ZNSt14_Function_baseD1Ev>
   d800e:	4620      	mov	r0, r4
   d8010:	bd10      	pop	{r4, pc}
	...

000d8014 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8014:	4803      	ldr	r0, [pc, #12]	; (d8024 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8016:	4a04      	ldr	r2, [pc, #16]	; (d8028 <_GLOBAL__sub_I_RGB+0x14>)
   d8018:	4904      	ldr	r1, [pc, #16]	; (d802c <_GLOBAL__sub_I_RGB+0x18>)
   d801a:	2300      	movs	r3, #0
   d801c:	6083      	str	r3, [r0, #8]
   d801e:	f001 b862 	b.w	d90e6 <__aeabi_atexit>
   d8022:	bf00      	nop
   d8024:	2003e414 	.word	0x2003e414
   d8028:	2003d8c8 	.word	0x2003d8c8
   d802c:	000d8007 	.word	0x000d8007

000d8030 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8030:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8032:	4b0c      	ldr	r3, [pc, #48]	; (d8064 <serialEventRun+0x34>)
   d8034:	b133      	cbz	r3, d8044 <serialEventRun+0x14>
   d8036:	f000 f97b 	bl	d8330 <_Z16_fetch_usbserialv>
   d803a:	6803      	ldr	r3, [r0, #0]
   d803c:	691b      	ldr	r3, [r3, #16]
   d803e:	4798      	blx	r3
   d8040:	2800      	cmp	r0, #0
   d8042:	dc09      	bgt.n	d8058 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8044:	4b08      	ldr	r3, [pc, #32]	; (d8068 <serialEventRun+0x38>)
   d8046:	b163      	cbz	r3, d8062 <serialEventRun+0x32>
   d8048:	f000 f9fa 	bl	d8440 <_Z22__fetch_global_Serial1v>
   d804c:	6803      	ldr	r3, [r0, #0]
   d804e:	691b      	ldr	r3, [r3, #16]
   d8050:	4798      	blx	r3
   d8052:	2800      	cmp	r0, #0
   d8054:	dc03      	bgt.n	d805e <serialEventRun+0x2e>
   d8056:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d8058:	f3af 8000 	nop.w
   d805c:	e7f2      	b.n	d8044 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d805e:	f3af 8000 	nop.w
   d8062:	bd08      	pop	{r3, pc}
	...

000d806c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d806c:	b508      	push	{r3, lr}
	serialEventRun();
   d806e:	f7ff ffdf 	bl	d8030 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8072:	f7fc ffb1 	bl	d4fd8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8076:	4b01      	ldr	r3, [pc, #4]	; (d807c <_post_loop+0x10>)
   d8078:	6018      	str	r0, [r3, #0]
   d807a:	bd08      	pop	{r3, pc}
   d807c:	2003e748 	.word	0x2003e748

000d8080 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8080:	4802      	ldr	r0, [pc, #8]	; (d808c <_Z33system_initialize_user_backup_ramv+0xc>)
   d8082:	4a03      	ldr	r2, [pc, #12]	; (d8090 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8084:	4903      	ldr	r1, [pc, #12]	; (d8094 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8086:	1a12      	subs	r2, r2, r0
   d8088:	f001 b9b1 	b.w	d93ee <memcpy>
   d808c:	2003f400 	.word	0x2003f400
   d8090:	2003f404 	.word	0x2003f404
   d8094:	000da320 	.word	0x000da320

000d8098 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8098:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d809a:	2300      	movs	r3, #0
   d809c:	9300      	str	r3, [sp, #0]
   d809e:	461a      	mov	r2, r3
   d80a0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d80a4:	f7fd f97c 	bl	d53a0 <system_ctrl_set_result>
}
   d80a8:	b003      	add	sp, #12
   d80aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d80b0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d80b0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d80b2:	8843      	ldrh	r3, [r0, #2]
   d80b4:	2b0a      	cmp	r3, #10
   d80b6:	d008      	beq.n	d80ca <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d80b8:	2b50      	cmp	r3, #80	; 0x50
   d80ba:	d109      	bne.n	d80d0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d80bc:	4b09      	ldr	r3, [pc, #36]	; (d80e4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d80be:	681b      	ldr	r3, [r3, #0]
   d80c0:	b13b      	cbz	r3, d80d2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d80c2:	b003      	add	sp, #12
   d80c4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d80c8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d80ca:	f7ff ffe5 	bl	d8098 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d80ce:	e006      	b.n	d80de <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d80d0:	2300      	movs	r3, #0
   d80d2:	9300      	str	r3, [sp, #0]
   d80d4:	461a      	mov	r2, r3
   d80d6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d80da:	f7fd f961 	bl	d53a0 <system_ctrl_set_result>
        break;
    }
}
   d80de:	b003      	add	sp, #12
   d80e0:	f85d fb04 	ldr.w	pc, [sp], #4
   d80e4:	2003e424 	.word	0x2003e424

000d80e8 <module_user_init_hook>:

void module_user_init_hook()
{
   d80e8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d80ea:	4c10      	ldr	r4, [pc, #64]	; (d812c <module_user_init_hook+0x44>)
   d80ec:	4d10      	ldr	r5, [pc, #64]	; (d8130 <module_user_init_hook+0x48>)
   d80ee:	6823      	ldr	r3, [r4, #0]
   d80f0:	42ab      	cmp	r3, r5
   d80f2:	4b10      	ldr	r3, [pc, #64]	; (d8134 <module_user_init_hook+0x4c>)
   d80f4:	bf0c      	ite	eq
   d80f6:	2201      	moveq	r2, #1
   d80f8:	2200      	movne	r2, #0
   d80fa:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d80fc:	d002      	beq.n	d8104 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d80fe:	f7ff ffbf 	bl	d8080 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8102:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8104:	f7fc ff58 	bl	d4fb8 <HAL_RNG_GetRandomNumber>
   d8108:	4604      	mov	r4, r0
    srand(seed);
   d810a:	f001 f99f 	bl	d944c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d810e:	4b0a      	ldr	r3, [pc, #40]	; (d8138 <module_user_init_hook+0x50>)
   d8110:	b113      	cbz	r3, d8118 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8112:	4620      	mov	r0, r4
   d8114:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8118:	2100      	movs	r1, #0
   d811a:	4807      	ldr	r0, [pc, #28]	; (d8138 <module_user_init_hook+0x50>)
   d811c:	f7fd f99a 	bl	d5454 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8120:	2100      	movs	r1, #0
   d8122:	4806      	ldr	r0, [pc, #24]	; (d813c <module_user_init_hook+0x54>)
}
   d8124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8128:	f7fd b930 	b.w	d538c <system_ctrl_set_app_request_handler>
   d812c:	2003f400 	.word	0x2003f400
   d8130:	9a271c1e 	.word	0x9a271c1e
   d8134:	2003e428 	.word	0x2003e428
   d8138:	00000000 	.word	0x00000000
   d813c:	000d80b1 	.word	0x000d80b1

000d8140 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d8140:	4770      	bx	lr

000d8142 <_ZN9IPAddressD0Ev>:
   d8142:	b510      	push	{r4, lr}
   d8144:	2118      	movs	r1, #24
   d8146:	4604      	mov	r4, r0
   d8148:	f000 ffda 	bl	d9100 <_ZdlPvj>
   d814c:	4620      	mov	r0, r4
   d814e:	bd10      	pop	{r4, pc}

000d8150 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8150:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8152:	7d03      	ldrb	r3, [r0, #20]
   d8154:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d8156:	b08d      	sub	sp, #52	; 0x34
   d8158:	460e      	mov	r6, r1
   d815a:	f100 0704 	add.w	r7, r0, #4
   d815e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8162:	d002      	beq.n	d816a <_ZNK9IPAddress7printToER5Print+0x1a>
   d8164:	f100 0508 	add.w	r5, r0, #8
   d8168:	e018      	b.n	d819c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d816a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d816c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d816e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8172:	232f      	movs	r3, #47	; 0x2f
   d8174:	462a      	mov	r2, r5
   d8176:	200a      	movs	r0, #10
   d8178:	f7fd f800 	bl	d517c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d817c:	4628      	mov	r0, r5
   d817e:	f001 f9b7 	bl	d94f0 <strlen>
   d8182:	6833      	ldr	r3, [r6, #0]
   d8184:	4602      	mov	r2, r0
   d8186:	68db      	ldr	r3, [r3, #12]
   d8188:	4629      	mov	r1, r5
   d818a:	4630      	mov	r0, r6
   d818c:	4798      	blx	r3
   d818e:	e00f      	b.n	d81b0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d8190:	b124      	cbz	r4, d819c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8192:	212e      	movs	r1, #46	; 0x2e
   d8194:	4630      	mov	r0, r6
   d8196:	f7fe feff 	bl	d6f98 <_ZN5Print5printEc>
   d819a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d819c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d81a0:	220a      	movs	r2, #10
   d81a2:	4630      	mov	r0, r6
   d81a4:	f7fe ff07 	bl	d6fb6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d81a8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d81aa:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d81ac:	d1f0      	bne.n	d8190 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d81ae:	4620      	mov	r0, r4
    }
    return n;
}
   d81b0:	b00d      	add	sp, #52	; 0x34
   d81b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d81b4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d81b4:	b510      	push	{r4, lr}
   d81b6:	4b05      	ldr	r3, [pc, #20]	; (d81cc <_ZN9IPAddressC1Ev+0x18>)
   d81b8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d81ba:	2211      	movs	r2, #17
   d81bc:	f840 3b04 	str.w	r3, [r0], #4
   d81c0:	2100      	movs	r1, #0
   d81c2:	f001 f93a 	bl	d943a <memset>
{
    clear();
}
   d81c6:	4620      	mov	r0, r4
   d81c8:	bd10      	pop	{r4, pc}
   d81ca:	bf00      	nop
   d81cc:	000d9fc8 	.word	0x000d9fc8

000d81d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d81d0:	4603      	mov	r3, r0
   d81d2:	4a07      	ldr	r2, [pc, #28]	; (d81f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d81d4:	b510      	push	{r4, lr}
   d81d6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d81da:	f101 0210 	add.w	r2, r1, #16
   d81de:	f851 4b04 	ldr.w	r4, [r1], #4
   d81e2:	f843 4b04 	str.w	r4, [r3], #4
   d81e6:	4291      	cmp	r1, r2
   d81e8:	d1f9      	bne.n	d81de <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d81ea:	780a      	ldrb	r2, [r1, #0]
   d81ec:	701a      	strb	r2, [r3, #0]
}
   d81ee:	bd10      	pop	{r4, pc}
   d81f0:	000d9fc8 	.word	0x000d9fc8

000d81f4 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d81f4:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d81f6:	2b04      	cmp	r3, #4
   d81f8:	d101      	bne.n	d81fe <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d81fa:	6840      	ldr	r0, [r0, #4]
   d81fc:	e008      	b.n	d8210 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d81fe:	2b06      	cmp	r3, #6
   d8200:	d10a      	bne.n	d8218 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d8202:	6843      	ldr	r3, [r0, #4]
   d8204:	b953      	cbnz	r3, d821c <_ZNK9IPAddresscvbEv+0x28>
   d8206:	6883      	ldr	r3, [r0, #8]
   d8208:	b943      	cbnz	r3, d821c <_ZNK9IPAddresscvbEv+0x28>
   d820a:	68c3      	ldr	r3, [r0, #12]
   d820c:	b933      	cbnz	r3, d821c <_ZNK9IPAddresscvbEv+0x28>
   d820e:	6900      	ldr	r0, [r0, #16]
   d8210:	3000      	adds	r0, #0
   d8212:	bf18      	it	ne
   d8214:	2001      	movne	r0, #1
   d8216:	4770      	bx	lr
    } else {
        return false;
   d8218:	2000      	movs	r0, #0
   d821a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d821c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d821e:	4770      	bx	lr

000d8220 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8220:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8222:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d8226:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d822a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d822e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d8232:	2304      	movs	r3, #4
   d8234:	6041      	str	r1, [r0, #4]
   d8236:	7503      	strb	r3, [r0, #20]
   d8238:	bd10      	pop	{r4, pc}

000d823a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d823a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d823c:	780d      	ldrb	r5, [r1, #0]
   d823e:	788b      	ldrb	r3, [r1, #2]
   d8240:	784a      	ldrb	r2, [r1, #1]
   d8242:	78c9      	ldrb	r1, [r1, #3]
   d8244:	9100      	str	r1, [sp, #0]
   d8246:	4629      	mov	r1, r5
   d8248:	f7ff ffea 	bl	d8220 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d824c:	b003      	add	sp, #12
   d824e:	bd30      	pop	{r4, r5, pc}

000d8250 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d8250:	b510      	push	{r4, lr}
   d8252:	4b03      	ldr	r3, [pc, #12]	; (d8260 <_ZN9IPAddressC1EPKh+0x10>)
   d8254:	6003      	str	r3, [r0, #0]
   d8256:	4604      	mov	r4, r0
{
    *this = address;
   d8258:	f7ff ffef 	bl	d823a <_ZN9IPAddressaSEPKh>
}
   d825c:	4620      	mov	r0, r4
   d825e:	bd10      	pop	{r4, pc}
   d8260:	000d9fc8 	.word	0x000d9fc8

000d8264 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8264:	7441      	strb	r1, [r0, #17]
   d8266:	4770      	bx	lr

000d8268 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8268:	4770      	bx	lr

000d826a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d826a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d826c:	2100      	movs	r1, #0
   d826e:	7c00      	ldrb	r0, [r0, #16]
   d8270:	f7fd f844 	bl	d52fc <HAL_USB_USART_Receive_Data>
}
   d8274:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d8278:	bf28      	it	cs
   d827a:	f04f 30ff 	movcs.w	r0, #4294967295
   d827e:	bd08      	pop	{r3, pc}

000d8280 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d8280:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8282:	2101      	movs	r1, #1
   d8284:	7c00      	ldrb	r0, [r0, #16]
   d8286:	f7fd f839 	bl	d52fc <HAL_USB_USART_Receive_Data>
}
   d828a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d828e:	bf28      	it	cs
   d8290:	f04f 30ff 	movcs.w	r0, #4294967295
   d8294:	bd08      	pop	{r3, pc}

000d8296 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d8296:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8298:	7c00      	ldrb	r0, [r0, #16]
   d829a:	f7fd f827 	bl	d52ec <HAL_USB_USART_Available_Data_For_Write>
}
   d829e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82a2:	bd08      	pop	{r3, pc}

000d82a4 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d82a4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d82a6:	7c00      	ldrb	r0, [r0, #16]
   d82a8:	f7fd f818 	bl	d52dc <HAL_USB_USART_Available_Data>
}
   d82ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d82b0:	bd08      	pop	{r3, pc}

000d82b2 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d82b2:	7c00      	ldrb	r0, [r0, #16]
   d82b4:	f7fd b832 	b.w	d531c <HAL_USB_USART_Flush_Data>

000d82b8 <_ZN9USBSerialD0Ev>:
   d82b8:	b510      	push	{r4, lr}
   d82ba:	2114      	movs	r1, #20
   d82bc:	4604      	mov	r4, r0
   d82be:	f000 ff1f 	bl	d9100 <_ZdlPvj>
   d82c2:	4620      	mov	r0, r4
   d82c4:	bd10      	pop	{r4, pc}

000d82c6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d82c6:	b538      	push	{r3, r4, r5, lr}
   d82c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d82ca:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d82cc:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d82ce:	f7fd f80d 	bl	d52ec <HAL_USB_USART_Available_Data_For_Write>
   d82d2:	2800      	cmp	r0, #0
   d82d4:	dc01      	bgt.n	d82da <_ZN9USBSerial5writeEh+0x14>
   d82d6:	7c60      	ldrb	r0, [r4, #17]
   d82d8:	b128      	cbz	r0, d82e6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d82da:	4629      	mov	r1, r5
   d82dc:	7c20      	ldrb	r0, [r4, #16]
   d82de:	f7fd f815 	bl	d530c <HAL_USB_USART_Send_Data>
   d82e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d82e6:	bd38      	pop	{r3, r4, r5, pc}

000d82e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d82e8:	b510      	push	{r4, lr}
   d82ea:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d82ec:	2300      	movs	r3, #0
   d82ee:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d82f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d82f4:	60a3      	str	r3, [r4, #8]
   d82f6:	4b05      	ldr	r3, [pc, #20]	; (d830c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d82f8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d82fa:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d82fc:	4608      	mov	r0, r1
{
  _serial = serial;
   d82fe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8300:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8302:	4611      	mov	r1, r2
   d8304:	f7fc ffd2 	bl	d52ac <HAL_USB_USART_Init>
}
   d8308:	4620      	mov	r0, r4
   d830a:	bd10      	pop	{r4, pc}
   d830c:	000d9fdc 	.word	0x000d9fdc

000d8310 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8310:	2200      	movs	r2, #0
   d8312:	7c00      	ldrb	r0, [r0, #16]
   d8314:	f7fc bfd2 	b.w	d52bc <HAL_USB_USART_Begin>

000d8318 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d8318:	7c00      	ldrb	r0, [r0, #16]
   d831a:	f7fc bfd7 	b.w	d52cc <HAL_USB_USART_End>

000d831e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d831e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8320:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8322:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8324:	2100      	movs	r1, #0
   d8326:	f001 f888 	bl	d943a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d832a:	4620      	mov	r0, r4
   d832c:	bd10      	pop	{r4, pc}
	...

000d8330 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8330:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8332:	4d0e      	ldr	r5, [pc, #56]	; (d836c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8334:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8336:	a801      	add	r0, sp, #4
   d8338:	f7ff fff1 	bl	d831e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d833c:	6829      	ldr	r1, [r5, #0]
   d833e:	f011 0401 	ands.w	r4, r1, #1
   d8342:	d110      	bne.n	d8366 <_Z16_fetch_usbserialv+0x36>
   d8344:	4628      	mov	r0, r5
   d8346:	f7fb feb9 	bl	d40bc <__cxa_guard_acquire>
   d834a:	b160      	cbz	r0, d8366 <_Z16_fetch_usbserialv+0x36>
   d834c:	aa01      	add	r2, sp, #4
   d834e:	4621      	mov	r1, r4
   d8350:	4807      	ldr	r0, [pc, #28]	; (d8370 <_Z16_fetch_usbserialv+0x40>)
   d8352:	f7ff ffc9 	bl	d82e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8356:	4628      	mov	r0, r5
   d8358:	f7fb feb5 	bl	d40c6 <__cxa_guard_release>
   d835c:	4a05      	ldr	r2, [pc, #20]	; (d8374 <_Z16_fetch_usbserialv+0x44>)
   d835e:	4906      	ldr	r1, [pc, #24]	; (d8378 <_Z16_fetch_usbserialv+0x48>)
   d8360:	4803      	ldr	r0, [pc, #12]	; (d8370 <_Z16_fetch_usbserialv+0x40>)
   d8362:	f000 fec0 	bl	d90e6 <__aeabi_atexit>
	return _usbserial;
}
   d8366:	4802      	ldr	r0, [pc, #8]	; (d8370 <_Z16_fetch_usbserialv+0x40>)
   d8368:	b007      	add	sp, #28
   d836a:	bd30      	pop	{r4, r5, pc}
   d836c:	2003e42c 	.word	0x2003e42c
   d8370:	2003e430 	.word	0x2003e430
   d8374:	2003d8c8 	.word	0x2003d8c8
   d8378:	000d8269 	.word	0x000d8269

000d837c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d837c:	4770      	bx	lr

000d837e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d837e:	7441      	strb	r1, [r0, #17]
   d8380:	4770      	bx	lr

000d8382 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d8382:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d8384:	7c00      	ldrb	r0, [r0, #16]
   d8386:	f7fc ff49 	bl	d521c <HAL_USART_Available_Data_For_Write>
}
   d838a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d838e:	bd08      	pop	{r3, pc}

000d8390 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8390:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d8392:	7c00      	ldrb	r0, [r0, #16]
   d8394:	f7fc ff22 	bl	d51dc <HAL_USART_Available_Data>
}
   d8398:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d839c:	bd08      	pop	{r3, pc}

000d839e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d839e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d83a0:	7c00      	ldrb	r0, [r0, #16]
   d83a2:	f7fc ff2b 	bl	d51fc <HAL_USART_Peek_Data>
}
   d83a6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d83aa:	bf28      	it	cs
   d83ac:	f04f 30ff 	movcs.w	r0, #4294967295
   d83b0:	bd08      	pop	{r3, pc}

000d83b2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d83b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d83b4:	7c00      	ldrb	r0, [r0, #16]
   d83b6:	f7fc ff19 	bl	d51ec <HAL_USART_Read_Data>
}
   d83ba:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d83be:	bf28      	it	cs
   d83c0:	f04f 30ff 	movcs.w	r0, #4294967295
   d83c4:	bd08      	pop	{r3, pc}

000d83c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d83c6:	7c00      	ldrb	r0, [r0, #16]
   d83c8:	f7fc bf20 	b.w	d520c <HAL_USART_Flush_Data>

000d83cc <_ZN11USARTSerialD0Ev>:
   d83cc:	b510      	push	{r4, lr}
   d83ce:	2114      	movs	r1, #20
   d83d0:	4604      	mov	r4, r0
   d83d2:	f000 fe95 	bl	d9100 <_ZdlPvj>
   d83d6:	4620      	mov	r0, r4
   d83d8:	bd10      	pop	{r4, pc}

000d83da <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d83da:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d83dc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d83de:	4604      	mov	r4, r0
   d83e0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d83e2:	b925      	cbnz	r5, d83ee <_ZN11USARTSerial5writeEh+0x14>
   d83e4:	7c00      	ldrb	r0, [r0, #16]
   d83e6:	f7fc ff19 	bl	d521c <HAL_USART_Available_Data_For_Write>
   d83ea:	2800      	cmp	r0, #0
   d83ec:	dd05      	ble.n	d83fa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d83ee:	4631      	mov	r1, r6
   d83f0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d83f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d83f6:	f7fc bee9 	b.w	d51cc <HAL_USART_Write_Data>
  }
  return 0;
}
   d83fa:	4628      	mov	r0, r5
   d83fc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8400 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8400:	b510      	push	{r4, lr}
   d8402:	4604      	mov	r4, r0
   d8404:	4608      	mov	r0, r1
   d8406:	4611      	mov	r1, r2
   d8408:	2200      	movs	r2, #0
   d840a:	6062      	str	r2, [r4, #4]
   d840c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8410:	60a2      	str	r2, [r4, #8]
   d8412:	4a05      	ldr	r2, [pc, #20]	; (d8428 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8414:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8416:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8418:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d841a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d841c:	461a      	mov	r2, r3
   d841e:	f7fc fec5 	bl	d51ac <HAL_USART_Init>
}
   d8422:	4620      	mov	r0, r4
   d8424:	bd10      	pop	{r4, pc}
   d8426:	bf00      	nop
   d8428:	000da00c 	.word	0x000da00c

000d842c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d842c:	2300      	movs	r3, #0
   d842e:	7c00      	ldrb	r0, [r0, #16]
   d8430:	f7fc befc 	b.w	d522c <HAL_USART_BeginConfig>

000d8434 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8434:	2200      	movs	r2, #0
   d8436:	f7ff bff9 	b.w	d842c <_ZN11USARTSerial5beginEmm>

000d843a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d843a:	7c00      	ldrb	r0, [r0, #16]
   d843c:	f7fc bebe 	b.w	d51bc <HAL_USART_End>

000d8440 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8440:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8442:	4d0c      	ldr	r5, [pc, #48]	; (d8474 <_Z22__fetch_global_Serial1v+0x34>)
   d8444:	6829      	ldr	r1, [r5, #0]
   d8446:	f011 0401 	ands.w	r4, r1, #1
   d844a:	d111      	bne.n	d8470 <_Z22__fetch_global_Serial1v+0x30>
   d844c:	4628      	mov	r0, r5
   d844e:	f7fb fe35 	bl	d40bc <__cxa_guard_acquire>
   d8452:	b168      	cbz	r0, d8470 <_Z22__fetch_global_Serial1v+0x30>
   d8454:	4a08      	ldr	r2, [pc, #32]	; (d8478 <_Z22__fetch_global_Serial1v+0x38>)
   d8456:	4b09      	ldr	r3, [pc, #36]	; (d847c <_Z22__fetch_global_Serial1v+0x3c>)
   d8458:	4809      	ldr	r0, [pc, #36]	; (d8480 <_Z22__fetch_global_Serial1v+0x40>)
   d845a:	4621      	mov	r1, r4
   d845c:	f7ff ffd0 	bl	d8400 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d8460:	4628      	mov	r0, r5
   d8462:	f7fb fe30 	bl	d40c6 <__cxa_guard_release>
   d8466:	4a07      	ldr	r2, [pc, #28]	; (d8484 <_Z22__fetch_global_Serial1v+0x44>)
   d8468:	4907      	ldr	r1, [pc, #28]	; (d8488 <_Z22__fetch_global_Serial1v+0x48>)
   d846a:	4805      	ldr	r0, [pc, #20]	; (d8480 <_Z22__fetch_global_Serial1v+0x40>)
   d846c:	f000 fe3b 	bl	d90e6 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8470:	4803      	ldr	r0, [pc, #12]	; (d8480 <_Z22__fetch_global_Serial1v+0x40>)
   d8472:	bd38      	pop	{r3, r4, r5, pc}
   d8474:	2003e4dc 	.word	0x2003e4dc
   d8478:	2003e4e0 	.word	0x2003e4e0
   d847c:	2003e458 	.word	0x2003e458
   d8480:	2003e444 	.word	0x2003e444
   d8484:	2003d8c8 	.word	0x2003d8c8
   d8488:	000d837d 	.word	0x000d837d

000d848c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d848c:	2200      	movs	r2, #0
   d848e:	4611      	mov	r1, r2
   d8490:	6840      	ldr	r0, [r0, #4]
   d8492:	f7fc bfc7 	b.w	d5424 <network_listening>

000d8496 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8496:	2200      	movs	r2, #0
   d8498:	4611      	mov	r1, r2
   d849a:	6840      	ldr	r0, [r0, #4]
   d849c:	f7fc bfd2 	b.w	d5444 <network_get_listen_timeout>

000d84a0 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d84a0:	2200      	movs	r2, #0
   d84a2:	6840      	ldr	r0, [r0, #4]
   d84a4:	f7fc bfc6 	b.w	d5434 <network_set_listen_timeout>

000d84a8 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d84a8:	2200      	movs	r2, #0
   d84aa:	f081 0101 	eor.w	r1, r1, #1
   d84ae:	6840      	ldr	r0, [r0, #4]
   d84b0:	f7fc bfb0 	b.w	d5414 <network_listen>

000d84b4 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d84b4:	2300      	movs	r3, #0
   d84b6:	461a      	mov	r2, r3
   d84b8:	2101      	movs	r1, #1
   d84ba:	6840      	ldr	r0, [r0, #4]
   d84bc:	f7fc bfa2 	b.w	d5404 <network_off>

000d84c0 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d84c0:	2300      	movs	r3, #0
   d84c2:	461a      	mov	r2, r3
   d84c4:	4619      	mov	r1, r3
   d84c6:	6840      	ldr	r0, [r0, #4]
   d84c8:	f7fc bf94 	b.w	d53f4 <network_on>

000d84cc <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d84cc:	2200      	movs	r2, #0
   d84ce:	4611      	mov	r1, r2
   d84d0:	6840      	ldr	r0, [r0, #4]
   d84d2:	f7fc bf87 	b.w	d53e4 <network_ready>

000d84d6 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d84d6:	2200      	movs	r2, #0
   d84d8:	4611      	mov	r1, r2
   d84da:	6840      	ldr	r0, [r0, #4]
   d84dc:	f7fc bf72 	b.w	d53c4 <network_connecting>

000d84e0 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d84e0:	2200      	movs	r2, #0
   d84e2:	2102      	movs	r1, #2
   d84e4:	6840      	ldr	r0, [r0, #4]
   d84e6:	f7fc bf75 	b.w	d53d4 <network_disconnect>

000d84ea <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d84ea:	2300      	movs	r3, #0
   d84ec:	461a      	mov	r2, r3
   d84ee:	6840      	ldr	r0, [r0, #4]
   d84f0:	f7fc bf60 	b.w	d53b4 <network_connect>

000d84f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d84f4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d84f6:	4605      	mov	r5, r0
   d84f8:	b188      	cbz	r0, d851e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d84fa:	6804      	ldr	r4, [r0, #0]
   d84fc:	b14c      	cbz	r4, d8512 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d84fe:	68a3      	ldr	r3, [r4, #8]
   d8500:	b11b      	cbz	r3, d850a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8502:	2203      	movs	r2, #3
   d8504:	4621      	mov	r1, r4
   d8506:	4620      	mov	r0, r4
   d8508:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d850a:	2110      	movs	r1, #16
   d850c:	4620      	mov	r0, r4
   d850e:	f000 fdf7 	bl	d9100 <_ZdlPvj>
   d8512:	4628      	mov	r0, r5
   d8514:	2114      	movs	r1, #20
      }
   d8516:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d851a:	f000 bdf1 	b.w	d9100 <_ZdlPvj>
   d851e:	bd38      	pop	{r3, r4, r5, pc}

000d8520 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8520:	b110      	cbz	r0, d8528 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8522:	6803      	ldr	r3, [r0, #0]
   d8524:	685b      	ldr	r3, [r3, #4]
   d8526:	4718      	bx	r3
   d8528:	4770      	bx	lr

000d852a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d852a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d852c:	6803      	ldr	r3, [r0, #0]
   d852e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8530:	b1bb      	cbz	r3, d8562 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8532:	6858      	ldr	r0, [r3, #4]
   d8534:	f7fc fdea 	bl	d510c <os_thread_is_current>
   d8538:	b978      	cbnz	r0, d855a <_ZN6ThreadD1Ev+0x30>
   d853a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d853c:	7c5a      	ldrb	r2, [r3, #17]
   d853e:	b912      	cbnz	r2, d8546 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8540:	6858      	ldr	r0, [r3, #4]
   d8542:	f7fc fdeb 	bl	d511c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8546:	6823      	ldr	r3, [r4, #0]
   d8548:	6858      	ldr	r0, [r3, #4]
   d854a:	f7fc fdef 	bl	d512c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d854e:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8550:	2300      	movs	r3, #0
   d8552:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8554:	b128      	cbz	r0, d8562 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8556:	f7ff ffcd 	bl	d84f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d855a:	6820      	ldr	r0, [r4, #0]
   d855c:	b108      	cbz	r0, d8562 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d855e:	f7ff ffc9 	bl	d84f4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8562:	4620      	mov	r0, r4
   d8564:	bd10      	pop	{r4, pc}

000d8566 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8566:	b538      	push	{r3, r4, r5, lr}
   d8568:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d856a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d856e:	b108      	cbz	r0, d8574 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8570:	f7fb fd97 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8574:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8578:	b108      	cbz	r0, d857e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d857a:	f7fc fde7 	bl	d514c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d857e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8582:	b135      	cbz	r5, d8592 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8584:	4628      	mov	r0, r5
   d8586:	f7ff ffd0 	bl	d852a <_ZN6ThreadD1Ev>
   d858a:	2104      	movs	r1, #4
   d858c:	4628      	mov	r0, r5
   d858e:	f000 fdb7 	bl	d9100 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8592:	6820      	ldr	r0, [r4, #0]
   d8594:	b108      	cbz	r0, d859a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8596:	f7ff ffc3 	bl	d8520 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d859a:	4620      	mov	r0, r4
   d859c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d85a0 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d85a0:	b510      	push	{r4, lr}
   d85a2:	4b04      	ldr	r3, [pc, #16]	; (d85b4 <_ZN5spark9MeshClassD1Ev+0x14>)
   d85a4:	4604      	mov	r4, r0
   d85a6:	f840 3b08 	str.w	r3, [r0], #8
   d85aa:	f7ff ffdc 	bl	d8566 <_ZN5spark11MeshPublishD1Ev>
   d85ae:	4620      	mov	r0, r4
   d85b0:	bd10      	pop	{r4, pc}
   d85b2:	bf00      	nop
   d85b4:	000da03c 	.word	0x000da03c

000d85b8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d85b8:	b538      	push	{r3, r4, r5, lr}
   d85ba:	4c0e      	ldr	r4, [pc, #56]	; (d85f4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d85bc:	4b0e      	ldr	r3, [pc, #56]	; (d85f8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d85be:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d85c0:	2500      	movs	r5, #0
   d85c2:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d85c4:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d85c8:	6063      	str	r3, [r4, #4]
   d85ca:	60a5      	str	r5, [r4, #8]
   d85cc:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d85d0:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d85d4:	f7fc fdb2 	bl	d513c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d85d8:	4b08      	ldr	r3, [pc, #32]	; (d85fc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d85da:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d85de:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d85e2:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d85e4:	4620      	mov	r0, r4
   d85e6:	4a06      	ldr	r2, [pc, #24]	; (d8600 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d85e8:	4906      	ldr	r1, [pc, #24]	; (d8604 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d85ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d85ee:	f000 bd7a 	b.w	d90e6 <__aeabi_atexit>
   d85f2:	bf00      	nop
   d85f4:	2003e564 	.word	0x2003e564
   d85f8:	000da124 	.word	0x000da124
   d85fc:	000da03c 	.word	0x000da03c
   d8600:	2003d8c8 	.word	0x2003d8c8
   d8604:	000d85a1 	.word	0x000d85a1

000d8608 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d8608:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d860a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d860c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d860e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d8612:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8614:	2201      	movs	r2, #1
   d8616:	f04f 33ff 	mov.w	r3, #4294967295
   d861a:	4621      	mov	r1, r4
   d861c:	47a8      	blx	r5
}
   d861e:	b003      	add	sp, #12
   d8620:	bd30      	pop	{r4, r5, pc}

000d8622 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d8622:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8624:	6803      	ldr	r3, [r0, #0]
   d8626:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d8628:	f04f 33ff 	mov.w	r3, #4294967295
   d862c:	46a4      	mov	ip, r4
}
   d862e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d8632:	4760      	bx	ip

000d8634 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d8634:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8636:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d8638:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d863a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d863e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d8640:	4621      	mov	r1, r4
   d8642:	4613      	mov	r3, r2
   d8644:	2201      	movs	r2, #1
   d8646:	47a8      	blx	r5
}
   d8648:	b003      	add	sp, #12
   d864a:	bd30      	pop	{r4, r5, pc}

000d864c <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d864c:	4770      	bx	lr

000d864e <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d864e:	b538      	push	{r3, r4, r5, lr}
   d8650:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d8652:	681a      	ldr	r2, [r3, #0]
   d8654:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d8656:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d8658:	da05      	bge.n	d8666 <_ZN9TCPClient9connectedEv+0x18>
   d865a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d865e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8662:	429a      	cmp	r2, r3
   d8664:	d001      	beq.n	d866a <_ZN9TCPClient9connectedEv+0x1c>
   d8666:	2501      	movs	r5, #1
   d8668:	e00b      	b.n	d8682 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d866a:	6803      	ldr	r3, [r0, #0]
   d866c:	691b      	ldr	r3, [r3, #16]
   d866e:	4798      	blx	r3
   d8670:	2800      	cmp	r0, #0
   d8672:	bf14      	ite	ne
   d8674:	2501      	movne	r5, #1
   d8676:	2500      	moveq	r5, #0
        if (!rv) {
   d8678:	d103      	bne.n	d8682 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d867a:	6823      	ldr	r3, [r4, #0]
   d867c:	4620      	mov	r0, r4
   d867e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d8680:	4798      	blx	r3
        }
    }
    return rv;
}
   d8682:	4628      	mov	r0, r5
   d8684:	bd38      	pop	{r3, r4, r5, pc}

000d8686 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d8686:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d8688:	6818      	ldr	r0, [r3, #0]
}
   d868a:	43c0      	mvns	r0, r0
   d868c:	0fc0      	lsrs	r0, r0, #31
   d868e:	4770      	bx	lr

000d8690 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8690:	4770      	bx	lr

000d8692 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d8692:	2000      	movs	r0, #0
   d8694:	4770      	bx	lr

000d8696 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d8696:	b510      	push	{r4, lr}
   d8698:	2114      	movs	r1, #20
   d869a:	4604      	mov	r4, r0
   d869c:	f000 fd30 	bl	d9100 <_ZdlPvj>
   d86a0:	4620      	mov	r0, r4
   d86a2:	bd10      	pop	{r4, pc}

000d86a4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d86a4:	f7fb bcfb 	b.w	d409e <_ZdlPv>

000d86a8 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d86aa:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d86ac:	2200      	movs	r2, #0
   d86ae:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d86b0:	9202      	str	r2, [sp, #8]
   d86b2:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d86b4:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d86b6:	4604      	mov	r4, r0
   d86b8:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d86ba:	d008      	beq.n	d86ce <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d86bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d86c0:	fbb3 f1f2 	udiv	r1, r3, r2
   d86c4:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d86c6:	fb02 3111 	mls	r1, r2, r1, r3
   d86ca:	434a      	muls	r2, r1
   d86cc:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d86ce:	6960      	ldr	r0, [r4, #20]
   d86d0:	2308      	movs	r3, #8
   d86d2:	9300      	str	r3, [sp, #0]
   d86d4:	f241 0205 	movw	r2, #4101	; 0x1005
   d86d8:	446b      	add	r3, sp
   d86da:	f640 71ff 	movw	r1, #4095	; 0xfff
   d86de:	6800      	ldr	r0, [r0, #0]
   d86e0:	f7fc fdac 	bl	d523c <sock_setsockopt>
    if (ret < 0) {
   d86e4:	2800      	cmp	r0, #0
   d86e6:	db08      	blt.n	d86fa <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d86e8:	6960      	ldr	r0, [r4, #20]
   d86ea:	2300      	movs	r3, #0
   d86ec:	4632      	mov	r2, r6
   d86ee:	4629      	mov	r1, r5
   d86f0:	6800      	ldr	r0, [r0, #0]
   d86f2:	f7fc fdc3 	bl	d527c <sock_send>
    if (ret < 0) {
   d86f6:	2800      	cmp	r0, #0
   d86f8:	da04      	bge.n	d8704 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d86fa:	f7fc fed3 	bl	d54a4 <__errno>
   d86fe:	6803      	ldr	r3, [r0, #0]
   d8700:	6063      	str	r3, [r4, #4]
   d8702:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d8704:	b004      	add	sp, #16
   d8706:	bd70      	pop	{r4, r5, r6, pc}

000d8708 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d8708:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d870a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d870c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d870e:	689b      	ldr	r3, [r3, #8]
   d8710:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d8712:	68a3      	ldr	r3, [r4, #8]
   d8714:	3b01      	subs	r3, #1
   d8716:	60a3      	str	r3, [r4, #8]
   d8718:	b92b      	cbnz	r3, d8726 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d871a:	6823      	ldr	r3, [r4, #0]
   d871c:	4620      	mov	r0, r4
   d871e:	68db      	ldr	r3, [r3, #12]
        }
    }
   d8720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d8724:	4718      	bx	r3
   d8726:	bd10      	pop	{r4, pc}

000d8728 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d8728:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d872a:	4604      	mov	r4, r0
   d872c:	694d      	ldr	r5, [r1, #20]
   d872e:	4b05      	ldr	r3, [pc, #20]	; (d8744 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d8730:	f844 3b04 	str.w	r3, [r4], #4
   d8734:	358c      	adds	r5, #140	; 0x8c
   d8736:	4606      	mov	r6, r0
   d8738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d873a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d873c:	682b      	ldr	r3, [r5, #0]
   d873e:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8740:	4630      	mov	r0, r6
   d8742:	bd70      	pop	{r4, r5, r6, pc}
   d8744:	000d9fc8 	.word	0x000d9fc8

000d8748 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8748:	b510      	push	{r4, lr}
   d874a:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d874c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8750:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8754:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d8756:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8758:	d005      	beq.n	d8766 <_ZN9TCPClient4peekEv+0x1e>
   d875a:	6962      	ldr	r2, [r4, #20]
   d875c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d8760:	4413      	add	r3, r2
   d8762:	7918      	ldrb	r0, [r3, #4]
   d8764:	bd10      	pop	{r4, pc}
   d8766:	6803      	ldr	r3, [r0, #0]
   d8768:	691b      	ldr	r3, [r3, #16]
   d876a:	4798      	blx	r3
   d876c:	2800      	cmp	r0, #0
   d876e:	d1f4      	bne.n	d875a <_ZN9TCPClient4peekEv+0x12>
   d8770:	f04f 30ff 	mov.w	r0, #4294967295
}
   d8774:	bd10      	pop	{r4, pc}

000d8776 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8776:	b510      	push	{r4, lr}
   d8778:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d877a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d877e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8782:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d8784:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d8786:	d008      	beq.n	d879a <_ZN9TCPClient4readEv+0x24>
   d8788:	6962      	ldr	r2, [r4, #20]
   d878a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d878e:	1c59      	adds	r1, r3, #1
   d8790:	4413      	add	r3, r2
   d8792:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d8796:	7918      	ldrb	r0, [r3, #4]
   d8798:	bd10      	pop	{r4, pc}
   d879a:	6803      	ldr	r3, [r0, #0]
   d879c:	691b      	ldr	r3, [r3, #16]
   d879e:	4798      	blx	r3
   d87a0:	2800      	cmp	r0, #0
   d87a2:	d1f1      	bne.n	d8788 <_ZN9TCPClient4readEv+0x12>
   d87a4:	f04f 30ff 	mov.w	r0, #4294967295
}
   d87a8:	bd10      	pop	{r4, pc}

000d87aa <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d87aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d87ac:	6943      	ldr	r3, [r0, #20]
   d87ae:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d87b0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d87b4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d87b8:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d87ba:	4605      	mov	r5, r0
   d87bc:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d87be:	d106      	bne.n	d87ce <_ZN9TCPClient4readEPhj+0x24>
   d87c0:	6803      	ldr	r3, [r0, #0]
   d87c2:	691b      	ldr	r3, [r3, #16]
   d87c4:	4798      	blx	r3
   d87c6:	b910      	cbnz	r0, d87ce <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d87c8:	f04f 34ff 	mov.w	r4, #4294967295
   d87cc:	e014      	b.n	d87f8 <_ZN9TCPClient4readEPhj+0x4e>
   d87ce:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d87d0:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d87d4:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d87d8:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d87da:	42bc      	cmp	r4, r7
   d87dc:	bf28      	it	cs
   d87de:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d87e0:	4419      	add	r1, r3
   d87e2:	4622      	mov	r2, r4
   d87e4:	3104      	adds	r1, #4
   d87e6:	4630      	mov	r0, r6
   d87e8:	f000 fe01 	bl	d93ee <memcpy>
   d87ec:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d87ee:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d87f2:	4423      	add	r3, r4
   d87f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d87f8:	4620      	mov	r0, r4
   d87fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d87fc <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d87fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8800:	4698      	mov	r8, r3
    stop();
   d8802:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8804:	b093      	sub	sp, #76	; 0x4c
    stop();
   d8806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8808:	460d      	mov	r5, r1
   d880a:	4606      	mov	r6, r0
   d880c:	4617      	mov	r7, r2
    stop();
   d880e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d8810:	ab12      	add	r3, sp, #72	; 0x48
   d8812:	2400      	movs	r4, #0
   d8814:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8818:	4622      	mov	r2, r4
   d881a:	4621      	mov	r1, r4
   d881c:	4628      	mov	r0, r5
   d881e:	f7fc fbb3 	bl	d4f88 <netdb_getaddrinfo>
   d8822:	4681      	mov	r9, r0
   d8824:	2800      	cmp	r0, #0
   d8826:	d13d      	bne.n	d88a4 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d8828:	9b00      	ldr	r3, [sp, #0]
   d882a:	2b00      	cmp	r3, #0
   d882c:	d056      	beq.n	d88dc <_ZN9TCPClient7connectEPKctm+0xe0>
   d882e:	695b      	ldr	r3, [r3, #20]
   d8830:	2b00      	cmp	r3, #0
   d8832:	d053      	beq.n	d88dc <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   d8834:	a806      	add	r0, sp, #24
   d8836:	f7ff fcbd 	bl	d81b4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d883a:	9b00      	ldr	r3, [sp, #0]
   d883c:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d883e:	7863      	ldrb	r3, [r4, #1]
   d8840:	2b02      	cmp	r3, #2
   d8842:	d101      	bne.n	d8848 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d8844:	1d21      	adds	r1, r4, #4
   d8846:	e013      	b.n	d8870 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d8848:	2b0a      	cmp	r3, #10
   d884a:	d114      	bne.n	d8876 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d884c:	2211      	movs	r2, #17
   d884e:	4649      	mov	r1, r9
   d8850:	a801      	add	r0, sp, #4
   d8852:	f000 fdf2 	bl	d943a <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8856:	68a3      	ldr	r3, [r4, #8]
   d8858:	bb33      	cbnz	r3, d88a8 <_ZN9TCPClient7connectEPKctm+0xac>
   d885a:	68e3      	ldr	r3, [r4, #12]
   d885c:	bb23      	cbnz	r3, d88a8 <_ZN9TCPClient7connectEPKctm+0xac>
   d885e:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8862:	6925      	ldr	r5, [r4, #16]
   d8864:	f7fc fc92 	bl	d518c <inet_htonl>
   d8868:	4285      	cmp	r5, r0
   d886a:	d11d      	bne.n	d88a8 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d886c:	f104 0114 	add.w	r1, r4, #20
   d8870:	a806      	add	r0, sp, #24
   d8872:	f7ff fce2 	bl	d823a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d8876:	a806      	add	r0, sp, #24
   d8878:	f7ff fcbc 	bl	d81f4 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d887c:	2800      	cmp	r0, #0
   d887e:	d02d      	beq.n	d88dc <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   d8880:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8882:	ad07      	add	r5, sp, #28
   d8884:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d8888:	4b18      	ldr	r3, [pc, #96]	; (d88ec <_ZN9TCPClient7connectEPKctm+0xf0>)
   d888a:	930c      	str	r3, [sp, #48]	; 0x30
   d888c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d888e:	ac0d      	add	r4, sp, #52	; 0x34
   d8890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8892:	682b      	ldr	r3, [r5, #0]
   d8894:	7023      	strb	r3, [r4, #0]
   d8896:	463a      	mov	r2, r7
   d8898:	4643      	mov	r3, r8
   d889a:	a90c      	add	r1, sp, #48	; 0x30
   d889c:	4630      	mov	r0, r6
   d889e:	47c8      	blx	r9
   d88a0:	4681      	mov	r9, r0
   d88a2:	e01b      	b.n	d88dc <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d88a4:	46a1      	mov	r9, r4
   d88a6:	e019      	b.n	d88dc <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d88a8:	f104 0308 	add.w	r3, r4, #8
   d88ac:	ad01      	add	r5, sp, #4
   d88ae:	3418      	adds	r4, #24
   d88b0:	6818      	ldr	r0, [r3, #0]
   d88b2:	6859      	ldr	r1, [r3, #4]
   d88b4:	462a      	mov	r2, r5
   d88b6:	c203      	stmia	r2!, {r0, r1}
   d88b8:	3308      	adds	r3, #8
   d88ba:	42a3      	cmp	r3, r4
   d88bc:	4615      	mov	r5, r2
   d88be:	d1f7      	bne.n	d88b0 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   d88c0:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d88c2:	a901      	add	r1, sp, #4
   d88c4:	a80c      	add	r0, sp, #48	; 0x30
   d88c6:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d88c8:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d88cc:	f7ff fc80 	bl	d81d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d88d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d88d2:	ac07      	add	r4, sp, #28
   d88d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d88d6:	682b      	ldr	r3, [r5, #0]
   d88d8:	7023      	strb	r3, [r4, #0]
   d88da:	e7cc      	b.n	d8876 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d88dc:	9800      	ldr	r0, [sp, #0]
   d88de:	f7fc fb4b 	bl	d4f78 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   d88e2:	4648      	mov	r0, r9
   d88e4:	b013      	add	sp, #76	; 0x4c
   d88e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d88ea:	bf00      	nop
   d88ec:	000d9fc8 	.word	0x000d9fc8

000d88f0 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d88f0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d88f2:	2300      	movs	r3, #0
   d88f4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d88f8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d88fa:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d88fe:	4770      	bx	lr

000d8900 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8904:	461e      	mov	r6, r3
    stop();
   d8906:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d8908:	460c      	mov	r4, r1
   d890a:	b08a      	sub	sp, #40	; 0x28
    stop();
   d890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d890e:	4605      	mov	r5, r0
   d8910:	4617      	mov	r7, r2
    stop();
   d8912:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d8914:	7d23      	ldrb	r3, [r4, #20]
   d8916:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d891a:	2b04      	cmp	r3, #4
   d891c:	bf0c      	ite	eq
   d891e:	2002      	moveq	r0, #2
   d8920:	200a      	movne	r0, #10
   d8922:	2206      	movs	r2, #6
   d8924:	2101      	movs	r1, #1
   d8926:	f7fc fcb1 	bl	d528c <sock_socket>
   d892a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d892e:	696b      	ldr	r3, [r5, #20]
   d8930:	681b      	ldr	r3, [r3, #0]
   d8932:	2b00      	cmp	r3, #0
   d8934:	db18      	blt.n	d8968 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   d8936:	4628      	mov	r0, r5
   d8938:	f7ff ffda 	bl	d88f0 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d893c:	b1d6      	cbz	r6, d8974 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   d893e:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8940:	a903      	add	r1, sp, #12
   d8942:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d8944:	9303      	str	r3, [sp, #12]
   d8946:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d894a:	f7fc fb2d 	bl	d4fa8 <if_index_to_name>
   d894e:	b958      	cbnz	r0, d8968 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8950:	6968      	ldr	r0, [r5, #20]
   d8952:	2306      	movs	r3, #6
   d8954:	9300      	str	r3, [sp, #0]
   d8956:	f241 020b 	movw	r2, #4107	; 0x100b
   d895a:	ab03      	add	r3, sp, #12
   d895c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8960:	6800      	ldr	r0, [r0, #0]
   d8962:	f7fc fc6b 	bl	d523c <sock_setsockopt>
   d8966:	b128      	cbz	r0, d8974 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8968:	682b      	ldr	r3, [r5, #0]
   d896a:	4628      	mov	r0, r5
   d896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d896e:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d8970:	4798      	blx	r3
   d8972:	e03b      	b.n	d89ec <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d8974:	261c      	movs	r6, #28
   d8976:	4632      	mov	r2, r6
   d8978:	2100      	movs	r1, #0
   d897a:	a803      	add	r0, sp, #12
   d897c:	f000 fd5d 	bl	d943a <memset>
    if (ip.version() == 4) {
   d8980:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d8982:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d8986:	2b04      	cmp	r3, #4
   d8988:	d10c      	bne.n	d89a4 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d898a:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d898c:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d898e:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d8992:	f7fc fc03 	bl	d519c <inet_htons>
   d8996:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d899a:	6860      	ldr	r0, [r4, #4]
   d899c:	f7fc fbf6 	bl	d518c <inet_htonl>
   d89a0:	9004      	str	r0, [sp, #16]
   d89a2:	e013      	b.n	d89cc <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d89a4:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d89a6:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d89a8:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d89ac:	f7fc fbf6 	bl	d519c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d89b0:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d89b2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d89b6:	1d23      	adds	r3, r4, #4
   d89b8:	f104 0714 	add.w	r7, r4, #20
   d89bc:	6818      	ldr	r0, [r3, #0]
   d89be:	6859      	ldr	r1, [r3, #4]
   d89c0:	4632      	mov	r2, r6
   d89c2:	c203      	stmia	r2!, {r0, r1}
   d89c4:	3308      	adds	r3, #8
   d89c6:	42bb      	cmp	r3, r7
   d89c8:	4616      	mov	r6, r2
   d89ca:	d1f7      	bne.n	d89bc <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d89cc:	696b      	ldr	r3, [r5, #20]
   d89ce:	221c      	movs	r2, #28
   d89d0:	a903      	add	r1, sp, #12
   d89d2:	6818      	ldr	r0, [r3, #0]
   d89d4:	f7fc fc42 	bl	d525c <sock_connect>
   d89d8:	2800      	cmp	r0, #0
   d89da:	d1c5      	bne.n	d8968 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   d89dc:	3404      	adds	r4, #4
   d89de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d89e0:	696d      	ldr	r5, [r5, #20]
   d89e2:	358c      	adds	r5, #140	; 0x8c
   d89e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d89e6:	6823      	ldr	r3, [r4, #0]
   d89e8:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   d89ea:	2401      	movs	r4, #1
}
   d89ec:	4620      	mov	r0, r4
   d89ee:	b00a      	add	sp, #40	; 0x28
   d89f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d89f4 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d89f4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d89f6:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d89f8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d89fa:	6818      	ldr	r0, [r3, #0]
   d89fc:	2800      	cmp	r0, #0
   d89fe:	db01      	blt.n	d8a04 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8a00:	f7fc fc24 	bl	d524c <sock_close>
   d8a04:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d8a06:	f04f 32ff 	mov.w	r2, #4294967295
   d8a0a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d8a0c:	6960      	ldr	r0, [r4, #20]
   d8a0e:	2211      	movs	r2, #17
   d8a10:	2100      	movs	r1, #0
   d8a12:	308c      	adds	r0, #140	; 0x8c
   d8a14:	f000 fd11 	bl	d943a <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d8a18:	4620      	mov	r0, r4
}
   d8a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d8a1e:	f7ff bf67 	b.w	d88f0 <_ZN9TCPClient12flush_bufferEv>
	...

000d8a24 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8a24:	b530      	push	{r4, r5, lr}
   d8a26:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8a28:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d8a2c:	b08b      	sub	sp, #44	; 0x2c
   d8a2e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d8a30:	b11b      	cbz	r3, d8a3a <_ZN9TCPClient9availableEv+0x16>
   d8a32:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d8a36:	429a      	cmp	r2, r3
   d8a38:	d040      	beq.n	d8abc <_ZN9TCPClient9availableEv+0x98>
   d8a3a:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d8a3c:	6818      	ldr	r0, [r3, #0]
   d8a3e:	2800      	cmp	r0, #0
   d8a40:	db3f      	blt.n	d8ac2 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d8a42:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d8a46:	2d7f      	cmp	r5, #127	; 0x7f
   d8a48:	d83b      	bhi.n	d8ac2 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d8a4a:	1d19      	adds	r1, r3, #4
   d8a4c:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d8a50:	2308      	movs	r3, #8
   d8a52:	4429      	add	r1, r5
   d8a54:	f7fc fc0a 	bl	d526c <sock_recv>
            if (ret > 0) {
   d8a58:	2800      	cmp	r0, #0
   d8a5a:	dd0c      	ble.n	d8a76 <_ZN9TCPClient9availableEv+0x52>
   d8a5c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8a5e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8a62:	b90a      	cbnz	r2, d8a68 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d8a64:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8a68:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d8a6a:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8a6e:	4418      	add	r0, r3
   d8a70:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d8a74:	e025      	b.n	d8ac2 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d8a76:	f7fc fd15 	bl	d54a4 <__errno>
   d8a7a:	6803      	ldr	r3, [r0, #0]
   d8a7c:	2b0b      	cmp	r3, #11
   d8a7e:	d020      	beq.n	d8ac2 <_ZN9TCPClient9availableEv+0x9e>
   d8a80:	f7fc fd10 	bl	d54a4 <__errno>
   d8a84:	6803      	ldr	r3, [r0, #0]
   d8a86:	2b0b      	cmp	r3, #11
   d8a88:	d01b      	beq.n	d8ac2 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d8a8a:	2320      	movs	r3, #32
   d8a8c:	2500      	movs	r5, #0
   d8a8e:	9302      	str	r3, [sp, #8]
   d8a90:	9503      	str	r5, [sp, #12]
   d8a92:	f7fc fd07 	bl	d54a4 <__errno>
   d8a96:	6803      	ldr	r3, [r0, #0]
   d8a98:	9301      	str	r3, [sp, #4]
   d8a9a:	4b0e      	ldr	r3, [pc, #56]	; (d8ad4 <_ZN9TCPClient9availableEv+0xb0>)
   d8a9c:	9300      	str	r3, [sp, #0]
   d8a9e:	aa02      	add	r2, sp, #8
   d8aa0:	462b      	mov	r3, r5
   d8aa2:	490d      	ldr	r1, [pc, #52]	; (d8ad8 <_ZN9TCPClient9availableEv+0xb4>)
   d8aa4:	2032      	movs	r0, #50	; 0x32
   d8aa6:	f7fc fc49 	bl	d533c <log_message>
                    sock_close(d_->sock);
   d8aaa:	6963      	ldr	r3, [r4, #20]
   d8aac:	6818      	ldr	r0, [r3, #0]
   d8aae:	f7fc fbcd 	bl	d524c <sock_close>
   d8ab2:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d8ab4:	f04f 32ff 	mov.w	r2, #4294967295
   d8ab8:	601a      	str	r2, [r3, #0]
   d8aba:	e002      	b.n	d8ac2 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d8abc:	f7ff ff18 	bl	d88f0 <_ZN9TCPClient12flush_bufferEv>
   d8ac0:	e7bb      	b.n	d8a3a <_ZN9TCPClient9availableEv+0x16>
   d8ac2:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d8ac4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d8ac8:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d8acc:	1a18      	subs	r0, r3, r0
}
   d8ace:	b00b      	add	sp, #44	; 0x2c
   d8ad0:	bd30      	pop	{r4, r5, pc}
   d8ad2:	bf00      	nop
   d8ad4:	000da0d7 	.word	0x000da0d7
   d8ad8:	000da0d0 	.word	0x000da0d0

000d8adc <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8adc:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d8ade:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d8ae0:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d8ae2:	6001      	str	r1, [r0, #0]
   d8ae4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d8ae8:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d8aec:	3088      	adds	r0, #136	; 0x88
   d8aee:	f7ff fb61 	bl	d81b4 <_ZN9IPAddressC1Ev>
}
   d8af2:	4620      	mov	r0, r4
   d8af4:	bd10      	pop	{r4, pc}
	...

000d8af8 <_ZN9TCPClientC1Ei>:
   d8af8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8afc:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d8afe:	2300      	movs	r3, #0
   d8b00:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d8b02:	4a14      	ldr	r2, [pc, #80]	; (d8b54 <_ZN9TCPClientC1Ei+0x5c>)
   d8b04:	6043      	str	r3, [r0, #4]
   d8b06:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8b08:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8b0a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d8b0c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b0e:	20a0      	movs	r0, #160	; 0xa0
   d8b10:	460e      	mov	r6, r1
   d8b12:	f7fb fac0 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8b16:	4605      	mov	r5, r0
   d8b18:	b110      	cbz	r0, d8b20 <_ZN9TCPClientC1Ei+0x28>
   d8b1a:	4631      	mov	r1, r6
   d8b1c:	f7ff ffde 	bl	d8adc <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8b20:	2014      	movs	r0, #20
   d8b22:	f7fb fab8 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8b26:	4603      	mov	r3, r0
   d8b28:	b128      	cbz	r0, d8b36 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8b2a:	2201      	movs	r2, #1
   d8b2c:	6042      	str	r2, [r0, #4]
   d8b2e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8b30:	4a09      	ldr	r2, [pc, #36]	; (d8b58 <_ZN9TCPClientC1Ei+0x60>)
   d8b32:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8b34:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8b36:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8b38:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8b3a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d8b3c:	b128      	cbz	r0, d8b4a <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d8b3e:	6843      	ldr	r3, [r0, #4]
   d8b40:	3b01      	subs	r3, #1
   d8b42:	6043      	str	r3, [r0, #4]
   d8b44:	b90b      	cbnz	r3, d8b4a <_ZN9TCPClientC1Ei+0x52>
   d8b46:	f7ff fddf 	bl	d8708 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d8b4a:	4620      	mov	r0, r4
   d8b4c:	f7ff fed0 	bl	d88f0 <_ZN9TCPClient12flush_bufferEv>
}
   d8b50:	4620      	mov	r0, r4
   d8b52:	bd70      	pop	{r4, r5, r6, pc}
   d8b54:	000da08c 	.word	0x000da08c
   d8b58:	000da070 	.word	0x000da070

000d8b5c <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8b5c:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8b5e:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d8b62:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8b64:	f7ff ffc8 	bl	d8af8 <_ZN9TCPClientC1Ei>
}
   d8b68:	4620      	mov	r0, r4
   d8b6a:	bd10      	pop	{r4, pc}

000d8b6c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d8b6c:	b510      	push	{r4, lr}
   d8b6e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8b70:	6800      	ldr	r0, [r0, #0]
   d8b72:	2800      	cmp	r0, #0
   d8b74:	db01      	blt.n	d8b7a <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d8b76:	f7fc fb69 	bl	d524c <sock_close>
    }
}
   d8b7a:	4620      	mov	r0, r4
   d8b7c:	bd10      	pop	{r4, pc}

000d8b7e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8b7e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8b80:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d8b82:	4620      	mov	r0, r4
   d8b84:	f7ff fff2 	bl	d8b6c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d8b88:	b124      	cbz	r4, d8b94 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8b8a:	4620      	mov	r0, r4
   d8b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d8b90:	f7fb ba85 	b.w	d409e <_ZdlPv>
   d8b94:	bd10      	pop	{r4, pc}

000d8b96 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8b96:	2200      	movs	r2, #0
   d8b98:	4611      	mov	r1, r2
   d8b9a:	6840      	ldr	r0, [r0, #4]
   d8b9c:	f7fc bc22 	b.w	d53e4 <network_ready>

000d8ba0 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8ba0:	2200      	movs	r2, #0
   d8ba2:	4611      	mov	r1, r2
   d8ba4:	6840      	ldr	r0, [r0, #4]
   d8ba6:	f7fc bc3d 	b.w	d5424 <network_listening>

000d8baa <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8baa:	2200      	movs	r2, #0
   d8bac:	4611      	mov	r1, r2
   d8bae:	6840      	ldr	r0, [r0, #4]
   d8bb0:	f7fc bc48 	b.w	d5444 <network_get_listen_timeout>

000d8bb4 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8bb4:	2200      	movs	r2, #0
   d8bb6:	6840      	ldr	r0, [r0, #4]
   d8bb8:	f7fc bc3c 	b.w	d5434 <network_set_listen_timeout>

000d8bbc <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8bbc:	2200      	movs	r2, #0
   d8bbe:	f081 0101 	eor.w	r1, r1, #1
   d8bc2:	6840      	ldr	r0, [r0, #4]
   d8bc4:	f7fc bc26 	b.w	d5414 <network_listen>

000d8bc8 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8bc8:	2300      	movs	r3, #0
   d8bca:	461a      	mov	r2, r3
   d8bcc:	4619      	mov	r1, r3
   d8bce:	6840      	ldr	r0, [r0, #4]
   d8bd0:	f7fc bc18 	b.w	d5404 <network_off>

000d8bd4 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8bd4:	2300      	movs	r3, #0
   d8bd6:	461a      	mov	r2, r3
   d8bd8:	4619      	mov	r1, r3
   d8bda:	6840      	ldr	r0, [r0, #4]
   d8bdc:	f7fc bc0a 	b.w	d53f4 <network_on>

000d8be0 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8be0:	2200      	movs	r2, #0
   d8be2:	4611      	mov	r1, r2
   d8be4:	6840      	ldr	r0, [r0, #4]
   d8be6:	f7fc bbed 	b.w	d53c4 <network_connecting>

000d8bea <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8bea:	2200      	movs	r2, #0
   d8bec:	2102      	movs	r1, #2
   d8bee:	6840      	ldr	r0, [r0, #4]
   d8bf0:	f7fc bbf0 	b.w	d53d4 <network_disconnect>

000d8bf4 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8bf4:	2300      	movs	r3, #0
   d8bf6:	461a      	mov	r2, r3
   d8bf8:	6840      	ldr	r0, [r0, #4]
   d8bfa:	f7fc bbdb 	b.w	d53b4 <network_connect>
	...

000d8c00 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8c00:	4b02      	ldr	r3, [pc, #8]	; (d8c0c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8c02:	2204      	movs	r2, #4
   d8c04:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8c06:	4a02      	ldr	r2, [pc, #8]	; (d8c10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8c08:	601a      	str	r2, [r3, #0]
   d8c0a:	4770      	bx	lr
   d8c0c:	2003e738 	.word	0x2003e738
   d8c10:	000da0f0 	.word	0x000da0f0

000d8c14 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8c14:	2300      	movs	r3, #0
   d8c16:	461a      	mov	r2, r3
   d8c18:	6840      	ldr	r0, [r0, #4]
   d8c1a:	f7fc bbcb 	b.w	d53b4 <network_connect>

000d8c1e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8c1e:	2200      	movs	r2, #0
   d8c20:	2102      	movs	r1, #2
   d8c22:	6840      	ldr	r0, [r0, #4]
   d8c24:	f7fc bbd6 	b.w	d53d4 <network_disconnect>

000d8c28 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8c28:	2200      	movs	r2, #0
   d8c2a:	4611      	mov	r1, r2
   d8c2c:	6840      	ldr	r0, [r0, #4]
   d8c2e:	f7fc bbc9 	b.w	d53c4 <network_connecting>

000d8c32 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8c32:	2200      	movs	r2, #0
   d8c34:	4611      	mov	r1, r2
   d8c36:	6840      	ldr	r0, [r0, #4]
   d8c38:	f7fc bbd4 	b.w	d53e4 <network_ready>

000d8c3c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8c3c:	2300      	movs	r3, #0
   d8c3e:	461a      	mov	r2, r3
   d8c40:	4619      	mov	r1, r3
   d8c42:	6840      	ldr	r0, [r0, #4]
   d8c44:	f7fc bbd6 	b.w	d53f4 <network_on>

000d8c48 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8c48:	2300      	movs	r3, #0
   d8c4a:	461a      	mov	r2, r3
   d8c4c:	4619      	mov	r1, r3
   d8c4e:	6840      	ldr	r0, [r0, #4]
   d8c50:	f7fc bbd8 	b.w	d5404 <network_off>

000d8c54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8c54:	2200      	movs	r2, #0
   d8c56:	f081 0101 	eor.w	r1, r1, #1
   d8c5a:	6840      	ldr	r0, [r0, #4]
   d8c5c:	f7fc bbda 	b.w	d5414 <network_listen>

000d8c60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8c60:	2200      	movs	r2, #0
   d8c62:	6840      	ldr	r0, [r0, #4]
   d8c64:	f7fc bbe6 	b.w	d5434 <network_set_listen_timeout>

000d8c68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8c68:	2200      	movs	r2, #0
   d8c6a:	4611      	mov	r1, r2
   d8c6c:	6840      	ldr	r0, [r0, #4]
   d8c6e:	f7fc bbe9 	b.w	d5444 <network_get_listen_timeout>

000d8c72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8c72:	2200      	movs	r2, #0
   d8c74:	4611      	mov	r1, r2
   d8c76:	6840      	ldr	r0, [r0, #4]
   d8c78:	f7fc bbd4 	b.w	d5424 <network_listening>

000d8c7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8c80:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8c82:	b095      	sub	sp, #84	; 0x54
   d8c84:	4616      	mov	r6, r2
   d8c86:	460d      	mov	r5, r1
   d8c88:	4607      	mov	r7, r0
    IPAddress addr;
   d8c8a:	f7ff fa93 	bl	d81b4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8c8e:	4621      	mov	r1, r4
   d8c90:	2220      	movs	r2, #32
   d8c92:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8c94:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8c96:	f000 fbd0 	bl	d943a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8c9a:	2340      	movs	r3, #64	; 0x40
   d8c9c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8c9e:	4621      	mov	r1, r4
   d8ca0:	466b      	mov	r3, sp
   d8ca2:	aa0c      	add	r2, sp, #48	; 0x30
   d8ca4:	4630      	mov	r0, r6
   d8ca6:	f7fc f96f 	bl	d4f88 <netdb_getaddrinfo>
    if (!r) {
   d8caa:	4604      	mov	r4, r0
   d8cac:	2800      	cmp	r0, #0
   d8cae:	d144      	bne.n	d8d3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8cb0:	4602      	mov	r2, r0
   d8cb2:	2101      	movs	r1, #1
   d8cb4:	6868      	ldr	r0, [r5, #4]
   d8cb6:	f7fc fb95 	bl	d53e4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8cba:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8cbc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8cbe:	4622      	mov	r2, r4
   d8cc0:	6868      	ldr	r0, [r5, #4]
   d8cc2:	f7fc fb8f 	bl	d53e4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8cc6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8cc8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8cca:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8ccc:	2e00      	cmp	r6, #0
   d8cce:	d034      	beq.n	d8d3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8cd0:	2900      	cmp	r1, #0
   d8cd2:	d132      	bne.n	d8d3a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8cd4:	6873      	ldr	r3, [r6, #4]
   d8cd6:	2b02      	cmp	r3, #2
   d8cd8:	d002      	beq.n	d8ce0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8cda:	2b0a      	cmp	r3, #10
   d8cdc:	d009      	beq.n	d8cf2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8cde:	e02a      	b.n	d8d36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8ce0:	f1b8 0f00 	cmp.w	r8, #0
   d8ce4:	d027      	beq.n	d8d36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8ce6:	6971      	ldr	r1, [r6, #20]
   d8ce8:	4638      	mov	r0, r7
   d8cea:	3104      	adds	r1, #4
   d8cec:	f7ff faa5 	bl	d823a <_ZN9IPAddressaSEPKh>
   d8cf0:	e020      	b.n	d8d34 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8cf2:	f1b9 0f00 	cmp.w	r9, #0
   d8cf6:	d01e      	beq.n	d8d36 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8cf8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8cfa:	2211      	movs	r2, #17
   d8cfc:	a801      	add	r0, sp, #4
   d8cfe:	f000 fb9c 	bl	d943a <memset>
                    a.v = 6;
   d8d02:	2306      	movs	r3, #6
   d8d04:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8d08:	ad01      	add	r5, sp, #4
   d8d0a:	f104 0308 	add.w	r3, r4, #8
   d8d0e:	3418      	adds	r4, #24
   d8d10:	6818      	ldr	r0, [r3, #0]
   d8d12:	6859      	ldr	r1, [r3, #4]
   d8d14:	462a      	mov	r2, r5
   d8d16:	c203      	stmia	r2!, {r0, r1}
   d8d18:	3308      	adds	r3, #8
   d8d1a:	42a3      	cmp	r3, r4
   d8d1c:	4615      	mov	r5, r2
   d8d1e:	d1f7      	bne.n	d8d10 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8d20:	a901      	add	r1, sp, #4
   d8d22:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8d24:	ad07      	add	r5, sp, #28
   d8d26:	f7ff fa53 	bl	d81d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d2c:	1d3c      	adds	r4, r7, #4
   d8d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d30:	682b      	ldr	r3, [r5, #0]
   d8d32:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8d34:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d36:	69f6      	ldr	r6, [r6, #28]
   d8d38:	e7c8      	b.n	d8ccc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8d3a:	9800      	ldr	r0, [sp, #0]
   d8d3c:	f7fc f91c 	bl	d4f78 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8d40:	4638      	mov	r0, r7
   d8d42:	b015      	add	sp, #84	; 0x54
   d8d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8d48 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8d48:	4b02      	ldr	r3, [pc, #8]	; (d8d54 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8d4a:	4a03      	ldr	r2, [pc, #12]	; (d8d58 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8d4c:	601a      	str	r2, [r3, #0]
   d8d4e:	2200      	movs	r2, #0
   d8d50:	605a      	str	r2, [r3, #4]
   d8d52:	4770      	bx	lr
   d8d54:	2003e740 	.word	0x2003e740
   d8d58:	000da124 	.word	0x000da124

000d8d5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d8d5c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d8d60:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8d62:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d8d66:	2901      	cmp	r1, #1
   d8d68:	4610      	mov	r0, r2
   d8d6a:	d104      	bne.n	d8d76 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d8d6c:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d8d70:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d8d74:	e004      	b.n	d8d80 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d8d76:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8d78:	bf04      	itt	eq
   d8d7a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d8d7e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d8d80:	3b01      	subs	r3, #1
   d8d82:	f102 0210 	add.w	r2, r2, #16
   d8d86:	d1ec      	bne.n	d8d62 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d8d88:	4770      	bx	lr

000d8d8a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8d8a:	b40e      	push	{r1, r2, r3}
   d8d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8d90:	b087      	sub	sp, #28
   d8d92:	af00      	add	r7, sp, #0
   d8d94:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d8d98:	4605      	mov	r5, r0
   d8d9a:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d8d9e:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8da0:	4623      	mov	r3, r4
   d8da2:	4632      	mov	r2, r6
   d8da4:	2110      	movs	r1, #16
   d8da6:	f107 0008 	add.w	r0, r7, #8
   d8daa:	f7fc fb73 	bl	d5494 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8dae:	280f      	cmp	r0, #15
   d8db0:	d916      	bls.n	d8de0 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d8db2:	f100 0308 	add.w	r3, r0, #8
   d8db6:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d8dba:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d8dbc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8dc0:	4632      	mov	r2, r6
   d8dc2:	1c41      	adds	r1, r0, #1
   d8dc4:	4623      	mov	r3, r4
   d8dc6:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d8dc8:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8dca:	f7fc fb63 	bl	d5494 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d8dce:	1e02      	subs	r2, r0, #0
   d8dd0:	dd04      	ble.n	d8ddc <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d8dd2:	682b      	ldr	r3, [r5, #0]
   d8dd4:	4669      	mov	r1, sp
   d8dd6:	689b      	ldr	r3, [r3, #8]
   d8dd8:	4628      	mov	r0, r5
   d8dda:	4798      	blx	r3
   d8ddc:	46c5      	mov	sp, r8
   d8dde:	e007      	b.n	d8df0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d8de0:	b130      	cbz	r0, d8df0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d8de2:	682b      	ldr	r3, [r5, #0]
   d8de4:	4602      	mov	r2, r0
   d8de6:	689b      	ldr	r3, [r3, #8]
   d8de8:	f107 0108 	add.w	r1, r7, #8
   d8dec:	4628      	mov	r0, r5
   d8dee:	4798      	blx	r3
    }
}
   d8df0:	371c      	adds	r7, #28
   d8df2:	46bd      	mov	sp, r7
   d8df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8df8:	b003      	add	sp, #12
   d8dfa:	4770      	bx	lr

000d8dfc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8dfc:	b513      	push	{r0, r1, r4, lr}
   d8dfe:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d8e00:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8e02:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d8e06:	6894      	ldr	r4, [r2, #8]
   d8e08:	4619      	mov	r1, r3
   d8e0a:	2201      	movs	r2, #1
   d8e0c:	47a0      	blx	r4
}
   d8e0e:	b002      	add	sp, #8
   d8e10:	bd10      	pop	{r4, pc}

000d8e12 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d8e12:	6883      	ldr	r3, [r0, #8]
   d8e14:	b1fb      	cbz	r3, d8e56 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d8e16:	781a      	ldrb	r2, [r3, #0]
   d8e18:	2a03      	cmp	r2, #3
   d8e1a:	d81a      	bhi.n	d8e52 <_ZNK5spark9JSONValue4typeEv+0x40>
   d8e1c:	e8df f002 	tbb	[pc, r2]
   d8e20:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d8e24:	2005      	movs	r0, #5
   d8e26:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d8e28:	6802      	ldr	r2, [r0, #0]
   d8e2a:	685b      	ldr	r3, [r3, #4]
   d8e2c:	6852      	ldr	r2, [r2, #4]
   d8e2e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8e30:	282d      	cmp	r0, #45	; 0x2d
   d8e32:	d014      	beq.n	d8e5e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8e34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8e38:	2b09      	cmp	r3, #9
   d8e3a:	d910      	bls.n	d8e5e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8e3c:	2874      	cmp	r0, #116	; 0x74
   d8e3e:	d010      	beq.n	d8e62 <_ZNK5spark9JSONValue4typeEv+0x50>
   d8e40:	2866      	cmp	r0, #102	; 0x66
   d8e42:	d00e      	beq.n	d8e62 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8e44:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8e48:	4258      	negs	r0, r3
   d8e4a:	4158      	adcs	r0, r3
   d8e4c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d8e4e:	2006      	movs	r0, #6
   d8e50:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8e52:	2000      	movs	r0, #0
   d8e54:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8e56:	4618      	mov	r0, r3
   d8e58:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d8e5a:	2004      	movs	r0, #4
   d8e5c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d8e5e:	2003      	movs	r0, #3
   d8e60:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d8e62:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d8e64:	4770      	bx	lr

000d8e66 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d8e66:	b510      	push	{r4, lr}
   d8e68:	4604      	mov	r4, r0
    switch (type()) {
   d8e6a:	f7ff ffd2 	bl	d8e12 <_ZNK5spark9JSONValue4typeEv>
   d8e6e:	2802      	cmp	r0, #2
   d8e70:	d00d      	beq.n	d8e8e <_ZNK5spark9JSONValue5toIntEv+0x28>
   d8e72:	d316      	bcc.n	d8ea2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d8e74:	2804      	cmp	r0, #4
   d8e76:	d814      	bhi.n	d8ea2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d8e78:	6822      	ldr	r2, [r4, #0]
   d8e7a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d8e7c:	6850      	ldr	r0, [r2, #4]
   d8e7e:	685b      	ldr	r3, [r3, #4]
   d8e80:	220a      	movs	r2, #10
   d8e82:	2100      	movs	r1, #0
   d8e84:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d8e86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d8e8a:	f000 bbf3 	b.w	d9674 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d8e8e:	6822      	ldr	r2, [r4, #0]
   d8e90:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8e92:	6852      	ldr	r2, [r2, #4]
   d8e94:	685b      	ldr	r3, [r3, #4]
   d8e96:	5cd0      	ldrb	r0, [r2, r3]
   d8e98:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d8e9c:	4258      	negs	r0, r3
   d8e9e:	4158      	adcs	r0, r3
   d8ea0:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d8ea2:	2000      	movs	r0, #0
    }
}
   d8ea4:	bd10      	pop	{r4, pc}

000d8ea6 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8ea6:	b510      	push	{r4, lr}
    if (!n_) {
   d8ea8:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8eaa:	4604      	mov	r4, r0
    if (!n_) {
   d8eac:	b15b      	cbz	r3, d8ec6 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d8eae:	6880      	ldr	r0, [r0, #8]
   d8eb0:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d8eb2:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d8eb4:	3010      	adds	r0, #16
   d8eb6:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8eb8:	6120      	str	r0, [r4, #16]
    --n_;
   d8eba:	6163      	str	r3, [r4, #20]
    if (n_) {
   d8ebc:	b12b      	cbz	r3, d8eca <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d8ebe:	f7ff ff4d 	bl	d8d5c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8ec2:	60a0      	str	r0, [r4, #8]
   d8ec4:	e001      	b.n	d8eca <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d8ec6:	4618      	mov	r0, r3
   d8ec8:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d8eca:	2001      	movs	r0, #1
}
   d8ecc:	bd10      	pop	{r4, pc}

000d8ece <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d8ece:	b510      	push	{r4, lr}
    write('}');
   d8ed0:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d8ed2:	4604      	mov	r4, r0
    write('}');
   d8ed4:	f7ff ff92 	bl	d8dfc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8ed8:	2301      	movs	r3, #1
   d8eda:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8edc:	4620      	mov	r0, r4
   d8ede:	bd10      	pop	{r4, pc}

000d8ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d8ee0:	b508      	push	{r3, lr}
    switch (state_) {
   d8ee2:	7903      	ldrb	r3, [r0, #4]
   d8ee4:	2b01      	cmp	r3, #1
   d8ee6:	d002      	beq.n	d8eee <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d8ee8:	2b02      	cmp	r3, #2
   d8eea:	d002      	beq.n	d8ef2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d8eec:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d8eee:	212c      	movs	r1, #44	; 0x2c
   d8ef0:	e000      	b.n	d8ef4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d8ef2:	213a      	movs	r1, #58	; 0x3a
   d8ef4:	f7ff ff82 	bl	d8dfc <_ZN5spark10JSONWriter5writeEc>
   d8ef8:	bd08      	pop	{r3, pc}

000d8efa <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d8efa:	b510      	push	{r4, lr}
   d8efc:	4604      	mov	r4, r0
    writeSeparator();
   d8efe:	f7ff ffef 	bl	d8ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8f02:	4620      	mov	r0, r4
   d8f04:	217b      	movs	r1, #123	; 0x7b
   d8f06:	f7ff ff79 	bl	d8dfc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d8f0a:	2300      	movs	r3, #0
   d8f0c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8f0e:	4620      	mov	r0, r4
   d8f10:	bd10      	pop	{r4, pc}
	...

000d8f14 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8f14:	b538      	push	{r3, r4, r5, lr}
   d8f16:	4604      	mov	r4, r0
   d8f18:	460d      	mov	r5, r1
    writeSeparator();
   d8f1a:	f7ff ffe1 	bl	d8ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8f1e:	6823      	ldr	r3, [r4, #0]
   d8f20:	4904      	ldr	r1, [pc, #16]	; (d8f34 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8f22:	68db      	ldr	r3, [r3, #12]
   d8f24:	4620      	mov	r0, r4
   d8f26:	462a      	mov	r2, r5
   d8f28:	4798      	blx	r3
    state_ = NEXT;
   d8f2a:	2301      	movs	r3, #1
   d8f2c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8f2e:	4620      	mov	r0, r4
   d8f30:	bd38      	pop	{r3, r4, r5, pc}
   d8f32:	bf00      	nop
   d8f34:	000da0e4 	.word	0x000da0e4

000d8f38 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8f38:	b538      	push	{r3, r4, r5, lr}
   d8f3a:	4604      	mov	r4, r0
   d8f3c:	460d      	mov	r5, r1
    writeSeparator();
   d8f3e:	f7ff ffcf 	bl	d8ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8f42:	6823      	ldr	r3, [r4, #0]
   d8f44:	4904      	ldr	r1, [pc, #16]	; (d8f58 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8f46:	68db      	ldr	r3, [r3, #12]
   d8f48:	4620      	mov	r0, r4
   d8f4a:	462a      	mov	r2, r5
   d8f4c:	4798      	blx	r3
    state_ = NEXT;
   d8f4e:	2301      	movs	r3, #1
   d8f50:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8f52:	4620      	mov	r0, r4
   d8f54:	bd38      	pop	{r3, r4, r5, pc}
   d8f56:	bf00      	nop
   d8f58:	000d97e9 	.word	0x000d97e9

000d8f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8f5e:	460d      	mov	r5, r1
   d8f60:	4617      	mov	r7, r2
    write('"');
   d8f62:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8f64:	4604      	mov	r4, r0
   d8f66:	442f      	add	r7, r5
    write('"');
   d8f68:	f7ff ff48 	bl	d8dfc <_ZN5spark10JSONWriter5writeEc>
   d8f6c:	462a      	mov	r2, r5
    const char* const end = str + size;
   d8f6e:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d8f70:	42ba      	cmp	r2, r7
   d8f72:	d038      	beq.n	d8fe6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d8f74:	4616      	mov	r6, r2
   d8f76:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8f7a:	2d22      	cmp	r5, #34	; 0x22
   d8f7c:	d003      	beq.n	d8f86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8f7e:	2d5c      	cmp	r5, #92	; 0x5c
   d8f80:	d001      	beq.n	d8f86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8f82:	2d1f      	cmp	r5, #31
   d8f84:	d82d      	bhi.n	d8fe2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d8f86:	6823      	ldr	r3, [r4, #0]
   d8f88:	1a52      	subs	r2, r2, r1
   d8f8a:	689b      	ldr	r3, [r3, #8]
   d8f8c:	4620      	mov	r0, r4
   d8f8e:	4798      	blx	r3
            write('\\');
   d8f90:	215c      	movs	r1, #92	; 0x5c
   d8f92:	4620      	mov	r0, r4
   d8f94:	f7ff ff32 	bl	d8dfc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8f98:	2d0c      	cmp	r5, #12
   d8f9a:	d019      	beq.n	d8fd0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d8f9c:	d807      	bhi.n	d8fae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d8f9e:	2d09      	cmp	r5, #9
   d8fa0:	d00f      	beq.n	d8fc2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d8fa2:	2d0a      	cmp	r5, #10
   d8fa4:	d012      	beq.n	d8fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d8fa6:	2d08      	cmp	r5, #8
   d8fa8:	d114      	bne.n	d8fd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d8faa:	2162      	movs	r1, #98	; 0x62
   d8fac:	e00a      	b.n	d8fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d8fae:	2d22      	cmp	r5, #34	; 0x22
   d8fb0:	d005      	beq.n	d8fbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8fb2:	2d5c      	cmp	r5, #92	; 0x5c
   d8fb4:	d003      	beq.n	d8fbe <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8fb6:	2d0d      	cmp	r5, #13
   d8fb8:	d10c      	bne.n	d8fd4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d8fba:	2172      	movs	r1, #114	; 0x72
   d8fbc:	e002      	b.n	d8fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d8fbe:	4629      	mov	r1, r5
   d8fc0:	e000      	b.n	d8fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d8fc2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d8fc4:	4620      	mov	r0, r4
   d8fc6:	f7ff ff19 	bl	d8dfc <_ZN5spark10JSONWriter5writeEc>
                break;
   d8fca:	e009      	b.n	d8fe0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d8fcc:	216e      	movs	r1, #110	; 0x6e
   d8fce:	e7f9      	b.n	d8fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d8fd0:	2166      	movs	r1, #102	; 0x66
   d8fd2:	e7f7      	b.n	d8fc4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d8fd4:	6823      	ldr	r3, [r4, #0]
   d8fd6:	490a      	ldr	r1, [pc, #40]	; (d9000 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d8fd8:	68db      	ldr	r3, [r3, #12]
   d8fda:	462a      	mov	r2, r5
   d8fdc:	4620      	mov	r0, r4
   d8fde:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d8fe0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d8fe2:	4632      	mov	r2, r6
   d8fe4:	e7c4      	b.n	d8f70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d8fe6:	4291      	cmp	r1, r2
   d8fe8:	d004      	beq.n	d8ff4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d8fea:	6823      	ldr	r3, [r4, #0]
   d8fec:	1a52      	subs	r2, r2, r1
   d8fee:	689d      	ldr	r5, [r3, #8]
   d8ff0:	4620      	mov	r0, r4
   d8ff2:	47a8      	blx	r5
    }
    write('"');
   d8ff4:	2122      	movs	r1, #34	; 0x22
   d8ff6:	4620      	mov	r0, r4
   d8ff8:	f7ff ff00 	bl	d8dfc <_ZN5spark10JSONWriter5writeEc>
   d8ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8ffe:	bf00      	nop
   d9000:	000da16d 	.word	0x000da16d

000d9004 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9004:	b570      	push	{r4, r5, r6, lr}
   d9006:	4604      	mov	r4, r0
   d9008:	460d      	mov	r5, r1
   d900a:	4616      	mov	r6, r2
    writeSeparator();
   d900c:	f7ff ff68 	bl	d8ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d9010:	4620      	mov	r0, r4
   d9012:	4632      	mov	r2, r6
   d9014:	4629      	mov	r1, r5
   d9016:	f7ff ffa1 	bl	d8f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d901a:	2302      	movs	r3, #2
   d901c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d901e:	4620      	mov	r0, r4
   d9020:	bd70      	pop	{r4, r5, r6, pc}

000d9022 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d9022:	b570      	push	{r4, r5, r6, lr}
   d9024:	4604      	mov	r4, r0
   d9026:	460d      	mov	r5, r1
   d9028:	4616      	mov	r6, r2
    writeSeparator();
   d902a:	f7ff ff59 	bl	d8ee0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d902e:	4620      	mov	r0, r4
   d9030:	4632      	mov	r2, r6
   d9032:	4629      	mov	r1, r5
   d9034:	f7ff ff92 	bl	d8f5c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9038:	2301      	movs	r3, #1
   d903a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d903c:	4620      	mov	r0, r4
   d903e:	bd70      	pop	{r4, r5, r6, pc}

000d9040 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9040:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d9042:	2300      	movs	r3, #0
   d9044:	4604      	mov	r4, r0
   d9046:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9048:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d904a:	4810      	ldr	r0, [pc, #64]	; (d908c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d904c:	60a0      	str	r0, [r4, #8]
   d904e:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d9050:	b1d1      	cbz	r1, d9088 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d9052:	780b      	ldrb	r3, [r1, #0]
   d9054:	2b03      	cmp	r3, #3
   d9056:	d006      	beq.n	d9066 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d9058:	b9b3      	cbnz	r3, d9088 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d905a:	6813      	ldr	r3, [r2, #0]
   d905c:	6858      	ldr	r0, [r3, #4]
   d905e:	684b      	ldr	r3, [r1, #4]
   d9060:	5cc3      	ldrb	r3, [r0, r3]
   d9062:	2b6e      	cmp	r3, #110	; 0x6e
   d9064:	d008      	beq.n	d9078 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d9066:	6813      	ldr	r3, [r2, #0]
   d9068:	6858      	ldr	r0, [r3, #4]
   d906a:	684b      	ldr	r3, [r1, #4]
   d906c:	4403      	add	r3, r0
   d906e:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d9070:	688b      	ldr	r3, [r1, #8]
   d9072:	6849      	ldr	r1, [r1, #4]
   d9074:	1a5b      	subs	r3, r3, r1
   d9076:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d9078:	4611      	mov	r1, r2
   d907a:	4620      	mov	r0, r4
   d907c:	f851 3b04 	ldr.w	r3, [r1], #4
   d9080:	f840 3b04 	str.w	r3, [r0], #4
   d9084:	f7fd f9ce 	bl	d6424 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d9088:	4620      	mov	r0, r4
   d908a:	bd10      	pop	{r4, pc}
   d908c:	000d9f14 	.word	0x000d9f14

000d9090 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d9090:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9092:	b510      	push	{r4, lr}
   d9094:	4604      	mov	r4, r0
   d9096:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d9098:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d909a:	6083      	str	r3, [r0, #8]
   d909c:	60c3      	str	r3, [r0, #12]
   d909e:	6103      	str	r3, [r0, #16]
   d90a0:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d90a2:	b171      	cbz	r1, d90c2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d90a4:	780b      	ldrb	r3, [r1, #0]
   d90a6:	2b01      	cmp	r3, #1
   d90a8:	d10b      	bne.n	d90c2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d90aa:	f101 0310 	add.w	r3, r1, #16
   d90ae:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d90b0:	68cb      	ldr	r3, [r1, #12]
   d90b2:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d90b4:	4611      	mov	r1, r2
   d90b6:	f851 3b04 	ldr.w	r3, [r1], #4
   d90ba:	f840 3b04 	str.w	r3, [r0], #4
   d90be:	f7fd f9b1 	bl	d6424 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d90c2:	4620      	mov	r0, r4
   d90c4:	bd10      	pop	{r4, pc}

000d90c6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d90c6:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d90c8:	b510      	push	{r4, lr}
   d90ca:	4604      	mov	r4, r0
   d90cc:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d90ce:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d90d0:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d90d2:	b131      	cbz	r1, d90e2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d90d4:	4611      	mov	r1, r2
   d90d6:	f851 3b04 	ldr.w	r3, [r1], #4
   d90da:	f840 3b04 	str.w	r3, [r0], #4
   d90de:	f7fd f9a1 	bl	d6424 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d90e2:	4620      	mov	r0, r4
   d90e4:	bd10      	pop	{r4, pc}

000d90e6 <__aeabi_atexit>:
   d90e6:	460b      	mov	r3, r1
   d90e8:	4601      	mov	r1, r0
   d90ea:	4618      	mov	r0, r3
   d90ec:	f000 b962 	b.w	d93b4 <__cxa_atexit>

000d90f0 <_ZSt15get_new_handlerv>:
   d90f0:	4b02      	ldr	r3, [pc, #8]	; (d90fc <_ZSt15get_new_handlerv+0xc>)
   d90f2:	6818      	ldr	r0, [r3, #0]
   d90f4:	f3bf 8f5f 	dmb	sy
   d90f8:	4770      	bx	lr
   d90fa:	bf00      	nop
   d90fc:	2003e74c 	.word	0x2003e74c

000d9100 <_ZdlPvj>:
   d9100:	f7fa bfcd 	b.w	d409e <_ZdlPv>

000d9104 <_ZnwjRKSt9nothrow_t>:
   d9104:	b510      	push	{r4, lr}
   d9106:	2800      	cmp	r0, #0
   d9108:	bf14      	ite	ne
   d910a:	4604      	movne	r4, r0
   d910c:	2401      	moveq	r4, #1
   d910e:	4620      	mov	r0, r4
   d9110:	f7fc f9a8 	bl	d5464 <malloc>
   d9114:	b920      	cbnz	r0, d9120 <_ZnwjRKSt9nothrow_t+0x1c>
   d9116:	f7ff ffeb 	bl	d90f0 <_ZSt15get_new_handlerv>
   d911a:	b108      	cbz	r0, d9120 <_ZnwjRKSt9nothrow_t+0x1c>
   d911c:	4780      	blx	r0
   d911e:	e7f6      	b.n	d910e <_ZnwjRKSt9nothrow_t+0xa>
   d9120:	bd10      	pop	{r4, pc}
	...

000d9124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9124:	4b18      	ldr	r3, [pc, #96]	; (d9188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9126:	681a      	ldr	r2, [r3, #0]
   d9128:	07d1      	lsls	r1, r2, #31
   d912a:	bf5c      	itt	pl
   d912c:	2201      	movpl	r2, #1
   d912e:	601a      	strpl	r2, [r3, #0]
   d9130:	4b16      	ldr	r3, [pc, #88]	; (d918c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d9132:	681a      	ldr	r2, [r3, #0]
   d9134:	07d2      	lsls	r2, r2, #31
   d9136:	bf5c      	itt	pl
   d9138:	2201      	movpl	r2, #1
   d913a:	601a      	strpl	r2, [r3, #0]
   d913c:	4b14      	ldr	r3, [pc, #80]	; (d9190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d913e:	681a      	ldr	r2, [r3, #0]
   d9140:	07d0      	lsls	r0, r2, #31
   d9142:	bf5c      	itt	pl
   d9144:	2201      	movpl	r2, #1
   d9146:	601a      	strpl	r2, [r3, #0]
   d9148:	4b12      	ldr	r3, [pc, #72]	; (d9194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d914a:	681a      	ldr	r2, [r3, #0]
   d914c:	07d1      	lsls	r1, r2, #31
   d914e:	bf5c      	itt	pl
   d9150:	2201      	movpl	r2, #1
   d9152:	601a      	strpl	r2, [r3, #0]
   d9154:	4b10      	ldr	r3, [pc, #64]	; (d9198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9156:	681a      	ldr	r2, [r3, #0]
   d9158:	07d2      	lsls	r2, r2, #31
   d915a:	bf5c      	itt	pl
   d915c:	2201      	movpl	r2, #1
   d915e:	601a      	strpl	r2, [r3, #0]
   d9160:	4b0e      	ldr	r3, [pc, #56]	; (d919c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9162:	681a      	ldr	r2, [r3, #0]
   d9164:	07d0      	lsls	r0, r2, #31
   d9166:	bf5c      	itt	pl
   d9168:	2201      	movpl	r2, #1
   d916a:	601a      	strpl	r2, [r3, #0]
   d916c:	4b0c      	ldr	r3, [pc, #48]	; (d91a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d916e:	681a      	ldr	r2, [r3, #0]
   d9170:	07d1      	lsls	r1, r2, #31
   d9172:	bf5c      	itt	pl
   d9174:	2201      	movpl	r2, #1
   d9176:	601a      	strpl	r2, [r3, #0]
   d9178:	4b0a      	ldr	r3, [pc, #40]	; (d91a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d917a:	681a      	ldr	r2, [r3, #0]
   d917c:	07d2      	lsls	r2, r2, #31
   d917e:	bf5c      	itt	pl
   d9180:	2201      	movpl	r2, #1
   d9182:	601a      	strpl	r2, [r3, #0]
   d9184:	4770      	bx	lr
   d9186:	bf00      	nop
   d9188:	2003e76c 	.word	0x2003e76c
   d918c:	2003e768 	.word	0x2003e768
   d9190:	2003e764 	.word	0x2003e764
   d9194:	2003e760 	.word	0x2003e760
   d9198:	2003e75c 	.word	0x2003e75c
   d919c:	2003e758 	.word	0x2003e758
   d91a0:	2003e754 	.word	0x2003e754
   d91a4:	2003e750 	.word	0x2003e750

000d91a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d91a8:	4b24      	ldr	r3, [pc, #144]	; (d923c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d91aa:	681a      	ldr	r2, [r3, #0]
   d91ac:	07d0      	lsls	r0, r2, #31
   d91ae:	bf5c      	itt	pl
   d91b0:	2201      	movpl	r2, #1
   d91b2:	601a      	strpl	r2, [r3, #0]
   d91b4:	4b22      	ldr	r3, [pc, #136]	; (d9240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d91b6:	681a      	ldr	r2, [r3, #0]
   d91b8:	07d1      	lsls	r1, r2, #31
   d91ba:	bf5c      	itt	pl
   d91bc:	2201      	movpl	r2, #1
   d91be:	601a      	strpl	r2, [r3, #0]
   d91c0:	4b20      	ldr	r3, [pc, #128]	; (d9244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d91c2:	681a      	ldr	r2, [r3, #0]
   d91c4:	07d2      	lsls	r2, r2, #31
   d91c6:	bf5c      	itt	pl
   d91c8:	2201      	movpl	r2, #1
   d91ca:	601a      	strpl	r2, [r3, #0]
   d91cc:	4b1e      	ldr	r3, [pc, #120]	; (d9248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d91ce:	681a      	ldr	r2, [r3, #0]
   d91d0:	07d0      	lsls	r0, r2, #31
   d91d2:	bf5c      	itt	pl
   d91d4:	2201      	movpl	r2, #1
   d91d6:	601a      	strpl	r2, [r3, #0]
   d91d8:	4b1c      	ldr	r3, [pc, #112]	; (d924c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d91da:	681a      	ldr	r2, [r3, #0]
   d91dc:	07d1      	lsls	r1, r2, #31
   d91de:	bf5c      	itt	pl
   d91e0:	2201      	movpl	r2, #1
   d91e2:	601a      	strpl	r2, [r3, #0]
   d91e4:	4b1a      	ldr	r3, [pc, #104]	; (d9250 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d91e6:	681a      	ldr	r2, [r3, #0]
   d91e8:	07d2      	lsls	r2, r2, #31
   d91ea:	bf5c      	itt	pl
   d91ec:	2201      	movpl	r2, #1
   d91ee:	601a      	strpl	r2, [r3, #0]
   d91f0:	4b18      	ldr	r3, [pc, #96]	; (d9254 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d91f2:	681a      	ldr	r2, [r3, #0]
   d91f4:	07d0      	lsls	r0, r2, #31
   d91f6:	bf5c      	itt	pl
   d91f8:	2201      	movpl	r2, #1
   d91fa:	601a      	strpl	r2, [r3, #0]
   d91fc:	4b16      	ldr	r3, [pc, #88]	; (d9258 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d91fe:	681a      	ldr	r2, [r3, #0]
   d9200:	07d1      	lsls	r1, r2, #31
   d9202:	bf5c      	itt	pl
   d9204:	2201      	movpl	r2, #1
   d9206:	601a      	strpl	r2, [r3, #0]
   d9208:	4b14      	ldr	r3, [pc, #80]	; (d925c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d920a:	681a      	ldr	r2, [r3, #0]
   d920c:	07d2      	lsls	r2, r2, #31
   d920e:	bf5c      	itt	pl
   d9210:	2201      	movpl	r2, #1
   d9212:	601a      	strpl	r2, [r3, #0]
   d9214:	4b12      	ldr	r3, [pc, #72]	; (d9260 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d9216:	681a      	ldr	r2, [r3, #0]
   d9218:	07d0      	lsls	r0, r2, #31
   d921a:	bf5c      	itt	pl
   d921c:	2201      	movpl	r2, #1
   d921e:	601a      	strpl	r2, [r3, #0]
   d9220:	4b10      	ldr	r3, [pc, #64]	; (d9264 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d9222:	681a      	ldr	r2, [r3, #0]
   d9224:	07d1      	lsls	r1, r2, #31
   d9226:	bf5c      	itt	pl
   d9228:	2201      	movpl	r2, #1
   d922a:	601a      	strpl	r2, [r3, #0]
   d922c:	4b0e      	ldr	r3, [pc, #56]	; (d9268 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d922e:	681a      	ldr	r2, [r3, #0]
   d9230:	07d2      	lsls	r2, r2, #31
   d9232:	bf5c      	itt	pl
   d9234:	2201      	movpl	r2, #1
   d9236:	601a      	strpl	r2, [r3, #0]
   d9238:	4770      	bx	lr
   d923a:	bf00      	nop
   d923c:	2003e79c 	.word	0x2003e79c
   d9240:	2003e798 	.word	0x2003e798
   d9244:	2003e794 	.word	0x2003e794
   d9248:	2003e790 	.word	0x2003e790
   d924c:	2003e78c 	.word	0x2003e78c
   d9250:	2003e788 	.word	0x2003e788
   d9254:	2003e784 	.word	0x2003e784
   d9258:	2003e780 	.word	0x2003e780
   d925c:	2003e77c 	.word	0x2003e77c
   d9260:	2003e778 	.word	0x2003e778
   d9264:	2003e774 	.word	0x2003e774
   d9268:	2003e770 	.word	0x2003e770

000d926c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d926c:	4b24      	ldr	r3, [pc, #144]	; (d9300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d926e:	681a      	ldr	r2, [r3, #0]
   d9270:	07d0      	lsls	r0, r2, #31
   d9272:	bf5c      	itt	pl
   d9274:	2201      	movpl	r2, #1
   d9276:	601a      	strpl	r2, [r3, #0]
   d9278:	4b22      	ldr	r3, [pc, #136]	; (d9304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d927a:	681a      	ldr	r2, [r3, #0]
   d927c:	07d1      	lsls	r1, r2, #31
   d927e:	bf5c      	itt	pl
   d9280:	2201      	movpl	r2, #1
   d9282:	601a      	strpl	r2, [r3, #0]
   d9284:	4b20      	ldr	r3, [pc, #128]	; (d9308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d9286:	681a      	ldr	r2, [r3, #0]
   d9288:	07d2      	lsls	r2, r2, #31
   d928a:	bf5c      	itt	pl
   d928c:	2201      	movpl	r2, #1
   d928e:	601a      	strpl	r2, [r3, #0]
   d9290:	4b1e      	ldr	r3, [pc, #120]	; (d930c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9292:	681a      	ldr	r2, [r3, #0]
   d9294:	07d0      	lsls	r0, r2, #31
   d9296:	bf5c      	itt	pl
   d9298:	2201      	movpl	r2, #1
   d929a:	601a      	strpl	r2, [r3, #0]
   d929c:	4b1c      	ldr	r3, [pc, #112]	; (d9310 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d929e:	681a      	ldr	r2, [r3, #0]
   d92a0:	07d1      	lsls	r1, r2, #31
   d92a2:	bf5c      	itt	pl
   d92a4:	2201      	movpl	r2, #1
   d92a6:	601a      	strpl	r2, [r3, #0]
   d92a8:	4b1a      	ldr	r3, [pc, #104]	; (d9314 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d92aa:	681a      	ldr	r2, [r3, #0]
   d92ac:	07d2      	lsls	r2, r2, #31
   d92ae:	bf5c      	itt	pl
   d92b0:	2201      	movpl	r2, #1
   d92b2:	601a      	strpl	r2, [r3, #0]
   d92b4:	4b18      	ldr	r3, [pc, #96]	; (d9318 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d92b6:	681a      	ldr	r2, [r3, #0]
   d92b8:	07d0      	lsls	r0, r2, #31
   d92ba:	bf5c      	itt	pl
   d92bc:	2201      	movpl	r2, #1
   d92be:	601a      	strpl	r2, [r3, #0]
   d92c0:	4b16      	ldr	r3, [pc, #88]	; (d931c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d92c2:	681a      	ldr	r2, [r3, #0]
   d92c4:	07d1      	lsls	r1, r2, #31
   d92c6:	bf5c      	itt	pl
   d92c8:	2201      	movpl	r2, #1
   d92ca:	601a      	strpl	r2, [r3, #0]
   d92cc:	4b14      	ldr	r3, [pc, #80]	; (d9320 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d92ce:	681a      	ldr	r2, [r3, #0]
   d92d0:	07d2      	lsls	r2, r2, #31
   d92d2:	bf5c      	itt	pl
   d92d4:	2201      	movpl	r2, #1
   d92d6:	601a      	strpl	r2, [r3, #0]
   d92d8:	4b12      	ldr	r3, [pc, #72]	; (d9324 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d92da:	681a      	ldr	r2, [r3, #0]
   d92dc:	07d0      	lsls	r0, r2, #31
   d92de:	bf5c      	itt	pl
   d92e0:	2201      	movpl	r2, #1
   d92e2:	601a      	strpl	r2, [r3, #0]
   d92e4:	4b10      	ldr	r3, [pc, #64]	; (d9328 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d92e6:	681a      	ldr	r2, [r3, #0]
   d92e8:	07d1      	lsls	r1, r2, #31
   d92ea:	bf5c      	itt	pl
   d92ec:	2201      	movpl	r2, #1
   d92ee:	601a      	strpl	r2, [r3, #0]
   d92f0:	4b0e      	ldr	r3, [pc, #56]	; (d932c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d92f2:	681a      	ldr	r2, [r3, #0]
   d92f4:	07d2      	lsls	r2, r2, #31
   d92f6:	bf5c      	itt	pl
   d92f8:	2201      	movpl	r2, #1
   d92fa:	601a      	strpl	r2, [r3, #0]
   d92fc:	4770      	bx	lr
   d92fe:	bf00      	nop
   d9300:	2003e7cc 	.word	0x2003e7cc
   d9304:	2003e7c8 	.word	0x2003e7c8
   d9308:	2003e7c4 	.word	0x2003e7c4
   d930c:	2003e7c0 	.word	0x2003e7c0
   d9310:	2003e7bc 	.word	0x2003e7bc
   d9314:	2003e7b8 	.word	0x2003e7b8
   d9318:	2003e7b4 	.word	0x2003e7b4
   d931c:	2003e7b0 	.word	0x2003e7b0
   d9320:	2003e7ac 	.word	0x2003e7ac
   d9324:	2003e7a8 	.word	0x2003e7a8
   d9328:	2003e7a4 	.word	0x2003e7a4
   d932c:	2003e7a0 	.word	0x2003e7a0

000d9330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d9330:	4b18      	ldr	r3, [pc, #96]	; (d9394 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d9332:	681a      	ldr	r2, [r3, #0]
   d9334:	07d1      	lsls	r1, r2, #31
   d9336:	bf5c      	itt	pl
   d9338:	2201      	movpl	r2, #1
   d933a:	601a      	strpl	r2, [r3, #0]
   d933c:	4b16      	ldr	r3, [pc, #88]	; (d9398 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d933e:	681a      	ldr	r2, [r3, #0]
   d9340:	07d2      	lsls	r2, r2, #31
   d9342:	bf5c      	itt	pl
   d9344:	2201      	movpl	r2, #1
   d9346:	601a      	strpl	r2, [r3, #0]
   d9348:	4b14      	ldr	r3, [pc, #80]	; (d939c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d934a:	681a      	ldr	r2, [r3, #0]
   d934c:	07d0      	lsls	r0, r2, #31
   d934e:	bf5c      	itt	pl
   d9350:	2201      	movpl	r2, #1
   d9352:	601a      	strpl	r2, [r3, #0]
   d9354:	4b12      	ldr	r3, [pc, #72]	; (d93a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d9356:	681a      	ldr	r2, [r3, #0]
   d9358:	07d1      	lsls	r1, r2, #31
   d935a:	bf5c      	itt	pl
   d935c:	2201      	movpl	r2, #1
   d935e:	601a      	strpl	r2, [r3, #0]
   d9360:	4b10      	ldr	r3, [pc, #64]	; (d93a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9362:	681a      	ldr	r2, [r3, #0]
   d9364:	07d2      	lsls	r2, r2, #31
   d9366:	bf5c      	itt	pl
   d9368:	2201      	movpl	r2, #1
   d936a:	601a      	strpl	r2, [r3, #0]
   d936c:	4b0e      	ldr	r3, [pc, #56]	; (d93a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d936e:	681a      	ldr	r2, [r3, #0]
   d9370:	07d0      	lsls	r0, r2, #31
   d9372:	bf5c      	itt	pl
   d9374:	2201      	movpl	r2, #1
   d9376:	601a      	strpl	r2, [r3, #0]
   d9378:	4b0c      	ldr	r3, [pc, #48]	; (d93ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d937a:	681a      	ldr	r2, [r3, #0]
   d937c:	07d1      	lsls	r1, r2, #31
   d937e:	bf5c      	itt	pl
   d9380:	2201      	movpl	r2, #1
   d9382:	601a      	strpl	r2, [r3, #0]
   d9384:	4b0a      	ldr	r3, [pc, #40]	; (d93b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d9386:	681a      	ldr	r2, [r3, #0]
   d9388:	07d2      	lsls	r2, r2, #31
   d938a:	bf5c      	itt	pl
   d938c:	2201      	movpl	r2, #1
   d938e:	601a      	strpl	r2, [r3, #0]
   d9390:	4770      	bx	lr
   d9392:	bf00      	nop
   d9394:	2003e7ec 	.word	0x2003e7ec
   d9398:	2003e7e8 	.word	0x2003e7e8
   d939c:	2003e7e4 	.word	0x2003e7e4
   d93a0:	2003e7e0 	.word	0x2003e7e0
   d93a4:	2003e7dc 	.word	0x2003e7dc
   d93a8:	2003e7d8 	.word	0x2003e7d8
   d93ac:	2003e7d4 	.word	0x2003e7d4
   d93b0:	2003e7d0 	.word	0x2003e7d0

000d93b4 <__cxa_atexit>:
   d93b4:	b510      	push	{r4, lr}
   d93b6:	4c05      	ldr	r4, [pc, #20]	; (d93cc <__cxa_atexit+0x18>)
   d93b8:	4613      	mov	r3, r2
   d93ba:	b12c      	cbz	r4, d93c8 <__cxa_atexit+0x14>
   d93bc:	460a      	mov	r2, r1
   d93be:	4601      	mov	r1, r0
   d93c0:	2002      	movs	r0, #2
   d93c2:	f3af 8000 	nop.w
   d93c6:	bd10      	pop	{r4, pc}
   d93c8:	4620      	mov	r0, r4
   d93ca:	bd10      	pop	{r4, pc}
   d93cc:	00000000 	.word	0x00000000

000d93d0 <memcmp>:
   d93d0:	b510      	push	{r4, lr}
   d93d2:	3901      	subs	r1, #1
   d93d4:	4402      	add	r2, r0
   d93d6:	4290      	cmp	r0, r2
   d93d8:	d007      	beq.n	d93ea <memcmp+0x1a>
   d93da:	f810 3b01 	ldrb.w	r3, [r0], #1
   d93de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d93e2:	42a3      	cmp	r3, r4
   d93e4:	d0f7      	beq.n	d93d6 <memcmp+0x6>
   d93e6:	1b18      	subs	r0, r3, r4
   d93e8:	bd10      	pop	{r4, pc}
   d93ea:	2000      	movs	r0, #0
   d93ec:	bd10      	pop	{r4, pc}

000d93ee <memcpy>:
   d93ee:	b510      	push	{r4, lr}
   d93f0:	1e43      	subs	r3, r0, #1
   d93f2:	440a      	add	r2, r1
   d93f4:	4291      	cmp	r1, r2
   d93f6:	d004      	beq.n	d9402 <memcpy+0x14>
   d93f8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d93fc:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9400:	e7f8      	b.n	d93f4 <memcpy+0x6>
   d9402:	bd10      	pop	{r4, pc}

000d9404 <memmove>:
   d9404:	4288      	cmp	r0, r1
   d9406:	b510      	push	{r4, lr}
   d9408:	eb01 0302 	add.w	r3, r1, r2
   d940c:	d801      	bhi.n	d9412 <memmove+0xe>
   d940e:	1e42      	subs	r2, r0, #1
   d9410:	e00b      	b.n	d942a <memmove+0x26>
   d9412:	4298      	cmp	r0, r3
   d9414:	d2fb      	bcs.n	d940e <memmove+0xa>
   d9416:	1881      	adds	r1, r0, r2
   d9418:	1ad2      	subs	r2, r2, r3
   d941a:	42d3      	cmn	r3, r2
   d941c:	d004      	beq.n	d9428 <memmove+0x24>
   d941e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9422:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d9426:	e7f8      	b.n	d941a <memmove+0x16>
   d9428:	bd10      	pop	{r4, pc}
   d942a:	4299      	cmp	r1, r3
   d942c:	d004      	beq.n	d9438 <memmove+0x34>
   d942e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9432:	f802 4f01 	strb.w	r4, [r2, #1]!
   d9436:	e7f8      	b.n	d942a <memmove+0x26>
   d9438:	bd10      	pop	{r4, pc}

000d943a <memset>:
   d943a:	4402      	add	r2, r0
   d943c:	4603      	mov	r3, r0
   d943e:	4293      	cmp	r3, r2
   d9440:	d002      	beq.n	d9448 <memset+0xe>
   d9442:	f803 1b01 	strb.w	r1, [r3], #1
   d9446:	e7fa      	b.n	d943e <memset+0x4>
   d9448:	4770      	bx	lr
	...

000d944c <srand>:
   d944c:	b538      	push	{r3, r4, r5, lr}
   d944e:	4b12      	ldr	r3, [pc, #72]	; (d9498 <srand+0x4c>)
   d9450:	681c      	ldr	r4, [r3, #0]
   d9452:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9454:	4605      	mov	r5, r0
   d9456:	b9d3      	cbnz	r3, d948e <srand+0x42>
   d9458:	2018      	movs	r0, #24
   d945a:	f7fc f803 	bl	d5464 <malloc>
   d945e:	f243 330e 	movw	r3, #13070	; 0x330e
   d9462:	63a0      	str	r0, [r4, #56]	; 0x38
   d9464:	8003      	strh	r3, [r0, #0]
   d9466:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d946a:	8043      	strh	r3, [r0, #2]
   d946c:	f241 2334 	movw	r3, #4660	; 0x1234
   d9470:	8083      	strh	r3, [r0, #4]
   d9472:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d9476:	80c3      	strh	r3, [r0, #6]
   d9478:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d947c:	8103      	strh	r3, [r0, #8]
   d947e:	2305      	movs	r3, #5
   d9480:	8143      	strh	r3, [r0, #10]
   d9482:	230b      	movs	r3, #11
   d9484:	8183      	strh	r3, [r0, #12]
   d9486:	2201      	movs	r2, #1
   d9488:	2300      	movs	r3, #0
   d948a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d948e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9490:	2200      	movs	r2, #0
   d9492:	611d      	str	r5, [r3, #16]
   d9494:	615a      	str	r2, [r3, #20]
   d9496:	bd38      	pop	{r3, r4, r5, pc}
   d9498:	2003d8c4 	.word	0x2003d8c4

000d949c <strchr>:
   d949c:	b2c9      	uxtb	r1, r1
   d949e:	4603      	mov	r3, r0
   d94a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d94a4:	b11a      	cbz	r2, d94ae <strchr+0x12>
   d94a6:	4291      	cmp	r1, r2
   d94a8:	d1f9      	bne.n	d949e <strchr+0x2>
   d94aa:	4618      	mov	r0, r3
   d94ac:	4770      	bx	lr
   d94ae:	2900      	cmp	r1, #0
   d94b0:	bf0c      	ite	eq
   d94b2:	4618      	moveq	r0, r3
   d94b4:	2000      	movne	r0, #0
   d94b6:	4770      	bx	lr

000d94b8 <strchrnul>:
   d94b8:	b510      	push	{r4, lr}
   d94ba:	4604      	mov	r4, r0
   d94bc:	f7ff ffee 	bl	d949c <strchr>
   d94c0:	b918      	cbnz	r0, d94ca <strchrnul+0x12>
   d94c2:	4620      	mov	r0, r4
   d94c4:	f000 f814 	bl	d94f0 <strlen>
   d94c8:	4420      	add	r0, r4
   d94ca:	bd10      	pop	{r4, pc}

000d94cc <strcmp>:
   d94cc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d94d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d94d4:	2a01      	cmp	r2, #1
   d94d6:	bf28      	it	cs
   d94d8:	429a      	cmpcs	r2, r3
   d94da:	d0f7      	beq.n	d94cc <strcmp>
   d94dc:	1ad0      	subs	r0, r2, r3
   d94de:	4770      	bx	lr

000d94e0 <strcpy>:
   d94e0:	4603      	mov	r3, r0
   d94e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d94e6:	f803 2b01 	strb.w	r2, [r3], #1
   d94ea:	2a00      	cmp	r2, #0
   d94ec:	d1f9      	bne.n	d94e2 <strcpy+0x2>
   d94ee:	4770      	bx	lr

000d94f0 <strlen>:
   d94f0:	4603      	mov	r3, r0
   d94f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d94f6:	2a00      	cmp	r2, #0
   d94f8:	d1fb      	bne.n	d94f2 <strlen+0x2>
   d94fa:	1a18      	subs	r0, r3, r0
   d94fc:	3801      	subs	r0, #1
   d94fe:	4770      	bx	lr

000d9500 <strncmp>:
   d9500:	b530      	push	{r4, r5, lr}
   d9502:	b182      	cbz	r2, d9526 <strncmp+0x26>
   d9504:	1e45      	subs	r5, r0, #1
   d9506:	3901      	subs	r1, #1
   d9508:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d950c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9510:	42a3      	cmp	r3, r4
   d9512:	d106      	bne.n	d9522 <strncmp+0x22>
   d9514:	43ec      	mvns	r4, r5
   d9516:	4414      	add	r4, r2
   d9518:	42e0      	cmn	r0, r4
   d951a:	d001      	beq.n	d9520 <strncmp+0x20>
   d951c:	2b00      	cmp	r3, #0
   d951e:	d1f3      	bne.n	d9508 <strncmp+0x8>
   d9520:	461c      	mov	r4, r3
   d9522:	1b18      	subs	r0, r3, r4
   d9524:	bd30      	pop	{r4, r5, pc}
   d9526:	4610      	mov	r0, r2
   d9528:	bd30      	pop	{r4, r5, pc}

000d952a <strnlen>:
   d952a:	b510      	push	{r4, lr}
   d952c:	4603      	mov	r3, r0
   d952e:	4401      	add	r1, r0
   d9530:	428b      	cmp	r3, r1
   d9532:	d004      	beq.n	d953e <strnlen+0x14>
   d9534:	781a      	ldrb	r2, [r3, #0]
   d9536:	1c5c      	adds	r4, r3, #1
   d9538:	b10a      	cbz	r2, d953e <strnlen+0x14>
   d953a:	4623      	mov	r3, r4
   d953c:	e7f8      	b.n	d9530 <strnlen+0x6>
   d953e:	1a18      	subs	r0, r3, r0
   d9540:	bd10      	pop	{r4, pc}

000d9542 <strrchr>:
   d9542:	b538      	push	{r3, r4, r5, lr}
   d9544:	4603      	mov	r3, r0
   d9546:	460d      	mov	r5, r1
   d9548:	b141      	cbz	r1, d955c <strrchr+0x1a>
   d954a:	2400      	movs	r4, #0
   d954c:	4629      	mov	r1, r5
   d954e:	4618      	mov	r0, r3
   d9550:	f7ff ffa4 	bl	d949c <strchr>
   d9554:	b130      	cbz	r0, d9564 <strrchr+0x22>
   d9556:	1c43      	adds	r3, r0, #1
   d9558:	4604      	mov	r4, r0
   d955a:	e7f7      	b.n	d954c <strrchr+0xa>
   d955c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9560:	f7ff bf9c 	b.w	d949c <strchr>
   d9564:	4620      	mov	r0, r4
   d9566:	bd38      	pop	{r3, r4, r5, pc}

000d9568 <_strtol_r>:
   d9568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d956c:	4680      	mov	r8, r0
   d956e:	4840      	ldr	r0, [pc, #256]	; (d9670 <_strtol_r+0x108>)
   d9570:	f8d0 9000 	ldr.w	r9, [r0]
   d9574:	460f      	mov	r7, r1
   d9576:	463d      	mov	r5, r7
   d9578:	f815 4b01 	ldrb.w	r4, [r5], #1
   d957c:	eb09 0004 	add.w	r0, r9, r4
   d9580:	7840      	ldrb	r0, [r0, #1]
   d9582:	f000 0008 	and.w	r0, r0, #8
   d9586:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d958a:	b108      	cbz	r0, d9590 <_strtol_r+0x28>
   d958c:	462f      	mov	r7, r5
   d958e:	e7f2      	b.n	d9576 <_strtol_r+0xe>
   d9590:	2c2d      	cmp	r4, #45	; 0x2d
   d9592:	d103      	bne.n	d959c <_strtol_r+0x34>
   d9594:	1cbd      	adds	r5, r7, #2
   d9596:	787c      	ldrb	r4, [r7, #1]
   d9598:	2601      	movs	r6, #1
   d959a:	e003      	b.n	d95a4 <_strtol_r+0x3c>
   d959c:	2c2b      	cmp	r4, #43	; 0x2b
   d959e:	bf04      	itt	eq
   d95a0:	787c      	ldrbeq	r4, [r7, #1]
   d95a2:	1cbd      	addeq	r5, r7, #2
   d95a4:	b113      	cbz	r3, d95ac <_strtol_r+0x44>
   d95a6:	2b10      	cmp	r3, #16
   d95a8:	d10a      	bne.n	d95c0 <_strtol_r+0x58>
   d95aa:	e05b      	b.n	d9664 <_strtol_r+0xfc>
   d95ac:	2c30      	cmp	r4, #48	; 0x30
   d95ae:	d157      	bne.n	d9660 <_strtol_r+0xf8>
   d95b0:	7828      	ldrb	r0, [r5, #0]
   d95b2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d95b6:	2858      	cmp	r0, #88	; 0x58
   d95b8:	d14d      	bne.n	d9656 <_strtol_r+0xee>
   d95ba:	786c      	ldrb	r4, [r5, #1]
   d95bc:	2310      	movs	r3, #16
   d95be:	3502      	adds	r5, #2
   d95c0:	2e00      	cmp	r6, #0
   d95c2:	bf14      	ite	ne
   d95c4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d95c8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d95cc:	2700      	movs	r7, #0
   d95ce:	fbbc faf3 	udiv	sl, ip, r3
   d95d2:	4638      	mov	r0, r7
   d95d4:	fb03 cc1a 	mls	ip, r3, sl, ip
   d95d8:	eb09 0e04 	add.w	lr, r9, r4
   d95dc:	f89e e001 	ldrb.w	lr, [lr, #1]
   d95e0:	f01e 0f04 	tst.w	lr, #4
   d95e4:	d001      	beq.n	d95ea <_strtol_r+0x82>
   d95e6:	3c30      	subs	r4, #48	; 0x30
   d95e8:	e00b      	b.n	d9602 <_strtol_r+0x9a>
   d95ea:	f01e 0e03 	ands.w	lr, lr, #3
   d95ee:	d01b      	beq.n	d9628 <_strtol_r+0xc0>
   d95f0:	f1be 0f01 	cmp.w	lr, #1
   d95f4:	bf0c      	ite	eq
   d95f6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d95fa:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d95fe:	ebce 0404 	rsb	r4, lr, r4
   d9602:	42a3      	cmp	r3, r4
   d9604:	dd10      	ble.n	d9628 <_strtol_r+0xc0>
   d9606:	f1b7 3fff 	cmp.w	r7, #4294967295
   d960a:	d00a      	beq.n	d9622 <_strtol_r+0xba>
   d960c:	4550      	cmp	r0, sl
   d960e:	d806      	bhi.n	d961e <_strtol_r+0xb6>
   d9610:	d101      	bne.n	d9616 <_strtol_r+0xae>
   d9612:	4564      	cmp	r4, ip
   d9614:	dc03      	bgt.n	d961e <_strtol_r+0xb6>
   d9616:	fb03 4000 	mla	r0, r3, r0, r4
   d961a:	2701      	movs	r7, #1
   d961c:	e001      	b.n	d9622 <_strtol_r+0xba>
   d961e:	f04f 37ff 	mov.w	r7, #4294967295
   d9622:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9626:	e7d7      	b.n	d95d8 <_strtol_r+0x70>
   d9628:	1c7b      	adds	r3, r7, #1
   d962a:	d10c      	bne.n	d9646 <_strtol_r+0xde>
   d962c:	2e00      	cmp	r6, #0
   d962e:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9632:	bf14      	ite	ne
   d9634:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9638:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d963c:	f8c8 3000 	str.w	r3, [r8]
   d9640:	b92a      	cbnz	r2, d964e <_strtol_r+0xe6>
   d9642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9646:	b106      	cbz	r6, d964a <_strtol_r+0xe2>
   d9648:	4240      	negs	r0, r0
   d964a:	b172      	cbz	r2, d966a <_strtol_r+0x102>
   d964c:	b107      	cbz	r7, d9650 <_strtol_r+0xe8>
   d964e:	1e69      	subs	r1, r5, #1
   d9650:	6011      	str	r1, [r2, #0]
   d9652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9656:	2430      	movs	r4, #48	; 0x30
   d9658:	2b00      	cmp	r3, #0
   d965a:	d1b1      	bne.n	d95c0 <_strtol_r+0x58>
   d965c:	2308      	movs	r3, #8
   d965e:	e7af      	b.n	d95c0 <_strtol_r+0x58>
   d9660:	230a      	movs	r3, #10
   d9662:	e7ad      	b.n	d95c0 <_strtol_r+0x58>
   d9664:	2c30      	cmp	r4, #48	; 0x30
   d9666:	d0a3      	beq.n	d95b0 <_strtol_r+0x48>
   d9668:	e7aa      	b.n	d95c0 <_strtol_r+0x58>
   d966a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d966e:	bf00      	nop
   d9670:	2003d860 	.word	0x2003d860

000d9674 <strtol>:
   d9674:	4613      	mov	r3, r2
   d9676:	460a      	mov	r2, r1
   d9678:	4601      	mov	r1, r0
   d967a:	4802      	ldr	r0, [pc, #8]	; (d9684 <strtol+0x10>)
   d967c:	6800      	ldr	r0, [r0, #0]
   d967e:	f7ff bf73 	b.w	d9568 <_strtol_r>
   d9682:	bf00      	nop
   d9684:	2003d8c4 	.word	0x2003d8c4

000d9688 <dynalib_user>:
   d9688:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d9698:	00000000                                ....

000d969c <_ZTVN5spark10LogHandlerE>:
	...
   d96ac:	000d40a9 000d40cd                       .@...@..

000d96b4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d96bc:	000d40e9 000d411d 000d7cb5 000d40cf     .@...A...|...@..
   d96cc:	73696854 73656d20 65676173 6f687320     This message sho
   d96dc:	20646c75 20746f6e 61206562 61657070     uld not be appea
   d96ec:	676e6972 72662820 6d206d6f 20747471     ring (from mqtt 
   d96fc:	6c6c6163 6b636162 65530029 726f736e     callback).Sensor
   d970c:	2d203120 6d655420 61726570 65727574      1 - Temperature
   d971c:	7525203a 67656420 73656572 6c654320     : %u degrees Cel
   d972c:	73756973 6e655300 20726f73 202d2031     sius.Sensor 1 - 
   d973c:	696d7548 79746964 7525203a 53002525     Humidity: %u%%.S
   d974c:	6f736e65 20312072 7543202d 6e657272     ensor 1 - Curren
   d975c:	25203a74 6d412075 53007370 6f736e65     t: %u Amps.Senso
   d976c:	20322072 6f53202d 6f6e656c 203a6469     r 2 - Solenoid: 
   d977c:	00207525 736e6553 3120726f 44202d20     %u .Sensor 1 - D
   d978c:	61747369 3a65636e 20752520 53006d63     istance: %u cm.S
   d979c:	6f736e65 20322072 6152202d 74736e69     ensor 2 - Rainst
   d97ac:	3a6d6165 20642520 6e655300 20726f73     eam: %d .Sensor 
   d97bc:	202d2032 6867694c 25203a74 754c2075     2 - Light: %u Lu
   d97cc:	65530078 726f736e 2d203220 6d754820     x.Sensor 2 - Hum
   d97dc:	64206e61 63657465 3a726f74 00752520     an detector: %u.
   d97ec:	736e6553 3220726f 48202d20 6e616d75     Sensor 2 - Human
   d97fc:	736f6c20 2e2e2e74 6e655300 20726f73      lost....Sensor 
   d980c:	202d2032 616d7548 6564206e 74636574     2 - Human detect
   d981c:	00216465 736e6553 3220726f 49202d20     ed!.Sensor 2 - I
   d982c:	6c61766e 68206469 6e616d75 74656420     nvalid human det
   d983c:	6f746365 656d2072 67617373 45202e65     ector message. E
   d984c:	63657078 20646574 726f2030 202c3120     xpected 0 or 1, 
   d985c:	65636572 64657669 00752520 63656c65     received %u.elec
   d986c:	30343734 75703667 73696c62 00726568     4740g6publisher.
   d987c:	5454514d 6e6f6320 7463656e 73206465     MQTT connected s
   d988c:	65636375 75667373 21796c6c 54514d00     uccessfully!.MQT
   d989c:	6f632054 63656e6e 6e6f6974 69616620     T connection fai
   d98ac:	0064656c 6e756f46 20612064 65756c62     led.Found a blue
   d98bc:	746f6f74 65642068 65636976 6441002e     tooth device..Ad
   d98cc:	73657264 00203a73 6e756f46 55552064     dress: .Found UU
   d98dc:	203a4449 6e655300 4e726f73 3165646f     ID: .SensorNode1
   d98ec:	49555520 00203a44 736e6553 6f4e726f      UUID: .SensorNo
   d98fc:	20326564 44495555 5300203a 65636375     de2 UUID: .Succe
   d990c:	75667373 20796c6c 6e6e6f63 65746365     ssfully connecte
   d991c:	6f742064 6e657320 20726f73 65646f6e     d to sensor node
   d992c:	00213120 62663932 35663361 6563342d      1!.29fba3f5-4ce
   d993c:	36342d38 382d6362 2d353764 30383737     8-46bc-8d75-7780
   d994c:	32626436 31336332 61393900 66326430     6db22c31.99a0d2f
   d995c:	63312d39 342d6166 2d336232 61623562     9-1cfa-42b3-b5ba
   d996c:	3462312d 34333464 32393331 35340066     -1b4d4341392f.45
   d997c:	61346562 342d3635 2d356638 63333834     be4a56-48f5-483c
   d998c:	6262382d 33642d31 34656566 32633333     -8bb1-d3fee433c2
   d999c:	65006333 34323561 2d346138 63633334     3c.ea5248a4-43cc
   d99ac:	3931342d 34612d38 372d6161 30303239     -4198-a4aa-79200
   d99bc:	30353761 00353338 6c696146 74206465     a750835.Failed t
   d99cc:	6f63206f 63656e6e 6f742074 6e657320     o connect to sen
   d99dc:	20726f73 65646f6e 002e3120 736e6553     sor node 1..Sens
   d99ec:	6e20726f 2065646f 6c612031 64616572     or node 1 alread
   d99fc:	6f632079 63656e6e 2e646574 63755300     y connected..Suc
   d9a0c:	73736563 6c6c7566 6f632079 63656e6e     cessfully connec
   d9a1c:	20646574 73206f74 6f736e65 6f6e2072     ted to sensor no
   d9a2c:	32206564 63620021 38316637 322d3964     de 2!.bc7f18d9-2
   d9a3c:	2d333463 65383034 3265622d 32362d35     c43-408e-be25-62
   d9a4c:	36303466 38393534 38006337 32616238     f40645987c.88ba2
   d9a5c:	2d643566 38396531 6139342d 36382d66     f5d-1e98-49af-86
   d9a6c:	642d3739 36313530 33306664 00396562     97-d0516df03be9.
   d9a7c:	32383462 31353564 6133632d 64342d65     b482d551-c3ae-4d
   d9a8c:	622d6564 2d353231 34326563 38376434     de-b125-ce244d78
   d9a9c:	30623639 30373900 37363731 36392d34     96b0.97017674-96
   d9aac:	342d3531 2d616266 32313739 3238362d     15-4fba-9712-682
   d9abc:	30326639 33383534 61460036 64656c69     9f2045836.Failed
   d9acc:	206f7420 6e6e6f63 20746365 73206f74      to connect to s
   d9adc:	6f736e65 6f6e2072 32206564 6553002e     ensor node 2..Se
   d9aec:	726f736e 646f6e20 20322065 65726c61     nsor node 2 alre
   d9afc:	20796461 6e6e6f63 65746365 25002e64     ady connected..%
   d9b0c:	65642064 65636976 6f662073 00646e75     d devices found.
   d9b1c:	756f6241 6f742074 61637320 2e2e2e6e     About to scan...
   d9b2c:	6c656800 77206f6c 646c726f 656c6500     .hello world.ele
   d9b3c:	34373463 2f366730 61746164 756f4600     c4740g6/data.Fou
   d9b4c:	7320646e 6f736e65 6f6e2072 31206564     nd sensor node 1
   d9b5c:	6f46002e 20646e75 736e6573 6e20726f     ..Found sensor n
   d9b6c:	2065646f 53002e32 6f736e65 20322072     ode 2..Sensor 2 
   d9b7c:	7543202d 6e657272 25203a74 6d412075     - Current: %u Am
   d9b8c:	37007370 62653435 2d653566 31336563     ps.754ebf5e-ce31
   d9b9c:	3033342d 66392d30 612d3564 34626638     -4300-9fd5-a8fb4
   d9bac:	61346565 00313138 32373739 39646138     ee4a811.97728ad9
   d9bbc:	3939612d 36342d38 622d3932 2d353538     -a998-4629-b855-
   d9bcc:	36326565 61633835 37663130 70637400     ee2658ca01f7.tcp
   d9bdc:	622f2f3a 656b6f72 716d2e72 61647474     ://broker.mqttda
   d9bec:	6f626873 2e647261 006d6f63 514d0400     shboard.com...MQ
   d9bfc:	00045454 49514d06 03706473              TT...MQIsdp.

000d9c08 <_ZTVN5spark13EthernetClassE>:
	...
   d9c10:	000d5513 000d5509 000d54ff 000d54f5     .U...U...T...T..
   d9c20:	000d54e9 000d54dd 000d54d1 000d54c9     .T...T...T...T..
   d9c30:	000d54bf 000d54b5 000d8c7d              .T...T..}...

000d9c3c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9c44:	000d56e1 000d56e7 000d6c45 000d5711     .V...V..El...W..
   d9c54:	000d56e3                                .V..

000d9c58 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9c60:	000d56db 000d56f5 000d6e01 000d5715     .V...V...n...W..
   d9c70:	000d56dd                                .V..

000d9c74 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9c7c:	000d56d5 000d5703 000d6357 000d5719     .V...W..Wc...W..
   d9c8c:	000d56d7 69726977 622e676e 5300656c     .V..wiring.ble.S
   d9c9c:	74726174 73696420 65766f63 676e6972     tart discovering
   d9cac:	72657320 65636976 53002e73 74726174      services..Start
   d9cbc:	73696420 65766f63 676e6972 61686320      discovering cha
   d9ccc:	74636172 73697265 73636974 6550002e     racteristics..Pe
   d9cdc:	64207265 63697665 73692065 73696d20     er device is mis
   d9cec:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   d9cfc:	65707061 7020646e 20726565 746e6543     append peer Cent
   d9d0c:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   d9d1c:	65746365 79622064 6e654320 6c617274     ected by Central
   d9d2c:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   d9d3c:	65746365 79622064 6d657220 2065746f     ected by remote 
   d9d4c:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   d9d5c:	6e206464 70207765 20726565 69766564     dd new peer devi
   d9d6c:	002e6563 2077654e 69726570 72656870     ce..New peripher
   d9d7c:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   d9d8c:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d9d9c:	69642064 766f6373 64657265 61686320     d discovered cha
   d9dac:	74636172 73697265 2e636974 69614600     racteristic..Fai
   d9dbc:	2064656c 61206f74 6e657070 69642064     led to append di
   d9dcc:	766f6373 64657265 72657320 65636976     scovered service
   d9ddc:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d9dec:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d9dfc:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   d9e0c:	20646574 72616863 65746361 74736972     ted characterist
   d9e1c:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d9e2c:	002e6465                                ed..

000d9e30 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d9e30:	5f9b34fb 80000080 00001000 00000000     .4._............

000d9e40 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d9e48:	000d7091 000d70b7 000d706b 000d8d8b     .p...p..kp......

000d9e58 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d9e60:	000d750d 000d7521 000d7e69 000d7073     .u..!u..i~..sp..
   d9e70:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d9e80:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d9e90:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d9ea0:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d9eb0:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d9ec0:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d9ed0:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d9ee0:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d9ef0:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d9f00:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d9f10:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d9f20:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d9f30:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d9f40:	61700072 0063696e 006c6c61              r.panic.all.

000d9f4c <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9f54:	000d74e1 000d74f9 000d7cb5 000d40cf     .t...t...|...@..

000d9f64 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9f6c:	000d708f 000d70c5 000d7bdd 000d7075     .p...p...{..up..

000d9f7c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9f84:	000d708d 000d70d3 000d7425 000d70e1     .p...p..%t...p..
   d9f94:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d9fa4:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d9fb4:	63736100 656d6974 00000000              .asctime....

000d9fc0 <_ZTV9IPAddress>:
	...
   d9fc8:	000d8151 000d8141 000d8143              Q...A...C...

000d9fd4 <_ZTV9USBSerial>:
	...
   d9fdc:	000d8269 000d82b9 000d82c7 000d6f4d     i...........Mo..
   d9fec:	000d82a5 000d826b 000d8281 000d82b3     ....k...........
   d9ffc:	000d8297 000d8265                       ....e...

000da004 <_ZTV11USARTSerial>:
	...
   da00c:	000d837d 000d83cd 000d83db 000d6f4d     }...........Mo..
   da01c:	000d8391 000d83b3 000d839f 000d83c7     ................
   da02c:	000d837f 000d8383                       ........

000da034 <_ZTVN5spark9MeshClassE>:
	...
   da03c:	000d84eb 000d84e1 000d84d7 000d84cd     ................
   da04c:	000d84c1 000d84b5 000d84a9 000d84a1     ................
   da05c:	000d8497 000d848d 000d8c7d              ........}...

000da068 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da070:	000d8691 000d8697 000d8b7f 000d86a5     ................
   da080:	000d8693                                ....

000da084 <_ZTV9TCPClient>:
	...
   da08c:	000d4a01 000d4a35 000d8609 000d8623     .J..5J......#...
   da09c:	000d8a25 000d8777 000d8749 000d864d     %...w...I...M...
   da0ac:	000d8901 000d87fd 000d87ab 000d89f5     ................
   da0bc:	000d864f 000d8687 000d8635 000d86a9     O.......5.......
   da0cc:	000d8729 69726977 7200676e 20766365     )...wiring.recv 
   da0dc:	6f727265 203d2072 00006425              error = %d..

000da0e8 <_ZTVN5spark9WiFiClassE>:
	...
   da0f0:	000d8bf5 000d8beb 000d8be1 000d8b97     ................
   da100:	000d8bd5 000d8bc9 000d8bbd 000d8bb5     ................
   da110:	000d8bab 000d8ba1 000d8c7d              ........}...

000da11c <_ZTVN5spark12NetworkClassE>:
	...
   da124:	000d8c15 000d8c1f 000d8c29 000d8c33     ........)...3...
   da134:	000d8c3d 000d8c49 000d8c55 000d8c61     =...I...U...a...
   da144:	000d8c69 000d8c73 000d8c7d 00302e30     i...s...}...0.0.
   da154:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   da164:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000da173 <_ZSt7nothrow>:
	...

000da174 <_ctype_>:
   da174:	20202000 20202020 28282020 20282828     .         ((((( 
   da184:	20202020 20202020 20202020 20202020                     
   da194:	10108820 10101010 10101010 10101010      ...............
   da1a4:	04040410 04040404 10040404 10101010     ................
   da1b4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da1c4:	01010101 01010101 01010101 10101010     ................
   da1d4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da1e4:	02020202 02020202 02020202 10101010     ................
   da1f4:	00000020 00000000 00000000 00000000      ...............
	...

000da278 <__sf_fake_stdin>:
	...

000da298 <__sf_fake_stdout>:
	...

000da2b8 <__sf_fake_stderr>:
	...
   da2d8:	00000043                                         C.

000da2da <link_const_variable_data_end>:
	...

000da2dc <link_constructors_location>:
   da2dc:	000d47f5 	.word	0x000d47f5
   da2e0:	000d49fd 	.word	0x000d49fd
   da2e4:	000d4f75 	.word	0x000d4f75
   da2e8:	000d551d 	.word	0x000d551d
   da2ec:	000d5531 	.word	0x000d5531
   da2f0:	000d6f25 	.word	0x000d6f25
   da2f4:	000d7ca5 	.word	0x000d7ca5
   da2f8:	000d7fe1 	.word	0x000d7fe1
   da2fc:	000d8015 	.word	0x000d8015
   da300:	000d85b9 	.word	0x000d85b9
   da304:	000d8c01 	.word	0x000d8c01
   da308:	000d8d49 	.word	0x000d8d49
   da30c:	000d9125 	.word	0x000d9125
   da310:	000d91a9 	.word	0x000d91a9
   da314:	000d926d 	.word	0x000d926d
   da318:	000d9331 	.word	0x000d9331

000da31c <link_constructors_end>:
   da31c:	00000000 	.word	0x00000000
