
c:/Users/tschw/repos/elec4740Group6/clusterhead/target/1.5.2/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008714  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc730  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  2003d830  000dc734  0001d830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f30  2003d8c0  2003d8c0  0002d8c0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc7c4  000dc7c4  0002c7c4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc7ec  000dc7ec  0002c7ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104b14  00000000  00000000  0002c7f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000128fd  00000000  00000000  00131304  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002667b  00000000  00000000  00143c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002dc0  00000000  00000000  0016a27c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000057f8  00000000  00000000  0016d03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035553  00000000  00000000  00172834  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b62d  00000000  00000000  001a7d87  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00111538  00000000  00000000  001d33b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ea00  00000000  00000000  002e48ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 ff48 	bl	daec2 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 ff68 	bl	daf0e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d830 	.word	0x2003d830
   d4048:	000dc734 	.word	0x000dc734
   d404c:	2003d8c0 	.word	0x2003d8c0
   d4050:	2003d8c0 	.word	0x2003d8c0
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f005 faa5 	bl	d95a8 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dc728 	.word	0x000dc728
   d4080:	000dc6e8 	.word	0x000dc6e8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bb96 	b.w	d47b4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9a1 	bl	d43d0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f005 ba4b 	b.w	d952c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bba9 	b.w	d67ec <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 bba7 	b.w	d67ec <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bbad 	b.w	d67fc <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bbab 	b.w	d67fc <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fab8 	bl	d6624 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d62a1 	.word	0x000d62a1

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z27setLowSoilMoistureThreshold6String>:
    }
    return 0;
}

/* Threshold modification functions */
int setLowSoilMoistureThreshold(String threshold){
   d40d8:	b508      	push	{r3, lr}
    LOW_SOIL_MOISTURE_THRESHOLD = threshold.toInt();
   d40da:	f002 fcf2 	bl	d6ac2 <_ZNK6String5toIntEv>
   d40de:	4b02      	ldr	r3, [pc, #8]	; (d40e8 <_Z27setLowSoilMoistureThreshold6String+0x10>)
   d40e0:	6018      	str	r0, [r3, #0]
    return 1;
}
   d40e2:	2001      	movs	r0, #1
   d40e4:	bd08      	pop	{r3, pc}
   d40e6:	bf00      	nop
   d40e8:	2003d83c 	.word	0x2003d83c

000d40ec <_Z28setHighSoilMoistureThreshold6String>:
int setHighSoilMoistureThreshold(String threshold){
   d40ec:	b508      	push	{r3, lr}
    HIGH_SOIL_MOISTURE_THRESHOLD = threshold.toInt();
   d40ee:	f002 fce8 	bl	d6ac2 <_ZNK6String5toIntEv>
   d40f2:	4b02      	ldr	r3, [pc, #8]	; (d40fc <_Z28setHighSoilMoistureThreshold6String+0x10>)
   d40f4:	6018      	str	r0, [r3, #0]
    return 1;
}
   d40f6:	2001      	movs	r0, #1
   d40f8:	bd08      	pop	{r3, pc}
   d40fa:	bf00      	nop
   d40fc:	2003d844 	.word	0x2003d844

000d4100 <_Z23setTemperatureThreshold6String>:
int setTemperatureThreshold(String threshold){
   d4100:	b508      	push	{r3, lr}
    TEMPERATURE_THRESHOLD = threshold.toInt();
   d4102:	f002 fcde 	bl	d6ac2 <_ZNK6String5toIntEv>
   d4106:	4b02      	ldr	r3, [pc, #8]	; (d4110 <_Z23setTemperatureThreshold6String+0x10>)
   d4108:	6018      	str	r0, [r3, #0]
    return 1;
}
   d410a:	2001      	movs	r0, #1
   d410c:	bd08      	pop	{r3, pc}
   d410e:	bf00      	nop
   d4110:	2003d834 	.word	0x2003d834

000d4114 <_Z23setAirHumidityThreshold6String>:
int setAirHumidityThreshold(String threshold){
   d4114:	b508      	push	{r3, lr}
    AIR_HUMIDITY_THRESHOLD = threshold.toInt();
   d4116:	f002 fcd4 	bl	d6ac2 <_ZNK6String5toIntEv>
   d411a:	4b02      	ldr	r3, [pc, #8]	; (d4124 <_Z23setAirHumidityThreshold6String+0x10>)
   d411c:	6018      	str	r0, [r3, #0]
    return 1;
}
   d411e:	2001      	movs	r0, #1
   d4120:	bd08      	pop	{r3, pc}
   d4122:	bf00      	nop
   d4124:	2003d848 	.word	0x2003d848

000d4128 <_Z22setSunnyLightThreshold6String>:
int setSunnyLightThreshold(String threshold){
   d4128:	b508      	push	{r3, lr}
    SUNNY_LIGHT_THRESHOLD = threshold.toInt();
   d412a:	f002 fcca 	bl	d6ac2 <_ZNK6String5toIntEv>
   d412e:	4b02      	ldr	r3, [pc, #8]	; (d4138 <_Z22setSunnyLightThreshold6String+0x10>)
   d4130:	6018      	str	r0, [r3, #0]
    return 1;
}
   d4132:	2001      	movs	r0, #1
   d4134:	bd08      	pop	{r3, pc}
   d4136:	bf00      	nop
   d4138:	2003d838 	.word	0x2003d838

000d413c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d413c:	b510      	push	{r4, lr}
   d413e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4140:	6800      	ldr	r0, [r0, #0]
   d4142:	b108      	cbz	r0, d4148 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4144:	f002 fb5a 	bl	d67fc <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZNSt6vectorIlSaIlEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d4150:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4152:	b108      	cbz	r0, d4158 <_ZNSt6vectorIlSaIlEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4154:	f7ff ffa3 	bl	d409e <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d4158:	4620      	mov	r0, r4
   d415a:	bd10      	pop	{r4, pc}

000d415c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d415c:	4b0a      	ldr	r3, [pc, #40]	; (d4188 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d415e:	b510      	push	{r4, lr}
   d4160:	4604      	mov	r4, r0
   d4162:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4164:	f004 faac 	bl	d86c0 <_ZN5spark10LogManager8instanceEv>
   d4168:	4621      	mov	r1, r4
   d416a:	f004 fc99 	bl	d8aa0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d416e:	f005 fe2f 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d4172:	f005 fe21 	bl	d9db8 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4176:	4620      	mov	r0, r4
   d4178:	4b04      	ldr	r3, [pc, #16]	; (d418c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d417a:	f840 3b04 	str.w	r3, [r0], #4
   d417e:	f004 fb95 	bl	d88ac <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4182:	4620      	mov	r0, r4
   d4184:	bd10      	pop	{r4, pc}
   d4186:	bf00      	nop
   d4188:	000db1e0 	.word	0x000db1e0
   d418c:	000db1c8 	.word	0x000db1c8

000d4190 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4194:	f7ff ffe2 	bl	d415c <_ZN5spark16SerialLogHandlerD1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2124      	movs	r1, #36	; 0x24
   d419c:	f006 fd14 	bl	dabc8 <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41a4:	b40e      	push	{r1, r2, r3}
   d41a6:	b500      	push	{lr}
   d41a8:	b08c      	sub	sp, #48	; 0x30
   d41aa:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41ac:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41ae:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d41b2:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41b4:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41b8:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41ba:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41bc:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41be:	aa04      	add	r2, sp, #16
   d41c0:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41c2:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41c4:	f002 fa3e 	bl	d6644 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d41c8:	b00c      	add	sp, #48	; 0x30
   d41ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d41ce:	b003      	add	sp, #12
   d41d0:	4770      	bx	lr
	...

000d41d4 <_Z18mqttPacketReceivedPcPhtb9MQTT5_QOSb>:
    snprintf(buf, sz+1, "Failure due to reason %d", (int) reason);
    
   Particle.publish(buf, PRIVATE);
}

void mqttPacketReceived(char* topic, uint8_t* payload, uint16_t payloadLength, bool dup, MQTT5_QOS qos, bool retain) {
   d41d4:	b508      	push	{r3, lr}
    char content[payloadLength + 1];
    memcpy(content, payload, payloadLength);
    content[payloadLength] = 0;
    Log.info("Topic: %s. Message: %s", topic, payload);
   d41d6:	4602      	mov	r2, r0
   d41d8:	460b      	mov	r3, r1
   d41da:	4802      	ldr	r0, [pc, #8]	; (d41e4 <_Z18mqttPacketReceivedPcPhtb9MQTT5_QOSb+0x10>)
   d41dc:	4902      	ldr	r1, [pc, #8]	; (d41e8 <_Z18mqttPacketReceivedPcPhtb9MQTT5_QOSb+0x14>)
   d41de:	f7ff ffe1 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d41e2:	bd08      	pop	{r3, pc}
   d41e4:	2003e40c 	.word	0x2003e40c
   d41e8:	000db1f0 	.word	0x000db1f0

000d41ec <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    return client.publish("elec4740g6", buf);;
}

/* These functions are where we do something with the data (in bytes) we've received via bluetooth */

void onTemperatureReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41ec:	b510      	push	{r4, lr}
    int8_t receivedTemp;
    
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
   d41ee:	f990 4000 	ldrsb.w	r4, [r0]

    Log.info("Sensor 1 - Temperature: %u degrees Celsius", receivedTemp);
   d41f2:	4904      	ldr	r1, [pc, #16]	; (d4204 <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   d41f4:	4804      	ldr	r0, [pc, #16]	; (d4208 <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41f6:	4622      	mov	r2, r4
   d41f8:	f7ff ffd4 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentTemperature = receivedTemp;
   d41fc:	4b03      	ldr	r3, [pc, #12]	; (d420c <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41fe:	701c      	strb	r4, [r3, #0]
   d4200:	bd10      	pop	{r4, pc}
   d4202:	bf00      	nop
   d4204:	000db207 	.word	0x000db207
   d4208:	2003e40c 	.word	0x2003e40c
   d420c:	2003d840 	.word	0x2003d840

000d4210 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
}

void onHumidityReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4210:	b510      	push	{r4, lr}
    uint8_t receivedHumidity;
    memcpy(&receivedHumidity, &data[0], sizeof(receivedHumidity));
   d4212:	7804      	ldrb	r4, [r0, #0]
    Log.info("Sensor 1 - Humidity: %u%%", receivedHumidity);
   d4214:	4903      	ldr	r1, [pc, #12]	; (d4224 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d4216:	4804      	ldr	r0, [pc, #16]	; (d4228 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   d4218:	4622      	mov	r2, r4
   d421a:	f7ff ffc3 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentHumidity = receivedHumidity;
   d421e:	4b03      	ldr	r3, [pc, #12]	; (d422c <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d4220:	701c      	strb	r4, [r3, #0]
   d4222:	bd10      	pop	{r4, pc}
   d4224:	000db232 	.word	0x000db232
   d4228:	2003e40c 	.word	0x2003e40c
   d422c:	2003d830 	.word	0x2003d830

000d4230 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
}

void onMoistureReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4230:	b513      	push	{r0, r1, r4, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4232:	8803      	ldrh	r3, [r0, #0]
   d4234:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 1 - Soil moisture: %u%%", twoByteValue);
   d4238:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d423c:	4904      	ldr	r1, [pc, #16]	; (d4250 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d423e:	4805      	ldr	r0, [pc, #20]	; (d4254 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d4240:	4622      	mov	r2, r4
   d4242:	f7ff ffaf 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentMoisture = twoByteValue;
   d4246:	4b04      	ldr	r3, [pc, #16]	; (d4258 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d4248:	701c      	strb	r4, [r3, #0]
}
   d424a:	b002      	add	sp, #8
   d424c:	bd10      	pop	{r4, pc}
   d424e:	bf00      	nop
   d4250:	000db24c 	.word	0x000db24c
   d4254:	2003e40c 	.word	0x2003e40c
   d4258:	2003d841 	.word	0x2003d841

000d425c <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onLightReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d425c:	b513      	push	{r0, r1, r4, lr}
    //read the current sensor reading
    int16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(twoByteValue));
   d425e:	8803      	ldrh	r3, [r0, #0]
   d4260:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 1 - Light: %u Lux", twoByteValue);
   d4264:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
   d4268:	4904      	ldr	r1, [pc, #16]	; (d427c <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d426a:	4805      	ldr	r0, [pc, #20]	; (d4280 <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d426c:	4622      	mov	r2, r4
   d426e:	f7ff ff99 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentLight = twoByteValue;
   d4272:	4b04      	ldr	r3, [pc, #16]	; (d4284 <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d4274:	701c      	strb	r4, [r3, #0]
}
   d4276:	b002      	add	sp, #8
   d4278:	bd10      	pop	{r4, pc}
   d427a:	bf00      	nop
   d427c:	000db26b 	.word	0x000db26b
   d4280:	2003e40c 	.word	0x2003e40c
   d4284:	2003e390 	.word	0x2003e390

000d4288 <_Z19onRainsteamReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onRainsteamReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4288:	b508      	push	{r3, lr}
    int8_t rainsteam;
    memcpy(&rainsteam, &data[0], sizeof(rainsteam));
    Log.info("Sensor 2 - Rainsteam: %d ", rainsteam);
   d428a:	4903      	ldr	r1, [pc, #12]	; (d4298 <_Z19onRainsteamReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d428c:	f990 2000 	ldrsb.w	r2, [r0]
   d4290:	4802      	ldr	r0, [pc, #8]	; (d429c <_Z19onRainsteamReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d4292:	f7ff ff87 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4296:	bd08      	pop	{r3, pc}
   d4298:	000db284 	.word	0x000db284
   d429c:	2003e40c 	.word	0x2003e40c

000d42a0 <_Z21onLiquidLevelReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
}

void onLiquidLevelReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42a0:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d42a2:	8803      	ldrh	r3, [r0, #0]
   d42a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Liquid level: %u ", twoByteValue);
   d42a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d42ac:	4903      	ldr	r1, [pc, #12]	; (d42bc <_Z21onLiquidLevelReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d42ae:	4804      	ldr	r0, [pc, #16]	; (d42c0 <_Z21onLiquidLevelReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d42b0:	f7ff ff78 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
}
   d42b4:	b003      	add	sp, #12
   d42b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d42ba:	bf00      	nop
   d42bc:	000db29e 	.word	0x000db29e
   d42c0:	2003e40c 	.word	0x2003e40c

000d42c4 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv>:


void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42c4:	b510      	push	{r4, lr}
    uint8_t humanSeen;

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
   d42c6:	7804      	ldrb	r4, [r0, #0]
    Log.info("Sensor 2 - Human detector: %u", humanSeen);
   d42c8:	490a      	ldr	r1, [pc, #40]	; (d42f4 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>)
   d42ca:	480b      	ldr	r0, [pc, #44]	; (d42f8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>)
   d42cc:	4622      	mov	r2, r4
   d42ce:	f7ff ff69 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    if(humanSeen == 0x00){
   d42d2:	b90c      	cbnz	r4, d42d8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>
        Log.info("Sensor 2 - Human lost...");
   d42d4:	4909      	ldr	r1, [pc, #36]	; (d42fc <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d42d6:	e002      	b.n	d42de <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1a>
    }
    else if (humanSeen == 0x01){
   d42d8:	2c01      	cmp	r4, #1
   d42da:	d104      	bne.n	d42e6 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
        Log.info("Sensor 2 - Human detected!");
   d42dc:	4908      	ldr	r1, [pc, #32]	; (d4300 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d42de:	4806      	ldr	r0, [pc, #24]	; (d42f8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>)
   d42e0:	f7ff ff60 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d42e4:	bd10      	pop	{r4, pc}
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
   d42e6:	4622      	mov	r2, r4
   d42e8:	4906      	ldr	r1, [pc, #24]	; (d4304 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d42ea:	4803      	ldr	r0, [pc, #12]	; (d42f8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>)
   d42ec:	f7ff ff5a 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d42f0:	bd10      	pop	{r4, pc}
   d42f2:	bf00      	nop
   d42f4:	000db2bb 	.word	0x000db2bb
   d42f8:	2003e40c 	.word	0x2003e40c
   d42fc:	000db2d9 	.word	0x000db2d9
   d4300:	000db2f2 	.word	0x000db2f2
   d4304:	000db30d 	.word	0x000db30d

000d4308 <_Z11publishMqttv>:
    wateringEventTimes.push_back((int32_t) Time.now());
    //flip the watering flag
    isWatering = !isWatering;
}

bool publishMqtt(){
   d4308:	b5f0      	push	{r4, r5, r6, r7, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d430a:	4d26      	ldr	r5, [pc, #152]	; (d43a4 <_Z11publishMqttv+0x9c>)
   d430c:	b085      	sub	sp, #20
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];
   d430e:	e895 000c 	ldmia.w	r5, {r2, r3}
   d4312:	1a9b      	subs	r3, r3, r2
   d4314:	109b      	asrs	r3, r3, #2
   d4316:	005b      	lsls	r3, r3, #1
   d4318:	3310      	adds	r3, #16
   d431a:	f023 0307 	bic.w	r3, r3, #7
    wateringEventTimes.push_back((int32_t) Time.now());
    //flip the watering flag
    isWatering = !isWatering;
}

bool publishMqtt(){
   d431e:	af02      	add	r7, sp, #8
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];
   d4320:	ebad 0d03 	sub.w	sp, sp, r3

    //add timestamp
    int32_t epochSeconds = Time.now();
   d4324:	f005 f87a 	bl	d941c <_ZN9TimeClass3nowEv>
   d4328:	f107 0308 	add.w	r3, r7, #8
   d432c:	4606      	mov	r6, r0
   d432e:	f843 0d04 	str.w	r0, [r3, #-4]!
    memcpy(buf, &epochSeconds, 4);
   d4332:	6818      	ldr	r0, [r3, #0]

    //add sensor values
    buf[4] = currentMoisture;
   d4334:	4b1c      	ldr	r3, [pc, #112]	; (d43a8 <_Z11publishMqttv+0xa0>)
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];

    //add timestamp
    int32_t epochSeconds = Time.now();
    memcpy(buf, &epochSeconds, 4);
   d4336:	9002      	str	r0, [sp, #8]
    isWatering = !isWatering;
}

bool publishMqtt(){
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];
   d4338:	ac02      	add	r4, sp, #8
    //add timestamp
    int32_t epochSeconds = Time.now();
    memcpy(buf, &epochSeconds, 4);

    //add sensor values
    buf[4] = currentMoisture;
   d433a:	781b      	ldrb	r3, [r3, #0]
   d433c:	7123      	strb	r3, [r4, #4]
    buf[5] = currentLight;
   d433e:	4b1b      	ldr	r3, [pc, #108]	; (d43ac <_Z11publishMqttv+0xa4>)
   d4340:	781b      	ldrb	r3, [r3, #0]
   d4342:	7163      	strb	r3, [r4, #5]
    buf[6] = currentTemperature;
   d4344:	4b1a      	ldr	r3, [pc, #104]	; (d43b0 <_Z11publishMqttv+0xa8>)
   d4346:	781b      	ldrb	r3, [r3, #0]
   d4348:	71a3      	strb	r3, [r4, #6]
    buf[7] = currentHumidity;
   d434a:	4b1a      	ldr	r3, [pc, #104]	; (d43b4 <_Z11publishMqttv+0xac>)
   d434c:	781b      	ldrb	r3, [r3, #0]
   d434e:	71e3      	strb	r3, [r4, #7]

    //add watering events' durations
    buf[8] = initWateringStatus;
   d4350:	4b19      	ldr	r3, [pc, #100]	; (d43b8 <_Z11publishMqttv+0xb0>)
   d4352:	781a      	ldrb	r2, [r3, #0]
   d4354:	7222      	strb	r2, [r4, #8]
   d4356:	f10d 0e11 	add.w	lr, sp, #17

    for(uint i = 0; i < wateringEventTimes.size(); i ++){
   d435a:	2200      	movs	r2, #0
   d435c:	6829      	ldr	r1, [r5, #0]
   d435e:	6868      	ldr	r0, [r5, #4]
   d4360:	1a40      	subs	r0, r0, r1
   d4362:	ebb2 0fa0 	cmp.w	r2, r0, asr #2
   d4366:	d20b      	bcs.n	d4380 <_Z11publishMqttv+0x78>
        uint16_t duration = (uint16_t) wateringEventTimes.at(i) - epochSeconds;
   d4368:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
   d436c:	f107 0108 	add.w	r1, r7, #8
   d4370:	1b80      	subs	r0, r0, r6
   d4372:	f821 0d06 	strh.w	r0, [r1, #-6]!
        memcpy(buf+9+(2*i), &duration, sizeof(duration));
   d4376:	8809      	ldrh	r1, [r1, #0]
   d4378:	f82e 1b02 	strh.w	r1, [lr], #2
    buf[7] = currentHumidity;

    //add watering events' durations
    buf[8] = initWateringStatus;

    for(uint i = 0; i < wateringEventTimes.size(); i ++){
   d437c:	3201      	adds	r2, #1
   d437e:	e7ed      	b.n	d435c <_Z11publishMqttv+0x54>
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
   d4380:	4a08      	ldr	r2, [pc, #32]	; (d43a4 <_Z11publishMqttv+0x9c>)
   d4382:	6051      	str	r1, [r2, #4]
    }

    //reset watering event log for next time period
    wateringEventTimes.clear();
    //save init watering status for next transmission
    if(isWatering){
   d4384:	4a0d      	ldr	r2, [pc, #52]	; (d43bc <_Z11publishMqttv+0xb4>)
   d4386:	7812      	ldrb	r2, [r2, #0]
   d4388:	b102      	cbz	r2, d438c <_Z11publishMqttv+0x84>
        initWateringStatus = 1;
   d438a:	2201      	movs	r2, #1
    }
    else{
        initWateringStatus = 0;
   d438c:	701a      	strb	r2, [r3, #0]
    }

    //publish buffer via MQTT
    return client.publish("elec4740g6", buf);;
   d438e:	2300      	movs	r3, #0
   d4390:	9300      	str	r3, [sp, #0]
   d4392:	4622      	mov	r2, r4
   d4394:	490a      	ldr	r1, [pc, #40]	; (d43c0 <_Z11publishMqttv+0xb8>)
   d4396:	480b      	ldr	r0, [pc, #44]	; (d43c4 <_Z11publishMqttv+0xbc>)
   d4398:	f001 fbce 	bl	d5b38 <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt>
}
   d439c:	370c      	adds	r7, #12
   d439e:	46bd      	mov	sp, r7
   d43a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d43a2:	bf00      	nop
   d43a4:	2003e3ac 	.word	0x2003e3ac
   d43a8:	2003d841 	.word	0x2003d841
   d43ac:	2003e390 	.word	0x2003e390
   d43b0:	2003d840 	.word	0x2003d840
   d43b4:	2003d830 	.word	0x2003d830
   d43b8:	2003d979 	.word	0x2003d979
   d43bc:	2003e3a8 	.word	0x2003e3a8
   d43c0:	000db355 	.word	0x000db355
   d43c4:	2003d8ec 	.word	0x2003d8ec

000d43c8 <_Z16forceMqttPublish6String>:
        return 0;
    }
    return 1;
}

int forceMqttPublish(String s){
   d43c8:	b508      	push	{r3, lr}
    if(publishMqtt()){
   d43ca:	f7ff ff9d 	bl	d4308 <_Z11publishMqttv>
        return 1;
    }
    return 0;
}
   d43ce:	bd08      	pop	{r3, pc}

000d43d0 <loop>:
    Particle.function("setTemperatureThreshold",setTemperatureThreshold);
    Particle.function("setAirHumidityThreshold",setAirHumidityThreshold);
    Particle.function("setSunnyLightThreshold",setSunnyLightThreshold);
}

void loop() {
   d43d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //TEST
    // client.publish("elec4740g6/data","test"); 

    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
   d43d4:	48a3      	ldr	r0, [pc, #652]	; (d4664 <loop+0x294>)
    Particle.function("setTemperatureThreshold",setTemperatureThreshold);
    Particle.function("setAirHumidityThreshold",setAirHumidityThreshold);
    Particle.function("setSunnyLightThreshold",setSunnyLightThreshold);
}

void loop() {
   d43d6:	b08e      	sub	sp, #56	; 0x38
    //TEST
    // client.publish("elec4740g6/data","test"); 

    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
   d43d8:	f003 f87c 	bl	d74d4 <_ZNK8particle13BlePeerDevice9connectedEv>
   d43dc:	2800      	cmp	r0, #0
   d43de:	f040 80dc 	bne.w	d459a <loop+0x1ca>
   d43e2:	48a1      	ldr	r0, [pc, #644]	; (d4668 <loop+0x298>)
   d43e4:	f003 f876 	bl	d74d4 <_ZNK8particle13BlePeerDevice9connectedEv>
   d43e8:	4605      	mov	r5, r0
   d43ea:	2800      	cmp	r0, #0
   d43ec:	f040 80d5 	bne.w	d459a <loop+0x1ca>
        // }
    }

    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d43f0:	499e      	ldr	r1, [pc, #632]	; (d466c <loop+0x29c>)
   d43f2:	489f      	ldr	r0, [pc, #636]	; (d4670 <loop+0x2a0>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d43f4:	4f9f      	ldr	r7, [pc, #636]	; (d4674 <loop+0x2a4>)
        // }
    }

    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d43f6:	f7ff fed5 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d43fa:	f003 f8cb 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43fe:	221e      	movs	r2, #30
   d4400:	499c      	ldr	r1, [pc, #624]	; (d4674 <loop+0x2a4>)
   d4402:	f003 f91d 	bl	d7640 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d4406:	4606      	mov	r6, r0
        for (int i = 0; i < count; i++) {
   d4408:	42b5      	cmp	r5, r6
   d440a:	f280 80be 	bge.w	d458a <loop+0x1ba>
   d440e:	2454      	movs	r4, #84	; 0x54
   d4410:	436c      	muls	r4, r5
            BleUuid foundService;
   d4412:	a804      	add	r0, sp, #16
   d4414:	f002 fc8e 	bl	d6d34 <_ZN8particle7BleUuidC1Ev>
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4418:	f104 0008 	add.w	r0, r4, #8
   d441c:	2201      	movs	r2, #1
   d441e:	a904      	add	r1, sp, #16
   d4420:	4438      	add	r0, r7
   d4422:	f002 feed 	bl	d7200 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>

            Log.info("Found a bluetooth device.");
   d4426:	4994      	ldr	r1, [pc, #592]	; (d4678 <loop+0x2a8>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4428:	4680      	mov	r8, r0

            Log.info("Found a bluetooth device.");
   d442a:	4891      	ldr	r0, [pc, #580]	; (d4670 <loop+0x2a0>)
   d442c:	f7ff feba 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4430:	443c      	add	r4, r7

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4432:	4992      	ldr	r1, [pc, #584]	; (d467c <loop+0x2ac>)
   d4434:	a809      	add	r0, sp, #36	; 0x24
   d4436:	f002 fac8 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Address: " + scanResults[i].address.toString());
   d443a:	2200      	movs	r2, #0
   d443c:	4621      	mov	r1, r4
   d443e:	4668      	mov	r0, sp
   d4440:	f002 fc67 	bl	d6d12 <_ZNK8particle10BleAddress8toStringEb>
   d4444:	4669      	mov	r1, sp
   d4446:	a809      	add	r0, sp, #36	; 0x24
   d4448:	f002 fb14 	bl	d6a74 <_ZplRK15StringSumHelperRK6String>
   d444c:	6801      	ldr	r1, [r0, #0]
   d444e:	4888      	ldr	r0, [pc, #544]	; (d4670 <loop+0x2a0>)
   d4450:	f7ff fea8 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4454:	4668      	mov	r0, sp
   d4456:	f002 fa71 	bl	d693c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d445a:	a809      	add	r0, sp, #36	; 0x24
   d445c:	f002 fa6e 	bl	d693c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4460:	4987      	ldr	r1, [pc, #540]	; (d4680 <loop+0x2b0>)
   d4462:	a809      	add	r0, sp, #36	; 0x24
   d4464:	f002 fab1 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Found UUID: " + foundService.toString());
   d4468:	2200      	movs	r2, #0
   d446a:	a904      	add	r1, sp, #16
   d446c:	4668      	mov	r0, sp
   d446e:	f002 fdf1 	bl	d7054 <_ZNK8particle7BleUuid8toStringEb>
   d4472:	4669      	mov	r1, sp
   d4474:	a809      	add	r0, sp, #36	; 0x24
   d4476:	f002 fafd 	bl	d6a74 <_ZplRK15StringSumHelperRK6String>
   d447a:	6801      	ldr	r1, [r0, #0]
   d447c:	487c      	ldr	r0, [pc, #496]	; (d4670 <loop+0x2a0>)
   d447e:	f7ff fe91 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4482:	4668      	mov	r0, sp
   d4484:	f002 fa5a 	bl	d693c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4488:	a809      	add	r0, sp, #36	; 0x24
   d448a:	f002 fa57 	bl	d693c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d448e:	497d      	ldr	r1, [pc, #500]	; (d4684 <loop+0x2b4>)
   d4490:	a809      	add	r0, sp, #36	; 0x24
   d4492:	f002 fa9a 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode1 UUID: " + sensorNode1ServiceUuid.toString());
   d4496:	2200      	movs	r2, #0
   d4498:	497b      	ldr	r1, [pc, #492]	; (d4688 <loop+0x2b8>)
   d449a:	4668      	mov	r0, sp
   d449c:	f002 fdda 	bl	d7054 <_ZNK8particle7BleUuid8toStringEb>
   d44a0:	4669      	mov	r1, sp
   d44a2:	a809      	add	r0, sp, #36	; 0x24
   d44a4:	f002 fae6 	bl	d6a74 <_ZplRK15StringSumHelperRK6String>
   d44a8:	6801      	ldr	r1, [r0, #0]
   d44aa:	4871      	ldr	r0, [pc, #452]	; (d4670 <loop+0x2a0>)
   d44ac:	f7ff fe7a 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d44b0:	4668      	mov	r0, sp
   d44b2:	f002 fa43 	bl	d693c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44b6:	a809      	add	r0, sp, #36	; 0x24
   d44b8:	f002 fa40 	bl	d693c <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d44bc:	4973      	ldr	r1, [pc, #460]	; (d468c <loop+0x2bc>)
   d44be:	a809      	add	r0, sp, #36	; 0x24
   d44c0:	f002 fa83 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode2 UUID: " + sensorNode2ServiceUuid.toString());
   d44c4:	2200      	movs	r2, #0
   d44c6:	4972      	ldr	r1, [pc, #456]	; (d4690 <loop+0x2c0>)
   d44c8:	4668      	mov	r0, sp
   d44ca:	f002 fdc3 	bl	d7054 <_ZNK8particle7BleUuid8toStringEb>
   d44ce:	4669      	mov	r1, sp
   d44d0:	a809      	add	r0, sp, #36	; 0x24
   d44d2:	f002 facf 	bl	d6a74 <_ZplRK15StringSumHelperRK6String>
   d44d6:	6801      	ldr	r1, [r0, #0]
   d44d8:	4865      	ldr	r0, [pc, #404]	; (d4670 <loop+0x2a0>)
   d44da:	f7ff fe63 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d44de:	4668      	mov	r0, sp
   d44e0:	f002 fa2c 	bl	d693c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d44e4:	a809      	add	r0, sp, #36	; 0x24
   d44e6:	f002 fa29 	bl	d693c <_ZN6StringD1Ev>

            //Check if it matches UUID for sensor node 1
            if (len > 0 && foundService == sensorNode1ServiceUuid){
   d44ea:	f1b8 0f00 	cmp.w	r8, #0
   d44ee:	d04a      	beq.n	d4586 <loop+0x1b6>
   d44f0:	4965      	ldr	r1, [pc, #404]	; (d4688 <loop+0x2b8>)
   d44f2:	a804      	add	r0, sp, #16
   d44f4:	f002 fcbe 	bl	d6e74 <_ZNK8particle7BleUuideqERKS0_>
   d44f8:	2800      	cmp	r0, #0
   d44fa:	d064      	beq.n	d45c6 <loop+0x1f6>
                Log.info("Found sensor node 1.");
   d44fc:	485c      	ldr	r0, [pc, #368]	; (d4670 <loop+0x2a0>)
   d44fe:	4965      	ldr	r1, [pc, #404]	; (d4694 <loop+0x2c4>)
   d4500:	f7ff fe50 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode1.connected() == false){
   d4504:	4857      	ldr	r0, [pc, #348]	; (d4664 <loop+0x294>)
   d4506:	f002 ffe5 	bl	d74d4 <_ZNK8particle13BlePeerDevice9connectedEv>
   d450a:	2800      	cmp	r0, #0
   d450c:	d154      	bne.n	d45b8 <loop+0x1e8>
                    sensorNode1 = BLE.connect(scanResults[i].address);
   d450e:	f003 f841 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4512:	2301      	movs	r3, #1
   d4514:	4622      	mov	r2, r4
   d4516:	4601      	mov	r1, r0
   d4518:	a809      	add	r0, sp, #36	; 0x24
   d451a:	f003 fd43 	bl	d7fa4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d451e:	a909      	add	r1, sp, #36	; 0x24
   d4520:	4850      	ldr	r0, [pc, #320]	; (d4664 <loop+0x294>)
   d4522:	f003 f9ba 	bl	d789a <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4526:	a809      	add	r0, sp, #36	; 0x24
   d4528:	f003 f8da 	bl	d76e0 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode1.connected()){
   d452c:	484d      	ldr	r0, [pc, #308]	; (d4664 <loop+0x294>)
   d452e:	f002 ffd1 	bl	d74d4 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4532:	2800      	cmp	r0, #0
   d4534:	d03e      	beq.n	d45b4 <loop+0x1e4>
                        Log.info("Successfully connected to sensor node 1!");
   d4536:	4958      	ldr	r1, [pc, #352]	; (d4698 <loop+0x2c8>)
   d4538:	484d      	ldr	r0, [pc, #308]	; (d4670 <loop+0x2a0>)
   d453a:	f7ff fe33 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode1.getCharacteristicByUUID(temperatureSensorCharacteristic, "29fba3f5-4ce8-46bc-8d75-77806db22c31");
   d453e:	4957      	ldr	r1, [pc, #348]	; (d469c <loop+0x2cc>)
   d4540:	a809      	add	r0, sp, #36	; 0x24
   d4542:	f002 fd0d 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d4546:	aa09      	add	r2, sp, #36	; 0x24
   d4548:	4955      	ldr	r1, [pc, #340]	; (d46a0 <loop+0x2d0>)
   d454a:	4846      	ldr	r0, [pc, #280]	; (d4664 <loop+0x294>)
   d454c:	f003 f981 	bl	d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
   d4550:	4954      	ldr	r1, [pc, #336]	; (d46a4 <loop+0x2d4>)
   d4552:	a809      	add	r0, sp, #36	; 0x24
   d4554:	f002 fd04 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d4558:	aa09      	add	r2, sp, #36	; 0x24
   d455a:	4953      	ldr	r1, [pc, #332]	; (d46a8 <loop+0x2d8>)
   d455c:	4841      	ldr	r0, [pc, #260]	; (d4664 <loop+0x294>)
   d455e:	f003 f978 	bl	d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
   d4562:	4952      	ldr	r1, [pc, #328]	; (d46ac <loop+0x2dc>)
   d4564:	a809      	add	r0, sp, #36	; 0x24
   d4566:	f002 fcfb 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d456a:	aa09      	add	r2, sp, #36	; 0x24
   d456c:	4950      	ldr	r1, [pc, #320]	; (d46b0 <loop+0x2e0>)
   d456e:	483d      	ldr	r0, [pc, #244]	; (d4664 <loop+0x294>)
   d4570:	f003 f96f 	bl	d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(moistureSensorCharacteristic, "ea5248a4-43cc-4198-a4aa-79200a750835");
   d4574:	494f      	ldr	r1, [pc, #316]	; (d46b4 <loop+0x2e4>)
   d4576:	a809      	add	r0, sp, #36	; 0x24
   d4578:	f002 fcf2 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d457c:	494e      	ldr	r1, [pc, #312]	; (d46b8 <loop+0x2e8>)
   d457e:	4839      	ldr	r0, [pc, #228]	; (d4664 <loop+0x294>)
   d4580:	aa09      	add	r2, sp, #36	; 0x24
                        Log.info("Successfully connected to sensor node 2!");
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(rainsteamSensorCharacteristic, "bc7f18d9-2c43-408e-be25-62f40645987c");
                        sensorNode2.getCharacteristicByUUID(liquidSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d4582:	f003 f966 	bl	d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>

    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
        for (int i = 0; i < count; i++) {
   d4586:	3501      	adds	r5, #1
   d4588:	e73e      	b.n	d4408 <loop+0x38>
                    Log.info("Sensor node 2 already connected.");
                }
            }
        }

        if (count > 0) {
   d458a:	2e00      	cmp	r6, #0
   d458c:	dd67      	ble.n	d465e <loop+0x28e>
            Log.info("%d devices found", count);
   d458e:	4632      	mov	r2, r6
   d4590:	494a      	ldr	r1, [pc, #296]	; (d46bc <loop+0x2ec>)
   d4592:	4837      	ldr	r0, [pc, #220]	; (d4670 <loop+0x2a0>)
   d4594:	f7ff fe06 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        }
    }
}
   d4598:	e061      	b.n	d465e <loop+0x28e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d459a:	f001 fe89 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
    // client.publish("elec4740g6/data","test"); 

    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d459e:	4b48      	ldr	r3, [pc, #288]	; (d46c0 <loop+0x2f0>)
   d45a0:	6018      	str	r0, [r3, #0]

        //check if it's time for an MQTT publish
        if(loopStart - lastPublishTime >= PUBLISH_DELAY){
   d45a2:	4b48      	ldr	r3, [pc, #288]	; (d46c4 <loop+0x2f4>)
   d45a4:	681b      	ldr	r3, [r3, #0]
   d45a6:	1ac0      	subs	r0, r0, r3
   d45a8:	4b47      	ldr	r3, [pc, #284]	; (d46c8 <loop+0x2f8>)
   d45aa:	4298      	cmp	r0, r3
   d45ac:	d957      	bls.n	d465e <loop+0x28e>
            publishMqtt();
   d45ae:	f7ff feab 	bl	d4308 <_Z11publishMqttv>
   d45b2:	e054      	b.n	d465e <loop+0x28e>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
                        sensorNode1.getCharacteristicByUUID(moistureSensorCharacteristic, "ea5248a4-43cc-4198-a4aa-79200a750835");
                    }
                    else{
                        Log.info("Failed to connect to sensor node 1.");
   d45b4:	4945      	ldr	r1, [pc, #276]	; (d46cc <loop+0x2fc>)
   d45b6:	e002      	b.n	d45be <loop+0x1ee>
                    }
                }
                else{
                    Log.info("Sensor node 1 already connected.");
   d45b8:	4945      	ldr	r1, [pc, #276]	; (d46d0 <loop+0x300>)
   d45ba:	e000      	b.n	d45be <loop+0x1ee>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");

                    }
                    else{
                        Log.info("Failed to connect to sensor node 2.");
   d45bc:	4945      	ldr	r1, [pc, #276]	; (d46d4 <loop+0x304>)
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d45be:	482c      	ldr	r0, [pc, #176]	; (d4670 <loop+0x2a0>)
   d45c0:	f7ff fdf0 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d45c4:	e7df      	b.n	d4586 <loop+0x1b6>
                    Log.info("Sensor node 1 already connected.");
                }
            }

            //Check if it matches UUID for sensor node 2
            else if (len > 0 && foundService == sensorNode2ServiceUuid){
   d45c6:	4932      	ldr	r1, [pc, #200]	; (d4690 <loop+0x2c0>)
   d45c8:	a804      	add	r0, sp, #16
   d45ca:	f002 fc53 	bl	d6e74 <_ZNK8particle7BleUuideqERKS0_>
   d45ce:	2800      	cmp	r0, #0
   d45d0:	d0d9      	beq.n	d4586 <loop+0x1b6>
                Log.info("Found sensor node 2.");
   d45d2:	4827      	ldr	r0, [pc, #156]	; (d4670 <loop+0x2a0>)
   d45d4:	4940      	ldr	r1, [pc, #256]	; (d46d8 <loop+0x308>)
   d45d6:	f7ff fde5 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode2.connected() == false){
   d45da:	4823      	ldr	r0, [pc, #140]	; (d4668 <loop+0x298>)
   d45dc:	f002 ff7a 	bl	d74d4 <_ZNK8particle13BlePeerDevice9connectedEv>
   d45e0:	2800      	cmp	r0, #0
   d45e2:	d13a      	bne.n	d465a <loop+0x28a>
                    sensorNode2 = BLE.connect(scanResults[i].address);
   d45e4:	f002 ffd6 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45e8:	2301      	movs	r3, #1
   d45ea:	4622      	mov	r2, r4
   d45ec:	4601      	mov	r1, r0
   d45ee:	a809      	add	r0, sp, #36	; 0x24
   d45f0:	f003 fcd8 	bl	d7fa4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d45f4:	a909      	add	r1, sp, #36	; 0x24
   d45f6:	481c      	ldr	r0, [pc, #112]	; (d4668 <loop+0x298>)
   d45f8:	f003 f94f 	bl	d789a <_ZN8particle13BlePeerDeviceaSERKS0_>
   d45fc:	a809      	add	r0, sp, #36	; 0x24
   d45fe:	f003 f86f 	bl	d76e0 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode2.connected()){
   d4602:	4819      	ldr	r0, [pc, #100]	; (d4668 <loop+0x298>)
   d4604:	f002 ff66 	bl	d74d4 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4608:	2800      	cmp	r0, #0
   d460a:	d0d7      	beq.n	d45bc <loop+0x1ec>
                        Log.info("Successfully connected to sensor node 2!");
   d460c:	4933      	ldr	r1, [pc, #204]	; (d46dc <loop+0x30c>)
   d460e:	4818      	ldr	r0, [pc, #96]	; (d4670 <loop+0x2a0>)
   d4610:	f7ff fdc8 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(rainsteamSensorCharacteristic, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d4614:	4932      	ldr	r1, [pc, #200]	; (d46e0 <loop+0x310>)
   d4616:	a809      	add	r0, sp, #36	; 0x24
   d4618:	f002 fca2 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d461c:	aa09      	add	r2, sp, #36	; 0x24
   d461e:	4931      	ldr	r1, [pc, #196]	; (d46e4 <loop+0x314>)
   d4620:	4811      	ldr	r0, [pc, #68]	; (d4668 <loop+0x298>)
   d4622:	f003 f916 	bl	d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(liquidSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
   d4626:	4930      	ldr	r1, [pc, #192]	; (d46e8 <loop+0x318>)
   d4628:	a809      	add	r0, sp, #36	; 0x24
   d462a:	f002 fc99 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d462e:	aa09      	add	r2, sp, #36	; 0x24
   d4630:	492e      	ldr	r1, [pc, #184]	; (d46ec <loop+0x31c>)
   d4632:	480d      	ldr	r0, [pc, #52]	; (d4668 <loop+0x298>)
   d4634:	f003 f90d 	bl	d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
   d4638:	492d      	ldr	r1, [pc, #180]	; (d46f0 <loop+0x320>)
   d463a:	a809      	add	r0, sp, #36	; 0x24
   d463c:	f002 fc90 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d4640:	aa09      	add	r2, sp, #36	; 0x24
   d4642:	492c      	ldr	r1, [pc, #176]	; (d46f4 <loop+0x324>)
   d4644:	4808      	ldr	r0, [pc, #32]	; (d4668 <loop+0x298>)
   d4646:	f003 f904 	bl	d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d464a:	492b      	ldr	r1, [pc, #172]	; (d46f8 <loop+0x328>)
   d464c:	a809      	add	r0, sp, #36	; 0x24
   d464e:	f002 fc87 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
   d4652:	aa09      	add	r2, sp, #36	; 0x24
   d4654:	4929      	ldr	r1, [pc, #164]	; (d46fc <loop+0x32c>)
   d4656:	4804      	ldr	r0, [pc, #16]	; (d4668 <loop+0x298>)
   d4658:	e793      	b.n	d4582 <loop+0x1b2>
                    else{
                        Log.info("Failed to connect to sensor node 2.");
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d465a:	4929      	ldr	r1, [pc, #164]	; (d4700 <loop+0x330>)
   d465c:	e7af      	b.n	d45be <loop+0x1ee>

        if (count > 0) {
            Log.info("%d devices found", count);
        }
    }
}
   d465e:	b00e      	add	sp, #56	; 0x38
   d4660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4664:	2003e39c 	.word	0x2003e39c
   d4668:	2003d970 	.word	0x2003d970
   d466c:	000db5cc 	.word	0x000db5cc
   d4670:	2003e40c 	.word	0x2003e40c
   d4674:	2003d97c 	.word	0x2003d97c
   d4678:	000db360 	.word	0x000db360
   d467c:	000db37a 	.word	0x000db37a
   d4680:	000db384 	.word	0x000db384
   d4684:	000db391 	.word	0x000db391
   d4688:	2003d940 	.word	0x2003d940
   d468c:	000db3a4 	.word	0x000db3a4
   d4690:	2003d8c4 	.word	0x2003d8c4
   d4694:	000db5dd 	.word	0x000db5dd
   d4698:	000db3b7 	.word	0x000db3b7
   d469c:	000db3e0 	.word	0x000db3e0
   d46a0:	2003d960 	.word	0x2003d960
   d46a4:	000db405 	.word	0x000db405
   d46a8:	2003e394 	.word	0x2003e394
   d46ac:	000db42a 	.word	0x000db42a
   d46b0:	2003d8d8 	.word	0x2003d8d8
   d46b4:	000db44f 	.word	0x000db44f
   d46b8:	2003d968 	.word	0x2003d968
   d46bc:	000db5bb 	.word	0x000db5bb
   d46c0:	2003d95c 	.word	0x2003d95c
   d46c4:	2003e3a4 	.word	0x2003e3a4
   d46c8:	000dbb9f 	.word	0x000dbb9f
   d46cc:	000db474 	.word	0x000db474
   d46d0:	000db498 	.word	0x000db498
   d46d4:	000db576 	.word	0x000db576
   d46d8:	000db5f2 	.word	0x000db5f2
   d46dc:	000db4b9 	.word	0x000db4b9
   d46e0:	000db4e2 	.word	0x000db4e2
   d46e4:	2003e364 	.word	0x2003e364
   d46e8:	000db507 	.word	0x000db507
   d46ec:	2003e354 	.word	0x2003e354
   d46f0:	000db52c 	.word	0x000db52c
   d46f4:	2003e35c 	.word	0x2003e35c
   d46f8:	000db551 	.word	0x000db551
   d46fc:	2003d954 	.word	0x2003d954
   d4700:	000db59a 	.word	0x000db59a

000d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4704:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4706:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4708:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d470a:	b17c      	cbz	r4, d472c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d470c:	6863      	ldr	r3, [r4, #4]
   d470e:	3b01      	subs	r3, #1
   d4710:	6063      	str	r3, [r4, #4]
   d4712:	b95b      	cbnz	r3, d472c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d4714:	6823      	ldr	r3, [r4, #0]
   d4716:	4620      	mov	r0, r4
   d4718:	689b      	ldr	r3, [r3, #8]
   d471a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d471c:	68a3      	ldr	r3, [r4, #8]
   d471e:	3b01      	subs	r3, #1
   d4720:	60a3      	str	r3, [r4, #8]
   d4722:	b91b      	cbnz	r3, d472c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4724:	6823      	ldr	r3, [r4, #0]
   d4726:	4620      	mov	r0, r4
   d4728:	68db      	ldr	r3, [r3, #12]
   d472a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d472c:	4628      	mov	r0, r5
   d472e:	bd38      	pop	{r3, r4, r5, pc}

000d4730 <_Z11mqttFailure17MQTT5_REASON_CODE>:
MQTT5 client;
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();

//functions used to handle MQTT
void mqttFailure(MQTT5_REASON_CODE reason) {
   d4730:	b5f0      	push	{r4, r5, r6, r7, lr}
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
   d4732:	4d11      	ldr	r5, [pc, #68]	; (d4778 <_Z11mqttFailure17MQTT5_REASON_CODE+0x48>)
   d4734:	2100      	movs	r1, #0
MQTT5 client;
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();

//functions used to handle MQTT
void mqttFailure(MQTT5_REASON_CODE reason) {
   d4736:	b085      	sub	sp, #20
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
   d4738:	4603      	mov	r3, r0
   d473a:	462a      	mov	r2, r5
MQTT5 client;
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();

//functions used to handle MQTT
void mqttFailure(MQTT5_REASON_CODE reason) {
   d473c:	4606      	mov	r6, r0
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
   d473e:	4608      	mov	r0, r1
   d4740:	f002 f86c 	bl	d681c <snprintf>
    buf = (char *)malloc(sz + 1); /* make sure you check for != NULL in real code */
   d4744:	1c44      	adds	r4, r0, #1
   d4746:	4620      	mov	r0, r4
   d4748:	f002 f850 	bl	d67ec <malloc>
    snprintf(buf, sz+1, "Failure due to reason %d", (int) reason);
   d474c:	4633      	mov	r3, r6
   d474e:	462a      	mov	r2, r5
   d4750:	4621      	mov	r1, r4
void mqttFailure(MQTT5_REASON_CODE reason) {
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
    buf = (char *)malloc(sz + 1); /* make sure you check for != NULL in real code */
   d4752:	4607      	mov	r7, r0
    snprintf(buf, sz+1, "Failure due to reason %d", (int) reason);
   d4754:	f002 f862 	bl	d681c <snprintf>
   d4758:	4b08      	ldr	r3, [pc, #32]	; (d477c <_Z11mqttFailure17MQTT5_REASON_CODE+0x4c>)
   d475a:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d475c:	f88d 3000 	strb.w	r3, [sp]
   d4760:	2200      	movs	r2, #0
   d4762:	233c      	movs	r3, #60	; 0x3c
   d4764:	4639      	mov	r1, r7
   d4766:	a802      	add	r0, sp, #8
   d4768:	f005 f8b8 	bl	d98dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d476c:	a803      	add	r0, sp, #12
   d476e:	f7ff ffc9 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    
   Particle.publish(buf, PRIVATE);
}
   d4772:	b005      	add	sp, #20
   d4774:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4776:	bf00      	nop
   d4778:	000db607 	.word	0x000db607
   d477c:	2003d978 	.word	0x2003d978

000d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4780:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4782:	6804      	ldr	r4, [r0, #0]
   d4784:	6843      	ldr	r3, [r0, #4]
   d4786:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4788:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d478a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d478e:	42a6      	cmp	r6, r4
   d4790:	d004      	beq.n	d479c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4792:	4620      	mov	r0, r4
   d4794:	f002 f8d2 	bl	d693c <_ZN6StringD1Ev>
   d4798:	3414      	adds	r4, #20
   d479a:	e7f8      	b.n	d478e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d479c:	6828      	ldr	r0, [r5, #0]
   d479e:	f002 f82d 	bl	d67fc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d47a2:	4628      	mov	r0, r5
   d47a4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d47a8:	4602      	mov	r2, r0
   d47aa:	4801      	ldr	r0, [pc, #4]	; (d47b0 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d47ac:	f004 bf86 	b.w	d96bc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d47b0:	000d9691 	.word	0x000d9691

000d47b4 <setup>:
int setSunnyLightThreshold(String threshold){
    SUNNY_LIGHT_THRESHOLD = threshold.toInt();
    return 1;
}

void setup() {
   d47b4:	b530      	push	{r4, r5, lr}

    //setup MQTT
    client.onConnectFailed(mqttFailure);
   d47b6:	4948      	ldr	r1, [pc, #288]	; (d48d8 <setup+0x124>)
   d47b8:	4848      	ldr	r0, [pc, #288]	; (d48dc <setup+0x128>)
    client.onPublishFailed(mqttFailure);
    client.onSubscribeFailed(mqttFailure);
    client.onPacketReceived(mqttPacketReceived);

    if (client.connect("test.mosquitto.org", 1883, "client123") && client.awaitPackets()) {
   d47ba:	4d49      	ldr	r5, [pc, #292]	; (d48e0 <setup+0x12c>)
int setSunnyLightThreshold(String threshold){
    SUNNY_LIGHT_THRESHOLD = threshold.toInt();
    return 1;
}

void setup() {
   d47bc:	b08b      	sub	sp, #44	; 0x2c

    //setup MQTT
    client.onConnectFailed(mqttFailure);
   d47be:	f001 fd2f 	bl	d6220 <_ZN5MQTT515onConnectFailedEPFv17MQTT5_REASON_CODEE>
    client.onPublishFailed(mqttFailure);
   d47c2:	4945      	ldr	r1, [pc, #276]	; (d48d8 <setup+0x124>)
   d47c4:	4845      	ldr	r0, [pc, #276]	; (d48dc <setup+0x128>)
   d47c6:	f001 fd2d 	bl	d6224 <_ZN5MQTT515onPublishFailedEPFv17MQTT5_REASON_CODEE>
    client.onSubscribeFailed(mqttFailure);
   d47ca:	4943      	ldr	r1, [pc, #268]	; (d48d8 <setup+0x124>)
   d47cc:	4843      	ldr	r0, [pc, #268]	; (d48dc <setup+0x128>)
   d47ce:	f001 fd2b 	bl	d6228 <_ZN5MQTT517onSubscribeFailedEPFv17MQTT5_REASON_CODEE>
    client.onPacketReceived(mqttPacketReceived);
   d47d2:	4944      	ldr	r1, [pc, #272]	; (d48e4 <setup+0x130>)
   d47d4:	4841      	ldr	r0, [pc, #260]	; (d48dc <setup+0x128>)
   d47d6:	f001 fd29 	bl	d622c <_ZN5MQTT516onPacketReceivedEPFvPcPhtb9MQTT5_QOSbE>

    if (client.connect("test.mosquitto.org", 1883, "client123") && client.awaitPackets()) {
   d47da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d47dc:	466c      	mov	r4, sp
   d47de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d47e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d47e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   d47e8:	4b3f      	ldr	r3, [pc, #252]	; (d48e8 <setup+0x134>)
   d47ea:	4940      	ldr	r1, [pc, #256]	; (d48ec <setup+0x138>)
   d47ec:	483b      	ldr	r0, [pc, #236]	; (d48dc <setup+0x128>)
   d47ee:	4d40      	ldr	r5, [pc, #256]	; (d48f0 <setup+0x13c>)
   d47f0:	f240 725b 	movw	r2, #1883	; 0x75b
   d47f4:	f001 fcee 	bl	d61d4 <_ZN5MQTT57connectEPKctS1_19MQTT5ConnectOptions>
   d47f8:	b128      	cbz	r0, d4806 <setup+0x52>
   d47fa:	f241 3188 	movw	r1, #5000	; 0x1388
   d47fe:	4837      	ldr	r0, [pc, #220]	; (d48dc <setup+0x128>)
   d4800:	f001 fb3e 	bl	d5e80 <_ZN5MQTT512awaitPacketsEm>
   d4804:	b930      	cbnz	r0, d4814 <setup+0x60>
   d4806:	782b      	ldrb	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4808:	f88d 3000 	strb.w	r3, [sp]
   d480c:	2200      	movs	r2, #0
   d480e:	233c      	movs	r3, #60	; 0x3c
   d4810:	4938      	ldr	r1, [pc, #224]	; (d48f4 <setup+0x140>)
   d4812:	e00d      	b.n	d4830 <setup+0x7c>
       client.publish("elec4740g6/data", "Hello world");
   d4814:	2400      	movs	r4, #0
   d4816:	4623      	mov	r3, r4
   d4818:	4a37      	ldr	r2, [pc, #220]	; (d48f8 <setup+0x144>)
   d481a:	4938      	ldr	r1, [pc, #224]	; (d48fc <setup+0x148>)
   d481c:	9400      	str	r4, [sp, #0]
   d481e:	482f      	ldr	r0, [pc, #188]	; (d48dc <setup+0x128>)
   d4820:	f001 f98a 	bl	d5b38 <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt>
   d4824:	782b      	ldrb	r3, [r5, #0]
   d4826:	4936      	ldr	r1, [pc, #216]	; (d4900 <setup+0x14c>)
   d4828:	f88d 3000 	strb.w	r3, [sp]
   d482c:	4622      	mov	r2, r4
   d482e:	233c      	movs	r3, #60	; 0x3c
   d4830:	a808      	add	r0, sp, #32
   d4832:	f005 f853 	bl	d98dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4836:	a809      	add	r0, sp, #36	; 0x24
   d4838:	f7ff ff64 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    else{
        Particle.publish("MQTT connection failure :(", PRIVATE);
    }

    const uint8_t val = 0x01;
   d483c:	2201      	movs	r2, #1
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d483e:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d4842:	a808      	add	r0, sp, #32
    }
    else{
        Particle.publish("MQTT connection failure :(", PRIVATE);
    }

    const uint8_t val = 0x01;
   d4844:	f88d 2020 	strb.w	r2, [sp, #32]
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d4848:	f001 fea4 	bl	d6594 <dct_write_app_data>
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning

    BLE.on();
   d484c:	f002 fea2 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4850:	f002 fee6 	bl	d7620 <_ZNK8particle14BleLocalDevice2onEv>
    
    
    //map functions to be called whenever new data is received for a characteristic
    temperatureSensorCharacteristic.onDataReceived(onTemperatureReceived, NULL);
   d4854:	2200      	movs	r2, #0
   d4856:	492b      	ldr	r1, [pc, #172]	; (d4904 <setup+0x150>)
   d4858:	482b      	ldr	r0, [pc, #172]	; (d4908 <setup+0x154>)
   d485a:	f002 fdcd 	bl	d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humiditySensorCharacteristic.onDataReceived(onHumidityReceived, NULL);
   d485e:	2200      	movs	r2, #0
   d4860:	492a      	ldr	r1, [pc, #168]	; (d490c <setup+0x158>)
   d4862:	482b      	ldr	r0, [pc, #172]	; (d4910 <setup+0x15c>)
   d4864:	f002 fdc8 	bl	d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    lightSensorCharacteristic.onDataReceived(onLightReceived, NULL);
   d4868:	2200      	movs	r2, #0
   d486a:	492a      	ldr	r1, [pc, #168]	; (d4914 <setup+0x160>)
   d486c:	482a      	ldr	r0, [pc, #168]	; (d4918 <setup+0x164>)
   d486e:	f002 fdc3 	bl	d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    moistureSensorCharacteristic.onDataReceived(onMoistureReceived, NULL);
   d4872:	2200      	movs	r2, #0
   d4874:	4929      	ldr	r1, [pc, #164]	; (d491c <setup+0x168>)
   d4876:	482a      	ldr	r0, [pc, #168]	; (d4920 <setup+0x16c>)
   d4878:	f002 fdbe 	bl	d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

    rainsteamSensorCharacteristic.onDataReceived(onRainsteamReceived, NULL);
   d487c:	2200      	movs	r2, #0
   d487e:	4929      	ldr	r1, [pc, #164]	; (d4924 <setup+0x170>)
   d4880:	4829      	ldr	r0, [pc, #164]	; (d4928 <setup+0x174>)
   d4882:	f002 fdb9 	bl	d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    liquidSensorCharacteristic.onDataReceived(onLiquidLevelReceived, NULL);
   d4886:	2200      	movs	r2, #0
   d4888:	4928      	ldr	r1, [pc, #160]	; (d492c <setup+0x178>)
   d488a:	4829      	ldr	r0, [pc, #164]	; (d4930 <setup+0x17c>)
   d488c:	f002 fdb4 	bl	d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
   d4890:	2200      	movs	r2, #0
   d4892:	4928      	ldr	r1, [pc, #160]	; (d4934 <setup+0x180>)
   d4894:	4828      	ldr	r0, [pc, #160]	; (d4938 <setup+0x184>)
   d4896:	f002 fdaf 	bl	d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    // commented out, as this value sends from here rather than receives
    // solenoidVoltageCharacteristic.onDataReceived(onSolenoidReceived, NULL);

    //setup particle functions
    Particle.function("sprinklerSwitch",sprinklerSwitch);
   d489a:	4928      	ldr	r1, [pc, #160]	; (d493c <setup+0x188>)
   d489c:	4828      	ldr	r0, [pc, #160]	; (d4940 <setup+0x18c>)
   d489e:	f7ff ff83 	bl	d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("forceMqttPublish", forceMqttPublish);
   d48a2:	4928      	ldr	r1, [pc, #160]	; (d4944 <setup+0x190>)
   d48a4:	4828      	ldr	r0, [pc, #160]	; (d4948 <setup+0x194>)
   d48a6:	f7ff ff7f 	bl	d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setLowSoilMoistureThreshold",setLowSoilMoistureThreshold);
   d48aa:	4928      	ldr	r1, [pc, #160]	; (d494c <setup+0x198>)
   d48ac:	4828      	ldr	r0, [pc, #160]	; (d4950 <setup+0x19c>)
   d48ae:	f7ff ff7b 	bl	d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setHighSoilMoistureThreshold",setHighSoilMoistureThreshold);
   d48b2:	4928      	ldr	r1, [pc, #160]	; (d4954 <setup+0x1a0>)
   d48b4:	4828      	ldr	r0, [pc, #160]	; (d4958 <setup+0x1a4>)
   d48b6:	f7ff ff77 	bl	d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setTemperatureThreshold",setTemperatureThreshold);
   d48ba:	4928      	ldr	r1, [pc, #160]	; (d495c <setup+0x1a8>)
   d48bc:	4828      	ldr	r0, [pc, #160]	; (d4960 <setup+0x1ac>)
   d48be:	f7ff ff73 	bl	d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setAirHumidityThreshold",setAirHumidityThreshold);
   d48c2:	4928      	ldr	r1, [pc, #160]	; (d4964 <setup+0x1b0>)
   d48c4:	4828      	ldr	r0, [pc, #160]	; (d4968 <setup+0x1b4>)
   d48c6:	f7ff ff6f 	bl	d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setSunnyLightThreshold",setSunnyLightThreshold);
   d48ca:	4928      	ldr	r1, [pc, #160]	; (d496c <setup+0x1b8>)
   d48cc:	4828      	ldr	r0, [pc, #160]	; (d4970 <setup+0x1bc>)
   d48ce:	f7ff ff6b 	bl	d47a8 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
}
   d48d2:	b00b      	add	sp, #44	; 0x2c
   d48d4:	bd30      	pop	{r4, r5, pc}
   d48d6:	bf00      	nop
   d48d8:	000d4731 	.word	0x000d4731
   d48dc:	2003d8ec 	.word	0x2003d8ec
   d48e0:	000db794 	.word	0x000db794
   d48e4:	000d41d5 	.word	0x000d41d5
   d48e8:	000db620 	.word	0x000db620
   d48ec:	000db62a 	.word	0x000db62a
   d48f0:	2003d978 	.word	0x2003d978
   d48f4:	000db6de 	.word	0x000db6de
   d48f8:	000db6f9 	.word	0x000db6f9
   d48fc:	000db705 	.word	0x000db705
   d4900:	000db715 	.word	0x000db715
   d4904:	000d41ed 	.word	0x000d41ed
   d4908:	2003d960 	.word	0x2003d960
   d490c:	000d4211 	.word	0x000d4211
   d4910:	2003e394 	.word	0x2003e394
   d4914:	000d425d 	.word	0x000d425d
   d4918:	2003d8d8 	.word	0x2003d8d8
   d491c:	000d4231 	.word	0x000d4231
   d4920:	2003d968 	.word	0x2003d968
   d4924:	000d4289 	.word	0x000d4289
   d4928:	2003e364 	.word	0x2003e364
   d492c:	000d42a1 	.word	0x000d42a1
   d4930:	2003e354 	.word	0x2003e354
   d4934:	000d42c5 	.word	0x000d42c5
   d4938:	2003e35c 	.word	0x2003e35c
   d493c:	000d4b09 	.word	0x000d4b09
   d4940:	000db63d 	.word	0x000db63d
   d4944:	000d43c9 	.word	0x000d43c9
   d4948:	000db64d 	.word	0x000db64d
   d494c:	000d40d9 	.word	0x000d40d9
   d4950:	000db65e 	.word	0x000db65e
   d4954:	000d40ed 	.word	0x000d40ed
   d4958:	000db67a 	.word	0x000db67a
   d495c:	000d4101 	.word	0x000d4101
   d4960:	000db697 	.word	0x000db697
   d4964:	000d4115 	.word	0x000d4115
   d4968:	000db6af 	.word	0x000db6af
   d496c:	000d4129 	.word	0x000d4129
   d4970:	000db6c7 	.word	0x000db6c7

000d4974 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4974:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4976:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4978:	4606      	mov	r6, r0
   d497a:	460c      	mov	r4, r1
   d497c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d497e:	d916      	bls.n	d49ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4980:	4290      	cmp	r0, r2
   d4982:	d215      	bcs.n	d49b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4984:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4988:	1a6c      	subs	r4, r5, r1
   d498a:	f1a1 0714 	sub.w	r7, r1, #20
   d498e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4990:	42af      	cmp	r7, r5
   d4992:	d01c      	beq.n	d49ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4994:	b12c      	cbz	r4, d49a2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4996:	4629      	mov	r1, r5
   d4998:	4620      	mov	r0, r4
   d499a:	f001 ffbf 	bl	d691c <_ZN6StringC1EOS_>
   d499e:	7c2b      	ldrb	r3, [r5, #16]
   d49a0:	7423      	strb	r3, [r4, #16]
   d49a2:	4628      	mov	r0, r5
   d49a4:	f001 ffca 	bl	d693c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d49a8:	3d14      	subs	r5, #20
   d49aa:	3c14      	subs	r4, #20
   d49ac:	e7f0      	b.n	d4990 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d49ae:	d00e      	beq.n	d49ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d49b0:	42ac      	cmp	r4, r5
   d49b2:	d00c      	beq.n	d49ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d49b4:	b12e      	cbz	r6, d49c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d49b6:	4621      	mov	r1, r4
   d49b8:	4630      	mov	r0, r6
   d49ba:	f001 ffaf 	bl	d691c <_ZN6StringC1EOS_>
   d49be:	7c23      	ldrb	r3, [r4, #16]
   d49c0:	7433      	strb	r3, [r6, #16]
   d49c2:	4620      	mov	r0, r4
   d49c4:	f001 ffba 	bl	d693c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d49c8:	3414      	adds	r4, #20
   d49ca:	3614      	adds	r6, #20
   d49cc:	e7f0      	b.n	d49b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d49ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d49d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d49d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d49d4:	2300      	movs	r3, #0
   d49d6:	6003      	str	r3, [r0, #0]
   d49d8:	6043      	str	r3, [r0, #4]
   d49da:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d49dc:	684e      	ldr	r6, [r1, #4]
   d49de:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d49e0:	4604      	mov	r4, r0
   d49e2:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d49e4:	dd24      	ble.n	d4a30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d49e6:	f04f 0814 	mov.w	r8, #20
   d49ea:	fb08 f006 	mul.w	r0, r8, r6
   d49ee:	f001 fefd 	bl	d67ec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d49f2:	4605      	mov	r5, r0
   d49f4:	b1e0      	cbz	r0, d4a30 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d49f6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d49fa:	fb08 1202 	mla	r2, r8, r2, r1
   d49fe:	f7ff ffb9 	bl	d4974 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4a02:	6820      	ldr	r0, [r4, #0]
   d4a04:	f001 fefa 	bl	d67fc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4a08:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4a0a:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4a0c:	683e      	ldr	r6, [r7, #0]
   d4a0e:	687b      	ldr	r3, [r7, #4]
   d4a10:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4a14:	4546      	cmp	r6, r8
   d4a16:	d009      	beq.n	d4a2c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4a18:	b12d      	cbz	r5, d4a26 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4a1a:	4631      	mov	r1, r6
   d4a1c:	4628      	mov	r0, r5
   d4a1e:	f001 fff6 	bl	d6a0e <_ZN6StringC1ERKS_>
   d4a22:	7c33      	ldrb	r3, [r6, #16]
   d4a24:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4a26:	3614      	adds	r6, #20
   d4a28:	3514      	adds	r5, #20
   d4a2a:	e7f3      	b.n	d4a14 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4a2c:	687b      	ldr	r3, [r7, #4]
   d4a2e:	6063      	str	r3, [r4, #4]
    }
}
   d4a30:	4620      	mov	r0, r4
   d4a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a36 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d4a36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4a3a:	6843      	ldr	r3, [r0, #4]
   d4a3c:	6804      	ldr	r4, [r0, #0]
   d4a3e:	1b1c      	subs	r4, r3, r4
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d4a40:	10a4      	asrs	r4, r4, #2
   d4a42:	bf14      	ite	ne
   d4a44:	4623      	movne	r3, r4
   d4a46:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4a48:	18e4      	adds	r4, r4, r3
   d4a4a:	4606      	mov	r6, r0
   d4a4c:	4689      	mov	r9, r1
   d4a4e:	d202      	bcs.n	d4a56 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x20>
   d4a50:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   d4a54:	d325      	bcc.n	d4aa2 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x6c>
   d4a56:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4a5a:	00a0      	lsls	r0, r4, #2
   d4a5c:	f7ff fb1b 	bl	d4096 <_Znwj>
   d4a60:	4607      	mov	r7, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4a62:	f8d6 8000 	ldr.w	r8, [r6]
   d4a66:	6875      	ldr	r5, [r6, #4]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4a68:	f8d9 3000 	ldr.w	r3, [r9]
   d4a6c:	ebc8 0505 	rsb	r5, r8, r5
   d4a70:	42ef      	cmn	r7, r5
   d4a72:	bf18      	it	ne
   d4a74:	517b      	strne	r3, [r7, r5]
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4a76:	08ab      	lsrs	r3, r5, #2
   d4a78:	d004      	beq.n	d4a84 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x4e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4a7a:	462a      	mov	r2, r5
   d4a7c:	4641      	mov	r1, r8
   d4a7e:	4638      	mov	r0, r7
   d4a80:	f006 fa2a 	bl	daed8 <memmove>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d4a84:	3504      	adds	r5, #4
   d4a86:	443d      	add	r5, r7

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4a88:	f1b8 0f00 	cmp.w	r8, #0
   d4a8c:	d002      	beq.n	d4a94 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x5e>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4a8e:	4640      	mov	r0, r8
   d4a90:	f7ff fb05 	bl	d409e <_ZdlPv>
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4a94:	eb07 0484 	add.w	r4, r7, r4, lsl #2
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d4a98:	6037      	str	r7, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
   d4a9a:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4a9c:	60b4      	str	r4, [r6, #8]
      }
   d4a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4aa2:	2c00      	cmp	r4, #0
   d4aa4:	d1d9      	bne.n	d4a5a <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x24>
   d4aa6:	4627      	mov	r7, r4
   d4aa8:	e7db      	b.n	d4a62 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x2c>
	...

000d4aac <_Z15switchSprinklerv>:
            Log.info("%d devices found", count);
        }
    }
}

void switchSprinkler(){
   d4aac:	b513      	push	{r0, r1, r4, lr}
    //turn sprinkler off if it was on
    if(isWatering){
   d4aae:	4c13      	ldr	r4, [pc, #76]	; (d4afc <_Z15switchSprinklerv+0x50>)
   d4ab0:	7823      	ldrb	r3, [r4, #0]
   d4ab2:	b113      	cbz	r3, d4aba <_Z15switchSprinklerv+0xe>
        solenoidVoltageCharacteristic.setValue(0);
   d4ab4:	2300      	movs	r3, #0
   d4ab6:	9301      	str	r3, [sp, #4]
   d4ab8:	e001      	b.n	d4abe <_Z15switchSprinklerv+0x12>
    }
    //alternatively, turn sprinkler on if it was off
    else{
        solenoidVoltageCharacteristic.setValue(1);
   d4aba:	2201      	movs	r2, #1
   d4abc:	9201      	str	r2, [sp, #4]
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4abe:	2204      	movs	r2, #4
   d4ac0:	eb0d 0102 	add.w	r1, sp, r2
   d4ac4:	480e      	ldr	r0, [pc, #56]	; (d4b00 <_Z15switchSprinklerv+0x54>)
   d4ac6:	f002 fbf5 	bl	d72b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    }
    //record the time this switch occurred
    wateringEventTimes.push_back((int32_t) Time.now());
   d4aca:	f004 fca7 	bl	d941c <_ZN9TimeClass3nowEv>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4ace:	4b0d      	ldr	r3, [pc, #52]	; (d4b04 <_Z15switchSprinklerv+0x58>)
   d4ad0:	9001      	str	r0, [sp, #4]
   d4ad2:	6899      	ldr	r1, [r3, #8]
   d4ad4:	685a      	ldr	r2, [r3, #4]
   d4ad6:	428a      	cmp	r2, r1
   d4ad8:	4619      	mov	r1, r3
   d4ada:	d005      	beq.n	d4ae8 <_Z15switchSprinklerv+0x3c>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4adc:	b102      	cbz	r2, d4ae0 <_Z15switchSprinklerv+0x34>
   d4ade:	6010      	str	r0, [r2, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
   d4ae0:	684b      	ldr	r3, [r1, #4]
   d4ae2:	3304      	adds	r3, #4
   d4ae4:	604b      	str	r3, [r1, #4]
   d4ae6:	e003      	b.n	d4af0 <_Z15switchSprinklerv+0x44>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
   d4ae8:	a901      	add	r1, sp, #4
   d4aea:	4618      	mov	r0, r3
   d4aec:	f7ff ffa3 	bl	d4a36 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_>
    //flip the watering flag
    isWatering = !isWatering;
   d4af0:	7823      	ldrb	r3, [r4, #0]
   d4af2:	f083 0301 	eor.w	r3, r3, #1
   d4af6:	7023      	strb	r3, [r4, #0]
}
   d4af8:	b002      	add	sp, #8
   d4afa:	bd10      	pop	{r4, pc}
   d4afc:	2003e3a8 	.word	0x2003e3a8
   d4b00:	2003d954 	.word	0x2003d954
   d4b04:	2003e3ac 	.word	0x2003e3ac

000d4b08 <_Z15sprinklerSwitch6String>:
    Log.info("Topic: %s. Message: %s", topic, payload);
}

/* Particle functions for Particle console control */
/* Manually turn sprinkler system on/off */
int sprinklerSwitch(String activate){
   d4b08:	b530      	push	{r4, r5, lr}
   d4b0a:	b085      	sub	sp, #20
   d4b0c:	4604      	mov	r4, r0
    if(activate.equalsIgnoreCase("on")){
   d4b0e:	4914      	ldr	r1, [pc, #80]	; (d4b60 <_Z15sprinklerSwitch6String+0x58>)
   d4b10:	4668      	mov	r0, sp
   d4b12:	f001 ff5a 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
   d4b16:	4669      	mov	r1, sp
   d4b18:	4620      	mov	r0, r4
   d4b1a:	f001 ffb7 	bl	d6a8c <_ZNK6String16equalsIgnoreCaseERKS_>
   d4b1e:	4605      	mov	r5, r0
   d4b20:	4668      	mov	r0, sp
   d4b22:	f001 ff0b 	bl	d693c <_ZN6StringD1Ev>
   d4b26:	b11d      	cbz	r5, d4b30 <_Z15sprinklerSwitch6String+0x28>
        //turn on sprinkler if it is off
        if(!isWatering){
   d4b28:	4b0e      	ldr	r3, [pc, #56]	; (d4b64 <_Z15sprinklerSwitch6String+0x5c>)
   d4b2a:	781b      	ldrb	r3, [r3, #0]
   d4b2c:	b993      	cbnz	r3, d4b54 <_Z15sprinklerSwitch6String+0x4c>
   d4b2e:	e00f      	b.n	d4b50 <_Z15sprinklerSwitch6String+0x48>
            switchSprinkler();
        }
    }
    else if (activate.equalsIgnoreCase("off")){
   d4b30:	490d      	ldr	r1, [pc, #52]	; (d4b68 <_Z15sprinklerSwitch6String+0x60>)
   d4b32:	4668      	mov	r0, sp
   d4b34:	f001 ff49 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
   d4b38:	4620      	mov	r0, r4
   d4b3a:	4669      	mov	r1, sp
   d4b3c:	f001 ffa6 	bl	d6a8c <_ZNK6String16equalsIgnoreCaseERKS_>
   d4b40:	4604      	mov	r4, r0
   d4b42:	4668      	mov	r0, sp
   d4b44:	f001 fefa 	bl	d693c <_ZN6StringD1Ev>
   d4b48:	b134      	cbz	r4, d4b58 <_Z15sprinklerSwitch6String+0x50>
        //turn off sprinkler if it is on
        if(isWatering){
   d4b4a:	4b06      	ldr	r3, [pc, #24]	; (d4b64 <_Z15sprinklerSwitch6String+0x5c>)
   d4b4c:	781b      	ldrb	r3, [r3, #0]
   d4b4e:	b10b      	cbz	r3, d4b54 <_Z15sprinklerSwitch6String+0x4c>
/* Manually turn sprinkler system on/off */
int sprinklerSwitch(String activate){
    if(activate.equalsIgnoreCase("on")){
        //turn on sprinkler if it is off
        if(!isWatering){
            switchSprinkler();
   d4b50:	f7ff ffac 	bl	d4aac <_Z15switchSprinklerv>
        }
    }
    else{
        return 0;
    }
    return 1;
   d4b54:	2001      	movs	r0, #1
   d4b56:	e000      	b.n	d4b5a <_Z15sprinklerSwitch6String+0x52>
        if(isWatering){
            switchSprinkler();
        }
    }
    else{
        return 0;
   d4b58:	4620      	mov	r0, r4
    }
    return 1;
}
   d4b5a:	b005      	add	sp, #20
   d4b5c:	bd30      	pop	{r4, r5, pc}
   d4b5e:	bf00      	nop
   d4b60:	000db733 	.word	0x000db733
   d4b64:	2003e3a8 	.word	0x2003e3a8
   d4b68:	000db736 	.word	0x000db736

000d4b6c <_GLOBAL__sub_I_SystemMode>:
        Log.info("Sensor 2 - Human detected!");
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
   d4b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4b6e:	4b6a      	ldr	r3, [pc, #424]	; (d4d18 <_GLOBAL__sub_I_SystemMode+0x1ac>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b70:	4d6a      	ldr	r5, [pc, #424]	; (d4d1c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4b72:	b08d      	sub	sp, #52	; 0x34
   d4b74:	2601      	movs	r6, #1
   d4b76:	2400      	movs	r4, #0
   d4b78:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4b7a:	f001 fb79 	bl	d6270 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4b82:	816b      	strh	r3, [r5, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b84:	4630      	mov	r0, r6

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4b86:	602c      	str	r4, [r5, #0]
   d4b88:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4b8a:	71ac      	strb	r4, [r5, #6]
   d4b8c:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4b8e:	f001 fd79 	bl	d6684 <set_system_mode>
 * Date: 07/05/2020
 */

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(AUTOMATIC);
   d4b92:	4a63      	ldr	r2, [pc, #396]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4b94:	4963      	ldr	r1, [pc, #396]	; (d4d24 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4b96:	4628      	mov	r0, r5
   d4b98:	f006 f809 	bl	dabae <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4b9c:	9400      	str	r4, [sp, #0]
   d4b9e:	9401      	str	r4, [sp, #4]
   d4ba0:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4ba2:	f005 f915 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d4ba6:	4669      	mov	r1, sp
   d4ba8:	4607      	mov	r7, r0
   d4baa:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4bac:	4d5e      	ldr	r5, [pc, #376]	; (d4d28 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4bae:	f7ff ff0f 	bl	d49d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4bb2:	a903      	add	r1, sp, #12
   d4bb4:	a806      	add	r0, sp, #24
   d4bb6:	f7ff ff0b 	bl	d49d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4bba:	4b5c      	ldr	r3, [pc, #368]	; (d4d2c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4bbc:	602b      	str	r3, [r5, #0]
   d4bbe:	a906      	add	r1, sp, #24
   d4bc0:	a809      	add	r0, sp, #36	; 0x24
   d4bc2:	f7ff ff05 	bl	d49d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4bc6:	aa09      	add	r2, sp, #36	; 0x24
   d4bc8:	4631      	mov	r1, r6
   d4bca:	1d28      	adds	r0, r5, #4
   d4bcc:	f004 f8cf 	bl	d8d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4bd0:	a809      	add	r0, sp, #36	; 0x24
   d4bd2:	f7ff fdd5 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4bd6:	a806      	add	r0, sp, #24
   d4bd8:	f7ff fdd2 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4bdc:	4b54      	ldr	r3, [pc, #336]	; (d4d30 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4bde:	602b      	str	r3, [r5, #0]
   d4be0:	622f      	str	r7, [r5, #32]
   d4be2:	a803      	add	r0, sp, #12
   d4be4:	f7ff fdcc 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4be8:	4b52      	ldr	r3, [pc, #328]	; (d4d34 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4bea:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4bec:	f005 f8f0 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d4bf0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4bf4:	f005 f8dc 	bl	d9db0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4bf8:	f003 fd62 	bl	d86c0 <_ZN5spark10LogManager8instanceEv>
   d4bfc:	4629      	mov	r1, r5
   d4bfe:	f004 f849 	bl	d8c94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4c02:	4668      	mov	r0, sp
   d4c04:	f7ff fdbc 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4c08:	4a45      	ldr	r2, [pc, #276]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c0a:	494b      	ldr	r1, [pc, #300]	; (d4d38 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4c0c:	4628      	mov	r0, r5
   d4c0e:	f005 ffce 	bl	dabae <__aeabi_atexit>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d4c12:	484a      	ldr	r0, [pc, #296]	; (d4d3c <_GLOBAL__sub_I_SystemMode+0x1d0>)
int8_t currentMoisture = -1;
int8_t currentTemperature = -127;
int8_t currentHumidity = -1;
uint8_t initWateringStatus = 0;
bool isWatering = false;    //Is the solenoid active or not?
std::vector<int32_t> wateringEventTimes = {};
   d4c14:	4a42      	ldr	r2, [pc, #264]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c16:	494a      	ldr	r1, [pc, #296]	; (d4d40 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4c18:	6004      	str	r4, [r0, #0]
   d4c1a:	6044      	str	r4, [r0, #4]
   d4c1c:	6084      	str	r4, [r0, #8]
   d4c1e:	f005 ffc6 	bl	dabae <__aeabi_atexit>
int AIR_HUMIDITY_THRESHOLD = 80;
int SUNNY_LIGHT_THRESHOLD = 90000;

/* Bluetooth variables */
//bluetooth devices we want to connect to and their service ids
BlePeerDevice sensorNode1;
   d4c22:	4848      	ldr	r0, [pc, #288]	; (d4d44 <_GLOBAL__sub_I_SystemMode+0x1d8>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4c24:	4d48      	ldr	r5, [pc, #288]	; (d4d48 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4c26:	f002 fdb5 	bl	d7794 <_ZN8particle13BlePeerDeviceC1Ev>
   d4c2a:	4a3d      	ldr	r2, [pc, #244]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c2c:	4947      	ldr	r1, [pc, #284]	; (d4d4c <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4c2e:	4845      	ldr	r0, [pc, #276]	; (d4d44 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4c30:	f005 ffbd 	bl	dabae <__aeabi_atexit>
BlePeerDevice sensorNode2;
   d4c34:	4846      	ldr	r0, [pc, #280]	; (d4d50 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4c36:	f002 fdad 	bl	d7794 <_ZN8particle13BlePeerDeviceC1Ev>
   d4c3a:	4a39      	ldr	r2, [pc, #228]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c3c:	4943      	ldr	r1, [pc, #268]	; (d4d4c <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4c3e:	4844      	ldr	r0, [pc, #272]	; (d4d50 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4c40:	f005 ffb5 	bl	dabae <__aeabi_atexit>
BleUuid sensorNode1ServiceUuid("754ebf5e-ce31-4300-9fd5-a8fb4ee4a811");
   d4c44:	4943      	ldr	r1, [pc, #268]	; (d4d54 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4c46:	4844      	ldr	r0, [pc, #272]	; (d4d58 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4c48:	f002 f98a 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>
BleUuid sensorNode2ServiceUuid("97728ad9-a998-4629-b855-ee2658ca01f7");
   d4c4c:	4943      	ldr	r1, [pc, #268]	; (d4d5c <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4c4e:	4844      	ldr	r0, [pc, #272]	; (d4d60 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4c50:	f002 f986 	bl	d6f60 <_ZN8particle7BleUuidC1EPKc>

//characteristics we want to track
//for sensor node 1
BleCharacteristic temperatureSensorCharacteristic;
   d4c54:	4843      	ldr	r0, [pc, #268]	; (d4d64 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4c56:	f003 fa09 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4c5a:	4a31      	ldr	r2, [pc, #196]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c5c:	4942      	ldr	r1, [pc, #264]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4c5e:	4841      	ldr	r0, [pc, #260]	; (d4d64 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4c60:	f005 ffa5 	bl	dabae <__aeabi_atexit>
BleCharacteristic humiditySensorCharacteristic;
   d4c64:	4841      	ldr	r0, [pc, #260]	; (d4d6c <_GLOBAL__sub_I_SystemMode+0x200>)
   d4c66:	f003 fa01 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4c6a:	4a2d      	ldr	r2, [pc, #180]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c6c:	493e      	ldr	r1, [pc, #248]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4c6e:	483f      	ldr	r0, [pc, #252]	; (d4d6c <_GLOBAL__sub_I_SystemMode+0x200>)
   d4c70:	f005 ff9d 	bl	dabae <__aeabi_atexit>
BleCharacteristic lightSensorCharacteristic;
   d4c74:	483e      	ldr	r0, [pc, #248]	; (d4d70 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4c76:	f003 f9f9 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4c7a:	4a29      	ldr	r2, [pc, #164]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c7c:	493a      	ldr	r1, [pc, #232]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4c7e:	483c      	ldr	r0, [pc, #240]	; (d4d70 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4c80:	f005 ff95 	bl	dabae <__aeabi_atexit>
BleCharacteristic moistureSensorCharacteristic;
   d4c84:	483b      	ldr	r0, [pc, #236]	; (d4d74 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4c86:	f003 f9f1 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4c8a:	4a25      	ldr	r2, [pc, #148]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c8c:	4936      	ldr	r1, [pc, #216]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4c8e:	4839      	ldr	r0, [pc, #228]	; (d4d74 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4c90:	f005 ff8d 	bl	dabae <__aeabi_atexit>

//for sensor node 2
BleCharacteristic rainsteamSensorCharacteristic;
   d4c94:	4838      	ldr	r0, [pc, #224]	; (d4d78 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4c96:	f003 f9e9 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4c9a:	4a21      	ldr	r2, [pc, #132]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c9c:	4932      	ldr	r1, [pc, #200]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4c9e:	4836      	ldr	r0, [pc, #216]	; (d4d78 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4ca0:	f005 ff85 	bl	dabae <__aeabi_atexit>
BleCharacteristic liquidSensorCharacteristic;
   d4ca4:	4835      	ldr	r0, [pc, #212]	; (d4d7c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4ca6:	f003 f9e1 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4caa:	4a1d      	ldr	r2, [pc, #116]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4cac:	492e      	ldr	r1, [pc, #184]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4cae:	4833      	ldr	r0, [pc, #204]	; (d4d7c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4cb0:	f005 ff7d 	bl	dabae <__aeabi_atexit>
BleCharacteristic humanDetectorCharacteristic;
   d4cb4:	4832      	ldr	r0, [pc, #200]	; (d4d80 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4cb6:	f003 f9d9 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4cba:	4a19      	ldr	r2, [pc, #100]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4cbc:	492a      	ldr	r1, [pc, #168]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4cbe:	4830      	ldr	r0, [pc, #192]	; (d4d80 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4cc0:	f005 ff75 	bl	dabae <__aeabi_atexit>
BleCharacteristic solenoidVoltageCharacteristic;
   d4cc4:	482f      	ldr	r0, [pc, #188]	; (d4d84 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4cc6:	f003 f9d1 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
   d4cca:	4a15      	ldr	r2, [pc, #84]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4ccc:	4926      	ldr	r1, [pc, #152]	; (d4d68 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4cce:	482d      	ldr	r0, [pc, #180]	; (d4d84 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4cd0:	f005 ff6d 	bl	dabae <__aeabi_atexit>

// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d4cd4:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d4cd8:	1928      	adds	r0, r5, r4
   d4cda:	f001 ffab 	bl	d6c34 <_ZN8particle10BleAddressC1Ev>
   d4cde:	f104 0008 	add.w	r0, r4, #8
   d4ce2:	4428      	add	r0, r5
   d4ce4:	f002 fa35 	bl	d7152 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4ce8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4cec:	4428      	add	r0, r5
   d4cee:	3454      	adds	r4, #84	; 0x54
   d4cf0:	f002 fa2f 	bl	d7152 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4cf4:	42b4      	cmp	r4, r6
   d4cf6:	d1ef      	bne.n	d4cd8 <_GLOBAL__sub_I_SystemMode+0x16c>

//MQTT client used to publish MQTT messages
MQTT5 client;
   d4cf8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4cfc:	4822      	ldr	r0, [pc, #136]	; (d4d88 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4cfe:	f000 f881 	bl	d4e04 <_ZN5MQTT5C1Et>
   d4d02:	4a07      	ldr	r2, [pc, #28]	; (d4d20 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d04:	4921      	ldr	r1, [pc, #132]	; (d4d8c <_GLOBAL__sub_I_SystemMode+0x220>)
   d4d06:	4820      	ldr	r0, [pc, #128]	; (d4d88 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4d08:	f005 ff51 	bl	dabae <__aeabi_atexit>
   d4d0c:	f001 fad0 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();
   d4d10:	4b1f      	ldr	r3, [pc, #124]	; (d4d90 <_GLOBAL__sub_I_SystemMode+0x224>)
   d4d12:	6018      	str	r0, [r3, #0]
        Log.info("Sensor 2 - Human detected!");
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
   d4d14:	b00d      	add	sp, #52	; 0x34
   d4d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4d18:	2003d978 	.word	0x2003d978
   d4d1c:	2003d8e0 	.word	0x2003d8e0
   d4d20:	2003d8c0 	.word	0x2003d8c0
   d4d24:	000d413d 	.word	0x000d413d
   d4d28:	2003e36c 	.word	0x2003e36c
   d4d2c:	000db1c8 	.word	0x000db1c8
   d4d30:	000dc344 	.word	0x000dc344
   d4d34:	000db1e0 	.word	0x000db1e0
   d4d38:	000d415d 	.word	0x000d415d
   d4d3c:	2003e3ac 	.word	0x2003e3ac
   d4d40:	000d414d 	.word	0x000d414d
   d4d44:	2003e39c 	.word	0x2003e39c
   d4d48:	2003d97c 	.word	0x2003d97c
   d4d4c:	000d76e1 	.word	0x000d76e1
   d4d50:	2003d970 	.word	0x2003d970
   d4d54:	000db73a 	.word	0x000db73a
   d4d58:	2003d940 	.word	0x2003d940
   d4d5c:	000db75f 	.word	0x000db75f
   d4d60:	2003d8c4 	.word	0x2003d8c4
   d4d64:	2003d960 	.word	0x2003d960
   d4d68:	000d76d3 	.word	0x000d76d3
   d4d6c:	2003e394 	.word	0x2003e394
   d4d70:	2003d8d8 	.word	0x2003d8d8
   d4d74:	2003d968 	.word	0x2003d968
   d4d78:	2003e364 	.word	0x2003e364
   d4d7c:	2003e354 	.word	0x2003e354
   d4d80:	2003e35c 	.word	0x2003e35c
   d4d84:	2003d954 	.word	0x2003d954
   d4d88:	2003d8ec 	.word	0x2003d8ec
   d4d8c:	000d6231 	.word	0x000d6231
   d4d90:	2003e3a4 	.word	0x2003e3a4

000d4d94 <_GLOBAL__sub_I__ZN13LiquidCrystalC2Ehhhhhhhhhhh>:
   d4d94:	f001 ba6c 	b.w	d6270 <HAL_Pin_Map>

000d4d98 <_ZN5MQTT510connectingEv.part.0>:
    maxPacketSize = maxp;
    socket = new TCPClient();
    buffer = new uint8_t[maxPacketSize];
}

bool MQTT5::connected() {
   d4d98:	b508      	push	{r3, lr}
    return !connecting() && socket->connected();
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	6803      	ldr	r3, [r0, #0]
   d4d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4da0:	4798      	blx	r3
}
   d4da2:	3000      	adds	r0, #0
   d4da4:	bf18      	it	ne
   d4da6:	2001      	movne	r0, #1
   d4da8:	bd08      	pop	{r3, pc}

000d4daa <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4daa:	b510      	push	{r4, lr}
   d4dac:	b08a      	sub	sp, #40	; 0x28
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4dae:	e88d 000c 	stmia.w	sp, {r2, r3}
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4db2:	460c      	mov	r4, r1
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4db4:	2120      	movs	r1, #32
   d4db6:	9102      	str	r1, [sp, #8]
    attr.flags = 0;
   d4db8:	2100      	movs	r1, #0
   d4dba:	9103      	str	r1, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4dbc:	460b      	mov	r3, r1
   d4dbe:	aa02      	add	r2, sp, #8
   d4dc0:	6801      	ldr	r1, [r0, #0]
   d4dc2:	4620      	mov	r0, r4
   d4dc4:	f001 fc3e 	bl	d6644 <log_message_v>
}
   d4dc8:	b00a      	add	sp, #40	; 0x28
   d4dca:	bd10      	pop	{r4, pc}

000d4dcc <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4dcc:	b40e      	push	{r1, r2, r3}
   d4dce:	b503      	push	{r0, r1, lr}
   d4dd0:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
   d4dd2:	2101      	movs	r1, #1
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4dd4:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d4dd8:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   d4dda:	f7ff ffe6 	bl	d4daa <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d4dde:	b002      	add	sp, #8
   d4de0:	f85d eb04 	ldr.w	lr, [sp], #4
   d4de4:	b003      	add	sp, #12
   d4de6:	4770      	bx	lr

000d4de8 <_ZNK5spark6Logger4warnEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d4de8:	b40e      	push	{r1, r2, r3}
   d4dea:	b503      	push	{r0, r1, lr}
   d4dec:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
   d4dee:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d4df0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d4df4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
   d4df6:	f7ff ffd8 	bl	d4daa <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d4dfa:	b002      	add	sp, #8
   d4dfc:	f85d eb04 	ldr.w	lr, [sp], #4
   d4e00:	b003      	add	sp, #12
   d4e02:	4770      	bx	lr

000d4e04 <_ZN5MQTT5C1Et>:
/* MQTT5 library by Thomas Peroutka <thomas.peroutka@gmail.com>
 */

#include "MQTT5.h"

MQTT5::MQTT5(uint16_t maxp): logger("app.MQTT") {
   d4e04:	b538      	push	{r3, r4, r5, lr}
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e06:	4b0c      	ldr	r3, [pc, #48]	; (d4e38 <_ZN5MQTT5C1Et+0x34>)
   d4e08:	6003      	str	r3, [r0, #0]
   d4e0a:	220a      	movs	r2, #10
   d4e0c:	2300      	movs	r3, #0
   d4e0e:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
   d4e12:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
   d4e16:	6303      	str	r3, [r0, #48]	; 0x30
    maxPacketSize = maxp;
   d4e18:	8581      	strh	r1, [r0, #44]	; 0x2c
/* MQTT5 library by Thomas Peroutka <thomas.peroutka@gmail.com>
 */

#include "MQTT5.h"

MQTT5::MQTT5(uint16_t maxp): logger("app.MQTT") {
   d4e1a:	4604      	mov	r4, r0
    maxPacketSize = maxp;
    socket = new TCPClient();
   d4e1c:	201c      	movs	r0, #28
   d4e1e:	f7ff f93a 	bl	d4096 <_Znwj>
   d4e22:	4605      	mov	r5, r0
   d4e24:	b108      	cbz	r0, d4e2a <_ZN5MQTT5C1Et+0x26>
   d4e26:	f005 fbfd 	bl	da624 <_ZN9TCPClientC1Ev>
   d4e2a:	6065      	str	r5, [r4, #4]
    buffer = new uint8_t[maxPacketSize];
   d4e2c:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d4e2e:	f7ff f934 	bl	d409a <_Znaj>
   d4e32:	60a0      	str	r0, [r4, #8]
}
   d4e34:	4620      	mov	r0, r4
   d4e36:	bd38      	pop	{r3, r4, r5, pc}
   d4e38:	000db7b8 	.word	0x000db7b8

000d4e3c <_ZN5MQTT510connectingEv>:
bool MQTT5::connected() {
    return !connecting() && socket->connected();
}

bool MQTT5::connecting() {
    return isConnecting && socket->connected();
   d4e3c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d4e40:	b10b      	cbz	r3, d4e46 <_ZN5MQTT510connectingEv+0xa>
   d4e42:	f7ff bfa9 	b.w	d4d98 <_ZN5MQTT510connectingEv.part.0>
}
   d4e46:	4618      	mov	r0, r3
   d4e48:	4770      	bx	lr

000d4e4a <_ZN5MQTT59connectedEv>:
    maxPacketSize = maxp;
    socket = new TCPClient();
    buffer = new uint8_t[maxPacketSize];
}

bool MQTT5::connected() {
   d4e4a:	b510      	push	{r4, lr}
   d4e4c:	4604      	mov	r4, r0
    return !connecting() && socket->connected();
   d4e4e:	f7ff fff5 	bl	d4e3c <_ZN5MQTT510connectingEv>
   d4e52:	b920      	cbnz	r0, d4e5e <_ZN5MQTT59connectedEv+0x14>
   d4e54:	4620      	mov	r0, r4
}
   d4e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4e5a:	f7ff bf9d 	b.w	d4d98 <_ZN5MQTT510connectingEv.part.0>
   d4e5e:	2000      	movs	r0, #0
   d4e60:	bd10      	pop	{r4, pc}

000d4e62 <_ZN5MQTT520topicAliasRegisteredEt>:
    registeredTopicAlias[registeredTopicAliasLen] = alias;
    registeredTopicAliasLen++;
    return true;
}

bool MQTT5::topicAliasRegistered(uint16_t alias) {
   d4e62:	b510      	push	{r4, lr}
    if (registeredTopicAliasLen <= 0 || !registeredTopicAlias)
   d4e64:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
   d4e68:	b154      	cbz	r4, d4e80 <_ZN5MQTT520topicAliasRegisteredEt+0x1e>
   d4e6a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d4e6c:	b143      	cbz	r3, d4e80 <_ZN5MQTT520topicAliasRegisteredEt+0x1e>
   d4e6e:	2200      	movs	r2, #0
        return false;

    for (int i = 0; i < registeredTopicAliasLen; i++) {
   d4e70:	42a2      	cmp	r2, r4
   d4e72:	da05      	bge.n	d4e80 <_ZN5MQTT520topicAliasRegisteredEt+0x1e>
        if (registeredTopicAlias[i] == alias) 
   d4e74:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   d4e78:	4288      	cmp	r0, r1
   d4e7a:	d003      	beq.n	d4e84 <_ZN5MQTT520topicAliasRegisteredEt+0x22>

bool MQTT5::topicAliasRegistered(uint16_t alias) {
    if (registeredTopicAliasLen <= 0 || !registeredTopicAlias)
        return false;

    for (int i = 0; i < registeredTopicAliasLen; i++) {
   d4e7c:	3201      	adds	r2, #1
   d4e7e:	e7f7      	b.n	d4e70 <_ZN5MQTT520topicAliasRegisteredEt+0xe>
    return true;
}

bool MQTT5::topicAliasRegistered(uint16_t alias) {
    if (registeredTopicAliasLen <= 0 || !registeredTopicAlias)
        return false;
   d4e80:	2000      	movs	r0, #0
   d4e82:	bd10      	pop	{r4, pc}

    for (int i = 0; i < registeredTopicAliasLen; i++) {
        if (registeredTopicAlias[i] == alias) 
            return true;
   d4e84:	2001      	movs	r0, #1
    }
    return false;
}
   d4e86:	bd10      	pop	{r4, pc}

000d4e88 <_ZN5MQTT518topicAliasRegisterEt>:
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
    return writeToSocket(index);
}

bool MQTT5::topicAliasRegister(uint16_t alias) {
   d4e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (registeredTopicAliasLen >= maxTopicAlias || !registeredTopicAlias)
   d4e8a:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
   d4e8e:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   d4e92:	42b3      	cmp	r3, r6
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
    return writeToSocket(index);
}

bool MQTT5::topicAliasRegister(uint16_t alias) {
   d4e94:	4604      	mov	r4, r0
    if (registeredTopicAliasLen >= maxTopicAlias || !registeredTopicAlias)
   d4e96:	d90d      	bls.n	d4eb4 <_ZN5MQTT518topicAliasRegisterEt+0x2c>
   d4e98:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d4e9a:	b16d      	cbz	r5, d4eb8 <_ZN5MQTT518topicAliasRegisterEt+0x30>
        return false;
    if (topicAliasRegistered(alias))
   d4e9c:	f7ff ffe1 	bl	d4e62 <_ZN5MQTT520topicAliasRegisteredEt>
   d4ea0:	b958      	cbnz	r0, d4eba <_ZN5MQTT518topicAliasRegisterEt+0x32>
        return true;
    
    registeredTopicAlias[registeredTopicAliasLen] = alias;
   d4ea2:	f825 1016 	strh.w	r1, [r5, r6, lsl #1]
    registeredTopicAliasLen++;
   d4ea6:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   d4eaa:	3301      	adds	r3, #1
   d4eac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d4eb0:	2001      	movs	r0, #1
   d4eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return writeToSocket(index);
}

bool MQTT5::topicAliasRegister(uint16_t alias) {
    if (registeredTopicAliasLen >= maxTopicAlias || !registeredTopicAlias)
        return false;
   d4eb4:	2000      	movs	r0, #0
   d4eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4eb8:	4628      	mov	r0, r5
        return true;
    
    registeredTopicAlias[registeredTopicAliasLen] = alias;
    registeredTopicAliasLen++;
    return true;
}
   d4eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4ebc <_ZN5MQTT523readVariableByteIntegerEPtS0_>:
    logger.info("Sending disconnect with reason %d", (uint8_t) reason);
    return writeToSocket(index);
}

bool MQTT5::readVariableByteInteger(uint16_t *position, uint16_t *value) {
    *value = 0;
   d4ebc:	2300      	movs	r3, #0

    logger.info("Sending disconnect with reason %d", (uint8_t) reason);
    return writeToSocket(index);
}

bool MQTT5::readVariableByteInteger(uint16_t *position, uint16_t *value) {
   d4ebe:	b570      	push	{r4, r5, r6, lr}
    *value = 0;
   d4ec0:	8013      	strh	r3, [r2, #0]
   d4ec2:	2405      	movs	r4, #5
    uint32_t multiplier = 1;
   d4ec4:	2501      	movs	r5, #1
    do {
        if (multiplier != 1)
            (*position)++;
        *value += (buffer[*position] & 127) * multiplier;    
   d4ec6:	6886      	ldr	r6, [r0, #8]
   d4ec8:	880b      	ldrh	r3, [r1, #0]
   d4eca:	5cf3      	ldrb	r3, [r6, r3]
   d4ecc:	8816      	ldrh	r6, [r2, #0]
   d4ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d4ed2:	fb13 f305 	smulbb	r3, r3, r5
   d4ed6:	4433      	add	r3, r6
        if (multiplier > 128*128*128) {
   d4ed8:	3c01      	subs	r4, #1
    *value = 0;
    uint32_t multiplier = 1;
    do {
        if (multiplier != 1)
            (*position)++;
        *value += (buffer[*position] & 127) * multiplier;    
   d4eda:	8013      	strh	r3, [r2, #0]
        if (multiplier > 128*128*128) {
   d4edc:	d107      	bne.n	d4eee <_ZN5MQTT523readVariableByteIntegerEPtS0_+0x32>
            (*position)++;
   d4ede:	880b      	ldrh	r3, [r1, #0]
   d4ee0:	3301      	adds	r3, #1
   d4ee2:	800b      	strh	r3, [r1, #0]
            logger.warn("Malformed Variable Byte Integer");
   d4ee4:	4907      	ldr	r1, [pc, #28]	; (d4f04 <_ZN5MQTT523readVariableByteIntegerEPtS0_+0x48>)
   d4ee6:	f7ff ff7f 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
            return false;
   d4eea:	4620      	mov	r0, r4
   d4eec:	bd70      	pop	{r4, r5, r6, pc}
        }
        multiplier *= 128;
    } while ((buffer[*position] & 128) != 0);
   d4eee:	880b      	ldrh	r3, [r1, #0]
   d4ef0:	6886      	ldr	r6, [r0, #8]
   d4ef2:	56f6      	ldrsb	r6, [r6, r3]
   d4ef4:	3301      	adds	r3, #1
   d4ef6:	2e00      	cmp	r6, #0
        if (multiplier > 128*128*128) {
            (*position)++;
            logger.warn("Malformed Variable Byte Integer");
            return false;
        }
        multiplier *= 128;
   d4ef8:	ea4f 15c5 	mov.w	r5, r5, lsl #7
    } while ((buffer[*position] & 128) != 0);
    (*position)++;
   d4efc:	800b      	strh	r3, [r1, #0]
            (*position)++;
            logger.warn("Malformed Variable Byte Integer");
            return false;
        }
        multiplier *= 128;
    } while ((buffer[*position] & 128) != 0);
   d4efe:	dbe2      	blt.n	d4ec6 <_ZN5MQTT523readVariableByteIntegerEPtS0_+0xa>
    (*position)++;
    return true;
   d4f00:	2001      	movs	r0, #1
}
   d4f02:	bd70      	pop	{r4, r5, r6, pc}
   d4f04:	000db7c1 	.word	0x000db7c1

000d4f08 <_ZN5MQTT514readUTF8StringEPtPct>:

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
}

void MQTT5::readUTF8String(uint16_t *position, char *arr, uint16_t len) {
   d4f08:	b570      	push	{r4, r5, r6, lr}
   d4f0a:	461d      	mov	r5, r3
   d4f0c:	460c      	mov	r4, r1
    memcpy(arr, buffer + (*position), len);
   d4f0e:	880b      	ldrh	r3, [r1, #0]
   d4f10:	6881      	ldr	r1, [r0, #8]

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
}

void MQTT5::readUTF8String(uint16_t *position, char *arr, uint16_t len) {
   d4f12:	4616      	mov	r6, r2
    memcpy(arr, buffer + (*position), len);
   d4f14:	4419      	add	r1, r3
   d4f16:	462a      	mov	r2, r5
   d4f18:	4630      	mov	r0, r6
   d4f1a:	f005 ffd2 	bl	daec2 <memcpy>
    arr[len] = 0;
   d4f1e:	2300      	movs	r3, #0
   d4f20:	5573      	strb	r3, [r6, r5]
    *position += len;
   d4f22:	8822      	ldrh	r2, [r4, #0]
   d4f24:	18ab      	adds	r3, r5, r2
   d4f26:	8023      	strh	r3, [r4, #0]
   d4f28:	bd70      	pop	{r4, r5, r6, pc}

000d4f2a <_ZN5MQTT57readIntEPt>:
}

uint16_t MQTT5::readInt(uint16_t *position) {
    uint16_t result = buffer[*position] << 8 | buffer[*position + 1];
   d4f2a:	880b      	ldrh	r3, [r1, #0]
   d4f2c:	6882      	ldr	r2, [r0, #8]
   d4f2e:	5cd0      	ldrb	r0, [r2, r3]
   d4f30:	441a      	add	r2, r3
    (*position) += 2;
   d4f32:	3302      	adds	r3, #2
    arr[len] = 0;
    *position += len;
}

uint16_t MQTT5::readInt(uint16_t *position) {
    uint16_t result = buffer[*position] << 8 | buffer[*position + 1];
   d4f34:	7852      	ldrb	r2, [r2, #1]
    (*position) += 2;
   d4f36:	800b      	strh	r3, [r1, #0]
    return result;
}
   d4f38:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   d4f3c:	4770      	bx	lr
	...

000d4f40 <_ZN5MQTT522processPacketPubAckRecEhttb>:
            logger.warn("Unknown publish property");
            break;
    }
}

void MQTT5::processPacketPubAckRec(uint8_t flags, uint16_t startIndex, uint16_t contentLength, bool isAck) {
   d4f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4f42:	b085      	sub	sp, #20
   d4f44:	a904      	add	r1, sp, #16
   d4f46:	461d      	mov	r5, r3
   d4f48:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d4f4c:	4604      	mov	r4, r0
   d4f4e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    uint16_t packetId = readInt(&startIndex);
   d4f52:	f7ff ffea 	bl	d4f2a <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d4f56:	2d02      	cmp	r5, #2
   d4f58:	bf1f      	itttt	ne
   d4f5a:	f8bd 300e 	ldrhne.w	r3, [sp, #14]
   d4f5e:	68a2      	ldrne	r2, [r4, #8]
   d4f60:	1c59      	addne	r1, r3, #1
   d4f62:	f8ad 100e 	strhne.w	r1, [sp, #14]
   d4f66:	bf18      	it	ne
   d4f68:	5cd5      	ldrbne	r5, [r2, r3]
    logger.info("Received publish %s for packet %d and response %d", isAck ? "ack" : "rec", packetId, (uint8_t) reason);
   d4f6a:	490e      	ldr	r1, [pc, #56]	; (d4fa4 <_ZN5MQTT522processPacketPubAckRecEhttb+0x64>)
   d4f6c:	4a0e      	ldr	r2, [pc, #56]	; (d4fa8 <_ZN5MQTT522processPacketPubAckRecEhttb+0x68>)
    }
}

void MQTT5::processPacketPubAckRec(uint8_t flags, uint16_t startIndex, uint16_t contentLength, bool isAck) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d4f6e:	bf08      	it	eq
   d4f70:	2500      	moveq	r5, #0
            break;
    }
}

void MQTT5::processPacketPubAckRec(uint8_t flags, uint16_t startIndex, uint16_t contentLength, bool isAck) {
    uint16_t packetId = readInt(&startIndex);
   d4f72:	4606      	mov	r6, r0
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received publish %s for packet %d and response %d", isAck ? "ack" : "rec", packetId, (uint8_t) reason);
   d4f74:	4603      	mov	r3, r0
   d4f76:	2f00      	cmp	r7, #0
   d4f78:	bf18      	it	ne
   d4f7a:	460a      	movne	r2, r1
   d4f7c:	9500      	str	r5, [sp, #0]
   d4f7e:	490b      	ldr	r1, [pc, #44]	; (d4fac <_ZN5MQTT522processPacketPubAckRecEhttb+0x6c>)
   d4f80:	4620      	mov	r0, r4
   d4f82:	f7ff f90f 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>

    if (reason != MQTT5_REASON_CODE::SUCCESS) {
   d4f86:	b125      	cbz	r5, d4f92 <_ZN5MQTT522processPacketPubAckRecEhttb+0x52>
        if (callbackPublishFailed)
   d4f88:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d4f8a:	b143      	cbz	r3, d4f9e <_ZN5MQTT522processPacketPubAckRecEhttb+0x5e>
            callbackPublishFailed(reason);
   d4f8c:	4628      	mov	r0, r5
   d4f8e:	4798      	blx	r3
   d4f90:	e005      	b.n	d4f9e <_ZN5MQTT522processPacketPubAckRecEhttb+0x5e>
    } else if (callbackQOS) {
   d4f92:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d4f94:	b11b      	cbz	r3, d4f9e <_ZN5MQTT522processPacketPubAckRecEhttb+0x5e>
        callbackQOS(packetId, !isAck);
   d4f96:	f087 0101 	eor.w	r1, r7, #1
   d4f9a:	4630      	mov	r0, r6
   d4f9c:	4798      	blx	r3
    }
}
   d4f9e:	b005      	add	sp, #20
   d4fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4fa2:	bf00      	nop
   d4fa4:	000db7e1 	.word	0x000db7e1
   d4fa8:	000db7e5 	.word	0x000db7e5
   d4fac:	000db7e9 	.word	0x000db7e9

000d4fb0 <_ZN5MQTT520processPacketPubCompEhtt>:
    if (reason == MQTT5_REASON_CODE::SUCCESS) {
        pubComp(packetId);
    }
}

void MQTT5::processPacketPubComp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d4fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4fb2:	a902      	add	r1, sp, #8
   d4fb4:	461d      	mov	r5, r3
   d4fb6:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d4fba:	4604      	mov	r4, r0
    uint16_t packetId = readInt(&startIndex);
   d4fbc:	f7ff ffb5 	bl	d4f2a <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d4fc0:	2d02      	cmp	r5, #2
   d4fc2:	bf1c      	itt	ne
   d4fc4:	f8bd 3006 	ldrhne.w	r3, [sp, #6]
   d4fc8:	68a1      	ldrne	r1, [r4, #8]
        pubComp(packetId);
    }
}

void MQTT5::processPacketPubComp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d4fca:	4602      	mov	r2, r0
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d4fcc:	bf1e      	ittt	ne
   d4fce:	1c58      	addne	r0, r3, #1
   d4fd0:	f8ad 0006 	strhne.w	r0, [sp, #6]
   d4fd4:	5ccb      	ldrbne	r3, [r1, r3]
    logger.info("Received publish complete for packet %d and response %d", packetId, (uint8_t) reason);
   d4fd6:	4904      	ldr	r1, [pc, #16]	; (d4fe8 <_ZN5MQTT520processPacketPubCompEhtt+0x38>)
    }
}

void MQTT5::processPacketPubComp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d4fd8:	bf08      	it	eq
   d4fda:	2300      	moveq	r3, #0
    logger.info("Received publish complete for packet %d and response %d", packetId, (uint8_t) reason);
   d4fdc:	4620      	mov	r0, r4
   d4fde:	f7ff f8e1 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
}
   d4fe2:	b003      	add	sp, #12
   d4fe4:	bd30      	pop	{r4, r5, pc}
   d4fe6:	bf00      	nop
   d4fe8:	000db81b 	.word	0x000db81b

000d4fec <_ZN5MQTT519processPacketSubAckEhtt>:

void MQTT5::processPacketSubAck(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d4fec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d4ff0:	a904      	add	r1, sp, #16
   d4ff2:	4604      	mov	r4, r0
   d4ff4:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d4ff8:	461e      	mov	r6, r3
    uint16_t packetId = readInt(&startIndex);
   d4ffa:	f7ff ff96 	bl	d4f2a <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d4ffe:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   d5002:	68a3      	ldr	r3, [r4, #8]
   d5004:	1c51      	adds	r1, r2, #1
   d5006:	f8ad 100e 	strh.w	r1, [sp, #14]
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received publish complete for packet %d and response %d", packetId, (uint8_t) reason);
}

void MQTT5::processPacketSubAck(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d500a:	4680      	mov	r8, r0
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d500c:	5c98      	ldrb	r0, [r3, r2]
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
   d500e:	b910      	cbnz	r0, d5016 <_ZN5MQTT519processPacketSubAckEhtt+0x2a>
   d5010:	2501      	movs	r5, #1
        if (callbackSubscribeFailed)
            callbackSubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d5012:	3e02      	subs	r6, #2
   d5014:	e014      	b.n	d5040 <_ZN5MQTT519processPacketSubAckEhtt+0x54>

void MQTT5::processPacketSubAck(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackSubscribeFailed)
   d5016:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d5018:	b1db      	cbz	r3, d5052 <_ZN5MQTT519processPacketSubAckEhtt+0x66>
            callbackSubscribeFailed(reason);
   d501a:	4798      	blx	r3
   d501c:	e019      	b.n	d5052 <_ZN5MQTT519processPacketSubAckEhtt+0x66>
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d501e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d5022:	68a2      	ldr	r2, [r4, #8]
   d5024:	1c59      	adds	r1, r3, #1
   d5026:	f8ad 100e 	strh.w	r1, [sp, #14]
   d502a:	5cd7      	ldrb	r7, [r2, r3]
            logger.info("Received subscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
   d502c:	9700      	str	r7, [sp, #0]
   d502e:	462b      	mov	r3, r5
   d5030:	4642      	mov	r2, r8
   d5032:	4909      	ldr	r1, [pc, #36]	; (d5058 <_ZN5MQTT519processPacketSubAckEhtt+0x6c>)
   d5034:	4620      	mov	r0, r4
   d5036:	f7ff f8b5 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
   d503a:	2f02      	cmp	r7, #2
   d503c:	d803      	bhi.n	d5046 <_ZN5MQTT519processPacketSubAckEhtt+0x5a>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackSubscribeFailed)
            callbackSubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d503e:	3501      	adds	r5, #1
   d5040:	42b5      	cmp	r5, r6
   d5042:	dbec      	blt.n	d501e <_ZN5MQTT519processPacketSubAckEhtt+0x32>
   d5044:	e005      	b.n	d5052 <_ZN5MQTT519processPacketSubAckEhtt+0x66>
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
            logger.info("Received subscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_1 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_2)
                if (callbackSubscribeFailed)
   d5046:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d5048:	2b00      	cmp	r3, #0
   d504a:	d0f8      	beq.n	d503e <_ZN5MQTT519processPacketSubAckEhtt+0x52>
                    callbackSubscribeFailed(reason);
   d504c:	4638      	mov	r0, r7
   d504e:	4798      	blx	r3
   d5050:	e7f5      	b.n	d503e <_ZN5MQTT519processPacketSubAckEhtt+0x52>
        }
    }
}
   d5052:	b004      	add	sp, #16
   d5054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5058:	000db853 	.word	0x000db853

000d505c <_ZN5MQTT518processPacketUnsubEhtt>:

void MQTT5::processPacketUnsub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d505c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5060:	a904      	add	r1, sp, #16
   d5062:	4604      	mov	r4, r0
   d5064:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d5068:	461e      	mov	r6, r3
    uint16_t packetId = readInt(&startIndex);
   d506a:	f7ff ff5e 	bl	d4f2a <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d506e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   d5072:	68a3      	ldr	r3, [r4, #8]
   d5074:	1c51      	adds	r1, r2, #1
   d5076:	f8ad 100e 	strh.w	r1, [sp, #14]
        }
    }
}

void MQTT5::processPacketUnsub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d507a:	4680      	mov	r8, r0
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d507c:	5c98      	ldrb	r0, [r3, r2]
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
   d507e:	b910      	cbnz	r0, d5086 <_ZN5MQTT518processPacketUnsubEhtt+0x2a>
   d5080:	2501      	movs	r5, #1
        if (callbackUnsubscribeFailed)
            callbackUnsubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d5082:	3e02      	subs	r6, #2
   d5084:	e014      	b.n	d50b0 <_ZN5MQTT518processPacketUnsubEhtt+0x54>

void MQTT5::processPacketUnsub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackUnsubscribeFailed)
   d5086:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5088:	b1db      	cbz	r3, d50c2 <_ZN5MQTT518processPacketUnsubEhtt+0x66>
            callbackUnsubscribeFailed(reason);
   d508a:	4798      	blx	r3
   d508c:	e019      	b.n	d50c2 <_ZN5MQTT518processPacketUnsubEhtt+0x66>
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d508e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d5092:	68a2      	ldr	r2, [r4, #8]
   d5094:	1c59      	adds	r1, r3, #1
   d5096:	f8ad 100e 	strh.w	r1, [sp, #14]
   d509a:	5cd7      	ldrb	r7, [r2, r3]
            logger.info("Received unsubscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
   d509c:	9700      	str	r7, [sp, #0]
   d509e:	462b      	mov	r3, r5
   d50a0:	4642      	mov	r2, r8
   d50a2:	4909      	ldr	r1, [pc, #36]	; (d50c8 <_ZN5MQTT518processPacketUnsubEhtt+0x6c>)
   d50a4:	4620      	mov	r0, r4
   d50a6:	f7ff f87d 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
   d50aa:	2f02      	cmp	r7, #2
   d50ac:	d803      	bhi.n	d50b6 <_ZN5MQTT518processPacketUnsubEhtt+0x5a>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackUnsubscribeFailed)
            callbackUnsubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d50ae:	3501      	adds	r5, #1
   d50b0:	42b5      	cmp	r5, r6
   d50b2:	dbec      	blt.n	d508e <_ZN5MQTT518processPacketUnsubEhtt+0x32>
   d50b4:	e005      	b.n	d50c2 <_ZN5MQTT518processPacketUnsubEhtt+0x66>
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
            logger.info("Received unsubscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_1 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_2)
                if (callbackUnsubscribeFailed)
   d50b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d50b8:	2b00      	cmp	r3, #0
   d50ba:	d0f8      	beq.n	d50ae <_ZN5MQTT518processPacketUnsubEhtt+0x52>
                    callbackUnsubscribeFailed(reason);
   d50bc:	4638      	mov	r0, r7
   d50be:	4798      	blx	r3
   d50c0:	e7f5      	b.n	d50ae <_ZN5MQTT518processPacketUnsubEhtt+0x52>
        }
    }
}
   d50c2:	b004      	add	sp, #16
   d50c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d50c8:	000db8a5 	.word	0x000db8a5

000d50cc <_ZN5MQTT58readLongEPt>:
    uint16_t result = buffer[*position] << 8 | buffer[*position + 1];
    (*position) += 2;
    return result;
}

uint32_t MQTT5::readLong(uint16_t *position) {
   d50cc:	b510      	push	{r4, lr}
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
   d50ce:	880c      	ldrh	r4, [r1, #0]
   d50d0:	6883      	ldr	r3, [r0, #8]
   d50d2:	5d18      	ldrb	r0, [r3, r4]
   d50d4:	4423      	add	r3, r4
    (*position) += 4;
   d50d6:	3404      	adds	r4, #4
    (*position) += 2;
    return result;
}

uint32_t MQTT5::readLong(uint16_t *position) {
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
   d50d8:	78da      	ldrb	r2, [r3, #3]
   d50da:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
   d50de:	7858      	ldrb	r0, [r3, #1]
   d50e0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   d50e4:	7898      	ldrb	r0, [r3, #2]
    (*position) += 4;
   d50e6:	800c      	strh	r4, [r1, #0]
    return result;
}
   d50e8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   d50ec:	bd10      	pop	{r4, pc}
	...

000d50f0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt>:
        if (callbackConnectFailed)
            callbackConnectFailed(reasonCode);
    }
}

void MQTT5::processPacketConnAckProperties(uint8_t identifier, uint16_t *index) {
   d50f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (identifier) {
   d50f2:	3911      	subs	r1, #17
        if (callbackConnectFailed)
            callbackConnectFailed(reasonCode);
    }
}

void MQTT5::processPacketConnAckProperties(uint8_t identifier, uint16_t *index) {
   d50f4:	af00      	add	r7, sp, #0
   d50f6:	4604      	mov	r4, r0
   d50f8:	4615      	mov	r5, r2
    switch (identifier) {
   d50fa:	2919      	cmp	r1, #25
   d50fc:	f200 80c5 	bhi.w	d528a <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x19a>
   d5100:	e8df f001 	tbb	[pc, r1]
   d5104:	c37a300d 	.word	0xc37a300d
   d5108:	c3c3bea7 	.word	0xc3c3bea7
   d510c:	94c381c3 	.word	0x94c381c3
   d5110:	c350c3c3 	.word	0xc350c3c3
   d5114:	1cc34313 	.word	0x1cc34313
   d5118:	652a6323 	.word	0x652a6323
   d511c:	736c      	.short	0x736c
        case PROP_SESSION_EXPIRY_INTERVAL:
            logger.trace("Session Expiry Interval: %ld", readLong(index));
   d511e:	4611      	mov	r1, r2
   d5120:	f7ff ffd4 	bl	d50cc <_ZN5MQTT58readLongEPt>
   d5124:	495b      	ldr	r1, [pc, #364]	; (d5294 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a4>)
   d5126:	4602      	mov	r2, r0
   d5128:	e004      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_RECEIVE_MAXIMUM:
            logger.trace("Receive Maximum: %d", readInt(index));
   d512a:	4611      	mov	r1, r2
   d512c:	f7ff fefd 	bl	d4f2a <_ZN5MQTT57readIntEPt>
   d5130:	4959      	ldr	r1, [pc, #356]	; (d5298 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a8>)
   d5132:	4602      	mov	r2, r0
   d5134:	4620      	mov	r0, r4
   d5136:	f7ff fe49 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
            break;
   d513a:	e0a9      	b.n	d5290 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a0>
        case PROP_MAXIMUM_QOS:
            logger.trace("Maximum QoS: %d", buffer[(*index)++]);
   d513c:	882b      	ldrh	r3, [r5, #0]
   d513e:	6882      	ldr	r2, [r0, #8]
   d5140:	1c59      	adds	r1, r3, #1
   d5142:	8029      	strh	r1, [r5, #0]
   d5144:	5cd2      	ldrb	r2, [r2, r3]
   d5146:	4955      	ldr	r1, [pc, #340]	; (d529c <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1ac>)
   d5148:	e7f4      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_RETAIN_AVAILABLE:
            logger.trace("Retain Available: %d", buffer[(*index)++]);
   d514a:	882b      	ldrh	r3, [r5, #0]
   d514c:	6882      	ldr	r2, [r0, #8]
   d514e:	1c59      	adds	r1, r3, #1
   d5150:	8029      	strh	r1, [r5, #0]
   d5152:	5cd2      	ldrb	r2, [r2, r3]
   d5154:	4952      	ldr	r1, [pc, #328]	; (d52a0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1b0>)
   d5156:	e7ed      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_MAXIMUM_PACKET_SIZE:
            logger.trace("Maximum Packet Size: %ld", readLong(index));
   d5158:	4611      	mov	r1, r2
   d515a:	f7ff ffb7 	bl	d50cc <_ZN5MQTT58readLongEPt>
   d515e:	4951      	ldr	r1, [pc, #324]	; (d52a4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1b4>)
   d5160:	4602      	mov	r2, r0
   d5162:	e7e7      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5164:	4611      	mov	r1, r2
   d5166:	f7ff fee0 	bl	d4f2a <_ZN5MQTT57readIntEPt>
        case PROP_MAXIMUM_PACKET_SIZE:
            logger.trace("Maximum Packet Size: %ld", readLong(index));
            break;
        case PROP_ASSIGNED_CLIENT_IDENTIFIER: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d516a:	f100 0208 	add.w	r2, r0, #8
   d516e:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Assigned Client Identifier: %s", str);
            break;
   d5172:	466e      	mov	r6, sp
        case PROP_MAXIMUM_PACKET_SIZE:
            logger.trace("Maximum Packet Size: %ld", readLong(index));
            break;
        case PROP_ASSIGNED_CLIENT_IDENTIFIER: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5174:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5178:	4603      	mov	r3, r0
            logger.trace("Maximum Packet Size: %ld", readLong(index));
            break;
        case PROP_ASSIGNED_CLIENT_IDENTIFIER: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d517a:	466a      	mov	r2, sp
   d517c:	4629      	mov	r1, r5
   d517e:	4620      	mov	r0, r4
   d5180:	f7ff fec2 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Assigned Client Identifier: %s", str);
   d5184:	466a      	mov	r2, sp
   d5186:	4948      	ldr	r1, [pc, #288]	; (d52a8 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1b8>)
   d5188:	e075      	b.n	d5276 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
            break;
        }
        case PROP_TOPIC_ALIAS_MAXIMUM:
            maxTopicAlias = min(maxTopicAlias , readInt(index));
   d518a:	4611      	mov	r1, r2
   d518c:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
   d5190:	f7ff fecb 	bl	d4f2a <_ZN5MQTT57readIntEPt>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5194:	4286      	cmp	r6, r0
   d5196:	4632      	mov	r2, r6
   d5198:	bf28      	it	cs
   d519a:	4602      	movcs	r2, r0
   d519c:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
   d51a0:	4942      	ldr	r1, [pc, #264]	; (d52ac <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1bc>)
   d51a2:	e7c7      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d51a4:	4611      	mov	r1, r2
   d51a6:	f7ff fec0 	bl	d4f2a <_ZN5MQTT57readIntEPt>
            maxTopicAlias = min(maxTopicAlias , readInt(index));
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
            break;
        case PROP_REASON_STRING: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d51aa:	f100 0208 	add.w	r2, r0, #8
   d51ae:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Reason String: %s", str);
            break;
   d51b2:	466e      	mov	r6, sp
            maxTopicAlias = min(maxTopicAlias , readInt(index));
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
            break;
        case PROP_REASON_STRING: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d51b4:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d51b8:	4603      	mov	r3, r0
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
            break;
        case PROP_REASON_STRING: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d51ba:	466a      	mov	r2, sp
   d51bc:	4629      	mov	r1, r5
   d51be:	4620      	mov	r0, r4
   d51c0:	f7ff fea2 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Reason String: %s", str);
   d51c4:	466a      	mov	r2, sp
   d51c6:	493a      	ldr	r1, [pc, #232]	; (d52b0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1c0>)
   d51c8:	e055      	b.n	d5276 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
            break;
        }
        case PROP_USER_PROPERTY:
            logger.trace("User Property");
   d51ca:	493a      	ldr	r1, [pc, #232]	; (d52b4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1c4>)
   d51cc:	e059      	b.n	d5282 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x192>
            break;
        case PROP_WILDCARD_SUBSCRIPTION_AVAILABLE:
            logger.trace("Wildcard Subscription Available: %d", buffer[(*index)++]);
   d51ce:	882b      	ldrh	r3, [r5, #0]
   d51d0:	6882      	ldr	r2, [r0, #8]
   d51d2:	1c59      	adds	r1, r3, #1
   d51d4:	8029      	strh	r1, [r5, #0]
   d51d6:	5cd2      	ldrb	r2, [r2, r3]
   d51d8:	4937      	ldr	r1, [pc, #220]	; (d52b8 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1c8>)
   d51da:	e7ab      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE:
            logger.trace("Subscription Identifiers Available: %d", buffer[(*index)++]);
   d51dc:	882b      	ldrh	r3, [r5, #0]
   d51de:	6882      	ldr	r2, [r0, #8]
   d51e0:	1c59      	adds	r1, r3, #1
   d51e2:	8029      	strh	r1, [r5, #0]
   d51e4:	5cd2      	ldrb	r2, [r2, r3]
   d51e6:	4935      	ldr	r1, [pc, #212]	; (d52bc <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1cc>)
   d51e8:	e7a4      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_SHARED_SUBSCRIPTION_AVAILABLE:
            logger.trace("Shared Subscription Available: %d", buffer[(*index)++]);
   d51ea:	882b      	ldrh	r3, [r5, #0]
   d51ec:	6882      	ldr	r2, [r0, #8]
   d51ee:	1c59      	adds	r1, r3, #1
   d51f0:	8029      	strh	r1, [r5, #0]
   d51f2:	5cd2      	ldrb	r2, [r2, r3]
   d51f4:	4932      	ldr	r1, [pc, #200]	; (d52c0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1d0>)
   d51f6:	e79d      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_SERVER_KEEP_ALIVE:
            keepAlive = readInt(index);
   d51f8:	4611      	mov	r1, r2
   d51fa:	f7ff fe96 	bl	d4f2a <_ZN5MQTT57readIntEPt>
            logger.trace("Server Keep Alive: %d", keepAlive);
   d51fe:	4931      	ldr	r1, [pc, #196]	; (d52c4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1d4>)
            break;
        case PROP_SHARED_SUBSCRIPTION_AVAILABLE:
            logger.trace("Shared Subscription Available: %d", buffer[(*index)++]);
            break;
        case PROP_SERVER_KEEP_ALIVE:
            keepAlive = readInt(index);
   d5200:	84e0      	strh	r0, [r4, #38]	; 0x26
   d5202:	4602      	mov	r2, r0
   d5204:	e796      	b.n	d5134 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5206:	4611      	mov	r1, r2
   d5208:	f7ff fe8f 	bl	d4f2a <_ZN5MQTT57readIntEPt>
            keepAlive = readInt(index);
            logger.trace("Server Keep Alive: %d", keepAlive);
            break;
        case PROP_RESPONSE_INFORMATION: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d520c:	f100 0208 	add.w	r2, r0, #8
   d5210:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Response Information: %s", str);
            break;
   d5214:	466e      	mov	r6, sp
            keepAlive = readInt(index);
            logger.trace("Server Keep Alive: %d", keepAlive);
            break;
        case PROP_RESPONSE_INFORMATION: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5216:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d521a:	4603      	mov	r3, r0
            logger.trace("Server Keep Alive: %d", keepAlive);
            break;
        case PROP_RESPONSE_INFORMATION: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d521c:	466a      	mov	r2, sp
   d521e:	4629      	mov	r1, r5
   d5220:	4620      	mov	r0, r4
   d5222:	f7ff fe71 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Response Information: %s", str);
   d5226:	466a      	mov	r2, sp
   d5228:	4927      	ldr	r1, [pc, #156]	; (d52c8 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1d8>)
   d522a:	e024      	b.n	d5276 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d522c:	4611      	mov	r1, r2
   d522e:	f7ff fe7c 	bl	d4f2a <_ZN5MQTT57readIntEPt>
            logger.trace("Response Information: %s", str);
            break;
        }
        case PROP_SERVER_REFERENCE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5232:	f100 0208 	add.w	r2, r0, #8
   d5236:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Server Reference: %s", str);
            break;
   d523a:	466e      	mov	r6, sp
            logger.trace("Response Information: %s", str);
            break;
        }
        case PROP_SERVER_REFERENCE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d523c:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5240:	4603      	mov	r3, r0
            break;
        }
        case PROP_SERVER_REFERENCE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d5242:	466a      	mov	r2, sp
   d5244:	4629      	mov	r1, r5
   d5246:	4620      	mov	r0, r4
   d5248:	f7ff fe5e 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Server Reference: %s", str);
   d524c:	466a      	mov	r2, sp
   d524e:	491f      	ldr	r1, [pc, #124]	; (d52cc <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1dc>)
   d5250:	e011      	b.n	d5276 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5252:	4611      	mov	r1, r2
   d5254:	f7ff fe69 	bl	d4f2a <_ZN5MQTT57readIntEPt>
            logger.trace("Server Reference: %s", str);
            break;
        }
        case PROP_AUTHENTICATION_METHOD: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5258:	f100 0208 	add.w	r2, r0, #8
   d525c:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Authentication Method: %s", str);
            break;
   d5260:	466e      	mov	r6, sp
            logger.trace("Server Reference: %s", str);
            break;
        }
        case PROP_AUTHENTICATION_METHOD: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5262:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5266:	4603      	mov	r3, r0
            break;
        }
        case PROP_AUTHENTICATION_METHOD: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d5268:	466a      	mov	r2, sp
   d526a:	4629      	mov	r1, r5
   d526c:	4620      	mov	r0, r4
   d526e:	f7ff fe4b 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Authentication Method: %s", str);
   d5272:	4917      	ldr	r1, [pc, #92]	; (d52d0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1e0>)
   d5274:	466a      	mov	r2, sp
   d5276:	4620      	mov	r0, r4
   d5278:	f7ff fda8 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
   d527c:	46b5      	mov	sp, r6
   d527e:	e007      	b.n	d5290 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a0>
            break;
        }
        case PROP_AUTHENTICATION_DATA:
            logger.trace("Authentication Data");
   d5280:	4914      	ldr	r1, [pc, #80]	; (d52d4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1e4>)
   d5282:	4620      	mov	r0, r4
   d5284:	f7ff fda2 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
            break;
   d5288:	e002      	b.n	d5290 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a0>
        default:
            logger.warn("Unknown connect property");
   d528a:	4913      	ldr	r1, [pc, #76]	; (d52d8 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1e8>)
   d528c:	f7ff fdac 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
            break;
    }
}
   d5290:	46bd      	mov	sp, r7
   d5292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5294:	000db8f9 	.word	0x000db8f9
   d5298:	000db916 	.word	0x000db916
   d529c:	000db92a 	.word	0x000db92a
   d52a0:	000db93a 	.word	0x000db93a
   d52a4:	000db94f 	.word	0x000db94f
   d52a8:	000db968 	.word	0x000db968
   d52ac:	000db987 	.word	0x000db987
   d52b0:	000db99f 	.word	0x000db99f
   d52b4:	000db9b1 	.word	0x000db9b1
   d52b8:	000db9bf 	.word	0x000db9bf
   d52bc:	000db9e3 	.word	0x000db9e3
   d52c0:	000dba0a 	.word	0x000dba0a
   d52c4:	000dba2c 	.word	0x000dba2c
   d52c8:	000dba42 	.word	0x000dba42
   d52cc:	000dba5b 	.word	0x000dba5b
   d52d0:	000dba70 	.word	0x000dba70
   d52d4:	000dba8a 	.word	0x000dba8a
   d52d8:	000dba9e 	.word	0x000dba9e

000d52dc <_ZN5MQTT526processPacketPubPropertiesEhPt>:
        pubAck(packetId);
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
   d52dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (identifier) {
   d52de:	2908      	cmp	r1, #8
        pubAck(packetId);
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
   d52e0:	af00      	add	r7, sp, #0
   d52e2:	4604      	mov	r4, r0
   d52e4:	4615      	mov	r5, r2
    switch (identifier) {
   d52e6:	d029      	beq.n	d533c <_ZN5MQTT526processPacketPubPropertiesEhPt+0x60>
   d52e8:	d80c      	bhi.n	d5304 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x28>
   d52ea:	2902      	cmp	r1, #2
   d52ec:	d017      	beq.n	d531e <_ZN5MQTT526processPacketPubPropertiesEhPt+0x42>
   d52ee:	2903      	cmp	r1, #3
   d52f0:	d03b      	beq.n	d536a <_ZN5MQTT526processPacketPubPropertiesEhPt+0x8e>
   d52f2:	2901      	cmp	r1, #1
   d52f4:	d150      	bne.n	d5398 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xbc>
        case PROP_PAYLOAD_FORMAT_INDICATOR:
            logger.trace("Payload Format Indicator: %d", buffer[(*index)++]);
   d52f6:	882b      	ldrh	r3, [r5, #0]
   d52f8:	6882      	ldr	r2, [r0, #8]
   d52fa:	1c59      	adds	r1, r3, #1
   d52fc:	8029      	strh	r1, [r5, #0]
   d52fe:	5cd2      	ldrb	r2, [r2, r3]
   d5300:	4928      	ldr	r1, [pc, #160]	; (d53a4 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc8>)
   d5302:	e012      	b.n	d532a <_ZN5MQTT526processPacketPubPropertiesEhPt+0x4e>
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
    switch (identifier) {
   d5304:	290b      	cmp	r1, #11
   d5306:	d02c      	beq.n	d5362 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x86>
   d5308:	d803      	bhi.n	d5312 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x36>
   d530a:	2909      	cmp	r1, #9
   d530c:	d144      	bne.n	d5398 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xbc>
            readUTF8String(index, str, len);
            logger.trace("Response Topic: %s", str);
            break;
        }
        case PROP_CORRELATION_DATA:
            logger.trace("Correlation Data");
   d530e:	4926      	ldr	r1, [pc, #152]	; (d53a8 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xcc>)
   d5310:	e028      	b.n	d5364 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x88>
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
    switch (identifier) {
   d5312:	2923      	cmp	r1, #35	; 0x23
   d5314:	d00c      	beq.n	d5330 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x54>
   d5316:	2926      	cmp	r1, #38	; 0x26
   d5318:	d13e      	bne.n	d5398 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xbc>
        }
        case PROP_CORRELATION_DATA:
            logger.trace("Correlation Data");
            break;
        case PROP_USER_PROPERTY:
            logger.trace("User Property");
   d531a:	4924      	ldr	r1, [pc, #144]	; (d53ac <_ZN5MQTT526processPacketPubPropertiesEhPt+0xd0>)
   d531c:	e022      	b.n	d5364 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x88>
    switch (identifier) {
        case PROP_PAYLOAD_FORMAT_INDICATOR:
            logger.trace("Payload Format Indicator: %d", buffer[(*index)++]);
            break;
        case PROP_MESSAGE_EXPIRY_INTERVAL:
            logger.trace("Message Expiry Interval: %ld", readLong(index));
   d531e:	4611      	mov	r1, r2
   d5320:	f7ff fed4 	bl	d50cc <_ZN5MQTT58readLongEPt>
   d5324:	4922      	ldr	r1, [pc, #136]	; (d53b0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xd4>)
   d5326:	4602      	mov	r2, r0
   d5328:	4620      	mov	r0, r4
   d532a:	f7ff fd4f 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
            break;
   d532e:	e037      	b.n	d53a0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc4>
        case PROP_TOPIC_ALIAS:
            logger.trace("Topic Alias: %d", readInt(index));
   d5330:	4611      	mov	r1, r2
   d5332:	f7ff fdfa 	bl	d4f2a <_ZN5MQTT57readIntEPt>
   d5336:	491f      	ldr	r1, [pc, #124]	; (d53b4 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xd8>)
   d5338:	4602      	mov	r2, r0
   d533a:	e7f5      	b.n	d5328 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x4c>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d533c:	4611      	mov	r1, r2
   d533e:	f7ff fdf4 	bl	d4f2a <_ZN5MQTT57readIntEPt>
        case PROP_TOPIC_ALIAS:
            logger.trace("Topic Alias: %d", readInt(index));
            break;
        case PROP_RESPONSE_TOPIC: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5342:	f100 0208 	add.w	r2, r0, #8
   d5346:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Response Topic: %s", str);
            break;
   d534a:	466e      	mov	r6, sp
        case PROP_TOPIC_ALIAS:
            logger.trace("Topic Alias: %d", readInt(index));
            break;
        case PROP_RESPONSE_TOPIC: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d534c:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5350:	4603      	mov	r3, r0
            logger.trace("Topic Alias: %d", readInt(index));
            break;
        case PROP_RESPONSE_TOPIC: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d5352:	466a      	mov	r2, sp
   d5354:	4629      	mov	r1, r5
   d5356:	4620      	mov	r0, r4
   d5358:	f7ff fdd6 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Response Topic: %s", str);
   d535c:	466a      	mov	r2, sp
   d535e:	4916      	ldr	r1, [pc, #88]	; (d53b8 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xdc>)
   d5360:	e015      	b.n	d538e <_ZN5MQTT526processPacketPubPropertiesEhPt+0xb2>
            break;
        case PROP_USER_PROPERTY:
            logger.trace("User Property");
            break;
        case PROP_SUBSCRIPTION_IDENTIFIER:
            logger.trace("Subscription Identifier");
   d5362:	4916      	ldr	r1, [pc, #88]	; (d53bc <_ZN5MQTT526processPacketPubPropertiesEhPt+0xe0>)
   d5364:	f7ff fd32 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
            break;
   d5368:	e01a      	b.n	d53a0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc4>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d536a:	4611      	mov	r1, r2
   d536c:	f7ff fddd 	bl	d4f2a <_ZN5MQTT57readIntEPt>
        case PROP_SUBSCRIPTION_IDENTIFIER:
            logger.trace("Subscription Identifier");
            break;
        case PROP_CONTENT_TYPE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5370:	f100 0208 	add.w	r2, r0, #8
   d5374:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Content Type: %s", str);
            break;
   d5378:	466e      	mov	r6, sp
        case PROP_SUBSCRIPTION_IDENTIFIER:
            logger.trace("Subscription Identifier");
            break;
        case PROP_CONTENT_TYPE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d537a:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d537e:	4603      	mov	r3, r0
            logger.trace("Subscription Identifier");
            break;
        case PROP_CONTENT_TYPE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d5380:	466a      	mov	r2, sp
   d5382:	4629      	mov	r1, r5
   d5384:	4620      	mov	r0, r4
   d5386:	f7ff fdbf 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Content Type: %s", str);
   d538a:	490d      	ldr	r1, [pc, #52]	; (d53c0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xe4>)
   d538c:	466a      	mov	r2, sp
   d538e:	4620      	mov	r0, r4
   d5390:	f7ff fd1c 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
   d5394:	46b5      	mov	sp, r6
   d5396:	e003      	b.n	d53a0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc4>
            break;
        }
        default:
            logger.warn("Unknown publish property");
   d5398:	490a      	ldr	r1, [pc, #40]	; (d53c4 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xe8>)
   d539a:	4620      	mov	r0, r4
   d539c:	f7ff fd24 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
            break;
    }
}
   d53a0:	46bd      	mov	sp, r7
   d53a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d53a4:	000dbab7 	.word	0x000dbab7
   d53a8:	000dbb14 	.word	0x000dbb14
   d53ac:	000db9b1 	.word	0x000db9b1
   d53b0:	000dbad4 	.word	0x000dbad4
   d53b4:	000dbaf1 	.word	0x000dbaf1
   d53b8:	000dbb01 	.word	0x000dbb01
   d53bc:	000dbb25 	.word	0x000dbb25
   d53c0:	000dbb3d 	.word	0x000dbb3d
   d53c4:	000dbb4e 	.word	0x000dbb4e

000d53c8 <_ZN5MQTT513writeToSocketEtb>:
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
    (*position) += 4;
    return result;
}

bool MQTT5::writeToSocket(uint16_t length, bool increasePacketsInFlight) {
   d53c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53ca:	4604      	mov	r4, r0
#ifdef MQTT5_DEBUG
    logger.trace("Write %d bytes:", length);
    logger.dump(buffer, length);
    logger.print("\n");
#endif
    uint16_t bytesWritten = socket->write(buffer, length);
   d53cc:	6840      	ldr	r0, [r0, #4]
   d53ce:	6803      	ldr	r3, [r0, #0]
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
    (*position) += 4;
    return result;
}

bool MQTT5::writeToSocket(uint16_t length, bool increasePacketsInFlight) {
   d53d0:	460d      	mov	r5, r1
#ifdef MQTT5_DEBUG
    logger.trace("Write %d bytes:", length);
    logger.dump(buffer, length);
    logger.print("\n");
#endif
    uint16_t bytesWritten = socket->write(buffer, length);
   d53d2:	68db      	ldr	r3, [r3, #12]
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
    (*position) += 4;
    return result;
}

bool MQTT5::writeToSocket(uint16_t length, bool increasePacketsInFlight) {
   d53d4:	4617      	mov	r7, r2
#ifdef MQTT5_DEBUG
    logger.trace("Write %d bytes:", length);
    logger.dump(buffer, length);
    logger.print("\n");
#endif
    uint16_t bytesWritten = socket->write(buffer, length);
   d53d6:	460a      	mov	r2, r1
   d53d8:	68a1      	ldr	r1, [r4, #8]
   d53da:	4798      	blx	r3
   d53dc:	b286      	uxth	r6, r0
    socket->flush();
   d53de:	6860      	ldr	r0, [r4, #4]
   d53e0:	6803      	ldr	r3, [r0, #0]
   d53e2:	69db      	ldr	r3, [r3, #28]
   d53e4:	4798      	blx	r3
   d53e6:	f000 ff63 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
    lastOutbound = millis();
   d53ea:	61a0      	str	r0, [r4, #24]
    if (increasePacketsInFlight)
   d53ec:	b127      	cbz	r7, d53f8 <_ZN5MQTT513writeToSocketEtb+0x30>
        packetsInFlight++;
   d53ee:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   d53f2:	3301      	adds	r3, #1
   d53f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return (bytesWritten == length);
}
   d53f8:	1bab      	subs	r3, r5, r6
   d53fa:	4258      	negs	r0, r3
   d53fc:	4158      	adcs	r0, r3
   d53fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>:

bool MQTT5::writeVariableByteInteger(uint16_t *position, uint16_t length) {
   d5400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t lenBuf[4] = {0};
   d5402:	2300      	movs	r3, #0
    if (increasePacketsInFlight)
        packetsInFlight++;
    return (bytesWritten == length);
}

bool MQTT5::writeVariableByteInteger(uint16_t *position, uint16_t length) {
   d5404:	4607      	mov	r7, r0
   d5406:	460d      	mov	r5, r1
   d5408:	4616      	mov	r6, r2
    uint8_t lenBuf[4] = {0};
   d540a:	9301      	str	r3, [sp, #4]
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t len = length;
   d540c:	4614      	mov	r4, r2
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d540e:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t len = length;
    // Calculate variable byte integer (see 1.5.5)
    do {
        digit = len % 128;
   d5410:	f004 027f 	and.w	r2, r4, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5414:	fa51 f183 	uxtab	r1, r1, r3
    uint16_t len = length;
    // Calculate variable byte integer (see 1.5.5)
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d5418:	09e4      	lsrs	r4, r4, #7
            digit |= 0x80;
   d541a:	bf18      	it	ne
   d541c:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
        }
        lenBuf[pos++] = digit;
   d5420:	f801 2c04 	strb.w	r2, [r1, #-4]
   d5424:	3301      	adds	r3, #1
        llen++;
    } while(len > 0);
   d5426:	2c00      	cmp	r4, #0
   d5428:	d1f1      	bne.n	d540e <_ZN5MQTT524writeVariableByteIntegerEPtt+0xe>
    // Add integer with zero
    if (len == 0) 
        llen = 1;

    // Check if content fits in buffer
    if ((*position) + llen + length > maxPacketSize) {
   d542a:	8829      	ldrh	r1, [r5, #0]
   d542c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   d542e:	1c4b      	adds	r3, r1, #1
   d5430:	1998      	adds	r0, r3, r6
   d5432:	4290      	cmp	r0, r2
   d5434:	dd05      	ble.n	d5442 <_ZN5MQTT524writeVariableByteIntegerEPtt+0x42>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d5436:	4638      	mov	r0, r7
   d5438:	490b      	ldr	r1, [pc, #44]	; (d5468 <_ZN5MQTT524writeVariableByteIntegerEPtt+0x68>)
   d543a:	f7ff fcd5 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d543e:	4620      	mov	r0, r4
   d5440:	e00f      	b.n	d5462 <_ZN5MQTT524writeVariableByteIntegerEPtt+0x62>
    }

    // Move current contents of the buffer to make space for the integer
    memmove(buffer + (*position) + llen, buffer + (*position), length);
   d5442:	68b8      	ldr	r0, [r7, #8]
   d5444:	4632      	mov	r2, r6
   d5446:	4401      	add	r1, r0
   d5448:	4418      	add	r0, r3
   d544a:	f005 fd45 	bl	daed8 <memmove>
    memcpy(buffer + (*position), lenBuf, llen); // set remaining length
   d544e:	68ba      	ldr	r2, [r7, #8]
   d5450:	882b      	ldrh	r3, [r5, #0]
   d5452:	f89d 1004 	ldrb.w	r1, [sp, #4]
   d5456:	54d1      	strb	r1, [r2, r3]
    *position += llen + length;
   d5458:	882a      	ldrh	r2, [r5, #0]
   d545a:	4432      	add	r2, r6
   d545c:	3201      	adds	r2, #1
   d545e:	802a      	strh	r2, [r5, #0]
    return true;
   d5460:	2001      	movs	r0, #1
}
   d5462:	b003      	add	sp, #12
   d5464:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5466:	bf00      	nop
   d5468:	000dbb67 	.word	0x000dbb67

000d546c <_ZN5MQTT515writeUTF8StringEPtPKct>:

bool MQTT5::writeUTF8String(uint16_t *position, const char* str, uint16_t length) {
   d546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d546e:	460c      	mov	r4, r1
   d5470:	461d      	mov	r5, r3
    if ((*position) + length + 2 > maxPacketSize) {
   d5472:	8823      	ldrh	r3, [r4, #0]
    memcpy(buffer + (*position), lenBuf, llen); // set remaining length
    *position += llen + length;
    return true;
}

bool MQTT5::writeUTF8String(uint16_t *position, const char* str, uint16_t length) {
   d5474:	4611      	mov	r1, r2
    if ((*position) + length + 2 > maxPacketSize) {
   d5476:	195f      	adds	r7, r3, r5
   d5478:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   d547a:	3701      	adds	r7, #1
   d547c:	4297      	cmp	r7, r2
    memcpy(buffer + (*position), lenBuf, llen); // set remaining length
    *position += llen + length;
    return true;
}

bool MQTT5::writeUTF8String(uint16_t *position, const char* str, uint16_t length) {
   d547e:	4606      	mov	r6, r0
    if ((*position) + length + 2 > maxPacketSize) {
   d5480:	db04      	blt.n	d548c <_ZN5MQTT515writeUTF8StringEPtPKct+0x20>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d5482:	490d      	ldr	r1, [pc, #52]	; (d54b8 <_ZN5MQTT515writeUTF8StringEPtPKct+0x4c>)
   d5484:	f7ff fcb0 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d5488:	2000      	movs	r0, #0
   d548a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    buffer[(*position)++] = length >> 8;
   d548c:	6882      	ldr	r2, [r0, #8]
   d548e:	1c58      	adds	r0, r3, #1
   d5490:	8020      	strh	r0, [r4, #0]
   d5492:	1228      	asrs	r0, r5, #8
   d5494:	54d0      	strb	r0, [r2, r3]
    buffer[(*position)++] = length & 0xFF;
   d5496:	8823      	ldrh	r3, [r4, #0]
   d5498:	68b2      	ldr	r2, [r6, #8]
   d549a:	1c58      	adds	r0, r3, #1
   d549c:	8020      	strh	r0, [r4, #0]
   d549e:	54d5      	strb	r5, [r2, r3]
    memcpy(buffer + (*position), str, length);
   d54a0:	8823      	ldrh	r3, [r4, #0]
   d54a2:	68b0      	ldr	r0, [r6, #8]
   d54a4:	462a      	mov	r2, r5
   d54a6:	4418      	add	r0, r3
   d54a8:	f005 fd0b 	bl	daec2 <memcpy>
    *position += length;
   d54ac:	8823      	ldrh	r3, [r4, #0]
   d54ae:	441d      	add	r5, r3
   d54b0:	8025      	strh	r5, [r4, #0]
    return true;
   d54b2:	2001      	movs	r0, #1
}
   d54b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d54b6:	bf00      	nop
   d54b8:	000dbb67 	.word	0x000dbb67

000d54bc <_ZN5MQTT59writeByteEPth>:

bool MQTT5::writeByte(uint16_t *position, uint8_t content) {
   d54bc:	b538      	push	{r3, r4, r5, lr}
   d54be:	4615      	mov	r5, r2
    if ((*position) + 1 > maxPacketSize) {
   d54c0:	880b      	ldrh	r3, [r1, #0]
   d54c2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   d54c4:	4293      	cmp	r3, r2
   d54c6:	db04      	blt.n	d54d2 <_ZN5MQTT59writeByteEPth+0x16>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d54c8:	4905      	ldr	r1, [pc, #20]	; (d54e0 <_ZN5MQTT59writeByteEPth+0x24>)
   d54ca:	f7ff fc8d 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d54ce:	2000      	movs	r0, #0
   d54d0:	bd38      	pop	{r3, r4, r5, pc}
    }
    buffer[(*position)++] = content;
   d54d2:	6880      	ldr	r0, [r0, #8]
   d54d4:	1c5a      	adds	r2, r3, #1
   d54d6:	800a      	strh	r2, [r1, #0]
   d54d8:	54c5      	strb	r5, [r0, r3]
    return true;
   d54da:	2001      	movs	r0, #1
}
   d54dc:	bd38      	pop	{r3, r4, r5, pc}
   d54de:	bf00      	nop
   d54e0:	000dbb67 	.word	0x000dbb67

000d54e4 <_ZN5MQTT54pingEv>:

    logger.info("Unsubscribe was issued for %d topics with packet id %d", topicLength, nextPacketId - 1);
    return writeToSocket(index);
}

bool MQTT5::ping() {
   d54e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d54e6:	ad02      	add	r5, sp, #8
   d54e8:	2600      	movs	r6, #0
   d54ea:	f825 6d02 	strh.w	r6, [r5, #-2]!
    // 3.12.1 PINGREQ Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PINGREQ << 4)))
   d54ee:	22c0      	movs	r2, #192	; 0xc0
   d54f0:	4629      	mov	r1, r5

    logger.info("Unsubscribe was issued for %d topics with packet id %d", topicLength, nextPacketId - 1);
    return writeToSocket(index);
}

bool MQTT5::ping() {
   d54f2:	4604      	mov	r4, r0
    uint16_t index = 0;
    // 3.12.1 PINGREQ Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PINGREQ << 4)))
   d54f4:	f7ff ffe2 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d54f8:	b908      	cbnz	r0, d54fe <_ZN5MQTT54pingEv+0x1a>
        return false;
   d54fa:	2000      	movs	r0, #0
   d54fc:	e013      	b.n	d5526 <_ZN5MQTT54pingEv+0x42>

    if (!writeByte(&index, 0))
   d54fe:	4632      	mov	r2, r6
   d5500:	4629      	mov	r1, r5
   d5502:	4620      	mov	r0, r4
   d5504:	f7ff ffda 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5508:	2800      	cmp	r0, #0
   d550a:	d0f6      	beq.n	d54fa <_ZN5MQTT54pingEv+0x16>
        return false;

    logger.info("Sending ping request");
   d550c:	4907      	ldr	r1, [pc, #28]	; (d552c <_ZN5MQTT54pingEv+0x48>)
   d550e:	4620      	mov	r0, r4
   d5510:	f7fe fe48 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5514:	f000 fecc 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
    lastPingSent = millis();
    return writeToSocket(index, false);
   d5518:	4632      	mov	r2, r6

    if (!writeByte(&index, 0))
        return false;

    logger.info("Sending ping request");
    lastPingSent = millis();
   d551a:	6220      	str	r0, [r4, #32]
    return writeToSocket(index, false);
   d551c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d5520:	4620      	mov	r0, r4
   d5522:	f7ff ff51 	bl	d53c8 <_ZN5MQTT513writeToSocketEtb>
}
   d5526:	b002      	add	sp, #8
   d5528:	bd70      	pop	{r4, r5, r6, pc}
   d552a:	bf00      	nop
   d552c:	000dbb89 	.word	0x000dbb89

000d5530 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE>:
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
}

bool MQTT5::disconnectWithReason(MQTT5_REASON_CODE reason) {
   d5530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t index = 0;
   d5532:	ac02      	add	r4, sp, #8
   d5534:	2600      	movs	r6, #0
   d5536:	f824 6d02 	strh.w	r6, [r4, #-2]!
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
}

bool MQTT5::disconnectWithReason(MQTT5_REASON_CODE reason) {
   d553a:	460f      	mov	r7, r1
    uint16_t index = 0;
    // 3.14.1 DISCONNECT Fixed Header
    if (!writeByte(&index, CTRL_DISCONNECT << 4))
   d553c:	22e0      	movs	r2, #224	; 0xe0
   d553e:	4621      	mov	r1, r4
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
}

bool MQTT5::disconnectWithReason(MQTT5_REASON_CODE reason) {
   d5540:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.14.1 DISCONNECT Fixed Header
    if (!writeByte(&index, CTRL_DISCONNECT << 4))
   d5542:	f7ff ffbb 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5546:	b908      	cbnz	r0, d554c <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x1c>
        return false;
   d5548:	2000      	movs	r0, #0
   d554a:	e025      	b.n	d5598 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x68>

    // 3.14.2.1 Disconnect Reason Code
    if (!writeByte(&index, (uint8_t) reason))
   d554c:	463a      	mov	r2, r7
   d554e:	4621      	mov	r1, r4
   d5550:	4628      	mov	r0, r5
   d5552:	f7ff ffb3 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5556:	2800      	cmp	r0, #0
   d5558:	d0f6      	beq.n	d5548 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x18>
        return false;
        
    // 3.14.2.2 DISCONNECT Properties
    if (!writeVariableByteInteger(&index, 0))
   d555a:	4632      	mov	r2, r6
   d555c:	4621      	mov	r1, r4
   d555e:	4628      	mov	r0, r5
   d5560:	f7ff ff4e 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5564:	2800      	cmp	r0, #0
   d5566:	d0ef      	beq.n	d5548 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x18>
        return false;

    // 3.14.1 DISCONNECT Fixed Header Remaining Length
    uint16_t len = index - 1;
   d5568:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d556c:	3a01      	subs	r2, #1
    index = 1;
   d556e:	2601      	movs	r6, #1
    if (!writeVariableByteInteger(&index, len))
   d5570:	b292      	uxth	r2, r2
   d5572:	4621      	mov	r1, r4
   d5574:	4628      	mov	r0, r5
    if (!writeVariableByteInteger(&index, 0))
        return false;

    // 3.14.1 DISCONNECT Fixed Header Remaining Length
    uint16_t len = index - 1;
    index = 1;
   d5576:	f8ad 6006 	strh.w	r6, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d557a:	f7ff ff41 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d557e:	2800      	cmp	r0, #0
   d5580:	d0e2      	beq.n	d5548 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x18>
        return false;

    logger.info("Sending disconnect with reason %d", (uint8_t) reason);
   d5582:	463a      	mov	r2, r7
   d5584:	4905      	ldr	r1, [pc, #20]	; (d559c <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x6c>)
   d5586:	4628      	mov	r0, r5
   d5588:	f7fe fe0c 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index);
   d558c:	4632      	mov	r2, r6
   d558e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d5592:	4628      	mov	r0, r5
   d5594:	f7ff ff18 	bl	d53c8 <_ZN5MQTT513writeToSocketEtb>
}
   d5598:	b003      	add	sp, #12
   d559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d559c:	000dbb9e 	.word	0x000dbb9e

000d55a0 <_ZN5MQTT510writeBytesEPtPKht>:
    }
    buffer[(*position)++] = content;
    return true;
}

bool MQTT5::writeBytes(uint16_t *position, const uint8_t *payload, uint16_t payloadLength) {
   d55a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d55a2:	460c      	mov	r4, r1
   d55a4:	461d      	mov	r5, r3
    if ((*position) + payloadLength > maxPacketSize) {
   d55a6:	8823      	ldrh	r3, [r4, #0]
    }
    buffer[(*position)++] = content;
    return true;
}

bool MQTT5::writeBytes(uint16_t *position, const uint8_t *payload, uint16_t payloadLength) {
   d55a8:	4611      	mov	r1, r2
    if ((*position) + payloadLength > maxPacketSize) {
   d55aa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   d55ac:	195f      	adds	r7, r3, r5
   d55ae:	4297      	cmp	r7, r2
   d55b0:	dd04      	ble.n	d55bc <_ZN5MQTT510writeBytesEPtPKht+0x1c>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d55b2:	4907      	ldr	r1, [pc, #28]	; (d55d0 <_ZN5MQTT510writeBytesEPtPKht+0x30>)
   d55b4:	f7ff fc18 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d55b8:	2000      	movs	r0, #0
   d55ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    memcpy(buffer + (*position), payload, payloadLength);
   d55bc:	6880      	ldr	r0, [r0, #8]
   d55be:	462a      	mov	r2, r5
   d55c0:	4418      	add	r0, r3
   d55c2:	f005 fc7e 	bl	daec2 <memcpy>
    *position += payloadLength;
   d55c6:	8822      	ldrh	r2, [r4, #0]
   d55c8:	18ab      	adds	r3, r5, r2
   d55ca:	8023      	strh	r3, [r4, #0]
    return true;
   d55cc:	2001      	movs	r0, #1
}
   d55ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d55d0:	000dbb67 	.word	0x000dbb67

000d55d4 <_ZN5MQTT58writeIntEPtt>:

bool MQTT5::writeInt(uint16_t *position, uint16_t content) {
   d55d4:	b570      	push	{r4, r5, r6, lr}
    if ((*position) + 2 > maxPacketSize) {
   d55d6:	880c      	ldrh	r4, [r1, #0]
   d55d8:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
   d55da:	1c65      	adds	r5, r4, #1
   d55dc:	42b5      	cmp	r5, r6
    memcpy(buffer + (*position), payload, payloadLength);
    *position += payloadLength;
    return true;
}

bool MQTT5::writeInt(uint16_t *position, uint16_t content) {
   d55de:	4603      	mov	r3, r0
    if ((*position) + 2 > maxPacketSize) {
   d55e0:	db05      	blt.n	d55ee <_ZN5MQTT58writeIntEPtt+0x1a>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d55e2:	4632      	mov	r2, r6
   d55e4:	4907      	ldr	r1, [pc, #28]	; (d5604 <_ZN5MQTT58writeIntEPtt+0x30>)
   d55e6:	f7ff fbff 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d55ea:	2000      	movs	r0, #0
   d55ec:	bd70      	pop	{r4, r5, r6, pc}
    }
    buffer[(*position)++] = content >> 8;
   d55ee:	6880      	ldr	r0, [r0, #8]
   d55f0:	800d      	strh	r5, [r1, #0]
   d55f2:	1215      	asrs	r5, r2, #8
   d55f4:	5505      	strb	r5, [r0, r4]
    buffer[(*position)++] = content & 0xFF;
   d55f6:	6898      	ldr	r0, [r3, #8]
   d55f8:	880b      	ldrh	r3, [r1, #0]
   d55fa:	1c5c      	adds	r4, r3, #1
   d55fc:	800c      	strh	r4, [r1, #0]
   d55fe:	54c2      	strb	r2, [r0, r3]
    return position;
   d5600:	2001      	movs	r0, #1
}
   d5602:	bd70      	pop	{r4, r5, r6, pc}
   d5604:	000dbb67 	.word	0x000dbb67

000d5608 <_ZN5MQTT56pubAckEt>:
        logger.info("Already connected to server");
        return false;
    }
}

bool MQTT5::pubAck(uint16_t packetId) {
   d5608:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d560a:	ac02      	add	r4, sp, #8
   d560c:	2300      	movs	r3, #0
   d560e:	f824 3d02 	strh.w	r3, [r4, #-2]!
        logger.info("Already connected to server");
        return false;
    }
}

bool MQTT5::pubAck(uint16_t packetId) {
   d5612:	460e      	mov	r6, r1
    uint16_t index = 0;
    // 3.4.1 PUBACK Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBACK << 4)))
   d5614:	2240      	movs	r2, #64	; 0x40
   d5616:	4621      	mov	r1, r4
        logger.info("Already connected to server");
        return false;
    }
}

bool MQTT5::pubAck(uint16_t packetId) {
   d5618:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.4.1 PUBACK Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBACK << 4)))
   d561a:	f7ff ff4f 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d561e:	b908      	cbnz	r0, d5624 <_ZN5MQTT56pubAckEt+0x1c>
        return false;
   d5620:	2000      	movs	r0, #0
   d5622:	e01d      	b.n	d5660 <_ZN5MQTT56pubAckEt+0x58>

    // 3.4.2 PUBACK Variable Header
    if (!writeInt(&index, packetId))
   d5624:	4632      	mov	r2, r6
   d5626:	4621      	mov	r1, r4
   d5628:	4628      	mov	r0, r5
   d562a:	f7ff ffd3 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d562e:	2800      	cmp	r0, #0
   d5630:	d0f6      	beq.n	d5620 <_ZN5MQTT56pubAckEt+0x18>
        return false;

    // 3.4.1 PUBACK Fixed Header remaining length
    uint16_t len = index - 1;
   d5632:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d5636:	3a01      	subs	r2, #1
    index = 1;
   d5638:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d563a:	b292      	uxth	r2, r2
   d563c:	4621      	mov	r1, r4
   d563e:	4628      	mov	r0, r5
    if (!writeInt(&index, packetId))
        return false;

    // 3.4.1 PUBACK Fixed Header remaining length
    uint16_t len = index - 1;
    index = 1;
   d5640:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d5644:	f7ff fedc 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5648:	b920      	cbnz	r0, d5654 <_ZN5MQTT56pubAckEt+0x4c>

    logger.info("Sending publish ack for packet %d", packetId);
   d564a:	4632      	mov	r2, r6
   d564c:	4905      	ldr	r1, [pc, #20]	; (d5664 <_ZN5MQTT56pubAckEt+0x5c>)
   d564e:	4628      	mov	r0, r5
   d5650:	f7fe fda8 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index, false);
   d5654:	2200      	movs	r2, #0
   d5656:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d565a:	4628      	mov	r0, r5
   d565c:	f7ff feb4 	bl	d53c8 <_ZN5MQTT513writeToSocketEtb>
}
   d5660:	b002      	add	sp, #8
   d5662:	bd70      	pop	{r4, r5, r6, pc}
   d5664:	000dbbc0 	.word	0x000dbbc0

000d5668 <_ZN5MQTT56pubRecEt>:
bool MQTT5::pubRec(uint16_t packetId) {
   d5668:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d566a:	ac02      	add	r4, sp, #8
   d566c:	2300      	movs	r3, #0
   d566e:	f824 3d02 	strh.w	r3, [r4, #-2]!
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish ack for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubRec(uint16_t packetId) {
   d5672:	460e      	mov	r6, r1
    uint16_t index = 0;
    // 3.5.1 PUBREC Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBREC << 4)))
   d5674:	2250      	movs	r2, #80	; 0x50
   d5676:	4621      	mov	r1, r4
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish ack for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubRec(uint16_t packetId) {
   d5678:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.5.1 PUBREC Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBREC << 4)))
   d567a:	f7ff ff1f 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d567e:	b908      	cbnz	r0, d5684 <_ZN5MQTT56pubRecEt+0x1c>
        return false;
   d5680:	2000      	movs	r0, #0
   d5682:	e01d      	b.n	d56c0 <_ZN5MQTT56pubRecEt+0x58>

    // 3.5.2 PUBREC Variable Header
    if (!writeInt(&index, packetId))
   d5684:	4632      	mov	r2, r6
   d5686:	4621      	mov	r1, r4
   d5688:	4628      	mov	r0, r5
   d568a:	f7ff ffa3 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d568e:	2800      	cmp	r0, #0
   d5690:	d0f6      	beq.n	d5680 <_ZN5MQTT56pubRecEt+0x18>
        return false;

    // 3.5.1 PUBREC Fixed Header remaining length
    uint16_t len = index - 1;
   d5692:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d5696:	3a01      	subs	r2, #1
    index = 1;
   d5698:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d569a:	b292      	uxth	r2, r2
   d569c:	4621      	mov	r1, r4
   d569e:	4628      	mov	r0, r5
    if (!writeInt(&index, packetId))
        return false;

    // 3.5.1 PUBREC Fixed Header remaining length
    uint16_t len = index - 1;
    index = 1;
   d56a0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d56a4:	f7ff feac 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d56a8:	b920      	cbnz	r0, d56b4 <_ZN5MQTT56pubRecEt+0x4c>

    logger.info("Sending publish rec for packet %d", packetId);
   d56aa:	4632      	mov	r2, r6
   d56ac:	4905      	ldr	r1, [pc, #20]	; (d56c4 <_ZN5MQTT56pubRecEt+0x5c>)
   d56ae:	4628      	mov	r0, r5
   d56b0:	f7fe fd78 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index, false);
   d56b4:	2200      	movs	r2, #0
   d56b6:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d56ba:	4628      	mov	r0, r5
   d56bc:	f7ff fe84 	bl	d53c8 <_ZN5MQTT513writeToSocketEtb>
}
   d56c0:	b002      	add	sp, #8
   d56c2:	bd70      	pop	{r4, r5, r6, pc}
   d56c4:	000dbbe2 	.word	0x000dbbe2

000d56c8 <_ZN5MQTT516processPacketPubEhtt>:
            logger.warn("Unknown connect property");
            break;
    }
}

void MQTT5::processPacketPub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d56c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56cc:	b089      	sub	sp, #36	; 0x24
   d56ce:	af02      	add	r7, sp, #8
   d56d0:	f107 0518 	add.w	r5, r7, #24
    // 3.3.1 PUBLISH Fixed Header
    bool dup = (flags & 0x8) > 0;
    MQTT5_QOS qos = (MQTT5_QOS) ((flags & 0x6) >> 1);
   d56d4:	f3c1 0641 	ubfx	r6, r1, #1, #2
            logger.warn("Unknown connect property");
            break;
    }
}

void MQTT5::processPacketPub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d56d8:	f825 2d0a 	strh.w	r2, [r5, #-10]!
   d56dc:	468a      	mov	sl, r1
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d56de:	4629      	mov	r1, r5
            logger.warn("Unknown connect property");
            break;
    }
}

void MQTT5::processPacketPub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d56e0:	4604      	mov	r4, r0
   d56e2:	469b      	mov	fp, r3
    // 3.3.1 PUBLISH Fixed Header
    bool dup = (flags & 0x8) > 0;
    MQTT5_QOS qos = (MQTT5_QOS) ((flags & 0x6) >> 1);
    bool retain = (flags & 0x1) > 0;
    uint16_t indexContentStart = startIndex;
   d56e4:	60ba      	str	r2, [r7, #8]
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d56e6:	f7ff fc20 	bl	d4f2a <_ZN5MQTT57readIntEPt>
    bool retain = (flags & 0x1) > 0;
    uint16_t indexContentStart = startIndex;

    // 3.3.2.1 Topic Name
    uint16_t len = readUTF8StringLength(&startIndex);
    char topic[len + 1];
   d56ea:	f100 0208 	add.w	r2, r0, #8
   d56ee:	f022 0207 	bic.w	r2, r2, #7
   d56f2:	ebad 0d02 	sub.w	sp, sp, r2
   d56f6:	f10d 0908 	add.w	r9, sp, #8
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d56fa:	4603      	mov	r3, r0
    uint16_t indexContentStart = startIndex;

    // 3.3.2.1 Topic Name
    uint16_t len = readUTF8StringLength(&startIndex);
    char topic[len + 1];
    readUTF8String(&startIndex, topic, len);
   d56fc:	464a      	mov	r2, r9
   d56fe:	4629      	mov	r1, r5
   d5700:	4620      	mov	r0, r4
   d5702:	f7ff fc01 	bl	d4f08 <_ZN5MQTT514readUTF8StringEPtPct>
    
    // 3.3.2.2 Packet Identifier
    uint16_t packetId = 0;
    if (qos != MQTT5_QOS::QOS0)
   d5706:	b12e      	cbz	r6, d5714 <_ZN5MQTT516processPacketPubEhtt+0x4c>
        packetId = readInt(&startIndex);
   d5708:	4629      	mov	r1, r5
   d570a:	4620      	mov	r0, r4
   d570c:	f7ff fc0d 	bl	d4f2a <_ZN5MQTT57readIntEPt>
   d5710:	4680      	mov	r8, r0
   d5712:	e000      	b.n	d5716 <_ZN5MQTT516processPacketPubEhtt+0x4e>
    uint16_t len = readUTF8StringLength(&startIndex);
    char topic[len + 1];
    readUTF8String(&startIndex, topic, len);
    
    // 3.3.2.2 Packet Identifier
    uint16_t packetId = 0;
   d5714:	46b0      	mov	r8, r6
    if (qos != MQTT5_QOS::QOS0)
        packetId = readInt(&startIndex);

    // 3.3.2.3.1 Property Length
    uint16_t propertiesLength;
    if (readVariableByteInteger(&startIndex, &propertiesLength) && propertiesLength > 0) {
   d5716:	f107 0216 	add.w	r2, r7, #22
   d571a:	4629      	mov	r1, r5
   d571c:	4620      	mov	r0, r4
   d571e:	f7ff fbcd 	bl	d4ebc <_ZN5MQTT523readVariableByteIntegerEPtS0_>
   d5722:	b108      	cbz	r0, d5728 <_ZN5MQTT516processPacketPubEhtt+0x60>
   d5724:	8afb      	ldrh	r3, [r7, #22]
   d5726:	bb83      	cbnz	r3, d578a <_ZN5MQTT516processPacketPubEhtt+0xc2>
   d5728:	68bb      	ldr	r3, [r7, #8]
   d572a:	89fa      	ldrh	r2, [r7, #14]
   d572c:	445b      	add	r3, fp
            processPacketPubProperties(buffer[startIndex++], &startIndex);
        }
    }

    if (qos != MQTT5_QOS::QOS0)
        logger.info("Received packet for topic %s with id %d and length %d", topic, packetId, (contentLength + indexContentStart) - startIndex);
   d572e:	1a9b      	subs	r3, r3, r2
        while (startIndex - propertiesStartIndex < propertiesLength) {
            processPacketPubProperties(buffer[startIndex++], &startIndex);
        }
    }

    if (qos != MQTT5_QOS::QOS0)
   d5730:	b13e      	cbz	r6, d5742 <_ZN5MQTT516processPacketPubEhtt+0x7a>
        logger.info("Received packet for topic %s with id %d and length %d", topic, packetId, (contentLength + indexContentStart) - startIndex);
   d5732:	9300      	str	r3, [sp, #0]
   d5734:	464a      	mov	r2, r9
   d5736:	4643      	mov	r3, r8
   d5738:	491e      	ldr	r1, [pc, #120]	; (d57b4 <_ZN5MQTT516processPacketPubEhtt+0xec>)
   d573a:	4620      	mov	r0, r4
   d573c:	f7fe fd32 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5740:	e004      	b.n	d574c <_ZN5MQTT516processPacketPubEhtt+0x84>
    else
        logger.info("Received packet for topic %s with length %d", topic, (contentLength + indexContentStart) - startIndex);
   d5742:	464a      	mov	r2, r9
   d5744:	491c      	ldr	r1, [pc, #112]	; (d57b8 <_ZN5MQTT516processPacketPubEhtt+0xf0>)
   d5746:	4620      	mov	r0, r4
   d5748:	f7fe fd2c 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    
    if (callbackPacketReceived)
   d574c:	6d25      	ldr	r5, [r4, #80]	; 0x50
   d574e:	b175      	cbz	r5, d576e <_ZN5MQTT516processPacketPubEhtt+0xa6>
        callbackPacketReceived(topic, buffer + startIndex, (contentLength + indexContentStart) - startIndex, dup, qos, retain);
   d5750:	89f8      	ldrh	r0, [r7, #14]
   d5752:	68bb      	ldr	r3, [r7, #8]
   d5754:	68a1      	ldr	r1, [r4, #8]
   d5756:	9600      	str	r6, [sp, #0]
   d5758:	1a1a      	subs	r2, r3, r0
   d575a:	445a      	add	r2, fp
   d575c:	f00a 0301 	and.w	r3, sl, #1
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	4401      	add	r1, r0
   d5764:	f3ca 03c0 	ubfx	r3, sl, #3, #1
   d5768:	b292      	uxth	r2, r2
   d576a:	4648      	mov	r0, r9
   d576c:	47a8      	blx	r5

    // Send acknowledge
    if (qos == MQTT5_QOS::QOS1)
   d576e:	2e01      	cmp	r6, #1
   d5770:	d104      	bne.n	d577c <_ZN5MQTT516processPacketPubEhtt+0xb4>
        pubAck(packetId);
   d5772:	4641      	mov	r1, r8
   d5774:	4620      	mov	r0, r4
   d5776:	f7ff ff47 	bl	d5608 <_ZN5MQTT56pubAckEt>
   d577a:	e017      	b.n	d57ac <_ZN5MQTT516processPacketPubEhtt+0xe4>
    else if (qos == MQTT5_QOS::QOS2)
   d577c:	2e02      	cmp	r6, #2
   d577e:	d115      	bne.n	d57ac <_ZN5MQTT516processPacketPubEhtt+0xe4>
        pubRec(packetId);
   d5780:	4641      	mov	r1, r8
   d5782:	4620      	mov	r0, r4
   d5784:	f7ff ff70 	bl	d5668 <_ZN5MQTT56pubRecEt>
}
   d5788:	e010      	b.n	d57ac <_ZN5MQTT516processPacketPubEhtt+0xe4>
        packetId = readInt(&startIndex);

    // 3.3.2.3.1 Property Length
    uint16_t propertiesLength;
    if (readVariableByteInteger(&startIndex, &propertiesLength) && propertiesLength > 0) {
        uint16_t propertiesStartIndex = startIndex;
   d578a:	89fb      	ldrh	r3, [r7, #14]
        while (startIndex - propertiesStartIndex < propertiesLength) {
   d578c:	89f9      	ldrh	r1, [r7, #14]
   d578e:	8afa      	ldrh	r2, [r7, #22]
   d5790:	607b      	str	r3, [r7, #4]
   d5792:	1ac8      	subs	r0, r1, r3
   d5794:	4290      	cmp	r0, r2
   d5796:	dac7      	bge.n	d5728 <_ZN5MQTT516processPacketPubEhtt+0x60>
            processPacketPubProperties(buffer[startIndex++], &startIndex);
   d5798:	68a0      	ldr	r0, [r4, #8]
   d579a:	1c4a      	adds	r2, r1, #1
   d579c:	81fa      	strh	r2, [r7, #14]
   d579e:	5c41      	ldrb	r1, [r0, r1]
   d57a0:	462a      	mov	r2, r5
   d57a2:	4620      	mov	r0, r4
   d57a4:	f7ff fd9a 	bl	d52dc <_ZN5MQTT526processPacketPubPropertiesEhPt>

    // 3.3.2.3.1 Property Length
    uint16_t propertiesLength;
    if (readVariableByteInteger(&startIndex, &propertiesLength) && propertiesLength > 0) {
        uint16_t propertiesStartIndex = startIndex;
        while (startIndex - propertiesStartIndex < propertiesLength) {
   d57a8:	687b      	ldr	r3, [r7, #4]
   d57aa:	e7ef      	b.n	d578c <_ZN5MQTT516processPacketPubEhtt+0xc4>
    // Send acknowledge
    if (qos == MQTT5_QOS::QOS1)
        pubAck(packetId);
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}
   d57ac:	371c      	adds	r7, #28
   d57ae:	46bd      	mov	sp, r7
   d57b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57b4:	000dbc04 	.word	0x000dbc04
   d57b8:	000dbc3a 	.word	0x000dbc3a

000d57bc <_ZN5MQTT57pubCompEt>:
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish rec for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubComp(uint16_t packetId) {
   d57bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d57be:	ac02      	add	r4, sp, #8
   d57c0:	2300      	movs	r3, #0
   d57c2:	f824 3d02 	strh.w	r3, [r4, #-2]!
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish rec for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubComp(uint16_t packetId) {
   d57c6:	460e      	mov	r6, r1
    uint16_t index = 0;
    // 3.7.1 PUBCOMP Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBCOMP << 4)))
   d57c8:	2270      	movs	r2, #112	; 0x70
   d57ca:	4621      	mov	r1, r4
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish rec for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubComp(uint16_t packetId) {
   d57cc:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.7.1 PUBCOMP Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBCOMP << 4)))
   d57ce:	f7ff fe75 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d57d2:	b908      	cbnz	r0, d57d8 <_ZN5MQTT57pubCompEt+0x1c>
        return false;
   d57d4:	2000      	movs	r0, #0
   d57d6:	e01d      	b.n	d5814 <_ZN5MQTT57pubCompEt+0x58>

    // 3.7.2 PUBCOMP Variable Header
    if (!writeInt(&index, packetId))
   d57d8:	4632      	mov	r2, r6
   d57da:	4621      	mov	r1, r4
   d57dc:	4628      	mov	r0, r5
   d57de:	f7ff fef9 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d57e2:	2800      	cmp	r0, #0
   d57e4:	d0f6      	beq.n	d57d4 <_ZN5MQTT57pubCompEt+0x18>
        return false;

    // 3.7.1 PUBCOMP Fixed Header remaining length
    uint16_t len = index - 1;
   d57e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d57ea:	3a01      	subs	r2, #1
    index = 1;
   d57ec:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d57ee:	b292      	uxth	r2, r2
   d57f0:	4621      	mov	r1, r4
   d57f2:	4628      	mov	r0, r5
    if (!writeInt(&index, packetId))
        return false;

    // 3.7.1 PUBCOMP Fixed Header remaining length
    uint16_t len = index - 1;
    index = 1;
   d57f4:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d57f8:	f7ff fe02 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d57fc:	b920      	cbnz	r0, d5808 <_ZN5MQTT57pubCompEt+0x4c>

    logger.info("Sending publish comp for packet %d", packetId);
   d57fe:	4632      	mov	r2, r6
   d5800:	4905      	ldr	r1, [pc, #20]	; (d5818 <_ZN5MQTT57pubCompEt+0x5c>)
   d5802:	4628      	mov	r0, r5
   d5804:	f7fe fcce 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index, false);
   d5808:	2200      	movs	r2, #0
   d580a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d580e:	4628      	mov	r0, r5
   d5810:	f7ff fdda 	bl	d53c8 <_ZN5MQTT513writeToSocketEtb>
}
   d5814:	b002      	add	sp, #8
   d5816:	bd70      	pop	{r4, r5, r6, pc}
   d5818:	000dbc66 	.word	0x000dbc66

000d581c <_ZN5MQTT519processPacketPubRelEhtt>:
    } else if (callbackQOS) {
        callbackQOS(packetId, !isAck);
    }
}

void MQTT5::processPacketPubRel(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d581c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d581e:	a902      	add	r1, sp, #8
   d5820:	461d      	mov	r5, r3
   d5822:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d5826:	4604      	mov	r4, r0
    uint16_t packetId = readInt(&startIndex);
   d5828:	f7ff fb7f 	bl	d4f2a <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d582c:	2d02      	cmp	r5, #2
   d582e:	bf1f      	itttt	ne
   d5830:	f8bd 3006 	ldrhne.w	r3, [sp, #6]
   d5834:	68a2      	ldrne	r2, [r4, #8]
   d5836:	1c59      	addne	r1, r3, #1
   d5838:	f8ad 1006 	strhne.w	r1, [sp, #6]
   d583c:	bf18      	it	ne
   d583e:	5cd5      	ldrbne	r5, [r2, r3]
    logger.info("Received publish rel for packet %d and response %d", packetId, (uint8_t) reason);
   d5840:	4907      	ldr	r1, [pc, #28]	; (d5860 <_ZN5MQTT519processPacketPubRelEhtt+0x44>)
    }
}

void MQTT5::processPacketPubRel(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d5842:	bf08      	it	eq
   d5844:	2500      	moveq	r5, #0
        callbackQOS(packetId, !isAck);
    }
}

void MQTT5::processPacketPubRel(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d5846:	4606      	mov	r6, r0
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received publish rel for packet %d and response %d", packetId, (uint8_t) reason);
   d5848:	4602      	mov	r2, r0
   d584a:	462b      	mov	r3, r5
   d584c:	4620      	mov	r0, r4
   d584e:	f7fe fca9 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    if (reason == MQTT5_REASON_CODE::SUCCESS) {
   d5852:	b91d      	cbnz	r5, d585c <_ZN5MQTT519processPacketPubRelEhtt+0x40>
        pubComp(packetId);
   d5854:	4631      	mov	r1, r6
   d5856:	4620      	mov	r0, r4
   d5858:	f7ff ffb0 	bl	d57bc <_ZN5MQTT57pubCompEt>
    }
}
   d585c:	b002      	add	sp, #8
   d585e:	bd70      	pop	{r4, r5, r6, pc}
   d5860:	000dbc89 	.word	0x000dbc89

000d5864 <_ZN5MQTT58writeIntEPtm>:
    buffer[(*position)++] = content >> 8;
    buffer[(*position)++] = content & 0xFF;
    return position;
}

bool MQTT5::writeInt(uint16_t *position, uint32_t content) {
   d5864:	b570      	push	{r4, r5, r6, lr}
    if ((*position) + 4 > maxPacketSize) {
   d5866:	880c      	ldrh	r4, [r1, #0]
   d5868:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   d586a:	1ce6      	adds	r6, r4, #3
   d586c:	42ae      	cmp	r6, r5
    buffer[(*position)++] = content >> 8;
    buffer[(*position)++] = content & 0xFF;
    return position;
}

bool MQTT5::writeInt(uint16_t *position, uint32_t content) {
   d586e:	4603      	mov	r3, r0
    if ((*position) + 4 > maxPacketSize) {
   d5870:	db05      	blt.n	d587e <_ZN5MQTT58writeIntEPtm+0x1a>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d5872:	462a      	mov	r2, r5
   d5874:	490e      	ldr	r1, [pc, #56]	; (d58b0 <_ZN5MQTT58writeIntEPtm+0x4c>)
   d5876:	f7ff fab7 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d587a:	2000      	movs	r0, #0
   d587c:	bd70      	pop	{r4, r5, r6, pc}
    }
    buffer[(*position)++] = content >> 24;
   d587e:	6880      	ldr	r0, [r0, #8]
   d5880:	1c65      	adds	r5, r4, #1
   d5882:	800d      	strh	r5, [r1, #0]
   d5884:	0e15      	lsrs	r5, r2, #24
   d5886:	5505      	strb	r5, [r0, r4]
    buffer[(*position)++] = content >> 16;
   d5888:	8808      	ldrh	r0, [r1, #0]
   d588a:	689c      	ldr	r4, [r3, #8]
   d588c:	1c45      	adds	r5, r0, #1
   d588e:	800d      	strh	r5, [r1, #0]
   d5890:	0c15      	lsrs	r5, r2, #16
   d5892:	5425      	strb	r5, [r4, r0]
    buffer[(*position)++] = content >> 8;
   d5894:	8808      	ldrh	r0, [r1, #0]
   d5896:	689c      	ldr	r4, [r3, #8]
   d5898:	1c45      	adds	r5, r0, #1
   d589a:	800d      	strh	r5, [r1, #0]
   d589c:	0a15      	lsrs	r5, r2, #8
   d589e:	5425      	strb	r5, [r4, r0]
    buffer[(*position)++] = content & 0xFF;
   d58a0:	6898      	ldr	r0, [r3, #8]
   d58a2:	880b      	ldrh	r3, [r1, #0]
   d58a4:	1c5c      	adds	r4, r3, #1
   d58a6:	800c      	strh	r4, [r1, #0]
   d58a8:	54c2      	strb	r2, [r0, r3]
    return true;
   d58aa:	2001      	movs	r0, #1
}
   d58ac:	bd70      	pop	{r4, r5, r6, pc}
   d58ae:	bf00      	nop
   d58b0:	000dbb67 	.word	0x000dbb67

000d58b4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties>:

bool MQTT5::publish(const char *topic, const char *payload, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
    return publish(topic, (const uint8_t*) payload, strlen(payload), retain, qos, dup, packetId, properties);
}

bool MQTT5::publish(const char *topic, const uint8_t *payload, uint16_t payloadLength, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
   d58b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58b8:	b089      	sub	sp, #36	; 0x24
   d58ba:	4699      	mov	r9, r3
   d58bc:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   d58c0:	9304      	str	r3, [sp, #16]
   d58c2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d58c4:	9205      	str	r2, [sp, #20]
   d58c6:	4604      	mov	r4, r0
   d58c8:	460e      	mov	r6, r1
   d58ca:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   d58ce:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
   d58d2:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   d58d6:	9303      	str	r3, [sp, #12]
    if (!connected())
   d58d8:	f7ff fab7 	bl	d4e4a <_ZN5MQTT59connectedEv>
   d58dc:	b908      	cbnz	r0, d58e2 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2e>
        return false;
   d58de:	2000      	movs	r0, #0
   d58e0:	e0f6      	b.n	d5ad0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x21c>

    uint16_t index = 0;
    // 3.3.1 PUBLISH Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBLISH << 4) |
   d58e2:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   d58e6:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50

bool MQTT5::publish(const char *topic, const uint8_t *payload, uint16_t payloadLength, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
    if (!connected())
        return false;

    uint16_t index = 0;
   d58ea:	af08      	add	r7, sp, #32
   d58ec:	f04f 0b00 	mov.w	fp, #0
    // 3.3.1 PUBLISH Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBLISH << 4) |
   d58f0:	f042 0230 	orr.w	r2, r2, #48	; 0x30

bool MQTT5::publish(const char *topic, const uint8_t *payload, uint16_t payloadLength, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
    if (!connected())
        return false;

    uint16_t index = 0;
   d58f4:	f827 bd04 	strh.w	fp, [r7, #-4]!
    // 3.3.1 PUBLISH Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBLISH << 4) |
   d58f8:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
   d58fc:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
   d5900:	b2d2      	uxtb	r2, r2
   d5902:	4639      	mov	r1, r7
   d5904:	4620      	mov	r0, r4
   d5906:	f7ff fdd9 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d590a:	2800      	cmp	r0, #0
   d590c:	d0e7      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
                             (((uint8_t) qos) << 1) |
                             retain))
        return false;

    // 3.3.2.1 Topic Name
    if (properties.topicAlias > 0 && topicAliasRegistered(properties.topicAlias)) {
   d590e:	b17d      	cbz	r5, d5930 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x7c>
   d5910:	4629      	mov	r1, r5
   d5912:	4620      	mov	r0, r4
   d5914:	f7ff faa5 	bl	d4e62 <_ZN5MQTT520topicAliasRegisteredEt>
   d5918:	b150      	cbz	r0, d5930 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x7c>
        logger.info("Using topic alias %d", properties.topicAlias);
   d591a:	462a      	mov	r2, r5
   d591c:	4620      	mov	r0, r4
   d591e:	496e      	ldr	r1, [pc, #440]	; (d5ad8 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x224>)
   d5920:	f7fe fc40 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (!writeInt(&index, (uint16_t) 0))
   d5924:	465a      	mov	r2, fp
   d5926:	4639      	mov	r1, r7
   d5928:	4620      	mov	r0, r4
   d592a:	f7ff fe53 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d592e:	e008      	b.n	d5942 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x8e>
            return false;
    } else {
        if (!writeUTF8String(&index, topic, strlen(topic)))
   d5930:	4630      	mov	r0, r6
   d5932:	f005 fb62 	bl	daffa <strlen>
   d5936:	4632      	mov	r2, r6
   d5938:	b283      	uxth	r3, r0
   d593a:	a907      	add	r1, sp, #28
   d593c:	4620      	mov	r0, r4
   d593e:	f7ff fd95 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d5942:	2800      	cmp	r0, #0
   d5944:	d0cb      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }
    
    if ((uint8_t) qos > 0) {
   d5946:	f1ba 0f00 	cmp.w	sl, #0
   d594a:	d106      	bne.n	d595a <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0xa6>
        if (!writeInt(&index, nextPacketId++))
            return false;
    }

    // 3.3.2.3 PUBLISH Properties
    uint16_t indexProp = index;
   d594c:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d5950:	f8ad 301e 	strh.w	r3, [sp, #30]

    // 3.3.2.3.2 Payload Format Indicator
    if (properties.payloadFormatIndicator > 0) {
   d5954:	9b04      	ldr	r3, [sp, #16]
   d5956:	b97b      	cbnz	r3, d5978 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0xc4>
   d5958:	e02e      	b.n	d59b8 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x104>
            return false;
    }
    
    if ((uint8_t) qos > 0) {
        // 3.3.2.2 Packet Identifier
        if (packetId)
   d595a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d595c:	b113      	cbz	r3, d5964 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0xb0>
            *packetId = nextPacketId;
   d595e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d5960:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   d5962:	8013      	strh	r3, [r2, #0]
        if (!writeInt(&index, nextPacketId++))
   d5964:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   d5966:	1c53      	adds	r3, r2, #1
   d5968:	8563      	strh	r3, [r4, #42]	; 0x2a
   d596a:	a907      	add	r1, sp, #28
   d596c:	4620      	mov	r0, r4
   d596e:	f7ff fe31 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d5972:	2800      	cmp	r0, #0
   d5974:	d1ea      	bne.n	d594c <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x98>
   d5976:	e7b2      	b.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
    // 3.3.2.3 PUBLISH Properties
    uint16_t indexProp = index;

    // 3.3.2.3.2 Payload Format Indicator
    if (properties.payloadFormatIndicator > 0) {
        if (!writeByte(&indexProp, PROP_PAYLOAD_FORMAT_INDICATOR))
   d5978:	2201      	movs	r2, #1
   d597a:	f10d 011e 	add.w	r1, sp, #30
   d597e:	4620      	mov	r0, r4
   d5980:	f7ff fd9c 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5984:	2800      	cmp	r0, #0
   d5986:	d0aa      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeByte(&indexProp, properties.payloadFormatIndicator))
   d5988:	2201      	movs	r2, #1
   d598a:	f10d 011e 	add.w	r1, sp, #30
   d598e:	4620      	mov	r0, r4
   d5990:	f7ff fd94 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5994:	2800      	cmp	r0, #0
   d5996:	d0a2      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.3 Message Expiry Interval
    if (properties.payloadFormatIndicator > 0) {
        if (!writeByte(&indexProp, PROP_MESSAGE_EXPIRY_INTERVAL))
   d5998:	2202      	movs	r2, #2
   d599a:	f10d 011e 	add.w	r1, sp, #30
   d599e:	4620      	mov	r0, r4
   d59a0:	f7ff fd8c 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d59a4:	2800      	cmp	r0, #0
   d59a6:	d09a      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeInt(&indexProp, properties.messsageExpiryInterval))
   d59a8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d59aa:	f10d 011e 	add.w	r1, sp, #30
   d59ae:	4620      	mov	r0, r4
   d59b0:	f7ff ff58 	bl	d5864 <_ZN5MQTT58writeIntEPtm>
   d59b4:	2800      	cmp	r0, #0
   d59b6:	d092      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.4 Topic Alias
    if (properties.topicAlias > 0) {
   d59b8:	b17d      	cbz	r5, d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x126>
        if (!writeByte(&indexProp, PROP_TOPIC_ALIAS))
   d59ba:	2223      	movs	r2, #35	; 0x23
   d59bc:	f10d 011e 	add.w	r1, sp, #30
   d59c0:	4620      	mov	r0, r4
   d59c2:	f7ff fd7b 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d59c6:	2800      	cmp	r0, #0
   d59c8:	d089      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeInt(&indexProp, properties.topicAlias))
   d59ca:	462a      	mov	r2, r5
   d59cc:	f10d 011e 	add.w	r1, sp, #30
   d59d0:	4620      	mov	r0, r4
   d59d2:	f7ff fdff 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d59d6:	2800      	cmp	r0, #0
   d59d8:	d081      	beq.n	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.5 Response Topic
    if (properties.responseTopic) {
   d59da:	f1b8 0f00 	cmp.w	r8, #0
   d59de:	d015      	beq.n	d5a0c <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x158>
        if (!writeByte(&indexProp, PROP_RESPONSE_TOPIC))
   d59e0:	2208      	movs	r2, #8
   d59e2:	f10d 011e 	add.w	r1, sp, #30
   d59e6:	4620      	mov	r0, r4
   d59e8:	f7ff fd68 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d59ec:	2800      	cmp	r0, #0
   d59ee:	f43f af76 	beq.w	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeUTF8String(&indexProp, properties.responseTopic, strlen(properties.responseTopic)))
   d59f2:	4640      	mov	r0, r8
   d59f4:	f005 fb01 	bl	daffa <strlen>
   d59f8:	4642      	mov	r2, r8
   d59fa:	b283      	uxth	r3, r0
   d59fc:	f10d 011e 	add.w	r1, sp, #30
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff fd33 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d5a06:	2800      	cmp	r0, #0
   d5a08:	f43f af69 	beq.w	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.6 Correlation Data
    if (properties.correlationData) {
   d5a0c:	9b03      	ldr	r3, [sp, #12]
   d5a0e:	b19b      	cbz	r3, d5a38 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x184>
        if (!writeByte(&indexProp, PROP_CORRELATION_DATA))
   d5a10:	2209      	movs	r2, #9
   d5a12:	f10d 011e 	add.w	r1, sp, #30
   d5a16:	4620      	mov	r0, r4
   d5a18:	f7ff fd50 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5a1c:	2800      	cmp	r0, #0
   d5a1e:	f43f af5e 	beq.w	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeBytes(&indexProp, properties.correlationData, properties.correlationDataLength))
   d5a22:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
   d5a26:	9a03      	ldr	r2, [sp, #12]
   d5a28:	f10d 011e 	add.w	r1, sp, #30
   d5a2c:	4620      	mov	r0, r4
   d5a2e:	f7ff fdb7 	bl	d55a0 <_ZN5MQTT510writeBytesEPtPKht>
   d5a32:	2800      	cmp	r0, #0
   d5a34:	f43f af53 	beq.w	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.1 Property Length
    if (!writeVariableByteInteger(&index, indexProp - index))
   d5a38:	af08      	add	r7, sp, #32
   d5a3a:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d5a3e:	f837 2d04 	ldrh.w	r2, [r7, #-4]!
   d5a42:	1a9a      	subs	r2, r3, r2
   d5a44:	b292      	uxth	r2, r2
   d5a46:	4639      	mov	r1, r7
   d5a48:	4620      	mov	r0, r4
   d5a4a:	f7ff fcd9 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5a4e:	2800      	cmp	r0, #0
   d5a50:	f43f af45 	beq.w	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
        return false;

    // 3.3.3 PUBLISH Payload
    if (!writeBytes(&index, payload, payloadLength))
   d5a54:	464b      	mov	r3, r9
   d5a56:	9a05      	ldr	r2, [sp, #20]
   d5a58:	4639      	mov	r1, r7
   d5a5a:	4620      	mov	r0, r4
   d5a5c:	f7ff fda0 	bl	d55a0 <_ZN5MQTT510writeBytesEPtPKht>
   d5a60:	2800      	cmp	r0, #0
   d5a62:	f43f af3c 	beq.w	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
        return false;

    // 3.3.1.4 Remaining Length
    uint16_t len = index - 1;
   d5a66:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d5a6a:	3a01      	subs	r2, #1
    index = 1;
   d5a6c:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d5a6e:	b292      	uxth	r2, r2
   d5a70:	4639      	mov	r1, r7
   d5a72:	4620      	mov	r0, r4
    if (!writeBytes(&index, payload, payloadLength))
        return false;

    // 3.3.1.4 Remaining Length
    uint16_t len = index - 1;
    index = 1;
   d5a74:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (!writeVariableByteInteger(&index, len))
   d5a78:	f7ff fcc2 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5a7c:	2800      	cmp	r0, #0
   d5a7e:	f43f af2e 	beq.w	d58de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
        return false;

    if ((uint8_t) qos > 0)
   d5a82:	f1ba 0f00 	cmp.w	sl, #0
   d5a86:	d009      	beq.n	d5a9c <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x1e8>
        logger.info("Publishing packet with id %d in topic %s with length %d", nextPacketId - 1, topic, payloadLength);
   d5a88:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   d5a8a:	f8cd 9000 	str.w	r9, [sp]
   d5a8e:	4633      	mov	r3, r6
   d5a90:	3a01      	subs	r2, #1
   d5a92:	4912      	ldr	r1, [pc, #72]	; (d5adc <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x228>)
   d5a94:	4620      	mov	r0, r4
   d5a96:	f7fe fb85 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5a9a:	e005      	b.n	d5aa8 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x1f4>
    else
        logger.info("Publishing packet in topic %s with length %d", topic, payloadLength); 
   d5a9c:	464b      	mov	r3, r9
   d5a9e:	4632      	mov	r2, r6
   d5aa0:	490f      	ldr	r1, [pc, #60]	; (d5ae0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x22c>)
   d5aa2:	4620      	mov	r0, r4
   d5aa4:	f7fe fb7e 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    
    // Save topic alias
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
   d5aa8:	b125      	cbz	r5, d5ab4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x200>
   d5aaa:	4629      	mov	r1, r5
   d5aac:	4620      	mov	r0, r4
   d5aae:	f7ff f9eb 	bl	d4e88 <_ZN5MQTT518topicAliasRegisterEt>
   d5ab2:	b930      	cbnz	r0, d5ac2 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x20e>
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
    return writeToSocket(index);
   d5ab4:	2201      	movs	r2, #1
   d5ab6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d5aba:	4620      	mov	r0, r4
   d5abc:	f7ff fc84 	bl	d53c8 <_ZN5MQTT513writeToSocketEtb>
   d5ac0:	e006      	b.n	d5ad0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x21c>
    else
        logger.info("Publishing packet in topic %s with length %d", topic, payloadLength); 
    
    // Save topic alias
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
   d5ac2:	462b      	mov	r3, r5
   d5ac4:	4632      	mov	r2, r6
   d5ac6:	4907      	ldr	r1, [pc, #28]	; (d5ae4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x230>)
   d5ac8:	4620      	mov	r0, r4
   d5aca:	f7fe fb6b 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5ace:	e7f1      	b.n	d5ab4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x200>
    return writeToSocket(index);
}
   d5ad0:	b009      	add	sp, #36	; 0x24
   d5ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ad6:	bf00      	nop
   d5ad8:	000dbdab 	.word	0x000dbdab
   d5adc:	000dbd46 	.word	0x000dbd46
   d5ae0:	000dbd7e 	.word	0x000dbd7e
   d5ae4:	000dbdc0 	.word	0x000dbdc0

000d5ae8 <_ZN5MQTT57publishEPKcS1_b9MQTT5_QOSbPt22MQTT5PublishProperties>:

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
    return publish(topic, payload, false, qos, false, packetId);
}

bool MQTT5::publish(const char *topic, const char *payload, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
   d5ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5aec:	4607      	mov	r7, r0
   d5aee:	b08b      	sub	sp, #44	; 0x2c
    return publish(topic, (const uint8_t*) payload, strlen(payload), retain, qos, dup, packetId, properties);
   d5af0:	4610      	mov	r0, r2

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
    return publish(topic, payload, false, qos, false, packetId);
}

bool MQTT5::publish(const char *topic, const char *payload, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
   d5af2:	4688      	mov	r8, r1
   d5af4:	4616      	mov	r6, r2
   d5af6:	4699      	mov	r9, r3
    return publish(topic, (const uint8_t*) payload, strlen(payload), retain, qos, dup, packetId, properties);
   d5af8:	f005 fa7f 	bl	daffa <strlen>
   d5afc:	ad15      	add	r5, sp, #84	; 0x54
   d5afe:	fa1f fe80 	uxth.w	lr, r0
   d5b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5b04:	ac04      	add	r4, sp, #16
   d5b06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b08:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5b0c:	e884 0003 	stmia.w	r4, {r0, r1}
   d5b10:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d5b12:	9303      	str	r3, [sp, #12]
   d5b14:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d5b18:	9302      	str	r3, [sp, #8]
   d5b1a:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   d5b1e:	9301      	str	r3, [sp, #4]
   d5b20:	f8cd 9000 	str.w	r9, [sp]
   d5b24:	4673      	mov	r3, lr
   d5b26:	4632      	mov	r2, r6
   d5b28:	4641      	mov	r1, r8
   d5b2a:	4638      	mov	r0, r7
   d5b2c:	f7ff fec2 	bl	d58b4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties>
}
   d5b30:	b00b      	add	sp, #44	; 0x2c
   d5b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5b38 <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt>:

    logger.info("Sending publish comp for packet %d", packetId);
    return writeToSocket(index, false);
}

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
   d5b38:	b5f0      	push	{r4, r5, r6, r7, lr}
    return publish(topic, payload, false, qos, false, packetId);
   d5b3a:	4d0d      	ldr	r5, [pc, #52]	; (d5b70 <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt+0x38>)

    logger.info("Sending publish comp for packet %d", packetId);
    return writeToSocket(index, false);
}

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
   d5b3c:	4696      	mov	lr, r2
   d5b3e:	469c      	mov	ip, r3
   d5b40:	4606      	mov	r6, r0
   d5b42:	460f      	mov	r7, r1
    return publish(topic, payload, false, qos, false, packetId);
   d5b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

    logger.info("Sending publish comp for packet %d", packetId);
    return writeToSocket(index, false);
}

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
   d5b46:	b08b      	sub	sp, #44	; 0x2c
    return publish(topic, payload, false, qos, false, packetId);
   d5b48:	ac03      	add	r4, sp, #12
   d5b4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5b4c:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5b50:	e884 0003 	stmia.w	r4, {r0, r1}
   d5b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5b56:	9302      	str	r3, [sp, #8]
   d5b58:	2300      	movs	r3, #0
   d5b5a:	9301      	str	r3, [sp, #4]
   d5b5c:	f8cd c000 	str.w	ip, [sp]
   d5b60:	4672      	mov	r2, lr
   d5b62:	4639      	mov	r1, r7
   d5b64:	4630      	mov	r0, r6
   d5b66:	f7ff ffbf 	bl	d5ae8 <_ZN5MQTT57publishEPKcS1_b9MQTT5_QOSbPt22MQTT5PublishProperties>
}
   d5b6a:	b00b      	add	sp, #44	; 0x2c
   d5b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5b6e:	bf00      	nop
   d5b70:	000dbfe0 	.word	0x000dbfe0

000d5b74 <_ZN5MQTT55closeEv>:
    buffer[(*position)++] = content >> 8;
    buffer[(*position)++] = content & 0xFF;
    return true;
}

void MQTT5::close() {
   d5b74:	b510      	push	{r4, lr}
   d5b76:	4604      	mov	r4, r0
    free(registeredTopicAlias);
   d5b78:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d5b7a:	f000 fe3f 	bl	d67fc <free>
    registeredTopicAlias = NULL;
   d5b7e:	2300      	movs	r3, #0
    registeredTopicAliasLen = 0;
    isConnecting = false;
    packetsInFlight = 0;
    socket->stop();
   d5b80:	6860      	ldr	r0, [r4, #4]
    return true;
}

void MQTT5::close() {
    free(registeredTopicAlias);
    registeredTopicAlias = NULL;
   d5b82:	6323      	str	r3, [r4, #48]	; 0x30
    registeredTopicAliasLen = 0;
   d5b84:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    isConnecting = false;
   d5b88:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    packetsInFlight = 0;
   d5b8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    socket->stop();
   d5b90:	6803      	ldr	r3, [r0, #0]
}
   d5b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(registeredTopicAlias);
    registeredTopicAlias = NULL;
    registeredTopicAliasLen = 0;
    isConnecting = false;
    packetsInFlight = 0;
    socket->stop();
   d5b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b98:	4718      	bx	r3
	...

000d5b9c <_ZN5MQTT520processPacketConnAckEhtt>:
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}

void MQTT5::processPacketConnAck(uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5b9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    isConnecting = false;
   d5b9e:	2300      	movs	r3, #0
   d5ba0:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    bool sessionPresent = buffer[index++] & 0x1;
   d5ba4:	1c53      	adds	r3, r2, #1
   d5ba6:	6881      	ldr	r1, [r0, #8]
   d5ba8:	b29b      	uxth	r3, r3
   d5baa:	f8ad 3006 	strh.w	r3, [sp, #6]
   d5bae:	5c8e      	ldrb	r6, [r1, r2]
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
   d5bb0:	3202      	adds	r2, #2
   d5bb2:	f8ad 2006 	strh.w	r2, [sp, #6]
   d5bb6:	5ccd      	ldrb	r5, [r1, r3]
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}

void MQTT5::processPacketConnAck(uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5bb8:	4604      	mov	r4, r0
    isConnecting = false;
    bool sessionPresent = buffer[index++] & 0x1;
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
    if (reasonCode == MQTT5_REASON_CODE::SUCCESS) {
   d5bba:	bb05      	cbnz	r5, d5bfe <_ZN5MQTT520processPacketConnAckEhtt+0x62>
        uint16_t propertiesLength;
        if (readVariableByteInteger(&index, &propertiesLength) && propertiesLength > 0) {
   d5bbc:	f10d 020e 	add.w	r2, sp, #14
   d5bc0:	f10d 0106 	add.w	r1, sp, #6
   d5bc4:	f7ff f97a 	bl	d4ebc <_ZN5MQTT523readVariableByteIntegerEPtS0_>
   d5bc8:	b110      	cbz	r0, d5bd0 <_ZN5MQTT520processPacketConnAckEhtt+0x34>
   d5bca:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d5bce:	bb13      	cbnz	r3, d5c16 <_ZN5MQTT520processPacketConnAckEhtt+0x7a>
        }
        lastPingSent = 0;
        pingRetries = 0;
        nextPacketId = 1;
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5bd0:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
                processPacketConnAckProperties(buffer[index++], &index);
            }
        }
        lastPingSent = 0;
        pingRetries = 0;
        nextPacketId = 1;
   d5bd4:	2301      	movs	r3, #1
            uint16_t propertiesStartIndex = index;
            while (index - propertiesStartIndex < propertiesLength) {
                processPacketConnAckProperties(buffer[index++], &index);
            }
        }
        lastPingSent = 0;
   d5bd6:	2500      	movs	r5, #0
        pingRetries = 0;
        nextPacketId = 1;
   d5bd8:	8563      	strh	r3, [r4, #42]	; 0x2a
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5bda:	4098      	lsls	r0, r3
            uint16_t propertiesStartIndex = index;
            while (index - propertiesStartIndex < propertiesLength) {
                processPacketConnAckProperties(buffer[index++], &index);
            }
        }
        lastPingSent = 0;
   d5bdc:	6225      	str	r5, [r4, #32]
        pingRetries = 0;
   d5bde:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        nextPacketId = 1;
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5be2:	f000 fe03 	bl	d67ec <malloc>
        registeredTopicAliasLen = 0;
   d5be6:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        }
        lastPingSent = 0;
        pingRetries = 0;
        nextPacketId = 1;
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5bea:	6320      	str	r0, [r4, #48]	; 0x30
        registeredTopicAliasLen = 0;
        logger.info("Successfully connected");
   d5bec:	4915      	ldr	r1, [pc, #84]	; (d5c44 <_ZN5MQTT520processPacketConnAckEhtt+0xa8>)
   d5bee:	4620      	mov	r0, r4
   d5bf0:	f7fe fad8 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (callbackConnectSuccess)
   d5bf4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5bf6:	b313      	cbz	r3, d5c3e <_ZN5MQTT520processPacketConnAckEhtt+0xa2>
            callbackConnectSuccess(sessionPresent);
   d5bf8:	f006 0001 	and.w	r0, r6, #1
   d5bfc:	e009      	b.n	d5c12 <_ZN5MQTT520processPacketConnAckEhtt+0x76>
    } else {
        close();
   d5bfe:	f7ff ffb9 	bl	d5b74 <_ZN5MQTT55closeEv>
        logger.info("Failed to connect. Reason: %d", (uint8_t) reasonCode);   
   d5c02:	462a      	mov	r2, r5
   d5c04:	4910      	ldr	r1, [pc, #64]	; (d5c48 <_ZN5MQTT520processPacketConnAckEhtt+0xac>)
   d5c06:	4620      	mov	r0, r4
   d5c08:	f7fe facc 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (callbackConnectFailed)
   d5c0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5c0e:	b1b3      	cbz	r3, d5c3e <_ZN5MQTT520processPacketConnAckEhtt+0xa2>
            callbackConnectFailed(reasonCode);
   d5c10:	4628      	mov	r0, r5
   d5c12:	4798      	blx	r3
    }
}
   d5c14:	e013      	b.n	d5c3e <_ZN5MQTT520processPacketConnAckEhtt+0xa2>
    bool sessionPresent = buffer[index++] & 0x1;
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
    if (reasonCode == MQTT5_REASON_CODE::SUCCESS) {
        uint16_t propertiesLength;
        if (readVariableByteInteger(&index, &propertiesLength) && propertiesLength > 0) {
            uint16_t propertiesStartIndex = index;
   d5c16:	f8bd 5006 	ldrh.w	r5, [sp, #6]
            while (index - propertiesStartIndex < propertiesLength) {
   d5c1a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d5c1e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   d5c22:	1b59      	subs	r1, r3, r5
   d5c24:	4291      	cmp	r1, r2
   d5c26:	dad3      	bge.n	d5bd0 <_ZN5MQTT520processPacketConnAckEhtt+0x34>
                processPacketConnAckProperties(buffer[index++], &index);
   d5c28:	1c5a      	adds	r2, r3, #1
   d5c2a:	68a1      	ldr	r1, [r4, #8]
   d5c2c:	f8ad 2006 	strh.w	r2, [sp, #6]
   d5c30:	5cc9      	ldrb	r1, [r1, r3]
   d5c32:	f10d 0206 	add.w	r2, sp, #6
   d5c36:	4620      	mov	r0, r4
   d5c38:	f7ff fa5a 	bl	d50f0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt>
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
    if (reasonCode == MQTT5_REASON_CODE::SUCCESS) {
        uint16_t propertiesLength;
        if (readVariableByteInteger(&index, &propertiesLength) && propertiesLength > 0) {
            uint16_t propertiesStartIndex = index;
            while (index - propertiesStartIndex < propertiesLength) {
   d5c3c:	e7ed      	b.n	d5c1a <_ZN5MQTT520processPacketConnAckEhtt+0x7e>
        close();
        logger.info("Failed to connect. Reason: %d", (uint8_t) reasonCode);   
        if (callbackConnectFailed)
            callbackConnectFailed(reasonCode);
    }
}
   d5c3e:	b004      	add	sp, #16
   d5c40:	bd70      	pop	{r4, r5, r6, pc}
   d5c42:	bf00      	nop
   d5c44:	000dbde2 	.word	0x000dbde2
   d5c48:	000dbdf9 	.word	0x000dbdf9

000d5c4c <_ZN5MQTT523processPacketDisconnectEhtt>:
void MQTT5::processPacketPingResp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    lastPingSent = 0;
    pingRetries = 0;
}

void MQTT5::processPacketDisconnect(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d5c4c:	b510      	push	{r4, lr}
   d5c4e:	4604      	mov	r4, r0
    MQTT5_REASON_CODE reason = contentLength == 0 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d5c50:	b113      	cbz	r3, d5c58 <_ZN5MQTT523processPacketDisconnectEhtt+0xc>
   d5c52:	6883      	ldr	r3, [r0, #8]
   d5c54:	5c9a      	ldrb	r2, [r3, r2]
   d5c56:	e000      	b.n	d5c5a <_ZN5MQTT523processPacketDisconnectEhtt+0xe>
   d5c58:	461a      	mov	r2, r3
    logger.info("Received disconnect from server due to reason %d", (uint8_t) reason);
   d5c5a:	4620      	mov	r0, r4
   d5c5c:	4903      	ldr	r1, [pc, #12]	; (d5c6c <_ZN5MQTT523processPacketDisconnectEhtt+0x20>)
   d5c5e:	f7fe faa1 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    close();
   d5c62:	4620      	mov	r0, r4
}
   d5c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void MQTT5::processPacketDisconnect(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    MQTT5_REASON_CODE reason = contentLength == 0 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received disconnect from server due to reason %d", (uint8_t) reason);
    close();
   d5c68:	f7ff bf84 	b.w	d5b74 <_ZN5MQTT55closeEv>
   d5c6c:	000dbe17 	.word	0x000dbe17

000d5c70 <_ZN5MQTT513processPacketEhhtt>:
        }
    }
    return 0;
}

void MQTT5::processPacket(uint8_t packetType, uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5c70:	b570      	push	{r4, r5, r6, lr}
   d5c72:	460c      	mov	r4, r1
    switch (packetType) {
   d5c74:	1ea5      	subs	r5, r4, #2
        }
    }
    return 0;
}

void MQTT5::processPacket(uint8_t packetType, uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5c76:	4611      	mov	r1, r2
   d5c78:	461a      	mov	r2, r3
   d5c7a:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    switch (packetType) {
   d5c7e:	2d0c      	cmp	r5, #12
   d5c80:	d831      	bhi.n	d5ce6 <_ZN5MQTT513processPacketEhhtt+0x76>
   d5c82:	e8df f005 	tbb	[pc, r5]
   d5c86:	0b07      	.short	0x0b07
   d5c88:	1b170f0f 	.word	0x1b170f0f
   d5c8c:	23301f30 	.word	0x23301f30
   d5c90:	2730      	.short	0x2730
   d5c92:	2c          	.byte	0x2c
   d5c93:	00          	.byte	0x00
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void MQTT5::processPacket(uint8_t packetType, uint8_t flags, uint16_t index, uint16_t contentLength) {
    switch (packetType) {
        case CTRL_CONNACK:
            processPacketConnAck(flags, index, contentLength);
   d5c98:	f7ff bf80 	b.w	d5b9c <_ZN5MQTT520processPacketConnAckEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5c9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    switch (packetType) {
        case CTRL_CONNACK:
            processPacketConnAck(flags, index, contentLength);
            break;
        case CTRL_PUBLISH:
            processPacketPub(flags, index, contentLength);
   d5ca0:	f7ff bd12 	b.w	d56c8 <_ZN5MQTT516processPacketPubEhtt>
            break;
        case CTRL_PUBACK:
        case CTRL_PUBREC:
            processPacketPubAckRec(flags, index, contentLength, packetType == CTRL_PUBACK);
   d5ca4:	1f25      	subs	r5, r4, #4
   d5ca6:	426c      	negs	r4, r5
   d5ca8:	416c      	adcs	r4, r5
   d5caa:	9404      	str	r4, [sp, #16]
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5cac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case CTRL_PUBLISH:
            processPacketPub(flags, index, contentLength);
            break;
        case CTRL_PUBACK:
        case CTRL_PUBREC:
            processPacketPubAckRec(flags, index, contentLength, packetType == CTRL_PUBACK);
   d5cb0:	f7ff b946 	b.w	d4f40 <_ZN5MQTT522processPacketPubAckRecEhttb>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5cb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case CTRL_PUBACK:
        case CTRL_PUBREC:
            processPacketPubAckRec(flags, index, contentLength, packetType == CTRL_PUBACK);
            break;
        case CTRL_PUBREL:
            processPacketPubRel(flags, index, contentLength);
   d5cb8:	f7ff bdb0 	b.w	d581c <_ZN5MQTT519processPacketPubRelEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5cbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_PUBREL:
            processPacketPubRel(flags, index, contentLength);
            break;
        case CTRL_PUBCOMP:
            processPacketPubComp(flags, index, contentLength);
   d5cc0:	f7ff b976 	b.w	d4fb0 <_ZN5MQTT520processPacketPubCompEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_PUBCOMP:
            processPacketPubComp(flags, index, contentLength);
            break;
        case CTRL_SUBACK:
            processPacketSubAck(flags, index, contentLength);
   d5cc8:	f7ff b990 	b.w	d4fec <_ZN5MQTT519processPacketSubAckEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_SUBACK:
            processPacketSubAck(flags, index, contentLength);
            break;
        case CTRL_UNSUBACK:
            processPacketUnsub(flags, index, contentLength);
   d5cd0:	f7ff b9c4 	b.w	d505c <_ZN5MQTT518processPacketUnsubEhtt>
        }
    }
}

void MQTT5::processPacketPingResp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    lastPingSent = 0;
   d5cd4:	2300      	movs	r3, #0
   d5cd6:	6203      	str	r3, [r0, #32]
    pingRetries = 0;
   d5cd8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   d5cdc:	bd70      	pop	{r4, r5, r6, pc}
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5cde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_PINGRESP:
            processPacketPingResp(flags, index, contentLength);
            break;
        case CTRL_DISCONNECT:
            processPacketDisconnect(flags, index, contentLength);
   d5ce2:	f7ff bfb3 	b.w	d5c4c <_ZN5MQTT523processPacketDisconnectEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
   d5ce6:	4622      	mov	r2, r4
   d5ce8:	4901      	ldr	r1, [pc, #4]	; (d5cf0 <_ZN5MQTT513processPacketEhhtt+0x80>)
   d5cea:	f7fe fa5b 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5cee:	bd70      	pop	{r4, r5, r6, pc}
   d5cf0:	000dbe48 	.word	0x000dbe48

000d5cf4 <_ZN5MQTT54loopEv>:
    }
    logger.trace("Await timed out");
    return false;
}

uint8_t MQTT5::loop() {
   d5cf4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5cf6:	4604      	mov	r4, r0
    // Check if connecting takes too long
    if (connecting()) {
   d5cf8:	f7ff f8a0 	bl	d4e3c <_ZN5MQTT510connectingEv>
   d5cfc:	b328      	cbz	r0, d5d4a <_ZN5MQTT54loopEv+0x56>
        if (!socket->connected()) {
   d5cfe:	6860      	ldr	r0, [r4, #4]
   d5d00:	6803      	ldr	r3, [r0, #0]
   d5d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5d04:	4798      	blx	r3
   d5d06:	4605      	mov	r5, r0
   d5d08:	b938      	cbnz	r0, d5d1a <_ZN5MQTT54loopEv+0x26>
            close();
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	f7ff ff32 	bl	d5b74 <_ZN5MQTT55closeEv>
            logger.info("Socked closed");
   d5d10:	4955      	ldr	r1, [pc, #340]	; (d5e68 <_ZN5MQTT54loopEv+0x174>)
   d5d12:	4620      	mov	r0, r4
   d5d14:	f7fe fa46 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            return 0;
   d5d18:	e0a2      	b.n	d5e60 <_ZN5MQTT54loopEv+0x16c>
   d5d1a:	f000 fac9 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
        } else if (millis() - lastOutbound > keepAlive*1000UL) {
   d5d1e:	69a3      	ldr	r3, [r4, #24]
   d5d20:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d5d22:	1ac0      	subs	r0, r0, r3
   d5d24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5d28:	4353      	muls	r3, r2
   d5d2a:	4298      	cmp	r0, r3
   d5d2c:	d90d      	bls.n	d5d4a <_ZN5MQTT54loopEv+0x56>
            close();
   d5d2e:	4620      	mov	r0, r4
   d5d30:	f7ff ff20 	bl	d5b74 <_ZN5MQTT55closeEv>
            logger.info("Connect timed out");
   d5d34:	494d      	ldr	r1, [pc, #308]	; (d5e6c <_ZN5MQTT54loopEv+0x178>)
   d5d36:	4620      	mov	r0, r4
   d5d38:	f7fe fa34 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            if (callbackConnectFailed)
   d5d3c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5d3e:	2b00      	cmp	r3, #0
   d5d40:	f000 808d 	beq.w	d5e5e <_ZN5MQTT54loopEv+0x16a>
                callbackConnectFailed(MQTT5_REASON_CODE::UNSPECIFIED_ERROR);
   d5d44:	2080      	movs	r0, #128	; 0x80
   d5d46:	4798      	blx	r3
   d5d48:	e089      	b.n	d5e5e <_ZN5MQTT54loopEv+0x16a>
            return 0;
        }
    }

    // Read data from socket
    if (socket->available()) {
   d5d4a:	6860      	ldr	r0, [r4, #4]
   d5d4c:	6803      	ldr	r3, [r0, #0]
   d5d4e:	691b      	ldr	r3, [r3, #16]
   d5d50:	4798      	blx	r3
   d5d52:	2800      	cmp	r0, #0
   d5d54:	d043      	beq.n	d5dde <_ZN5MQTT54loopEv+0xea>
   d5d56:	f000 faab 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
        lastInbound = millis();
   d5d5a:	61e0      	str	r0, [r4, #28]
        uint16_t readLength = socket->read(buffer, maxPacketSize);
   d5d5c:	6860      	ldr	r0, [r4, #4]
   d5d5e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   d5d60:	6803      	ldr	r3, [r0, #0]
   d5d62:	68a1      	ldr	r1, [r4, #8]
   d5d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5d66:	4798      	blx	r3
        logger.dump(buffer, readLength);
        logger.print("\n");
#endif

        uint16_t index = 1;
        uint16_t contentLength = 0;
   d5d68:	aa04      	add	r2, sp, #16
   d5d6a:	2500      	movs	r5, #0
    }

    // Read data from socket
    if (socket->available()) {
        lastInbound = millis();
        uint16_t readLength = socket->read(buffer, maxPacketSize);
   d5d6c:	4606      	mov	r6, r0
        logger.trace("Read %d bytes:", readLength);
        logger.dump(buffer, readLength);
        logger.print("\n");
#endif

        uint16_t index = 1;
   d5d6e:	2301      	movs	r3, #1
        uint16_t contentLength = 0;
   d5d70:	f822 5d02 	strh.w	r5, [r2, #-2]!
        
        if (!readVariableByteInteger(&index, &contentLength)) {
   d5d74:	a903      	add	r1, sp, #12
   d5d76:	4620      	mov	r0, r4
        logger.trace("Read %d bytes:", readLength);
        logger.dump(buffer, readLength);
        logger.print("\n");
#endif

        uint16_t index = 1;
   d5d78:	f8ad 300c 	strh.w	r3, [sp, #12]
        uint16_t contentLength = 0;
        
        if (!readVariableByteInteger(&index, &contentLength)) {
   d5d7c:	f7ff f89e 	bl	d4ebc <_ZN5MQTT523readVariableByteIntegerEPtS0_>
   d5d80:	b358      	cbz	r0, d5dda <_ZN5MQTT54loopEv+0xe6>
            return 0;
        } else if (readLength != contentLength + index) {
   d5d82:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d5d86:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   d5d8a:	b2b6      	uxth	r6, r6
   d5d8c:	441a      	add	r2, r3
   d5d8e:	4296      	cmp	r6, r2
   d5d90:	d001      	beq.n	d5d96 <_ZN5MQTT54loopEv+0xa2>
            logger.warn("Packet not complete");
   d5d92:	4937      	ldr	r1, [pc, #220]	; (d5e70 <_ZN5MQTT54loopEv+0x17c>)
   d5d94:	e05f      	b.n	d5e56 <_ZN5MQTT54loopEv+0x162>
            return 0;
        }

        uint8_t packetType = (buffer[0] >> 4);
   d5d96:	68a2      	ldr	r2, [r4, #8]
   d5d98:	7812      	ldrb	r2, [r2, #0]
   d5d9a:	1112      	asrs	r2, r2, #4
        if (packetType != CTRL_PINGRESP && 
   d5d9c:	2a0d      	cmp	r2, #13
        } else if (readLength != contentLength + index) {
            logger.warn("Packet not complete");
            return 0;
        }

        uint8_t packetType = (buffer[0] >> 4);
   d5d9e:	b2d5      	uxtb	r5, r2
        if (packetType != CTRL_PINGRESP && 
   d5da0:	d009      	beq.n	d5db6 <_ZN5MQTT54loopEv+0xc2>
   d5da2:	2a03      	cmp	r2, #3
   d5da4:	d007      	beq.n	d5db6 <_ZN5MQTT54loopEv+0xc2>
            packetType != CTRL_PUBLISH && 
   d5da6:	2d0e      	cmp	r5, #14
            packetType != CTRL_DISCONNECT)
            packetsInFlight--;
   d5da8:	bf1e      	ittt	ne
   d5daa:	f894 1035 	ldrbne.w	r1, [r4, #53]	; 0x35
   d5dae:	f101 31ff 	addne.w	r1, r1, #4294967295
   d5db2:	f884 1035 	strbne.w	r1, [r4, #53]	; 0x35
            
        logger.trace("Received packet type %d with length %d", packetType, contentLength);
   d5db6:	4620      	mov	r0, r4
   d5db8:	492e      	ldr	r1, [pc, #184]	; (d5e74 <_ZN5MQTT54loopEv+0x180>)
   d5dba:	f7ff f807 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
        processPacket(packetType, buffer[0] & 0xF, index, contentLength);
   d5dbe:	68a2      	ldr	r2, [r4, #8]
   d5dc0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d5dc4:	7812      	ldrb	r2, [r2, #0]
   d5dc6:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d5dca:	9100      	str	r1, [sp, #0]
   d5dcc:	f002 020f 	and.w	r2, r2, #15
   d5dd0:	4629      	mov	r1, r5
   d5dd2:	4620      	mov	r0, r4
   d5dd4:	f7ff ff4c 	bl	d5c70 <_ZN5MQTT513processPacketEhhtt>
        return packetType;
   d5dd8:	e042      	b.n	d5e60 <_ZN5MQTT54loopEv+0x16c>

        uint16_t index = 1;
        uint16_t contentLength = 0;
        
        if (!readVariableByteInteger(&index, &contentLength)) {
            return 0;
   d5dda:	4605      	mov	r5, r0
   d5ddc:	e040      	b.n	d5e60 <_ZN5MQTT54loopEv+0x16c>
        logger.trace("Received packet type %d with length %d", packetType, contentLength);
        processPacket(packetType, buffer[0] & 0xF, index, contentLength);
        return packetType;
    }
    
    if (!connected())
   d5dde:	4620      	mov	r0, r4
   d5de0:	f7ff f833 	bl	d4e4a <_ZN5MQTT59connectedEv>
   d5de4:	2800      	cmp	r0, #0
   d5de6:	d03a      	beq.n	d5e5e <_ZN5MQTT54loopEv+0x16a>
   d5de8:	f000 fa62 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
        return 0;

    // Check keep alive interval
    if ((millis() - lastInbound >= keepAlive*1000UL) || (millis() - lastOutbound >= keepAlive*1000UL)) {
   d5dec:	69e3      	ldr	r3, [r4, #28]
   d5dee:	1ac0      	subs	r0, r0, r3
   d5df0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d5df2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   d5df6:	436b      	muls	r3, r5
   d5df8:	4298      	cmp	r0, r3
   d5dfa:	d207      	bcs.n	d5e0c <_ZN5MQTT54loopEv+0x118>
   d5dfc:	f000 fa58 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
   d5e00:	69a3      	ldr	r3, [r4, #24]
   d5e02:	1ac0      	subs	r0, r0, r3
   d5e04:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d5e06:	435d      	muls	r5, r3
   d5e08:	42a8      	cmp	r0, r5
   d5e0a:	d309      	bcc.n	d5e20 <_ZN5MQTT54loopEv+0x12c>
        if (lastPingSent == 0 && !ping()) {
   d5e0c:	6a23      	ldr	r3, [r4, #32]
   d5e0e:	b94b      	cbnz	r3, d5e24 <_ZN5MQTT54loopEv+0x130>
   d5e10:	4620      	mov	r0, r4
   d5e12:	f7ff fb67 	bl	d54e4 <_ZN5MQTT54pingEv>
   d5e16:	b918      	cbnz	r0, d5e20 <_ZN5MQTT54loopEv+0x12c>
            logger.warn("Ping could not be sent");
   d5e18:	4917      	ldr	r1, [pc, #92]	; (d5e78 <_ZN5MQTT54loopEv+0x184>)
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	f7fe ffe4 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
        }
    }

    // Check if ping needs retry
    if (lastPingSent != 0 && millis() - lastPingSent >= PING_TIMEOUT && pingRetries < 2) {
   d5e20:	6a23      	ldr	r3, [r4, #32]
   d5e22:	b1e3      	cbz	r3, d5e5e <_ZN5MQTT54loopEv+0x16a>
   d5e24:	f000 fa44 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
   d5e28:	6a23      	ldr	r3, [r4, #32]
   d5e2a:	1ac0      	subs	r0, r0, r3
   d5e2c:	f640 33b7 	movw	r3, #2999	; 0xbb7
   d5e30:	4298      	cmp	r0, r3
   d5e32:	d914      	bls.n	d5e5e <_ZN5MQTT54loopEv+0x16a>
   d5e34:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   d5e38:	2b01      	cmp	r3, #1
   d5e3a:	d810      	bhi.n	d5e5e <_ZN5MQTT54loopEv+0x16a>
        pingRetries++;
   d5e3c:	3301      	adds	r3, #1
   d5e3e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        logger.info("Ping response not received yet. Resending ping request");
   d5e42:	490e      	ldr	r1, [pc, #56]	; (d5e7c <_ZN5MQTT54loopEv+0x188>)
   d5e44:	4620      	mov	r0, r4
   d5e46:	f7fe f9ad 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (!ping()) {
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	f7ff fb4a 	bl	d54e4 <_ZN5MQTT54pingEv>
   d5e50:	4605      	mov	r5, r0
   d5e52:	b920      	cbnz	r0, d5e5e <_ZN5MQTT54loopEv+0x16a>
            logger.warn("Ping could not be sent");
   d5e54:	4908      	ldr	r1, [pc, #32]	; (d5e78 <_ZN5MQTT54loopEv+0x184>)
   d5e56:	4620      	mov	r0, r4
   d5e58:	f7fe ffc6 	bl	d4de8 <_ZNK5spark6Logger4warnEPKcz>
   d5e5c:	e000      	b.n	d5e60 <_ZN5MQTT54loopEv+0x16c>
        }
    }
    return 0;
   d5e5e:	2500      	movs	r5, #0
}
   d5e60:	4628      	mov	r0, r5
   d5e62:	b004      	add	sp, #16
   d5e64:	bd70      	pop	{r4, r5, r6, pc}
   d5e66:	bf00      	nop
   d5e68:	000dbe66 	.word	0x000dbe66
   d5e6c:	000dbe74 	.word	0x000dbe74
   d5e70:	000dbe86 	.word	0x000dbe86
   d5e74:	000dbe9a 	.word	0x000dbe9a
   d5e78:	000dbec1 	.word	0x000dbec1
   d5e7c:	000dbed8 	.word	0x000dbed8

000d5e80 <_ZN5MQTT512awaitPacketsEm>:

uint8_t MQTT5::packetsAwaitingAck() {
    return packetsInFlight;
}

bool MQTT5::awaitPackets(unsigned long timeout) {
   d5e80:	b570      	push	{r4, r5, r6, lr}
   d5e82:	4604      	mov	r4, r0
   d5e84:	460e      	mov	r6, r1
   d5e86:	f000 fa13 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
    unsigned long t = millis();
    logger.trace("Await packet acks");
   d5e8a:	490e      	ldr	r1, [pc, #56]	; (d5ec4 <_ZN5MQTT512awaitPacketsEm+0x44>)
   d5e8c:	4605      	mov	r5, r0
   d5e8e:	4620      	mov	r0, r4
   d5e90:	f7fe ff9c 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
   d5e94:	f000 fa0c 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
    while (millis() - t < timeout) {
   d5e98:	1b40      	subs	r0, r0, r5
   d5e9a:	42b0      	cmp	r0, r6
   d5e9c:	d20c      	bcs.n	d5eb8 <_ZN5MQTT512awaitPacketsEm+0x38>
        loop();
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	f7ff ff28 	bl	d5cf4 <_ZN5MQTT54loopEv>
        if (packetsAwaitingAck() == 0) {
   d5ea4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   d5ea8:	2b00      	cmp	r3, #0
   d5eaa:	d1f3      	bne.n	d5e94 <_ZN5MQTT512awaitPacketsEm+0x14>
            logger.trace("All packets acknowledged");
   d5eac:	4620      	mov	r0, r4
   d5eae:	4906      	ldr	r1, [pc, #24]	; (d5ec8 <_ZN5MQTT512awaitPacketsEm+0x48>)
   d5eb0:	f7fe ff8c 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
            return true;
   d5eb4:	2001      	movs	r0, #1
   d5eb6:	bd70      	pop	{r4, r5, r6, pc}
        }
    }
    logger.trace("Await timed out");
   d5eb8:	4620      	mov	r0, r4
   d5eba:	4904      	ldr	r1, [pc, #16]	; (d5ecc <_ZN5MQTT512awaitPacketsEm+0x4c>)
   d5ebc:	f7fe ff86 	bl	d4dcc <_ZNK5spark6Logger5traceEPKcz>
    return false;
   d5ec0:	2000      	movs	r0, #0
}
   d5ec2:	bd70      	pop	{r4, r5, r6, pc}
   d5ec4:	000dbf0f 	.word	0x000dbf0f
   d5ec8:	000dbf21 	.word	0x000dbf21
   d5ecc:	000dbf3a 	.word	0x000dbf3a

000d5ed0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions>:
    hostDomain = domain;
    hostPort = port;
    return connect(clientId, options);
}

bool MQTT5::connect(const char *clientId, MQTT5ConnectOptions options) {
   d5ed0:	b082      	sub	sp, #8
   d5ed2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ed6:	b08f      	sub	sp, #60	; 0x3c
   d5ed8:	4604      	mov	r4, r0
   d5eda:	9105      	str	r1, [sp, #20]
   d5edc:	a918      	add	r1, sp, #96	; 0x60
   d5ede:	e881 000c 	stmia.w	r1, {r2, r3}
   d5ee2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d5ee4:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   d5ee6:	9304      	str	r3, [sp, #16]
   d5ee8:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
   d5eec:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
   d5ef0:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    if (connecting())
   d5ef2:	f7fe ffa3 	bl	d4e3c <_ZN5MQTT510connectingEv>
   d5ef6:	4682      	mov	sl, r0
   d5ef8:	2800      	cmp	r0, #0
   d5efa:	f040 815b 	bne.w	d61b4 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2e4>
        return true;
    
    keepAlive = options.keepAlive;
   d5efe:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   d5f02:	84e3      	strh	r3, [r4, #38]	; 0x26
    if (!connected()) {
   d5f04:	4620      	mov	r0, r4
   d5f06:	f7fe ffa0 	bl	d4e4a <_ZN5MQTT59connectedEv>
   d5f0a:	4606      	mov	r6, r0
   d5f0c:	2800      	cmp	r0, #0
   d5f0e:	f040 814d 	bne.w	d61ac <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2dc>
        isConnecting = true;
        bool success = true;
        if (hostIp == NULL) { // Use domain to connect
   d5f12:	6921      	ldr	r1, [r4, #16]
    if (connecting())
        return true;
    
    keepAlive = options.keepAlive;
    if (!connected()) {
        isConnecting = true;
   d5f14:	2301      	movs	r3, #1
   d5f16:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d5f1a:	8aa3      	ldrh	r3, [r4, #20]
        bool success = true;
        if (hostIp == NULL) { // Use domain to connect
   d5f1c:	b969      	cbnz	r1, d5f3a <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x6a>
            logger.info("Connecting to server %s on port %d", hostDomain, hostPort);
   d5f1e:	68e2      	ldr	r2, [r4, #12]
   d5f20:	49a7      	ldr	r1, [pc, #668]	; (d61c0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2f0>)
   d5f22:	4620      	mov	r0, r4
   d5f24:	f7fe f93e 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            success = socket->connect(hostDomain, hostPort);
   d5f28:	6860      	ldr	r0, [r4, #4]
   d5f2a:	8aa2      	ldrh	r2, [r4, #20]
   d5f2c:	6803      	ldr	r3, [r0, #0]
   d5f2e:	68e1      	ldr	r1, [r4, #12]
   d5f30:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d5f34:	4633      	mov	r3, r6
   d5f36:	47d0      	blx	sl
   d5f38:	e01a      	b.n	d5f70 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xa0>
        } else { // Use ip address to connect
            logger.info("Connecting to server %d.%d.%d.%d on port %d", hostIp[0], hostIp[1], hostIp[2], hostIp[3], hostPort);
   d5f3a:	7848      	ldrb	r0, [r1, #1]
   d5f3c:	780a      	ldrb	r2, [r1, #0]
   d5f3e:	9302      	str	r3, [sp, #8]
   d5f40:	78cb      	ldrb	r3, [r1, #3]
   d5f42:	9301      	str	r3, [sp, #4]
   d5f44:	788b      	ldrb	r3, [r1, #2]
   d5f46:	9300      	str	r3, [sp, #0]
   d5f48:	499e      	ldr	r1, [pc, #632]	; (d61c4 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2f4>)
   d5f4a:	4603      	mov	r3, r0
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	f7fe f929 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            success = socket->connect(hostIp, hostPort);
   d5f52:	f8d4 a004 	ldr.w	sl, [r4, #4]
   d5f56:	6921      	ldr	r1, [r4, #16]
   d5f58:	f8da 3000 	ldr.w	r3, [sl]
   d5f5c:	a808      	add	r0, sp, #32
   d5f5e:	f8d3 b020 	ldr.w	fp, [r3, #32]
   d5f62:	f003 fec5 	bl	d9cf0 <_ZN9IPAddressC1EPKh>
   d5f66:	4633      	mov	r3, r6
   d5f68:	8aa2      	ldrh	r2, [r4, #20]
   d5f6a:	a908      	add	r1, sp, #32
   d5f6c:	4650      	mov	r0, sl
   d5f6e:	47d8      	blx	fp
   d5f70:	3000      	adds	r0, #0
   d5f72:	bf18      	it	ne
   d5f74:	2001      	movne	r0, #1
        }

        // Check if TCP connection was open successfully
        if (!success) {
   d5f76:	b920      	cbnz	r0, d5f82 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xb2>
            logger.info("Could not open TCP connection to server");
   d5f78:	4993      	ldr	r1, [pc, #588]	; (d61c8 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2f8>)
   d5f7a:	4620      	mov	r0, r4
   d5f7c:	f7fe f912 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5f80:	e00c      	b.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }
        
        packetsInFlight = 0;
        uint16_t index = 0;
   d5f82:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
            logger.info("Could not open TCP connection to server");
            close();
            return false;
        }
        
        packetsInFlight = 0;
   d5f86:	2300      	movs	r3, #0
        uint16_t index = 0;
   d5f88:	f82a 3d1a 	strh.w	r3, [sl, #-26]!
            logger.info("Could not open TCP connection to server");
            close();
            return false;
        }
        
        packetsInFlight = 0;
   d5f8c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        uint16_t index = 0;
        // 3.1.1 CONNECT Fixed Header
        if (!writeByte(&index, (uint8_t) (CTRL_CONNECT << 4))) {
   d5f90:	2210      	movs	r2, #16
   d5f92:	4651      	mov	r1, sl
   d5f94:	4620      	mov	r0, r4
   d5f96:	f7ff fa91 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5f9a:	b918      	cbnz	r0, d5fa4 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xd4>
            close();
   d5f9c:	4620      	mov	r0, r4
   d5f9e:	f7ff fde9 	bl	d5b74 <_ZN5MQTT55closeEv>
            return false;
   d5fa2:	e101      	b.n	d61a8 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2d8>
        }

        // 3.1.2 CONNECT Variable Header
        if (!writeUTF8String(&index, (const char[]) {'M','Q','T','T'}, 4)) {
   d5fa4:	2304      	movs	r3, #4
   d5fa6:	4a89      	ldr	r2, [pc, #548]	; (d61cc <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2fc>)
   d5fa8:	4651      	mov	r1, sl
   d5faa:	4620      	mov	r0, r4
   d5fac:	f7ff fa5e 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d5fb0:	2800      	cmp	r0, #0
   d5fb2:	d0f3      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.2.2 Protocol Version
        if (!writeByte(&index, 5)) {
   d5fb4:	2205      	movs	r2, #5
   d5fb6:	4651      	mov	r1, sl
   d5fb8:	4620      	mov	r0, r4
   d5fba:	f7ff fa7f 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d5fbe:	2800      	cmp	r0, #0
   d5fc0:	d0ec      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
   d5fc2:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
   d5fc6:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
            close();
            return false;
        }
        
        // 3.1.2.3 Connect Flags
        if (!writeByte(&index, 
   d5fca:	f1b9 0f00 	cmp.w	r9, #0
   d5fce:	ea4f 01c1 	mov.w	r1, r1, lsl #3
   d5fd2:	bf14      	ite	ne
   d5fd4:	f06f 027f 	mvnne.w	r2, #127	; 0x7f
   d5fd8:	2200      	moveq	r2, #0
   d5fda:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
   d5fde:	f1b8 0f00 	cmp.w	r8, #0
   d5fe2:	bf14      	ite	ne
   d5fe4:	f04f 0e40 	movne.w	lr, #64	; 0x40
   d5fe8:	f04f 0e00 	moveq.w	lr, #0
   d5fec:	b249      	sxtb	r1, r1
            ((options.username != NULL) << 7) | 
            ((options.password != NULL) << 6) | 
            (options.willRetain << 5) | 
            (((uint8_t) options.willQos) << 3) | 
            ((options.willTopic && options.willPayload) << 2) | 
   d5fee:	b127      	cbz	r7, d5ffa <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x12a>
   d5ff0:	9b04      	ldr	r3, [sp, #16]
   d5ff2:	1c18      	adds	r0, r3, #0
   d5ff4:	bf18      	it	ne
   d5ff6:	2001      	movne	r0, #1
   d5ff8:	e000      	b.n	d5ffc <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x12c>
   d5ffa:	4638      	mov	r0, r7
            close();
            return false;
        }
        
        // 3.1.2.3 Connect Flags
        if (!writeByte(&index, 
   d5ffc:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   d6000:	ea41 0343 	orr.w	r3, r1, r3, lsl #1
   d6004:	4313      	orrs	r3, r2
   d6006:	ea4e 0203 	orr.w	r2, lr, r3
   d600a:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
   d600e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   d6012:	4651      	mov	r1, sl
   d6014:	4620      	mov	r0, r4
   d6016:	f7ff fa51 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d601a:	2800      	cmp	r0, #0
   d601c:	d0be      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.2.10 Keep Alive
        if (!writeInt(&index, keepAlive)) {
   d601e:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d6020:	4651      	mov	r1, sl
   d6022:	4620      	mov	r0, r4
   d6024:	f7ff fad6 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d6028:	2800      	cmp	r0, #0
   d602a:	d0b7      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.2.11 CONNECT Properties
        uint16_t indexProp = index;
   d602c:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d6030:	f8ad 3020 	strh.w	r3, [sp, #32]
        if (options.properties) {
   d6034:	2d00      	cmp	r5, #0
   d6036:	d04a      	beq.n	d60ce <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1fe>
            // 3.1.2.11.2 Session Expiry Interval
            if ((*options.properties).sessionExpiryInterval > 0) {
   d6038:	682b      	ldr	r3, [r5, #0]
   d603a:	b16b      	cbz	r3, d6058 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x188>
                if (!writeByte(&indexProp, PROP_SESSION_EXPIRY_INTERVAL)) {
   d603c:	2211      	movs	r2, #17
   d603e:	a908      	add	r1, sp, #32
   d6040:	4620      	mov	r0, r4
   d6042:	f7ff fa3b 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d6046:	2800      	cmp	r0, #0
   d6048:	d0a8      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, (*options.properties).sessionExpiryInterval)) {
   d604a:	682a      	ldr	r2, [r5, #0]
   d604c:	a908      	add	r1, sp, #32
   d604e:	4620      	mov	r0, r4
   d6050:	f7ff fc08 	bl	d5864 <_ZN5MQTT58writeIntEPtm>
   d6054:	2800      	cmp	r0, #0
   d6056:	d0a1      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    return false;
                }
            }

            // 3.1.2.11.3 Receive Maximum
            if ((*options.properties).receiveMaximum > 0) {
   d6058:	88ab      	ldrh	r3, [r5, #4]
   d605a:	b16b      	cbz	r3, d6078 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1a8>
                if (!writeByte(&indexProp, PROP_RECEIVE_MAXIMUM)) {
   d605c:	2221      	movs	r2, #33	; 0x21
   d605e:	a908      	add	r1, sp, #32
   d6060:	4620      	mov	r0, r4
   d6062:	f7ff fa2b 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d6066:	2800      	cmp	r0, #0
   d6068:	d098      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, (*options.properties).receiveMaximum)) {
   d606a:	88aa      	ldrh	r2, [r5, #4]
   d606c:	a908      	add	r1, sp, #32
   d606e:	4620      	mov	r0, r4
   d6070:	f7ff fab0 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d6074:	2800      	cmp	r0, #0
   d6076:	d091      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                }
            }

            // 3.1.2.11.4 Maximum Packet Size
            uint32_t usedMaxPacketSize = (uint32_t) (
                (*options.properties).maximumPacketSize > 0 ?
   d6078:	f8d5 b008 	ldr.w	fp, [r5, #8]
                (*options.properties).maximumPacketSize : maxPacketSize);
   d607c:	f1bb 0f00 	cmp.w	fp, #0
   d6080:	d104      	bne.n	d608c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1bc>
   d6082:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	; 0x2c
            if (usedMaxPacketSize > 0) {
   d6086:	f1bb 0f00 	cmp.w	fp, #0
   d608a:	d00e      	beq.n	d60aa <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1da>
                if (!writeByte(&indexProp, PROP_MAXIMUM_PACKET_SIZE)) {
   d608c:	2227      	movs	r2, #39	; 0x27
   d608e:	a908      	add	r1, sp, #32
   d6090:	4620      	mov	r0, r4
   d6092:	f7ff fa13 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d6096:	2800      	cmp	r0, #0
   d6098:	d080      	beq.n	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, usedMaxPacketSize)) {
   d609a:	465a      	mov	r2, fp
   d609c:	a908      	add	r1, sp, #32
   d609e:	4620      	mov	r0, r4
   d60a0:	f7ff fbe0 	bl	d5864 <_ZN5MQTT58writeIntEPtm>
   d60a4:	2800      	cmp	r0, #0
   d60a6:	f43f af79 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    return false;
                }
            }

            // 3.1.2.11.5 Topic Alias Maximum
            if ((*options.properties).topicAliasMaximum > 0) {
   d60aa:	89ab      	ldrh	r3, [r5, #12]
   d60ac:	b17b      	cbz	r3, d60ce <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1fe>
                if (!writeByte(&indexProp, PROP_TOPIC_ALIAS_MAXIMUM)) {
   d60ae:	2222      	movs	r2, #34	; 0x22
   d60b0:	a908      	add	r1, sp, #32
   d60b2:	4620      	mov	r0, r4
   d60b4:	f7ff fa02 	bl	d54bc <_ZN5MQTT59writeByteEPth>
   d60b8:	2800      	cmp	r0, #0
   d60ba:	f43f af6f 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, (*options.properties).topicAliasMaximum)) {
   d60be:	89aa      	ldrh	r2, [r5, #12]
   d60c0:	a908      	add	r1, sp, #32
   d60c2:	4620      	mov	r0, r4
   d60c4:	f7ff fa86 	bl	d55d4 <_ZN5MQTT58writeIntEPtt>
   d60c8:	2800      	cmp	r0, #0
   d60ca:	f43f af67 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                }
            }
        }

        // 3.1.2.11 CONNECT Properties length
        if (!writeVariableByteInteger(&index, indexProp - index)) {
   d60ce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d60d2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d60d6:	1a9a      	subs	r2, r3, r2
   d60d8:	b292      	uxth	r2, r2
   d60da:	4651      	mov	r1, sl
   d60dc:	4620      	mov	r0, r4
   d60de:	f7ff f98f 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d60e2:	2800      	cmp	r0, #0
   d60e4:	f43f af5a 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.3.1 Client Identifier
        if (!writeUTF8String(&index, clientId, strlen(clientId))) {
   d60e8:	9805      	ldr	r0, [sp, #20]
   d60ea:	f004 ff86 	bl	daffa <strlen>
   d60ee:	9a05      	ldr	r2, [sp, #20]
   d60f0:	b283      	uxth	r3, r0
   d60f2:	4651      	mov	r1, sl
   d60f4:	4620      	mov	r0, r4
   d60f6:	f7ff f9b9 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d60fa:	2800      	cmp	r0, #0
   d60fc:	f43f af4e 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        if (options.willTopic && options.willPayload) {
   d6100:	b1ff      	cbz	r7, d6142 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x272>
   d6102:	9b04      	ldr	r3, [sp, #16]
   d6104:	b1eb      	cbz	r3, d6142 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x272>
            // 3.1.3.2 Will Properties
            if (!writeVariableByteInteger(&index, 0)) {
   d6106:	2200      	movs	r2, #0
   d6108:	4651      	mov	r1, sl
   d610a:	4620      	mov	r0, r4
   d610c:	f7ff f978 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d6110:	2800      	cmp	r0, #0
   d6112:	f43f af43 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                close();
                return false;
            }
            
            // 3.1.3.3 Will Topic
            if (!writeUTF8String(&index, options.willTopic, strlen(options.willTopic))) {
   d6116:	4638      	mov	r0, r7
   d6118:	f004 ff6f 	bl	daffa <strlen>
   d611c:	463a      	mov	r2, r7
   d611e:	b283      	uxth	r3, r0
   d6120:	4651      	mov	r1, sl
   d6122:	4620      	mov	r0, r4
   d6124:	f7ff f9a2 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d6128:	2800      	cmp	r0, #0
   d612a:	f43f af37 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                close();
                return false;
            }

            // 3.1.3.4 Will Payload
            if (!writeUTF8String(&index, (const char*) options.willPayload, options.willPayloadLength)) {
   d612e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d6132:	9a04      	ldr	r2, [sp, #16]
   d6134:	4651      	mov	r1, sl
   d6136:	4620      	mov	r0, r4
   d6138:	f7ff f998 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d613c:	2800      	cmp	r0, #0
   d613e:	f43f af2d 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                return false;
            }
        }

        // 3.1.3.5 User Name
        if (options.username && !writeUTF8String(&index, options.username, strlen(options.username))) {
   d6142:	f1b9 0f00 	cmp.w	r9, #0
   d6146:	d00b      	beq.n	d6160 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x290>
   d6148:	4648      	mov	r0, r9
   d614a:	f004 ff56 	bl	daffa <strlen>
   d614e:	464a      	mov	r2, r9
   d6150:	b283      	uxth	r3, r0
   d6152:	4651      	mov	r1, sl
   d6154:	4620      	mov	r0, r4
   d6156:	f7ff f989 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d615a:	2800      	cmp	r0, #0
   d615c:	f43f af1e 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.3.6 Password
        if (options.password && !writeUTF8String(&index, options.password, strlen(options.password))) {
   d6160:	f1b8 0f00 	cmp.w	r8, #0
   d6164:	d00b      	beq.n	d617e <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2ae>
   d6166:	4640      	mov	r0, r8
   d6168:	f004 ff47 	bl	daffa <strlen>
   d616c:	4642      	mov	r2, r8
   d616e:	b283      	uxth	r3, r0
   d6170:	4651      	mov	r1, sl
   d6172:	4620      	mov	r0, r4
   d6174:	f7ff f97a 	bl	d546c <_ZN5MQTT515writeUTF8StringEPtPKct>
   d6178:	2800      	cmp	r0, #0
   d617a:	f43f af0f 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.1 CONNECT Fixed Header remaining length
        uint16_t len = index - 1;
   d617e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d6182:	3a01      	subs	r2, #1
        index = 1;
   d6184:	2501      	movs	r5, #1
        if (!writeVariableByteInteger(&index, len)) {
   d6186:	b292      	uxth	r2, r2
   d6188:	4651      	mov	r1, sl
   d618a:	4620      	mov	r0, r4
            return false;
        }

        // 3.1.1 CONNECT Fixed Header remaining length
        uint16_t len = index - 1;
        index = 1;
   d618c:	f8ad 501e 	strh.w	r5, [sp, #30]
        if (!writeVariableByteInteger(&index, len)) {
   d6190:	f7ff f936 	bl	d5400 <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d6194:	2800      	cmp	r0, #0
   d6196:	f43f af01 	beq.w	d5f9c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        return writeToSocket(index);
   d619a:	462a      	mov	r2, r5
   d619c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d61a0:	4620      	mov	r0, r4
   d61a2:	f7ff f911 	bl	d53c8 <_ZN5MQTT513writeToSocketEtb>
   d61a6:	4606      	mov	r6, r0
   d61a8:	46b2      	mov	sl, r6
   d61aa:	e003      	b.n	d61b4 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2e4>
    } else { // Deny second connect packet as connection will be closed by the server
        logger.info("Already connected to server");
   d61ac:	4908      	ldr	r1, [pc, #32]	; (d61d0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x300>)
   d61ae:	4620      	mov	r0, r4
   d61b0:	f7fd fff8 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        return false;
    }
}
   d61b4:	4650      	mov	r0, sl
   d61b6:	b00f      	add	sp, #60	; 0x3c
   d61b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61bc:	b002      	add	sp, #8
   d61be:	4770      	bx	lr
   d61c0:	000dbf4a 	.word	0x000dbf4a
   d61c4:	000dbf6d 	.word	0x000dbf6d
   d61c8:	000dbf99 	.word	0x000dbf99
   d61cc:	000db7b4 	.word	0x000db7b4
   d61d0:	000dbfc1 	.word	0x000dbfc1

000d61d4 <_ZN5MQTT57connectEPKctS1_19MQTT5ConnectOptions>:
    hostIp = ip;
    hostDomain = NULL;
    hostPort = port;
    return connect(clientId, options);
}
bool MQTT5::connect(const char *domain, uint16_t port, const char *clientId, MQTT5ConnectOptions options) {
   d61d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61d6:	b087      	sub	sp, #28
   d61d8:	461f      	mov	r7, r3
    hostIp = NULL;
    hostDomain = domain;
    hostPort = port;
    return connect(clientId, options);
   d61da:	ad0e      	add	r5, sp, #56	; 0x38
    hostDomain = NULL;
    hostPort = port;
    return connect(clientId, options);
}
bool MQTT5::connect(const char *domain, uint16_t port, const char *clientId, MQTT5ConnectOptions options) {
    hostIp = NULL;
   d61dc:	2300      	movs	r3, #0
   d61de:	6103      	str	r3, [r0, #16]
    hostDomain = domain;
   d61e0:	60c1      	str	r1, [r0, #12]
    hostPort = port;
   d61e2:	8282      	strh	r2, [r0, #20]
    hostIp = ip;
    hostDomain = NULL;
    hostPort = port;
    return connect(clientId, options);
}
bool MQTT5::connect(const char *domain, uint16_t port, const char *clientId, MQTT5ConnectOptions options) {
   d61e4:	4606      	mov	r6, r0
    hostIp = NULL;
    hostDomain = domain;
    hostPort = port;
    return connect(clientId, options);
   d61e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d61e8:	466c      	mov	r4, sp
   d61ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61ec:	e895 0003 	ldmia.w	r5, {r0, r1}
   d61f0:	e884 0003 	stmia.w	r4, {r0, r1}
   d61f4:	ab0c      	add	r3, sp, #48	; 0x30
   d61f6:	cb0c      	ldmia	r3, {r2, r3}
   d61f8:	4639      	mov	r1, r7
   d61fa:	4630      	mov	r0, r6
   d61fc:	f7ff fe68 	bl	d5ed0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions>
}
   d6200:	b007      	add	sp, #28
   d6202:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6204 <_ZN5MQTT510disconnectEv>:

    logger.info("Publish release for packet %d", packetId);
    return writeToSocket(index);
}

void MQTT5::disconnect() {
   d6204:	b510      	push	{r4, lr}
   d6206:	4604      	mov	r4, r0
    if (connected()) {
   d6208:	f7fe fe1f 	bl	d4e4a <_ZN5MQTT59connectedEv>
   d620c:	b118      	cbz	r0, d6216 <_ZN5MQTT510disconnectEv+0x12>
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
   d620e:	2100      	movs	r1, #0
   d6210:	4620      	mov	r0, r4
   d6212:	f7ff f98d 	bl	d5530 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE>
    }
    close();
   d6216:	4620      	mov	r0, r4
}
   d6218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void MQTT5::disconnect() {
    if (connected()) {
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
   d621c:	f7ff bcaa 	b.w	d5b74 <_ZN5MQTT55closeEv>

000d6220 <_ZN5MQTT515onConnectFailedEPFv17MQTT5_REASON_CODEE>:
void MQTT5::onConnectSuccess(void (*callback)(bool)) {
    callbackConnectSuccess = callback;
}

void MQTT5::onConnectFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackConnectFailed = callback;
   d6220:	63c1      	str	r1, [r0, #60]	; 0x3c
   d6222:	4770      	bx	lr

000d6224 <_ZN5MQTT515onPublishFailedEPFv17MQTT5_REASON_CODEE>:
void MQTT5::onDelivery(void (*callback)(unsigned int, bool)) {
    callbackQOS = callback;
}

void MQTT5::onPublishFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackPublishFailed = callback;
   d6224:	6441      	str	r1, [r0, #68]	; 0x44
   d6226:	4770      	bx	lr

000d6228 <_ZN5MQTT517onSubscribeFailedEPFv17MQTT5_REASON_CODEE>:
}

void MQTT5::onSubscribeFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackSubscribeFailed = callback;
   d6228:	6481      	str	r1, [r0, #72]	; 0x48
   d622a:	4770      	bx	lr

000d622c <_ZN5MQTT516onPacketReceivedEPFvPcPhtb9MQTT5_QOSbE>:
void MQTT5::onUnsubscribeFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackUnsubscribeFailed = callback;
}

void MQTT5::onPacketReceived(void (*callback)(char*, uint8_t*, uint16_t, bool, MQTT5_QOS, bool)) {
    callbackPacketReceived = callback;
   d622c:	6501      	str	r1, [r0, #80]	; 0x50
   d622e:	4770      	bx	lr

000d6230 <_ZN5MQTT5D1Ev>:
}

MQTT5::~MQTT5() {
   d6230:	b510      	push	{r4, lr}
   d6232:	4604      	mov	r4, r0
    if (connected()) {
   d6234:	f7fe fe09 	bl	d4e4a <_ZN5MQTT59connectedEv>
   d6238:	b128      	cbz	r0, d6246 <_ZN5MQTT5D1Ev+0x16>
        disconnect();
   d623a:	4620      	mov	r0, r4
   d623c:	f7ff ffe2 	bl	d6204 <_ZN5MQTT510disconnectEv>
        free(buffer);
   d6240:	68a0      	ldr	r0, [r4, #8]
   d6242:	f000 fadb 	bl	d67fc <free>
    }
   d6246:	4620      	mov	r0, r4
   d6248:	bd10      	pop	{r4, pc}

000d624a <_GLOBAL__sub_I__ZN5MQTT5C2Et>:
   d624a:	f000 b811 	b.w	d6270 <HAL_Pin_Map>
	...

000d6250 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6250:	b508      	push	{r3, lr}
   d6252:	4b02      	ldr	r3, [pc, #8]	; (d625c <netdb_freeaddrinfo+0xc>)
   d6254:	681b      	ldr	r3, [r3, #0]
   d6256:	689b      	ldr	r3, [r3, #8]
   d6258:	9301      	str	r3, [sp, #4]
   d625a:	bd08      	pop	{r3, pc}
   d625c:	00030268 	.word	0x00030268

000d6260 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6260:	b508      	push	{r3, lr}
   d6262:	4b02      	ldr	r3, [pc, #8]	; (d626c <netdb_getaddrinfo+0xc>)
   d6264:	681b      	ldr	r3, [r3, #0]
   d6266:	68db      	ldr	r3, [r3, #12]
   d6268:	9301      	str	r3, [sp, #4]
   d626a:	bd08      	pop	{r3, pc}
   d626c:	00030268 	.word	0x00030268

000d6270 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6270:	b508      	push	{r3, lr}
   d6272:	4b02      	ldr	r3, [pc, #8]	; (d627c <HAL_Pin_Map+0xc>)
   d6274:	681b      	ldr	r3, [r3, #0]
   d6276:	681b      	ldr	r3, [r3, #0]
   d6278:	9301      	str	r3, [sp, #4]
   d627a:	bd08      	pop	{r3, pc}
   d627c:	0003022c 	.word	0x0003022c

000d6280 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d6280:	b508      	push	{r3, lr}
   d6282:	4b02      	ldr	r3, [pc, #8]	; (d628c <if_index_to_name+0xc>)
   d6284:	681b      	ldr	r3, [r3, #0]
   d6286:	695b      	ldr	r3, [r3, #20]
   d6288:	9301      	str	r3, [sp, #4]
   d628a:	bd08      	pop	{r3, pc}
   d628c:	0003026c 	.word	0x0003026c

000d6290 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6290:	b508      	push	{r3, lr}
   d6292:	4b02      	ldr	r3, [pc, #8]	; (d629c <HAL_RNG_GetRandomNumber+0xc>)
   d6294:	681b      	ldr	r3, [r3, #0]
   d6296:	685b      	ldr	r3, [r3, #4]
   d6298:	9301      	str	r3, [sp, #4]
   d629a:	bd08      	pop	{r3, pc}
   d629c:	00030218 	.word	0x00030218

000d62a0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d62a0:	b508      	push	{r3, lr}
   d62a2:	4b02      	ldr	r3, [pc, #8]	; (d62ac <HAL_Delay_Microseconds+0xc>)
   d62a4:	681b      	ldr	r3, [r3, #0]
   d62a6:	68db      	ldr	r3, [r3, #12]
   d62a8:	9301      	str	r3, [sp, #4]
   d62aa:	bd08      	pop	{r3, pc}
   d62ac:	00030218 	.word	0x00030218

000d62b0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d62b0:	b508      	push	{r3, lr}
   d62b2:	4b02      	ldr	r3, [pc, #8]	; (d62bc <HAL_Timer_Get_Milli_Seconds+0xc>)
   d62b4:	681b      	ldr	r3, [r3, #0]
   d62b6:	695b      	ldr	r3, [r3, #20]
   d62b8:	9301      	str	r3, [sp, #4]
   d62ba:	bd08      	pop	{r3, pc}
   d62bc:	00030218 	.word	0x00030218

000d62c0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d62c0:	b508      	push	{r3, lr}
   d62c2:	4b02      	ldr	r3, [pc, #8]	; (d62cc <HAL_RTC_Get_UnixTime+0xc>)
   d62c4:	681b      	ldr	r3, [r3, #0]
   d62c6:	69db      	ldr	r3, [r3, #28]
   d62c8:	9301      	str	r3, [sp, #4]
   d62ca:	bd08      	pop	{r3, pc}
   d62cc:	00030218 	.word	0x00030218

000d62d0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d62d0:	b508      	push	{r3, lr}
   d62d2:	4b02      	ldr	r3, [pc, #8]	; (d62dc <HAL_RTC_Time_Is_Valid+0xc>)
   d62d4:	681b      	ldr	r3, [r3, #0]
   d62d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d62d8:	9301      	str	r3, [sp, #4]
   d62da:	bd08      	pop	{r3, pc}
   d62dc:	00030218 	.word	0x00030218

000d62e0 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d62e0:	b508      	push	{r3, lr}
   d62e2:	4b02      	ldr	r3, [pc, #8]	; (d62ec <hal_ble_stack_init+0xc>)
   d62e4:	681b      	ldr	r3, [r3, #0]
   d62e6:	689b      	ldr	r3, [r3, #8]
   d62e8:	9301      	str	r3, [sp, #4]
   d62ea:	bd08      	pop	{r3, pc}
   d62ec:	00030278 	.word	0x00030278

000d62f0 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d62f0:	b508      	push	{r3, lr}
   d62f2:	4b02      	ldr	r3, [pc, #8]	; (d62fc <hal_ble_gap_start_scan+0xc>)
   d62f4:	681b      	ldr	r3, [r3, #0]
   d62f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d62f8:	9301      	str	r3, [sp, #4]
   d62fa:	bd08      	pop	{r3, pc}
   d62fc:	00030278 	.word	0x00030278

000d6300 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d6300:	b508      	push	{r3, lr}
   d6302:	4b03      	ldr	r3, [pc, #12]	; (d6310 <hal_ble_gap_stop_scan+0x10>)
   d6304:	681b      	ldr	r3, [r3, #0]
   d6306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d630a:	9301      	str	r3, [sp, #4]
   d630c:	bd08      	pop	{r3, pc}
   d630e:	0000      	.short	0x0000
   d6310:	00030278 	.word	0x00030278

000d6314 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b03      	ldr	r3, [pc, #12]	; (d6324 <hal_ble_gap_disconnect+0x10>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d631e:	9301      	str	r3, [sp, #4]
   d6320:	bd08      	pop	{r3, pc}
   d6322:	0000      	.short	0x0000
   d6324:	00030278 	.word	0x00030278

000d6328 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6328:	b508      	push	{r3, lr}
   d632a:	4b03      	ldr	r3, [pc, #12]	; (d6338 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d632c:	681b      	ldr	r3, [r3, #0]
   d632e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d6332:	9301      	str	r3, [sp, #4]
   d6334:	bd08      	pop	{r3, pc}
   d6336:	0000      	.short	0x0000
   d6338:	00030278 	.word	0x00030278

000d633c <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b03      	ldr	r3, [pc, #12]	; (d634c <hal_ble_gatt_client_discover_all_services+0x10>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d6346:	9301      	str	r3, [sp, #4]
   d6348:	bd08      	pop	{r3, pc}
   d634a:	0000      	.short	0x0000
   d634c:	00030278 	.word	0x00030278

000d6350 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d6350:	b508      	push	{r3, lr}
   d6352:	4b03      	ldr	r3, [pc, #12]	; (d6360 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d6354:	681b      	ldr	r3, [r3, #0]
   d6356:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d635a:	9301      	str	r3, [sp, #4]
   d635c:	bd08      	pop	{r3, pc}
   d635e:	0000      	.short	0x0000
   d6360:	00030278 	.word	0x00030278

000d6364 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b03      	ldr	r3, [pc, #12]	; (d6374 <hal_ble_gatt_client_write_with_response+0x10>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d636e:	9301      	str	r3, [sp, #4]
   d6370:	bd08      	pop	{r3, pc}
   d6372:	0000      	.short	0x0000
   d6374:	00030278 	.word	0x00030278

000d6378 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6378:	b508      	push	{r3, lr}
   d637a:	4b03      	ldr	r3, [pc, #12]	; (d6388 <hal_ble_gatt_client_write_without_response+0x10>)
   d637c:	681b      	ldr	r3, [r3, #0]
   d637e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d6382:	9301      	str	r3, [sp, #4]
   d6384:	bd08      	pop	{r3, pc}
   d6386:	0000      	.short	0x0000
   d6388:	00030278 	.word	0x00030278

000d638c <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b03      	ldr	r3, [pc, #12]	; (d639c <hal_ble_gatt_client_read+0x10>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d6396:	9301      	str	r3, [sp, #4]
   d6398:	bd08      	pop	{r3, pc}
   d639a:	0000      	.short	0x0000
   d639c:	00030278 	.word	0x00030278

000d63a0 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d63a0:	b508      	push	{r3, lr}
   d63a2:	4b03      	ldr	r3, [pc, #12]	; (d63b0 <hal_ble_gap_connect+0x10>)
   d63a4:	681b      	ldr	r3, [r3, #0]
   d63a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d63aa:	9301      	str	r3, [sp, #4]
   d63ac:	bd08      	pop	{r3, pc}
   d63ae:	0000      	.short	0x0000
   d63b0:	00030278 	.word	0x00030278

000d63b4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b03      	ldr	r3, [pc, #12]	; (d63c4 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d63be:	9301      	str	r3, [sp, #4]
   d63c0:	bd08      	pop	{r3, pc}
   d63c2:	0000      	.short	0x0000
   d63c4:	00030278 	.word	0x00030278

000d63c8 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d63c8:	b508      	push	{r3, lr}
   d63ca:	4b03      	ldr	r3, [pc, #12]	; (d63d8 <hal_ble_gatt_client_configure_cccd+0x10>)
   d63cc:	681b      	ldr	r3, [r3, #0]
   d63ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d63d2:	9301      	str	r3, [sp, #4]
   d63d4:	bd08      	pop	{r3, pc}
   d63d6:	0000      	.short	0x0000
   d63d8:	00030278 	.word	0x00030278

000d63dc <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b03      	ldr	r3, [pc, #12]	; (d63ec <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d63e6:	9301      	str	r3, [sp, #4]
   d63e8:	bd08      	pop	{r3, pc}
   d63ea:	0000      	.short	0x0000
   d63ec:	00030278 	.word	0x00030278

000d63f0 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d63f0:	b508      	push	{r3, lr}
   d63f2:	4b03      	ldr	r3, [pc, #12]	; (d6400 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d63f4:	681b      	ldr	r3, [r3, #0]
   d63f6:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d63fa:	9301      	str	r3, [sp, #4]
   d63fc:	bd08      	pop	{r3, pc}
   d63fe:	0000      	.short	0x0000
   d6400:	00030278 	.word	0x00030278

000d6404 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <os_thread_is_current+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	689b      	ldr	r3, [r3, #8]
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	00030248 	.word	0x00030248

000d6414 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <os_thread_join+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	691b      	ldr	r3, [r3, #16]
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	00030248 	.word	0x00030248

000d6424 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <os_thread_cleanup+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	695b      	ldr	r3, [r3, #20]
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	00030248 	.word	0x00030248

000d6434 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b02      	ldr	r3, [pc, #8]	; (d6440 <os_mutex_recursive_create+0xc>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	00030248 	.word	0x00030248

000d6444 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6444:	b508      	push	{r3, lr}
   d6446:	4b02      	ldr	r3, [pc, #8]	; (d6450 <os_mutex_recursive_destroy+0xc>)
   d6448:	681b      	ldr	r3, [r3, #0]
   d644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	bd08      	pop	{r3, pc}
   d6450:	00030248 	.word	0x00030248

000d6454 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <os_mutex_recursive_lock+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	00030248 	.word	0x00030248

000d6464 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d6464:	b508      	push	{r3, lr}
   d6466:	4b02      	ldr	r3, [pc, #8]	; (d6470 <os_mutex_recursive_unlock+0xc>)
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d646c:	9301      	str	r3, [sp, #4]
   d646e:	bd08      	pop	{r3, pc}
   d6470:	00030248 	.word	0x00030248

000d6474 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6474:	b508      	push	{r3, lr}
   d6476:	4b02      	ldr	r3, [pc, #8]	; (d6480 <inet_inet_ntop+0xc>)
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	695b      	ldr	r3, [r3, #20]
   d647c:	9301      	str	r3, [sp, #4]
   d647e:	bd08      	pop	{r3, pc}
   d6480:	00030264 	.word	0x00030264

000d6484 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6484:	b508      	push	{r3, lr}
   d6486:	4b02      	ldr	r3, [pc, #8]	; (d6490 <inet_htonl+0xc>)
   d6488:	681b      	ldr	r3, [r3, #0]
   d648a:	6a1b      	ldr	r3, [r3, #32]
   d648c:	9301      	str	r3, [sp, #4]
   d648e:	bd08      	pop	{r3, pc}
   d6490:	00030264 	.word	0x00030264

000d6494 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6494:	b508      	push	{r3, lr}
   d6496:	4b02      	ldr	r3, [pc, #8]	; (d64a0 <inet_htons+0xc>)
   d6498:	681b      	ldr	r3, [r3, #0]
   d649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d649c:	9301      	str	r3, [sp, #4]
   d649e:	bd08      	pop	{r3, pc}
   d64a0:	00030264 	.word	0x00030264

000d64a4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d64a4:	b508      	push	{r3, lr}
   d64a6:	4b02      	ldr	r3, [pc, #8]	; (d64b0 <HAL_USART_Init+0xc>)
   d64a8:	681b      	ldr	r3, [r3, #0]
   d64aa:	681b      	ldr	r3, [r3, #0]
   d64ac:	9301      	str	r3, [sp, #4]
   d64ae:	bd08      	pop	{r3, pc}
   d64b0:	0003023c 	.word	0x0003023c

000d64b4 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d64b4:	b508      	push	{r3, lr}
   d64b6:	4b02      	ldr	r3, [pc, #8]	; (d64c0 <HAL_USART_End+0xc>)
   d64b8:	681b      	ldr	r3, [r3, #0]
   d64ba:	689b      	ldr	r3, [r3, #8]
   d64bc:	9301      	str	r3, [sp, #4]
   d64be:	bd08      	pop	{r3, pc}
   d64c0:	0003023c 	.word	0x0003023c

000d64c4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b02      	ldr	r3, [pc, #8]	; (d64d0 <HAL_USART_Write_Data+0xc>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	68db      	ldr	r3, [r3, #12]
   d64cc:	9301      	str	r3, [sp, #4]
   d64ce:	bd08      	pop	{r3, pc}
   d64d0:	0003023c 	.word	0x0003023c

000d64d4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d64d4:	b508      	push	{r3, lr}
   d64d6:	4b02      	ldr	r3, [pc, #8]	; (d64e0 <HAL_USART_Available_Data+0xc>)
   d64d8:	681b      	ldr	r3, [r3, #0]
   d64da:	691b      	ldr	r3, [r3, #16]
   d64dc:	9301      	str	r3, [sp, #4]
   d64de:	bd08      	pop	{r3, pc}
   d64e0:	0003023c 	.word	0x0003023c

000d64e4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d64e4:	b508      	push	{r3, lr}
   d64e6:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <HAL_USART_Read_Data+0xc>)
   d64e8:	681b      	ldr	r3, [r3, #0]
   d64ea:	695b      	ldr	r3, [r3, #20]
   d64ec:	9301      	str	r3, [sp, #4]
   d64ee:	bd08      	pop	{r3, pc}
   d64f0:	0003023c 	.word	0x0003023c

000d64f4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d64f4:	b508      	push	{r3, lr}
   d64f6:	4b02      	ldr	r3, [pc, #8]	; (d6500 <HAL_USART_Peek_Data+0xc>)
   d64f8:	681b      	ldr	r3, [r3, #0]
   d64fa:	699b      	ldr	r3, [r3, #24]
   d64fc:	9301      	str	r3, [sp, #4]
   d64fe:	bd08      	pop	{r3, pc}
   d6500:	0003023c 	.word	0x0003023c

000d6504 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6504:	b508      	push	{r3, lr}
   d6506:	4b02      	ldr	r3, [pc, #8]	; (d6510 <HAL_USART_Flush_Data+0xc>)
   d6508:	681b      	ldr	r3, [r3, #0]
   d650a:	69db      	ldr	r3, [r3, #28]
   d650c:	9301      	str	r3, [sp, #4]
   d650e:	bd08      	pop	{r3, pc}
   d6510:	0003023c 	.word	0x0003023c

000d6514 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6514:	b508      	push	{r3, lr}
   d6516:	4b02      	ldr	r3, [pc, #8]	; (d6520 <HAL_USART_Available_Data_For_Write+0xc>)
   d6518:	681b      	ldr	r3, [r3, #0]
   d651a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d651c:	9301      	str	r3, [sp, #4]
   d651e:	bd08      	pop	{r3, pc}
   d6520:	0003023c 	.word	0x0003023c

000d6524 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6524:	b508      	push	{r3, lr}
   d6526:	4b02      	ldr	r3, [pc, #8]	; (d6530 <HAL_USART_BeginConfig+0xc>)
   d6528:	681b      	ldr	r3, [r3, #0]
   d652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d652c:	9301      	str	r3, [sp, #4]
   d652e:	bd08      	pop	{r3, pc}
   d6530:	0003023c 	.word	0x0003023c

000d6534 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6534:	b508      	push	{r3, lr}
   d6536:	4b02      	ldr	r3, [pc, #8]	; (d6540 <sock_setsockopt+0xc>)
   d6538:	681b      	ldr	r3, [r3, #0]
   d653a:	699b      	ldr	r3, [r3, #24]
   d653c:	9301      	str	r3, [sp, #4]
   d653e:	bd08      	pop	{r3, pc}
   d6540:	00030238 	.word	0x00030238

000d6544 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6544:	b508      	push	{r3, lr}
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <sock_close+0xc>)
   d6548:	681b      	ldr	r3, [r3, #0]
   d654a:	69db      	ldr	r3, [r3, #28]
   d654c:	9301      	str	r3, [sp, #4]
   d654e:	bd08      	pop	{r3, pc}
   d6550:	00030238 	.word	0x00030238

000d6554 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6554:	b508      	push	{r3, lr}
   d6556:	4b02      	ldr	r3, [pc, #8]	; (d6560 <sock_connect+0xc>)
   d6558:	681b      	ldr	r3, [r3, #0]
   d655a:	6a1b      	ldr	r3, [r3, #32]
   d655c:	9301      	str	r3, [sp, #4]
   d655e:	bd08      	pop	{r3, pc}
   d6560:	00030238 	.word	0x00030238

000d6564 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6564:	b508      	push	{r3, lr}
   d6566:	4b02      	ldr	r3, [pc, #8]	; (d6570 <sock_recv+0xc>)
   d6568:	681b      	ldr	r3, [r3, #0]
   d656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d656c:	9301      	str	r3, [sp, #4]
   d656e:	bd08      	pop	{r3, pc}
   d6570:	00030238 	.word	0x00030238

000d6574 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6574:	b508      	push	{r3, lr}
   d6576:	4b02      	ldr	r3, [pc, #8]	; (d6580 <sock_send+0xc>)
   d6578:	681b      	ldr	r3, [r3, #0]
   d657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d657c:	9301      	str	r3, [sp, #4]
   d657e:	bd08      	pop	{r3, pc}
   d6580:	00030238 	.word	0x00030238

000d6584 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b02      	ldr	r3, [pc, #8]	; (d6590 <sock_socket+0xc>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d658c:	9301      	str	r3, [sp, #4]
   d658e:	bd08      	pop	{r3, pc}
   d6590:	00030238 	.word	0x00030238

000d6594 <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d6594:	b508      	push	{r3, lr}
   d6596:	4b02      	ldr	r3, [pc, #8]	; (d65a0 <dct_write_app_data+0xc>)
   d6598:	681b      	ldr	r3, [r3, #0]
   d659a:	685b      	ldr	r3, [r3, #4]
   d659c:	9301      	str	r3, [sp, #4]
   d659e:	bd08      	pop	{r3, pc}
   d65a0:	00030258 	.word	0x00030258

000d65a4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d65a4:	b508      	push	{r3, lr}
   d65a6:	4b02      	ldr	r3, [pc, #8]	; (d65b0 <HAL_USB_USART_Init+0xc>)
   d65a8:	681b      	ldr	r3, [r3, #0]
   d65aa:	681b      	ldr	r3, [r3, #0]
   d65ac:	9301      	str	r3, [sp, #4]
   d65ae:	bd08      	pop	{r3, pc}
   d65b0:	0003024c 	.word	0x0003024c

000d65b4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d65b4:	b508      	push	{r3, lr}
   d65b6:	4b02      	ldr	r3, [pc, #8]	; (d65c0 <HAL_USB_USART_Begin+0xc>)
   d65b8:	681b      	ldr	r3, [r3, #0]
   d65ba:	685b      	ldr	r3, [r3, #4]
   d65bc:	9301      	str	r3, [sp, #4]
   d65be:	bd08      	pop	{r3, pc}
   d65c0:	0003024c 	.word	0x0003024c

000d65c4 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d65c4:	b508      	push	{r3, lr}
   d65c6:	4b02      	ldr	r3, [pc, #8]	; (d65d0 <HAL_USB_USART_End+0xc>)
   d65c8:	681b      	ldr	r3, [r3, #0]
   d65ca:	689b      	ldr	r3, [r3, #8]
   d65cc:	9301      	str	r3, [sp, #4]
   d65ce:	bd08      	pop	{r3, pc}
   d65d0:	0003024c 	.word	0x0003024c

000d65d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d65d4:	b508      	push	{r3, lr}
   d65d6:	4b02      	ldr	r3, [pc, #8]	; (d65e0 <HAL_USB_USART_Available_Data+0xc>)
   d65d8:	681b      	ldr	r3, [r3, #0]
   d65da:	691b      	ldr	r3, [r3, #16]
   d65dc:	9301      	str	r3, [sp, #4]
   d65de:	bd08      	pop	{r3, pc}
   d65e0:	0003024c 	.word	0x0003024c

000d65e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d65e4:	b508      	push	{r3, lr}
   d65e6:	4b02      	ldr	r3, [pc, #8]	; (d65f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d65e8:	681b      	ldr	r3, [r3, #0]
   d65ea:	695b      	ldr	r3, [r3, #20]
   d65ec:	9301      	str	r3, [sp, #4]
   d65ee:	bd08      	pop	{r3, pc}
   d65f0:	0003024c 	.word	0x0003024c

000d65f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d65f4:	b508      	push	{r3, lr}
   d65f6:	4b02      	ldr	r3, [pc, #8]	; (d6600 <HAL_USB_USART_Receive_Data+0xc>)
   d65f8:	681b      	ldr	r3, [r3, #0]
   d65fa:	699b      	ldr	r3, [r3, #24]
   d65fc:	9301      	str	r3, [sp, #4]
   d65fe:	bd08      	pop	{r3, pc}
   d6600:	0003024c 	.word	0x0003024c

000d6604 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6604:	b508      	push	{r3, lr}
   d6606:	4b02      	ldr	r3, [pc, #8]	; (d6610 <HAL_USB_USART_Send_Data+0xc>)
   d6608:	681b      	ldr	r3, [r3, #0]
   d660a:	69db      	ldr	r3, [r3, #28]
   d660c:	9301      	str	r3, [sp, #4]
   d660e:	bd08      	pop	{r3, pc}
   d6610:	0003024c 	.word	0x0003024c

000d6614 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6614:	b508      	push	{r3, lr}
   d6616:	4b02      	ldr	r3, [pc, #8]	; (d6620 <HAL_USB_USART_Flush_Data+0xc>)
   d6618:	681b      	ldr	r3, [r3, #0]
   d661a:	6a1b      	ldr	r3, [r3, #32]
   d661c:	9301      	str	r3, [sp, #4]
   d661e:	bd08      	pop	{r3, pc}
   d6620:	0003024c 	.word	0x0003024c

000d6624 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6624:	b508      	push	{r3, lr}
   d6626:	4b02      	ldr	r3, [pc, #8]	; (d6630 <panic_+0xc>)
   d6628:	681b      	ldr	r3, [r3, #0]
   d662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d662c:	9301      	str	r3, [sp, #4]
   d662e:	bd08      	pop	{r3, pc}
   d6630:	00030260 	.word	0x00030260

000d6634 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6634:	b508      	push	{r3, lr}
   d6636:	4b02      	ldr	r3, [pc, #8]	; (d6640 <log_message+0xc>)
   d6638:	681b      	ldr	r3, [r3, #0]
   d663a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d663c:	9301      	str	r3, [sp, #4]
   d663e:	bd08      	pop	{r3, pc}
   d6640:	00030260 	.word	0x00030260

000d6644 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6644:	b508      	push	{r3, lr}
   d6646:	4b02      	ldr	r3, [pc, #8]	; (d6650 <log_message_v+0xc>)
   d6648:	681b      	ldr	r3, [r3, #0]
   d664a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d664c:	9301      	str	r3, [sp, #4]
   d664e:	bd08      	pop	{r3, pc}
   d6650:	00030260 	.word	0x00030260

000d6654 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d6654:	b508      	push	{r3, lr}
   d6656:	4b02      	ldr	r3, [pc, #8]	; (d6660 <log_level_name+0xc>)
   d6658:	681b      	ldr	r3, [r3, #0]
   d665a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d665c:	9301      	str	r3, [sp, #4]
   d665e:	bd08      	pop	{r3, pc}
   d6660:	00030260 	.word	0x00030260

000d6664 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d6664:	b508      	push	{r3, lr}
   d6666:	4b02      	ldr	r3, [pc, #8]	; (d6670 <log_set_callbacks+0xc>)
   d6668:	681b      	ldr	r3, [r3, #0]
   d666a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d666c:	9301      	str	r3, [sp, #4]
   d666e:	bd08      	pop	{r3, pc}
   d6670:	00030260 	.word	0x00030260

000d6674 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6674:	b508      	push	{r3, lr}
   d6676:	4b02      	ldr	r3, [pc, #8]	; (d6680 <system_mode+0xc>)
   d6678:	681b      	ldr	r3, [r3, #0]
   d667a:	681b      	ldr	r3, [r3, #0]
   d667c:	9301      	str	r3, [sp, #4]
   d667e:	bd08      	pop	{r3, pc}
   d6680:	00030220 	.word	0x00030220

000d6684 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6684:	b508      	push	{r3, lr}
   d6686:	4b02      	ldr	r3, [pc, #8]	; (d6690 <set_system_mode+0xc>)
   d6688:	681b      	ldr	r3, [r3, #0]
   d668a:	685b      	ldr	r3, [r3, #4]
   d668c:	9301      	str	r3, [sp, #4]
   d668e:	bd08      	pop	{r3, pc}
   d6690:	00030220 	.word	0x00030220

000d6694 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6694:	b508      	push	{r3, lr}
   d6696:	4b02      	ldr	r3, [pc, #8]	; (d66a0 <application_thread_current+0xc>)
   d6698:	681b      	ldr	r3, [r3, #0]
   d669a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d669c:	9301      	str	r3, [sp, #4]
   d669e:	bd08      	pop	{r3, pc}
   d66a0:	00030220 	.word	0x00030220

000d66a4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d66a4:	b508      	push	{r3, lr}
   d66a6:	4b02      	ldr	r3, [pc, #8]	; (d66b0 <application_thread_invoke+0xc>)
   d66a8:	681b      	ldr	r3, [r3, #0]
   d66aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d66ac:	9301      	str	r3, [sp, #4]
   d66ae:	bd08      	pop	{r3, pc}
   d66b0:	00030220 	.word	0x00030220

000d66b4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d66b4:	b508      	push	{r3, lr}
   d66b6:	4b02      	ldr	r3, [pc, #8]	; (d66c0 <system_thread_get_state+0xc>)
   d66b8:	681b      	ldr	r3, [r3, #0]
   d66ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d66bc:	9301      	str	r3, [sp, #4]
   d66be:	bd08      	pop	{r3, pc}
   d66c0:	00030220 	.word	0x00030220

000d66c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d66c4:	b508      	push	{r3, lr}
   d66c6:	4b03      	ldr	r3, [pc, #12]	; (d66d4 <system_ctrl_set_app_request_handler+0x10>)
   d66c8:	681b      	ldr	r3, [r3, #0]
   d66ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d66ce:	9301      	str	r3, [sp, #4]
   d66d0:	bd08      	pop	{r3, pc}
   d66d2:	0000      	.short	0x0000
   d66d4:	00030220 	.word	0x00030220

000d66d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d66d8:	b508      	push	{r3, lr}
   d66da:	4b03      	ldr	r3, [pc, #12]	; (d66e8 <system_ctrl_set_result+0x10>)
   d66dc:	681b      	ldr	r3, [r3, #0]
   d66de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d66e2:	9301      	str	r3, [sp, #4]
   d66e4:	bd08      	pop	{r3, pc}
   d66e6:	0000      	.short	0x0000
   d66e8:	00030220 	.word	0x00030220

000d66ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <network_connect+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	685b      	ldr	r3, [r3, #4]
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	00030240 	.word	0x00030240

000d66fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <network_connecting+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	689b      	ldr	r3, [r3, #8]
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	00030240 	.word	0x00030240

000d670c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <network_disconnect+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	68db      	ldr	r3, [r3, #12]
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	00030240 	.word	0x00030240

000d671c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <network_ready+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	691b      	ldr	r3, [r3, #16]
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	00030240 	.word	0x00030240

000d672c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <network_on+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	695b      	ldr	r3, [r3, #20]
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	00030240 	.word	0x00030240

000d673c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <network_off+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	699b      	ldr	r3, [r3, #24]
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	00030240 	.word	0x00030240

000d674c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b02      	ldr	r3, [pc, #8]	; (d6758 <network_listen+0xc>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	69db      	ldr	r3, [r3, #28]
   d6754:	9301      	str	r3, [sp, #4]
   d6756:	bd08      	pop	{r3, pc}
   d6758:	00030240 	.word	0x00030240

000d675c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d675c:	b508      	push	{r3, lr}
   d675e:	4b02      	ldr	r3, [pc, #8]	; (d6768 <network_listening+0xc>)
   d6760:	681b      	ldr	r3, [r3, #0]
   d6762:	6a1b      	ldr	r3, [r3, #32]
   d6764:	9301      	str	r3, [sp, #4]
   d6766:	bd08      	pop	{r3, pc}
   d6768:	00030240 	.word	0x00030240

000d676c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d676c:	b508      	push	{r3, lr}
   d676e:	4b02      	ldr	r3, [pc, #8]	; (d6778 <network_set_listen_timeout+0xc>)
   d6770:	681b      	ldr	r3, [r3, #0]
   d6772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6774:	9301      	str	r3, [sp, #4]
   d6776:	bd08      	pop	{r3, pc}
   d6778:	00030240 	.word	0x00030240

000d677c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d677c:	b508      	push	{r3, lr}
   d677e:	4b02      	ldr	r3, [pc, #8]	; (d6788 <network_get_listen_timeout+0xc>)
   d6780:	681b      	ldr	r3, [r3, #0]
   d6782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6784:	9301      	str	r3, [sp, #4]
   d6786:	bd08      	pop	{r3, pc}
   d6788:	00030240 	.word	0x00030240

000d678c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d678c:	b508      	push	{r3, lr}
   d678e:	4b02      	ldr	r3, [pc, #8]	; (d6798 <spark_function+0xc>)
   d6790:	681b      	ldr	r3, [r3, #0]
   d6792:	685b      	ldr	r3, [r3, #4]
   d6794:	9301      	str	r3, [sp, #4]
   d6796:	bd08      	pop	{r3, pc}
   d6798:	00030244 	.word	0x00030244

000d679c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d679c:	b508      	push	{r3, lr}
   d679e:	4b02      	ldr	r3, [pc, #8]	; (d67a8 <spark_process+0xc>)
   d67a0:	681b      	ldr	r3, [r3, #0]
   d67a2:	689b      	ldr	r3, [r3, #8]
   d67a4:	9301      	str	r3, [sp, #4]
   d67a6:	bd08      	pop	{r3, pc}
   d67a8:	00030244 	.word	0x00030244

000d67ac <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d67ac:	b508      	push	{r3, lr}
   d67ae:	4b02      	ldr	r3, [pc, #8]	; (d67b8 <spark_cloud_flag_connected+0xc>)
   d67b0:	681b      	ldr	r3, [r3, #0]
   d67b2:	695b      	ldr	r3, [r3, #20]
   d67b4:	9301      	str	r3, [sp, #4]
   d67b6:	bd08      	pop	{r3, pc}
   d67b8:	00030244 	.word	0x00030244

000d67bc <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d67bc:	b508      	push	{r3, lr}
   d67be:	4b02      	ldr	r3, [pc, #8]	; (d67c8 <spark_send_event+0xc>)
   d67c0:	681b      	ldr	r3, [r3, #0]
   d67c2:	6a1b      	ldr	r3, [r3, #32]
   d67c4:	9301      	str	r3, [sp, #4]
   d67c6:	bd08      	pop	{r3, pc}
   d67c8:	00030244 	.word	0x00030244

000d67cc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d67cc:	b508      	push	{r3, lr}
   d67ce:	4b02      	ldr	r3, [pc, #8]	; (d67d8 <spark_sync_time_pending+0xc>)
   d67d0:	681b      	ldr	r3, [r3, #0]
   d67d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d67d4:	9301      	str	r3, [sp, #4]
   d67d6:	bd08      	pop	{r3, pc}
   d67d8:	00030244 	.word	0x00030244

000d67dc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d67dc:	b508      	push	{r3, lr}
   d67de:	4b02      	ldr	r3, [pc, #8]	; (d67e8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d67e0:	681b      	ldr	r3, [r3, #0]
   d67e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d67e4:	9301      	str	r3, [sp, #4]
   d67e6:	bd08      	pop	{r3, pc}
   d67e8:	00030244 	.word	0x00030244

000d67ec <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d67ec:	b508      	push	{r3, lr}
   d67ee:	4b02      	ldr	r3, [pc, #8]	; (d67f8 <malloc+0xc>)
   d67f0:	681b      	ldr	r3, [r3, #0]
   d67f2:	681b      	ldr	r3, [r3, #0]
   d67f4:	9301      	str	r3, [sp, #4]
   d67f6:	bd08      	pop	{r3, pc}
   d67f8:	0003021c 	.word	0x0003021c

000d67fc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d67fc:	b508      	push	{r3, lr}
   d67fe:	4b02      	ldr	r3, [pc, #8]	; (d6808 <free+0xc>)
   d6800:	681b      	ldr	r3, [r3, #0]
   d6802:	685b      	ldr	r3, [r3, #4]
   d6804:	9301      	str	r3, [sp, #4]
   d6806:	bd08      	pop	{r3, pc}
   d6808:	0003021c 	.word	0x0003021c

000d680c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d680c:	b508      	push	{r3, lr}
   d680e:	4b02      	ldr	r3, [pc, #8]	; (d6818 <realloc+0xc>)
   d6810:	681b      	ldr	r3, [r3, #0]
   d6812:	689b      	ldr	r3, [r3, #8]
   d6814:	9301      	str	r3, [sp, #4]
   d6816:	bd08      	pop	{r3, pc}
   d6818:	0003021c 	.word	0x0003021c

000d681c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d681c:	b508      	push	{r3, lr}
   d681e:	4b02      	ldr	r3, [pc, #8]	; (d6828 <snprintf+0xc>)
   d6820:	681b      	ldr	r3, [r3, #0]
   d6822:	69db      	ldr	r3, [r3, #28]
   d6824:	9301      	str	r3, [sp, #4]
   d6826:	bd08      	pop	{r3, pc}
   d6828:	0003021c 	.word	0x0003021c

000d682c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d682c:	b508      	push	{r3, lr}
   d682e:	4b02      	ldr	r3, [pc, #8]	; (d6838 <vsnprintf+0xc>)
   d6830:	681b      	ldr	r3, [r3, #0]
   d6832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6834:	9301      	str	r3, [sp, #4]
   d6836:	bd08      	pop	{r3, pc}
   d6838:	0003021c 	.word	0x0003021c

000d683c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d683c:	b508      	push	{r3, lr}
   d683e:	4b02      	ldr	r3, [pc, #8]	; (d6848 <abort+0xc>)
   d6840:	681b      	ldr	r3, [r3, #0]
   d6842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	bd08      	pop	{r3, pc}
   d6848:	0003021c 	.word	0x0003021c

000d684c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d684c:	b508      	push	{r3, lr}
   d684e:	4b02      	ldr	r3, [pc, #8]	; (d6858 <_malloc_r+0xc>)
   d6850:	681b      	ldr	r3, [r3, #0]
   d6852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6854:	9301      	str	r3, [sp, #4]
   d6856:	bd08      	pop	{r3, pc}
   d6858:	0003021c 	.word	0x0003021c

000d685c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d685c:	b508      	push	{r3, lr}
   d685e:	4b02      	ldr	r3, [pc, #8]	; (d6868 <__errno+0xc>)
   d6860:	681b      	ldr	r3, [r3, #0]
   d6862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6864:	9301      	str	r3, [sp, #4]
   d6866:	bd08      	pop	{r3, pc}
   d6868:	0003021c 	.word	0x0003021c

000d686c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d686c:	2200      	movs	r2, #0
   d686e:	4611      	mov	r1, r2
   d6870:	6840      	ldr	r0, [r0, #4]
   d6872:	f7ff bf73 	b.w	d675c <network_listening>

000d6876 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6876:	2200      	movs	r2, #0
   d6878:	4611      	mov	r1, r2
   d687a:	6840      	ldr	r0, [r0, #4]
   d687c:	f7ff bf7e 	b.w	d677c <network_get_listen_timeout>

000d6880 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6880:	2200      	movs	r2, #0
   d6882:	6840      	ldr	r0, [r0, #4]
   d6884:	f7ff bf72 	b.w	d676c <network_set_listen_timeout>

000d6888 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6888:	2200      	movs	r2, #0
   d688a:	f081 0101 	eor.w	r1, r1, #1
   d688e:	6840      	ldr	r0, [r0, #4]
   d6890:	f7ff bf5c 	b.w	d674c <network_listen>

000d6894 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6894:	2300      	movs	r3, #0
   d6896:	461a      	mov	r2, r3
   d6898:	4619      	mov	r1, r3
   d689a:	6840      	ldr	r0, [r0, #4]
   d689c:	f7ff bf4e 	b.w	d673c <network_off>

000d68a0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d68a0:	2300      	movs	r3, #0
   d68a2:	461a      	mov	r2, r3
   d68a4:	4619      	mov	r1, r3
   d68a6:	6840      	ldr	r0, [r0, #4]
   d68a8:	f7ff bf40 	b.w	d672c <network_on>

000d68ac <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d68ac:	2200      	movs	r2, #0
   d68ae:	4611      	mov	r1, r2
   d68b0:	6840      	ldr	r0, [r0, #4]
   d68b2:	f7ff bf33 	b.w	d671c <network_ready>

000d68b6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d68b6:	2200      	movs	r2, #0
   d68b8:	4611      	mov	r1, r2
   d68ba:	6840      	ldr	r0, [r0, #4]
   d68bc:	f7ff bf1e 	b.w	d66fc <network_connecting>

000d68c0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d68c0:	2200      	movs	r2, #0
   d68c2:	2102      	movs	r1, #2
   d68c4:	6840      	ldr	r0, [r0, #4]
   d68c6:	f7ff bf21 	b.w	d670c <network_disconnect>

000d68ca <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d68ca:	2300      	movs	r3, #0
   d68cc:	461a      	mov	r2, r3
   d68ce:	6840      	ldr	r0, [r0, #4]
   d68d0:	f7ff bf0c 	b.w	d66ec <network_connect>

000d68d4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d68d4:	4b02      	ldr	r3, [pc, #8]	; (d68e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d68d6:	2203      	movs	r2, #3
   d68d8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d68da:	4a02      	ldr	r2, [pc, #8]	; (d68e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d68dc:	601a      	str	r2, [r3, #0]
   d68de:	4770      	bx	lr
   d68e0:	2003e3b8 	.word	0x2003e3b8
   d68e4:	000dc000 	.word	0x000dc000

000d68e8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d68e8:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d68ea:	4c09      	ldr	r4, [pc, #36]	; (d6910 <_GLOBAL__sub_I_System+0x28>)
   d68ec:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d68ee:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d68f2:	6020      	str	r0, [r4, #0]
   d68f4:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d68f6:	71a0      	strb	r0, [r4, #6]
   d68f8:	8120      	strh	r0, [r4, #8]
   d68fa:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d68fc:	f7ff fec2 	bl	d6684 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6900:	4620      	mov	r0, r4
   d6902:	4a04      	ldr	r2, [pc, #16]	; (d6914 <_GLOBAL__sub_I_System+0x2c>)
   d6904:	4904      	ldr	r1, [pc, #16]	; (d6918 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d690a:	f004 b950 	b.w	dabae <__aeabi_atexit>
   d690e:	bf00      	nop
   d6910:	2003e3c0 	.word	0x2003e3c0
   d6914:	2003d8c0 	.word	0x2003d8c0
   d6918:	000d413d 	.word	0x000d413d

000d691c <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d691c:	2300      	movs	r3, #0
   d691e:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6920:	6043      	str	r3, [r0, #4]
	len = 0;
   d6922:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6924:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6926:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6928:	680c      	ldr	r4, [r1, #0]
   d692a:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d692c:	684c      	ldr	r4, [r1, #4]
   d692e:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6930:	688c      	ldr	r4, [r1, #8]
   d6932:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6934:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6936:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6938:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d693a:	bd10      	pop	{r4, pc}

000d693c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d693c:	b510      	push	{r4, lr}
   d693e:	4604      	mov	r4, r0
{
	free(buffer);
   d6940:	6800      	ldr	r0, [r0, #0]
   d6942:	f7ff ff5b 	bl	d67fc <free>
}
   d6946:	4620      	mov	r0, r4
   d6948:	bd10      	pop	{r4, pc}

000d694a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d694a:	b510      	push	{r4, lr}
   d694c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d694e:	6800      	ldr	r0, [r0, #0]
   d6950:	b108      	cbz	r0, d6956 <_ZN6String10invalidateEv+0xc>
   d6952:	f7ff ff53 	bl	d67fc <free>
	buffer = NULL;
   d6956:	2300      	movs	r3, #0
   d6958:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d695a:	60a3      	str	r3, [r4, #8]
   d695c:	6063      	str	r3, [r4, #4]
   d695e:	bd10      	pop	{r4, pc}

000d6960 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6960:	b538      	push	{r3, r4, r5, lr}
   d6962:	4604      	mov	r4, r0
   d6964:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6966:	6800      	ldr	r0, [r0, #0]
   d6968:	3101      	adds	r1, #1
   d696a:	f7ff ff4f 	bl	d680c <realloc>
	if (newbuffer) {
   d696e:	b110      	cbz	r0, d6976 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6970:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6974:	2001      	movs	r0, #1
	}
	return 0;
}
   d6976:	bd38      	pop	{r3, r4, r5, pc}

000d6978 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6978:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d697a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d697c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d697e:	b113      	cbz	r3, d6986 <_ZN6String7reserveEj+0xe>
   d6980:	6843      	ldr	r3, [r0, #4]
   d6982:	428b      	cmp	r3, r1
   d6984:	d207      	bcs.n	d6996 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6986:	4620      	mov	r0, r4
   d6988:	f7ff ffea 	bl	d6960 <_ZN6String12changeBufferEj>
   d698c:	b120      	cbz	r0, d6998 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d698e:	68a3      	ldr	r3, [r4, #8]
   d6990:	b90b      	cbnz	r3, d6996 <_ZN6String7reserveEj+0x1e>
   d6992:	6822      	ldr	r2, [r4, #0]
   d6994:	7013      	strb	r3, [r2, #0]
   d6996:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6998:	bd10      	pop	{r4, pc}

000d699a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d699a:	b570      	push	{r4, r5, r6, lr}
   d699c:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d699e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d69a0:	4604      	mov	r4, r0
   d69a2:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d69a4:	f7ff ffe8 	bl	d6978 <_ZN6String7reserveEj>
   d69a8:	b918      	cbnz	r0, d69b2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d69aa:	4620      	mov	r0, r4
   d69ac:	f7ff ffcd 	bl	d694a <_ZN6String10invalidateEv>
		return *this;
   d69b0:	e009      	b.n	d69c6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d69b2:	462a      	mov	r2, r5
   d69b4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d69b6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d69b8:	6820      	ldr	r0, [r4, #0]
   d69ba:	f004 fa82 	bl	daec2 <memcpy>
	buffer[len] = 0;
   d69be:	6822      	ldr	r2, [r4, #0]
   d69c0:	68a3      	ldr	r3, [r4, #8]
   d69c2:	2100      	movs	r1, #0
   d69c4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d69c6:	4620      	mov	r0, r4
   d69c8:	bd70      	pop	{r4, r5, r6, pc}

000d69ca <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d69ca:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69cc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d69ce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d69d0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d69d2:	6043      	str	r3, [r0, #4]
	len = 0;
   d69d4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d69d6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d69d8:	460d      	mov	r5, r1
   d69da:	b139      	cbz	r1, d69ec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d69dc:	4608      	mov	r0, r1
   d69de:	f004 fb0c 	bl	daffa <strlen>
   d69e2:	4629      	mov	r1, r5
   d69e4:	4602      	mov	r2, r0
   d69e6:	4620      	mov	r0, r4
   d69e8:	f7ff ffd7 	bl	d699a <_ZN6String4copyEPKcj>
}
   d69ec:	4620      	mov	r0, r4
   d69ee:	bd38      	pop	{r3, r4, r5, pc}

000d69f0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d69f0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d69f2:	b510      	push	{r4, lr}
   d69f4:	460b      	mov	r3, r1
   d69f6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d69f8:	d007      	beq.n	d6a0a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d69fa:	6809      	ldr	r1, [r1, #0]
   d69fc:	b119      	cbz	r1, d6a06 <_ZN6StringaSERKS_+0x16>
   d69fe:	689a      	ldr	r2, [r3, #8]
   d6a00:	f7ff ffcb 	bl	d699a <_ZN6String4copyEPKcj>
   d6a04:	e001      	b.n	d6a0a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6a06:	f7ff ffa0 	bl	d694a <_ZN6String10invalidateEv>

	return *this;
}
   d6a0a:	4620      	mov	r0, r4
   d6a0c:	bd10      	pop	{r4, pc}

000d6a0e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6a0e:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a10:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6a12:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a14:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6a16:	6043      	str	r3, [r0, #4]
	len = 0;
   d6a18:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a1a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6a1c:	f7ff ffe8 	bl	d69f0 <_ZN6StringaSERKS_>
}
   d6a20:	4620      	mov	r0, r4
   d6a22:	bd10      	pop	{r4, pc}

000d6a24 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6a24:	b538      	push	{r3, r4, r5, lr}
   d6a26:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6a28:	460c      	mov	r4, r1
   d6a2a:	b141      	cbz	r1, d6a3e <_ZN6StringaSEPKc+0x1a>
   d6a2c:	4608      	mov	r0, r1
   d6a2e:	f004 fae4 	bl	daffa <strlen>
   d6a32:	4621      	mov	r1, r4
   d6a34:	4602      	mov	r2, r0
   d6a36:	4628      	mov	r0, r5
   d6a38:	f7ff ffaf 	bl	d699a <_ZN6String4copyEPKcj>
   d6a3c:	e001      	b.n	d6a42 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6a3e:	f7ff ff84 	bl	d694a <_ZN6String10invalidateEv>

	return *this;
}
   d6a42:	4628      	mov	r0, r5
   d6a44:	bd38      	pop	{r3, r4, r5, pc}

000d6a46 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6a46:	b570      	push	{r4, r5, r6, lr}
   d6a48:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6a4a:	460e      	mov	r6, r1
   d6a4c:	b909      	cbnz	r1, d6a52 <_ZN6String6concatEPKcj+0xc>
   d6a4e:	2000      	movs	r0, #0
   d6a50:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6a52:	b16a      	cbz	r2, d6a70 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6a54:	6883      	ldr	r3, [r0, #8]
   d6a56:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6a58:	4629      	mov	r1, r5
   d6a5a:	f7ff ff8d 	bl	d6978 <_ZN6String7reserveEj>
   d6a5e:	2800      	cmp	r0, #0
   d6a60:	d0f5      	beq.n	d6a4e <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6a62:	6820      	ldr	r0, [r4, #0]
   d6a64:	68a3      	ldr	r3, [r4, #8]
   d6a66:	4631      	mov	r1, r6
   d6a68:	4418      	add	r0, r3
   d6a6a:	f004 faa3 	bl	dafb4 <strcpy>
	len = newlen;
   d6a6e:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6a70:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6a72:	bd70      	pop	{r4, r5, r6, pc}

000d6a74 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6a74:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6a76:	688a      	ldr	r2, [r1, #8]
   d6a78:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6a7a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6a7c:	f7ff ffe3 	bl	d6a46 <_ZN6String6concatEPKcj>
   d6a80:	b910      	cbnz	r0, d6a88 <_ZplRK15StringSumHelperRK6String+0x14>
   d6a82:	4620      	mov	r0, r4
   d6a84:	f7ff ff61 	bl	d694a <_ZN6String10invalidateEv>
	return a;
}
   d6a88:	4620      	mov	r0, r4
   d6a8a:	bd10      	pop	{r4, pc}

000d6a8c <_ZNK6String16equalsIgnoreCaseERKS_>:
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d6a8c:	4288      	cmp	r0, r1
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
   d6a8e:	b570      	push	{r4, r5, r6, lr}
	if (this == &s2) return 1;
   d6a90:	d015      	beq.n	d6abe <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
	if (len != s2.len) return 0;
   d6a92:	6883      	ldr	r3, [r0, #8]
   d6a94:	688a      	ldr	r2, [r1, #8]
   d6a96:	4293      	cmp	r3, r2
   d6a98:	d10f      	bne.n	d6aba <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
	if (len == 0) return 1;
   d6a9a:	b183      	cbz	r3, d6abe <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
   d6a9c:	6804      	ldr	r4, [r0, #0]
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
   d6a9e:	680d      	ldr	r5, [r1, #0]
   d6aa0:	3c01      	subs	r4, #1
	while (*p1) {
   d6aa2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   d6aa6:	b150      	cbz	r0, d6abe <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
   d6aa8:	f004 fb74 	bl	db194 <tolower>
   d6aac:	4606      	mov	r6, r0
   d6aae:	f815 0b01 	ldrb.w	r0, [r5], #1
   d6ab2:	f004 fb6f 	bl	db194 <tolower>
   d6ab6:	4286      	cmp	r6, r0
   d6ab8:	d0f3      	beq.n	d6aa2 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
   d6aba:	2000      	movs	r0, #0
   d6abc:	bd70      	pop	{r4, r5, r6, pc}
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d6abe:	2001      	movs	r0, #1
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	}
	return 1;
}
   d6ac0:	bd70      	pop	{r4, r5, r6, pc}

000d6ac2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d6ac2:	6800      	ldr	r0, [r0, #0]
   d6ac4:	b108      	cbz	r0, d6aca <_ZNK6String5toIntEv+0x8>
   d6ac6:	f004 b9db 	b.w	dae80 <atol>
	return 0;
}
   d6aca:	4770      	bx	lr

000d6acc <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6acc:	4770      	bx	lr

000d6ace <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6ace:	2000      	movs	r0, #0
   d6ad0:	4770      	bx	lr

000d6ad2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ad2:	4770      	bx	lr

000d6ad4 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6ad4:	2000      	movs	r0, #0
   d6ad6:	4770      	bx	lr

000d6ad8 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ad8:	4770      	bx	lr

000d6ada <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6ada:	2000      	movs	r0, #0
   d6adc:	4770      	bx	lr

000d6ade <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6ade:	b510      	push	{r4, lr}
   d6ae0:	2114      	movs	r1, #20
   d6ae2:	4604      	mov	r4, r0
   d6ae4:	f004 f870 	bl	dabc8 <_ZdlPvj>
   d6ae8:	4620      	mov	r0, r4
   d6aea:	bd10      	pop	{r4, pc}

000d6aec <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6aec:	b510      	push	{r4, lr}
   d6aee:	2114      	movs	r1, #20
   d6af0:	4604      	mov	r4, r0
   d6af2:	f004 f869 	bl	dabc8 <_ZdlPvj>
   d6af6:	4620      	mov	r0, r4
   d6af8:	bd10      	pop	{r4, pc}

000d6afa <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6afa:	b510      	push	{r4, lr}
   d6afc:	2114      	movs	r1, #20
   d6afe:	4604      	mov	r4, r0
   d6b00:	f004 f862 	bl	dabc8 <_ZdlPvj>
   d6b04:	4620      	mov	r0, r4
   d6b06:	bd10      	pop	{r4, pc}

000d6b08 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6b08:	f7fd bac9 	b.w	d409e <_ZdlPv>

000d6b0c <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6b0c:	f7fd bac7 	b.w	d409e <_ZdlPv>

000d6b10 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6b10:	f7fd bac5 	b.w	d409e <_ZdlPv>

000d6b14 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6b14:	b510      	push	{r4, lr}
   d6b16:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b18:	6800      	ldr	r0, [r0, #0]
   d6b1a:	b108      	cbz	r0, d6b20 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6b1c:	f7ff fc92 	bl	d6444 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6b20:	4620      	mov	r0, r4
   d6b22:	bd10      	pop	{r4, pc}

000d6b24 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6b24:	b530      	push	{r4, r5, lr}
   d6b26:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d6b28:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6b2a:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d6b2c:	2400      	movs	r4, #0
   d6b2e:	9302      	str	r3, [sp, #8]
   d6b30:	4b08      	ldr	r3, [pc, #32]	; (d6b54 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d6b32:	9300      	str	r3, [sp, #0]
   d6b34:	aa02      	add	r2, sp, #8
   d6b36:	4623      	mov	r3, r4
   d6b38:	4907      	ldr	r1, [pc, #28]	; (d6b58 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d6b3a:	9403      	str	r4, [sp, #12]
   d6b3c:	2001      	movs	r0, #1
   d6b3e:	f7ff fd79 	bl	d6634 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d6b42:	6828      	ldr	r0, [r5, #0]
   d6b44:	4905      	ldr	r1, [pc, #20]	; (d6b5c <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d6b46:	8800      	ldrh	r0, [r0, #0]
   d6b48:	4623      	mov	r3, r4
   d6b4a:	462a      	mov	r2, r5
   d6b4c:	f7ff fbf6 	bl	d633c <hal_ble_gatt_client_discover_all_services>
    }
   d6b50:	b00b      	add	sp, #44	; 0x2c
   d6b52:	bd30      	pop	{r4, r5, pc}
   d6b54:	000dc08b 	.word	0x000dc08b
   d6b58:	000dc080 	.word	0x000dc080
   d6b5c:	000d8279 	.word	0x000d8279

000d6b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6b60:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6b62:	200a      	movs	r0, #10
   d6b64:	4a02      	ldr	r2, [pc, #8]	; (d6b70 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d6b66:	2100      	movs	r1, #0
   d6b68:	f7ff fd5c 	bl	d6624 <panic_>
    }
}
   d6b6c:	bd08      	pop	{r3, pc}
   d6b6e:	bf00      	nop
   d6b70:	000d62a1 	.word	0x000d62a1

000d6b74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b74:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b76:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b78:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6b7a:	689b      	ldr	r3, [r3, #8]
   d6b7c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b7e:	68a3      	ldr	r3, [r4, #8]
   d6b80:	3b01      	subs	r3, #1
   d6b82:	60a3      	str	r3, [r4, #8]
   d6b84:	b92b      	cbnz	r3, d6b92 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6b86:	6823      	ldr	r3, [r4, #0]
   d6b88:	4620      	mov	r0, r4
   d6b8a:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6b90:	4718      	bx	r3
   d6b92:	bd10      	pop	{r4, pc}

000d6b94 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d6b94:	b570      	push	{r4, r5, r6, lr}
   d6b96:	1c93      	adds	r3, r2, #2
   d6b98:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d6b9a:	4288      	cmp	r0, r1
   d6b9c:	d018      	beq.n	d6bd0 <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d6b9e:	7804      	ldrb	r4, [r0, #0]
   d6ba0:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d6ba2:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d6ba6:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d6ba8:	bf88      	it	hi
   d6baa:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d6bae:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d6bb0:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d6bb4:	7834      	ldrb	r4, [r6, #0]
   d6bb6:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d6bba:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d6bbe:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d6bc0:	bf88      	it	hi
   d6bc2:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d6bc6:	f803 5c01 	strb.w	r5, [r3, #-1]
   d6bca:	3001      	adds	r0, #1
   d6bcc:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d6bce:	e7e4      	b.n	d6b9a <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d6bd0:	4610      	mov	r0, r2
   d6bd2:	bd70      	pop	{r4, r5, r6, pc}

000d6bd4 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6bd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6bd8:	b2da      	uxtb	r2, r3
   d6bda:	2a09      	cmp	r2, #9
   d6bdc:	d801      	bhi.n	d6be2 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6bde:	4618      	mov	r0, r3
   d6be0:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6be2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6be6:	2b05      	cmp	r3, #5
   d6be8:	d801      	bhi.n	d6bee <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6bea:	3857      	subs	r0, #87	; 0x57
   d6bec:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6bee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6bf2:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6bf4:	bf94      	ite	ls
   d6bf6:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6bf8:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6bfc:	4770      	bx	lr
	...

000d6c00 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6c00:	b510      	push	{r4, lr}
            locked_(false) {
   d6c02:	2300      	movs	r3, #0
   d6c04:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6c06:	4b04      	ldr	r3, [pc, #16]	; (d6c18 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6c08:	4604      	mov	r4, r0
   d6c0a:	6818      	ldr	r0, [r3, #0]
   d6c0c:	f7ff fc22 	bl	d6454 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d6c10:	2301      	movs	r3, #1
   d6c12:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d6c14:	4620      	mov	r0, r4
   d6c16:	bd10      	pop	{r4, pc}
   d6c18:	2003e3d4 	.word	0x2003e3d4

000d6c1c <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d6c1c:	b510      	push	{r4, lr}
        if (locked_) {
   d6c1e:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d6c20:	4604      	mov	r4, r0
        if (locked_) {
   d6c22:	b11b      	cbz	r3, d6c2c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6c24:	4b02      	ldr	r3, [pc, #8]	; (d6c30 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d6c26:	6818      	ldr	r0, [r3, #0]
   d6c28:	f7ff fc1c 	bl	d6464 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d6c2c:	4620      	mov	r0, r4
   d6c2e:	bd10      	pop	{r4, pc}
   d6c30:	2003e3d4 	.word	0x2003e3d4

000d6c34 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6c34:	2200      	movs	r2, #0
   d6c36:	6002      	str	r2, [r0, #0]
   d6c38:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d6c3a:	4770      	bx	lr

000d6c3c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d6c3c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6c3e:	7982      	ldrb	r2, [r0, #6]
   d6c40:	798b      	ldrb	r3, [r1, #6]
   d6c42:	429a      	cmp	r2, r3
   d6c44:	d106      	bne.n	d6c54 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6c46:	2206      	movs	r2, #6
   d6c48:	f004 f92c 	bl	daea4 <memcmp>
   d6c4c:	fab0 f080 	clz	r0, r0
   d6c50:	0940      	lsrs	r0, r0, #5
   d6c52:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d6c54:	2000      	movs	r0, #0
}
   d6c56:	bd08      	pop	{r3, pc}

000d6c58 <_ZNK8particle10BleAddress11toBigEndianEPh>:

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d6c58:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d6c5a:	2305      	movs	r3, #5
        buf[i] = address_.addr[j];
   d6c5c:	5cc2      	ldrb	r2, [r0, r3]
   d6c5e:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    return false;
}

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d6c62:	3b01      	subs	r3, #1
   d6c64:	b2db      	uxtb	r3, r3
   d6c66:	2bff      	cmp	r3, #255	; 0xff
   d6c68:	d1f8      	bne.n	d6c5c <_ZNK8particle10BleAddress11toBigEndianEPh+0x4>
        buf[i] = address_.addr[j];
    }
}
   d6c6a:	4770      	bx	lr

000d6c6c <_ZNK8particle10BleAddress8toStringEPcjb>:
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d6c6c:	b570      	push	{r4, r5, r6, lr}
   d6c6e:	4614      	mov	r4, r2
   d6c70:	b088      	sub	sp, #32
   d6c72:	461d      	mov	r5, r3
    if (!buf || len == 0) {
   d6c74:	460e      	mov	r6, r1
   d6c76:	2900      	cmp	r1, #0
   d6c78:	d046      	beq.n	d6d08 <_ZNK8particle10BleAddress8toStringEPcjb+0x9c>
   d6c7a:	2a00      	cmp	r2, #0
   d6c7c:	d046      	beq.n	d6d0c <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
   d6c7e:	a901      	add	r1, sp, #4
   d6c80:	f7ff ffea 	bl	d6c58 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d6c84:	aa03      	add	r2, sp, #12
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
    if (stripped) {
   d6c86:	b115      	cbz	r5, d6c8e <_ZNK8particle10BleAddress8toStringEPcjb+0x22>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d6c88:	2106      	movs	r1, #6
   d6c8a:	a801      	add	r0, sp, #4
   d6c8c:	e02d      	b.n	d6cea <_ZNK8particle10BleAddress8toStringEPcjb+0x7e>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d6c8e:	2101      	movs	r1, #1
   d6c90:	a801      	add	r0, sp, #4
   d6c92:	f7ff ff7f 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2] = ':';
   d6c96:	253a      	movs	r5, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d6c98:	f10d 020f 	add.w	r2, sp, #15
   d6c9c:	2101      	movs	r1, #1
   d6c9e:	f10d 0005 	add.w	r0, sp, #5
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
   d6ca2:	f88d 500e 	strb.w	r5, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d6ca6:	f7ff ff75 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d6caa:	f10d 0212 	add.w	r2, sp, #18
   d6cae:	2101      	movs	r1, #1
   d6cb0:	f10d 0006 	add.w	r0, sp, #6
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
   d6cb4:	f88d 5011 	strb.w	r5, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d6cb8:	f7ff ff6c 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d6cbc:	f10d 0215 	add.w	r2, sp, #21
   d6cc0:	2101      	movs	r1, #1
   d6cc2:	f10d 0007 	add.w	r0, sp, #7
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
   d6cc6:	f88d 5014 	strb.w	r5, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d6cca:	f7ff ff63 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 3] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d6cce:	aa06      	add	r2, sp, #24
   d6cd0:	2101      	movs	r1, #1
   d6cd2:	a802      	add	r0, sp, #8
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
        idx++;
        cStr[idx * 2 + 3] = ':';
   d6cd4:	f88d 5017 	strb.w	r5, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d6cd8:	f7ff ff5c 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 4] = ':';
   d6cdc:	f88d 501a 	strb.w	r5, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d6ce0:	f10d 021b 	add.w	r2, sp, #27
   d6ce4:	2101      	movs	r1, #1
   d6ce6:	f10d 0009 	add.w	r0, sp, #9
   d6cea:	3c01      	subs	r4, #1
   d6cec:	f7ff ff52 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
   d6cf0:	2c11      	cmp	r4, #17
   d6cf2:	bf28      	it	cs
   d6cf4:	2411      	movcs	r4, #17
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d6cf6:	4622      	mov	r2, r4
   d6cf8:	a903      	add	r1, sp, #12
   d6cfa:	4630      	mov	r0, r6
   d6cfc:	f004 f8e1 	bl	daec2 <memcpy>
    buf[len++] = '\0';
   d6d00:	2300      	movs	r3, #0
   d6d02:	5533      	strb	r3, [r6, r4]
   d6d04:	1c60      	adds	r0, r4, #1
   d6d06:	e002      	b.n	d6d0e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d6d08:	4608      	mov	r0, r1
   d6d0a:	e000      	b.n	d6d0e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
   d6d0c:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d6d0e:	b008      	add	sp, #32
   d6d10:	bd70      	pop	{r4, r5, r6, pc}

000d6d12 <_ZNK8particle10BleAddress8toStringEb>:

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d6d12:	b510      	push	{r4, lr}
   d6d14:	b086      	sub	sp, #24
   d6d16:	4604      	mov	r4, r0
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d6d18:	4613      	mov	r3, r2

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d6d1a:	4608      	mov	r0, r1
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d6d1c:	2212      	movs	r2, #18
   d6d1e:	a901      	add	r1, sp, #4
   d6d20:	f7ff ffa4 	bl	d6c6c <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d6d24:	a901      	add	r1, sp, #4
   d6d26:	4620      	mov	r0, r4
   d6d28:	f7ff fe4f 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6d2c:	4620      	mov	r0, r4
   d6d2e:	b006      	add	sp, #24
   d6d30:	bd10      	pop	{r4, pc}
	...

000d6d34 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d6d34:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d6d36:	2301      	movs	r3, #1
   d6d38:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6d3a:	4b05      	ldr	r3, [pc, #20]	; (d6d50 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d6d3c:	4602      	mov	r2, r0
   d6d3e:	f103 0110 	add.w	r1, r3, #16
   d6d42:	f853 4b04 	ldr.w	r4, [r3], #4
   d6d46:	f842 4b04 	str.w	r4, [r2], #4
   d6d4a:	428b      	cmp	r3, r1
   d6d4c:	d1f9      	bne.n	d6d42 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d6d4e:	bd10      	pop	{r4, pc}
   d6d50:	000dc220 	.word	0x000dc220

000d6d54 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6d54:	7c0b      	ldrb	r3, [r1, #16]
   d6d56:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d6d5a:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6d5c:	d110      	bne.n	d6d80 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d6d5e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6d60:	4b0d      	ldr	r3, [pc, #52]	; (d6d98 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d6d62:	4602      	mov	r2, r0
   d6d64:	f103 0410 	add.w	r4, r3, #16
   d6d68:	f853 5b04 	ldr.w	r5, [r3], #4
   d6d6c:	f842 5b04 	str.w	r5, [r2], #4
   d6d70:	42a3      	cmp	r3, r4
   d6d72:	d1f9      	bne.n	d6d68 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d6d74:	880b      	ldrh	r3, [r1, #0]
   d6d76:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d6d78:	880b      	ldrh	r3, [r1, #0]
   d6d7a:	121b      	asrs	r3, r3, #8
   d6d7c:	7343      	strb	r3, [r0, #13]
   d6d7e:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d6d80:	2301      	movs	r3, #1
   d6d82:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6d84:	f101 0210 	add.w	r2, r1, #16
   d6d88:	4603      	mov	r3, r0
   d6d8a:	f851 4b04 	ldr.w	r4, [r1], #4
   d6d8e:	f843 4b04 	str.w	r4, [r3], #4
   d6d92:	4291      	cmp	r1, r2
   d6d94:	d1f9      	bne.n	d6d8a <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d6d96:	bd30      	pop	{r4, r5, pc}
   d6d98:	000dc220 	.word	0x000dc220

000d6d9c <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d6d9c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6d9e:	690b      	ldr	r3, [r1, #16]
   d6da0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6da2:	f101 0210 	add.w	r2, r1, #16
   d6da6:	4603      	mov	r3, r0
   d6da8:	f851 4b04 	ldr.w	r4, [r1], #4
   d6dac:	f843 4b04 	str.w	r4, [r3], #4
   d6db0:	4291      	cmp	r1, r2
   d6db2:	d1f9      	bne.n	d6da8 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6db4:	bd10      	pop	{r4, pc}

000d6db6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6db6:	b510      	push	{r4, lr}
    if (uuid128) {
   d6db8:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6dba:	4604      	mov	r4, r0
    if (uuid128) {
   d6dbc:	b1b9      	cbz	r1, d6dee <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d6dbe:	2a01      	cmp	r2, #1
   d6dc0:	d109      	bne.n	d6dd6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6dc2:	4603      	mov	r3, r0
   d6dc4:	f101 0210 	add.w	r2, r1, #16
   d6dc8:	f851 0b04 	ldr.w	r0, [r1], #4
   d6dcc:	f843 0b04 	str.w	r0, [r3], #4
   d6dd0:	4291      	cmp	r1, r2
   d6dd2:	d1f9      	bne.n	d6dc8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d6dd4:	e008      	b.n	d6de8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d6dd6:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d6dd8:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d6dda:	5c98      	ldrb	r0, [r3, r2]
   d6ddc:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6de0:	3a01      	subs	r2, #1
   d6de2:	b2d2      	uxtb	r2, r2
   d6de4:	2aff      	cmp	r2, #255	; 0xff
   d6de6:	d1f8      	bne.n	d6dda <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d6de8:	2301      	movs	r3, #1
   d6dea:	6123      	str	r3, [r4, #16]
   d6dec:	e002      	b.n	d6df4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6dee:	2210      	movs	r2, #16
   d6df0:	f004 f88d 	bl	daf0e <memset>
    }
}
   d6df4:	4620      	mov	r0, r4
   d6df6:	bd10      	pop	{r4, pc}

000d6df8 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d6df8:	b538      	push	{r3, r4, r5, lr}
   d6dfa:	4604      	mov	r4, r0
   d6dfc:	460d      	mov	r5, r1
        : BleUuid() {
   d6dfe:	f7ff ff99 	bl	d6d34 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d6e02:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6e04:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6e06:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d6e08:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6e0a:	7365      	strb	r5, [r4, #13]
}
   d6e0c:	4620      	mov	r0, r4
   d6e0e:	bd38      	pop	{r3, r4, r5, pc}

000d6e10 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d6e10:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d6e12:	690b      	ldr	r3, [r1, #16]
   d6e14:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6e16:	f101 0210 	add.w	r2, r1, #16
   d6e1a:	4603      	mov	r3, r0
   d6e1c:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e20:	f843 4b04 	str.w	r4, [r3], #4
   d6e24:	4291      	cmp	r1, r2
   d6e26:	d1f9      	bne.n	d6e1c <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d6e28:	bd10      	pop	{r4, pc}

000d6e2a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d6e2a:	b510      	push	{r4, lr}
   d6e2c:	b086      	sub	sp, #24
   d6e2e:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d6e30:	2201      	movs	r2, #1
   d6e32:	a801      	add	r0, sp, #4
   d6e34:	f7ff ffbf 	bl	d6db6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6e38:	a901      	add	r1, sp, #4
   d6e3a:	4620      	mov	r0, r4
   d6e3c:	f7ff ffe8 	bl	d6e10 <_ZN8particle7BleUuidaSERKS0_>
}
   d6e40:	b006      	add	sp, #24
   d6e42:	bd10      	pop	{r4, pc}

000d6e44 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d6e44:	b510      	push	{r4, lr}
   d6e46:	b086      	sub	sp, #24
   d6e48:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d6e4a:	a801      	add	r0, sp, #4
   d6e4c:	f7ff ffd4 	bl	d6df8 <_ZN8particle7BleUuidC1Et>
   d6e50:	a901      	add	r1, sp, #4
   d6e52:	4620      	mov	r0, r4
   d6e54:	f7ff ffdc 	bl	d6e10 <_ZN8particle7BleUuidaSERKS0_>
}
   d6e58:	b006      	add	sp, #24
   d6e5a:	bd10      	pop	{r4, pc}

000d6e5c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d6e5c:	b510      	push	{r4, lr}
   d6e5e:	b086      	sub	sp, #24
   d6e60:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d6e62:	a801      	add	r0, sp, #4
   d6e64:	f7ff ff76 	bl	d6d54 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d6e68:	a901      	add	r1, sp, #4
   d6e6a:	4620      	mov	r0, r4
   d6e6c:	f7ff ffd0 	bl	d6e10 <_ZN8particle7BleUuidaSERKS0_>
}
   d6e70:	b006      	add	sp, #24
   d6e72:	bd10      	pop	{r4, pc}

000d6e74 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d6e74:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6e76:	6902      	ldr	r2, [r0, #16]
   d6e78:	690b      	ldr	r3, [r1, #16]
   d6e7a:	429a      	cmp	r2, r3
   d6e7c:	d106      	bne.n	d6e8c <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6e7e:	2210      	movs	r2, #16
   d6e80:	f004 f810 	bl	daea4 <memcmp>
   d6e84:	fab0 f080 	clz	r0, r0
   d6e88:	0940      	lsrs	r0, r0, #5
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	2000      	movs	r0, #0
}
   d6e8e:	bd08      	pop	{r3, pc}

000d6e90 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d6e90:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d6e92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d6e94:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e96:	4b31      	ldr	r3, [pc, #196]	; (d6f5c <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d6e98:	460e      	mov	r6, r1
   d6e9a:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e9c:	4602      	mov	r2, r0
   d6e9e:	f103 0110 	add.w	r1, r3, #16
   d6ea2:	f853 0b04 	ldr.w	r0, [r3], #4
   d6ea6:	f842 0b04 	str.w	r0, [r2], #4
   d6eaa:	428b      	cmp	r3, r1
   d6eac:	d1f9      	bne.n	d6ea2 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d6eae:	2e00      	cmp	r6, #0
   d6eb0:	d051      	beq.n	d6f56 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6eb2:	2124      	movs	r1, #36	; 0x24
   d6eb4:	4630      	mov	r0, r6
   d6eb6:	f004 f8bd 	bl	db034 <strnlen>
   d6eba:	2804      	cmp	r0, #4
   d6ebc:	d010      	beq.n	d6ee0 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d6ebe:	2700      	movs	r7, #0
   d6ec0:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6ec2:	2124      	movs	r1, #36	; 0x24
   d6ec4:	4630      	mov	r0, r6
   d6ec6:	f004 f8b5 	bl	db034 <strnlen>
   d6eca:	42b8      	cmp	r0, r7
   d6ecc:	d901      	bls.n	d6ed2 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d6ece:	bb44      	cbnz	r4, d6f22 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d6ed0:	e041      	b.n	d6f56 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d6ed2:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d6ed4:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d6ed6:	42a5      	cmp	r5, r4
   d6ed8:	d03d      	beq.n	d6f56 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d6eda:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d6ede:	e7fa      	b.n	d6ed6 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6ee0:	7830      	ldrb	r0, [r6, #0]
   d6ee2:	f7ff fe77 	bl	d6bd4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6ee6:	1e04      	subs	r4, r0, #0
   d6ee8:	db18      	blt.n	d6f1c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d6eea:	7870      	ldrb	r0, [r6, #1]
   d6eec:	f7ff fe72 	bl	d6bd4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6ef0:	2800      	cmp	r0, #0
   d6ef2:	db13      	blt.n	d6f1c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6ef4:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d6ef8:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6efc:	78b0      	ldrb	r0, [r6, #2]
   d6efe:	f7ff fe69 	bl	d6bd4 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6f02:	1e04      	subs	r4, r0, #0
   d6f04:	db0a      	blt.n	d6f1c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d6f06:	78f0      	ldrb	r0, [r6, #3]
   d6f08:	f7ff fe64 	bl	d6bd4 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6f0c:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6f0e:	bfa1      	itttt	ge
   d6f10:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d6f14:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d6f18:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d6f1a:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d6f1c:	2300      	movs	r3, #0
   d6f1e:	612b      	str	r3, [r5, #16]
   d6f20:	e019      	b.n	d6f56 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d6f22:	5df0      	ldrb	r0, [r6, r7]
   d6f24:	f7ff fe56 	bl	d6bd4 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d6f28:	0603      	lsls	r3, r0, #24
   d6f2a:	d412      	bmi.n	d6f52 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d6f2c:	3c01      	subs	r4, #1
   d6f2e:	0100      	lsls	r0, r0, #4
   d6f30:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d6f32:	2124      	movs	r1, #36	; 0x24
   d6f34:	4630      	mov	r0, r6
   d6f36:	f004 f87d 	bl	db034 <strnlen>
   d6f3a:	3701      	adds	r7, #1
   d6f3c:	4287      	cmp	r7, r0
   d6f3e:	d208      	bcs.n	d6f52 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d6f40:	5df0      	ldrb	r0, [r6, r7]
   d6f42:	f7ff fe47 	bl	d6bd4 <_ZN8particle11hexToNibbleEc>
   d6f46:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6f48:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6f4a:	bfa2      	ittt	ge
   d6f4c:	5d2b      	ldrbge	r3, [r5, r4]
   d6f4e:	4318      	orrge	r0, r3
   d6f50:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6f52:	3701      	adds	r7, #1
   d6f54:	e7b5      	b.n	d6ec2 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d6f56:	b003      	add	sp, #12
   d6f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6f5a:	bf00      	nop
   d6f5c:	000dc220 	.word	0x000dc220

000d6f60 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d6f60:	b538      	push	{r3, r4, r5, lr}
   d6f62:	4604      	mov	r4, r0
   d6f64:	460d      	mov	r5, r1
        : BleUuid() {
   d6f66:	f7ff fee5 	bl	d6d34 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6f6a:	4620      	mov	r0, r4
   d6f6c:	4629      	mov	r1, r5
   d6f6e:	f7ff ff8f 	bl	d6e90 <_ZN8particle7BleUuid9constructEPKc>
}
   d6f72:	4620      	mov	r0, r4
   d6f74:	bd38      	pop	{r3, r4, r5, pc}

000d6f76 <_ZNK8particle7BleUuid11toBigEndianEPh>:
        uuid128_[len - 1] = 0x00;
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d6f76:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6f78:	230f      	movs	r3, #15
        buf[i] = uuid128_[j];
   d6f7a:	5cc2      	ldrb	r2, [r0, r3]
   d6f7c:	f801 2f01 	strb.w	r2, [r1, #1]!
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6f80:	3b01      	subs	r3, #1
   d6f82:	b2db      	uxtb	r3, r3
   d6f84:	2bff      	cmp	r3, #255	; 0xff
   d6f86:	d1f8      	bne.n	d6f7a <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid128_[j];
    }
}
   d6f88:	4770      	bx	lr

000d6f8a <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d6f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6f8e:	4698      	mov	r8, r3
   d6f90:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d6f92:	460d      	mov	r5, r1
   d6f94:	2900      	cmp	r1, #0
   d6f96:	d057      	beq.n	d7048 <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
   d6f98:	2a00      	cmp	r2, #0
   d6f9a:	d057      	beq.n	d704c <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d6f9c:	6906      	ldr	r6, [r0, #16]
   d6f9e:	1e54      	subs	r4, r2, #1
   d6fa0:	b9ae      	cbnz	r6, d6fce <_ZNK8particle7BleUuid8toStringEPcjb+0x44>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d6fa2:	7b02      	ldrb	r2, [r0, #12]
   d6fa4:	7b43      	ldrb	r3, [r0, #13]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d6fa6:	9605      	str	r6, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d6fa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d6fac:	2102      	movs	r1, #2
   d6fae:	aa05      	add	r2, sp, #20
   d6fb0:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d6fb2:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d6fb6:	f7ff fded 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
   d6fba:	2c04      	cmp	r4, #4
   d6fbc:	bf28      	it	cs
   d6fbe:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d6fc0:	4622      	mov	r2, r4
   d6fc2:	a905      	add	r1, sp, #20
   d6fc4:	4628      	mov	r0, r5
   d6fc6:	f003 ff7c 	bl	daec2 <memcpy>
        buf[len++] = '\0';
   d6fca:	552e      	strb	r6, [r5, r4]
   d6fcc:	e03a      	b.n	d7044 <_ZNK8particle7BleUuid8toStringEPcjb+0xba>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d6fce:	a901      	add	r1, sp, #4
   d6fd0:	f7ff ffd1 	bl	d6f76 <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d6fd4:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d6fd6:	f1b8 0f00 	cmp.w	r8, #0
   d6fda:	d002      	beq.n	d6fe2 <_ZNK8particle7BleUuid8toStringEPcjb+0x58>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d6fdc:	2110      	movs	r1, #16
   d6fde:	a801      	add	r0, sp, #4
   d6fe0:	e024      	b.n	d702c <_ZNK8particle7BleUuid8toStringEPcjb+0xa2>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d6fe2:	2104      	movs	r1, #4
   d6fe4:	eb0d 0001 	add.w	r0, sp, r1
   d6fe8:	f7ff fdd4 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d6fec:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d6fee:	f10d 021d 	add.w	r2, sp, #29
   d6ff2:	2102      	movs	r1, #2
   d6ff4:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d6ff6:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d6ffa:	f7ff fdcb 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d6ffe:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d7002:	2102      	movs	r1, #2
   d7004:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d7008:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d700c:	f7ff fdc2 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d7010:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d7014:	2102      	movs	r1, #2
   d7016:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d7018:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d701c:	f7ff fdba 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d7020:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d7024:	aa0b      	add	r2, sp, #44	; 0x2c
   d7026:	2106      	movs	r1, #6
   d7028:	f10d 000e 	add.w	r0, sp, #14
   d702c:	f7ff fdb2 	bl	d6b94 <_ZL12bytes2hexbufPKhjPc>
   d7030:	2c24      	cmp	r4, #36	; 0x24
   d7032:	bf28      	it	cs
   d7034:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d7036:	4622      	mov	r2, r4
   d7038:	a905      	add	r1, sp, #20
   d703a:	4628      	mov	r0, r5
   d703c:	f003 ff41 	bl	daec2 <memcpy>
    buf[len++] = '\0';
   d7040:	2300      	movs	r3, #0
   d7042:	552b      	strb	r3, [r5, r4]
   d7044:	1c60      	adds	r0, r4, #1
   d7046:	e002      	b.n	d704e <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d7048:	4608      	mov	r0, r1
   d704a:	e000      	b.n	d704e <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
   d704c:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d704e:	b00e      	add	sp, #56	; 0x38
   d7050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7054 <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d7054:	b510      	push	{r4, lr}
   d7056:	b08a      	sub	sp, #40	; 0x28
   d7058:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d705a:	2300      	movs	r3, #0
   d705c:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d705e:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d7060:	4669      	mov	r1, sp
   d7062:	f7ff ff92 	bl	d6f8a <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d7066:	4669      	mov	r1, sp
   d7068:	4620      	mov	r0, r4
   d706a:	f7ff fcae 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
}
   d706e:	4620      	mov	r0, r4
   d7070:	b00a      	add	sp, #40	; 0x28
   d7072:	bd10      	pop	{r4, pc}

000d7074 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d7074:	b538      	push	{r3, r4, r5, lr}
   d7076:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d7078:	b101      	cbz	r1, d707c <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d707a:	b912      	cbnz	r2, d7082 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d707c:	2000      	movs	r0, #0
   d707e:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d7080:	bd38      	pop	{r3, r4, r5, pc}
   d7082:	2a1f      	cmp	r2, #31
   d7084:	bf28      	it	cs
   d7086:	221f      	movcs	r2, #31
   d7088:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d708a:	f003 ff1a 	bl	daec2 <memcpy>
    selfLen_ = len;
   d708e:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d7090:	4620      	mov	r0, r4
}
   d7092:	bd38      	pop	{r3, r4, r5, pc}

000d7094 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d7094:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d7096:	b18b      	cbz	r3, d70bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d7098:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d709a:	1ce5      	adds	r5, r4, #3
   d709c:	428d      	cmp	r5, r1
   d709e:	d80f      	bhi.n	d70c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d70a0:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d70a2:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d70a4:	5d87      	ldrb	r7, [r0, r6]
   d70a6:	4297      	cmp	r7, r2
   d70a8:	d105      	bne.n	d70b6 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d70aa:	442e      	add	r6, r5
   d70ac:	42b1      	cmp	r1, r6
   d70ae:	d307      	bcc.n	d70c0 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d70b0:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d70b2:	1c68      	adds	r0, r5, #1
                return adsLen;
   d70b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d70b6:	3501      	adds	r5, #1
   d70b8:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d70ba:	e7ee      	b.n	d709a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d70bc:	4618      	mov	r0, r3
   d70be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d70c0:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d70c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d70c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d70c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d70c8:	4604      	mov	r4, r0
   d70ca:	460e      	mov	r6, r1
   d70cc:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d70ce:	4617      	mov	r7, r2
   d70d0:	2a00      	cmp	r2, #0
   d70d2:	d03a      	beq.n	d714a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d70d4:	460a      	mov	r2, r1
   d70d6:	ab01      	add	r3, sp, #4
   d70d8:	6a01      	ldr	r1, [r0, #32]
   d70da:	f7ff ffdb 	bl	d7094 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d70de:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d70e2:	6a22      	ldr	r2, [r4, #32]
   d70e4:	bb03      	cbnz	r3, d7128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d70e6:	b1f8      	cbz	r0, d7128 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d70e8:	1c96      	adds	r6, r2, #2
   d70ea:	442e      	add	r6, r5
   d70ec:	1a36      	subs	r6, r6, r0
   d70ee:	2e1f      	cmp	r6, #31
   d70f0:	d82b      	bhi.n	d714a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d70f2:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d70f6:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d70fa:	ebc8 0202 	rsb	r2, r8, r2
   d70fe:	1a12      	subs	r2, r2, r0
   d7100:	eb00 0108 	add.w	r1, r0, r8
   d7104:	eb05 0009 	add.w	r0, r5, r9
   d7108:	b292      	uxth	r2, r2
   d710a:	4421      	add	r1, r4
   d710c:	4420      	add	r0, r4
   d710e:	f003 fee3 	bl	daed8 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d7112:	1c6b      	adds	r3, r5, #1
   d7114:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d7118:	462a      	mov	r2, r5
   d711a:	4639      	mov	r1, r7
   d711c:	eb04 0009 	add.w	r0, r4, r9
   d7120:	f003 fecf 	bl	daec2 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d7124:	6226      	str	r6, [r4, #32]
   d7126:	e010      	b.n	d714a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d7128:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d712a:	182b      	adds	r3, r5, r0
   d712c:	2b1f      	cmp	r3, #31
   d712e:	d80c      	bhi.n	d714a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d7130:	1c6b      	adds	r3, r5, #1
   d7132:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7134:	4422      	add	r2, r4
   d7136:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d7138:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d713a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d713c:	4420      	add	r0, r4
   d713e:	462a      	mov	r2, r5
   d7140:	f003 febf 	bl	daec2 <memcpy>
        selfLen_ += len;
   d7144:	6a22      	ldr	r2, [r4, #32]
   d7146:	442a      	add	r2, r5
   d7148:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d714a:	6a20      	ldr	r0, [r4, #32]
}
   d714c:	b003      	add	sp, #12
   d714e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7152 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d7152:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7154:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d7156:	4603      	mov	r3, r0
   d7158:	f100 021f 	add.w	r2, r0, #31
   d715c:	2000      	movs	r0, #0
   d715e:	f803 0b01 	strb.w	r0, [r3], #1
   d7162:	4293      	cmp	r3, r2
   d7164:	f04f 0100 	mov.w	r1, #0
   d7168:	d1f9      	bne.n	d715e <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d716a:	aa04      	add	r2, sp, #16
   d716c:	2306      	movs	r3, #6
   d716e:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7172:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d7174:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7176:	9100      	str	r1, [sp, #0]
   d7178:	4620      	mov	r0, r4
   d717a:	4619      	mov	r1, r3
   d717c:	f7ff ffa2 	bl	d70c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d7180:	4620      	mov	r0, r4
   d7182:	b004      	add	sp, #16
   d7184:	bd10      	pop	{r4, pc}

000d7186 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7186:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d718a:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d718c:	b085      	sub	sp, #20
   d718e:	4606      	mov	r6, r0
   d7190:	4689      	mov	r9, r1
   d7192:	4617      	mov	r7, r2
   d7194:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d7196:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d7198:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d719c:	6a31      	ldr	r1, [r6, #32]
   d719e:	428d      	cmp	r5, r1
   d71a0:	d22a      	bcs.n	d71f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d71a2:	ab03      	add	r3, sp, #12
   d71a4:	464a      	mov	r2, r9
   d71a6:	1b49      	subs	r1, r1, r5
   d71a8:	1970      	adds	r0, r6, r5
   d71aa:	f7ff ff73 	bl	d7094 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d71ae:	4683      	mov	fp, r0
   d71b0:	b310      	cbz	r0, d71f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d71b2:	4554      	cmp	r4, sl
   d71b4:	d220      	bcs.n	d71f8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d71b6:	2804      	cmp	r0, #4
   d71b8:	9903      	ldr	r1, [sp, #12]
   d71ba:	d10c      	bne.n	d71d6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d71bc:	4429      	add	r1, r5
   d71be:	1872      	adds	r2, r6, r1
   d71c0:	1c63      	adds	r3, r4, #1
   d71c2:	78d1      	ldrb	r1, [r2, #3]
   d71c4:	7892      	ldrb	r2, [r2, #2]
   d71c6:	9301      	str	r3, [sp, #4]
   d71c8:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d71cc:	fb08 7004 	mla	r0, r8, r4, r7
   d71d0:	f7ff fe38 	bl	d6e44 <_ZN8particle7BleUuidaSEt>
   d71d4:	e00a      	b.n	d71ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d71d6:	2812      	cmp	r0, #18
   d71d8:	d10a      	bne.n	d71f0 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d71da:	3102      	adds	r1, #2
   d71dc:	4429      	add	r1, r5
   d71de:	1c63      	adds	r3, r4, #1
   d71e0:	4431      	add	r1, r6
   d71e2:	fb08 7004 	mla	r0, r8, r4, r7
   d71e6:	9301      	str	r3, [sp, #4]
   d71e8:	f7ff fe1f 	bl	d6e2a <_ZN8particle7BleUuidaSEPKh>
   d71ec:	9b01      	ldr	r3, [sp, #4]
   d71ee:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d71f0:	9b03      	ldr	r3, [sp, #12]
   d71f2:	445b      	add	r3, fp
   d71f4:	441d      	add	r5, r3
   d71f6:	e7d1      	b.n	d719c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d71f8:	4620      	mov	r0, r4
   d71fa:	b005      	add	sp, #20
   d71fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7200 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7204:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7206:	460d      	mov	r5, r1
   d7208:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d720a:	460a      	mov	r2, r1
   d720c:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d720e:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7210:	f7ff ffb9 	bl	d7186 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7214:	f04f 0814 	mov.w	r8, #20
   d7218:	1a33      	subs	r3, r6, r0
   d721a:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d721e:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7220:	2103      	movs	r1, #3
   d7222:	4638      	mov	r0, r7
   d7224:	f7ff ffaf 	bl	d7186 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d7228:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d722a:	1b33      	subs	r3, r6, r4
   d722c:	fb08 5204 	mla	r2, r8, r4, r5
   d7230:	2106      	movs	r1, #6
   d7232:	4638      	mov	r0, r7
   d7234:	f7ff ffa7 	bl	d7186 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d7238:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d723a:	1b33      	subs	r3, r6, r4
   d723c:	fb08 5204 	mla	r2, r8, r4, r5
   d7240:	2107      	movs	r1, #7
   d7242:	4638      	mov	r0, r7
   d7244:	f7ff ff9f 	bl	d7186 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d7248:	4420      	add	r0, r4
   d724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d7250 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7250:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7252:	2500      	movs	r5, #0
   d7254:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7258:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d725a:	8043      	strh	r3, [r0, #2]
   d725c:	220e      	movs	r2, #14
   d725e:	4629      	mov	r1, r5
   d7260:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d7262:	7105      	strb	r5, [r0, #4]
   d7264:	3006      	adds	r0, #6
   d7266:	f003 fe52 	bl	daf0e <memset>
   d726a:	f104 0014 	add.w	r0, r4, #20
   d726e:	f7ff fd61 	bl	d6d34 <_ZN8particle7BleUuidC1Ev>
   d7272:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d7276:	f7ff fd5d 	bl	d6d34 <_ZN8particle7BleUuidC1Ev>
   d727a:	4904      	ldr	r1, [pc, #16]	; (d728c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d727c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7280:	f7ff fba3 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
   d7284:	64e5      	str	r5, [r4, #76]	; 0x4c
   d7286:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d7288:	4620      	mov	r0, r4
   d728a:	bd38      	pop	{r3, r4, r5, pc}
   d728c:	000dc304 	.word	0x000dc304

000d7290 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d7290:	b510      	push	{r4, lr}
   d7292:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7294:	69c2      	ldr	r2, [r0, #28]
   d7296:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d729a:	4293      	cmp	r3, r2
   d729c:	4618      	mov	r0, r3
   d729e:	d006      	beq.n	d72ae <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d72a0:	6804      	ldr	r4, [r0, #0]
   d72a2:	8824      	ldrh	r4, [r4, #0]
   d72a4:	428c      	cmp	r4, r1
   d72a6:	f103 0308 	add.w	r3, r3, #8
   d72aa:	d1f6      	bne.n	d729a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d72ac:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d72ae:	2000      	movs	r0, #0
    }
   d72b0:	bd10      	pop	{r4, pc}
	...

000d72b4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d72b4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d72b8:	4680      	mov	r8, r0
   d72ba:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d72bc:	460e      	mov	r6, r1
   d72be:	b369      	cbz	r1, d731c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d72c0:	b362      	cbz	r2, d731c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d72c2:	2af4      	cmp	r2, #244	; 0xf4
   d72c4:	6805      	ldr	r5, [r0, #0]
   d72c6:	bf28      	it	cs
   d72c8:	22f4      	movcs	r2, #244	; 0xf4
   d72ca:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d72cc:	782a      	ldrb	r2, [r5, #0]
   d72ce:	b1a2      	cbz	r2, d72fa <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d72d0:	792b      	ldrb	r3, [r5, #4]
   d72d2:	0798      	lsls	r0, r3, #30
   d72d4:	d507      	bpl.n	d72e6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d72d6:	2300      	movs	r3, #0
   d72d8:	4622      	mov	r2, r4
   d72da:	89a8      	ldrh	r0, [r5, #12]
   d72dc:	f7ff f824 	bl	d6328 <hal_ble_gatt_server_set_characteristic_value>
   d72e0:	2800      	cmp	r0, #0
   d72e2:	da02      	bge.n	d72ea <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d72e4:	e043      	b.n	d736e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d72e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d72ea:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d72ee:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d72f0:	06da      	lsls	r2, r3, #27
   d72f2:	d518      	bpl.n	d7326 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d72f4:	2f01      	cmp	r7, #1
   d72f6:	d123      	bne.n	d7340 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d72f8:	e015      	b.n	d7326 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d72fa:	8868      	ldrh	r0, [r5, #2]
   d72fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7300:	4298      	cmp	r0, r3
   d7302:	d00d      	beq.n	d7320 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d7304:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d7306:	0759      	lsls	r1, r3, #29
   d7308:	d523      	bpl.n	d7352 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d730a:	2f01      	cmp	r7, #1
   d730c:	d021      	beq.n	d7352 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d730e:	89a9      	ldrh	r1, [r5, #12]
   d7310:	9200      	str	r2, [sp, #0]
   d7312:	4623      	mov	r3, r4
   d7314:	4632      	mov	r2, r6
   d7316:	f7ff f82f 	bl	d6378 <hal_ble_gatt_client_write_without_response>
   d731a:	e028      	b.n	d736e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d731c:	4815      	ldr	r0, [pc, #84]	; (d7374 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d731e:	e026      	b.n	d736e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d7320:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7324:	e023      	b.n	d736e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d7326:	069a      	lsls	r2, r3, #26
   d7328:	d521      	bpl.n	d736e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d732a:	2f02      	cmp	r7, #2
   d732c:	d01f      	beq.n	d736e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d732e:	89a8      	ldrh	r0, [r5, #12]
   d7330:	2300      	movs	r3, #0
   d7332:	4622      	mov	r2, r4
   d7334:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7336:	b002      	add	sp, #8
   d7338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d733c:	f7ff b858 	b.w	d63f0 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7340:	89a8      	ldrh	r0, [r5, #12]
   d7342:	2300      	movs	r3, #0
   d7344:	4622      	mov	r2, r4
   d7346:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7348:	b002      	add	sp, #8
   d734a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d734e:	f7ff b845 	b.w	d63dc <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d7352:	071b      	lsls	r3, r3, #28
   d7354:	d501      	bpl.n	d735a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d7356:	2f02      	cmp	r7, #2
   d7358:	d102      	bne.n	d7360 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d735a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d735e:	e006      	b.n	d736e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d7360:	2300      	movs	r3, #0
   d7362:	89a9      	ldrh	r1, [r5, #12]
   d7364:	9300      	str	r3, [sp, #0]
   d7366:	4632      	mov	r2, r6
   d7368:	4623      	mov	r3, r4
   d736a:	f7fe fffb 	bl	d6364 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d736e:	b002      	add	sp, #8
   d7370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7374:	fffffef2 	.word	0xfffffef2

000d7378 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7378:	b570      	push	{r4, r5, r6, lr}
   d737a:	6804      	ldr	r4, [r0, #0]
   d737c:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d737e:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7380:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d7382:	2900      	cmp	r1, #0
   d7384:	d12e      	bne.n	d73e4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d7386:	8862      	ldrh	r2, [r4, #2]
   d7388:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d738c:	429a      	cmp	r2, r3
   d738e:	d029      	beq.n	d73e4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d7390:	8a23      	ldrh	r3, [r4, #16]
   d7392:	b353      	cbz	r3, d73ea <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d7394:	2518      	movs	r5, #24
   d7396:	462a      	mov	r2, r5
   d7398:	4668      	mov	r0, sp
   d739a:	f003 fdb8 	bl	daf0e <memset>
    config.version = BLE_API_VERSION;
   d739e:	2301      	movs	r3, #1
   d73a0:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d73a4:	4b13      	ldr	r3, [pc, #76]	; (d73f4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d73a6:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d73aa:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d73ac:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d73ae:	8863      	ldrh	r3, [r4, #2]
   d73b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d73b4:	8a23      	ldrh	r3, [r4, #16]
   d73b6:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d73ba:	89a3      	ldrh	r3, [r4, #12]
   d73bc:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d73c0:	b15e      	cbz	r6, d73da <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d73c2:	7923      	ldrb	r3, [r4, #4]
   d73c4:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d73c6:	bf44      	itt	mi
   d73c8:	2302      	movmi	r3, #2
   d73ca:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d73cc:	7923      	ldrb	r3, [r4, #4]
   d73ce:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d73d0:	bf42      	ittt	mi
   d73d2:	9b05      	ldrmi	r3, [sp, #20]
   d73d4:	f043 0301 	orrmi.w	r3, r3, #1
   d73d8:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d73da:	2100      	movs	r1, #0
   d73dc:	4668      	mov	r0, sp
   d73de:	f7fe fff3 	bl	d63c8 <hal_ble_gatt_client_configure_cccd>
   d73e2:	e004      	b.n	d73ee <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d73e4:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d73e8:	e001      	b.n	d73ee <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d73ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d73ee:	b006      	add	sp, #24
   d73f0:	bd70      	pop	{r4, r5, r6, pc}
   d73f2:	bf00      	nop
   d73f4:	000d75d1 	.word	0x000d75d1

000d73f8 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d73f8:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d73fa:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d73fc:	651a      	str	r2, [r3, #80]	; 0x50
   d73fe:	4770      	bx	lr

000d7400 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7404:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d7406:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7408:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d740a:	9302      	str	r3, [sp, #8]
   d740c:	2500      	movs	r5, #0
   d740e:	4b2e      	ldr	r3, [pc, #184]	; (d74c8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d7410:	9300      	str	r3, [sp, #0]
   d7412:	aa02      	add	r2, sp, #8
   d7414:	462b      	mov	r3, r5
   d7416:	492d      	ldr	r1, [pc, #180]	; (d74cc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d7418:	9503      	str	r5, [sp, #12]
   d741a:	2001      	movs	r0, #1
   d741c:	f7ff f90a 	bl	d6634 <log_message>
   d7420:	6833      	ldr	r3, [r6, #0]
   d7422:	68dc      	ldr	r4, [r3, #12]
   d7424:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d7426:	f04f 081c 	mov.w	r8, #28
   d742a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d742e:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d7430:	f1a4 0308 	sub.w	r3, r4, #8
   d7434:	429f      	cmp	r7, r3
   d7436:	6832      	ldr	r2, [r6, #0]
   d7438:	d017      	beq.n	d746a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d743a:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d743e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7442:	8a9b      	ldrh	r3, [r3, #20]
   d7444:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d7448:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d744c:	8adb      	ldrh	r3, [r3, #22]
   d744e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d7452:	8810      	ldrh	r0, [r2, #0]
   d7454:	9500      	str	r5, [sp, #0]
   d7456:	4633      	mov	r3, r6
   d7458:	4a1d      	ldr	r2, [pc, #116]	; (d74d0 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d745a:	a902      	add	r1, sp, #8
   d745c:	f7fe ff78 	bl	d6350 <hal_ble_gatt_client_discover_characteristics>
   d7460:	2800      	cmp	r0, #0
   d7462:	f104 0408 	add.w	r4, r4, #8
   d7466:	dae3      	bge.n	d7430 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d7468:	e02a      	b.n	d74c0 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d746a:	6994      	ldr	r4, [r2, #24]
   d746c:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d746e:	2700      	movs	r7, #0
   d7470:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d7474:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d7476:	f1a4 0308 	sub.w	r3, r4, #8
   d747a:	429d      	cmp	r5, r3
   d747c:	d01f      	beq.n	d74be <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d747e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7482:	89db      	ldrh	r3, [r3, #14]
   d7484:	b1cb      	cbz	r3, d74ba <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d7486:	2214      	movs	r2, #20
   d7488:	2100      	movs	r1, #0
   d748a:	a802      	add	r0, sp, #8
   d748c:	f003 fd3f 	bl	daf0e <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d7490:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7494:	89d9      	ldrh	r1, [r3, #14]
   d7496:	6833      	ldr	r3, [r6, #0]
   d7498:	aa02      	add	r2, sp, #8
   d749a:	8818      	ldrh	r0, [r3, #0]
   d749c:	9700      	str	r7, [sp, #0]
   d749e:	2313      	movs	r3, #19
   d74a0:	f7fe ff74 	bl	d638c <hal_ble_gatt_client_read>
                if (len > 0) {
   d74a4:	b148      	cbz	r0, d74ba <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d74a6:	ab0a      	add	r3, sp, #40	; 0x28
   d74a8:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d74aa:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d74ac:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d74b0:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d74b4:	303c      	adds	r0, #60	; 0x3c
   d74b6:	f7ff fab5 	bl	d6a24 <_ZN6StringaSEPKc>
   d74ba:	3408      	adds	r4, #8
   d74bc:	e7db      	b.n	d7476 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d74be:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d74c0:	b00a      	add	sp, #40	; 0x28
   d74c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d74c6:	bf00      	nop
   d74c8:	000dc0a7 	.word	0x000dc0a7
   d74cc:	000dc080 	.word	0x000dc080
   d74d0:	000d80c1 	.word	0x000d80c1

000d74d4 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d74d4:	6803      	ldr	r3, [r0, #0]
   d74d6:	8818      	ldrh	r0, [r3, #0]
}
   d74d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d74dc:	1ac0      	subs	r0, r0, r3
   d74de:	bf18      	it	ne
   d74e0:	2001      	movne	r0, #1
   d74e2:	4770      	bx	lr

000d74e4 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d74e4:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d74e6:	680b      	ldr	r3, [r1, #0]
   d74e8:	f8c2 3002 	str.w	r3, [r2, #2]
   d74ec:	684b      	ldr	r3, [r1, #4]
   d74ee:	f8c2 3006 	str.w	r3, [r2, #6]
   d74f2:	4770      	bx	lr

000d74f4 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d74f4:	b510      	push	{r4, lr}
    return impl()->address();
   d74f6:	680a      	ldr	r2, [r1, #0]
   d74f8:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d74fc:	6003      	str	r3, [r0, #0]
   d74fe:	6853      	ldr	r3, [r2, #4]
   d7500:	6043      	str	r3, [r0, #4]
}
   d7502:	bd10      	pop	{r4, pc}

000d7504 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7506:	6802      	ldr	r2, [r0, #0]
   d7508:	680b      	ldr	r3, [r1, #0]
   d750a:	8812      	ldrh	r2, [r2, #0]
   d750c:	881b      	ldrh	r3, [r3, #0]
   d750e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7510:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7512:	d10c      	bne.n	d752e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d7514:	4601      	mov	r1, r0
   d7516:	4668      	mov	r0, sp
   d7518:	f7ff ffec 	bl	d74f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d751c:	4621      	mov	r1, r4
   d751e:	a802      	add	r0, sp, #8
   d7520:	f7ff ffe8 	bl	d74f4 <_ZNK8particle13BlePeerDevice7addressEv>
   d7524:	a902      	add	r1, sp, #8
   d7526:	4668      	mov	r0, sp
   d7528:	f7ff fb88 	bl	d6c3c <_ZNK8particle10BleAddresseqERKS0_>
   d752c:	b900      	cbnz	r0, d7530 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d752e:	2000      	movs	r0, #0
}
   d7530:	b004      	add	sp, #16
   d7532:	bd10      	pop	{r4, pc}

000d7534 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7534:	b510      	push	{r4, lr}
   d7536:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7538:	2034      	movs	r0, #52	; 0x34
   d753a:	f7fc fdac 	bl	d4096 <_Znwj>
   d753e:	4601      	mov	r1, r0
   d7540:	b168      	cbz	r0, d755e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7542:	2300      	movs	r3, #0
   d7544:	6003      	str	r3, [r0, #0]
   d7546:	6043      	str	r3, [r0, #4]
   d7548:	6083      	str	r3, [r0, #8]
   d754a:	60c3      	str	r3, [r0, #12]
   d754c:	6103      	str	r3, [r0, #16]
   d754e:	6143      	str	r3, [r0, #20]
   d7550:	6183      	str	r3, [r0, #24]
   d7552:	61c3      	str	r3, [r0, #28]
   d7554:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d7556:	6243      	str	r3, [r0, #36]	; 0x24
   d7558:	6283      	str	r3, [r0, #40]	; 0x28
   d755a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d755c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d755e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d7560:	b919      	cbnz	r1, d756a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d7562:	4a0a      	ldr	r2, [pc, #40]	; (d758c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7564:	200a      	movs	r0, #10
   d7566:	f7ff f85d 	bl	d6624 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d756a:	2000      	movs	r0, #0
   d756c:	f7fe feb8 	bl	d62e0 <hal_ble_stack_init>
   d7570:	b120      	cbz	r0, d757c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d7572:	4a06      	ldr	r2, [pc, #24]	; (d758c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7574:	2100      	movs	r1, #0
   d7576:	200a      	movs	r0, #10
   d7578:	f7ff f854 	bl	d6624 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d757c:	2200      	movs	r2, #0
   d757e:	6821      	ldr	r1, [r4, #0]
   d7580:	4803      	ldr	r0, [pc, #12]	; (d7590 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d7582:	f7fe ff17 	bl	d63b4 <hal_ble_set_callback_on_periph_link_events>
}
   d7586:	4620      	mov	r0, r4
   d7588:	bd10      	pop	{r4, pc}
   d758a:	bf00      	nop
   d758c:	000d62a1 	.word	0x000d62a1
   d7590:	000d79ed 	.word	0x000d79ed

000d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7594:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d7596:	4c0a      	ldr	r4, [pc, #40]	; (d75c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d7598:	6823      	ldr	r3, [r4, #0]
   d759a:	07db      	lsls	r3, r3, #31
   d759c:	d40e      	bmi.n	d75bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d759e:	4620      	mov	r0, r4
   d75a0:	f7fc fd8c 	bl	d40bc <__cxa_guard_acquire>
   d75a4:	b150      	cbz	r0, d75bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d75a6:	4807      	ldr	r0, [pc, #28]	; (d75c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d75a8:	f7ff ffc4 	bl	d7534 <_ZN8particle14BleLocalDeviceC1Ev>
   d75ac:	4620      	mov	r0, r4
   d75ae:	f7fc fd8a 	bl	d40c6 <__cxa_guard_release>
   d75b2:	4a05      	ldr	r2, [pc, #20]	; (d75c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d75b4:	4905      	ldr	r1, [pc, #20]	; (d75cc <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d75b6:	4803      	ldr	r0, [pc, #12]	; (d75c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d75b8:	f003 faf9 	bl	dabae <__aeabi_atexit>
    return instance;
}
   d75bc:	4801      	ldr	r0, [pc, #4]	; (d75c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d75be:	bd10      	pop	{r4, pc}
   d75c0:	2003e3d0 	.word	0x2003e3d0
   d75c4:	2003e3cc 	.word	0x2003e3cc
   d75c8:	2003d8c0 	.word	0x2003d8c0
   d75cc:	000d7755 	.word	0x000d7755

000d75d0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d75d0:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d75d2:	6803      	ldr	r3, [r0, #0]
   d75d4:	3b09      	subs	r3, #9
   d75d6:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d75d8:	b08a      	sub	sp, #40	; 0x28
   d75da:	4604      	mov	r4, r0
   d75dc:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d75de:	d819      	bhi.n	d7614 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d75e0:	f7ff ffd8 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d75e4:	88a1      	ldrh	r1, [r4, #4]
   d75e6:	6800      	ldr	r0, [r0, #0]
   d75e8:	f7ff fe52 	bl	d7290 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d75ec:	4602      	mov	r2, r0
   d75ee:	b958      	cbnz	r0, d7608 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d75f0:	2320      	movs	r3, #32
   d75f2:	9302      	str	r3, [sp, #8]
   d75f4:	4b08      	ldr	r3, [pc, #32]	; (d7618 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d75f6:	9003      	str	r0, [sp, #12]
   d75f8:	9300      	str	r3, [sp, #0]
   d75fa:	aa02      	add	r2, sp, #8
   d75fc:	4603      	mov	r3, r0
   d75fe:	4907      	ldr	r1, [pc, #28]	; (d761c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d7600:	2032      	movs	r0, #50	; 0x32
   d7602:	f7ff f817 	bl	d6634 <log_message>
   d7606:	e005      	b.n	d7614 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d7608:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d760a:	b11d      	cbz	r5, d7614 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d760c:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d760e:	68e1      	ldr	r1, [r4, #12]
   d7610:	6920      	ldr	r0, [r4, #16]
   d7612:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d7614:	b00a      	add	sp, #40	; 0x28
   d7616:	bd70      	pop	{r4, r5, r6, pc}
   d7618:	000dc0ca 	.word	0x000dc0ca
   d761c:	000dc080 	.word	0x000dc080

000d7620 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d7620:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d7622:	a801      	add	r0, sp, #4
   d7624:	f7ff faec 	bl	d6c00 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d7628:	2000      	movs	r0, #0
   d762a:	f7fe fe59 	bl	d62e0 <hal_ble_stack_init>
   d762e:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d7630:	a801      	add	r0, sp, #4
   d7632:	f7ff faf3 	bl	d6c1c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d7636:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d763a:	b002      	add	sp, #8
   d763c:	bd10      	pop	{r4, pc}
	...

000d7640 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7640:	b530      	push	{r4, r5, lr}
   d7642:	b08b      	sub	sp, #44	; 0x2c
   d7644:	460d      	mov	r5, r1
    WiringBleLock lk;
   d7646:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7648:	4614      	mov	r4, r2
    WiringBleLock lk;
   d764a:	f7ff fad9 	bl	d6c00 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d764e:	b1b5      	cbz	r5, d767e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7650:	b1ac      	cbz	r4, d767e <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d7652:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7654:	a902      	add	r1, sp, #8
   d7656:	480d      	ldr	r0, [pc, #52]	; (d768c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d7658:	9406      	str	r4, [sp, #24]
   d765a:	9202      	str	r2, [sp, #8]
   d765c:	9203      	str	r2, [sp, #12]
   d765e:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d7660:	9207      	str	r2, [sp, #28]
   d7662:	9208      	str	r2, [sp, #32]
   d7664:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d7666:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7668:	f7fe fe42 	bl	d62f0 <hal_ble_gap_start_scan>
   d766c:	2800      	cmp	r0, #0
   d766e:	bfb8      	it	lt
   d7670:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7672:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d7674:	bfa8      	it	ge
   d7676:	9c07      	ldrge	r4, [sp, #28]
   d7678:	f7ff f8c0 	bl	d67fc <free>
   d767c:	e000      	b.n	d7680 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d767e:	4c04      	ldr	r4, [pc, #16]	; (d7690 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d7680:	a801      	add	r0, sp, #4
   d7682:	f7ff facb 	bl	d6c1c <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d7686:	4620      	mov	r0, r4
   d7688:	b00b      	add	sp, #44	; 0x2c
   d768a:	bd30      	pop	{r4, r5, pc}
   d768c:	000d7b5b 	.word	0x000d7b5b
   d7690:	fffffef2 	.word	0xfffffef2

000d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7694:	680b      	ldr	r3, [r1, #0]
   d7696:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7698:	b113      	cbz	r3, d76a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d769a:	685a      	ldr	r2, [r3, #4]
   d769c:	3201      	adds	r2, #1
   d769e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d76a0:	4770      	bx	lr

000d76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d76a2:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d76a4:	f851 3b04 	ldr.w	r3, [r1], #4
   d76a8:	4604      	mov	r4, r0
   d76aa:	f840 3b04 	str.w	r3, [r0], #4
   d76ae:	f7ff fff1 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d76b2:	6823      	ldr	r3, [r4, #0]
   d76b4:	b90b      	cbnz	r3, d76ba <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d76b6:	f7ff fa53 	bl	d6b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d76ba:	4620      	mov	r0, r4
   d76bc:	bd10      	pop	{r4, pc}

000d76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d76be:	b510      	push	{r4, lr}
   d76c0:	f851 3b04 	ldr.w	r3, [r1], #4
   d76c4:	4604      	mov	r4, r0
   d76c6:	f840 3b04 	str.w	r3, [r0], #4
   d76ca:	f7ff ffe3 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d76ce:	4620      	mov	r0, r4
   d76d0:	bd10      	pop	{r4, pc}

000d76d2 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d76d2:	b510      	push	{r4, lr}
   d76d4:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d76d6:	3004      	adds	r0, #4
   d76d8:	f7fd f814 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d76dc:	4620      	mov	r0, r4
   d76de:	bd10      	pop	{r4, pc}

000d76e0 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d76e0:	b510      	push	{r4, lr}
   d76e2:	4604      	mov	r4, r0
   d76e4:	3004      	adds	r0, #4
   d76e6:	f7fd f80d 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d76ea:	4620      	mov	r0, r4
   d76ec:	bd10      	pop	{r4, pc}

000d76ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d76ee:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d76f0:	6804      	ldr	r4, [r0, #0]
   d76f2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d76f4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d76f6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d76fa:	42a6      	cmp	r6, r4
   d76fc:	d004      	beq.n	d7708 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d76fe:	1d20      	adds	r0, r4, #4
   d7700:	f7fd f800 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7704:	3408      	adds	r4, #8
   d7706:	e7f8      	b.n	d76fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7708:	6828      	ldr	r0, [r5, #0]
   d770a:	f7ff f877 	bl	d67fc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d770e:	4628      	mov	r0, r5
   d7710:	bd70      	pop	{r4, r5, r6, pc}

000d7712 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7712:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7714:	6804      	ldr	r4, [r0, #0]
   d7716:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7718:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d771a:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d771e:	42a6      	cmp	r6, r4
   d7720:	d004      	beq.n	d772c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d7722:	1d20      	adds	r0, r4, #4
   d7724:	f7fc ffee 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7728:	3408      	adds	r4, #8
   d772a:	e7f8      	b.n	d771e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d772c:	6828      	ldr	r0, [r5, #0]
   d772e:	f7ff f865 	bl	d67fc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7732:	4628      	mov	r0, r5
   d7734:	bd70      	pop	{r4, r5, r6, pc}

000d7736 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7736:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7738:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d773a:	f104 0018 	add.w	r0, r4, #24
   d773e:	f7ff ffe8 	bl	d7712 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7742:	f104 000c 	add.w	r0, r4, #12
   d7746:	f7ff ffd2 	bl	d76ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d774a:	4620      	mov	r0, r4
   d774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7750:	f7fc bca5 	b.w	d409e <_ZdlPv>

000d7754 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d7754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7756:	6804      	ldr	r4, [r0, #0]
   d7758:	4607      	mov	r7, r0
   d775a:	b1c4      	cbz	r4, d778e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d775c:	69a5      	ldr	r5, [r4, #24]
   d775e:	69e3      	ldr	r3, [r4, #28]
   d7760:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7764:	42ae      	cmp	r6, r5
   d7766:	d004      	beq.n	d7772 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7768:	1d28      	adds	r0, r5, #4
   d776a:	f7fc ffcb 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d776e:	3508      	adds	r5, #8
   d7770:	e7f8      	b.n	d7764 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7772:	69a0      	ldr	r0, [r4, #24]
   d7774:	f7ff f842 	bl	d67fc <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d7778:	f104 000c 	add.w	r0, r4, #12
   d777c:	f7ff ffc9 	bl	d7712 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d7780:	4620      	mov	r0, r4
   d7782:	f7ff ffb4 	bl	d76ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7786:	2134      	movs	r1, #52	; 0x34
   d7788:	4620      	mov	r0, r4
   d778a:	f003 fa1d 	bl	dabc8 <_ZdlPvj>
   d778e:	4638      	mov	r0, r7
   d7790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d7794 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d7794:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7796:	2500      	movs	r5, #0
   d7798:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d779a:	6045      	str	r5, [r0, #4]
   d779c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d779e:	2024      	movs	r0, #36	; 0x24
   d77a0:	f7fc fc79 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d77a4:	4604      	mov	r4, r0
   d77a6:	b178      	cbz	r0, d77c8 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d77a8:	4603      	mov	r3, r0
   d77aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d77ae:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d77b2:	f8c0 5002 	str.w	r5, [r0, #2]
   d77b6:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d77b8:	7285      	strb	r5, [r0, #10]
   d77ba:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d77bc:	60c5      	str	r5, [r0, #12]
   d77be:	6105      	str	r5, [r0, #16]
   d77c0:	6145      	str	r5, [r0, #20]
   d77c2:	6185      	str	r5, [r0, #24]
   d77c4:	61c5      	str	r5, [r0, #28]
   d77c6:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d77c8:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d77ca:	2014      	movs	r0, #20
   d77cc:	9301      	str	r3, [sp, #4]
   d77ce:	f7fc fc62 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d77d2:	4603      	mov	r3, r0
   d77d4:	b128      	cbz	r0, d77e2 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d77d6:	2201      	movs	r2, #1
   d77d8:	6042      	str	r2, [r0, #4]
   d77da:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d77dc:	4a08      	ldr	r2, [pc, #32]	; (d7800 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d77de:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d77e0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d77e2:	a802      	add	r0, sp, #8
   d77e4:	6872      	ldr	r2, [r6, #4]
   d77e6:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d77ea:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d77ec:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d77ee:	f7fc ff89 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d77f2:	6833      	ldr	r3, [r6, #0]
   d77f4:	b90b      	cbnz	r3, d77fa <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d77f6:	f7ff f9b3 	bl	d6b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d77fa:	4630      	mov	r0, r6
   d77fc:	b002      	add	sp, #8
   d77fe:	bd70      	pop	{r4, r5, r6, pc}
   d7800:	000dc06c 	.word	0x000dc06c

000d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7804:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7806:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d7808:	6803      	ldr	r3, [r0, #0]
   d780a:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d780c:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d780e:	d00c      	beq.n	d782a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d7810:	b114      	cbz	r4, d7818 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7812:	6863      	ldr	r3, [r4, #4]
   d7814:	3301      	adds	r3, #1
   d7816:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d7818:	6828      	ldr	r0, [r5, #0]
   d781a:	b128      	cbz	r0, d7828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d781c:	6843      	ldr	r3, [r0, #4]
   d781e:	3b01      	subs	r3, #1
   d7820:	6043      	str	r3, [r0, #4]
   d7822:	b90b      	cbnz	r3, d7828 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d7824:	f7ff f9a6 	bl	d6b74 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d7828:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d782a:	4628      	mov	r0, r5
   d782c:	bd38      	pop	{r3, r4, r5, pc}

000d782e <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d782e:	b510      	push	{r4, lr}
   d7830:	6802      	ldr	r2, [r0, #0]
   d7832:	680b      	ldr	r3, [r1, #0]
   d7834:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d7836:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d7838:	b110      	cbz	r0, d7840 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d783a:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d783c:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d783e:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d7840:	4620      	mov	r0, r4
   d7842:	f851 3b04 	ldr.w	r3, [r1], #4
   d7846:	f840 3b04 	str.w	r3, [r0], #4
   d784a:	f7ff ffdb 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d784e:	4620      	mov	r0, r4
   d7850:	bd10      	pop	{r4, pc}

000d7852 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d7852:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7856:	6803      	ldr	r3, [r0, #0]
   d7858:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d785a:	69de      	ldr	r6, [r3, #28]
   d785c:	b087      	sub	sp, #28
   d785e:	460f      	mov	r7, r1
   d7860:	4690      	mov	r8, r2
   d7862:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d7866:	42b4      	cmp	r4, r6
   d7868:	46a1      	mov	r9, r4
   d786a:	d011      	beq.n	d7890 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d786c:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d7870:	a801      	add	r0, sp, #4
   d7872:	3114      	adds	r1, #20
   d7874:	f7ff fa92 	bl	d6d9c <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d7878:	4641      	mov	r1, r8
   d787a:	a801      	add	r0, sp, #4
   d787c:	f7ff fafa 	bl	d6e74 <_ZNK8particle7BleUuideqERKS0_>
   d7880:	4605      	mov	r5, r0
   d7882:	2800      	cmp	r0, #0
   d7884:	d0ef      	beq.n	d7866 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d7886:	4649      	mov	r1, r9
   d7888:	4638      	mov	r0, r7
   d788a:	f7ff ffd0 	bl	d782e <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d788e:	e000      	b.n	d7892 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d7890:	2500      	movs	r5, #0
}
   d7892:	4628      	mov	r0, r5
   d7894:	b007      	add	sp, #28
   d7896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d789a <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d789a:	b510      	push	{r4, lr}
   d789c:	f851 3b04 	ldr.w	r3, [r1], #4
   d78a0:	4604      	mov	r4, r0
   d78a2:	f840 3b04 	str.w	r3, [r0], #4
   d78a6:	f7ff ffad 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d78aa:	4620      	mov	r0, r4
   d78ac:	bd10      	pop	{r4, pc}

000d78ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d78ae:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d78b0:	b570      	push	{r4, r5, r6, lr}
   d78b2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d78b4:	d91a      	bls.n	d78ec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d78b6:	4290      	cmp	r0, r2
   d78b8:	d219      	bcs.n	d78ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d78ba:	f1a1 0608 	sub.w	r6, r1, #8
   d78be:	1a51      	subs	r1, r2, r1
   d78c0:	3904      	subs	r1, #4
   d78c2:	1f15      	subs	r5, r2, #4
   d78c4:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d78c6:	1f2b      	subs	r3, r5, #4
   d78c8:	429e      	cmp	r6, r3
   d78ca:	d025      	beq.n	d7918 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d78cc:	2c04      	cmp	r4, #4
   d78ce:	d007      	beq.n	d78e0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d78d0:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d78d4:	f844 3c04 	str.w	r3, [r4, #-4]
   d78d8:	4629      	mov	r1, r5
   d78da:	4620      	mov	r0, r4
   d78dc:	f7ff feda 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d78e0:	4628      	mov	r0, r5
   d78e2:	f7fc ff0f 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d78e6:	3d08      	subs	r5, #8
   d78e8:	3c08      	subs	r4, #8
   d78ea:	e7ec      	b.n	d78c6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d78ec:	d014      	beq.n	d7918 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d78ee:	1d0c      	adds	r4, r1, #4
   d78f0:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d78f2:	1f23      	subs	r3, r4, #4
   d78f4:	429d      	cmp	r5, r3
   d78f6:	d00f      	beq.n	d7918 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d78f8:	2e04      	cmp	r6, #4
   d78fa:	d007      	beq.n	d790c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d78fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d7900:	f846 3c04 	str.w	r3, [r6, #-4]
   d7904:	4621      	mov	r1, r4
   d7906:	4630      	mov	r0, r6
   d7908:	f7ff fec4 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d790c:	4620      	mov	r0, r4
   d790e:	f7fc fef9 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7912:	3408      	adds	r4, #8
   d7914:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7916:	e7ec      	b.n	d78f2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d7918:	bd70      	pop	{r4, r5, r6, pc}

000d791a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d791a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d791e:	6804      	ldr	r4, [r0, #0]
   d7920:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7922:	4605      	mov	r5, r0
   d7924:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d7926:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d792a:	42a7      	cmp	r7, r4
   d792c:	d018      	beq.n	d7960 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d792e:	4641      	mov	r1, r8
   d7930:	4620      	mov	r0, r4
   d7932:	f7ff fde7 	bl	d7504 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7936:	4606      	mov	r6, r0
   d7938:	b908      	cbnz	r0, d793e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d793a:	3408      	adds	r4, #8
   d793c:	e7f5      	b.n	d792a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d793e:	b18c      	cbz	r4, d7964 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d7940:	1d20      	adds	r0, r4, #4
   d7942:	f7fc fedf 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7946:	682b      	ldr	r3, [r5, #0]
   d7948:	686a      	ldr	r2, [r5, #4]
   d794a:	f104 0108 	add.w	r1, r4, #8
   d794e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7952:	4620      	mov	r0, r4
   d7954:	f7ff ffab 	bl	d78ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d7958:	686b      	ldr	r3, [r5, #4]
   d795a:	3b01      	subs	r3, #1
   d795c:	606b      	str	r3, [r5, #4]
    return true;
   d795e:	e002      	b.n	d7966 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7960:	2600      	movs	r6, #0
   d7962:	e000      	b.n	d7966 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d7964:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d7966:	4630      	mov	r0, r6
   d7968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d796c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d796c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d796e:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7970:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d7974:	6847      	ldr	r7, [r0, #4]
   d7976:	9300      	str	r3, [sp, #0]
   d7978:	a801      	add	r0, sp, #4
   d797a:	f7ff fe8b 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d797e:	6866      	ldr	r6, [r4, #4]
   d7980:	68a3      	ldr	r3, [r4, #8]
   d7982:	429e      	cmp	r6, r3
   d7984:	db14      	blt.n	d79b0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d7986:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7988:	2e00      	cmp	r6, #0
   d798a:	dd0b      	ble.n	d79a4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d798c:	00f0      	lsls	r0, r6, #3
   d798e:	f7fe ff2d 	bl	d67ec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7992:	4605      	mov	r5, r0
   d7994:	b318      	cbz	r0, d79de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d7996:	e894 0006 	ldmia.w	r4, {r1, r2}
   d799a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d799e:	f7ff ff86 	bl	d78ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d79a2:	e000      	b.n	d79a6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d79a4:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d79a6:	6820      	ldr	r0, [r4, #0]
   d79a8:	f7fe ff28 	bl	d67fc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d79ac:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d79ae:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d79b0:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d79b2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d79b4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d79b8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d79bc:	4629      	mov	r1, r5
   d79be:	f105 0008 	add.w	r0, r5, #8
   d79c2:	f7ff ff74 	bl	d78ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d79c6:	b135      	cbz	r5, d79d6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d79c8:	9b00      	ldr	r3, [sp, #0]
   d79ca:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d79ce:	a901      	add	r1, sp, #4
   d79d0:	1d28      	adds	r0, r5, #4
   d79d2:	f7ff fe5f 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d79d6:	6863      	ldr	r3, [r4, #4]
   d79d8:	3301      	adds	r3, #1
   d79da:	6063      	str	r3, [r4, #4]
   d79dc:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d79de:	a801      	add	r0, sp, #4
   d79e0:	f7fc fe90 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d79e4:	4628      	mov	r0, r5
   d79e6:	b003      	add	sp, #12
   d79e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d79ec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d79ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d79f0:	4604      	mov	r4, r0
   d79f2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d79f4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d79f6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d79f8:	f7ff f902 	bl	d6c00 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d79fc:	6823      	ldr	r3, [r4, #0]
   d79fe:	2b03      	cmp	r3, #3
   d7a00:	d002      	beq.n	d7a08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d7a02:	2b04      	cmp	r3, #4
   d7a04:	d042      	beq.n	d7a8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d7a06:	e087      	b.n	d7b18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d7a08:	a804      	add	r0, sp, #16
   d7a0a:	f7ff fec3 	bl	d7794 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7a0e:	9b04      	ldr	r3, [sp, #16]
   d7a10:	8922      	ldrh	r2, [r4, #8]
   d7a12:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7a14:	6862      	ldr	r2, [r4, #4]
   d7a16:	9904      	ldr	r1, [sp, #16]
   d7a18:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d7a1c:	f8c1 3002 	str.w	r3, [r1, #2]
   d7a20:	6853      	ldr	r3, [r2, #4]
   d7a22:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7a26:	a807      	add	r0, sp, #28
   d7a28:	9b04      	ldr	r3, [sp, #16]
   d7a2a:	9306      	str	r3, [sp, #24]
   d7a2c:	a905      	add	r1, sp, #20
   d7a2e:	f7ff fe31 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7a32:	a906      	add	r1, sp, #24
   d7a34:	f105 0018 	add.w	r0, r5, #24
   d7a38:	f7ff ff98 	bl	d796c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d7a3c:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7a3e:	a807      	add	r0, sp, #28
   d7a40:	f7fc fe60 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a44:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7a46:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7a48:	b974      	cbnz	r4, d7a68 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d7a4a:	4b36      	ldr	r3, [pc, #216]	; (d7b24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d7a4c:	9300      	str	r3, [sp, #0]
   d7a4e:	aa06      	add	r2, sp, #24
   d7a50:	4623      	mov	r3, r4
   d7a52:	4935      	ldr	r1, [pc, #212]	; (d7b28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7a54:	9407      	str	r4, [sp, #28]
   d7a56:	2032      	movs	r0, #50	; 0x32
   d7a58:	f7fe fdec 	bl	d6634 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d7a5c:	9b04      	ldr	r3, [sp, #16]
   d7a5e:	4621      	mov	r1, r4
   d7a60:	8818      	ldrh	r0, [r3, #0]
   d7a62:	f7fe fc57 	bl	d6314 <hal_ble_gap_disconnect>
   d7a66:	e00d      	b.n	d7a84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d7a68:	4a30      	ldr	r2, [pc, #192]	; (d7b2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d7a6a:	9200      	str	r2, [sp, #0]
   d7a6c:	2300      	movs	r3, #0
   d7a6e:	aa06      	add	r2, sp, #24
   d7a70:	492d      	ldr	r1, [pc, #180]	; (d7b28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7a72:	9307      	str	r3, [sp, #28]
   d7a74:	2001      	movs	r0, #1
   d7a76:	f7fe fddd 	bl	d6634 <log_message>
                if (impl->connectedCb_) {
   d7a7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d7a7c:	b113      	cbz	r3, d7a84 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d7a7e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d7a80:	a804      	add	r0, sp, #16
   d7a82:	4798      	blx	r3
   d7a84:	a805      	add	r0, sp, #20
   d7a86:	f7fc fe3d 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a8a:	e045      	b.n	d7b18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7a8c:	8921      	ldrh	r1, [r4, #8]
   d7a8e:	4628      	mov	r0, r5
   d7a90:	f7ff fbfe 	bl	d7290 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7a94:	4607      	mov	r7, r0
   d7a96:	2800      	cmp	r0, #0
   d7a98:	d03e      	beq.n	d7b18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d7a9a:	6804      	ldr	r4, [r0, #0]
   d7a9c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7a9e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7aa4:	8022      	strh	r2, [r4, #0]
   d7aa6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d7aaa:	4299      	cmp	r1, r3
   d7aac:	d003      	beq.n	d7ab6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d7aae:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7ab2:	8042      	strh	r2, [r0, #2]
   d7ab4:	e7f9      	b.n	d7aaa <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7ab6:	68e6      	ldr	r6, [r4, #12]
   d7ab8:	6923      	ldr	r3, [r4, #16]
   d7aba:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7abe:	45b0      	cmp	r8, r6
   d7ac0:	d004      	beq.n	d7acc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d7ac2:	1d30      	adds	r0, r6, #4
   d7ac4:	f7fc fe1e 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7ac8:	3608      	adds	r6, #8
   d7aca:	e7f8      	b.n	d7abe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7acc:	2300      	movs	r3, #0
   d7ace:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7ad0:	69a6      	ldr	r6, [r4, #24]
   d7ad2:	69e3      	ldr	r3, [r4, #28]
   d7ad4:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7ad8:	45b0      	cmp	r8, r6
   d7ada:	d004      	beq.n	d7ae6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d7adc:	1d30      	adds	r0, r6, #4
   d7ade:	f7fc fe11 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7ae2:	3608      	adds	r6, #8
   d7ae4:	e7f8      	b.n	d7ad8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7ae6:	2300      	movs	r3, #0
   d7ae8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d7aea:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d7aec:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d7aee:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d7af0:	b113      	cbz	r3, d7af8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d7af2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d7af4:	4638      	mov	r0, r7
   d7af6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d7af8:	2320      	movs	r3, #32
   d7afa:	4a0d      	ldr	r2, [pc, #52]	; (d7b30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d7afc:	9306      	str	r3, [sp, #24]
   d7afe:	9200      	str	r2, [sp, #0]
   d7b00:	2300      	movs	r3, #0
   d7b02:	4909      	ldr	r1, [pc, #36]	; (d7b28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7b04:	9307      	str	r3, [sp, #28]
   d7b06:	2001      	movs	r0, #1
   d7b08:	aa06      	add	r2, sp, #24
   d7b0a:	f7fe fd93 	bl	d6634 <log_message>
                    impl->peers_.removeOne(*peer);
   d7b0e:	4639      	mov	r1, r7
   d7b10:	f105 0018 	add.w	r0, r5, #24
   d7b14:	f7ff ff01 	bl	d791a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7b18:	a803      	add	r0, sp, #12
   d7b1a:	f7ff f87f 	bl	d6c1c <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d7b1e:	b00e      	add	sp, #56	; 0x38
   d7b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7b24:	000dc0e2 	.word	0x000dc0e2
   d7b28:	000dc080 	.word	0x000dc080
   d7b2c:	000dc108 	.word	0x000dc108
   d7b30:	000dc125 	.word	0x000dc125

000d7b34 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7b34:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d7b36:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7b38:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d7b3a:	dd06      	ble.n	d7b4a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d7b3c:	2154      	movs	r1, #84	; 0x54
   d7b3e:	4369      	muls	r1, r5
   d7b40:	6800      	ldr	r0, [r0, #0]
   d7b42:	f7fe fe63 	bl	d680c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7b46:	b920      	cbnz	r0, d7b52 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d7b48:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7b4a:	6800      	ldr	r0, [r0, #0]
   d7b4c:	f7fe fe56 	bl	d67fc <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7b50:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7b52:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7b54:	60a5      	str	r5, [r4, #8]
        return true;
   d7b56:	2001      	movs	r0, #1
    }
   d7b58:	bd38      	pop	{r3, r4, r5, pc}

000d7b5a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7b5a:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7b5c:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7b5e:	b0c0      	sub	sp, #256	; 0x100
   d7b60:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7b62:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7b64:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7b66:	a801      	add	r0, sp, #4
   d7b68:	2100      	movs	r1, #0
   d7b6a:	f003 f9d0 	bl	daf0e <memset>
   d7b6e:	a803      	add	r0, sp, #12
   d7b70:	f7ff faef 	bl	d7152 <_ZN8particle18BleAdvertisingDataC1Ev>
   d7b74:	a80c      	add	r0, sp, #48	; 0x30
   d7b76:	f7ff faec 	bl	d7152 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7b7a:	462a      	mov	r2, r5
   d7b7c:	ab01      	add	r3, sp, #4
   d7b7e:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d7b82:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7b84:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7b86:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7b88:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7b8a:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7b8c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7b90:	a80c      	add	r0, sp, #48	; 0x30
   d7b92:	f7ff fa6f 	bl	d7074 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d7b96:	89aa      	ldrh	r2, [r5, #12]
   d7b98:	6869      	ldr	r1, [r5, #4]
   d7b9a:	a803      	add	r0, sp, #12
   d7b9c:	f7ff fa6a 	bl	d7074 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d7ba0:	69a5      	ldr	r5, [r4, #24]
   d7ba2:	b11d      	cbz	r5, d7bac <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d7ba4:	69e1      	ldr	r1, [r4, #28]
   d7ba6:	a801      	add	r0, sp, #4
   d7ba8:	47a8      	blx	r5
   d7baa:	e03c      	b.n	d7c26 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d7bac:	68e0      	ldr	r0, [r4, #12]
   d7bae:	b198      	cbz	r0, d7bd8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d7bb0:	6963      	ldr	r3, [r4, #20]
   d7bb2:	6922      	ldr	r2, [r4, #16]
   d7bb4:	4293      	cmp	r3, r2
   d7bb6:	d239      	bcs.n	d7c2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d7bb8:	1c5a      	adds	r2, r3, #1
   d7bba:	6162      	str	r2, [r4, #20]
   d7bbc:	fb06 0003 	mla	r0, r6, r3, r0
   d7bc0:	2251      	movs	r2, #81	; 0x51
   d7bc2:	a901      	add	r1, sp, #4
   d7bc4:	f003 f97d 	bl	daec2 <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d7bc8:	6962      	ldr	r2, [r4, #20]
   d7bca:	6923      	ldr	r3, [r4, #16]
   d7bcc:	429a      	cmp	r2, r3
   d7bce:	d32d      	bcc.n	d7c2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d7bd0:	4628      	mov	r0, r5
   d7bd2:	f7fe fb95 	bl	d6300 <hal_ble_gap_stop_scan>
   d7bd6:	e029      	b.n	d7c2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d7bd8:	4632      	mov	r2, r6
   d7bda:	a901      	add	r1, sp, #4
   d7bdc:	a816      	add	r0, sp, #88	; 0x58
   d7bde:	f003 f970 	bl	daec2 <memcpy>
   d7be2:	4632      	mov	r2, r6
   d7be4:	a916      	add	r1, sp, #88	; 0x58
   d7be6:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7be8:	6865      	ldr	r5, [r4, #4]
   d7bea:	f003 f96a 	bl	daec2 <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7bee:	68a3      	ldr	r3, [r4, #8]
   d7bf0:	429d      	cmp	r5, r3
   d7bf2:	db04      	blt.n	d7bfe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d7bf4:	1c69      	adds	r1, r5, #1
   d7bf6:	4620      	mov	r0, r4
   d7bf8:	f7ff ff9c 	bl	d7b34 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7bfc:	b1b0      	cbz	r0, d7c2c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7bfe:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7c00:	6822      	ldr	r2, [r4, #0]
   d7c02:	2654      	movs	r6, #84	; 0x54
   d7c04:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7c08:	fb06 2203 	mla	r2, r6, r3, r2
   d7c0c:	1b52      	subs	r2, r2, r5
   d7c0e:	4629      	mov	r1, r5
   d7c10:	19a8      	adds	r0, r5, r6
   d7c12:	f003 f961 	bl	daed8 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7c16:	4632      	mov	r2, r6
   d7c18:	a92b      	add	r1, sp, #172	; 0xac
   d7c1a:	4628      	mov	r0, r5
   d7c1c:	f003 f951 	bl	daec2 <memcpy>
    ++size_;
   d7c20:	6863      	ldr	r3, [r4, #4]
   d7c22:	3301      	adds	r3, #1
   d7c24:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d7c26:	6963      	ldr	r3, [r4, #20]
   d7c28:	3301      	adds	r3, #1
   d7c2a:	6163      	str	r3, [r4, #20]
        }
    }
   d7c2c:	b040      	add	sp, #256	; 0x100
   d7c2e:	bd70      	pop	{r4, r5, r6, pc}

000d7c30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7c30:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c34:	4606      	mov	r6, r0
   d7c36:	460c      	mov	r4, r1
   d7c38:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7c3a:	d914      	bls.n	d7c66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7c3c:	4290      	cmp	r0, r2
   d7c3e:	d213      	bcs.n	d7c68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7c40:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7c44:	1a6c      	subs	r4, r5, r1
   d7c46:	f1a1 0708 	sub.w	r7, r1, #8
   d7c4a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7c4c:	42af      	cmp	r7, r5
   d7c4e:	d018      	beq.n	d7c82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7c50:	b11c      	cbz	r4, d7c5a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7c52:	4629      	mov	r1, r5
   d7c54:	4620      	mov	r0, r4
   d7c56:	f7ff fd32 	bl	d76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7c5a:	1d28      	adds	r0, r5, #4
   d7c5c:	f7fc fd52 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7c60:	3d08      	subs	r5, #8
   d7c62:	3c08      	subs	r4, #8
   d7c64:	e7f2      	b.n	d7c4c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7c66:	d00c      	beq.n	d7c82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7c68:	42ac      	cmp	r4, r5
   d7c6a:	d00a      	beq.n	d7c82 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7c6c:	b11e      	cbz	r6, d7c76 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7c6e:	4621      	mov	r1, r4
   d7c70:	4630      	mov	r0, r6
   d7c72:	f7ff fd24 	bl	d76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7c76:	1d20      	adds	r0, r4, #4
   d7c78:	f7fc fd44 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7c7c:	3408      	adds	r4, #8
   d7c7e:	3608      	adds	r6, #8
   d7c80:	e7f2      	b.n	d7c68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7c84:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7c86:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7c88:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7c8a:	dd0b      	ble.n	d7ca4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7c8c:	00f0      	lsls	r0, r6, #3
   d7c8e:	f7fe fdad 	bl	d67ec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7c92:	4604      	mov	r4, r0
   d7c94:	b170      	cbz	r0, d7cb4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7c96:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7c9a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7c9e:	f7ff ffc7 	bl	d7c30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7ca2:	e000      	b.n	d7ca6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7ca4:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7ca6:	6828      	ldr	r0, [r5, #0]
   d7ca8:	f7fe fda8 	bl	d67fc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7cac:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7cae:	60ae      	str	r6, [r5, #8]
        return true;
   d7cb0:	2001      	movs	r0, #1
   d7cb2:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7cb4:	bd70      	pop	{r4, r5, r6, pc}

000d7cb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7cb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7cba:	2300      	movs	r3, #0
   d7cbc:	6003      	str	r3, [r0, #0]
   d7cbe:	6043      	str	r3, [r0, #4]
   d7cc0:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7cc2:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7cc4:	6849      	ldr	r1, [r1, #4]
   d7cc6:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7cc8:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7cca:	dd13      	ble.n	d7cf4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7ccc:	f7ff ffda 	bl	d7c84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7cd0:	b180      	cbz	r0, d7cf4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7cd2:	6835      	ldr	r5, [r6, #0]
   d7cd4:	6873      	ldr	r3, [r6, #4]
   d7cd6:	6827      	ldr	r7, [r4, #0]
   d7cd8:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7cdc:	4545      	cmp	r5, r8
   d7cde:	d007      	beq.n	d7cf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7ce0:	b11f      	cbz	r7, d7cea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7ce2:	4629      	mov	r1, r5
   d7ce4:	4638      	mov	r0, r7
   d7ce6:	f7ff fcea 	bl	d76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7cea:	3508      	adds	r5, #8
   d7cec:	3708      	adds	r7, #8
   d7cee:	e7f5      	b.n	d7cdc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7cf0:	6873      	ldr	r3, [r6, #4]
   d7cf2:	6063      	str	r3, [r4, #4]
    }
}
   d7cf4:	4620      	mov	r0, r4
   d7cf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7cfa <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7cfa:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d7cfc:	680b      	ldr	r3, [r1, #0]
   d7cfe:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7d00:	4605      	mov	r5, r0
   d7d02:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d7d04:	b933      	cbnz	r3, d7d14 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d7d06:	4608      	mov	r0, r1
   d7d08:	f7fe ff0c 	bl	d6b24 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d7d0c:	b910      	cbnz	r0, d7d14 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d7d0e:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d7d10:	2201      	movs	r2, #1
   d7d12:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d7d14:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d7d16:	4628      	mov	r0, r5
   d7d18:	310c      	adds	r1, #12
   d7d1a:	f7ff ffcc 	bl	d7cb6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d7d1e:	4628      	mov	r0, r5
   d7d20:	bd38      	pop	{r3, r4, r5, pc}

000d7d22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7d22:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7d24:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7d26:	6845      	ldr	r5, [r0, #4]
   d7d28:	4668      	mov	r0, sp
   d7d2a:	f7ff fcc8 	bl	d76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d2e:	6861      	ldr	r1, [r4, #4]
   d7d30:	68a3      	ldr	r3, [r4, #8]
   d7d32:	4299      	cmp	r1, r3
   d7d34:	db05      	blt.n	d7d42 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d7d36:	3101      	adds	r1, #1
   d7d38:	4620      	mov	r0, r4
   d7d3a:	f7ff ffa3 	bl	d7c84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7d3e:	4606      	mov	r6, r0
   d7d40:	b198      	cbz	r0, d7d6a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d7d42:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7d44:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7d46:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7d4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7d4e:	4629      	mov	r1, r5
   d7d50:	f105 0008 	add.w	r0, r5, #8
   d7d54:	f7ff ff6c 	bl	d7c30 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7d58:	b11d      	cbz	r5, d7d62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d7d5a:	4669      	mov	r1, sp
   d7d5c:	4628      	mov	r0, r5
   d7d5e:	f7ff fcae 	bl	d76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7d62:	6863      	ldr	r3, [r4, #4]
   d7d64:	3301      	adds	r3, #1
   d7d66:	6063      	str	r3, [r4, #4]
   d7d68:	2601      	movs	r6, #1
   d7d6a:	a801      	add	r0, sp, #4
   d7d6c:	f7fc fcca 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7d70:	4630      	mov	r0, r6
   d7d72:	b002      	add	sp, #8
   d7d74:	bd70      	pop	{r4, r5, r6, pc}

000d7d76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7d76:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d7a:	4606      	mov	r6, r0
   d7d7c:	460c      	mov	r4, r1
   d7d7e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7d80:	d914      	bls.n	d7dac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7d82:	4290      	cmp	r0, r2
   d7d84:	d213      	bcs.n	d7dae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7d86:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7d8a:	1a6c      	subs	r4, r5, r1
   d7d8c:	f1a1 0708 	sub.w	r7, r1, #8
   d7d90:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7d92:	42af      	cmp	r7, r5
   d7d94:	d018      	beq.n	d7dc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7d96:	b11c      	cbz	r4, d7da0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7d98:	4629      	mov	r1, r5
   d7d9a:	4620      	mov	r0, r4
   d7d9c:	f7ff fc81 	bl	d76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7da0:	1d28      	adds	r0, r5, #4
   d7da2:	f7fc fcaf 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7da6:	3d08      	subs	r5, #8
   d7da8:	3c08      	subs	r4, #8
   d7daa:	e7f2      	b.n	d7d92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7dac:	d00c      	beq.n	d7dc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7dae:	42ac      	cmp	r4, r5
   d7db0:	d00a      	beq.n	d7dc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7db2:	b11e      	cbz	r6, d7dbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7db4:	4621      	mov	r1, r4
   d7db6:	4630      	mov	r0, r6
   d7db8:	f7ff fc73 	bl	d76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7dbc:	1d20      	adds	r0, r4, #4
   d7dbe:	f7fc fca1 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7dc2:	3408      	adds	r4, #8
   d7dc4:	3608      	adds	r6, #8
   d7dc6:	e7f2      	b.n	d7dae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7dca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7dca:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7dcc:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7dce:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7dd0:	dd0b      	ble.n	d7dea <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7dd2:	00f0      	lsls	r0, r6, #3
   d7dd4:	f7fe fd0a 	bl	d67ec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7dd8:	4604      	mov	r4, r0
   d7dda:	b170      	cbz	r0, d7dfa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7ddc:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7de0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7de4:	f7ff ffc7 	bl	d7d76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7de8:	e000      	b.n	d7dec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7dea:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7dec:	6828      	ldr	r0, [r5, #0]
   d7dee:	f7fe fd05 	bl	d67fc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7df2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7df4:	60ae      	str	r6, [r5, #8]
        return true;
   d7df6:	2001      	movs	r0, #1
   d7df8:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7dfa:	bd70      	pop	{r4, r5, r6, pc}

000d7dfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e00:	2300      	movs	r3, #0
   d7e02:	6003      	str	r3, [r0, #0]
   d7e04:	6043      	str	r3, [r0, #4]
   d7e06:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e08:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7e0a:	6849      	ldr	r1, [r1, #4]
   d7e0c:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7e0e:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7e10:	dd13      	ble.n	d7e3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7e12:	f7ff ffda 	bl	d7dca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7e16:	b180      	cbz	r0, d7e3a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7e18:	6835      	ldr	r5, [r6, #0]
   d7e1a:	6873      	ldr	r3, [r6, #4]
   d7e1c:	6827      	ldr	r7, [r4, #0]
   d7e1e:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7e22:	4545      	cmp	r5, r8
   d7e24:	d007      	beq.n	d7e36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7e26:	b11f      	cbz	r7, d7e30 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7e28:	4629      	mov	r1, r5
   d7e2a:	4638      	mov	r0, r7
   d7e2c:	f7ff fc39 	bl	d76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7e30:	3508      	adds	r5, #8
   d7e32:	3708      	adds	r7, #8
   d7e34:	e7f5      	b.n	d7e22 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7e36:	6873      	ldr	r3, [r6, #4]
   d7e38:	6063      	str	r3, [r4, #4]
    }
}
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7e40 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d7e40:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d7e42:	680b      	ldr	r3, [r1, #0]
   d7e44:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d7e46:	b085      	sub	sp, #20
   d7e48:	4605      	mov	r5, r0
   d7e4a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d7e4c:	b92b      	cbnz	r3, d7e5a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d7e4e:	a801      	add	r0, sp, #4
   d7e50:	f7ff ff53 	bl	d7cfa <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d7e54:	a801      	add	r0, sp, #4
   d7e56:	f7ff fc4a 	bl	d76ee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d7e5a:	6823      	ldr	r3, [r4, #0]
   d7e5c:	7adb      	ldrb	r3, [r3, #11]
   d7e5e:	b93b      	cbnz	r3, d7e70 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d7e60:	4621      	mov	r1, r4
   d7e62:	a801      	add	r0, sp, #4
   d7e64:	f7ff facc 	bl	d7400 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d7e68:	b910      	cbnz	r0, d7e70 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d7e6a:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d7e6c:	2201      	movs	r2, #1
   d7e6e:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d7e70:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d7e72:	4628      	mov	r0, r5
   d7e74:	3118      	adds	r1, #24
   d7e76:	f7ff ffc1 	bl	d7dfc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d7e7a:	4628      	mov	r0, r5
   d7e7c:	b005      	add	sp, #20
   d7e7e:	bd30      	pop	{r4, r5, pc}

000d7e80 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d7e80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7e84:	460d      	mov	r5, r1
   d7e86:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d7e88:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d7e8c:	4617      	mov	r7, r2
   d7e8e:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d7e90:	4642      	mov	r2, r8
   d7e92:	2100      	movs	r1, #0
   d7e94:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d7e96:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d7e98:	f003 f839 	bl	daf0e <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d7e9c:	6869      	ldr	r1, [r5, #4]
   d7e9e:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d7ea0:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d7ea2:	ab02      	add	r3, sp, #8
   d7ea4:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d7ea6:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d7eaa:	ab05      	add	r3, sp, #20
   d7eac:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d7eb0:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d7eb4:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d7eb8:	f7ff fb6c 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d7ebc:	4b34      	ldr	r3, [pc, #208]	; (d7f90 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d7ebe:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d7ec0:	f7ff fb68 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d7ec4:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7ec6:	6803      	ldr	r3, [r0, #0]
   d7ec8:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d7eca:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d7ecc:	a804      	add	r0, sp, #16
   d7ece:	f7fe fa67 	bl	d63a0 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d7ed2:	4607      	mov	r7, r0
   d7ed4:	b120      	cbz	r0, d7ee0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d7ed6:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7ed8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7edc:	801a      	strh	r2, [r3, #0]
        return ret;
   d7ede:	e053      	b.n	d7f88 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d7ee0:	4629      	mov	r1, r5
   d7ee2:	4630      	mov	r0, r6
   d7ee4:	f7ff fafe 	bl	d74e4 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d7ee8:	f7ff fb54 	bl	d7594 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7eec:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d7eee:	6803      	ldr	r3, [r0, #0]
   d7ef0:	ad12      	add	r5, sp, #72	; 0x48
   d7ef2:	f103 0818 	add.w	r8, r3, #24
   d7ef6:	f851 3b04 	ldr.w	r3, [r1], #4
   d7efa:	f845 3d20 	str.w	r3, [r5, #-32]!
   d7efe:	a80b      	add	r0, sp, #44	; 0x2c
   d7f00:	f7ff fbc8 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d7f04:	4629      	mov	r1, r5
   d7f06:	4640      	mov	r0, r8
   d7f08:	f7ff fd30 	bl	d796c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d7f0c:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7f0e:	a80b      	add	r0, sp, #44	; 0x2c
   d7f10:	f7fc fbf8 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7f14:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d7f16:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d7f18:	f1b8 0f00 	cmp.w	r8, #0
   d7f1c:	d114      	bne.n	d7f48 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d7f1e:	4b1d      	ldr	r3, [pc, #116]	; (d7f94 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d7f20:	9300      	str	r3, [sp, #0]
   d7f22:	462a      	mov	r2, r5
   d7f24:	4643      	mov	r3, r8
   d7f26:	491c      	ldr	r1, [pc, #112]	; (d7f98 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d7f28:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d7f2c:	2032      	movs	r0, #50	; 0x32
   d7f2e:	f7fe fb81 	bl	d6634 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d7f32:	6833      	ldr	r3, [r6, #0]
   d7f34:	4641      	mov	r1, r8
   d7f36:	8818      	ldrh	r0, [r3, #0]
   d7f38:	f7fe f9ec 	bl	d6314 <hal_ble_gap_disconnect>
   d7f3c:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d7f3e:	4817      	ldr	r0, [pc, #92]	; (d7f9c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7f44:	801a      	strh	r2, [r3, #0]
   d7f46:	e01f      	b.n	d7f88 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d7f48:	4b15      	ldr	r3, [pc, #84]	; (d7fa0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d7f4a:	9300      	str	r3, [sp, #0]
   d7f4c:	462a      	mov	r2, r5
   d7f4e:	463b      	mov	r3, r7
   d7f50:	4911      	ldr	r1, [pc, #68]	; (d7f98 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d7f52:	970b      	str	r7, [sp, #44]	; 0x2c
   d7f54:	4648      	mov	r0, r9
   d7f56:	f7fe fb6d 	bl	d6634 <log_message>
    if (automatic) {
   d7f5a:	b1a4      	cbz	r4, d7f86 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d7f5c:	4631      	mov	r1, r6
   d7f5e:	4628      	mov	r0, r5
   d7f60:	f7ff ff6e 	bl	d7e40 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d7f64:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7f68:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d7f6c:	42a6      	cmp	r6, r4
   d7f6e:	d005      	beq.n	d7f7c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d7f70:	4620      	mov	r0, r4
   d7f72:	2101      	movs	r1, #1
   d7f74:	f7ff fa00 	bl	d7378 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d7f78:	3408      	adds	r4, #8
   d7f7a:	e7f7      	b.n	d7f6c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d7f7c:	4628      	mov	r0, r5
   d7f7e:	f7ff fbc8 	bl	d7712 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d7f82:	2000      	movs	r0, #0
   d7f84:	e000      	b.n	d7f88 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d7f86:	4620      	mov	r0, r4
}
   d7f88:	b013      	add	sp, #76	; 0x4c
   d7f8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7f8e:	bf00      	nop
   d7f90:	000d79ed 	.word	0x000d79ed
   d7f94:	000dc144 	.word	0x000dc144
   d7f98:	000dc080 	.word	0x000dc080
   d7f9c:	fffffefc 	.word	0xfffffefc
   d7fa0:	000dc160 	.word	0x000dc160

000d7fa4 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d7fa4:	b570      	push	{r4, r5, r6, lr}
   d7fa6:	4604      	mov	r4, r0
   d7fa8:	4615      	mov	r5, r2
   d7faa:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d7fac:	f7ff fbf2 	bl	d7794 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d7fb0:	4633      	mov	r3, r6
   d7fb2:	2200      	movs	r2, #0
   d7fb4:	4629      	mov	r1, r5
   d7fb6:	4620      	mov	r0, r4
   d7fb8:	f7ff ff62 	bl	d7e80 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d7fbc:	4620      	mov	r0, r4
   d7fbe:	bd70      	pop	{r4, r5, r6, pc}

000d7fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7fc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7fc2:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7fc4:	6845      	ldr	r5, [r0, #4]
   d7fc6:	4668      	mov	r0, sp
   d7fc8:	f7ff fb6b 	bl	d76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7fcc:	6861      	ldr	r1, [r4, #4]
   d7fce:	68a3      	ldr	r3, [r4, #8]
   d7fd0:	4299      	cmp	r1, r3
   d7fd2:	db05      	blt.n	d7fe0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d7fd4:	3101      	adds	r1, #1
   d7fd6:	4620      	mov	r0, r4
   d7fd8:	f7ff fef7 	bl	d7dca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7fdc:	4606      	mov	r6, r0
   d7fde:	b198      	cbz	r0, d8008 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d7fe0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7fe2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7fe4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7fe8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7fec:	4629      	mov	r1, r5
   d7fee:	f105 0008 	add.w	r0, r5, #8
   d7ff2:	f7ff fec0 	bl	d7d76 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7ff6:	b11d      	cbz	r5, d8000 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d7ff8:	4669      	mov	r1, sp
   d7ffa:	4628      	mov	r0, r5
   d7ffc:	f7ff fb51 	bl	d76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d8000:	6863      	ldr	r3, [r4, #4]
   d8002:	3301      	adds	r3, #1
   d8004:	6063      	str	r3, [r4, #4]
   d8006:	2601      	movs	r6, #1
   d8008:	a801      	add	r0, sp, #4
   d800a:	f7fc fb7b 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d800e:	4630      	mov	r0, r6
   d8010:	b002      	add	sp, #8
   d8012:	bd70      	pop	{r4, r5, r6, pc}

000d8014 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8014:	b510      	push	{r4, lr}
   d8016:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8018:	6840      	ldr	r0, [r0, #4]
   d801a:	b108      	cbz	r0, d8020 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d801c:	f7fc f83f 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d8020:	4620      	mov	r0, r4
   d8022:	bd10      	pop	{r4, pc}

000d8024 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8024:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8026:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8028:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d802a:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d802e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d8032:	f7fe fc83 	bl	d693c <_ZN6StringD1Ev>
   d8036:	4668      	mov	r0, sp
   d8038:	f7ff ffec 	bl	d8014 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d803c:	b003      	add	sp, #12
   d803e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8044:	b538      	push	{r3, r4, r5, lr}
   d8046:	2300      	movs	r3, #0
   d8048:	4604      	mov	r4, r0
   d804a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d804c:	2014      	movs	r0, #20
   d804e:	460d      	mov	r5, r1
   d8050:	f7fc f821 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8054:	b128      	cbz	r0, d8062 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8056:	2301      	movs	r3, #1
   d8058:	6043      	str	r3, [r0, #4]
   d805a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d805c:	4b02      	ldr	r3, [pc, #8]	; (d8068 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d805e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8060:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8062:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8064:	4620      	mov	r0, r4
   d8066:	bd38      	pop	{r3, r4, r5, pc}
   d8068:	000dc034 	.word	0x000dc034

000d806c <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d806c:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d806e:	2500      	movs	r5, #0
   d8070:	b086      	sub	sp, #24
   d8072:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8074:	6045      	str	r5, [r0, #4]
   d8076:	4604      	mov	r4, r0
   d8078:	2054      	movs	r0, #84	; 0x54
   d807a:	f7fc f80c 	bl	d4096 <_Znwj>
   d807e:	f8cd d010 	str.w	sp, [sp, #16]
   d8082:	4606      	mov	r6, r0
   d8084:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8086:	b108      	cbz	r0, d808c <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d8088:	f7ff f8e2 	bl	d7250 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d808c:	4631      	mov	r1, r6
   d808e:	ab01      	add	r3, sp, #4
   d8090:	aa02      	add	r2, sp, #8
   d8092:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8094:	9505      	str	r5, [sp, #20]
   d8096:	f7ff ffd5 	bl	d8044 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d809a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d809c:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d809e:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d80a0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d80a2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d80a4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d80a6:	f7fc fb2d 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d80aa:	a804      	add	r0, sp, #16
   d80ac:	f7ff ffb2 	bl	d8014 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d80b0:	6823      	ldr	r3, [r4, #0]
   d80b2:	b90b      	cbnz	r3, d80b8 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d80b4:	f7fe fd54 	bl	d6b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d80b8:	4620      	mov	r0, r4
   d80ba:	b006      	add	sp, #24
   d80bc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d80c0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d80c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d80c4:	f8df 8104 	ldr.w	r8, [pc, #260]	; d81cc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d80c8:	b08c      	sub	sp, #48	; 0x30
   d80ca:	4605      	mov	r5, r0
   d80cc:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d80ce:	2600      	movs	r6, #0
   d80d0:	682b      	ldr	r3, [r5, #0]
   d80d2:	429e      	cmp	r6, r3
   d80d4:	d275      	bcs.n	d81c2 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d80d6:	a802      	add	r0, sp, #8
   d80d8:	f7ff ffc8 	bl	d806c <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d80dc:	9b02      	ldr	r3, [sp, #8]
   d80de:	892a      	ldrh	r2, [r5, #8]
   d80e0:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d80e2:	686b      	ldr	r3, [r5, #4]
   d80e4:	9802      	ldr	r0, [sp, #8]
   d80e6:	242a      	movs	r4, #42	; 0x2a
   d80e8:	4374      	muls	r4, r6
   d80ea:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d80ec:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d80ee:	7e5b      	ldrb	r3, [r3, #25]
   d80f0:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d80f4:	bf1e      	ittt	ne
   d80f6:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d80fa:	f043 0302 	orrne.w	r3, r3, #2
   d80fe:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d8102:	686b      	ldr	r3, [r5, #4]
   d8104:	4423      	add	r3, r4
   d8106:	7e5b      	ldrb	r3, [r3, #25]
   d8108:	075b      	lsls	r3, r3, #29
   d810a:	bf42      	ittt	mi
   d810c:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8110:	f043 0304 	orrmi.w	r3, r3, #4
   d8114:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d8118:	686b      	ldr	r3, [r5, #4]
   d811a:	4423      	add	r3, r4
   d811c:	7e5b      	ldrb	r3, [r3, #25]
   d811e:	0719      	lsls	r1, r3, #28
   d8120:	bf42      	ittt	mi
   d8122:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8126:	f043 0308 	orrmi.w	r3, r3, #8
   d812a:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d812e:	686b      	ldr	r3, [r5, #4]
   d8130:	4423      	add	r3, r4
   d8132:	7e5b      	ldrb	r3, [r3, #25]
   d8134:	06da      	lsls	r2, r3, #27
   d8136:	bf42      	ittt	mi
   d8138:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d813c:	f043 0310 	orrmi.w	r3, r3, #16
   d8140:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d8144:	686b      	ldr	r3, [r5, #4]
   d8146:	4423      	add	r3, r4
   d8148:	7e5b      	ldrb	r3, [r3, #25]
   d814a:	069b      	lsls	r3, r3, #26
   d814c:	bf42      	ittt	mi
   d814e:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8152:	f043 0320 	orrmi.w	r3, r3, #32
   d8156:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d815a:	6869      	ldr	r1, [r5, #4]
   d815c:	4421      	add	r1, r4
   d815e:	3104      	adds	r1, #4
   d8160:	f7fe fe7c 	bl	d6e5c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d8164:	686a      	ldr	r2, [r5, #4]
   d8166:	9b02      	ldr	r3, [sp, #8]
   d8168:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d816a:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d816c:	8be2      	ldrh	r2, [r4, #30]
   d816e:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d8170:	8c22      	ldrh	r2, [r4, #32]
   d8172:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d8174:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d8176:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d8178:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d817a:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d817c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d817e:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d8180:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d8182:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8184:	6838      	ldr	r0, [r7, #0]
   d8186:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d818a:	a804      	add	r0, sp, #16
   d818c:	f7ff fa89 	bl	d76a2 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d8190:	4620      	mov	r0, r4
   d8192:	a904      	add	r1, sp, #16
   d8194:	f7ff ff14 	bl	d7fc0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d8198:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d819a:	a805      	add	r0, sp, #20
   d819c:	f7fc fab2 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d81a0:	b954      	cbnz	r4, d81b8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d81a2:	2320      	movs	r3, #32
   d81a4:	9304      	str	r3, [sp, #16]
   d81a6:	f8cd 8000 	str.w	r8, [sp]
   d81aa:	4623      	mov	r3, r4
   d81ac:	aa04      	add	r2, sp, #16
   d81ae:	4906      	ldr	r1, [pc, #24]	; (d81c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d81b0:	9405      	str	r4, [sp, #20]
   d81b2:	2032      	movs	r0, #50	; 0x32
   d81b4:	f7fe fa3e 	bl	d6634 <log_message>
   d81b8:	a803      	add	r0, sp, #12
   d81ba:	f7fc faa3 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d81be:	3601      	adds	r6, #1
   d81c0:	e786      	b.n	d80d0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d81c2:	b00c      	add	sp, #48	; 0x30
   d81c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d81c8:	000dc080 	.word	0x000dc080
   d81cc:	000dc17d 	.word	0x000dc17d

000d81d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d81d0:	b510      	push	{r4, lr}
   d81d2:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d81d4:	6840      	ldr	r0, [r0, #4]
   d81d6:	b108      	cbz	r0, d81dc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d81d8:	f7fb ff61 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d81dc:	4620      	mov	r0, r4
   d81de:	bd10      	pop	{r4, pc}

000d81e0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d81e0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d81e2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d81e4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d81e6:	e88d 0009 	stmia.w	sp, {r0, r3}
   d81ea:	4668      	mov	r0, sp
   d81ec:	f7ff fff0 	bl	d81d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d81f0:	b003      	add	sp, #12
   d81f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d81f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d81f8:	b538      	push	{r3, r4, r5, lr}
   d81fa:	2300      	movs	r3, #0
   d81fc:	4604      	mov	r4, r0
   d81fe:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8200:	2014      	movs	r0, #20
   d8202:	460d      	mov	r5, r1
   d8204:	f7fb ff47 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8208:	b128      	cbz	r0, d8216 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d820a:	2301      	movs	r3, #1
   d820c:	6043      	str	r3, [r0, #4]
   d820e:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8210:	4b02      	ldr	r3, [pc, #8]	; (d821c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d8212:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8214:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8216:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8218:	4620      	mov	r0, r4
   d821a:	bd38      	pop	{r3, r4, r5, pc}
   d821c:	000dc050 	.word	0x000dc050

000d8220 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d8220:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d8222:	2500      	movs	r5, #0
   d8224:	b086      	sub	sp, #24
   d8226:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8228:	6045      	str	r5, [r0, #4]
   d822a:	4604      	mov	r4, r0
   d822c:	2018      	movs	r0, #24
   d822e:	f7fb ff32 	bl	d4096 <_Znwj>
   d8232:	f8cd d010 	str.w	sp, [sp, #16]
   d8236:	4606      	mov	r6, r0
   d8238:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d823a:	b118      	cbz	r0, d8244 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d823c:	f7fe fd7a 	bl	d6d34 <_ZN8particle7BleUuidC1Ev>
   d8240:	82b5      	strh	r5, [r6, #20]
   d8242:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8244:	4631      	mov	r1, r6
   d8246:	ab01      	add	r3, sp, #4
   d8248:	aa02      	add	r2, sp, #8
   d824a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d824c:	9505      	str	r5, [sp, #20]
   d824e:	f7ff ffd3 	bl	d81f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8252:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8254:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8256:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8258:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d825a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d825c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d825e:	f7fc fa51 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d8262:	a804      	add	r0, sp, #16
   d8264:	f7ff ffb4 	bl	d81d0 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d8268:	6823      	ldr	r3, [r4, #0]
   d826a:	b90b      	cbnz	r3, d8270 <_ZN8particle10BleServiceC1Ev+0x50>
   d826c:	f7fe fc78 	bl	d6b60 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d8270:	4620      	mov	r0, r4
   d8272:	b006      	add	sp, #24
   d8274:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8278 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d827c:	f8df 8080 	ldr.w	r8, [pc, #128]	; d8300 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8280:	b08c      	sub	sp, #48	; 0x30
   d8282:	4606      	mov	r6, r0
   d8284:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8286:	2500      	movs	r5, #0
   d8288:	6833      	ldr	r3, [r6, #0]
   d828a:	429d      	cmp	r5, r3
   d828c:	d233      	bcs.n	d82f6 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d828e:	a802      	add	r0, sp, #8
   d8290:	f7ff ffc6 	bl	d8220 <_ZN8particle10BleServiceC1Ev>
   d8294:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d8296:	6871      	ldr	r1, [r6, #4]
   d8298:	9802      	ldr	r0, [sp, #8]
   d829a:	436c      	muls	r4, r5
   d829c:	4421      	add	r1, r4
   d829e:	3104      	adds	r1, #4
   d82a0:	f7fe fddc 	bl	d6e5c <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d82a4:	6873      	ldr	r3, [r6, #4]
   d82a6:	9a02      	ldr	r2, [sp, #8]
   d82a8:	4423      	add	r3, r4
   d82aa:	a902      	add	r1, sp, #8
   d82ac:	8b1b      	ldrh	r3, [r3, #24]
   d82ae:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d82b0:	6873      	ldr	r3, [r6, #4]
   d82b2:	441c      	add	r4, r3
   d82b4:	8b63      	ldrh	r3, [r4, #26]
   d82b6:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d82b8:	6838      	ldr	r0, [r7, #0]
   d82ba:	f100 040c 	add.w	r4, r0, #12
   d82be:	a804      	add	r0, sp, #16
   d82c0:	f7ff f9fd 	bl	d76be <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d82c4:	4620      	mov	r0, r4
   d82c6:	a904      	add	r1, sp, #16
   d82c8:	f7ff fd2b 	bl	d7d22 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d82cc:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d82ce:	a805      	add	r0, sp, #20
   d82d0:	f7fc fa18 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d82d4:	b954      	cbnz	r4, d82ec <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d82d6:	2320      	movs	r3, #32
   d82d8:	9304      	str	r3, [sp, #16]
   d82da:	f8cd 8000 	str.w	r8, [sp]
   d82de:	4623      	mov	r3, r4
   d82e0:	aa04      	add	r2, sp, #16
   d82e2:	4906      	ldr	r1, [pc, #24]	; (d82fc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d82e4:	9405      	str	r4, [sp, #20]
   d82e6:	2032      	movs	r0, #50	; 0x32
   d82e8:	f7fe f9a4 	bl	d6634 <log_message>
   d82ec:	a803      	add	r0, sp, #12
   d82ee:	f7fc fa09 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d82f2:	3501      	adds	r5, #1
   d82f4:	e7c8      	b.n	d8288 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d82f6:	b00c      	add	sp, #48	; 0x30
   d82f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82fc:	000dc080 	.word	0x000dc080
   d8300:	000dc1a9 	.word	0x000dc1a9

000d8304 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8304:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8306:	4c06      	ldr	r4, [pc, #24]	; (d8320 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8308:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d830a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d830c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d830e:	f7fe f891 	bl	d6434 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8312:	4620      	mov	r0, r4
   d8314:	4a03      	ldr	r2, [pc, #12]	; (d8324 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8316:	4904      	ldr	r1, [pc, #16]	; (d8328 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d831c:	f002 bc47 	b.w	dabae <__aeabi_atexit>
   d8320:	2003e3d4 	.word	0x2003e3d4
   d8324:	2003d8c0 	.word	0x2003d8c0
   d8328:	000d6b15 	.word	0x000d6b15

000d832c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d832c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d832e:	4606      	mov	r6, r0
   d8330:	460d      	mov	r5, r1
   d8332:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8334:	2400      	movs	r4, #0
  while (size--) {
   d8336:	42bd      	cmp	r5, r7
   d8338:	d00c      	beq.n	d8354 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d833a:	6833      	ldr	r3, [r6, #0]
   d833c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8340:	689b      	ldr	r3, [r3, #8]
   d8342:	4630      	mov	r0, r6
   d8344:	4798      	blx	r3
     if (chunk>=0)
   d8346:	2800      	cmp	r0, #0
   d8348:	db01      	blt.n	d834e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d834a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d834c:	e7f3      	b.n	d8336 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d834e:	2c00      	cmp	r4, #0
   d8350:	bf08      	it	eq
   d8352:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8354:	4620      	mov	r0, r4
   d8356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8358 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8358:	b570      	push	{r4, r5, r6, lr}
   d835a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d835c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d835e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d8360:	b149      	cbz	r1, d8376 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d8362:	f002 fe4a 	bl	daffa <strlen>
   d8366:	682b      	ldr	r3, [r5, #0]
   d8368:	4602      	mov	r2, r0
   d836a:	4621      	mov	r1, r4
   d836c:	4628      	mov	r0, r5
   d836e:	68db      	ldr	r3, [r3, #12]
    }
   d8370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8374:	4718      	bx	r3
    }
   d8376:	bd70      	pop	{r4, r5, r6, pc}

000d8378 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8378:	6803      	ldr	r3, [r0, #0]
   d837a:	689b      	ldr	r3, [r3, #8]
   d837c:	4718      	bx	r3

000d837e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d837e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8380:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8382:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8384:	f7ff fff8 	bl	d8378 <_ZN5Print5printEc>
  n += print('\n');
   d8388:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d838a:	4604      	mov	r4, r0
  n += print('\n');
   d838c:	4628      	mov	r0, r5
   d838e:	f7ff fff3 	bl	d8378 <_ZN5Print5printEc>
  return n;
}
   d8392:	4420      	add	r0, r4
   d8394:	bd38      	pop	{r3, r4, r5, pc}

000d8396 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8396:	b530      	push	{r4, r5, lr}
   d8398:	b08b      	sub	sp, #44	; 0x2c
   d839a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d839c:	2100      	movs	r1, #0
   d839e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d83a2:	2a01      	cmp	r2, #1
   d83a4:	bf98      	it	ls
   d83a6:	220a      	movls	r2, #10
   d83a8:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d83ac:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d83b0:	fb05 3312 	mls	r3, r5, r2, r3
   d83b4:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d83b8:	2b09      	cmp	r3, #9
   d83ba:	bf94      	ite	ls
   d83bc:	3330      	addls	r3, #48	; 0x30
   d83be:	3337      	addhi	r3, #55	; 0x37
   d83c0:	b2db      	uxtb	r3, r3
   d83c2:	4621      	mov	r1, r4
   d83c4:	f804 3901 	strb.w	r3, [r4], #-1
   d83c8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d83ca:	2d00      	cmp	r5, #0
   d83cc:	d1ee      	bne.n	d83ac <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d83ce:	f7ff ffc3 	bl	d8358 <_ZN5Print5writeEPKc>
}
   d83d2:	b00b      	add	sp, #44	; 0x2c
   d83d4:	bd30      	pop	{r4, r5, pc}

000d83d6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d83d6:	b40c      	push	{r2, r3}
   d83d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d83dc:	b087      	sub	sp, #28
   d83de:	af00      	add	r7, sp, #0
   d83e0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d83e4:	4605      	mov	r5, r0
   d83e6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d83ea:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d83ec:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d83ee:	4623      	mov	r3, r4
   d83f0:	464a      	mov	r2, r9
   d83f2:	2114      	movs	r1, #20
   d83f4:	1d38      	adds	r0, r7, #4
   d83f6:	f7fe fa19 	bl	d682c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d83fa:	2813      	cmp	r0, #19
   d83fc:	d805      	bhi.n	d840a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d83fe:	1d39      	adds	r1, r7, #4
   d8400:	4628      	mov	r0, r5
   d8402:	f7ff ffa9 	bl	d8358 <_ZN5Print5writeEPKc>
   d8406:	4604      	mov	r4, r0
   d8408:	e013      	b.n	d8432 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d840a:	f100 0308 	add.w	r3, r0, #8
   d840e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d8412:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8414:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8418:	1c41      	adds	r1, r0, #1
   d841a:	4623      	mov	r3, r4
   d841c:	464a      	mov	r2, r9
   d841e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d8420:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d8422:	f7fe fa03 	bl	d682c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8426:	4669      	mov	r1, sp
   d8428:	4628      	mov	r0, r5
   d842a:	f7ff ff95 	bl	d8358 <_ZN5Print5writeEPKc>
   d842e:	4604      	mov	r4, r0
   d8430:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8432:	b11e      	cbz	r6, d843c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8434:	4628      	mov	r0, r5
   d8436:	f7ff ffa2 	bl	d837e <_ZN5Print7printlnEv>
   d843a:	4404      	add	r4, r0
    return n;
}
   d843c:	4620      	mov	r0, r4
   d843e:	371c      	adds	r7, #28
   d8440:	46bd      	mov	sp, r7
   d8442:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8446:	b002      	add	sp, #8
   d8448:	4770      	bx	lr

000d844a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d844a:	6880      	ldr	r0, [r0, #8]
   d844c:	6803      	ldr	r3, [r0, #0]
   d844e:	68db      	ldr	r3, [r3, #12]
   d8450:	4718      	bx	r3

000d8452 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d8452:	4770      	bx	lr

000d8454 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8454:	b119      	cbz	r1, d845e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8456:	680b      	ldr	r3, [r1, #0]
   d8458:	4608      	mov	r0, r1
   d845a:	685b      	ldr	r3, [r3, #4]
   d845c:	4718      	bx	r3
   d845e:	4770      	bx	lr

000d8460 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d8460:	b119      	cbz	r1, d846a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d8462:	680b      	ldr	r3, [r1, #0]
   d8464:	4608      	mov	r0, r1
   d8466:	685b      	ldr	r3, [r3, #4]
   d8468:	4718      	bx	r3
   d846a:	4770      	bx	lr

000d846c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d846c:	4770      	bx	lr

000d846e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d846e:	4770      	bx	lr

000d8470 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d8470:	4770      	bx	lr

000d8472 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d8472:	b538      	push	{r3, r4, r5, lr}
   d8474:	4604      	mov	r4, r0
   d8476:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8478:	6800      	ldr	r0, [r0, #0]
   d847a:	212e      	movs	r1, #46	; 0x2e
   d847c:	f002 fd86 	bl	daf8c <strchrnul>
    size = s - category;
   d8480:	6823      	ldr	r3, [r4, #0]
   d8482:	1ac3      	subs	r3, r0, r3
   d8484:	602b      	str	r3, [r5, #0]
    if (size) {
   d8486:	b123      	cbz	r3, d8492 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8488:	7803      	ldrb	r3, [r0, #0]
   d848a:	b103      	cbz	r3, d848e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d848c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d848e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8490:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d8492:	4618      	mov	r0, r3
}
   d8494:	bd38      	pop	{r3, r4, r5, pc}

000d8496 <_ZN5spark16JSONStreamWriterD0Ev>:
   d8496:	b510      	push	{r4, lr}
   d8498:	210c      	movs	r1, #12
   d849a:	4604      	mov	r4, r0
   d849c:	f002 fb94 	bl	dabc8 <_ZdlPvj>
   d84a0:	4620      	mov	r0, r4
   d84a2:	bd10      	pop	{r4, pc}

000d84a4 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d84a4:	b510      	push	{r4, lr}
   d84a6:	2104      	movs	r1, #4
   d84a8:	4604      	mov	r4, r0
   d84aa:	f002 fb8d 	bl	dabc8 <_ZdlPvj>
   d84ae:	4620      	mov	r0, r4
   d84b0:	bd10      	pop	{r4, pc}

000d84b2 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d84b2:	b510      	push	{r4, lr}
   d84b4:	2104      	movs	r1, #4
   d84b6:	4604      	mov	r4, r0
   d84b8:	f002 fb86 	bl	dabc8 <_ZdlPvj>
   d84bc:	4620      	mov	r0, r4
   d84be:	bd10      	pop	{r4, pc}

000d84c0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d84c0:	b538      	push	{r3, r4, r5, lr}
   d84c2:	460c      	mov	r4, r1
   d84c4:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d84c6:	f001 fc83 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d84ca:	4284      	cmp	r4, r0
   d84cc:	d00d      	beq.n	d84ea <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d84ce:	f001 fd07 	bl	d9ee0 <_Z22__fetch_global_Serial1v>
   d84d2:	4284      	cmp	r4, r0
   d84d4:	d105      	bne.n	d84e2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d84d6:	f001 fd03 	bl	d9ee0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d84da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d84de:	f001 bcfc 	b.w	d9eda <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d84e2:	4621      	mov	r1, r4
   d84e4:	4628      	mov	r0, r5
   d84e6:	f7ff ffbb 	bl	d8460 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d84ea:	bd38      	pop	{r3, r4, r5, pc}

000d84ec <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d84ec:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d84ee:	f002 fd57 	bl	dafa0 <strcmp>
}
   d84f2:	fab0 f080 	clz	r0, r0
   d84f6:	0940      	lsrs	r0, r0, #5
   d84f8:	bd08      	pop	{r3, pc}

000d84fa <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d84fa:	b538      	push	{r3, r4, r5, lr}
   d84fc:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d84fe:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d8500:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d8502:	f002 fd7a 	bl	daffa <strlen>
   d8506:	4621      	mov	r1, r4
   d8508:	4602      	mov	r2, r0
   d850a:	4628      	mov	r0, r5
}
   d850c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d8510:	f002 baeb 	b.w	daaea <_ZN5spark10JSONWriter5valueEPKcj>

000d8514 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d8514:	6800      	ldr	r0, [r0, #0]
   d8516:	f7fd bf9d 	b.w	d6454 <os_mutex_recursive_lock>

000d851a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d851a:	b570      	push	{r4, r5, r6, lr}
   d851c:	4604      	mov	r4, r0
    write(str, strlen(str));
   d851e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d8520:	460d      	mov	r5, r1
    write(str, strlen(str));
   d8522:	f002 fd6a 	bl	daffa <strlen>
   d8526:	6823      	ldr	r3, [r4, #0]
   d8528:	4602      	mov	r2, r0
   d852a:	4629      	mov	r1, r5
   d852c:	4620      	mov	r0, r4
   d852e:	68db      	ldr	r3, [r3, #12]
}
   d8530:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d8534:	4718      	bx	r3

000d8536 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d8536:	b513      	push	{r0, r1, r4, lr}
   d8538:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d853a:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d853c:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d8540:	68d4      	ldr	r4, [r2, #12]
   d8542:	4619      	mov	r1, r3
   d8544:	2201      	movs	r2, #1
   d8546:	47a0      	blx	r4
}
   d8548:	b002      	add	sp, #8
   d854a:	bd10      	pop	{r4, pc}

000d854c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d854c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8550:	6845      	ldr	r5, [r0, #4]
   d8552:	6807      	ldr	r7, [r0, #0]
   d8554:	b085      	sub	sp, #20
   d8556:	4691      	mov	r9, r2
   d8558:	2214      	movs	r2, #20
   d855a:	4355      	muls	r5, r2
   d855c:	9301      	str	r3, [sp, #4]
   d855e:	10ab      	asrs	r3, r5, #2
   d8560:	4d19      	ldr	r5, [pc, #100]	; (d85c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d8562:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8564:	435d      	muls	r5, r3
   d8566:	468b      	mov	fp, r1
   d8568:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d856a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d856c:	2d00      	cmp	r5, #0
   d856e:	9303      	str	r3, [sp, #12]
   d8570:	dd23      	ble.n	d85ba <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d8572:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d8574:	106e      	asrs	r6, r5, #1
   d8576:	fb03 f006 	mul.w	r0, r3, r6
   d857a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d857e:	464a      	mov	r2, r9
   d8580:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d8584:	5820      	ldr	r0, [r4, r0]
   d8586:	45d1      	cmp	r9, sl
   d8588:	bf28      	it	cs
   d858a:	4652      	movcs	r2, sl
   d858c:	4659      	mov	r1, fp
   d858e:	f002 fd3c 	bl	db00a <strncmp>
                if (cmp == 0) {
   d8592:	9b03      	ldr	r3, [sp, #12]
   d8594:	b948      	cbnz	r0, d85aa <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d8596:	45d1      	cmp	r9, sl
   d8598:	d103      	bne.n	d85a2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d859a:	9a01      	ldr	r2, [sp, #4]
   d859c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d859e:	4635      	mov	r5, r6
   d85a0:	e7e4      	b.n	d856c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d85a2:	bf8c      	ite	hi
   d85a4:	2001      	movhi	r0, #1
   d85a6:	2000      	movls	r0, #0
   d85a8:	e000      	b.n	d85ac <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d85aa:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d85ac:	2800      	cmp	r0, #0
   d85ae:	d0f6      	beq.n	d859e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d85b0:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d85b2:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d85b6:	3e01      	subs	r6, #1
   d85b8:	e7f1      	b.n	d859e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d85ba:	1be4      	subs	r4, r4, r7
}
   d85bc:	4802      	ldr	r0, [pc, #8]	; (d85c8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d85be:	10a4      	asrs	r4, r4, #2
}
   d85c0:	4360      	muls	r0, r4
   d85c2:	b005      	add	sp, #20
   d85c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d85c8:	cccccccd 	.word	0xcccccccd

000d85cc <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d85cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d85ce:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d85d0:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d85d2:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d85d4:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d85d6:	b313      	cbz	r3, d861e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d85d8:	b309      	cbz	r1, d861e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d85da:	af04      	add	r7, sp, #16
   d85dc:	2300      	movs	r3, #0
   d85de:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d85e2:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d85e6:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d85e8:	4639      	mov	r1, r7
   d85ea:	a801      	add	r0, sp, #4
   d85ec:	f7ff ff41 	bl	d8472 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d85f0:	4601      	mov	r1, r0
   d85f2:	b1a0      	cbz	r0, d861e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d85f4:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d85f6:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d85f8:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d85fc:	4620      	mov	r0, r4
   d85fe:	f7ff ffa5 	bl	d854c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d8602:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8606:	b153      	cbz	r3, d861e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d8608:	6823      	ldr	r3, [r4, #0]
   d860a:	2414      	movs	r4, #20
   d860c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d8610:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d8612:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d8616:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8618:	bfa8      	it	ge
   d861a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d861c:	e7e4      	b.n	d85e8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d861e:	4630      	mov	r0, r6
   d8620:	b005      	add	sp, #20
   d8622:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8624 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8624:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8626:	4c09      	ldr	r4, [pc, #36]	; (d864c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8628:	6823      	ldr	r3, [r4, #0]
   d862a:	07db      	lsls	r3, r3, #31
   d862c:	d40b      	bmi.n	d8646 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d862e:	4620      	mov	r0, r4
   d8630:	f7fb fd44 	bl	d40bc <__cxa_guard_acquire>
   d8634:	b138      	cbz	r0, d8646 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8636:	4620      	mov	r0, r4
   d8638:	f7fb fd45 	bl	d40c6 <__cxa_guard_release>
   d863c:	4a04      	ldr	r2, [pc, #16]	; (d8650 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d863e:	4905      	ldr	r1, [pc, #20]	; (d8654 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d8640:	4805      	ldr	r0, [pc, #20]	; (d8658 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d8642:	f002 fab4 	bl	dabae <__aeabi_atexit>
    return &factory;
}
   d8646:	4804      	ldr	r0, [pc, #16]	; (d8658 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d8648:	bd10      	pop	{r4, pc}
   d864a:	bf00      	nop
   d864c:	2003e3d8 	.word	0x2003e3d8
   d8650:	2003d8c0 	.word	0x2003d8c0
   d8654:	000d846f 	.word	0x000d846f
   d8658:	2003d850 	.word	0x2003d850

000d865c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d865c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d865e:	4c09      	ldr	r4, [pc, #36]	; (d8684 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d8660:	6823      	ldr	r3, [r4, #0]
   d8662:	07db      	lsls	r3, r3, #31
   d8664:	d40b      	bmi.n	d867e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8666:	4620      	mov	r0, r4
   d8668:	f7fb fd28 	bl	d40bc <__cxa_guard_acquire>
   d866c:	b138      	cbz	r0, d867e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d866e:	4620      	mov	r0, r4
   d8670:	f7fb fd29 	bl	d40c6 <__cxa_guard_release>
   d8674:	4a04      	ldr	r2, [pc, #16]	; (d8688 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8676:	4905      	ldr	r1, [pc, #20]	; (d868c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8678:	4805      	ldr	r0, [pc, #20]	; (d8690 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d867a:	f002 fa98 	bl	dabae <__aeabi_atexit>
    return &factory;
}
   d867e:	4804      	ldr	r0, [pc, #16]	; (d8690 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d8680:	bd10      	pop	{r4, pc}
   d8682:	bf00      	nop
   d8684:	2003e408 	.word	0x2003e408
   d8688:	2003d8c0 	.word	0x2003d8c0
   d868c:	000d846d 	.word	0x000d846d
   d8690:	2003d84c 	.word	0x2003d84c

000d8694 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8694:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8696:	2500      	movs	r5, #0
   d8698:	4604      	mov	r4, r0
   d869a:	6005      	str	r5, [r0, #0]
   d869c:	6045      	str	r5, [r0, #4]
   d869e:	6085      	str	r5, [r0, #8]
   d86a0:	6105      	str	r5, [r0, #16]
   d86a2:	6145      	str	r5, [r0, #20]
   d86a4:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d86a6:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d86aa:	f7fd fec3 	bl	d6434 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d86ae:	f7ff ffb9 	bl	d8624 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d86b2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d86b4:	f7ff ffd2 	bl	d865c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d86b8:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d86ba:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d86bc:	4620      	mov	r0, r4
   d86be:	bd38      	pop	{r3, r4, r5, pc}

000d86c0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d86c0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d86c2:	4c0a      	ldr	r4, [pc, #40]	; (d86ec <_ZN5spark10LogManager8instanceEv+0x2c>)
   d86c4:	6823      	ldr	r3, [r4, #0]
   d86c6:	07db      	lsls	r3, r3, #31
   d86c8:	d40e      	bmi.n	d86e8 <_ZN5spark10LogManager8instanceEv+0x28>
   d86ca:	4620      	mov	r0, r4
   d86cc:	f7fb fcf6 	bl	d40bc <__cxa_guard_acquire>
   d86d0:	b150      	cbz	r0, d86e8 <_ZN5spark10LogManager8instanceEv+0x28>
   d86d2:	4807      	ldr	r0, [pc, #28]	; (d86f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d86d4:	f7ff ffde 	bl	d8694 <_ZN5spark10LogManagerC1Ev>
   d86d8:	4620      	mov	r0, r4
   d86da:	f7fb fcf4 	bl	d40c6 <__cxa_guard_release>
   d86de:	4a05      	ldr	r2, [pc, #20]	; (d86f4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d86e0:	4905      	ldr	r1, [pc, #20]	; (d86f8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d86e2:	4803      	ldr	r0, [pc, #12]	; (d86f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d86e4:	f002 fa63 	bl	dabae <__aeabi_atexit>
    return &mgr;
}
   d86e8:	4801      	ldr	r0, [pc, #4]	; (d86f0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d86ea:	bd10      	pop	{r4, pc}
   d86ec:	2003e3dc 	.word	0x2003e3dc
   d86f0:	2003e3e0 	.word	0x2003e3e0
   d86f4:	2003d8c0 	.word	0x2003d8c0
   d86f8:	000d8b2b 	.word	0x000d8b2b

000d86fc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d86fc:	2300      	movs	r3, #0
   d86fe:	4a02      	ldr	r2, [pc, #8]	; (d8708 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d8700:	4902      	ldr	r1, [pc, #8]	; (d870c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d8702:	4803      	ldr	r0, [pc, #12]	; (d8710 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8704:	f7fd bfae 	b.w	d6664 <log_set_callbacks>
   d8708:	000d8a0d 	.word	0x000d8a0d
   d870c:	000d899d 	.word	0x000d899d
   d8710:	000d8925 	.word	0x000d8925

000d8714 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8714:	2300      	movs	r3, #0
   d8716:	461a      	mov	r2, r3
   d8718:	4619      	mov	r1, r3
   d871a:	4618      	mov	r0, r3
   d871c:	f7fd bfa2 	b.w	d6664 <log_set_callbacks>

000d8720 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d8720:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8722:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d8724:	688e      	ldr	r6, [r1, #8]
   d8726:	f851 3b04 	ldr.w	r3, [r1], #4
   d872a:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d872e:	4605      	mov	r5, r0
   d8730:	a801      	add	r0, sp, #4
   d8732:	f7fe ffaf 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d8736:	4622      	mov	r2, r4
   d8738:	4631      	mov	r1, r6
   d873a:	4628      	mov	r0, r5
   d873c:	f002 fa0c 	bl	dab58 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8740:	a801      	add	r0, sp, #4
   d8742:	f7fb ffdf 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8746:	4628      	mov	r0, r5
   d8748:	b002      	add	sp, #8
   d874a:	bd70      	pop	{r4, r5, r6, pc}

000d874c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d874c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d874e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d8750:	690e      	ldr	r6, [r1, #16]
   d8752:	f851 3b04 	ldr.w	r3, [r1], #4
   d8756:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d875a:	4605      	mov	r5, r0
   d875c:	a801      	add	r0, sp, #4
   d875e:	f7fe ff99 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d8762:	4622      	mov	r2, r4
   d8764:	4631      	mov	r1, r6
   d8766:	4628      	mov	r0, r5
   d8768:	f002 fa11 	bl	dab8e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d876c:	a801      	add	r0, sp, #4
   d876e:	f7fb ffc9 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8772:	4628      	mov	r0, r5
   d8774:	b002      	add	sp, #8
   d8776:	bd70      	pop	{r4, r5, r6, pc}

000d8778 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8778:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d877a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d877c:	68ce      	ldr	r6, [r1, #12]
   d877e:	f851 3b04 	ldr.w	r3, [r1], #4
   d8782:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8786:	4605      	mov	r5, r0
   d8788:	a801      	add	r0, sp, #4
   d878a:	f7fe ff83 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d878e:	4622      	mov	r2, r4
   d8790:	4631      	mov	r1, r6
   d8792:	4628      	mov	r0, r5
   d8794:	f002 f9b8 	bl	dab08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8798:	a801      	add	r0, sp, #4
   d879a:	f7fb ffb3 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d879e:	4628      	mov	r0, r5
   d87a0:	b002      	add	sp, #8
   d87a2:	bd70      	pop	{r4, r5, r6, pc}

000d87a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d87a4:	b530      	push	{r4, r5, lr}
   d87a6:	b08b      	sub	sp, #44	; 0x2c
   d87a8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d87aa:	4601      	mov	r1, r0
   d87ac:	a804      	add	r0, sp, #16
   d87ae:	f7ff ffb7 	bl	d8720 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d87b2:	a804      	add	r0, sp, #16
   d87b4:	f002 f8db 	bl	da96e <_ZN5spark18JSONObjectIterator4nextEv>
   d87b8:	b1e8      	cbz	r0, d87f6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d87ba:	a904      	add	r1, sp, #16
   d87bc:	4668      	mov	r0, sp
   d87be:	f7ff ffdb 	bl	d8778 <_ZNK5spark18JSONObjectIterator4nameEv>
   d87c2:	490f      	ldr	r1, [pc, #60]	; (d8800 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d87c4:	9802      	ldr	r0, [sp, #8]
   d87c6:	f7ff fe91 	bl	d84ec <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d87ca:	4604      	mov	r4, r0
   d87cc:	b110      	cbz	r0, d87d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d87ce:	1c2c      	adds	r4, r5, #0
   d87d0:	bf18      	it	ne
   d87d2:	2401      	movne	r4, #1
   d87d4:	a801      	add	r0, sp, #4
   d87d6:	f7fb ff95 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d87da:	2c00      	cmp	r4, #0
   d87dc:	d0e9      	beq.n	d87b2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d87de:	a904      	add	r1, sp, #16
   d87e0:	4668      	mov	r0, sp
   d87e2:	f7ff ffb3 	bl	d874c <_ZNK5spark18JSONObjectIterator5valueEv>
   d87e6:	4668      	mov	r0, sp
   d87e8:	f002 f8a1 	bl	da92e <_ZNK5spark9JSONValue5toIntEv>
   d87ec:	6028      	str	r0, [r5, #0]
   d87ee:	a801      	add	r0, sp, #4
   d87f0:	f7fb ff88 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d87f4:	e7dd      	b.n	d87b2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d87f6:	a805      	add	r0, sp, #20
   d87f8:	f7fb ff84 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d87fc:	b00b      	add	sp, #44	; 0x2c
   d87fe:	bd30      	pop	{r4, r5, pc}
   d8800:	000dc260 	.word	0x000dc260

000d8804 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8804:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8806:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d8808:	4620      	mov	r0, r4
   d880a:	4913      	ldr	r1, [pc, #76]	; (d8858 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d880c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d880e:	f002 fbc7 	bl	dafa0 <strcmp>
   d8812:	b940      	cbnz	r0, d8826 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d8814:	f001 fadc 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d8818:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d881c:	f001 fac8 	bl	d9db0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d8820:	f001 fad6 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d8824:	e015      	b.n	d8852 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d8826:	490d      	ldr	r1, [pc, #52]	; (d885c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d8828:	4620      	mov	r0, r4
   d882a:	f002 fbb9 	bl	dafa0 <strcmp>
   d882e:	b978      	cbnz	r0, d8850 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d8830:	a902      	add	r1, sp, #8
   d8832:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d8836:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d883a:	4628      	mov	r0, r5
   d883c:	f7ff ffb2 	bl	d87a4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d8840:	f001 fb4e 	bl	d9ee0 <_Z22__fetch_global_Serial1v>
   d8844:	9901      	ldr	r1, [sp, #4]
   d8846:	f001 fb45 	bl	d9ed4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d884a:	f001 fb49 	bl	d9ee0 <_Z22__fetch_global_Serial1v>
   d884e:	e000      	b.n	d8852 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d8850:	2000      	movs	r0, #0
}
   d8852:	b003      	add	sp, #12
   d8854:	bd30      	pop	{r4, r5, pc}
   d8856:	bf00      	nop
   d8858:	000dc265 	.word	0x000dc265
   d885c:	000dc26c 	.word	0x000dc26c

000d8860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8860:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8862:	6804      	ldr	r4, [r0, #0]
   d8864:	6843      	ldr	r3, [r0, #4]
   d8866:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8868:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d886a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d886e:	42a6      	cmp	r6, r4
   d8870:	d005      	beq.n	d887e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d8872:	f104 0008 	add.w	r0, r4, #8
   d8876:	f7ff fff3 	bl	d8860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d887a:	3414      	adds	r4, #20
   d887c:	e7f7      	b.n	d886e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d887e:	6828      	ldr	r0, [r5, #0]
   d8880:	f7fd ffbc 	bl	d67fc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8884:	4628      	mov	r0, r5
   d8886:	bd70      	pop	{r4, r5, r6, pc}

000d8888 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8888:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d888a:	6804      	ldr	r4, [r0, #0]
   d888c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d888e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8890:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8894:	42a6      	cmp	r6, r4
   d8896:	d004      	beq.n	d88a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8898:	4620      	mov	r0, r4
   d889a:	f7fe f84f 	bl	d693c <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d889e:	3410      	adds	r4, #16
   d88a0:	e7f8      	b.n	d8894 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d88a2:	6828      	ldr	r0, [r5, #0]
   d88a4:	f7fd ffaa 	bl	d67fc <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d88a8:	4628      	mov	r0, r5
   d88aa:	bd70      	pop	{r4, r5, r6, pc}

000d88ac <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d88ac:	b510      	push	{r4, lr}
   d88ae:	4604      	mov	r4, r0
   d88b0:	300c      	adds	r0, #12
   d88b2:	f7ff ffd5 	bl	d8860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d88b6:	4620      	mov	r0, r4
   d88b8:	f7ff ffe6 	bl	d8888 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d88bc:	4620      	mov	r0, r4
   d88be:	bd10      	pop	{r4, pc}

000d88c0 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d88c0:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d88c2:	4b04      	ldr	r3, [pc, #16]	; (d88d4 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d88c4:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d88c6:	f840 3b04 	str.w	r3, [r0], #4
   d88ca:	f7ff ffef 	bl	d88ac <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d88ce:	4620      	mov	r0, r4
   d88d0:	bd10      	pop	{r4, pc}
   d88d2:	bf00      	nop
   d88d4:	000db1c8 	.word	0x000db1c8

000d88d8 <_ZN5spark16StreamLogHandlerD0Ev>:
   d88d8:	b510      	push	{r4, lr}
   d88da:	4604      	mov	r4, r0
   d88dc:	f7ff fff0 	bl	d88c0 <_ZN5spark16StreamLogHandlerD1Ev>
   d88e0:	4620      	mov	r0, r4
   d88e2:	2124      	movs	r1, #36	; 0x24
   d88e4:	f002 f970 	bl	dabc8 <_ZdlPvj>
   d88e8:	4620      	mov	r0, r4
   d88ea:	bd10      	pop	{r4, pc}

000d88ec <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d88ec:	b510      	push	{r4, lr}
   d88ee:	4b03      	ldr	r3, [pc, #12]	; (d88fc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d88f0:	6003      	str	r3, [r0, #0]
   d88f2:	4604      	mov	r4, r0
   d88f4:	f7ff ffe4 	bl	d88c0 <_ZN5spark16StreamLogHandlerD1Ev>
   d88f8:	4620      	mov	r0, r4
   d88fa:	bd10      	pop	{r4, pc}
   d88fc:	000dc250 	.word	0x000dc250

000d8900 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d8900:	b510      	push	{r4, lr}
   d8902:	4604      	mov	r4, r0
   d8904:	f7ff fff2 	bl	d88ec <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8908:	4620      	mov	r0, r4
   d890a:	2124      	movs	r1, #36	; 0x24
   d890c:	f002 f95c 	bl	dabc8 <_ZdlPvj>
   d8910:	4620      	mov	r0, r4
   d8912:	bd10      	pop	{r4, pc}

000d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d8914:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8916:	6803      	ldr	r3, [r0, #0]
   d8918:	4604      	mov	r4, r0
   d891a:	6818      	ldr	r0, [r3, #0]
   d891c:	f7fd fda2 	bl	d6464 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8920:	4620      	mov	r0, r4
   d8922:	bd10      	pop	{r4, pc}

000d8924 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8928:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d892a:	4b1b      	ldr	r3, [pc, #108]	; (d8998 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d892c:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d892e:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8932:	b085      	sub	sp, #20
   d8934:	4682      	mov	sl, r0
   d8936:	460e      	mov	r6, r1
   d8938:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d893a:	bb53      	cbnz	r3, d8992 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d893c:	f7ff fec0 	bl	d86c0 <_ZN5spark10LogManager8instanceEv>
   d8940:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8942:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8944:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d8946:	f7ff fde5 	bl	d8514 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d894a:	7b23      	ldrb	r3, [r4, #12]
   d894c:	b9f3      	cbnz	r3, d898c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d894e:	2301      	movs	r3, #1
   d8950:	7323      	strb	r3, [r4, #12]
   d8952:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8954:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d8956:	b2f6      	uxtb	r6, r6
   d8958:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d895c:	454d      	cmp	r5, r9
   d895e:	d013      	beq.n	d8988 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d8960:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d8964:	4641      	mov	r1, r8
   d8966:	1d38      	adds	r0, r7, #4
   d8968:	f7ff fe30 	bl	d85cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d896c:	4286      	cmp	r6, r0
   d896e:	d3f5      	bcc.n	d895c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d8970:	683b      	ldr	r3, [r7, #0]
   d8972:	f8cd b000 	str.w	fp, [sp]
   d8976:	689b      	ldr	r3, [r3, #8]
   d8978:	469e      	mov	lr, r3
   d897a:	4638      	mov	r0, r7
   d897c:	4643      	mov	r3, r8
   d897e:	4632      	mov	r2, r6
   d8980:	4651      	mov	r1, sl
   d8982:	4677      	mov	r7, lr
   d8984:	47b8      	blx	r7
   d8986:	e7e9      	b.n	d895c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8988:	2300      	movs	r3, #0
   d898a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d898c:	a803      	add	r0, sp, #12
   d898e:	f7ff ffc1 	bl	d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d8992:	b005      	add	sp, #20
   d8994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8998:	e000ed00 	.word	0xe000ed00

000d899c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d899c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d89a0:	4699      	mov	r9, r3
   d89a2:	4b19      	ldr	r3, [pc, #100]	; (d8a08 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d89a4:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d89a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d89aa:	4607      	mov	r7, r0
   d89ac:	4688      	mov	r8, r1
   d89ae:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d89b0:	bb33      	cbnz	r3, d8a00 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d89b2:	f7ff fe85 	bl	d86c0 <_ZN5spark10LogManager8instanceEv>
   d89b6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d89b8:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d89ba:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d89bc:	f7ff fdaa 	bl	d8514 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d89c0:	7b23      	ldrb	r3, [r4, #12]
   d89c2:	b9d3      	cbnz	r3, d89fa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d89c4:	2301      	movs	r3, #1
   d89c6:	7323      	strb	r3, [r4, #12]
   d89c8:	6825      	ldr	r5, [r4, #0]
   d89ca:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d89cc:	fa5f fb86 	uxtb.w	fp, r6
   d89d0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d89d4:	4555      	cmp	r5, sl
   d89d6:	d00e      	beq.n	d89f6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d89d8:	f855 6b04 	ldr.w	r6, [r5], #4
   d89dc:	4649      	mov	r1, r9
   d89de:	1d30      	adds	r0, r6, #4
   d89e0:	f7ff fdf4 	bl	d85cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d89e4:	4583      	cmp	fp, r0
   d89e6:	d3f5      	bcc.n	d89d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d89e8:	6833      	ldr	r3, [r6, #0]
   d89ea:	4642      	mov	r2, r8
   d89ec:	68db      	ldr	r3, [r3, #12]
   d89ee:	4639      	mov	r1, r7
   d89f0:	4630      	mov	r0, r6
   d89f2:	4798      	blx	r3
   d89f4:	e7ee      	b.n	d89d4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d89f6:	2300      	movs	r3, #0
   d89f8:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d89fa:	a801      	add	r0, sp, #4
   d89fc:	f7ff ff8a 	bl	d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d8a00:	b003      	add	sp, #12
   d8a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a06:	bf00      	nop
   d8a08:	e000ed00 	.word	0xe000ed00

000d8a0c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8a0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8a10:	4b15      	ldr	r3, [pc, #84]	; (d8a68 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d8a12:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8a14:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8a18:	4604      	mov	r4, r0
   d8a1a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8a1c:	b9fb      	cbnz	r3, d8a5e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d8a1e:	f7ff fe4f 	bl	d86c0 <_ZN5spark10LogManager8instanceEv>
   d8a22:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d8a24:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8a26:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8a28:	f7ff fd74 	bl	d8514 <_ZN14RecursiveMutex4lockEv>
   d8a2c:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d8a30:	2646      	movs	r6, #70	; 0x46
   d8a32:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8a36:	42af      	cmp	r7, r5
   d8a38:	d107      	bne.n	d8a4a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d8a3a:	a801      	add	r0, sp, #4
   d8a3c:	f7ff ff6a 	bl	d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d8a40:	42b4      	cmp	r4, r6
   d8a42:	bfb4      	ite	lt
   d8a44:	2000      	movlt	r0, #0
   d8a46:	2001      	movge	r0, #1
   d8a48:	e00a      	b.n	d8a60 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d8a4a:	f855 0b04 	ldr.w	r0, [r5], #4
   d8a4e:	4641      	mov	r1, r8
   d8a50:	3004      	adds	r0, #4
   d8a52:	f7ff fdbb 	bl	d85cc <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8a56:	4286      	cmp	r6, r0
   d8a58:	bfa8      	it	ge
   d8a5a:	4606      	movge	r6, r0
   d8a5c:	e7eb      	b.n	d8a36 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d8a5e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d8a60:	b002      	add	sp, #8
   d8a62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8a66:	bf00      	nop
   d8a68:	e000ed00 	.word	0xe000ed00

000d8a6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8a6c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d8a6e:	6803      	ldr	r3, [r0, #0]
   d8a70:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8a72:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d8a74:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8a78:	429a      	cmp	r2, r3
   d8a7a:	4618      	mov	r0, r3
   d8a7c:	d00e      	beq.n	d8a9c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d8a7e:	6806      	ldr	r6, [r0, #0]
   d8a80:	680d      	ldr	r5, [r1, #0]
   d8a82:	42ae      	cmp	r6, r5
   d8a84:	f103 0304 	add.w	r3, r3, #4
   d8a88:	d1f6      	bne.n	d8a78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d8a8a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8a8c:	1a52      	subs	r2, r2, r1
   d8a8e:	f002 fa23 	bl	daed8 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d8a92:	6863      	ldr	r3, [r4, #4]
   d8a94:	3b01      	subs	r3, #1
   d8a96:	6063      	str	r3, [r4, #4]
    return true;
   d8a98:	2001      	movs	r0, #1
}
   d8a9a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d8a9c:	2000      	movs	r0, #0
   d8a9e:	bd70      	pop	{r4, r5, r6, pc}

000d8aa0 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d8aa0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8aa2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d8aa4:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d8aa6:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8aa8:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d8aaa:	f7ff fd33 	bl	d8514 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d8aae:	a901      	add	r1, sp, #4
   d8ab0:	4620      	mov	r0, r4
   d8ab2:	f7ff ffdb 	bl	d8a6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d8ab6:	b920      	cbnz	r0, d8ac2 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d8ab8:	a803      	add	r0, sp, #12
   d8aba:	f7ff ff2b 	bl	d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d8abe:	b004      	add	sp, #16
   d8ac0:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d8ac2:	6863      	ldr	r3, [r4, #4]
   d8ac4:	2b00      	cmp	r3, #0
   d8ac6:	d1f7      	bne.n	d8ab8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d8ac8:	f7ff fe24 	bl	d8714 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d8acc:	e7f4      	b.n	d8ab8 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d8ace <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d8ace:	b570      	push	{r4, r5, r6, lr}
   d8ad0:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8ad2:	6943      	ldr	r3, [r0, #20]
   d8ad4:	2618      	movs	r6, #24
   d8ad6:	4604      	mov	r4, r0
   d8ad8:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d8adc:	42ae      	cmp	r6, r5
   d8ade:	d015      	beq.n	d8b0c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d8ae0:	f105 0110 	add.w	r1, r5, #16
   d8ae4:	4620      	mov	r0, r4
   d8ae6:	f7ff ffc1 	bl	d8a6c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d8aea:	6863      	ldr	r3, [r4, #4]
   d8aec:	b90b      	cbnz	r3, d8af2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d8aee:	f7ff fe11 	bl	d8714 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d8af2:	69e0      	ldr	r0, [r4, #28]
   d8af4:	6929      	ldr	r1, [r5, #16]
   d8af6:	6803      	ldr	r3, [r0, #0]
   d8af8:	68db      	ldr	r3, [r3, #12]
   d8afa:	4798      	blx	r3
        if (h.stream) {
   d8afc:	6969      	ldr	r1, [r5, #20]
   d8afe:	b119      	cbz	r1, d8b08 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d8b00:	6a20      	ldr	r0, [r4, #32]
   d8b02:	6803      	ldr	r3, [r0, #0]
   d8b04:	68db      	ldr	r3, [r3, #12]
   d8b06:	4798      	blx	r3
   d8b08:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d8b0a:	e7e7      	b.n	d8adc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8b0c:	6925      	ldr	r5, [r4, #16]
   d8b0e:	6963      	ldr	r3, [r4, #20]
   d8b10:	2618      	movs	r6, #24
   d8b12:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8b16:	42b5      	cmp	r5, r6
   d8b18:	d004      	beq.n	d8b24 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d8b1a:	4628      	mov	r0, r5
   d8b1c:	f7fd ff0e 	bl	d693c <_ZN6StringD1Ev>
   d8b20:	3518      	adds	r5, #24
   d8b22:	e7f8      	b.n	d8b16 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8b24:	2300      	movs	r3, #0
   d8b26:	6163      	str	r3, [r4, #20]
   d8b28:	bd70      	pop	{r4, r5, r6, pc}

000d8b2a <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d8b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8b2c:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8b2e:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d8b30:	f7ff fdf0 	bl	d8714 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d8b34:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8b38:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d8b3c:	f7ff fcea 	bl	d8514 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d8b40:	4620      	mov	r0, r4
   d8b42:	f7ff ffc4 	bl	d8ace <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d8b46:	4628      	mov	r0, r5
   d8b48:	f7ff fee4 	bl	d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8b4c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d8b4e:	b108      	cbz	r0, d8b54 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d8b50:	f7fd fc78 	bl	d6444 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d8b54:	6925      	ldr	r5, [r4, #16]
   d8b56:	6963      	ldr	r3, [r4, #20]
   d8b58:	2618      	movs	r6, #24
   d8b5a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8b5e:	42b5      	cmp	r5, r6
   d8b60:	d004      	beq.n	d8b6c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d8b62:	4628      	mov	r0, r5
   d8b64:	f7fd feea 	bl	d693c <_ZN6StringD1Ev>
   d8b68:	3518      	adds	r5, #24
   d8b6a:	e7f8      	b.n	d8b5e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8b6c:	6920      	ldr	r0, [r4, #16]
   d8b6e:	f7fd fe45 	bl	d67fc <free>
   d8b72:	6820      	ldr	r0, [r4, #0]
   d8b74:	f7fd fe42 	bl	d67fc <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d8b78:	4620      	mov	r0, r4
   d8b7a:	b002      	add	sp, #8
   d8b7c:	bd70      	pop	{r4, r5, r6, pc}

000d8b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b7e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8b80:	680a      	ldr	r2, [r1, #0]
   d8b82:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b84:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b86:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8b88:	684a      	ldr	r2, [r1, #4]
   d8b8a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b8c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b8e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8b90:	688a      	ldr	r2, [r1, #8]
   d8b92:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8b94:	608b      	str	r3, [r1, #8]
   d8b96:	4770      	bx	lr

000d8b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8b98:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8b9a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8b9c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8b9e:	6003      	str	r3, [r0, #0]
   d8ba0:	6043      	str	r3, [r0, #4]
   d8ba2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8ba4:	f7ff ffeb 	bl	d8b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d8ba8:	4620      	mov	r0, r4
   d8baa:	bd10      	pop	{r4, pc}

000d8bac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8bac:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8bae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8bb0:	4604      	mov	r4, r0
   d8bb2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d8bb4:	d925      	bls.n	d8c02 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d8bb6:	4290      	cmp	r0, r2
   d8bb8:	d224      	bcs.n	d8c04 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d8bba:	1a55      	subs	r5, r2, r1
   d8bbc:	3d14      	subs	r5, #20
   d8bbe:	442c      	add	r4, r5
   d8bc0:	f1a1 0714 	sub.w	r7, r1, #20
   d8bc4:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8bc8:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8bca:	f1a5 0308 	sub.w	r3, r5, #8
   d8bce:	429f      	cmp	r7, r3
   d8bd0:	d037      	beq.n	d8c42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d8bd2:	b184      	cbz	r4, d8bf6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d8bd4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d8bd8:	6023      	str	r3, [r4, #0]
   d8bda:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d8bde:	80a3      	strh	r3, [r4, #4]
   d8be0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d8be4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8be6:	60a6      	str	r6, [r4, #8]
   d8be8:	60e6      	str	r6, [r4, #12]
   d8bea:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8bec:	4629      	mov	r1, r5
   d8bee:	f104 0008 	add.w	r0, r4, #8
   d8bf2:	f7ff ffc4 	bl	d8b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d8bf6:	4628      	mov	r0, r5
   d8bf8:	f7ff fe32 	bl	d8860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8bfc:	3c14      	subs	r4, #20
   d8bfe:	3d14      	subs	r5, #20
   d8c00:	e7e3      	b.n	d8bca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8c02:	d01e      	beq.n	d8c42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d8c04:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8c08:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8c0a:	f1a5 0308 	sub.w	r3, r5, #8
   d8c0e:	429e      	cmp	r6, r3
   d8c10:	d017      	beq.n	d8c42 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d8c12:	b184      	cbz	r4, d8c36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d8c14:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d8c18:	6023      	str	r3, [r4, #0]
   d8c1a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d8c1e:	80a3      	strh	r3, [r4, #4]
   d8c20:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d8c24:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8c26:	60a7      	str	r7, [r4, #8]
   d8c28:	60e7      	str	r7, [r4, #12]
   d8c2a:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8c2c:	4629      	mov	r1, r5
   d8c2e:	f104 0008 	add.w	r0, r4, #8
   d8c32:	f7ff ffa4 	bl	d8b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d8c36:	4628      	mov	r0, r5
   d8c38:	f7ff fe12 	bl	d8860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8c3c:	3414      	adds	r4, #20
   d8c3e:	3514      	adds	r5, #20
   d8c40:	e7e3      	b.n	d8c0a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d8c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d8c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8c46:	6845      	ldr	r5, [r0, #4]
   d8c48:	6883      	ldr	r3, [r0, #8]
   d8c4a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d8c4c:	4604      	mov	r4, r0
   d8c4e:	460e      	mov	r6, r1
   d8c50:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8c52:	db0e      	blt.n	d8c72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d8c54:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d8c56:	2d00      	cmp	r5, #0
   d8c58:	dd05      	ble.n	d8c66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d8c5a:	00a9      	lsls	r1, r5, #2
   d8c5c:	6800      	ldr	r0, [r0, #0]
   d8c5e:	f7fd fdd5 	bl	d680c <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d8c62:	b920      	cbnz	r0, d8c6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d8c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8c66:	6800      	ldr	r0, [r0, #0]
   d8c68:	f7fd fdc8 	bl	d67fc <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8c6c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d8c6e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d8c70:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8c72:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8c74:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8c76:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8c7a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d8c7e:	1a52      	subs	r2, r2, r1
   d8c80:	1d08      	adds	r0, r1, #4
   d8c82:	f002 f929 	bl	daed8 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d8c86:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d8c8a:	6863      	ldr	r3, [r4, #4]
   d8c8c:	3301      	adds	r3, #1
   d8c8e:	6063      	str	r3, [r4, #4]
   d8c90:	2001      	movs	r0, #1
    return true;
}
   d8c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8c94 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d8c94:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8c96:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d8c98:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d8c9a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8c9c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8c9e:	f7ff fc39 	bl	d8514 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d8ca2:	6823      	ldr	r3, [r4, #0]
   d8ca4:	6861      	ldr	r1, [r4, #4]
   d8ca6:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8caa:	4283      	cmp	r3, r0
   d8cac:	461a      	mov	r2, r3
   d8cae:	d009      	beq.n	d8cc4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d8cb0:	6812      	ldr	r2, [r2, #0]
   d8cb2:	42aa      	cmp	r2, r5
   d8cb4:	f103 0304 	add.w	r3, r3, #4
   d8cb8:	d1f7      	bne.n	d8caa <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d8cba:	a801      	add	r0, sp, #4
   d8cbc:	f7ff fe2a 	bl	d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d8cc0:	2500      	movs	r5, #0
   d8cc2:	e00e      	b.n	d8ce2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8cc4:	462a      	mov	r2, r5
   d8cc6:	4620      	mov	r0, r4
   d8cc8:	f7ff ffbc 	bl	d8c44 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d8ccc:	4605      	mov	r5, r0
   d8cce:	2800      	cmp	r0, #0
   d8cd0:	d0f3      	beq.n	d8cba <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d8cd2:	6863      	ldr	r3, [r4, #4]
   d8cd4:	2b01      	cmp	r3, #1
   d8cd6:	d101      	bne.n	d8cdc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d8cd8:	f7ff fd10 	bl	d86fc <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d8cdc:	a801      	add	r0, sp, #4
   d8cde:	f7ff fe19 	bl	d8914 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d8ce2:	4628      	mov	r0, r5
   d8ce4:	b003      	add	sp, #12
   d8ce6:	bd30      	pop	{r4, r5, pc}

000d8ce8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8ce8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8cea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8cec:	4606      	mov	r6, r0
   d8cee:	460c      	mov	r4, r1
   d8cf0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8cf2:	d914      	bls.n	d8d1e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d8cf4:	4290      	cmp	r0, r2
   d8cf6:	d213      	bcs.n	d8d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d8cf8:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d8cfc:	1a6c      	subs	r4, r5, r1
   d8cfe:	f1a1 0710 	sub.w	r7, r1, #16
   d8d02:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d8d04:	42af      	cmp	r7, r5
   d8d06:	d018      	beq.n	d8d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d8d08:	b11c      	cbz	r4, d8d12 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d8d0a:	4629      	mov	r1, r5
   d8d0c:	4620      	mov	r0, r4
   d8d0e:	f7fd fe05 	bl	d691c <_ZN6StringC1EOS_>
                end->~T();
   d8d12:	4628      	mov	r0, r5
   d8d14:	f7fd fe12 	bl	d693c <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8d18:	3d10      	subs	r5, #16
   d8d1a:	3c10      	subs	r4, #16
   d8d1c:	e7f2      	b.n	d8d04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8d1e:	d00c      	beq.n	d8d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d8d20:	42ac      	cmp	r4, r5
   d8d22:	d00a      	beq.n	d8d3a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d8d24:	b11e      	cbz	r6, d8d2e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d8d26:	4621      	mov	r1, r4
   d8d28:	4630      	mov	r0, r6
   d8d2a:	f7fd fdf7 	bl	d691c <_ZN6StringC1EOS_>
                p->~T();
   d8d2e:	4620      	mov	r0, r4
   d8d30:	f7fd fe04 	bl	d693c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8d34:	3410      	adds	r4, #16
   d8d36:	3610      	adds	r6, #16
   d8d38:	e7f2      	b.n	d8d20 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d8d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8d3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8d3c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d8d3e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8d40:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d8d42:	dd0b      	ble.n	d8d5c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8d44:	0130      	lsls	r0, r6, #4
   d8d46:	f7fd fd51 	bl	d67ec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8d4a:	4604      	mov	r4, r0
   d8d4c:	b170      	cbz	r0, d8d6c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d8d4e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8d52:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d8d56:	f7ff ffc7 	bl	d8ce8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d8d5a:	e000      	b.n	d8d5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8d5c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8d5e:	6828      	ldr	r0, [r5, #0]
   d8d60:	f7fd fd4c 	bl	d67fc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8d64:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d8d66:	60ae      	str	r6, [r5, #8]
        return true;
   d8d68:	2001      	movs	r0, #1
   d8d6a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d8d6c:	bd70      	pop	{r4, r5, r6, pc}

000d8d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d8d6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8d72:	2300      	movs	r3, #0
   d8d74:	b095      	sub	sp, #84	; 0x54
   d8d76:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d8d78:	2246      	movs	r2, #70	; 0x46
   d8d7a:	6003      	str	r3, [r0, #0]
   d8d7c:	6043      	str	r3, [r0, #4]
   d8d7e:	6083      	str	r3, [r0, #8]
   d8d80:	60c3      	str	r3, [r0, #12]
   d8d82:	6103      	str	r3, [r0, #16]
   d8d84:	6143      	str	r3, [r0, #20]
   d8d86:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d8d88:	9102      	str	r1, [sp, #8]
   d8d8a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d8d8e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d8d90:	4299      	cmp	r1, r3
   d8d92:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8d94:	9309      	str	r3, [sp, #36]	; 0x24
   d8d96:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d8d98:	f340 809d 	ble.w	d8ed6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d8d9c:	a808      	add	r0, sp, #32
   d8d9e:	f7ff ffcd 	bl	d8d3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d8da2:	2800      	cmp	r0, #0
   d8da4:	f040 8097 	bne.w	d8ed6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d8da8:	e08e      	b.n	d8ec8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d8daa:	4621      	mov	r1, r4
   d8dac:	a80b      	add	r0, sp, #44	; 0x2c
   d8dae:	f7fd fdb5 	bl	d691c <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8db2:	a90b      	add	r1, sp, #44	; 0x2c
   d8db4:	a80f      	add	r0, sp, #60	; 0x3c
   d8db6:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d8db8:	f7fd fdb0 	bl	d691c <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8dbc:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8dc0:	4299      	cmp	r1, r3
   d8dc2:	f2c0 80ce 	blt.w	d8f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d8dc6:	3101      	adds	r1, #1
   d8dc8:	a808      	add	r0, sp, #32
   d8dca:	f7ff ffb7 	bl	d8d3c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d8dce:	2800      	cmp	r0, #0
   d8dd0:	f040 80c7 	bne.w	d8f62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8dd4:	a80f      	add	r0, sp, #60	; 0x3c
   d8dd6:	f7fd fdb1 	bl	d693c <_ZN6StringD1Ev>
   d8dda:	a80b      	add	r0, sp, #44	; 0x2c
   d8ddc:	f7fd fdae 	bl	d693c <_ZN6StringD1Ev>
   d8de0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d8de2:	42a7      	cmp	r7, r4
   d8de4:	d1e1      	bne.n	d8daa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8de6:	2600      	movs	r6, #0
   d8de8:	960b      	str	r6, [sp, #44]	; 0x2c
   d8dea:	960c      	str	r6, [sp, #48]	; 0x30
   d8dec:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d8dee:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d8df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8df2:	429e      	cmp	r6, r3
   d8df4:	f280 80a8 	bge.w	d8f48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d8df8:	0133      	lsls	r3, r6, #4
   d8dfa:	9a08      	ldr	r2, [sp, #32]
   d8dfc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d8dfe:	9306      	str	r3, [sp, #24]
        if (!category) {
   d8e00:	2b00      	cmp	r3, #0
   d8e02:	f000 809f 	beq.w	d8f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d8e06:	2314      	movs	r3, #20
   d8e08:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d8e0a:	f8cd 901c 	str.w	r9, [sp, #28]
   d8e0e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d8e10:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d8e12:	a907      	add	r1, sp, #28
   d8e14:	a806      	add	r0, sp, #24
   d8e16:	f7ff fb2c 	bl	d8472 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8e1a:	4607      	mov	r7, r0
   d8e1c:	2800      	cmp	r0, #0
   d8e1e:	f000 8091 	beq.w	d8f44 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d8e22:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d8e24:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d8e26:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d8e2a:	9a07      	ldr	r2, [sp, #28]
   d8e2c:	4620      	mov	r0, r4
   d8e2e:	f7ff fb8d 	bl	d854c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8e32:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d8e36:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8e38:	f1b8 0f00 	cmp.w	r8, #0
   d8e3c:	d153      	bne.n	d8ee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d8e3e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d8e42:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d8e46:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8e4a:	970f      	str	r7, [sp, #60]	; 0x3c
   d8e4c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d8e50:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d8e54:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d8e58:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8e5c:	6867      	ldr	r7, [r4, #4]
   d8e5e:	68a3      	ldr	r3, [r4, #8]
   d8e60:	429f      	cmp	r7, r3
   d8e62:	da4f      	bge.n	d8f04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d8e64:	9b00      	ldr	r3, [sp, #0]
   d8e66:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d8e6a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8e6c:	2214      	movs	r2, #20
   d8e6e:	4353      	muls	r3, r2
   d8e70:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d8e74:	fb02 b201 	mla	r2, r2, r1, fp
   d8e78:	f107 0014 	add.w	r0, r7, #20
   d8e7c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8e7e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d8e80:	f7ff fe94 	bl	d8bac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d8e84:	b1a7      	cbz	r7, d8eb0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d8e86:	9b03      	ldr	r3, [sp, #12]
   d8e88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8e8a:	f84b 2003 	str.w	r2, [fp, r3]
   d8e8e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d8e92:	80bb      	strh	r3, [r7, #4]
   d8e94:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d8e98:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8e9a:	f8c7 9008 	str.w	r9, [r7, #8]
   d8e9e:	f8c7 900c 	str.w	r9, [r7, #12]
   d8ea2:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8ea6:	a911      	add	r1, sp, #68	; 0x44
   d8ea8:	f107 0008 	add.w	r0, r7, #8
   d8eac:	f7ff fe67 	bl	d8b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d8eb0:	6863      	ldr	r3, [r4, #4]
   d8eb2:	3301      	adds	r3, #1
   d8eb4:	6063      	str	r3, [r4, #4]
   d8eb6:	a811      	add	r0, sp, #68	; 0x44
   d8eb8:	f7ff fcd2 	bl	d8860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8ebc:	f1b8 0f00 	cmp.w	r8, #0
   d8ec0:	d011      	beq.n	d8ee6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d8ec2:	a80b      	add	r0, sp, #44	; 0x2c
   d8ec4:	f7ff fccc 	bl	d8860 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8ec8:	a808      	add	r0, sp, #32
   d8eca:	f7ff fcdd 	bl	d8888 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d8ece:	4628      	mov	r0, r5
   d8ed0:	b015      	add	sp, #84	; 0x54
   d8ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8ed6:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8eda:	f8da 3004 	ldr.w	r3, [sl, #4]
   d8ede:	2714      	movs	r7, #20
   d8ee0:	fb07 4703 	mla	r7, r7, r3, r4
   d8ee4:	e77d      	b.n	d8de2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d8ee6:	6823      	ldr	r3, [r4, #0]
   d8ee8:	9a00      	ldr	r2, [sp, #0]
   d8eea:	2414      	movs	r4, #20
   d8eec:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d8ef0:	9b06      	ldr	r3, [sp, #24]
   d8ef2:	781b      	ldrb	r3, [r3, #0]
   d8ef4:	bb23      	cbnz	r3, d8f40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d8ef6:	f8da 3000 	ldr.w	r3, [sl]
   d8efa:	9a01      	ldr	r2, [sp, #4]
   d8efc:	4413      	add	r3, r2
   d8efe:	7c1b      	ldrb	r3, [r3, #16]
   d8f00:	80e3      	strh	r3, [r4, #6]
   d8f02:	e01d      	b.n	d8f40 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8f04:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d8f06:	2f00      	cmp	r7, #0
   d8f08:	dd0f      	ble.n	d8f2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8f0a:	2314      	movs	r3, #20
   d8f0c:	fb03 f007 	mul.w	r0, r3, r7
   d8f10:	9303      	str	r3, [sp, #12]
   d8f12:	f7fd fc6b 	bl	d67ec <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8f16:	4683      	mov	fp, r0
   d8f18:	b178      	cbz	r0, d8f3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d8f1a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d8f1e:	9b03      	ldr	r3, [sp, #12]
   d8f20:	fb03 1202 	mla	r2, r3, r2, r1
   d8f24:	f7ff fe42 	bl	d8bac <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d8f28:	e000      	b.n	d8f2c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8f2a:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8f2c:	6820      	ldr	r0, [r4, #0]
   d8f2e:	f7fd fc65 	bl	d67fc <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8f32:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d8f36:	60a7      	str	r7, [r4, #8]
   d8f38:	e794      	b.n	d8e64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8f3a:	f04f 0801 	mov.w	r8, #1
   d8f3e:	e7ba      	b.n	d8eb6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d8f40:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d8f42:	e766      	b.n	d8e12 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d8f44:	3601      	adds	r6, #1
   d8f46:	e753      	b.n	d8df0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d8f48:	a908      	add	r1, sp, #32
   d8f4a:	4628      	mov	r0, r5
   d8f4c:	f7ff fe17 	bl	d8b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d8f50:	a90b      	add	r1, sp, #44	; 0x2c
   d8f52:	f105 000c 	add.w	r0, r5, #12
   d8f56:	f7ff fe12 	bl	d8b7e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d8f5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d8f5e:	762b      	strb	r3, [r5, #24]
   d8f60:	e7af      	b.n	d8ec2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8f62:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d8f64:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8f66:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d8f6a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d8f6e:	4631      	mov	r1, r6
   d8f70:	f106 0010 	add.w	r0, r6, #16
   d8f74:	f7ff feb8 	bl	d8ce8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d8f78:	b11e      	cbz	r6, d8f82 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d8f7a:	a90f      	add	r1, sp, #60	; 0x3c
   d8f7c:	4630      	mov	r0, r6
   d8f7e:	f7fd fccd 	bl	d691c <_ZN6StringC1EOS_>
    ++size_;
   d8f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8f84:	3301      	adds	r3, #1
   d8f86:	9309      	str	r3, [sp, #36]	; 0x24
   d8f88:	e724      	b.n	d8dd4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d8f8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d8f8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d8f8e:	4604      	mov	r4, r0
   d8f90:	4b09      	ldr	r3, [pc, #36]	; (d8fb8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d8f92:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d8f96:	4605      	mov	r5, r0
   d8f98:	460e      	mov	r6, r1
        filter_(level, filters) {
   d8f9a:	a801      	add	r0, sp, #4
   d8f9c:	4611      	mov	r1, r2
   d8f9e:	f7fb fd17 	bl	d49d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d8fa2:	aa01      	add	r2, sp, #4
   d8fa4:	4631      	mov	r1, r6
   d8fa6:	4620      	mov	r0, r4
   d8fa8:	f7ff fee1 	bl	d8d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d8fac:	a801      	add	r0, sp, #4
   d8fae:	f7fb fbe7 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d8fb2:	4628      	mov	r0, r5
   d8fb4:	b004      	add	sp, #16
   d8fb6:	bd70      	pop	{r4, r5, r6, pc}
   d8fb8:	000db1c8 	.word	0x000db1c8

000d8fbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d8fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8fbe:	460f      	mov	r7, r1
   d8fc0:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8fc2:	492b      	ldr	r1, [pc, #172]	; (d9070 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d8fc4:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8fc6:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d8fc8:	4616      	mov	r6, r2
   d8fca:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8fcc:	f001 ffe8 	bl	dafa0 <strcmp>
   d8fd0:	bb28      	cbnz	r0, d901e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d8fd2:	2c00      	cmp	r4, #0
   d8fd4:	d049      	beq.n	d906a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d8fd6:	4629      	mov	r1, r5
   d8fd8:	a801      	add	r0, sp, #4
   d8fda:	f7ff fddd 	bl	d8b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d8fde:	4925      	ldr	r1, [pc, #148]	; (d9074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d8fe0:	2024      	movs	r0, #36	; 0x24
   d8fe2:	f001 fdf3 	bl	dabcc <_ZnwjRKSt9nothrow_t>
   d8fe6:	4605      	mov	r5, r0
   d8fe8:	b1b8      	cbz	r0, d901a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d8fea:	a901      	add	r1, sp, #4
   d8fec:	a804      	add	r0, sp, #16
   d8fee:	f7ff fdd3 	bl	d8b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d8ff2:	a904      	add	r1, sp, #16
   d8ff4:	a807      	add	r0, sp, #28
   d8ff6:	f7fb fceb 	bl	d49d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d8ffa:	aa07      	add	r2, sp, #28
   d8ffc:	4631      	mov	r1, r6
   d8ffe:	4628      	mov	r0, r5
   d9000:	f7ff ffc4 	bl	d8f8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9004:	a807      	add	r0, sp, #28
   d9006:	f7fb fbbb 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d900a:	4b1b      	ldr	r3, [pc, #108]	; (d9078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d900c:	602b      	str	r3, [r5, #0]
   d900e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d9010:	a804      	add	r0, sp, #16
   d9012:	f7fb fbb5 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9016:	4b19      	ldr	r3, [pc, #100]	; (d907c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d9018:	602b      	str	r3, [r5, #0]
   d901a:	a801      	add	r0, sp, #4
   d901c:	e01f      	b.n	d905e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d901e:	4918      	ldr	r1, [pc, #96]	; (d9080 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d9020:	4638      	mov	r0, r7
   d9022:	f001 ffbd 	bl	dafa0 <strcmp>
   d9026:	b9f0      	cbnz	r0, d9066 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d9028:	b1fc      	cbz	r4, d906a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d902a:	4629      	mov	r1, r5
   d902c:	a804      	add	r0, sp, #16
   d902e:	f7ff fdb3 	bl	d8b98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d9032:	4910      	ldr	r1, [pc, #64]	; (d9074 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d9034:	2024      	movs	r0, #36	; 0x24
   d9036:	f001 fdc9 	bl	dabcc <_ZnwjRKSt9nothrow_t>
   d903a:	4605      	mov	r5, r0
   d903c:	b170      	cbz	r0, d905c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d903e:	a904      	add	r1, sp, #16
   d9040:	a807      	add	r0, sp, #28
   d9042:	f7fb fcc5 	bl	d49d0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9046:	aa07      	add	r2, sp, #28
   d9048:	4631      	mov	r1, r6
   d904a:	4628      	mov	r0, r5
   d904c:	f7ff ff9e 	bl	d8f8c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9050:	a807      	add	r0, sp, #28
   d9052:	f7fb fb95 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9056:	4b08      	ldr	r3, [pc, #32]	; (d9078 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d9058:	602b      	str	r3, [r5, #0]
   d905a:	622c      	str	r4, [r5, #32]
   d905c:	a804      	add	r0, sp, #16
   d905e:	f7fb fb8f 	bl	d4780 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9062:	4628      	mov	r0, r5
   d9064:	e002      	b.n	d906c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d9066:	2000      	movs	r0, #0
   d9068:	e000      	b.n	d906c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d906a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d906c:	b00b      	add	sp, #44	; 0x2c
   d906e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9070:	000dc2be 	.word	0x000dc2be
   d9074:	000dc57f 	.word	0x000dc57f
   d9078:	000dc344 	.word	0x000dc344
   d907c:	000dc250 	.word	0x000dc250
   d9080:	000dc2c2 	.word	0x000dc2c2

000d9084 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9084:	4b01      	ldr	r3, [pc, #4]	; (d908c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9086:	4a02      	ldr	r2, [pc, #8]	; (d9090 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9088:	601a      	str	r2, [r3, #0]
   d908a:	4770      	bx	lr
   d908c:	2003e40c 	.word	0x2003e40c
   d9090:	000dc2d3 	.word	0x000dc2d3

000d9094 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9098:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d909a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d909e:	4604      	mov	r4, r0
   d90a0:	460e      	mov	r6, r1
   d90a2:	4617      	mov	r7, r2
   d90a4:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d90a6:	f000 fe93 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d90aa:	4581      	cmp	r9, r0
   d90ac:	d105      	bne.n	d90ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d90ae:	485a      	ldr	r0, [pc, #360]	; (d9218 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d90b0:	f001 fb43 	bl	da73a <_ZN5spark12NetworkClass9listeningEv>
   d90b4:	2800      	cmp	r0, #0
   d90b6:	f040 80ac 	bne.w	d9212 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d90ba:	792b      	ldrb	r3, [r5, #4]
   d90bc:	071b      	lsls	r3, r3, #28
   d90be:	d505      	bpl.n	d90cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d90c0:	696b      	ldr	r3, [r5, #20]
   d90c2:	4a56      	ldr	r2, [pc, #344]	; (d921c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d90c4:	6a20      	ldr	r0, [r4, #32]
   d90c6:	2100      	movs	r1, #0
   d90c8:	f7ff f985 	bl	d83d6 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d90cc:	f1b8 0f00 	cmp.w	r8, #0
   d90d0:	d00d      	beq.n	d90ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d90d2:	215b      	movs	r1, #91	; 0x5b
   d90d4:	4620      	mov	r0, r4
   d90d6:	f7ff fa2e 	bl	d8536 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d90da:	4641      	mov	r1, r8
   d90dc:	4620      	mov	r0, r4
   d90de:	f7ff fa1c 	bl	d851a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d90e2:	6823      	ldr	r3, [r4, #0]
   d90e4:	494e      	ldr	r1, [pc, #312]	; (d9220 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d90e6:	68db      	ldr	r3, [r3, #12]
   d90e8:	2202      	movs	r2, #2
   d90ea:	4620      	mov	r0, r4
   d90ec:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d90ee:	792b      	ldrb	r3, [r5, #4]
   d90f0:	07d9      	lsls	r1, r3, #31
   d90f2:	d525      	bpl.n	d9140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d90f4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d90f8:	212f      	movs	r1, #47	; 0x2f
   d90fa:	4640      	mov	r0, r8
   d90fc:	f001 ffa6 	bl	db04c <strrchr>
    if (s1) {
   d9100:	b108      	cbz	r0, d9106 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d9102:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d9106:	4641      	mov	r1, r8
   d9108:	4620      	mov	r0, r4
   d910a:	f7ff fa06 	bl	d851a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d910e:	792b      	ldrb	r3, [r5, #4]
   d9110:	079a      	lsls	r2, r3, #30
   d9112:	d509      	bpl.n	d9128 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d9114:	213a      	movs	r1, #58	; 0x3a
   d9116:	4620      	mov	r0, r4
   d9118:	f7ff fa0d 	bl	d8536 <_ZN5spark16StreamLogHandler5writeEc>
   d911c:	68eb      	ldr	r3, [r5, #12]
   d911e:	4a41      	ldr	r2, [pc, #260]	; (d9224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d9120:	6a20      	ldr	r0, [r4, #32]
   d9122:	2100      	movs	r1, #0
   d9124:	f7ff f957 	bl	d83d6 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d9128:	792b      	ldrb	r3, [r5, #4]
   d912a:	f013 0f04 	tst.w	r3, #4
   d912e:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d9130:	bf18      	it	ne
   d9132:	493d      	ldrne	r1, [pc, #244]	; (d9228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9134:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d9136:	bf08      	it	eq
   d9138:	493c      	ldreq	r1, [pc, #240]	; (d922c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d913a:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d913c:	4620      	mov	r0, r4
   d913e:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d9140:	792b      	ldrb	r3, [r5, #4]
   d9142:	075b      	lsls	r3, r3, #29
   d9144:	d518      	bpl.n	d9178 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9146:	6929      	ldr	r1, [r5, #16]
   d9148:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d914a:	4613      	mov	r3, r2
   d914c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9150:	b138      	cbz	r0, d9162 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d9152:	2820      	cmp	r0, #32
   d9154:	d101      	bne.n	d915a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d9156:	4619      	mov	r1, r3
   d9158:	e001      	b.n	d915e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d915a:	2828      	cmp	r0, #40	; 0x28
   d915c:	d001      	beq.n	d9162 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d915e:	461a      	mov	r2, r3
   d9160:	e7f3      	b.n	d914a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d9162:	6823      	ldr	r3, [r4, #0]
   d9164:	1a52      	subs	r2, r2, r1
   d9166:	68db      	ldr	r3, [r3, #12]
   d9168:	4620      	mov	r0, r4
   d916a:	4798      	blx	r3
        write("(): ", 4);
   d916c:	6823      	ldr	r3, [r4, #0]
   d916e:	4930      	ldr	r1, [pc, #192]	; (d9230 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d9170:	68db      	ldr	r3, [r3, #12]
   d9172:	2204      	movs	r2, #4
   d9174:	4620      	mov	r0, r4
   d9176:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d9178:	2100      	movs	r1, #0
   d917a:	4638      	mov	r0, r7
   d917c:	f7fd fa6a 	bl	d6654 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d9180:	4601      	mov	r1, r0
   d9182:	4620      	mov	r0, r4
   d9184:	f7ff f9c9 	bl	d851a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9188:	6823      	ldr	r3, [r4, #0]
   d918a:	4928      	ldr	r1, [pc, #160]	; (d922c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d918c:	68db      	ldr	r3, [r3, #12]
   d918e:	2202      	movs	r2, #2
   d9190:	4620      	mov	r0, r4
   d9192:	4798      	blx	r3
    // Message
    if (msg) {
   d9194:	b11e      	cbz	r6, d919e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d9196:	4631      	mov	r1, r6
   d9198:	4620      	mov	r0, r4
   d919a:	f7ff f9be 	bl	d851a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d919e:	792b      	ldrb	r3, [r5, #4]
   d91a0:	f013 0f30 	tst.w	r3, #48	; 0x30
   d91a4:	d02d      	beq.n	d9202 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d91a6:	6823      	ldr	r3, [r4, #0]
   d91a8:	4922      	ldr	r1, [pc, #136]	; (d9234 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d91aa:	68db      	ldr	r3, [r3, #12]
   d91ac:	4620      	mov	r0, r4
   d91ae:	2202      	movs	r2, #2
   d91b0:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d91b2:	792b      	ldrb	r3, [r5, #4]
   d91b4:	06d8      	lsls	r0, r3, #27
   d91b6:	d50b      	bpl.n	d91d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d91b8:	6823      	ldr	r3, [r4, #0]
   d91ba:	491f      	ldr	r1, [pc, #124]	; (d9238 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d91bc:	68db      	ldr	r3, [r3, #12]
   d91be:	2207      	movs	r2, #7
   d91c0:	4620      	mov	r0, r4
   d91c2:	4798      	blx	r3
   d91c4:	69ab      	ldr	r3, [r5, #24]
   d91c6:	4a1d      	ldr	r2, [pc, #116]	; (d923c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d91c8:	6a20      	ldr	r0, [r4, #32]
   d91ca:	2100      	movs	r1, #0
   d91cc:	f7ff f903 	bl	d83d6 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d91d0:	792b      	ldrb	r3, [r5, #4]
   d91d2:	0699      	lsls	r1, r3, #26
   d91d4:	d511      	bpl.n	d91fa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d91d6:	06da      	lsls	r2, r3, #27
   d91d8:	d505      	bpl.n	d91e6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d91da:	6823      	ldr	r3, [r4, #0]
   d91dc:	4912      	ldr	r1, [pc, #72]	; (d9228 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d91de:	68db      	ldr	r3, [r3, #12]
   d91e0:	2202      	movs	r2, #2
   d91e2:	4620      	mov	r0, r4
   d91e4:	4798      	blx	r3
            }
            write("details = ", 10);
   d91e6:	6823      	ldr	r3, [r4, #0]
   d91e8:	4915      	ldr	r1, [pc, #84]	; (d9240 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d91ea:	68db      	ldr	r3, [r3, #12]
   d91ec:	4620      	mov	r0, r4
   d91ee:	220a      	movs	r2, #10
   d91f0:	4798      	blx	r3
            write(attr.details);
   d91f2:	69e9      	ldr	r1, [r5, #28]
   d91f4:	4620      	mov	r0, r4
   d91f6:	f7ff f990 	bl	d851a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d91fa:	215d      	movs	r1, #93	; 0x5d
   d91fc:	4620      	mov	r0, r4
   d91fe:	f7ff f99a 	bl	d8536 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d9202:	6823      	ldr	r3, [r4, #0]
   d9204:	490f      	ldr	r1, [pc, #60]	; (d9244 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d9206:	68db      	ldr	r3, [r3, #12]
   d9208:	4620      	mov	r0, r4
   d920a:	2202      	movs	r2, #2
}
   d920c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d9210:	4718      	bx	r3
   d9212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9216:	bf00      	nop
   d9218:	2003e740 	.word	0x2003e740
   d921c:	000dc2d7 	.word	0x000dc2d7
   d9220:	000dc2de 	.word	0x000dc2de
   d9224:	000db937 	.word	0x000db937
   d9228:	000dc2e1 	.word	0x000dc2e1
   d922c:	000dc2e6 	.word	0x000dc2e6
   d9230:	000dc2e4 	.word	0x000dc2e4
   d9234:	000dc2e9 	.word	0x000dc2e9
   d9238:	000dc2ec 	.word	0x000dc2ec
   d923c:	000dc2f4 	.word	0x000dc2f4
   d9240:	000dc2f7 	.word	0x000dc2f7
   d9244:	000dc302 	.word	0x000dc302

000d9248 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d924c:	b085      	sub	sp, #20
   d924e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d9252:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d9254:	4606      	mov	r6, r0
   d9256:	460f      	mov	r7, r1
   d9258:	4691      	mov	r9, r2
   d925a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d925c:	f000 fdb8 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d9260:	4580      	cmp	r8, r0
   d9262:	d105      	bne.n	d9270 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9264:	484a      	ldr	r0, [pc, #296]	; (d9390 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9266:	f001 fa68 	bl	da73a <_ZN5spark12NetworkClass9listeningEv>
   d926a:	2800      	cmp	r0, #0
   d926c:	f040 808c 	bne.w	d9388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d9270:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d9272:	4a48      	ldr	r2, [pc, #288]	; (d9394 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d9274:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d9276:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d927a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d927c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d927e:	f88d 8008 	strb.w	r8, [sp, #8]
   d9282:	f001 fb9e 	bl	da9c2 <_ZN5spark10JSONWriter11beginObjectEv>
   d9286:	4641      	mov	r1, r8
   d9288:	4648      	mov	r0, r9
   d928a:	f7fd f9e3 	bl	d6654 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d928e:	4942      	ldr	r1, [pc, #264]	; (d9398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d9290:	4680      	mov	r8, r0
   d9292:	2201      	movs	r2, #1
   d9294:	a801      	add	r0, sp, #4
   d9296:	f001 fc19 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d929a:	4641      	mov	r1, r8
   d929c:	f7ff f92d 	bl	d84fa <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d92a0:	b13f      	cbz	r7, d92b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d92a2:	493e      	ldr	r1, [pc, #248]	; (d939c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d92a4:	2201      	movs	r2, #1
   d92a6:	a801      	add	r0, sp, #4
   d92a8:	f001 fc10 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d92ac:	4639      	mov	r1, r7
   d92ae:	f7ff f924 	bl	d84fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d92b2:	b13d      	cbz	r5, d92c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d92b4:	493a      	ldr	r1, [pc, #232]	; (d93a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d92b6:	2201      	movs	r2, #1
   d92b8:	a801      	add	r0, sp, #4
   d92ba:	f001 fc07 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d92be:	4629      	mov	r1, r5
   d92c0:	f7ff f91b 	bl	d84fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d92c4:	7923      	ldrb	r3, [r4, #4]
   d92c6:	07df      	lsls	r7, r3, #31
   d92c8:	d50e      	bpl.n	d92e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d92ca:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d92cc:	212f      	movs	r1, #47	; 0x2f
   d92ce:	4628      	mov	r0, r5
   d92d0:	f001 febc 	bl	db04c <strrchr>
    if (s1) {
   d92d4:	b100      	cbz	r0, d92d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d92d6:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d92d8:	4932      	ldr	r1, [pc, #200]	; (d93a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d92da:	2201      	movs	r2, #1
   d92dc:	a801      	add	r0, sp, #4
   d92de:	f001 fbf5 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d92e2:	4629      	mov	r1, r5
   d92e4:	f7ff f909 	bl	d84fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d92e8:	7923      	ldrb	r3, [r4, #4]
   d92ea:	079d      	lsls	r5, r3, #30
   d92ec:	d507      	bpl.n	d92fe <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d92ee:	492e      	ldr	r1, [pc, #184]	; (d93a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d92f0:	2202      	movs	r2, #2
   d92f2:	a801      	add	r0, sp, #4
   d92f4:	f001 fbea 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d92f8:	68e1      	ldr	r1, [r4, #12]
   d92fa:	f001 fb6f 	bl	da9dc <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d92fe:	7923      	ldrb	r3, [r4, #4]
   d9300:	0758      	lsls	r0, r3, #29
   d9302:	d516      	bpl.n	d9332 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9304:	6925      	ldr	r5, [r4, #16]
   d9306:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d9308:	463b      	mov	r3, r7
   d930a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d930e:	b13a      	cbz	r2, d9320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d9310:	2a20      	cmp	r2, #32
   d9312:	d101      	bne.n	d9318 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d9314:	461d      	mov	r5, r3
   d9316:	e001      	b.n	d931c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d9318:	2a28      	cmp	r2, #40	; 0x28
   d931a:	d001      	beq.n	d9320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d931c:	461f      	mov	r7, r3
   d931e:	e7f3      	b.n	d9308 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d9320:	2202      	movs	r2, #2
   d9322:	4922      	ldr	r1, [pc, #136]	; (d93ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d9324:	a801      	add	r0, sp, #4
   d9326:	f001 fbd1 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d932a:	1b7a      	subs	r2, r7, r5
   d932c:	4629      	mov	r1, r5
   d932e:	f001 fbdc 	bl	daaea <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d9332:	7923      	ldrb	r3, [r4, #4]
   d9334:	0719      	lsls	r1, r3, #28
   d9336:	d507      	bpl.n	d9348 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d9338:	491d      	ldr	r1, [pc, #116]	; (d93b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d933a:	2201      	movs	r2, #1
   d933c:	a801      	add	r0, sp, #4
   d933e:	f001 fbc5 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d9342:	6961      	ldr	r1, [r4, #20]
   d9344:	f001 fb5c 	bl	daa00 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d9348:	7923      	ldrb	r3, [r4, #4]
   d934a:	06da      	lsls	r2, r3, #27
   d934c:	d508      	bpl.n	d9360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d934e:	2204      	movs	r2, #4
   d9350:	4918      	ldr	r1, [pc, #96]	; (d93b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d9352:	eb0d 0002 	add.w	r0, sp, r2
   d9356:	f001 fbb9 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d935a:	69a1      	ldr	r1, [r4, #24]
   d935c:	f001 fb3e 	bl	da9dc <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d9360:	7923      	ldrb	r3, [r4, #4]
   d9362:	069b      	lsls	r3, r3, #26
   d9364:	d507      	bpl.n	d9376 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d9366:	4914      	ldr	r1, [pc, #80]	; (d93b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9368:	2206      	movs	r2, #6
   d936a:	a801      	add	r0, sp, #4
   d936c:	f001 fbae 	bl	daacc <_ZN5spark10JSONWriter4nameEPKcj>
   d9370:	69e1      	ldr	r1, [r4, #28]
   d9372:	f7ff f8c2 	bl	d84fa <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d9376:	a801      	add	r0, sp, #4
   d9378:	f001 fb0d 	bl	da996 <_ZN5spark10JSONWriter9endObjectEv>
   d937c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d937e:	490f      	ldr	r1, [pc, #60]	; (d93bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d9380:	6803      	ldr	r3, [r0, #0]
   d9382:	2202      	movs	r2, #2
   d9384:	68db      	ldr	r3, [r3, #12]
   d9386:	4798      	blx	r3
}
   d9388:	b005      	add	sp, #20
   d938a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d938e:	bf00      	nop
   d9390:	2003e740 	.word	0x2003e740
   d9394:	000dc238 	.word	0x000dc238
   d9398:	000dc26a 	.word	0x000dc26a
   d939c:	000dc27d 	.word	0x000dc27d
   d93a0:	000db44d 	.word	0x000db44d
   d93a4:	000db428 	.word	0x000db428
   d93a8:	000dc305 	.word	0x000dc305
   d93ac:	000dc308 	.word	0x000dc308
   d93b0:	000dc292 	.word	0x000dc292
   d93b4:	000dc30b 	.word	0x000dc30b
   d93b8:	000dc310 	.word	0x000dc310
   d93bc:	000dc302 	.word	0x000dc302

000d93c0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d93c0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d93c2:	2000      	movs	r0, #0
   d93c4:	f7fd fa02 	bl	d67cc <spark_sync_time_pending>
   d93c8:	b128      	cbz	r0, d93d6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d93ca:	f7fd f9ef 	bl	d67ac <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d93ce:	f080 0001 	eor.w	r0, r0, #1
   d93d2:	b2c0      	uxtb	r0, r0
   d93d4:	bd08      	pop	{r3, pc}
   d93d6:	2001      	movs	r0, #1
    }
   d93d8:	bd08      	pop	{r3, pc}

000d93da <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d93da:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d93dc:	2000      	movs	r0, #0
   d93de:	f7fc ff77 	bl	d62d0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d93e2:	4604      	mov	r4, r0
   d93e4:	b968      	cbnz	r0, d9402 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d93e6:	f7fd f945 	bl	d6674 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d93ea:	2801      	cmp	r0, #1
   d93ec:	d10b      	bne.n	d9406 <_ZN9TimeClass7isValidEv+0x2c>
   d93ee:	4620      	mov	r0, r4
   d93f0:	f7fd f960 	bl	d66b4 <system_thread_get_state>
   d93f4:	b938      	cbnz	r0, d9406 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d93f6:	f7ff ffe3 	bl	d93c0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d93fa:	b930      	cbnz	r0, d940a <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d93fc:	f7fd f9ce 	bl	d679c <spark_process>
   d9400:	e7f9      	b.n	d93f6 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d9402:	2001      	movs	r0, #1
   d9404:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9406:	2000      	movs	r0, #0
   d9408:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d940a:	f7ff ffd9 	bl	d93c0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d940e:	2000      	movs	r0, #0
   d9410:	f7fc ff5e 	bl	d62d0 <HAL_RTC_Time_Is_Valid>
   d9414:	3000      	adds	r0, #0
   d9416:	bf18      	it	ne
   d9418:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d941a:	bd10      	pop	{r4, pc}

000d941c <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d941c:	b508      	push	{r3, lr}
    (void)isValid();
   d941e:	f7ff ffdc 	bl	d93da <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d9422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9426:	f7fc bf4b 	b.w	d62c0 <HAL_RTC_Get_UnixTime>
	...

000d942c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d942c:	4b02      	ldr	r3, [pc, #8]	; (d9438 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d942e:	681a      	ldr	r2, [r3, #0]
   d9430:	4b02      	ldr	r3, [pc, #8]	; (d943c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d9432:	601a      	str	r2, [r3, #0]
   d9434:	4770      	bx	lr
   d9436:	bf00      	nop
   d9438:	2003d854 	.word	0x2003d854
   d943c:	2003e410 	.word	0x2003e410

000d9440 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9440:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d9442:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d9444:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d9446:	689b      	ldr	r3, [r3, #8]
   d9448:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d944a:	68a3      	ldr	r3, [r4, #8]
   d944c:	3b01      	subs	r3, #1
   d944e:	60a3      	str	r3, [r4, #8]
   d9450:	b92b      	cbnz	r3, d945e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12+0x1e>
            _M_destroy();
   d9452:	6823      	ldr	r3, [r4, #0]
   d9454:	4620      	mov	r0, r4
   d9456:	68db      	ldr	r3, [r3, #12]
        }
    }
   d9458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d945c:	4718      	bx	r3
   d945e:	bd10      	pop	{r4, pc}

000d9460 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d9460:	b510      	push	{r4, lr}
   d9462:	4b06      	ldr	r3, [pc, #24]	; (d947c <_ZN9TCPClientD1Ev+0x1c>)
   d9464:	6003      	str	r3, [r0, #0]
   d9466:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d9468:	6980      	ldr	r0, [r0, #24]
   d946a:	b128      	cbz	r0, d9478 <_ZN9TCPClientD1Ev+0x18>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d946c:	6843      	ldr	r3, [r0, #4]
   d946e:	3b01      	subs	r3, #1
   d9470:	6043      	str	r3, [r0, #4]
   d9472:	b90b      	cbnz	r3, d9478 <_ZN9TCPClientD1Ev+0x18>
   d9474:	f7ff ffe4 	bl	d9440 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.12>
   d9478:	4620      	mov	r0, r4
   d947a:	bd10      	pop	{r4, pc}
   d947c:	000dc498 	.word	0x000dc498

000d9480 <_ZN9TCPClientD0Ev>:
   d9480:	b510      	push	{r4, lr}
   d9482:	4604      	mov	r4, r0
   d9484:	f7ff ffec 	bl	d9460 <_ZN9TCPClientD1Ev>
   d9488:	4620      	mov	r0, r4
   d948a:	211c      	movs	r1, #28
   d948c:	f001 fb9c 	bl	dabc8 <_ZdlPvj>
   d9490:	4620      	mov	r0, r4
   d9492:	bd10      	pop	{r4, pc}

000d9494 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d9494:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d9496:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d9498:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d949a:	b113      	cbz	r3, d94a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d949c:	2203      	movs	r2, #3
   d949e:	4601      	mov	r1, r0
   d94a0:	4798      	blx	r3
    }
   d94a2:	4620      	mov	r0, r4
   d94a4:	bd10      	pop	{r4, pc}

000d94a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d94a6:	b510      	push	{r4, lr}
   d94a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d94aa:	f7ff fff3 	bl	d9494 <_ZNSt14_Function_baseD1Ev>
   d94ae:	4620      	mov	r0, r4
   d94b0:	bd10      	pop	{r4, pc}

000d94b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d94b2:	b513      	push	{r0, r1, r4, lr}
   d94b4:	460b      	mov	r3, r1
   d94b6:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d94b8:	c803      	ldmia	r0, {r0, r1}
   d94ba:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d94be:	e893 0003 	ldmia.w	r3, {r0, r1}
   d94c2:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d94c6:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d94ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d94ce:	b002      	add	sp, #8
   d94d0:	bd10      	pop	{r4, pc}
	...

000d94d4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d94d4:	4803      	ldr	r0, [pc, #12]	; (d94e4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d94d6:	4a04      	ldr	r2, [pc, #16]	; (d94e8 <_GLOBAL__sub_I_RGB+0x14>)
   d94d8:	4904      	ldr	r1, [pc, #16]	; (d94ec <_GLOBAL__sub_I_RGB+0x18>)
   d94da:	2300      	movs	r3, #0
   d94dc:	6083      	str	r3, [r0, #8]
   d94de:	f001 bb66 	b.w	dabae <__aeabi_atexit>
   d94e2:	bf00      	nop
   d94e4:	2003e414 	.word	0x2003e414
   d94e8:	2003d8c0 	.word	0x2003d8c0
   d94ec:	000d94a7 	.word	0x000d94a7

000d94f0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d94f0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d94f2:	4b0c      	ldr	r3, [pc, #48]	; (d9524 <serialEventRun+0x34>)
   d94f4:	b133      	cbz	r3, d9504 <serialEventRun+0x14>
   d94f6:	f000 fc6b 	bl	d9dd0 <_Z16_fetch_usbserialv>
   d94fa:	6803      	ldr	r3, [r0, #0]
   d94fc:	691b      	ldr	r3, [r3, #16]
   d94fe:	4798      	blx	r3
   d9500:	2800      	cmp	r0, #0
   d9502:	dc09      	bgt.n	d9518 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d9504:	4b08      	ldr	r3, [pc, #32]	; (d9528 <serialEventRun+0x38>)
   d9506:	b163      	cbz	r3, d9522 <serialEventRun+0x32>
   d9508:	f000 fcea 	bl	d9ee0 <_Z22__fetch_global_Serial1v>
   d950c:	6803      	ldr	r3, [r0, #0]
   d950e:	691b      	ldr	r3, [r3, #16]
   d9510:	4798      	blx	r3
   d9512:	2800      	cmp	r0, #0
   d9514:	dc03      	bgt.n	d951e <serialEventRun+0x2e>
   d9516:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d9518:	f3af 8000 	nop.w
   d951c:	e7f2      	b.n	d9504 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d951e:	f3af 8000 	nop.w
   d9522:	bd08      	pop	{r3, pc}
	...

000d952c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d952c:	b508      	push	{r3, lr}
	serialEventRun();
   d952e:	f7ff ffdf 	bl	d94f0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d9532:	f7fc febd 	bl	d62b0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d9536:	4b01      	ldr	r3, [pc, #4]	; (d953c <_post_loop+0x10>)
   d9538:	6018      	str	r0, [r3, #0]
   d953a:	bd08      	pop	{r3, pc}
   d953c:	2003e748 	.word	0x2003e748

000d9540 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d9540:	4802      	ldr	r0, [pc, #8]	; (d954c <_Z33system_initialize_user_backup_ramv+0xc>)
   d9542:	4a03      	ldr	r2, [pc, #12]	; (d9550 <_Z33system_initialize_user_backup_ramv+0x10>)
   d9544:	4903      	ldr	r1, [pc, #12]	; (d9554 <_Z33system_initialize_user_backup_ramv+0x14>)
   d9546:	1a12      	subs	r2, r2, r0
   d9548:	f001 bcbb 	b.w	daec2 <memcpy>
   d954c:	2003f400 	.word	0x2003f400
   d9550:	2003f404 	.word	0x2003f404
   d9554:	000dc730 	.word	0x000dc730

000d9558 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9558:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d955a:	2300      	movs	r3, #0
   d955c:	9300      	str	r3, [sp, #0]
   d955e:	461a      	mov	r2, r3
   d9560:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9564:	f7fd f8b8 	bl	d66d8 <system_ctrl_set_result>
}
   d9568:	b003      	add	sp, #12
   d956a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9570 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9570:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d9572:	8843      	ldrh	r3, [r0, #2]
   d9574:	2b0a      	cmp	r3, #10
   d9576:	d008      	beq.n	d958a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9578:	2b50      	cmp	r3, #80	; 0x50
   d957a:	d109      	bne.n	d9590 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d957c:	4b09      	ldr	r3, [pc, #36]	; (d95a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d957e:	681b      	ldr	r3, [r3, #0]
   d9580:	b13b      	cbz	r3, d9592 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d9582:	b003      	add	sp, #12
   d9584:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9588:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d958a:	f7ff ffe5 	bl	d9558 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d958e:	e006      	b.n	d959e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9590:	2300      	movs	r3, #0
   d9592:	9300      	str	r3, [sp, #0]
   d9594:	461a      	mov	r2, r3
   d9596:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d959a:	f7fd f89d 	bl	d66d8 <system_ctrl_set_result>
        break;
    }
}
   d959e:	b003      	add	sp, #12
   d95a0:	f85d fb04 	ldr.w	pc, [sp], #4
   d95a4:	2003e424 	.word	0x2003e424

000d95a8 <module_user_init_hook>:

void module_user_init_hook()
{
   d95a8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d95aa:	4c10      	ldr	r4, [pc, #64]	; (d95ec <module_user_init_hook+0x44>)
   d95ac:	4d10      	ldr	r5, [pc, #64]	; (d95f0 <module_user_init_hook+0x48>)
   d95ae:	6823      	ldr	r3, [r4, #0]
   d95b0:	42ab      	cmp	r3, r5
   d95b2:	4b10      	ldr	r3, [pc, #64]	; (d95f4 <module_user_init_hook+0x4c>)
   d95b4:	bf0c      	ite	eq
   d95b6:	2201      	moveq	r2, #1
   d95b8:	2200      	movne	r2, #0
   d95ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d95bc:	d002      	beq.n	d95c4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d95be:	f7ff ffbf 	bl	d9540 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d95c2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d95c4:	f7fc fe64 	bl	d6290 <HAL_RNG_GetRandomNumber>
   d95c8:	4604      	mov	r4, r0
    srand(seed);
   d95ca:	f001 fca9 	bl	daf20 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d95ce:	4b0a      	ldr	r3, [pc, #40]	; (d95f8 <module_user_init_hook+0x50>)
   d95d0:	b113      	cbz	r3, d95d8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d95d2:	4620      	mov	r0, r4
   d95d4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d95d8:	2100      	movs	r1, #0
   d95da:	4807      	ldr	r0, [pc, #28]	; (d95f8 <module_user_init_hook+0x50>)
   d95dc:	f7fd f8fe 	bl	d67dc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d95e0:	2100      	movs	r1, #0
   d95e2:	4806      	ldr	r0, [pc, #24]	; (d95fc <module_user_init_hook+0x54>)
}
   d95e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d95e8:	f7fd b86c 	b.w	d66c4 <system_ctrl_set_app_request_handler>
   d95ec:	2003f400 	.word	0x2003f400
   d95f0:	9a271c1e 	.word	0x9a271c1e
   d95f4:	2003e428 	.word	0x2003e428
   d95f8:	00000000 	.word	0x00000000
   d95fc:	000d9571 	.word	0x000d9571

000d9600 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9600:	4770      	bx	lr

000d9602 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d9602:	2000      	movs	r0, #0
   d9604:	4770      	bx	lr

000d9606 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d9606:	b510      	push	{r4, lr}
   d9608:	2110      	movs	r1, #16
   d960a:	4604      	mov	r4, r0
   d960c:	f001 fadc 	bl	dabc8 <_ZdlPvj>
   d9610:	4620      	mov	r0, r4
   d9612:	bd10      	pop	{r4, pc}

000d9614 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d9614:	b508      	push	{r3, lr}
      { delete this; }
   d9616:	b108      	cbz	r0, d961c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d9618:	f7ff fff5 	bl	d9606 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d961c:	bd08      	pop	{r3, pc}

000d961e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d961e:	2200      	movs	r2, #0
   d9620:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d9622:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d9624:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d9628:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d962a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d962e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d9630:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9632:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d9634:	680c      	ldr	r4, [r1, #0]
   d9636:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d9638:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d963a:	bd10      	pop	{r4, pc}

000d963c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d963c:	b510      	push	{r4, lr}
   d963e:	4604      	mov	r4, r0
    free((void*)msg_);
   d9640:	6800      	ldr	r0, [r0, #0]
   d9642:	f7fd f8db 	bl	d67fc <free>
}
   d9646:	4620      	mov	r0, r4
   d9648:	bd10      	pop	{r4, pc}

000d964a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d964a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d964c:	68c4      	ldr	r4, [r0, #12]
   d964e:	b1f4      	cbz	r4, d968e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d9650:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d9652:	2b02      	cmp	r3, #2
   d9654:	d103      	bne.n	d965e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d9656:	f104 000c 	add.w	r0, r4, #12
   d965a:	f7ff ffef 	bl	d963c <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d965e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d9660:	b135      	cbz	r5, d9670 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9662:	4628      	mov	r0, r5
   d9664:	f7ff ff16 	bl	d9494 <_ZNSt14_Function_baseD1Ev>
   d9668:	2110      	movs	r1, #16
   d966a:	4628      	mov	r0, r5
   d966c:	f001 faac 	bl	dabc8 <_ZdlPvj>
   d9670:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d9672:	b135      	cbz	r5, d9682 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d9674:	4628      	mov	r0, r5
   d9676:	f7ff ff0d 	bl	d9494 <_ZNSt14_Function_baseD1Ev>
   d967a:	2110      	movs	r1, #16
   d967c:	4628      	mov	r0, r5
   d967e:	f001 faa3 	bl	dabc8 <_ZdlPvj>
   d9682:	4620      	mov	r0, r4
   d9684:	2114      	movs	r1, #20
   d9686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d968a:	f001 ba9d 	b.w	dabc8 <_ZdlPvj>
   d968e:	bd38      	pop	{r3, r4, r5, pc}

000d9690 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d9690:	b510      	push	{r4, lr}
   d9692:	b088      	sub	sp, #32
   d9694:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d9696:	4668      	mov	r0, sp
   d9698:	f7fd f997 	bl	d69ca <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d969c:	4669      	mov	r1, sp
   d969e:	a804      	add	r0, sp, #16
   d96a0:	f7fd f9b5 	bl	d6a0e <_ZN6StringC1ERKS_>
   d96a4:	a804      	add	r0, sp, #16
   d96a6:	47a0      	blx	r4
   d96a8:	4604      	mov	r4, r0
   d96aa:	a804      	add	r0, sp, #16
   d96ac:	f7fd f946 	bl	d693c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d96b0:	4668      	mov	r0, sp
   d96b2:	f7fd f943 	bl	d693c <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d96b6:	4620      	mov	r0, r4
   d96b8:	b008      	add	sp, #32
   d96ba:	bd10      	pop	{r4, pc}

000d96bc <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d96bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d96be:	2410      	movs	r4, #16
   d96c0:	b085      	sub	sp, #20
   d96c2:	4607      	mov	r7, r0
   d96c4:	460e      	mov	r6, r1
   d96c6:	4615      	mov	r5, r2
   d96c8:	2100      	movs	r1, #0
   d96ca:	4622      	mov	r2, r4
   d96cc:	4668      	mov	r0, sp
   d96ce:	f001 fc1e 	bl	daf0e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d96d2:	2200      	movs	r2, #0
   d96d4:	4669      	mov	r1, sp
   d96d6:	4610      	mov	r0, r2
         size = sizeof(*this);
   d96d8:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d96dc:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d96de:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d96e0:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d96e2:	f7fd f853 	bl	d678c <spark_function>
}
   d96e6:	b005      	add	sp, #20
   d96e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d96ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d96ea:	b513      	push	{r0, r1, r4, lr}
   d96ec:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d96ee:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d96f2:	2300      	movs	r3, #0
   d96f4:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d96f6:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d96f8:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d96fa:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d96fc:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d96fe:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d9700:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9702:	f7fa ffff 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9706:	4620      	mov	r0, r4
   d9708:	b002      	add	sp, #8
   d970a:	bd10      	pop	{r4, pc}

000d970c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d970c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d970e:	460c      	mov	r4, r1
   d9710:	ad02      	add	r5, sp, #8
   d9712:	f854 3b04 	ldr.w	r3, [r4], #4
   d9716:	f845 3d08 	str.w	r3, [r5, #-8]!
   d971a:	4606      	mov	r6, r0
   d971c:	460f      	mov	r7, r1
   d971e:	a801      	add	r0, sp, #4
   d9720:	4621      	mov	r1, r4
   d9722:	f7fd ffb7 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d9726:	4629      	mov	r1, r5
   d9728:	4630      	mov	r0, r6
   d972a:	f7ff ffde 	bl	d96ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d972e:	a801      	add	r0, sp, #4
   d9730:	f7fa ffe8 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9734:	4620      	mov	r0, r4
   d9736:	f7fa ffe5 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d973a:	4638      	mov	r0, r7
   d973c:	2108      	movs	r1, #8
   d973e:	f001 fa43 	bl	dabc8 <_ZdlPvj>
        return p;
    }
   d9742:	4630      	mov	r0, r6
   d9744:	b003      	add	sp, #12
   d9746:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9748 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d9748:	b538      	push	{r3, r4, r5, lr}
   d974a:	2300      	movs	r3, #0
   d974c:	4604      	mov	r4, r0
   d974e:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9750:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d9752:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9754:	f7fa fc9f 	bl	d4096 <_Znwj>
   d9758:	b128      	cbz	r0, d9766 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d975a:	2301      	movs	r3, #1
   d975c:	6043      	str	r3, [r0, #4]
   d975e:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d9760:	4b02      	ldr	r3, [pc, #8]	; (d976c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d9762:	6003      	str	r3, [r0, #0]
   d9764:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d9766:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d9768:	4620      	mov	r0, r4
   d976a:	bd38      	pop	{r3, r4, r5, pc}
   d976c:	000dc3b8 	.word	0x000dc3b8

000d9770 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9770:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d9772:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9774:	b90a      	cbnz	r2, d977a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d9776:	f001 fa38 	bl	dabea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d977a:	68c3      	ldr	r3, [r0, #12]
    }
   d977c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9780:	4718      	bx	r3

000d9782 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d9782:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9784:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d9786:	f100 0110 	add.w	r1, r0, #16
   d978a:	f7ff fff1 	bl	d9770 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d978e:	bd08      	pop	{r3, pc}

000d9790 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9790:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d9792:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9794:	b90a      	cbnz	r2, d979a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d9796:	f001 fa28 	bl	dabea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d979a:	68c3      	ldr	r3, [r0, #12]
    }
   d979c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d97a0:	4718      	bx	r3

000d97a2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d97a2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d97a4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d97a6:	f100 0110 	add.w	r1, r0, #16
   d97aa:	f7ff fff1 	bl	d9790 <_ZNKSt8functionIFvRKbEEclES1_>
   d97ae:	bd08      	pop	{r3, pc}

000d97b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d97b0:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d97b2:	2300      	movs	r3, #0
   d97b4:	6083      	str	r3, [r0, #8]
   d97b6:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d97b8:	4604      	mov	r4, r0
   d97ba:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d97bc:	b12b      	cbz	r3, d97ca <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d97be:	2202      	movs	r2, #2
   d97c0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d97c2:	68eb      	ldr	r3, [r5, #12]
   d97c4:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d97c6:	68ab      	ldr	r3, [r5, #8]
   d97c8:	60a3      	str	r3, [r4, #8]
	}
    }
   d97ca:	4620      	mov	r0, r4
   d97cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d97d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d97d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d97d2:	b089      	sub	sp, #36	; 0x24
   d97d4:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d97d6:	4668      	mov	r0, sp
   d97d8:	f7ff ff21 	bl	d961e <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d97dc:	2300      	movs	r3, #0
   d97de:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d97e2:	f04f 0202 	mov.w	r2, #2
   d97e6:	e8d4 3f4f 	ldrexb	r3, [r4]
   d97ea:	2b00      	cmp	r3, #0
   d97ec:	d103      	bne.n	d97f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d97ee:	e8c4 2f41 	strexb	r1, r2, [r4]
   d97f2:	2900      	cmp	r1, #0
   d97f4:	d1f7      	bne.n	d97e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d97f6:	d002      	beq.n	d97fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d97f8:	f88d 3008 	strb.w	r3, [sp, #8]
   d97fc:	e063      	b.n	d98c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d97fe:	f114 050c 	adds.w	r5, r4, #12
   d9802:	d003      	beq.n	d980c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d9804:	4669      	mov	r1, sp
   d9806:	4628      	mov	r0, r5
   d9808:	f7ff ff09 	bl	d961e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d980c:	f3bf 8f5f 	dmb	sy
   d9810:	2301      	movs	r3, #1
   d9812:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9814:	2000      	movs	r0, #0
   d9816:	f104 0308 	add.w	r3, r4, #8
   d981a:	f3bf 8f5f 	dmb	sy
   d981e:	e853 6f00 	ldrex	r6, [r3]
   d9822:	e843 0200 	strex	r2, r0, [r3]
   d9826:	2a00      	cmp	r2, #0
   d9828:	d1f9      	bne.n	d981e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d982a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d982e:	2e00      	cmp	r6, #0
   d9830:	d049      	beq.n	d98c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9832:	f7fc ff2f 	bl	d6694 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9836:	b120      	cbz	r0, d9842 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9838:	4629      	mov	r1, r5
   d983a:	4630      	mov	r0, r6
   d983c:	f7ff ff98 	bl	d9770 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d9840:	e03a      	b.n	d98b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9842:	4631      	mov	r1, r6
   d9844:	a802      	add	r0, sp, #8
   d9846:	f7ff ffb3 	bl	d97b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d984a:	68e0      	ldr	r0, [r4, #12]
   d984c:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9850:	b108      	cbz	r0, d9856 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d9852:	f001 fbb7 	bl	dafc4 <strdup>
   d9856:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9858:	2010      	movs	r0, #16
   d985a:	f8ad 501c 	strh.w	r5, [sp, #28]
   d985e:	f7fa fc1a 	bl	d4096 <_Znwj>
   d9862:	4605      	mov	r5, r0
   d9864:	b1e8      	cbz	r0, d98a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9866:	2700      	movs	r7, #0
   d9868:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d986a:	2018      	movs	r0, #24
   d986c:	f7fa fc13 	bl	d4096 <_Znwj>
   d9870:	4604      	mov	r4, r0
   d9872:	b188      	cbz	r0, d9898 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9874:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9876:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9878:	a802      	add	r0, sp, #8
   d987a:	f7ff fe1a 	bl	d94b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d987e:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9880:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9882:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9884:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d9886:	9204      	str	r2, [sp, #16]
   d9888:	a906      	add	r1, sp, #24
   d988a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d988c:	60e3      	str	r3, [r4, #12]
   d988e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9892:	9205      	str	r2, [sp, #20]
   d9894:	f7ff fec3 	bl	d961e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9898:	4b0d      	ldr	r3, [pc, #52]	; (d98d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d989a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d989c:	4b0d      	ldr	r3, [pc, #52]	; (d98d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d989e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d98a0:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d98a2:	a806      	add	r0, sp, #24
   d98a4:	f7ff feca 	bl	d963c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d98a8:	a802      	add	r0, sp, #8
   d98aa:	f7ff fdf3 	bl	d9494 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d98ae:	2200      	movs	r2, #0
   d98b0:	4629      	mov	r1, r5
   d98b2:	4809      	ldr	r0, [pc, #36]	; (d98d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d98b4:	f7fc fef6 	bl	d66a4 <application_thread_invoke>
   d98b8:	4630      	mov	r0, r6
   d98ba:	f7ff fdeb 	bl	d9494 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d98be:	2110      	movs	r1, #16
   d98c0:	4630      	mov	r0, r6
   d98c2:	f001 f981 	bl	dabc8 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d98c6:	4668      	mov	r0, sp
   d98c8:	f7ff feb8 	bl	d963c <_ZN8particle5ErrorD1Ev>
    }
   d98cc:	b009      	add	sp, #36	; 0x24
   d98ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d98d0:	000d9783 	.word	0x000d9783
   d98d4:	000d99f9 	.word	0x000d99f9
   d98d8:	000d9f2d 	.word	0x000d9f2d

000d98dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d98dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d98e0:	b08b      	sub	sp, #44	; 0x2c
   d98e2:	4606      	mov	r6, r0
   d98e4:	460f      	mov	r7, r1
   d98e6:	4690      	mov	r8, r2
   d98e8:	4699      	mov	r9, r3
   d98ea:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d98ee:	f7fc ff5d 	bl	d67ac <spark_cloud_flag_connected>
   d98f2:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d98f4:	4683      	mov	fp, r0
   d98f6:	bb30      	cbnz	r0, d9946 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d98f8:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d98fc:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d98fe:	a905      	add	r1, sp, #20
   d9900:	4628      	mov	r0, r5
   d9902:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9906:	f7ff fe8a 	bl	d961e <_ZN8particle5ErrorC1EOS0_>
   d990a:	2014      	movs	r0, #20
   d990c:	f7fa fbc3 	bl	d4096 <_Znwj>
   d9910:	4604      	mov	r4, r0
   d9912:	b158      	cbz	r0, d992c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d9914:	2302      	movs	r3, #2
   d9916:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9918:	2301      	movs	r3, #1
   d991a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d991c:	f8c0 b004 	str.w	fp, [r0, #4]
   d9920:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d9924:	4629      	mov	r1, r5
   d9926:	300c      	adds	r0, #12
   d9928:	f7ff fe79 	bl	d961e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d992c:	4630      	mov	r0, r6
   d992e:	4621      	mov	r1, r4
   d9930:	f840 4b04 	str.w	r4, [r0], #4
   d9934:	f7ff ff08 	bl	d9748 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d9938:	4628      	mov	r0, r5
   d993a:	f7ff fe7f 	bl	d963c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d993e:	a805      	add	r0, sp, #20
   d9940:	f7ff fe7c 	bl	d963c <_ZN8particle5ErrorD1Ev>
   d9944:	e052      	b.n	d99ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d9946:	2400      	movs	r4, #0
   d9948:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d994a:	2014      	movs	r0, #20
   d994c:	606c      	str	r4, [r5, #4]
   d994e:	60ac      	str	r4, [r5, #8]
   d9950:	9307      	str	r3, [sp, #28]
   d9952:	f7fa fba0 	bl	d4096 <_Znwj>
   d9956:	4601      	mov	r1, r0
   d9958:	b118      	cbz	r0, d9962 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d995a:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d995c:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d995e:	6044      	str	r4, [r0, #4]
   d9960:	6084      	str	r4, [r0, #8]
   d9962:	a804      	add	r0, sp, #16
   d9964:	9103      	str	r1, [sp, #12]
   d9966:	f7ff feef 	bl	d9748 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d996a:	4b22      	ldr	r3, [pc, #136]	; (d99f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d996c:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d996e:	2008      	movs	r0, #8
   d9970:	f7fa fb91 	bl	d4096 <_Znwj>
   d9974:	4604      	mov	r4, r0
   d9976:	b128      	cbz	r0, d9984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9978:	9b03      	ldr	r3, [sp, #12]
   d997a:	f840 3b04 	str.w	r3, [r0], #4
   d997e:	a904      	add	r1, sp, #16
   d9980:	f7fd fe88 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9984:	9500      	str	r5, [sp, #0]
   d9986:	fa5f f38a 	uxtb.w	r3, sl
   d998a:	464a      	mov	r2, r9
   d998c:	4641      	mov	r1, r8
   d998e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d9990:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9992:	f7fc ff13 	bl	d67bc <spark_send_event>
   d9996:	b920      	cbnz	r0, d99a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d9998:	9b03      	ldr	r3, [sp, #12]
   d999a:	785b      	ldrb	r3, [r3, #1]
   d999c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d99a0:	b183      	cbz	r3, d99c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d99a2:	9b03      	ldr	r3, [sp, #12]
   d99a4:	9305      	str	r3, [sp, #20]
   d99a6:	a904      	add	r1, sp, #16
   d99a8:	a806      	add	r0, sp, #24
   d99aa:	f7fd fe73 	bl	d7694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d99ae:	a905      	add	r1, sp, #20
   d99b0:	4630      	mov	r0, r6
   d99b2:	f7ff fe9a 	bl	d96ea <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d99b6:	a806      	add	r0, sp, #24
   d99b8:	f7fa fea4 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d99bc:	a804      	add	r0, sp, #16
   d99be:	f7fa fea1 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d99c2:	e013      	b.n	d99ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d99c4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d99c8:	a905      	add	r1, sp, #20
   d99ca:	a803      	add	r0, sp, #12
   d99cc:	9205      	str	r2, [sp, #20]
   d99ce:	f8ad 3018 	strh.w	r3, [sp, #24]
   d99d2:	f7ff fefd 	bl	d97d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d99d6:	a805      	add	r0, sp, #20
   d99d8:	f7ff fe30 	bl	d963c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d99dc:	a805      	add	r0, sp, #20
   d99de:	9909      	ldr	r1, [sp, #36]	; 0x24
   d99e0:	f7ff fe94 	bl	d970c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d99e4:	a806      	add	r0, sp, #24
   d99e6:	f7fa fe8d 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d99ea:	e7da      	b.n	d99a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d99ec:	4630      	mov	r0, r6
   d99ee:	b00b      	add	sp, #44	; 0x2c
   d99f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d99f4:	000d9b69 	.word	0x000d9b69

000d99f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d99f8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d99fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d99fc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d99fe:	d006      	beq.n	d9a0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d9a00:	2a03      	cmp	r2, #3
   d9a02:	d017      	beq.n	d9a34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d9a04:	2a01      	cmp	r2, #1
   d9a06:	d122      	bne.n	d9a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9a08:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9a0a:	6003      	str	r3, [r0, #0]
	      break;
   d9a0c:	e01f      	b.n	d9a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9a0e:	2018      	movs	r0, #24
   d9a10:	680e      	ldr	r6, [r1, #0]
   d9a12:	f7fa fb40 	bl	d4096 <_Znwj>
   d9a16:	4605      	mov	r5, r0
   d9a18:	b150      	cbz	r0, d9a30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9a1a:	4631      	mov	r1, r6
   d9a1c:	f7ff fec8 	bl	d97b0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d9a20:	6930      	ldr	r0, [r6, #16]
   d9a22:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9a26:	b108      	cbz	r0, d9a2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d9a28:	f001 facc 	bl	dafc4 <strdup>
   d9a2c:	6128      	str	r0, [r5, #16]
   d9a2e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9a30:	6025      	str	r5, [r4, #0]
   d9a32:	e00c      	b.n	d9a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9a34:	6804      	ldr	r4, [r0, #0]
   d9a36:	b154      	cbz	r4, d9a4e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d9a38:	f104 0010 	add.w	r0, r4, #16
   d9a3c:	f7ff fdfe 	bl	d963c <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9a40:	4620      	mov	r0, r4
   d9a42:	f7ff fd27 	bl	d9494 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9a46:	2118      	movs	r1, #24
   d9a48:	4620      	mov	r0, r4
   d9a4a:	f001 f8bd 	bl	dabc8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9a4e:	2000      	movs	r0, #0
   d9a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9a52 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9a52:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9a54:	2300      	movs	r3, #0
   d9a56:	6083      	str	r3, [r0, #8]
   d9a58:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9a5a:	4604      	mov	r4, r0
   d9a5c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d9a5e:	b12b      	cbz	r3, d9a6c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9a60:	2202      	movs	r2, #2
   d9a62:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d9a64:	68eb      	ldr	r3, [r5, #12]
   d9a66:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9a68:	68ab      	ldr	r3, [r5, #8]
   d9a6a:	60a3      	str	r3, [r4, #8]
	}
    }
   d9a6c:	4620      	mov	r0, r4
   d9a6e:	bd38      	pop	{r3, r4, r5, pc}

000d9a70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9a70:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9a72:	b570      	push	{r4, r5, r6, lr}
   d9a74:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9a76:	d006      	beq.n	d9a86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d9a78:	2a03      	cmp	r2, #3
   d9a7a:	d011      	beq.n	d9aa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d9a7c:	2a01      	cmp	r2, #1
   d9a7e:	d118      	bne.n	d9ab2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9a80:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9a82:	6003      	str	r3, [r0, #0]
	      break;
   d9a84:	e015      	b.n	d9ab2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9a86:	2014      	movs	r0, #20
   d9a88:	680e      	ldr	r6, [r1, #0]
   d9a8a:	f7fa fb04 	bl	d4096 <_Znwj>
   d9a8e:	4605      	mov	r5, r0
   d9a90:	b120      	cbz	r0, d9a9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9a92:	4631      	mov	r1, r6
   d9a94:	f7ff ffdd 	bl	d9a52 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9a98:	7c33      	ldrb	r3, [r6, #16]
   d9a9a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9a9c:	6025      	str	r5, [r4, #0]
   d9a9e:	e008      	b.n	d9ab2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9aa0:	6804      	ldr	r4, [r0, #0]
   d9aa2:	b134      	cbz	r4, d9ab2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9aa4:	4620      	mov	r0, r4
   d9aa6:	f7ff fcf5 	bl	d9494 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9aaa:	2114      	movs	r1, #20
   d9aac:	4620      	mov	r0, r4
   d9aae:	f001 f88b 	bl	dabc8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9ab2:	2000      	movs	r0, #0
   d9ab4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9ab8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d9ab8:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9aba:	2300      	movs	r3, #0
   d9abc:	b087      	sub	sp, #28
   d9abe:	460c      	mov	r4, r1
   d9ac0:	f3bf 8f5f 	dmb	sy
   d9ac4:	e850 6f00 	ldrex	r6, [r0]
   d9ac8:	e840 3200 	strex	r2, r3, [r0]
   d9acc:	2a00      	cmp	r2, #0
   d9ace:	d1f9      	bne.n	d9ac4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d9ad0:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d9ad4:	2e00      	cmp	r6, #0
   d9ad6:	d03f      	beq.n	d9b58 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9ad8:	4618      	mov	r0, r3
   d9ada:	f7fc fddb 	bl	d6694 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9ade:	4607      	mov	r7, r0
   d9ae0:	b120      	cbz	r0, d9aec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9ae2:	4621      	mov	r1, r4
   d9ae4:	4630      	mov	r0, r6
   d9ae6:	f7ff fe53 	bl	d9790 <_ZNKSt8functionIFvRKbEEclES1_>
   d9aea:	e02e      	b.n	d9b4a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9aec:	4631      	mov	r1, r6
   d9aee:	a801      	add	r0, sp, #4
   d9af0:	f7ff ffaf 	bl	d9a52 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9af4:	7823      	ldrb	r3, [r4, #0]
   d9af6:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9afa:	2010      	movs	r0, #16
   d9afc:	f7fa facb 	bl	d4096 <_Znwj>
   d9b00:	4605      	mov	r5, r0
   d9b02:	b1d0      	cbz	r0, d9b3a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9b04:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9b06:	2014      	movs	r0, #20
   d9b08:	f7fa fac5 	bl	d4096 <_Znwj>
   d9b0c:	4604      	mov	r4, r0
   d9b0e:	b178      	cbz	r0, d9b30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9b10:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9b12:	4601      	mov	r1, r0
   d9b14:	a801      	add	r0, sp, #4
   d9b16:	f7ff fccc 	bl	d94b2 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b1a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9b1c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b1e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9b20:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9b22:	9203      	str	r2, [sp, #12]
   d9b24:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9b26:	60e3      	str	r3, [r4, #12]
   d9b28:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9b2c:	9204      	str	r2, [sp, #16]
   d9b2e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9b30:	4b0a      	ldr	r3, [pc, #40]	; (d9b5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d9b32:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9b34:	4b0a      	ldr	r3, [pc, #40]	; (d9b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9b36:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d9b38:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9b3a:	a801      	add	r0, sp, #4
   d9b3c:	f7ff fcaa 	bl	d9494 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9b40:	2200      	movs	r2, #0
   d9b42:	4629      	mov	r1, r5
   d9b44:	4807      	ldr	r0, [pc, #28]	; (d9b64 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d9b46:	f7fc fdad 	bl	d66a4 <application_thread_invoke>
   d9b4a:	4630      	mov	r0, r6
   d9b4c:	f7ff fca2 	bl	d9494 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d9b50:	2110      	movs	r1, #16
   d9b52:	4630      	mov	r0, r6
   d9b54:	f001 f838 	bl	dabc8 <_ZdlPvj>
        }
    }
   d9b58:	b007      	add	sp, #28
   d9b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9b5c:	000d97a3 	.word	0x000d97a3
   d9b60:	000d9a71 	.word	0x000d9a71
   d9b64:	000d9f2d 	.word	0x000d9f2d

000d9b68 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d9b68:	b530      	push	{r4, r5, lr}
   d9b6a:	b085      	sub	sp, #20
   d9b6c:	4604      	mov	r4, r0
   d9b6e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9b70:	4668      	mov	r0, sp
   d9b72:	4611      	mov	r1, r2
   d9b74:	f7ff fdca 	bl	d970c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d9b78:	b17c      	cbz	r4, d9b9a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d9b7a:	b224      	sxth	r4, r4
   d9b7c:	4628      	mov	r0, r5
   d9b7e:	b10d      	cbz	r5, d9b84 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d9b80:	f001 fa20 	bl	dafc4 <strdup>
   d9b84:	9002      	str	r0, [sp, #8]
   d9b86:	a902      	add	r1, sp, #8
   d9b88:	4668      	mov	r0, sp
   d9b8a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d9b8e:	f7ff fe1f 	bl	d97d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9b92:	a802      	add	r0, sp, #8
   d9b94:	f7ff fd52 	bl	d963c <_ZN8particle5ErrorD1Ev>
   d9b98:	e01d      	b.n	d9bd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d9b9a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d9b9c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d9ba0:	f04f 0201 	mov.w	r2, #1
   d9ba4:	e8d0 3f4f 	ldrexb	r3, [r0]
   d9ba8:	42a3      	cmp	r3, r4
   d9baa:	d103      	bne.n	d9bb4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d9bac:	e8c0 2f41 	strexb	r1, r2, [r0]
   d9bb0:	2900      	cmp	r1, #0
   d9bb2:	d1f7      	bne.n	d9ba4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d9bb4:	d002      	beq.n	d9bbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d9bb6:	f88d 3008 	strb.w	r3, [sp, #8]
   d9bba:	e00c      	b.n	d9bd6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d9bbc:	f110 010c 	adds.w	r1, r0, #12
   d9bc0:	f04f 0301 	mov.w	r3, #1
   d9bc4:	bf18      	it	ne
   d9bc6:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9bc8:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d9bcc:	3004      	adds	r0, #4
   d9bce:	f800 3c03 	strb.w	r3, [r0, #-3]
   d9bd2:	f7ff ff71 	bl	d9ab8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d9bd6:	a801      	add	r0, sp, #4
   d9bd8:	f7fa fd94 	bl	d4704 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d9bdc:	b005      	add	sp, #20
   d9bde:	bd30      	pop	{r4, r5, pc}

000d9be0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9be0:	4770      	bx	lr

000d9be2 <_ZN9IPAddressD0Ev>:
   d9be2:	b510      	push	{r4, lr}
   d9be4:	2118      	movs	r1, #24
   d9be6:	4604      	mov	r4, r0
   d9be8:	f000 ffee 	bl	dabc8 <_ZdlPvj>
   d9bec:	4620      	mov	r0, r4
   d9bee:	bd10      	pop	{r4, pc}

000d9bf0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9bf2:	7d03      	ldrb	r3, [r0, #20]
   d9bf4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9bf6:	b08d      	sub	sp, #52	; 0x34
   d9bf8:	460e      	mov	r6, r1
   d9bfa:	f100 0704 	add.w	r7, r0, #4
   d9bfe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9c02:	d002      	beq.n	d9c0a <_ZNK9IPAddress7printToER5Print+0x1a>
   d9c04:	f100 0508 	add.w	r5, r0, #8
   d9c08:	e018      	b.n	d9c3c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9c0a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9c0c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9c0e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9c12:	232f      	movs	r3, #47	; 0x2f
   d9c14:	462a      	mov	r2, r5
   d9c16:	200a      	movs	r0, #10
   d9c18:	f7fc fc2c 	bl	d6474 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9c1c:	4628      	mov	r0, r5
   d9c1e:	f001 f9ec 	bl	daffa <strlen>
   d9c22:	6833      	ldr	r3, [r6, #0]
   d9c24:	4602      	mov	r2, r0
   d9c26:	68db      	ldr	r3, [r3, #12]
   d9c28:	4629      	mov	r1, r5
   d9c2a:	4630      	mov	r0, r6
   d9c2c:	4798      	blx	r3
   d9c2e:	e00f      	b.n	d9c50 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9c30:	b124      	cbz	r4, d9c3c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9c32:	212e      	movs	r1, #46	; 0x2e
   d9c34:	4630      	mov	r0, r6
   d9c36:	f7fe fb9f 	bl	d8378 <_ZN5Print5printEc>
   d9c3a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9c3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9c40:	220a      	movs	r2, #10
   d9c42:	4630      	mov	r0, r6
   d9c44:	f7fe fba7 	bl	d8396 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9c48:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9c4a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9c4c:	d1f0      	bne.n	d9c30 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9c4e:	4620      	mov	r0, r4
    }
    return n;
}
   d9c50:	b00d      	add	sp, #52	; 0x34
   d9c52:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9c54 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9c54:	b510      	push	{r4, lr}
   d9c56:	4b05      	ldr	r3, [pc, #20]	; (d9c6c <_ZN9IPAddressC1Ev+0x18>)
   d9c58:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9c5a:	2211      	movs	r2, #17
   d9c5c:	f840 3b04 	str.w	r3, [r0], #4
   d9c60:	2100      	movs	r1, #0
   d9c62:	f001 f954 	bl	daf0e <memset>
{
    clear();
}
   d9c66:	4620      	mov	r0, r4
   d9c68:	bd10      	pop	{r4, pc}
   d9c6a:	bf00      	nop
   d9c6c:	000dc3d4 	.word	0x000dc3d4

000d9c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9c70:	4603      	mov	r3, r0
   d9c72:	4a07      	ldr	r2, [pc, #28]	; (d9c90 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9c74:	b510      	push	{r4, lr}
   d9c76:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9c7a:	f101 0210 	add.w	r2, r1, #16
   d9c7e:	f851 4b04 	ldr.w	r4, [r1], #4
   d9c82:	f843 4b04 	str.w	r4, [r3], #4
   d9c86:	4291      	cmp	r1, r2
   d9c88:	d1f9      	bne.n	d9c7e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9c8a:	780a      	ldrb	r2, [r1, #0]
   d9c8c:	701a      	strb	r2, [r3, #0]
}
   d9c8e:	bd10      	pop	{r4, pc}
   d9c90:	000dc3d4 	.word	0x000dc3d4

000d9c94 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d9c94:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d9c96:	2b04      	cmp	r3, #4
   d9c98:	d101      	bne.n	d9c9e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d9c9a:	6840      	ldr	r0, [r0, #4]
   d9c9c:	e008      	b.n	d9cb0 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d9c9e:	2b06      	cmp	r3, #6
   d9ca0:	d10a      	bne.n	d9cb8 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9ca2:	6843      	ldr	r3, [r0, #4]
   d9ca4:	b953      	cbnz	r3, d9cbc <_ZNK9IPAddresscvbEv+0x28>
   d9ca6:	6883      	ldr	r3, [r0, #8]
   d9ca8:	b943      	cbnz	r3, d9cbc <_ZNK9IPAddresscvbEv+0x28>
   d9caa:	68c3      	ldr	r3, [r0, #12]
   d9cac:	b933      	cbnz	r3, d9cbc <_ZNK9IPAddresscvbEv+0x28>
   d9cae:	6900      	ldr	r0, [r0, #16]
   d9cb0:	3000      	adds	r0, #0
   d9cb2:	bf18      	it	ne
   d9cb4:	2001      	movne	r0, #1
   d9cb6:	4770      	bx	lr
    } else {
        return false;
   d9cb8:	2000      	movs	r0, #0
   d9cba:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9cbc:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9cbe:	4770      	bx	lr

000d9cc0 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9cc0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9cc2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9cc6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9cca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9cce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9cd2:	2304      	movs	r3, #4
   d9cd4:	6041      	str	r1, [r0, #4]
   d9cd6:	7503      	strb	r3, [r0, #20]
   d9cd8:	bd10      	pop	{r4, pc}

000d9cda <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9cda:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9cdc:	780d      	ldrb	r5, [r1, #0]
   d9cde:	788b      	ldrb	r3, [r1, #2]
   d9ce0:	784a      	ldrb	r2, [r1, #1]
   d9ce2:	78c9      	ldrb	r1, [r1, #3]
   d9ce4:	9100      	str	r1, [sp, #0]
   d9ce6:	4629      	mov	r1, r5
   d9ce8:	f7ff ffea 	bl	d9cc0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9cec:	b003      	add	sp, #12
   d9cee:	bd30      	pop	{r4, r5, pc}

000d9cf0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d9cf0:	b510      	push	{r4, lr}
   d9cf2:	4b03      	ldr	r3, [pc, #12]	; (d9d00 <_ZN9IPAddressC1EPKh+0x10>)
   d9cf4:	6003      	str	r3, [r0, #0]
   d9cf6:	4604      	mov	r4, r0
{
    *this = address;
   d9cf8:	f7ff ffef 	bl	d9cda <_ZN9IPAddressaSEPKh>
}
   d9cfc:	4620      	mov	r0, r4
   d9cfe:	bd10      	pop	{r4, pc}
   d9d00:	000dc3d4 	.word	0x000dc3d4

000d9d04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9d04:	7441      	strb	r1, [r0, #17]
   d9d06:	4770      	bx	lr

000d9d08 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9d08:	4770      	bx	lr

000d9d0a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9d0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9d0c:	2100      	movs	r1, #0
   d9d0e:	7c00      	ldrb	r0, [r0, #16]
   d9d10:	f7fc fc70 	bl	d65f4 <HAL_USB_USART_Receive_Data>
}
   d9d14:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d18:	bf28      	it	cs
   d9d1a:	f04f 30ff 	movcs.w	r0, #4294967295
   d9d1e:	bd08      	pop	{r3, pc}

000d9d20 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9d20:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9d22:	2101      	movs	r1, #1
   d9d24:	7c00      	ldrb	r0, [r0, #16]
   d9d26:	f7fc fc65 	bl	d65f4 <HAL_USB_USART_Receive_Data>
}
   d9d2a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9d2e:	bf28      	it	cs
   d9d30:	f04f 30ff 	movcs.w	r0, #4294967295
   d9d34:	bd08      	pop	{r3, pc}

000d9d36 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9d36:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9d38:	7c00      	ldrb	r0, [r0, #16]
   d9d3a:	f7fc fc53 	bl	d65e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d9d3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d42:	bd08      	pop	{r3, pc}

000d9d44 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9d44:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9d46:	7c00      	ldrb	r0, [r0, #16]
   d9d48:	f7fc fc44 	bl	d65d4 <HAL_USB_USART_Available_Data>
}
   d9d4c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9d50:	bd08      	pop	{r3, pc}

000d9d52 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9d52:	7c00      	ldrb	r0, [r0, #16]
   d9d54:	f7fc bc5e 	b.w	d6614 <HAL_USB_USART_Flush_Data>

000d9d58 <_ZN9USBSerialD0Ev>:
   d9d58:	b510      	push	{r4, lr}
   d9d5a:	2114      	movs	r1, #20
   d9d5c:	4604      	mov	r4, r0
   d9d5e:	f000 ff33 	bl	dabc8 <_ZdlPvj>
   d9d62:	4620      	mov	r0, r4
   d9d64:	bd10      	pop	{r4, pc}

000d9d66 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9d66:	b538      	push	{r3, r4, r5, lr}
   d9d68:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d6a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9d6c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9d6e:	f7fc fc39 	bl	d65e4 <HAL_USB_USART_Available_Data_For_Write>
   d9d72:	2800      	cmp	r0, #0
   d9d74:	dc01      	bgt.n	d9d7a <_ZN9USBSerial5writeEh+0x14>
   d9d76:	7c60      	ldrb	r0, [r4, #17]
   d9d78:	b128      	cbz	r0, d9d86 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9d7a:	4629      	mov	r1, r5
   d9d7c:	7c20      	ldrb	r0, [r4, #16]
   d9d7e:	f7fc fc41 	bl	d6604 <HAL_USB_USART_Send_Data>
   d9d82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9d86:	bd38      	pop	{r3, r4, r5, pc}

000d9d88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d88:	b510      	push	{r4, lr}
   d9d8a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9d8c:	2300      	movs	r3, #0
   d9d8e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9d90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9d94:	60a3      	str	r3, [r4, #8]
   d9d96:	4b05      	ldr	r3, [pc, #20]	; (d9dac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9d98:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9d9a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9d9c:	4608      	mov	r0, r1
{
  _serial = serial;
   d9d9e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9da0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9da2:	4611      	mov	r1, r2
   d9da4:	f7fc fbfe 	bl	d65a4 <HAL_USB_USART_Init>
}
   d9da8:	4620      	mov	r0, r4
   d9daa:	bd10      	pop	{r4, pc}
   d9dac:	000dc3e8 	.word	0x000dc3e8

000d9db0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9db0:	2200      	movs	r2, #0
   d9db2:	7c00      	ldrb	r0, [r0, #16]
   d9db4:	f7fc bbfe 	b.w	d65b4 <HAL_USB_USART_Begin>

000d9db8 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d9db8:	7c00      	ldrb	r0, [r0, #16]
   d9dba:	f7fc bc03 	b.w	d65c4 <HAL_USB_USART_End>

000d9dbe <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9dbe:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9dc0:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9dc2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9dc4:	2100      	movs	r1, #0
   d9dc6:	f001 f8a2 	bl	daf0e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9dca:	4620      	mov	r0, r4
   d9dcc:	bd10      	pop	{r4, pc}
	...

000d9dd0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9dd0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9dd2:	4d0e      	ldr	r5, [pc, #56]	; (d9e0c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9dd4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9dd6:	a801      	add	r0, sp, #4
   d9dd8:	f7ff fff1 	bl	d9dbe <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9ddc:	6829      	ldr	r1, [r5, #0]
   d9dde:	f011 0401 	ands.w	r4, r1, #1
   d9de2:	d110      	bne.n	d9e06 <_Z16_fetch_usbserialv+0x36>
   d9de4:	4628      	mov	r0, r5
   d9de6:	f7fa f969 	bl	d40bc <__cxa_guard_acquire>
   d9dea:	b160      	cbz	r0, d9e06 <_Z16_fetch_usbserialv+0x36>
   d9dec:	aa01      	add	r2, sp, #4
   d9dee:	4621      	mov	r1, r4
   d9df0:	4807      	ldr	r0, [pc, #28]	; (d9e10 <_Z16_fetch_usbserialv+0x40>)
   d9df2:	f7ff ffc9 	bl	d9d88 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9df6:	4628      	mov	r0, r5
   d9df8:	f7fa f965 	bl	d40c6 <__cxa_guard_release>
   d9dfc:	4a05      	ldr	r2, [pc, #20]	; (d9e14 <_Z16_fetch_usbserialv+0x44>)
   d9dfe:	4906      	ldr	r1, [pc, #24]	; (d9e18 <_Z16_fetch_usbserialv+0x48>)
   d9e00:	4803      	ldr	r0, [pc, #12]	; (d9e10 <_Z16_fetch_usbserialv+0x40>)
   d9e02:	f000 fed4 	bl	dabae <__aeabi_atexit>
	return _usbserial;
}
   d9e06:	4802      	ldr	r0, [pc, #8]	; (d9e10 <_Z16_fetch_usbserialv+0x40>)
   d9e08:	b007      	add	sp, #28
   d9e0a:	bd30      	pop	{r4, r5, pc}
   d9e0c:	2003e42c 	.word	0x2003e42c
   d9e10:	2003e430 	.word	0x2003e430
   d9e14:	2003d8c0 	.word	0x2003d8c0
   d9e18:	000d9d09 	.word	0x000d9d09

000d9e1c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9e1c:	4770      	bx	lr

000d9e1e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9e1e:	7441      	strb	r1, [r0, #17]
   d9e20:	4770      	bx	lr

000d9e22 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9e22:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9e24:	7c00      	ldrb	r0, [r0, #16]
   d9e26:	f7fc fb75 	bl	d6514 <HAL_USART_Available_Data_For_Write>
}
   d9e2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e2e:	bd08      	pop	{r3, pc}

000d9e30 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9e30:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9e32:	7c00      	ldrb	r0, [r0, #16]
   d9e34:	f7fc fb4e 	bl	d64d4 <HAL_USART_Available_Data>
}
   d9e38:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9e3c:	bd08      	pop	{r3, pc}

000d9e3e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9e3e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9e40:	7c00      	ldrb	r0, [r0, #16]
   d9e42:	f7fc fb57 	bl	d64f4 <HAL_USART_Peek_Data>
}
   d9e46:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e4a:	bf28      	it	cs
   d9e4c:	f04f 30ff 	movcs.w	r0, #4294967295
   d9e50:	bd08      	pop	{r3, pc}

000d9e52 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9e52:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9e54:	7c00      	ldrb	r0, [r0, #16]
   d9e56:	f7fc fb45 	bl	d64e4 <HAL_USART_Read_Data>
}
   d9e5a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9e5e:	bf28      	it	cs
   d9e60:	f04f 30ff 	movcs.w	r0, #4294967295
   d9e64:	bd08      	pop	{r3, pc}

000d9e66 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9e66:	7c00      	ldrb	r0, [r0, #16]
   d9e68:	f7fc bb4c 	b.w	d6504 <HAL_USART_Flush_Data>

000d9e6c <_ZN11USARTSerialD0Ev>:
   d9e6c:	b510      	push	{r4, lr}
   d9e6e:	2114      	movs	r1, #20
   d9e70:	4604      	mov	r4, r0
   d9e72:	f000 fea9 	bl	dabc8 <_ZdlPvj>
   d9e76:	4620      	mov	r0, r4
   d9e78:	bd10      	pop	{r4, pc}

000d9e7a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9e7a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9e7c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9e7e:	4604      	mov	r4, r0
   d9e80:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9e82:	b925      	cbnz	r5, d9e8e <_ZN11USARTSerial5writeEh+0x14>
   d9e84:	7c00      	ldrb	r0, [r0, #16]
   d9e86:	f7fc fb45 	bl	d6514 <HAL_USART_Available_Data_For_Write>
   d9e8a:	2800      	cmp	r0, #0
   d9e8c:	dd05      	ble.n	d9e9a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9e8e:	4631      	mov	r1, r6
   d9e90:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9e96:	f7fc bb15 	b.w	d64c4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9e9a:	4628      	mov	r0, r5
   d9e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9ea0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9ea0:	b510      	push	{r4, lr}
   d9ea2:	4604      	mov	r4, r0
   d9ea4:	4608      	mov	r0, r1
   d9ea6:	4611      	mov	r1, r2
   d9ea8:	2200      	movs	r2, #0
   d9eaa:	6062      	str	r2, [r4, #4]
   d9eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9eb0:	60a2      	str	r2, [r4, #8]
   d9eb2:	4a05      	ldr	r2, [pc, #20]	; (d9ec8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9eb4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9eb6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9eb8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9eba:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9ebc:	461a      	mov	r2, r3
   d9ebe:	f7fc faf1 	bl	d64a4 <HAL_USART_Init>
}
   d9ec2:	4620      	mov	r0, r4
   d9ec4:	bd10      	pop	{r4, pc}
   d9ec6:	bf00      	nop
   d9ec8:	000dc418 	.word	0x000dc418

000d9ecc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d9ecc:	2300      	movs	r3, #0
   d9ece:	7c00      	ldrb	r0, [r0, #16]
   d9ed0:	f7fc bb28 	b.w	d6524 <HAL_USART_BeginConfig>

000d9ed4 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d9ed4:	2200      	movs	r2, #0
   d9ed6:	f7ff bff9 	b.w	d9ecc <_ZN11USARTSerial5beginEmm>

000d9eda <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d9eda:	7c00      	ldrb	r0, [r0, #16]
   d9edc:	f7fc baea 	b.w	d64b4 <HAL_USART_End>

000d9ee0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9ee0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9ee2:	4d0c      	ldr	r5, [pc, #48]	; (d9f14 <_Z22__fetch_global_Serial1v+0x34>)
   d9ee4:	6829      	ldr	r1, [r5, #0]
   d9ee6:	f011 0401 	ands.w	r4, r1, #1
   d9eea:	d111      	bne.n	d9f10 <_Z22__fetch_global_Serial1v+0x30>
   d9eec:	4628      	mov	r0, r5
   d9eee:	f7fa f8e5 	bl	d40bc <__cxa_guard_acquire>
   d9ef2:	b168      	cbz	r0, d9f10 <_Z22__fetch_global_Serial1v+0x30>
   d9ef4:	4a08      	ldr	r2, [pc, #32]	; (d9f18 <_Z22__fetch_global_Serial1v+0x38>)
   d9ef6:	4b09      	ldr	r3, [pc, #36]	; (d9f1c <_Z22__fetch_global_Serial1v+0x3c>)
   d9ef8:	4809      	ldr	r0, [pc, #36]	; (d9f20 <_Z22__fetch_global_Serial1v+0x40>)
   d9efa:	4621      	mov	r1, r4
   d9efc:	f7ff ffd0 	bl	d9ea0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9f00:	4628      	mov	r0, r5
   d9f02:	f7fa f8e0 	bl	d40c6 <__cxa_guard_release>
   d9f06:	4a07      	ldr	r2, [pc, #28]	; (d9f24 <_Z22__fetch_global_Serial1v+0x44>)
   d9f08:	4907      	ldr	r1, [pc, #28]	; (d9f28 <_Z22__fetch_global_Serial1v+0x48>)
   d9f0a:	4805      	ldr	r0, [pc, #20]	; (d9f20 <_Z22__fetch_global_Serial1v+0x40>)
   d9f0c:	f000 fe4f 	bl	dabae <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9f10:	4803      	ldr	r0, [pc, #12]	; (d9f20 <_Z22__fetch_global_Serial1v+0x40>)
   d9f12:	bd38      	pop	{r3, r4, r5, pc}
   d9f14:	2003e4dc 	.word	0x2003e4dc
   d9f18:	2003e4e0 	.word	0x2003e4e0
   d9f1c:	2003e458 	.word	0x2003e458
   d9f20:	2003e444 	.word	0x2003e444
   d9f24:	2003d8c0 	.word	0x2003d8c0
   d9f28:	000d9e1d 	.word	0x000d9e1d

000d9f2c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d9f2c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9f2e:	6883      	ldr	r3, [r0, #8]
   d9f30:	4604      	mov	r4, r0
   d9f32:	b90b      	cbnz	r3, d9f38 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d9f34:	f000 fe59 	bl	dabea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9f38:	68c3      	ldr	r3, [r0, #12]
   d9f3a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d9f3c:	68a3      	ldr	r3, [r4, #8]
   d9f3e:	b11b      	cbz	r3, d9f48 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9f40:	2203      	movs	r2, #3
   d9f42:	4621      	mov	r1, r4
   d9f44:	4620      	mov	r0, r4
   d9f46:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9f48:	4620      	mov	r0, r4
   d9f4a:	2110      	movs	r1, #16
}
   d9f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9f50:	f000 be3a 	b.w	dabc8 <_ZdlPvj>

000d9f54 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9f54:	2200      	movs	r2, #0
   d9f56:	4611      	mov	r1, r2
   d9f58:	6840      	ldr	r0, [r0, #4]
   d9f5a:	f7fc bbff 	b.w	d675c <network_listening>

000d9f5e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d9f5e:	2200      	movs	r2, #0
   d9f60:	4611      	mov	r1, r2
   d9f62:	6840      	ldr	r0, [r0, #4]
   d9f64:	f7fc bc0a 	b.w	d677c <network_get_listen_timeout>

000d9f68 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d9f68:	2200      	movs	r2, #0
   d9f6a:	6840      	ldr	r0, [r0, #4]
   d9f6c:	f7fc bbfe 	b.w	d676c <network_set_listen_timeout>

000d9f70 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d9f70:	2200      	movs	r2, #0
   d9f72:	f081 0101 	eor.w	r1, r1, #1
   d9f76:	6840      	ldr	r0, [r0, #4]
   d9f78:	f7fc bbe8 	b.w	d674c <network_listen>

000d9f7c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d9f7c:	2300      	movs	r3, #0
   d9f7e:	461a      	mov	r2, r3
   d9f80:	2101      	movs	r1, #1
   d9f82:	6840      	ldr	r0, [r0, #4]
   d9f84:	f7fc bbda 	b.w	d673c <network_off>

000d9f88 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d9f88:	2300      	movs	r3, #0
   d9f8a:	461a      	mov	r2, r3
   d9f8c:	4619      	mov	r1, r3
   d9f8e:	6840      	ldr	r0, [r0, #4]
   d9f90:	f7fc bbcc 	b.w	d672c <network_on>

000d9f94 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d9f94:	2200      	movs	r2, #0
   d9f96:	4611      	mov	r1, r2
   d9f98:	6840      	ldr	r0, [r0, #4]
   d9f9a:	f7fc bbbf 	b.w	d671c <network_ready>

000d9f9e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d9f9e:	2200      	movs	r2, #0
   d9fa0:	4611      	mov	r1, r2
   d9fa2:	6840      	ldr	r0, [r0, #4]
   d9fa4:	f7fc bbaa 	b.w	d66fc <network_connecting>

000d9fa8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d9fa8:	2200      	movs	r2, #0
   d9faa:	2102      	movs	r1, #2
   d9fac:	6840      	ldr	r0, [r0, #4]
   d9fae:	f7fc bbad 	b.w	d670c <network_disconnect>

000d9fb2 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d9fb2:	2300      	movs	r3, #0
   d9fb4:	461a      	mov	r2, r3
   d9fb6:	6840      	ldr	r0, [r0, #4]
   d9fb8:	f7fc bb98 	b.w	d66ec <network_connect>

000d9fbc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d9fbc:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9fbe:	4605      	mov	r5, r0
   d9fc0:	b188      	cbz	r0, d9fe6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d9fc2:	6804      	ldr	r4, [r0, #0]
   d9fc4:	b14c      	cbz	r4, d9fda <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d9fc6:	68a3      	ldr	r3, [r4, #8]
   d9fc8:	b11b      	cbz	r3, d9fd2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9fca:	2203      	movs	r2, #3
   d9fcc:	4621      	mov	r1, r4
   d9fce:	4620      	mov	r0, r4
   d9fd0:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9fd2:	2110      	movs	r1, #16
   d9fd4:	4620      	mov	r0, r4
   d9fd6:	f000 fdf7 	bl	dabc8 <_ZdlPvj>
   d9fda:	4628      	mov	r0, r5
   d9fdc:	2114      	movs	r1, #20
      }
   d9fde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d9fe2:	f000 bdf1 	b.w	dabc8 <_ZdlPvj>
   d9fe6:	bd38      	pop	{r3, r4, r5, pc}

000d9fe8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d9fe8:	b110      	cbz	r0, d9ff0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d9fea:	6803      	ldr	r3, [r0, #0]
   d9fec:	685b      	ldr	r3, [r3, #4]
   d9fee:	4718      	bx	r3
   d9ff0:	4770      	bx	lr

000d9ff2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d9ff2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d9ff4:	6803      	ldr	r3, [r0, #0]
   d9ff6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d9ff8:	b1bb      	cbz	r3, da02a <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d9ffa:	6858      	ldr	r0, [r3, #4]
   d9ffc:	f7fc fa02 	bl	d6404 <os_thread_is_current>
   da000:	b978      	cbnz	r0, da022 <_ZN6ThreadD1Ev+0x30>
   da002:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   da004:	7c5a      	ldrb	r2, [r3, #17]
   da006:	b912      	cbnz	r2, da00e <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   da008:	6858      	ldr	r0, [r3, #4]
   da00a:	f7fc fa03 	bl	d6414 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   da00e:	6823      	ldr	r3, [r4, #0]
   da010:	6858      	ldr	r0, [r3, #4]
   da012:	f7fc fa07 	bl	d6424 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da016:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da018:	2300      	movs	r3, #0
   da01a:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da01c:	b128      	cbz	r0, da02a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   da01e:	f7ff ffcd 	bl	d9fbc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da022:	6820      	ldr	r0, [r4, #0]
   da024:	b108      	cbz	r0, da02a <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   da026:	f7ff ffc9 	bl	d9fbc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   da02a:	4620      	mov	r0, r4
   da02c:	bd10      	pop	{r4, pc}

000da02e <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   da02e:	b538      	push	{r3, r4, r5, lr}
   da030:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da032:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   da036:	b108      	cbz	r0, da03c <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   da038:	f7fa f833 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da03c:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   da040:	b108      	cbz	r0, da046 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   da042:	f7fc f9ff 	bl	d6444 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da046:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   da04a:	b135      	cbz	r5, da05a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da04c:	4628      	mov	r0, r5
   da04e:	f7ff ffd0 	bl	d9ff2 <_ZN6ThreadD1Ev>
   da052:	2104      	movs	r1, #4
   da054:	4628      	mov	r0, r5
   da056:	f000 fdb7 	bl	dabc8 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da05a:	6820      	ldr	r0, [r4, #0]
   da05c:	b108      	cbz	r0, da062 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   da05e:	f7ff ffc3 	bl	d9fe8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   da062:	4620      	mov	r0, r4
   da064:	bd38      	pop	{r3, r4, r5, pc}
	...

000da068 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   da068:	b510      	push	{r4, lr}
   da06a:	4b04      	ldr	r3, [pc, #16]	; (da07c <_ZN5spark9MeshClassD1Ev+0x14>)
   da06c:	4604      	mov	r4, r0
   da06e:	f840 3b08 	str.w	r3, [r0], #8
   da072:	f7ff ffdc 	bl	da02e <_ZN5spark11MeshPublishD1Ev>
   da076:	4620      	mov	r0, r4
   da078:	bd10      	pop	{r4, pc}
   da07a:	bf00      	nop
   da07c:	000dc448 	.word	0x000dc448

000da080 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   da080:	b538      	push	{r3, r4, r5, lr}
   da082:	4c0e      	ldr	r4, [pc, #56]	; (da0bc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   da084:	4b0e      	ldr	r3, [pc, #56]	; (da0c0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   da086:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da088:	2500      	movs	r5, #0
   da08a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   da08c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   da090:	6063      	str	r3, [r4, #4]
   da092:	60a5      	str	r5, [r4, #8]
   da094:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da098:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   da09c:	f7fc f9ca 	bl	d6434 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   da0a0:	4b08      	ldr	r3, [pc, #32]	; (da0c4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   da0a2:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da0a6:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   da0aa:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   da0ac:	4620      	mov	r0, r4
   da0ae:	4a06      	ldr	r2, [pc, #24]	; (da0c8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   da0b0:	4906      	ldr	r1, [pc, #24]	; (da0cc <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   da0b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   da0b6:	f000 bd7a 	b.w	dabae <__aeabi_atexit>
   da0ba:	bf00      	nop
   da0bc:	2003e564 	.word	0x2003e564
   da0c0:	000dc530 	.word	0x000dc530
   da0c4:	000dc448 	.word	0x000dc448
   da0c8:	2003d8c0 	.word	0x2003d8c0
   da0cc:	000da069 	.word	0x000da069

000da0d0 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da0d2:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da0d4:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da0d6:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da0da:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da0dc:	2201      	movs	r2, #1
   da0de:	f04f 33ff 	mov.w	r3, #4294967295
   da0e2:	4621      	mov	r1, r4
   da0e4:	47a8      	blx	r5
}
   da0e6:	b003      	add	sp, #12
   da0e8:	bd30      	pop	{r4, r5, pc}

000da0ea <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   da0ea:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da0ec:	6803      	ldr	r3, [r0, #0]
   da0ee:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da0f0:	f04f 33ff 	mov.w	r3, #4294967295
   da0f4:	46a4      	mov	ip, r4
}
   da0f6:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da0fa:	4760      	bx	ip

000da0fc <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da0fe:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   da100:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da102:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   da106:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da108:	4621      	mov	r1, r4
   da10a:	4613      	mov	r3, r2
   da10c:	2201      	movs	r2, #1
   da10e:	47a8      	blx	r5
}
   da110:	b003      	add	sp, #12
   da112:	bd30      	pop	{r4, r5, pc}

000da114 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   da114:	4770      	bx	lr

000da116 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da116:	b538      	push	{r3, r4, r5, lr}
   da118:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   da11a:	681a      	ldr	r2, [r3, #0]
   da11c:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da11e:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   da120:	da05      	bge.n	da12e <_ZN9TCPClient9connectedEv+0x18>
   da122:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da126:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da12a:	429a      	cmp	r2, r3
   da12c:	d001      	beq.n	da132 <_ZN9TCPClient9connectedEv+0x1c>
   da12e:	2501      	movs	r5, #1
   da130:	e00b      	b.n	da14a <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   da132:	6803      	ldr	r3, [r0, #0]
   da134:	691b      	ldr	r3, [r3, #16]
   da136:	4798      	blx	r3
   da138:	2800      	cmp	r0, #0
   da13a:	bf14      	ite	ne
   da13c:	2501      	movne	r5, #1
   da13e:	2500      	moveq	r5, #0
        if (!rv) {
   da140:	d103      	bne.n	da14a <_ZN9TCPClient9connectedEv+0x34>
            stop();
   da142:	6823      	ldr	r3, [r4, #0]
   da144:	4620      	mov	r0, r4
   da146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da148:	4798      	blx	r3
        }
    }
    return rv;
}
   da14a:	4628      	mov	r0, r5
   da14c:	bd38      	pop	{r3, r4, r5, pc}

000da14e <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   da14e:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   da150:	6818      	ldr	r0, [r3, #0]
}
   da152:	43c0      	mvns	r0, r0
   da154:	0fc0      	lsrs	r0, r0, #31
   da156:	4770      	bx	lr

000da158 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da158:	4770      	bx	lr

000da15a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   da15a:	2000      	movs	r0, #0
   da15c:	4770      	bx	lr

000da15e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da15e:	b510      	push	{r4, lr}
   da160:	2114      	movs	r1, #20
   da162:	4604      	mov	r4, r0
   da164:	f000 fd30 	bl	dabc8 <_ZdlPvj>
   da168:	4620      	mov	r0, r4
   da16a:	bd10      	pop	{r4, pc}

000da16c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da16c:	f7f9 bf97 	b.w	d409e <_ZdlPv>

000da170 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da172:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   da174:	2200      	movs	r2, #0
   da176:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   da178:	9202      	str	r2, [sp, #8]
   da17a:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   da17c:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da17e:	4604      	mov	r4, r0
   da180:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   da182:	d008      	beq.n	da196 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   da184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da188:	fbb3 f1f2 	udiv	r1, r3, r2
   da18c:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da18e:	fb02 3111 	mls	r1, r2, r1, r3
   da192:	434a      	muls	r2, r1
   da194:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da196:	6960      	ldr	r0, [r4, #20]
   da198:	2308      	movs	r3, #8
   da19a:	9300      	str	r3, [sp, #0]
   da19c:	f241 0205 	movw	r2, #4101	; 0x1005
   da1a0:	446b      	add	r3, sp
   da1a2:	f640 71ff 	movw	r1, #4095	; 0xfff
   da1a6:	6800      	ldr	r0, [r0, #0]
   da1a8:	f7fc f9c4 	bl	d6534 <sock_setsockopt>
    if (ret < 0) {
   da1ac:	2800      	cmp	r0, #0
   da1ae:	db08      	blt.n	da1c2 <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   da1b0:	6960      	ldr	r0, [r4, #20]
   da1b2:	2300      	movs	r3, #0
   da1b4:	4632      	mov	r2, r6
   da1b6:	4629      	mov	r1, r5
   da1b8:	6800      	ldr	r0, [r0, #0]
   da1ba:	f7fc f9db 	bl	d6574 <sock_send>
    if (ret < 0) {
   da1be:	2800      	cmp	r0, #0
   da1c0:	da04      	bge.n	da1cc <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   da1c2:	f7fc fb4b 	bl	d685c <__errno>
   da1c6:	6803      	ldr	r3, [r0, #0]
   da1c8:	6063      	str	r3, [r4, #4]
   da1ca:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   da1cc:	b004      	add	sp, #16
   da1ce:	bd70      	pop	{r4, r5, r6, pc}

000da1d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da1d0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da1d2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da1d4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da1d6:	689b      	ldr	r3, [r3, #8]
   da1d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da1da:	68a3      	ldr	r3, [r4, #8]
   da1dc:	3b01      	subs	r3, #1
   da1de:	60a3      	str	r3, [r4, #8]
   da1e0:	b92b      	cbnz	r3, da1ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   da1e2:	6823      	ldr	r3, [r4, #0]
   da1e4:	4620      	mov	r0, r4
   da1e6:	68db      	ldr	r3, [r3, #12]
        }
    }
   da1e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   da1ec:	4718      	bx	r3
   da1ee:	bd10      	pop	{r4, pc}

000da1f0 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   da1f0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da1f2:	4604      	mov	r4, r0
   da1f4:	694d      	ldr	r5, [r1, #20]
   da1f6:	4b05      	ldr	r3, [pc, #20]	; (da20c <_ZN9TCPClient8remoteIPEv+0x1c>)
   da1f8:	f844 3b04 	str.w	r3, [r4], #4
   da1fc:	358c      	adds	r5, #140	; 0x8c
   da1fe:	4606      	mov	r6, r0
   da200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da204:	682b      	ldr	r3, [r5, #0]
   da206:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da208:	4630      	mov	r0, r6
   da20a:	bd70      	pop	{r4, r5, r6, pc}
   da20c:	000dc3d4 	.word	0x000dc3d4

000da210 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da210:	b510      	push	{r4, lr}
   da212:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da214:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da218:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da21c:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da21e:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da220:	d005      	beq.n	da22e <_ZN9TCPClient4peekEv+0x1e>
   da222:	6962      	ldr	r2, [r4, #20]
   da224:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da228:	4413      	add	r3, r2
   da22a:	7918      	ldrb	r0, [r3, #4]
   da22c:	bd10      	pop	{r4, pc}
   da22e:	6803      	ldr	r3, [r0, #0]
   da230:	691b      	ldr	r3, [r3, #16]
   da232:	4798      	blx	r3
   da234:	2800      	cmp	r0, #0
   da236:	d1f4      	bne.n	da222 <_ZN9TCPClient4peekEv+0x12>
   da238:	f04f 30ff 	mov.w	r0, #4294967295
}
   da23c:	bd10      	pop	{r4, pc}

000da23e <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da23e:	b510      	push	{r4, lr}
   da240:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da242:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da246:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da24a:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da24c:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da24e:	d008      	beq.n	da262 <_ZN9TCPClient4readEv+0x24>
   da250:	6962      	ldr	r2, [r4, #20]
   da252:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da256:	1c59      	adds	r1, r3, #1
   da258:	4413      	add	r3, r2
   da25a:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   da25e:	7918      	ldrb	r0, [r3, #4]
   da260:	bd10      	pop	{r4, pc}
   da262:	6803      	ldr	r3, [r0, #0]
   da264:	691b      	ldr	r3, [r3, #16]
   da266:	4798      	blx	r3
   da268:	2800      	cmp	r0, #0
   da26a:	d1f1      	bne.n	da250 <_ZN9TCPClient4readEv+0x12>
   da26c:	f04f 30ff 	mov.w	r0, #4294967295
}
   da270:	bd10      	pop	{r4, pc}

000da272 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   da272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da274:	6943      	ldr	r3, [r0, #20]
   da276:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   da278:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da27c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da280:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   da282:	4605      	mov	r5, r0
   da284:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   da286:	d106      	bne.n	da296 <_ZN9TCPClient4readEPhj+0x24>
   da288:	6803      	ldr	r3, [r0, #0]
   da28a:	691b      	ldr	r3, [r3, #16]
   da28c:	4798      	blx	r3
   da28e:	b910      	cbnz	r0, da296 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   da290:	f04f 34ff 	mov.w	r4, #4294967295
   da294:	e014      	b.n	da2c0 <_ZN9TCPClient4readEPhj+0x4e>
   da296:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   da298:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da29c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da2a0:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da2a2:	42bc      	cmp	r4, r7
   da2a4:	bf28      	it	cs
   da2a6:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da2a8:	4419      	add	r1, r3
   da2aa:	4622      	mov	r2, r4
   da2ac:	3104      	adds	r1, #4
   da2ae:	4630      	mov	r0, r6
   da2b0:	f000 fe07 	bl	daec2 <memcpy>
   da2b4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da2b6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da2ba:	4423      	add	r3, r4
   da2bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   da2c0:	4620      	mov	r0, r4
   da2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da2c4 <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da2c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da2c8:	4698      	mov	r8, r3
    stop();
   da2ca:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da2cc:	b093      	sub	sp, #76	; 0x4c
    stop();
   da2ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da2d0:	460d      	mov	r5, r1
   da2d2:	4606      	mov	r6, r0
   da2d4:	4617      	mov	r7, r2
    stop();
   da2d6:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   da2d8:	ab12      	add	r3, sp, #72	; 0x48
   da2da:	2400      	movs	r4, #0
   da2dc:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da2e0:	4622      	mov	r2, r4
   da2e2:	4621      	mov	r1, r4
   da2e4:	4628      	mov	r0, r5
   da2e6:	f7fb ffbb 	bl	d6260 <netdb_getaddrinfo>
   da2ea:	4681      	mov	r9, r0
   da2ec:	2800      	cmp	r0, #0
   da2ee:	d13d      	bne.n	da36c <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   da2f0:	9b00      	ldr	r3, [sp, #0]
   da2f2:	2b00      	cmp	r3, #0
   da2f4:	d056      	beq.n	da3a4 <_ZN9TCPClient7connectEPKctm+0xe0>
   da2f6:	695b      	ldr	r3, [r3, #20]
   da2f8:	2b00      	cmp	r3, #0
   da2fa:	d053      	beq.n	da3a4 <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   da2fc:	a806      	add	r0, sp, #24
   da2fe:	f7ff fca9 	bl	d9c54 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da302:	9b00      	ldr	r3, [sp, #0]
   da304:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da306:	7863      	ldrb	r3, [r4, #1]
   da308:	2b02      	cmp	r3, #2
   da30a:	d101      	bne.n	da310 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da30c:	1d21      	adds	r1, r4, #4
   da30e:	e013      	b.n	da338 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   da310:	2b0a      	cmp	r3, #10
   da312:	d114      	bne.n	da33e <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   da314:	2211      	movs	r2, #17
   da316:	4649      	mov	r1, r9
   da318:	a801      	add	r0, sp, #4
   da31a:	f000 fdf8 	bl	daf0e <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da31e:	68a3      	ldr	r3, [r4, #8]
   da320:	bb33      	cbnz	r3, da370 <_ZN9TCPClient7connectEPKctm+0xac>
   da322:	68e3      	ldr	r3, [r4, #12]
   da324:	bb23      	cbnz	r3, da370 <_ZN9TCPClient7connectEPKctm+0xac>
   da326:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da32a:	6925      	ldr	r5, [r4, #16]
   da32c:	f7fc f8aa 	bl	d6484 <inet_htonl>
   da330:	4285      	cmp	r5, r0
   da332:	d11d      	bne.n	da370 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da334:	f104 0114 	add.w	r1, r4, #20
   da338:	a806      	add	r0, sp, #24
   da33a:	f7ff fcce 	bl	d9cda <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   da33e:	a806      	add	r0, sp, #24
   da340:	f7ff fca8 	bl	d9c94 <_ZNK9IPAddresscvbEv>
        if (addr) {
   da344:	2800      	cmp	r0, #0
   da346:	d02d      	beq.n	da3a4 <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   da348:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da34a:	ad07      	add	r5, sp, #28
   da34c:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da350:	4b18      	ldr	r3, [pc, #96]	; (da3b4 <_ZN9TCPClient7connectEPKctm+0xf0>)
   da352:	930c      	str	r3, [sp, #48]	; 0x30
   da354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da356:	ac0d      	add	r4, sp, #52	; 0x34
   da358:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da35a:	682b      	ldr	r3, [r5, #0]
   da35c:	7023      	strb	r3, [r4, #0]
   da35e:	463a      	mov	r2, r7
   da360:	4643      	mov	r3, r8
   da362:	a90c      	add	r1, sp, #48	; 0x30
   da364:	4630      	mov	r0, r6
   da366:	47c8      	blx	r9
   da368:	4681      	mov	r9, r0
   da36a:	e01b      	b.n	da3a4 <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da36c:	46a1      	mov	r9, r4
   da36e:	e019      	b.n	da3a4 <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da370:	f104 0308 	add.w	r3, r4, #8
   da374:	ad01      	add	r5, sp, #4
   da376:	3418      	adds	r4, #24
   da378:	6818      	ldr	r0, [r3, #0]
   da37a:	6859      	ldr	r1, [r3, #4]
   da37c:	462a      	mov	r2, r5
   da37e:	c203      	stmia	r2!, {r0, r1}
   da380:	3308      	adds	r3, #8
   da382:	42a3      	cmp	r3, r4
   da384:	4615      	mov	r5, r2
   da386:	d1f7      	bne.n	da378 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   da388:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da38a:	a901      	add	r1, sp, #4
   da38c:	a80c      	add	r0, sp, #48	; 0x30
   da38e:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   da390:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da394:	f7ff fc6c 	bl	d9c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da39a:	ac07      	add	r4, sp, #28
   da39c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da39e:	682b      	ldr	r3, [r5, #0]
   da3a0:	7023      	strb	r3, [r4, #0]
   da3a2:	e7cc      	b.n	da33e <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   da3a4:	9800      	ldr	r0, [sp, #0]
   da3a6:	f7fb ff53 	bl	d6250 <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   da3aa:	4648      	mov	r0, r9
   da3ac:	b013      	add	sp, #76	; 0x4c
   da3ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da3b2:	bf00      	nop
   da3b4:	000dc3d4 	.word	0x000dc3d4

000da3b8 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   da3b8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da3ba:	2300      	movs	r3, #0
   da3bc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da3c0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da3c2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   da3c6:	4770      	bx	lr

000da3c8 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da3c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da3cc:	461e      	mov	r6, r3
    stop();
   da3ce:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da3d0:	460c      	mov	r4, r1
   da3d2:	b08a      	sub	sp, #40	; 0x28
    stop();
   da3d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da3d6:	4605      	mov	r5, r0
   da3d8:	4617      	mov	r7, r2
    stop();
   da3da:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da3dc:	7d23      	ldrb	r3, [r4, #20]
   da3de:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da3e2:	2b04      	cmp	r3, #4
   da3e4:	bf0c      	ite	eq
   da3e6:	2002      	moveq	r0, #2
   da3e8:	200a      	movne	r0, #10
   da3ea:	2206      	movs	r2, #6
   da3ec:	2101      	movs	r1, #1
   da3ee:	f7fc f8c9 	bl	d6584 <sock_socket>
   da3f2:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da3f6:	696b      	ldr	r3, [r5, #20]
   da3f8:	681b      	ldr	r3, [r3, #0]
   da3fa:	2b00      	cmp	r3, #0
   da3fc:	db18      	blt.n	da430 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   da3fe:	4628      	mov	r0, r5
   da400:	f7ff ffda 	bl	da3b8 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   da404:	b1d6      	cbz	r6, da43c <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   da406:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da408:	a903      	add	r1, sp, #12
   da40a:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   da40c:	9303      	str	r3, [sp, #12]
   da40e:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da412:	f7fb ff35 	bl	d6280 <if_index_to_name>
   da416:	b958      	cbnz	r0, da430 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da418:	6968      	ldr	r0, [r5, #20]
   da41a:	2306      	movs	r3, #6
   da41c:	9300      	str	r3, [sp, #0]
   da41e:	f241 020b 	movw	r2, #4107	; 0x100b
   da422:	ab03      	add	r3, sp, #12
   da424:	f640 71ff 	movw	r1, #4095	; 0xfff
   da428:	6800      	ldr	r0, [r0, #0]
   da42a:	f7fc f883 	bl	d6534 <sock_setsockopt>
   da42e:	b128      	cbz	r0, da43c <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da430:	682b      	ldr	r3, [r5, #0]
   da432:	4628      	mov	r0, r5
   da434:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da436:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da438:	4798      	blx	r3
   da43a:	e03b      	b.n	da4b4 <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   da43c:	261c      	movs	r6, #28
   da43e:	4632      	mov	r2, r6
   da440:	2100      	movs	r1, #0
   da442:	a803      	add	r0, sp, #12
   da444:	f000 fd63 	bl	daf0e <memset>
    if (ip.version() == 4) {
   da448:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   da44a:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   da44e:	2b04      	cmp	r3, #4
   da450:	d10c      	bne.n	da46c <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da452:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   da454:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da456:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   da45a:	f7fc f81b 	bl	d6494 <inet_htons>
   da45e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da462:	6860      	ldr	r0, [r4, #4]
   da464:	f7fc f80e 	bl	d6484 <inet_htonl>
   da468:	9004      	str	r0, [sp, #16]
   da46a:	e013      	b.n	da494 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da46c:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   da46e:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da470:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   da474:	f7fc f80e 	bl	d6494 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da478:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   da47a:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da47e:	1d23      	adds	r3, r4, #4
   da480:	f104 0714 	add.w	r7, r4, #20
   da484:	6818      	ldr	r0, [r3, #0]
   da486:	6859      	ldr	r1, [r3, #4]
   da488:	4632      	mov	r2, r6
   da48a:	c203      	stmia	r2!, {r0, r1}
   da48c:	3308      	adds	r3, #8
   da48e:	42bb      	cmp	r3, r7
   da490:	4616      	mov	r6, r2
   da492:	d1f7      	bne.n	da484 <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da494:	696b      	ldr	r3, [r5, #20]
   da496:	221c      	movs	r2, #28
   da498:	a903      	add	r1, sp, #12
   da49a:	6818      	ldr	r0, [r3, #0]
   da49c:	f7fc f85a 	bl	d6554 <sock_connect>
   da4a0:	2800      	cmp	r0, #0
   da4a2:	d1c5      	bne.n	da430 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   da4a4:	3404      	adds	r4, #4
   da4a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da4a8:	696d      	ldr	r5, [r5, #20]
   da4aa:	358c      	adds	r5, #140	; 0x8c
   da4ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da4ae:	6823      	ldr	r3, [r4, #0]
   da4b0:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   da4b2:	2401      	movs	r4, #1
}
   da4b4:	4620      	mov	r0, r4
   da4b6:	b00a      	add	sp, #40	; 0x28
   da4b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da4bc <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da4bc:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da4be:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da4c0:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da4c2:	6818      	ldr	r0, [r3, #0]
   da4c4:	2800      	cmp	r0, #0
   da4c6:	db01      	blt.n	da4cc <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da4c8:	f7fc f83c 	bl	d6544 <sock_close>
   da4cc:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   da4ce:	f04f 32ff 	mov.w	r2, #4294967295
   da4d2:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   da4d4:	6960      	ldr	r0, [r4, #20]
   da4d6:	2211      	movs	r2, #17
   da4d8:	2100      	movs	r1, #0
   da4da:	308c      	adds	r0, #140	; 0x8c
   da4dc:	f000 fd17 	bl	daf0e <memset>
    d_->remoteIP.clear();
    flush_buffer();
   da4e0:	4620      	mov	r0, r4
}
   da4e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   da4e6:	f7ff bf67 	b.w	da3b8 <_ZN9TCPClient12flush_bufferEv>
	...

000da4ec <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da4ec:	b530      	push	{r4, r5, lr}
   da4ee:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da4f0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da4f4:	b08b      	sub	sp, #44	; 0x2c
   da4f6:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da4f8:	b11b      	cbz	r3, da502 <_ZN9TCPClient9availableEv+0x16>
   da4fa:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da4fe:	429a      	cmp	r2, r3
   da500:	d040      	beq.n	da584 <_ZN9TCPClient9availableEv+0x98>
   da502:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   da504:	6818      	ldr	r0, [r3, #0]
   da506:	2800      	cmp	r0, #0
   da508:	db3f      	blt.n	da58a <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   da50a:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   da50e:	2d7f      	cmp	r5, #127	; 0x7f
   da510:	d83b      	bhi.n	da58a <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da512:	1d19      	adds	r1, r3, #4
   da514:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da518:	2308      	movs	r3, #8
   da51a:	4429      	add	r1, r5
   da51c:	f7fc f822 	bl	d6564 <sock_recv>
            if (ret > 0) {
   da520:	2800      	cmp	r0, #0
   da522:	dd0c      	ble.n	da53e <_ZN9TCPClient9availableEv+0x52>
   da524:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da526:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da52a:	b90a      	cbnz	r2, da530 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   da52c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da530:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   da532:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da536:	4418      	add	r0, r3
   da538:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   da53c:	e025      	b.n	da58a <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da53e:	f7fc f98d 	bl	d685c <__errno>
   da542:	6803      	ldr	r3, [r0, #0]
   da544:	2b0b      	cmp	r3, #11
   da546:	d020      	beq.n	da58a <_ZN9TCPClient9availableEv+0x9e>
   da548:	f7fc f988 	bl	d685c <__errno>
   da54c:	6803      	ldr	r3, [r0, #0]
   da54e:	2b0b      	cmp	r3, #11
   da550:	d01b      	beq.n	da58a <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   da552:	2320      	movs	r3, #32
   da554:	2500      	movs	r5, #0
   da556:	9302      	str	r3, [sp, #8]
   da558:	9503      	str	r5, [sp, #12]
   da55a:	f7fc f97f 	bl	d685c <__errno>
   da55e:	6803      	ldr	r3, [r0, #0]
   da560:	9301      	str	r3, [sp, #4]
   da562:	4b0e      	ldr	r3, [pc, #56]	; (da59c <_ZN9TCPClient9availableEv+0xb0>)
   da564:	9300      	str	r3, [sp, #0]
   da566:	aa02      	add	r2, sp, #8
   da568:	462b      	mov	r3, r5
   da56a:	490d      	ldr	r1, [pc, #52]	; (da5a0 <_ZN9TCPClient9availableEv+0xb4>)
   da56c:	2032      	movs	r0, #50	; 0x32
   da56e:	f7fc f861 	bl	d6634 <log_message>
                    sock_close(d_->sock);
   da572:	6963      	ldr	r3, [r4, #20]
   da574:	6818      	ldr	r0, [r3, #0]
   da576:	f7fb ffe5 	bl	d6544 <sock_close>
   da57a:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da57c:	f04f 32ff 	mov.w	r2, #4294967295
   da580:	601a      	str	r2, [r3, #0]
   da582:	e002      	b.n	da58a <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   da584:	f7ff ff18 	bl	da3b8 <_ZN9TCPClient12flush_bufferEv>
   da588:	e7bb      	b.n	da502 <_ZN9TCPClient9availableEv+0x16>
   da58a:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   da58c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da590:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   da594:	1a18      	subs	r0, r3, r0
}
   da596:	b00b      	add	sp, #44	; 0x2c
   da598:	bd30      	pop	{r4, r5, pc}
   da59a:	bf00      	nop
   da59c:	000dc4e3 	.word	0x000dc4e3
   da5a0:	000dc4dc 	.word	0x000dc4dc

000da5a4 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da5a4:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da5a6:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da5a8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   da5aa:	6001      	str	r1, [r0, #0]
   da5ac:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   da5b0:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   da5b4:	3088      	adds	r0, #136	; 0x88
   da5b6:	f7ff fb4d 	bl	d9c54 <_ZN9IPAddressC1Ev>
}
   da5ba:	4620      	mov	r0, r4
   da5bc:	bd10      	pop	{r4, pc}
	...

000da5c0 <_ZN9TCPClientC1Ei>:
   da5c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da5c4:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   da5c6:	2300      	movs	r3, #0
   da5c8:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   da5ca:	4a14      	ldr	r2, [pc, #80]	; (da61c <_ZN9TCPClientC1Ei+0x5c>)
   da5cc:	6043      	str	r3, [r0, #4]
   da5ce:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   da5d0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da5d2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da5d4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da5d6:	20a0      	movs	r0, #160	; 0xa0
   da5d8:	460e      	mov	r6, r1
   da5da:	f7f9 fd5c 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da5de:	4605      	mov	r5, r0
   da5e0:	b110      	cbz	r0, da5e8 <_ZN9TCPClientC1Ei+0x28>
   da5e2:	4631      	mov	r1, r6
   da5e4:	f7ff ffde 	bl	da5a4 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da5e8:	2014      	movs	r0, #20
   da5ea:	f7f9 fd54 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   da5ee:	4603      	mov	r3, r0
   da5f0:	b128      	cbz	r0, da5fe <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   da5f2:	2201      	movs	r2, #1
   da5f4:	6042      	str	r2, [r0, #4]
   da5f6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   da5f8:	4a09      	ldr	r2, [pc, #36]	; (da620 <_ZN9TCPClientC1Ei+0x60>)
   da5fa:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   da5fc:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da5fe:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   da600:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da602:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da604:	b128      	cbz	r0, da612 <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da606:	6843      	ldr	r3, [r0, #4]
   da608:	3b01      	subs	r3, #1
   da60a:	6043      	str	r3, [r0, #4]
   da60c:	b90b      	cbnz	r3, da612 <_ZN9TCPClientC1Ei+0x52>
   da60e:	f7ff fddf 	bl	da1d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   da612:	4620      	mov	r0, r4
   da614:	f7ff fed0 	bl	da3b8 <_ZN9TCPClient12flush_bufferEv>
}
   da618:	4620      	mov	r0, r4
   da61a:	bd70      	pop	{r4, r5, r6, pc}
   da61c:	000dc498 	.word	0x000dc498
   da620:	000dc47c 	.word	0x000dc47c

000da624 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da624:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da626:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da62a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da62c:	f7ff ffc8 	bl	da5c0 <_ZN9TCPClientC1Ei>
}
   da630:	4620      	mov	r0, r4
   da632:	bd10      	pop	{r4, pc}

000da634 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   da634:	b510      	push	{r4, lr}
   da636:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da638:	6800      	ldr	r0, [r0, #0]
   da63a:	2800      	cmp	r0, #0
   da63c:	db01      	blt.n	da642 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da63e:	f7fb ff81 	bl	d6544 <sock_close>
    }
}
   da642:	4620      	mov	r0, r4
   da644:	bd10      	pop	{r4, pc}

000da646 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   da646:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   da648:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   da64a:	4620      	mov	r0, r4
   da64c:	f7ff fff2 	bl	da634 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   da650:	b124      	cbz	r4, da65c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da652:	4620      	mov	r0, r4
   da654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da658:	f7f9 bd21 	b.w	d409e <_ZdlPv>
   da65c:	bd10      	pop	{r4, pc}

000da65e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   da65e:	2200      	movs	r2, #0
   da660:	4611      	mov	r1, r2
   da662:	6840      	ldr	r0, [r0, #4]
   da664:	f7fc b85a 	b.w	d671c <network_ready>

000da668 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da668:	2200      	movs	r2, #0
   da66a:	4611      	mov	r1, r2
   da66c:	6840      	ldr	r0, [r0, #4]
   da66e:	f7fc b875 	b.w	d675c <network_listening>

000da672 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da672:	2200      	movs	r2, #0
   da674:	4611      	mov	r1, r2
   da676:	6840      	ldr	r0, [r0, #4]
   da678:	f7fc b880 	b.w	d677c <network_get_listen_timeout>

000da67c <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da67c:	2200      	movs	r2, #0
   da67e:	6840      	ldr	r0, [r0, #4]
   da680:	f7fc b874 	b.w	d676c <network_set_listen_timeout>

000da684 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da684:	2200      	movs	r2, #0
   da686:	f081 0101 	eor.w	r1, r1, #1
   da68a:	6840      	ldr	r0, [r0, #4]
   da68c:	f7fc b85e 	b.w	d674c <network_listen>

000da690 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   da690:	2300      	movs	r3, #0
   da692:	461a      	mov	r2, r3
   da694:	4619      	mov	r1, r3
   da696:	6840      	ldr	r0, [r0, #4]
   da698:	f7fc b850 	b.w	d673c <network_off>

000da69c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   da69c:	2300      	movs	r3, #0
   da69e:	461a      	mov	r2, r3
   da6a0:	4619      	mov	r1, r3
   da6a2:	6840      	ldr	r0, [r0, #4]
   da6a4:	f7fc b842 	b.w	d672c <network_on>

000da6a8 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da6a8:	2200      	movs	r2, #0
   da6aa:	4611      	mov	r1, r2
   da6ac:	6840      	ldr	r0, [r0, #4]
   da6ae:	f7fc b825 	b.w	d66fc <network_connecting>

000da6b2 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da6b2:	2200      	movs	r2, #0
   da6b4:	2102      	movs	r1, #2
   da6b6:	6840      	ldr	r0, [r0, #4]
   da6b8:	f7fc b828 	b.w	d670c <network_disconnect>

000da6bc <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da6bc:	2300      	movs	r3, #0
   da6be:	461a      	mov	r2, r3
   da6c0:	6840      	ldr	r0, [r0, #4]
   da6c2:	f7fc b813 	b.w	d66ec <network_connect>
	...

000da6c8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   da6c8:	4b02      	ldr	r3, [pc, #8]	; (da6d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   da6ca:	2204      	movs	r2, #4
   da6cc:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   da6ce:	4a02      	ldr	r2, [pc, #8]	; (da6d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   da6d0:	601a      	str	r2, [r3, #0]
   da6d2:	4770      	bx	lr
   da6d4:	2003e738 	.word	0x2003e738
   da6d8:	000dc4fc 	.word	0x000dc4fc

000da6dc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da6dc:	2300      	movs	r3, #0
   da6de:	461a      	mov	r2, r3
   da6e0:	6840      	ldr	r0, [r0, #4]
   da6e2:	f7fc b803 	b.w	d66ec <network_connect>

000da6e6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da6e6:	2200      	movs	r2, #0
   da6e8:	2102      	movs	r1, #2
   da6ea:	6840      	ldr	r0, [r0, #4]
   da6ec:	f7fc b80e 	b.w	d670c <network_disconnect>

000da6f0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da6f0:	2200      	movs	r2, #0
   da6f2:	4611      	mov	r1, r2
   da6f4:	6840      	ldr	r0, [r0, #4]
   da6f6:	f7fc b801 	b.w	d66fc <network_connecting>

000da6fa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da6fa:	2200      	movs	r2, #0
   da6fc:	4611      	mov	r1, r2
   da6fe:	6840      	ldr	r0, [r0, #4]
   da700:	f7fc b80c 	b.w	d671c <network_ready>

000da704 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da704:	2300      	movs	r3, #0
   da706:	461a      	mov	r2, r3
   da708:	4619      	mov	r1, r3
   da70a:	6840      	ldr	r0, [r0, #4]
   da70c:	f7fc b80e 	b.w	d672c <network_on>

000da710 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da710:	2300      	movs	r3, #0
   da712:	461a      	mov	r2, r3
   da714:	4619      	mov	r1, r3
   da716:	6840      	ldr	r0, [r0, #4]
   da718:	f7fc b810 	b.w	d673c <network_off>

000da71c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da71c:	2200      	movs	r2, #0
   da71e:	f081 0101 	eor.w	r1, r1, #1
   da722:	6840      	ldr	r0, [r0, #4]
   da724:	f7fc b812 	b.w	d674c <network_listen>

000da728 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da728:	2200      	movs	r2, #0
   da72a:	6840      	ldr	r0, [r0, #4]
   da72c:	f7fc b81e 	b.w	d676c <network_set_listen_timeout>

000da730 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da730:	2200      	movs	r2, #0
   da732:	4611      	mov	r1, r2
   da734:	6840      	ldr	r0, [r0, #4]
   da736:	f7fc b821 	b.w	d677c <network_get_listen_timeout>

000da73a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da73a:	2200      	movs	r2, #0
   da73c:	4611      	mov	r1, r2
   da73e:	6840      	ldr	r0, [r0, #4]
   da740:	f7fc b80c 	b.w	d675c <network_listening>

000da744 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da744:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da748:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   da74a:	b095      	sub	sp, #84	; 0x54
   da74c:	4616      	mov	r6, r2
   da74e:	460d      	mov	r5, r1
   da750:	4607      	mov	r7, r0
    IPAddress addr;
   da752:	f7ff fa7f 	bl	d9c54 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   da756:	4621      	mov	r1, r4
   da758:	2220      	movs	r2, #32
   da75a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da75c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da75e:	f000 fbd6 	bl	daf0e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da762:	2340      	movs	r3, #64	; 0x40
   da764:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da766:	4621      	mov	r1, r4
   da768:	466b      	mov	r3, sp
   da76a:	aa0c      	add	r2, sp, #48	; 0x30
   da76c:	4630      	mov	r0, r6
   da76e:	f7fb fd77 	bl	d6260 <netdb_getaddrinfo>
    if (!r) {
   da772:	4604      	mov	r4, r0
   da774:	2800      	cmp	r0, #0
   da776:	d144      	bne.n	da802 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da778:	4602      	mov	r2, r0
   da77a:	2101      	movs	r1, #1
   da77c:	6868      	ldr	r0, [r5, #4]
   da77e:	f7fb ffcd 	bl	d671c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da782:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da784:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da786:	4622      	mov	r2, r4
   da788:	6868      	ldr	r0, [r5, #4]
   da78a:	f7fb ffc7 	bl	d671c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da78e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da790:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   da792:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da794:	2e00      	cmp	r6, #0
   da796:	d034      	beq.n	da802 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   da798:	2900      	cmp	r1, #0
   da79a:	d132      	bne.n	da802 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da79c:	6873      	ldr	r3, [r6, #4]
   da79e:	2b02      	cmp	r3, #2
   da7a0:	d002      	beq.n	da7a8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   da7a2:	2b0a      	cmp	r3, #10
   da7a4:	d009      	beq.n	da7ba <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   da7a6:	e02a      	b.n	da7fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   da7a8:	f1b8 0f00 	cmp.w	r8, #0
   da7ac:	d027      	beq.n	da7fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da7ae:	6971      	ldr	r1, [r6, #20]
   da7b0:	4638      	mov	r0, r7
   da7b2:	3104      	adds	r1, #4
   da7b4:	f7ff fa91 	bl	d9cda <_ZN9IPAddressaSEPKh>
   da7b8:	e020      	b.n	da7fc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   da7ba:	f1b9 0f00 	cmp.w	r9, #0
   da7be:	d01e      	beq.n	da7fe <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da7c0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da7c2:	2211      	movs	r2, #17
   da7c4:	a801      	add	r0, sp, #4
   da7c6:	f000 fba2 	bl	daf0e <memset>
                    a.v = 6;
   da7ca:	2306      	movs	r3, #6
   da7cc:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da7d0:	ad01      	add	r5, sp, #4
   da7d2:	f104 0308 	add.w	r3, r4, #8
   da7d6:	3418      	adds	r4, #24
   da7d8:	6818      	ldr	r0, [r3, #0]
   da7da:	6859      	ldr	r1, [r3, #4]
   da7dc:	462a      	mov	r2, r5
   da7de:	c203      	stmia	r2!, {r0, r1}
   da7e0:	3308      	adds	r3, #8
   da7e2:	42a3      	cmp	r3, r4
   da7e4:	4615      	mov	r5, r2
   da7e6:	d1f7      	bne.n	da7d8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   da7e8:	a901      	add	r1, sp, #4
   da7ea:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da7ec:	ad07      	add	r5, sp, #28
   da7ee:	f7ff fa3f 	bl	d9c70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da7f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da7f4:	1d3c      	adds	r4, r7, #4
   da7f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da7f8:	682b      	ldr	r3, [r5, #0]
   da7fa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   da7fc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da7fe:	69f6      	ldr	r6, [r6, #28]
   da800:	e7c8      	b.n	da794 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da802:	9800      	ldr	r0, [sp, #0]
   da804:	f7fb fd24 	bl	d6250 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da808:	4638      	mov	r0, r7
   da80a:	b015      	add	sp, #84	; 0x54
   da80c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da810 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da810:	4b02      	ldr	r3, [pc, #8]	; (da81c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da812:	4a03      	ldr	r2, [pc, #12]	; (da820 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da814:	601a      	str	r2, [r3, #0]
   da816:	2200      	movs	r2, #0
   da818:	605a      	str	r2, [r3, #4]
   da81a:	4770      	bx	lr
   da81c:	2003e740 	.word	0x2003e740
   da820:	000dc530 	.word	0x000dc530

000da824 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   da824:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   da828:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   da82a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   da82e:	2901      	cmp	r1, #1
   da830:	4610      	mov	r0, r2
   da832:	d104      	bne.n	da83e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   da834:	f852 1c04 	ldr.w	r1, [r2, #-4]
   da838:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   da83c:	e004      	b.n	da848 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   da83e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   da840:	bf04      	itt	eq
   da842:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   da846:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   da848:	3b01      	subs	r3, #1
   da84a:	f102 0210 	add.w	r2, r2, #16
   da84e:	d1ec      	bne.n	da82a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   da850:	4770      	bx	lr

000da852 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   da852:	b40e      	push	{r1, r2, r3}
   da854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da858:	b087      	sub	sp, #28
   da85a:	af00      	add	r7, sp, #0
   da85c:	f107 0434 	add.w	r4, r7, #52	; 0x34
   da860:	4605      	mov	r5, r0
   da862:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   da866:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   da868:	4623      	mov	r3, r4
   da86a:	4632      	mov	r2, r6
   da86c:	2110      	movs	r1, #16
   da86e:	f107 0008 	add.w	r0, r7, #8
   da872:	f7fb ffdb 	bl	d682c <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   da876:	280f      	cmp	r0, #15
   da878:	d916      	bls.n	da8a8 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   da87a:	f100 0308 	add.w	r3, r0, #8
   da87e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   da882:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   da884:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   da888:	4632      	mov	r2, r6
   da88a:	1c41      	adds	r1, r0, #1
   da88c:	4623      	mov	r3, r4
   da88e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   da890:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   da892:	f7fb ffcb 	bl	d682c <vsnprintf>
        va_end(args);
        if (n > 0) {
   da896:	1e02      	subs	r2, r0, #0
   da898:	dd04      	ble.n	da8a4 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   da89a:	682b      	ldr	r3, [r5, #0]
   da89c:	4669      	mov	r1, sp
   da89e:	689b      	ldr	r3, [r3, #8]
   da8a0:	4628      	mov	r0, r5
   da8a2:	4798      	blx	r3
   da8a4:	46c5      	mov	sp, r8
   da8a6:	e007      	b.n	da8b8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   da8a8:	b130      	cbz	r0, da8b8 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   da8aa:	682b      	ldr	r3, [r5, #0]
   da8ac:	4602      	mov	r2, r0
   da8ae:	689b      	ldr	r3, [r3, #8]
   da8b0:	f107 0108 	add.w	r1, r7, #8
   da8b4:	4628      	mov	r0, r5
   da8b6:	4798      	blx	r3
    }
}
   da8b8:	371c      	adds	r7, #28
   da8ba:	46bd      	mov	sp, r7
   da8bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   da8c0:	b003      	add	sp, #12
   da8c2:	4770      	bx	lr

000da8c4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   da8c4:	b513      	push	{r0, r1, r4, lr}
   da8c6:	ab02      	add	r3, sp, #8
    write(&c, 1);
   da8c8:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   da8ca:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   da8ce:	6894      	ldr	r4, [r2, #8]
   da8d0:	4619      	mov	r1, r3
   da8d2:	2201      	movs	r2, #1
   da8d4:	47a0      	blx	r4
}
   da8d6:	b002      	add	sp, #8
   da8d8:	bd10      	pop	{r4, pc}

000da8da <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   da8da:	6883      	ldr	r3, [r0, #8]
   da8dc:	b1fb      	cbz	r3, da91e <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   da8de:	781a      	ldrb	r2, [r3, #0]
   da8e0:	2a03      	cmp	r2, #3
   da8e2:	d81a      	bhi.n	da91a <_ZNK5spark9JSONValue4typeEv+0x40>
   da8e4:	e8df f002 	tbb	[pc, r2]
   da8e8:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   da8ec:	2005      	movs	r0, #5
   da8ee:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   da8f0:	6802      	ldr	r2, [r0, #0]
   da8f2:	685b      	ldr	r3, [r3, #4]
   da8f4:	6852      	ldr	r2, [r2, #4]
   da8f6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   da8f8:	282d      	cmp	r0, #45	; 0x2d
   da8fa:	d014      	beq.n	da926 <_ZNK5spark9JSONValue4typeEv+0x4c>
   da8fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da900:	2b09      	cmp	r3, #9
   da902:	d910      	bls.n	da926 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   da904:	2874      	cmp	r0, #116	; 0x74
   da906:	d010      	beq.n	da92a <_ZNK5spark9JSONValue4typeEv+0x50>
   da908:	2866      	cmp	r0, #102	; 0x66
   da90a:	d00e      	beq.n	da92a <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   da90c:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   da910:	4258      	negs	r0, r3
   da912:	4158      	adcs	r0, r3
   da914:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   da916:	2006      	movs	r0, #6
   da918:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   da91a:	2000      	movs	r0, #0
   da91c:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   da91e:	4618      	mov	r0, r3
   da920:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   da922:	2004      	movs	r0, #4
   da924:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   da926:	2003      	movs	r0, #3
   da928:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   da92a:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   da92c:	4770      	bx	lr

000da92e <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   da92e:	b510      	push	{r4, lr}
   da930:	4604      	mov	r4, r0
    switch (type()) {
   da932:	f7ff ffd2 	bl	da8da <_ZNK5spark9JSONValue4typeEv>
   da936:	2802      	cmp	r0, #2
   da938:	d00d      	beq.n	da956 <_ZNK5spark9JSONValue5toIntEv+0x28>
   da93a:	d316      	bcc.n	da96a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   da93c:	2804      	cmp	r0, #4
   da93e:	d814      	bhi.n	da96a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   da940:	6822      	ldr	r2, [r4, #0]
   da942:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   da944:	6850      	ldr	r0, [r2, #4]
   da946:	685b      	ldr	r3, [r3, #4]
   da948:	220a      	movs	r2, #10
   da94a:	2100      	movs	r1, #0
   da94c:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   da94e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   da952:	f000 bc15 	b.w	db180 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   da956:	6822      	ldr	r2, [r4, #0]
   da958:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   da95a:	6852      	ldr	r2, [r2, #4]
   da95c:	685b      	ldr	r3, [r3, #4]
   da95e:	5cd0      	ldrb	r0, [r2, r3]
   da960:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   da964:	4258      	negs	r0, r3
   da966:	4158      	adcs	r0, r3
   da968:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   da96a:	2000      	movs	r0, #0
    }
}
   da96c:	bd10      	pop	{r4, pc}

000da96e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   da96e:	b510      	push	{r4, lr}
    if (!n_) {
   da970:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   da972:	4604      	mov	r4, r0
    if (!n_) {
   da974:	b15b      	cbz	r3, da98e <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   da976:	6880      	ldr	r0, [r0, #8]
   da978:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   da97a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   da97c:	3010      	adds	r0, #16
   da97e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   da980:	6120      	str	r0, [r4, #16]
    --n_;
   da982:	6163      	str	r3, [r4, #20]
    if (n_) {
   da984:	b12b      	cbz	r3, da992 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   da986:	f7ff ff4d 	bl	da824 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   da98a:	60a0      	str	r0, [r4, #8]
   da98c:	e001      	b.n	da992 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   da98e:	4618      	mov	r0, r3
   da990:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   da992:	2001      	movs	r0, #1
}
   da994:	bd10      	pop	{r4, pc}

000da996 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   da996:	b510      	push	{r4, lr}
    write('}');
   da998:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   da99a:	4604      	mov	r4, r0
    write('}');
   da99c:	f7ff ff92 	bl	da8c4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   da9a0:	2301      	movs	r3, #1
   da9a2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da9a4:	4620      	mov	r0, r4
   da9a6:	bd10      	pop	{r4, pc}

000da9a8 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   da9a8:	b508      	push	{r3, lr}
    switch (state_) {
   da9aa:	7903      	ldrb	r3, [r0, #4]
   da9ac:	2b01      	cmp	r3, #1
   da9ae:	d002      	beq.n	da9b6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   da9b0:	2b02      	cmp	r3, #2
   da9b2:	d002      	beq.n	da9ba <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   da9b4:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   da9b6:	212c      	movs	r1, #44	; 0x2c
   da9b8:	e000      	b.n	da9bc <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   da9ba:	213a      	movs	r1, #58	; 0x3a
   da9bc:	f7ff ff82 	bl	da8c4 <_ZN5spark10JSONWriter5writeEc>
   da9c0:	bd08      	pop	{r3, pc}

000da9c2 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   da9c2:	b510      	push	{r4, lr}
   da9c4:	4604      	mov	r4, r0
    writeSeparator();
   da9c6:	f7ff ffef 	bl	da9a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   da9ca:	4620      	mov	r0, r4
   da9cc:	217b      	movs	r1, #123	; 0x7b
   da9ce:	f7ff ff79 	bl	da8c4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   da9d2:	2300      	movs	r3, #0
   da9d4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da9d6:	4620      	mov	r0, r4
   da9d8:	bd10      	pop	{r4, pc}
	...

000da9dc <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   da9dc:	b538      	push	{r3, r4, r5, lr}
   da9de:	4604      	mov	r4, r0
   da9e0:	460d      	mov	r5, r1
    writeSeparator();
   da9e2:	f7ff ffe1 	bl	da9a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   da9e6:	6823      	ldr	r3, [r4, #0]
   da9e8:	4904      	ldr	r1, [pc, #16]	; (da9fc <_ZN5spark10JSONWriter5valueEi+0x20>)
   da9ea:	68db      	ldr	r3, [r3, #12]
   da9ec:	4620      	mov	r0, r4
   da9ee:	462a      	mov	r2, r5
   da9f0:	4798      	blx	r3
    state_ = NEXT;
   da9f2:	2301      	movs	r3, #1
   da9f4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   da9f6:	4620      	mov	r0, r4
   da9f8:	bd38      	pop	{r3, r4, r5, pc}
   da9fa:	bf00      	nop
   da9fc:	000db937 	.word	0x000db937

000daa00 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   daa00:	b538      	push	{r3, r4, r5, lr}
   daa02:	4604      	mov	r4, r0
   daa04:	460d      	mov	r5, r1
    writeSeparator();
   daa06:	f7ff ffcf 	bl	da9a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   daa0a:	6823      	ldr	r3, [r4, #0]
   daa0c:	4904      	ldr	r1, [pc, #16]	; (daa20 <_ZN5spark10JSONWriter5valueEj+0x20>)
   daa0e:	68db      	ldr	r3, [r3, #12]
   daa10:	4620      	mov	r0, r4
   daa12:	462a      	mov	r2, r5
   daa14:	4798      	blx	r3
    state_ = NEXT;
   daa16:	2301      	movs	r3, #1
   daa18:	7123      	strb	r3, [r4, #4]
    return *this;
}
   daa1a:	4620      	mov	r0, r4
   daa1c:	bd38      	pop	{r3, r4, r5, pc}
   daa1e:	bf00      	nop
   daa20:	000db2d6 	.word	0x000db2d6

000daa24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   daa24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daa26:	460d      	mov	r5, r1
   daa28:	4617      	mov	r7, r2
    write('"');
   daa2a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   daa2c:	4604      	mov	r4, r0
   daa2e:	442f      	add	r7, r5
    write('"');
   daa30:	f7ff ff48 	bl	da8c4 <_ZN5spark10JSONWriter5writeEc>
   daa34:	462a      	mov	r2, r5
    const char* const end = str + size;
   daa36:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   daa38:	42ba      	cmp	r2, r7
   daa3a:	d038      	beq.n	daaae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   daa3c:	4616      	mov	r6, r2
   daa3e:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   daa42:	2d22      	cmp	r5, #34	; 0x22
   daa44:	d003      	beq.n	daa4e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   daa46:	2d5c      	cmp	r5, #92	; 0x5c
   daa48:	d001      	beq.n	daa4e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   daa4a:	2d1f      	cmp	r5, #31
   daa4c:	d82d      	bhi.n	daaaa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   daa4e:	6823      	ldr	r3, [r4, #0]
   daa50:	1a52      	subs	r2, r2, r1
   daa52:	689b      	ldr	r3, [r3, #8]
   daa54:	4620      	mov	r0, r4
   daa56:	4798      	blx	r3
            write('\\');
   daa58:	215c      	movs	r1, #92	; 0x5c
   daa5a:	4620      	mov	r0, r4
   daa5c:	f7ff ff32 	bl	da8c4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   daa60:	2d0c      	cmp	r5, #12
   daa62:	d019      	beq.n	daa98 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   daa64:	d807      	bhi.n	daa76 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   daa66:	2d09      	cmp	r5, #9
   daa68:	d00f      	beq.n	daa8a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   daa6a:	2d0a      	cmp	r5, #10
   daa6c:	d012      	beq.n	daa94 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   daa6e:	2d08      	cmp	r5, #8
   daa70:	d114      	bne.n	daa9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   daa72:	2162      	movs	r1, #98	; 0x62
   daa74:	e00a      	b.n	daa8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   daa76:	2d22      	cmp	r5, #34	; 0x22
   daa78:	d005      	beq.n	daa86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   daa7a:	2d5c      	cmp	r5, #92	; 0x5c
   daa7c:	d003      	beq.n	daa86 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   daa7e:	2d0d      	cmp	r5, #13
   daa80:	d10c      	bne.n	daa9c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   daa82:	2172      	movs	r1, #114	; 0x72
   daa84:	e002      	b.n	daa8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   daa86:	4629      	mov	r1, r5
   daa88:	e000      	b.n	daa8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   daa8a:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   daa8c:	4620      	mov	r0, r4
   daa8e:	f7ff ff19 	bl	da8c4 <_ZN5spark10JSONWriter5writeEc>
                break;
   daa92:	e009      	b.n	daaa8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   daa94:	216e      	movs	r1, #110	; 0x6e
   daa96:	e7f9      	b.n	daa8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   daa98:	2166      	movs	r1, #102	; 0x66
   daa9a:	e7f7      	b.n	daa8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   daa9c:	6823      	ldr	r3, [r4, #0]
   daa9e:	490a      	ldr	r1, [pc, #40]	; (daac8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   daaa0:	68db      	ldr	r3, [r3, #12]
   daaa2:	462a      	mov	r2, r5
   daaa4:	4620      	mov	r0, r4
   daaa6:	4798      	blx	r3
                break;
            }
            str = s + 1;
   daaa8:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   daaaa:	4632      	mov	r2, r6
   daaac:	e7c4      	b.n	daa38 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   daaae:	4291      	cmp	r1, r2
   daab0:	d004      	beq.n	daabc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   daab2:	6823      	ldr	r3, [r4, #0]
   daab4:	1a52      	subs	r2, r2, r1
   daab6:	689d      	ldr	r5, [r3, #8]
   daab8:	4620      	mov	r0, r4
   daaba:	47a8      	blx	r5
    }
    write('"');
   daabc:	2122      	movs	r1, #34	; 0x22
   daabe:	4620      	mov	r0, r4
   daac0:	f7ff ff00 	bl	da8c4 <_ZN5spark10JSONWriter5writeEc>
   daac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   daac6:	bf00      	nop
   daac8:	000dc579 	.word	0x000dc579

000daacc <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   daacc:	b570      	push	{r4, r5, r6, lr}
   daace:	4604      	mov	r4, r0
   daad0:	460d      	mov	r5, r1
   daad2:	4616      	mov	r6, r2
    writeSeparator();
   daad4:	f7ff ff68 	bl	da9a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   daad8:	4620      	mov	r0, r4
   daada:	4632      	mov	r2, r6
   daadc:	4629      	mov	r1, r5
   daade:	f7ff ffa1 	bl	daa24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   daae2:	2302      	movs	r3, #2
   daae4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   daae6:	4620      	mov	r0, r4
   daae8:	bd70      	pop	{r4, r5, r6, pc}

000daaea <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   daaea:	b570      	push	{r4, r5, r6, lr}
   daaec:	4604      	mov	r4, r0
   daaee:	460d      	mov	r5, r1
   daaf0:	4616      	mov	r6, r2
    writeSeparator();
   daaf2:	f7ff ff59 	bl	da9a8 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   daaf6:	4620      	mov	r0, r4
   daaf8:	4632      	mov	r2, r6
   daafa:	4629      	mov	r1, r5
   daafc:	f7ff ff92 	bl	daa24 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   dab00:	2301      	movs	r3, #1
   dab02:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dab04:	4620      	mov	r0, r4
   dab06:	bd70      	pop	{r4, r5, r6, pc}

000dab08 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dab08:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dab0a:	2300      	movs	r3, #0
   dab0c:	4604      	mov	r4, r0
   dab0e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dab10:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   dab12:	4810      	ldr	r0, [pc, #64]	; (dab54 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   dab14:	60a0      	str	r0, [r4, #8]
   dab16:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dab18:	b1d1      	cbz	r1, dab50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   dab1a:	780b      	ldrb	r3, [r1, #0]
   dab1c:	2b03      	cmp	r3, #3
   dab1e:	d006      	beq.n	dab2e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dab20:	b9b3      	cbnz	r3, dab50 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dab22:	6813      	ldr	r3, [r2, #0]
   dab24:	6858      	ldr	r0, [r3, #4]
   dab26:	684b      	ldr	r3, [r1, #4]
   dab28:	5cc3      	ldrb	r3, [r0, r3]
   dab2a:	2b6e      	cmp	r3, #110	; 0x6e
   dab2c:	d008      	beq.n	dab40 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   dab2e:	6813      	ldr	r3, [r2, #0]
   dab30:	6858      	ldr	r0, [r3, #4]
   dab32:	684b      	ldr	r3, [r1, #4]
   dab34:	4403      	add	r3, r0
   dab36:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   dab38:	688b      	ldr	r3, [r1, #8]
   dab3a:	6849      	ldr	r1, [r1, #4]
   dab3c:	1a5b      	subs	r3, r3, r1
   dab3e:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dab40:	4611      	mov	r1, r2
   dab42:	4620      	mov	r0, r4
   dab44:	f851 3b04 	ldr.w	r3, [r1], #4
   dab48:	f840 3b04 	str.w	r3, [r0], #4
   dab4c:	f7fc fe5a 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   dab50:	4620      	mov	r0, r4
   dab52:	bd10      	pop	{r4, pc}
   dab54:	000dc304 	.word	0x000dc304

000dab58 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dab58:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dab5a:	b510      	push	{r4, lr}
   dab5c:	4604      	mov	r4, r0
   dab5e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dab60:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   dab62:	6083      	str	r3, [r0, #8]
   dab64:	60c3      	str	r3, [r0, #12]
   dab66:	6103      	str	r3, [r0, #16]
   dab68:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   dab6a:	b171      	cbz	r1, dab8a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   dab6c:	780b      	ldrb	r3, [r1, #0]
   dab6e:	2b01      	cmp	r3, #1
   dab70:	d10b      	bne.n	dab8a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   dab72:	f101 0310 	add.w	r3, r1, #16
   dab76:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   dab78:	68cb      	ldr	r3, [r1, #12]
   dab7a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dab7c:	4611      	mov	r1, r2
   dab7e:	f851 3b04 	ldr.w	r3, [r1], #4
   dab82:	f840 3b04 	str.w	r3, [r0], #4
   dab86:	f7fc fe3d 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   dab8a:	4620      	mov	r0, r4
   dab8c:	bd10      	pop	{r4, pc}

000dab8e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dab8e:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dab90:	b510      	push	{r4, lr}
   dab92:	4604      	mov	r4, r0
   dab94:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dab96:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   dab98:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   dab9a:	b131      	cbz	r1, dabaa <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dab9c:	4611      	mov	r1, r2
   dab9e:	f851 3b04 	ldr.w	r3, [r1], #4
   daba2:	f840 3b04 	str.w	r3, [r0], #4
   daba6:	f7fc fe2d 	bl	d7804 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   dabaa:	4620      	mov	r0, r4
   dabac:	bd10      	pop	{r4, pc}

000dabae <__aeabi_atexit>:
   dabae:	460b      	mov	r3, r1
   dabb0:	4601      	mov	r1, r0
   dabb2:	4618      	mov	r0, r3
   dabb4:	f000 b968 	b.w	dae88 <__cxa_atexit>

000dabb8 <_ZSt15get_new_handlerv>:
   dabb8:	4b02      	ldr	r3, [pc, #8]	; (dabc4 <_ZSt15get_new_handlerv+0xc>)
   dabba:	6818      	ldr	r0, [r3, #0]
   dabbc:	f3bf 8f5f 	dmb	sy
   dabc0:	4770      	bx	lr
   dabc2:	bf00      	nop
   dabc4:	2003e74c 	.word	0x2003e74c

000dabc8 <_ZdlPvj>:
   dabc8:	f7f9 ba69 	b.w	d409e <_ZdlPv>

000dabcc <_ZnwjRKSt9nothrow_t>:
   dabcc:	b510      	push	{r4, lr}
   dabce:	2800      	cmp	r0, #0
   dabd0:	bf14      	ite	ne
   dabd2:	4604      	movne	r4, r0
   dabd4:	2401      	moveq	r4, #1
   dabd6:	4620      	mov	r0, r4
   dabd8:	f7fb fe08 	bl	d67ec <malloc>
   dabdc:	b920      	cbnz	r0, dabe8 <_ZnwjRKSt9nothrow_t+0x1c>
   dabde:	f7ff ffeb 	bl	dabb8 <_ZSt15get_new_handlerv>
   dabe2:	b108      	cbz	r0, dabe8 <_ZnwjRKSt9nothrow_t+0x1c>
   dabe4:	4780      	blx	r0
   dabe6:	e7f6      	b.n	dabd6 <_ZnwjRKSt9nothrow_t+0xa>
   dabe8:	bd10      	pop	{r4, pc}

000dabea <_ZSt25__throw_bad_function_callv>:
   dabea:	b508      	push	{r3, lr}
   dabec:	f7fb fe26 	bl	d683c <abort>

000dabf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dabf0:	4b18      	ldr	r3, [pc, #96]	; (dac54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dabf2:	681a      	ldr	r2, [r3, #0]
   dabf4:	07d1      	lsls	r1, r2, #31
   dabf6:	bf5c      	itt	pl
   dabf8:	2201      	movpl	r2, #1
   dabfa:	601a      	strpl	r2, [r3, #0]
   dabfc:	4b16      	ldr	r3, [pc, #88]	; (dac58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dabfe:	681a      	ldr	r2, [r3, #0]
   dac00:	07d2      	lsls	r2, r2, #31
   dac02:	bf5c      	itt	pl
   dac04:	2201      	movpl	r2, #1
   dac06:	601a      	strpl	r2, [r3, #0]
   dac08:	4b14      	ldr	r3, [pc, #80]	; (dac5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dac0a:	681a      	ldr	r2, [r3, #0]
   dac0c:	07d0      	lsls	r0, r2, #31
   dac0e:	bf5c      	itt	pl
   dac10:	2201      	movpl	r2, #1
   dac12:	601a      	strpl	r2, [r3, #0]
   dac14:	4b12      	ldr	r3, [pc, #72]	; (dac60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dac16:	681a      	ldr	r2, [r3, #0]
   dac18:	07d1      	lsls	r1, r2, #31
   dac1a:	bf5c      	itt	pl
   dac1c:	2201      	movpl	r2, #1
   dac1e:	601a      	strpl	r2, [r3, #0]
   dac20:	4b10      	ldr	r3, [pc, #64]	; (dac64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dac22:	681a      	ldr	r2, [r3, #0]
   dac24:	07d2      	lsls	r2, r2, #31
   dac26:	bf5c      	itt	pl
   dac28:	2201      	movpl	r2, #1
   dac2a:	601a      	strpl	r2, [r3, #0]
   dac2c:	4b0e      	ldr	r3, [pc, #56]	; (dac68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dac2e:	681a      	ldr	r2, [r3, #0]
   dac30:	07d0      	lsls	r0, r2, #31
   dac32:	bf5c      	itt	pl
   dac34:	2201      	movpl	r2, #1
   dac36:	601a      	strpl	r2, [r3, #0]
   dac38:	4b0c      	ldr	r3, [pc, #48]	; (dac6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dac3a:	681a      	ldr	r2, [r3, #0]
   dac3c:	07d1      	lsls	r1, r2, #31
   dac3e:	bf5c      	itt	pl
   dac40:	2201      	movpl	r2, #1
   dac42:	601a      	strpl	r2, [r3, #0]
   dac44:	4b0a      	ldr	r3, [pc, #40]	; (dac70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dac46:	681a      	ldr	r2, [r3, #0]
   dac48:	07d2      	lsls	r2, r2, #31
   dac4a:	bf5c      	itt	pl
   dac4c:	2201      	movpl	r2, #1
   dac4e:	601a      	strpl	r2, [r3, #0]
   dac50:	4770      	bx	lr
   dac52:	bf00      	nop
   dac54:	2003e76c 	.word	0x2003e76c
   dac58:	2003e768 	.word	0x2003e768
   dac5c:	2003e764 	.word	0x2003e764
   dac60:	2003e760 	.word	0x2003e760
   dac64:	2003e75c 	.word	0x2003e75c
   dac68:	2003e758 	.word	0x2003e758
   dac6c:	2003e754 	.word	0x2003e754
   dac70:	2003e750 	.word	0x2003e750

000dac74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dac74:	4b24      	ldr	r3, [pc, #144]	; (dad08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dac76:	681a      	ldr	r2, [r3, #0]
   dac78:	07d0      	lsls	r0, r2, #31
   dac7a:	bf5c      	itt	pl
   dac7c:	2201      	movpl	r2, #1
   dac7e:	601a      	strpl	r2, [r3, #0]
   dac80:	4b22      	ldr	r3, [pc, #136]	; (dad0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dac82:	681a      	ldr	r2, [r3, #0]
   dac84:	07d1      	lsls	r1, r2, #31
   dac86:	bf5c      	itt	pl
   dac88:	2201      	movpl	r2, #1
   dac8a:	601a      	strpl	r2, [r3, #0]
   dac8c:	4b20      	ldr	r3, [pc, #128]	; (dad10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dac8e:	681a      	ldr	r2, [r3, #0]
   dac90:	07d2      	lsls	r2, r2, #31
   dac92:	bf5c      	itt	pl
   dac94:	2201      	movpl	r2, #1
   dac96:	601a      	strpl	r2, [r3, #0]
   dac98:	4b1e      	ldr	r3, [pc, #120]	; (dad14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dac9a:	681a      	ldr	r2, [r3, #0]
   dac9c:	07d0      	lsls	r0, r2, #31
   dac9e:	bf5c      	itt	pl
   daca0:	2201      	movpl	r2, #1
   daca2:	601a      	strpl	r2, [r3, #0]
   daca4:	4b1c      	ldr	r3, [pc, #112]	; (dad18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   daca6:	681a      	ldr	r2, [r3, #0]
   daca8:	07d1      	lsls	r1, r2, #31
   dacaa:	bf5c      	itt	pl
   dacac:	2201      	movpl	r2, #1
   dacae:	601a      	strpl	r2, [r3, #0]
   dacb0:	4b1a      	ldr	r3, [pc, #104]	; (dad1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dacb2:	681a      	ldr	r2, [r3, #0]
   dacb4:	07d2      	lsls	r2, r2, #31
   dacb6:	bf5c      	itt	pl
   dacb8:	2201      	movpl	r2, #1
   dacba:	601a      	strpl	r2, [r3, #0]
   dacbc:	4b18      	ldr	r3, [pc, #96]	; (dad20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dacbe:	681a      	ldr	r2, [r3, #0]
   dacc0:	07d0      	lsls	r0, r2, #31
   dacc2:	bf5c      	itt	pl
   dacc4:	2201      	movpl	r2, #1
   dacc6:	601a      	strpl	r2, [r3, #0]
   dacc8:	4b16      	ldr	r3, [pc, #88]	; (dad24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dacca:	681a      	ldr	r2, [r3, #0]
   daccc:	07d1      	lsls	r1, r2, #31
   dacce:	bf5c      	itt	pl
   dacd0:	2201      	movpl	r2, #1
   dacd2:	601a      	strpl	r2, [r3, #0]
   dacd4:	4b14      	ldr	r3, [pc, #80]	; (dad28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dacd6:	681a      	ldr	r2, [r3, #0]
   dacd8:	07d2      	lsls	r2, r2, #31
   dacda:	bf5c      	itt	pl
   dacdc:	2201      	movpl	r2, #1
   dacde:	601a      	strpl	r2, [r3, #0]
   dace0:	4b12      	ldr	r3, [pc, #72]	; (dad2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dace2:	681a      	ldr	r2, [r3, #0]
   dace4:	07d0      	lsls	r0, r2, #31
   dace6:	bf5c      	itt	pl
   dace8:	2201      	movpl	r2, #1
   dacea:	601a      	strpl	r2, [r3, #0]
   dacec:	4b10      	ldr	r3, [pc, #64]	; (dad30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dacee:	681a      	ldr	r2, [r3, #0]
   dacf0:	07d1      	lsls	r1, r2, #31
   dacf2:	bf5c      	itt	pl
   dacf4:	2201      	movpl	r2, #1
   dacf6:	601a      	strpl	r2, [r3, #0]
   dacf8:	4b0e      	ldr	r3, [pc, #56]	; (dad34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dacfa:	681a      	ldr	r2, [r3, #0]
   dacfc:	07d2      	lsls	r2, r2, #31
   dacfe:	bf5c      	itt	pl
   dad00:	2201      	movpl	r2, #1
   dad02:	601a      	strpl	r2, [r3, #0]
   dad04:	4770      	bx	lr
   dad06:	bf00      	nop
   dad08:	2003e79c 	.word	0x2003e79c
   dad0c:	2003e798 	.word	0x2003e798
   dad10:	2003e794 	.word	0x2003e794
   dad14:	2003e790 	.word	0x2003e790
   dad18:	2003e78c 	.word	0x2003e78c
   dad1c:	2003e788 	.word	0x2003e788
   dad20:	2003e784 	.word	0x2003e784
   dad24:	2003e780 	.word	0x2003e780
   dad28:	2003e77c 	.word	0x2003e77c
   dad2c:	2003e778 	.word	0x2003e778
   dad30:	2003e774 	.word	0x2003e774
   dad34:	2003e770 	.word	0x2003e770

000dad38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dad38:	4b24      	ldr	r3, [pc, #144]	; (dadcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dad3a:	681a      	ldr	r2, [r3, #0]
   dad3c:	07d0      	lsls	r0, r2, #31
   dad3e:	bf5c      	itt	pl
   dad40:	2201      	movpl	r2, #1
   dad42:	601a      	strpl	r2, [r3, #0]
   dad44:	4b22      	ldr	r3, [pc, #136]	; (dadd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dad46:	681a      	ldr	r2, [r3, #0]
   dad48:	07d1      	lsls	r1, r2, #31
   dad4a:	bf5c      	itt	pl
   dad4c:	2201      	movpl	r2, #1
   dad4e:	601a      	strpl	r2, [r3, #0]
   dad50:	4b20      	ldr	r3, [pc, #128]	; (dadd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dad52:	681a      	ldr	r2, [r3, #0]
   dad54:	07d2      	lsls	r2, r2, #31
   dad56:	bf5c      	itt	pl
   dad58:	2201      	movpl	r2, #1
   dad5a:	601a      	strpl	r2, [r3, #0]
   dad5c:	4b1e      	ldr	r3, [pc, #120]	; (dadd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dad5e:	681a      	ldr	r2, [r3, #0]
   dad60:	07d0      	lsls	r0, r2, #31
   dad62:	bf5c      	itt	pl
   dad64:	2201      	movpl	r2, #1
   dad66:	601a      	strpl	r2, [r3, #0]
   dad68:	4b1c      	ldr	r3, [pc, #112]	; (daddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dad6a:	681a      	ldr	r2, [r3, #0]
   dad6c:	07d1      	lsls	r1, r2, #31
   dad6e:	bf5c      	itt	pl
   dad70:	2201      	movpl	r2, #1
   dad72:	601a      	strpl	r2, [r3, #0]
   dad74:	4b1a      	ldr	r3, [pc, #104]	; (dade0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dad76:	681a      	ldr	r2, [r3, #0]
   dad78:	07d2      	lsls	r2, r2, #31
   dad7a:	bf5c      	itt	pl
   dad7c:	2201      	movpl	r2, #1
   dad7e:	601a      	strpl	r2, [r3, #0]
   dad80:	4b18      	ldr	r3, [pc, #96]	; (dade4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dad82:	681a      	ldr	r2, [r3, #0]
   dad84:	07d0      	lsls	r0, r2, #31
   dad86:	bf5c      	itt	pl
   dad88:	2201      	movpl	r2, #1
   dad8a:	601a      	strpl	r2, [r3, #0]
   dad8c:	4b16      	ldr	r3, [pc, #88]	; (dade8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dad8e:	681a      	ldr	r2, [r3, #0]
   dad90:	07d1      	lsls	r1, r2, #31
   dad92:	bf5c      	itt	pl
   dad94:	2201      	movpl	r2, #1
   dad96:	601a      	strpl	r2, [r3, #0]
   dad98:	4b14      	ldr	r3, [pc, #80]	; (dadec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dad9a:	681a      	ldr	r2, [r3, #0]
   dad9c:	07d2      	lsls	r2, r2, #31
   dad9e:	bf5c      	itt	pl
   dada0:	2201      	movpl	r2, #1
   dada2:	601a      	strpl	r2, [r3, #0]
   dada4:	4b12      	ldr	r3, [pc, #72]	; (dadf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dada6:	681a      	ldr	r2, [r3, #0]
   dada8:	07d0      	lsls	r0, r2, #31
   dadaa:	bf5c      	itt	pl
   dadac:	2201      	movpl	r2, #1
   dadae:	601a      	strpl	r2, [r3, #0]
   dadb0:	4b10      	ldr	r3, [pc, #64]	; (dadf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dadb2:	681a      	ldr	r2, [r3, #0]
   dadb4:	07d1      	lsls	r1, r2, #31
   dadb6:	bf5c      	itt	pl
   dadb8:	2201      	movpl	r2, #1
   dadba:	601a      	strpl	r2, [r3, #0]
   dadbc:	4b0e      	ldr	r3, [pc, #56]	; (dadf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dadbe:	681a      	ldr	r2, [r3, #0]
   dadc0:	07d2      	lsls	r2, r2, #31
   dadc2:	bf5c      	itt	pl
   dadc4:	2201      	movpl	r2, #1
   dadc6:	601a      	strpl	r2, [r3, #0]
   dadc8:	4770      	bx	lr
   dadca:	bf00      	nop
   dadcc:	2003e7cc 	.word	0x2003e7cc
   dadd0:	2003e7c8 	.word	0x2003e7c8
   dadd4:	2003e7c4 	.word	0x2003e7c4
   dadd8:	2003e7c0 	.word	0x2003e7c0
   daddc:	2003e7bc 	.word	0x2003e7bc
   dade0:	2003e7b8 	.word	0x2003e7b8
   dade4:	2003e7b4 	.word	0x2003e7b4
   dade8:	2003e7b0 	.word	0x2003e7b0
   dadec:	2003e7ac 	.word	0x2003e7ac
   dadf0:	2003e7a8 	.word	0x2003e7a8
   dadf4:	2003e7a4 	.word	0x2003e7a4
   dadf8:	2003e7a0 	.word	0x2003e7a0

000dadfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dadfc:	4b18      	ldr	r3, [pc, #96]	; (dae60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dadfe:	681a      	ldr	r2, [r3, #0]
   dae00:	07d1      	lsls	r1, r2, #31
   dae02:	bf5c      	itt	pl
   dae04:	2201      	movpl	r2, #1
   dae06:	601a      	strpl	r2, [r3, #0]
   dae08:	4b16      	ldr	r3, [pc, #88]	; (dae64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   dae0a:	681a      	ldr	r2, [r3, #0]
   dae0c:	07d2      	lsls	r2, r2, #31
   dae0e:	bf5c      	itt	pl
   dae10:	2201      	movpl	r2, #1
   dae12:	601a      	strpl	r2, [r3, #0]
   dae14:	4b14      	ldr	r3, [pc, #80]	; (dae68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dae16:	681a      	ldr	r2, [r3, #0]
   dae18:	07d0      	lsls	r0, r2, #31
   dae1a:	bf5c      	itt	pl
   dae1c:	2201      	movpl	r2, #1
   dae1e:	601a      	strpl	r2, [r3, #0]
   dae20:	4b12      	ldr	r3, [pc, #72]	; (dae6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dae22:	681a      	ldr	r2, [r3, #0]
   dae24:	07d1      	lsls	r1, r2, #31
   dae26:	bf5c      	itt	pl
   dae28:	2201      	movpl	r2, #1
   dae2a:	601a      	strpl	r2, [r3, #0]
   dae2c:	4b10      	ldr	r3, [pc, #64]	; (dae70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dae2e:	681a      	ldr	r2, [r3, #0]
   dae30:	07d2      	lsls	r2, r2, #31
   dae32:	bf5c      	itt	pl
   dae34:	2201      	movpl	r2, #1
   dae36:	601a      	strpl	r2, [r3, #0]
   dae38:	4b0e      	ldr	r3, [pc, #56]	; (dae74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dae3a:	681a      	ldr	r2, [r3, #0]
   dae3c:	07d0      	lsls	r0, r2, #31
   dae3e:	bf5c      	itt	pl
   dae40:	2201      	movpl	r2, #1
   dae42:	601a      	strpl	r2, [r3, #0]
   dae44:	4b0c      	ldr	r3, [pc, #48]	; (dae78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dae46:	681a      	ldr	r2, [r3, #0]
   dae48:	07d1      	lsls	r1, r2, #31
   dae4a:	bf5c      	itt	pl
   dae4c:	2201      	movpl	r2, #1
   dae4e:	601a      	strpl	r2, [r3, #0]
   dae50:	4b0a      	ldr	r3, [pc, #40]	; (dae7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dae52:	681a      	ldr	r2, [r3, #0]
   dae54:	07d2      	lsls	r2, r2, #31
   dae56:	bf5c      	itt	pl
   dae58:	2201      	movpl	r2, #1
   dae5a:	601a      	strpl	r2, [r3, #0]
   dae5c:	4770      	bx	lr
   dae5e:	bf00      	nop
   dae60:	2003e7ec 	.word	0x2003e7ec
   dae64:	2003e7e8 	.word	0x2003e7e8
   dae68:	2003e7e4 	.word	0x2003e7e4
   dae6c:	2003e7e0 	.word	0x2003e7e0
   dae70:	2003e7dc 	.word	0x2003e7dc
   dae74:	2003e7d8 	.word	0x2003e7d8
   dae78:	2003e7d4 	.word	0x2003e7d4
   dae7c:	2003e7d0 	.word	0x2003e7d0

000dae80 <atol>:
   dae80:	220a      	movs	r2, #10
   dae82:	2100      	movs	r1, #0
   dae84:	f000 b97c 	b.w	db180 <strtol>

000dae88 <__cxa_atexit>:
   dae88:	b510      	push	{r4, lr}
   dae8a:	4c05      	ldr	r4, [pc, #20]	; (daea0 <__cxa_atexit+0x18>)
   dae8c:	4613      	mov	r3, r2
   dae8e:	b12c      	cbz	r4, dae9c <__cxa_atexit+0x14>
   dae90:	460a      	mov	r2, r1
   dae92:	4601      	mov	r1, r0
   dae94:	2002      	movs	r0, #2
   dae96:	f3af 8000 	nop.w
   dae9a:	bd10      	pop	{r4, pc}
   dae9c:	4620      	mov	r0, r4
   dae9e:	bd10      	pop	{r4, pc}
   daea0:	00000000 	.word	0x00000000

000daea4 <memcmp>:
   daea4:	b510      	push	{r4, lr}
   daea6:	3901      	subs	r1, #1
   daea8:	4402      	add	r2, r0
   daeaa:	4290      	cmp	r0, r2
   daeac:	d007      	beq.n	daebe <memcmp+0x1a>
   daeae:	f810 3b01 	ldrb.w	r3, [r0], #1
   daeb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   daeb6:	42a3      	cmp	r3, r4
   daeb8:	d0f7      	beq.n	daeaa <memcmp+0x6>
   daeba:	1b18      	subs	r0, r3, r4
   daebc:	bd10      	pop	{r4, pc}
   daebe:	2000      	movs	r0, #0
   daec0:	bd10      	pop	{r4, pc}

000daec2 <memcpy>:
   daec2:	b510      	push	{r4, lr}
   daec4:	1e43      	subs	r3, r0, #1
   daec6:	440a      	add	r2, r1
   daec8:	4291      	cmp	r1, r2
   daeca:	d004      	beq.n	daed6 <memcpy+0x14>
   daecc:	f811 4b01 	ldrb.w	r4, [r1], #1
   daed0:	f803 4f01 	strb.w	r4, [r3, #1]!
   daed4:	e7f8      	b.n	daec8 <memcpy+0x6>
   daed6:	bd10      	pop	{r4, pc}

000daed8 <memmove>:
   daed8:	4288      	cmp	r0, r1
   daeda:	b510      	push	{r4, lr}
   daedc:	eb01 0302 	add.w	r3, r1, r2
   daee0:	d801      	bhi.n	daee6 <memmove+0xe>
   daee2:	1e42      	subs	r2, r0, #1
   daee4:	e00b      	b.n	daefe <memmove+0x26>
   daee6:	4298      	cmp	r0, r3
   daee8:	d2fb      	bcs.n	daee2 <memmove+0xa>
   daeea:	1881      	adds	r1, r0, r2
   daeec:	1ad2      	subs	r2, r2, r3
   daeee:	42d3      	cmn	r3, r2
   daef0:	d004      	beq.n	daefc <memmove+0x24>
   daef2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   daef6:	f801 4d01 	strb.w	r4, [r1, #-1]!
   daefa:	e7f8      	b.n	daeee <memmove+0x16>
   daefc:	bd10      	pop	{r4, pc}
   daefe:	4299      	cmp	r1, r3
   daf00:	d004      	beq.n	daf0c <memmove+0x34>
   daf02:	f811 4b01 	ldrb.w	r4, [r1], #1
   daf06:	f802 4f01 	strb.w	r4, [r2, #1]!
   daf0a:	e7f8      	b.n	daefe <memmove+0x26>
   daf0c:	bd10      	pop	{r4, pc}

000daf0e <memset>:
   daf0e:	4402      	add	r2, r0
   daf10:	4603      	mov	r3, r0
   daf12:	4293      	cmp	r3, r2
   daf14:	d002      	beq.n	daf1c <memset+0xe>
   daf16:	f803 1b01 	strb.w	r1, [r3], #1
   daf1a:	e7fa      	b.n	daf12 <memset+0x4>
   daf1c:	4770      	bx	lr
	...

000daf20 <srand>:
   daf20:	b538      	push	{r3, r4, r5, lr}
   daf22:	4b12      	ldr	r3, [pc, #72]	; (daf6c <srand+0x4c>)
   daf24:	681c      	ldr	r4, [r3, #0]
   daf26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   daf28:	4605      	mov	r5, r0
   daf2a:	b9d3      	cbnz	r3, daf62 <srand+0x42>
   daf2c:	2018      	movs	r0, #24
   daf2e:	f7fb fc5d 	bl	d67ec <malloc>
   daf32:	f243 330e 	movw	r3, #13070	; 0x330e
   daf36:	63a0      	str	r0, [r4, #56]	; 0x38
   daf38:	8003      	strh	r3, [r0, #0]
   daf3a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   daf3e:	8043      	strh	r3, [r0, #2]
   daf40:	f241 2334 	movw	r3, #4660	; 0x1234
   daf44:	8083      	strh	r3, [r0, #4]
   daf46:	f24e 636d 	movw	r3, #58989	; 0xe66d
   daf4a:	80c3      	strh	r3, [r0, #6]
   daf4c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   daf50:	8103      	strh	r3, [r0, #8]
   daf52:	2305      	movs	r3, #5
   daf54:	8143      	strh	r3, [r0, #10]
   daf56:	230b      	movs	r3, #11
   daf58:	8183      	strh	r3, [r0, #12]
   daf5a:	2201      	movs	r2, #1
   daf5c:	2300      	movs	r3, #0
   daf5e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   daf62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   daf64:	2200      	movs	r2, #0
   daf66:	611d      	str	r5, [r3, #16]
   daf68:	615a      	str	r2, [r3, #20]
   daf6a:	bd38      	pop	{r3, r4, r5, pc}
   daf6c:	2003d8bc 	.word	0x2003d8bc

000daf70 <strchr>:
   daf70:	b2c9      	uxtb	r1, r1
   daf72:	4603      	mov	r3, r0
   daf74:	f810 2b01 	ldrb.w	r2, [r0], #1
   daf78:	b11a      	cbz	r2, daf82 <strchr+0x12>
   daf7a:	4291      	cmp	r1, r2
   daf7c:	d1f9      	bne.n	daf72 <strchr+0x2>
   daf7e:	4618      	mov	r0, r3
   daf80:	4770      	bx	lr
   daf82:	2900      	cmp	r1, #0
   daf84:	bf0c      	ite	eq
   daf86:	4618      	moveq	r0, r3
   daf88:	2000      	movne	r0, #0
   daf8a:	4770      	bx	lr

000daf8c <strchrnul>:
   daf8c:	b510      	push	{r4, lr}
   daf8e:	4604      	mov	r4, r0
   daf90:	f7ff ffee 	bl	daf70 <strchr>
   daf94:	b918      	cbnz	r0, daf9e <strchrnul+0x12>
   daf96:	4620      	mov	r0, r4
   daf98:	f000 f82f 	bl	daffa <strlen>
   daf9c:	4420      	add	r0, r4
   daf9e:	bd10      	pop	{r4, pc}

000dafa0 <strcmp>:
   dafa0:	f810 2b01 	ldrb.w	r2, [r0], #1
   dafa4:	f811 3b01 	ldrb.w	r3, [r1], #1
   dafa8:	2a01      	cmp	r2, #1
   dafaa:	bf28      	it	cs
   dafac:	429a      	cmpcs	r2, r3
   dafae:	d0f7      	beq.n	dafa0 <strcmp>
   dafb0:	1ad0      	subs	r0, r2, r3
   dafb2:	4770      	bx	lr

000dafb4 <strcpy>:
   dafb4:	4603      	mov	r3, r0
   dafb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   dafba:	f803 2b01 	strb.w	r2, [r3], #1
   dafbe:	2a00      	cmp	r2, #0
   dafc0:	d1f9      	bne.n	dafb6 <strcpy+0x2>
   dafc2:	4770      	bx	lr

000dafc4 <strdup>:
   dafc4:	4b02      	ldr	r3, [pc, #8]	; (dafd0 <strdup+0xc>)
   dafc6:	4601      	mov	r1, r0
   dafc8:	6818      	ldr	r0, [r3, #0]
   dafca:	f000 b803 	b.w	dafd4 <_strdup_r>
   dafce:	bf00      	nop
   dafd0:	2003d8bc 	.word	0x2003d8bc

000dafd4 <_strdup_r>:
   dafd4:	b570      	push	{r4, r5, r6, lr}
   dafd6:	4606      	mov	r6, r0
   dafd8:	4608      	mov	r0, r1
   dafda:	460c      	mov	r4, r1
   dafdc:	f000 f80d 	bl	daffa <strlen>
   dafe0:	1c45      	adds	r5, r0, #1
   dafe2:	4629      	mov	r1, r5
   dafe4:	4630      	mov	r0, r6
   dafe6:	f7fb fc31 	bl	d684c <_malloc_r>
   dafea:	4606      	mov	r6, r0
   dafec:	b118      	cbz	r0, daff6 <_strdup_r+0x22>
   dafee:	462a      	mov	r2, r5
   daff0:	4621      	mov	r1, r4
   daff2:	f7ff ff66 	bl	daec2 <memcpy>
   daff6:	4630      	mov	r0, r6
   daff8:	bd70      	pop	{r4, r5, r6, pc}

000daffa <strlen>:
   daffa:	4603      	mov	r3, r0
   daffc:	f813 2b01 	ldrb.w	r2, [r3], #1
   db000:	2a00      	cmp	r2, #0
   db002:	d1fb      	bne.n	daffc <strlen+0x2>
   db004:	1a18      	subs	r0, r3, r0
   db006:	3801      	subs	r0, #1
   db008:	4770      	bx	lr

000db00a <strncmp>:
   db00a:	b530      	push	{r4, r5, lr}
   db00c:	b182      	cbz	r2, db030 <strncmp+0x26>
   db00e:	1e45      	subs	r5, r0, #1
   db010:	3901      	subs	r1, #1
   db012:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   db016:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db01a:	42a3      	cmp	r3, r4
   db01c:	d106      	bne.n	db02c <strncmp+0x22>
   db01e:	43ec      	mvns	r4, r5
   db020:	4414      	add	r4, r2
   db022:	42e0      	cmn	r0, r4
   db024:	d001      	beq.n	db02a <strncmp+0x20>
   db026:	2b00      	cmp	r3, #0
   db028:	d1f3      	bne.n	db012 <strncmp+0x8>
   db02a:	461c      	mov	r4, r3
   db02c:	1b18      	subs	r0, r3, r4
   db02e:	bd30      	pop	{r4, r5, pc}
   db030:	4610      	mov	r0, r2
   db032:	bd30      	pop	{r4, r5, pc}

000db034 <strnlen>:
   db034:	b510      	push	{r4, lr}
   db036:	4603      	mov	r3, r0
   db038:	4401      	add	r1, r0
   db03a:	428b      	cmp	r3, r1
   db03c:	d004      	beq.n	db048 <strnlen+0x14>
   db03e:	781a      	ldrb	r2, [r3, #0]
   db040:	1c5c      	adds	r4, r3, #1
   db042:	b10a      	cbz	r2, db048 <strnlen+0x14>
   db044:	4623      	mov	r3, r4
   db046:	e7f8      	b.n	db03a <strnlen+0x6>
   db048:	1a18      	subs	r0, r3, r0
   db04a:	bd10      	pop	{r4, pc}

000db04c <strrchr>:
   db04c:	b538      	push	{r3, r4, r5, lr}
   db04e:	4603      	mov	r3, r0
   db050:	460d      	mov	r5, r1
   db052:	b141      	cbz	r1, db066 <strrchr+0x1a>
   db054:	2400      	movs	r4, #0
   db056:	4629      	mov	r1, r5
   db058:	4618      	mov	r0, r3
   db05a:	f7ff ff89 	bl	daf70 <strchr>
   db05e:	b130      	cbz	r0, db06e <strrchr+0x22>
   db060:	1c43      	adds	r3, r0, #1
   db062:	4604      	mov	r4, r0
   db064:	e7f7      	b.n	db056 <strrchr+0xa>
   db066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db06a:	f7ff bf81 	b.w	daf70 <strchr>
   db06e:	4620      	mov	r0, r4
   db070:	bd38      	pop	{r3, r4, r5, pc}
	...

000db074 <_strtol_r>:
   db074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db078:	4680      	mov	r8, r0
   db07a:	4840      	ldr	r0, [pc, #256]	; (db17c <_strtol_r+0x108>)
   db07c:	f8d0 9000 	ldr.w	r9, [r0]
   db080:	460f      	mov	r7, r1
   db082:	463d      	mov	r5, r7
   db084:	f815 4b01 	ldrb.w	r4, [r5], #1
   db088:	eb09 0004 	add.w	r0, r9, r4
   db08c:	7840      	ldrb	r0, [r0, #1]
   db08e:	f000 0008 	and.w	r0, r0, #8
   db092:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db096:	b108      	cbz	r0, db09c <_strtol_r+0x28>
   db098:	462f      	mov	r7, r5
   db09a:	e7f2      	b.n	db082 <_strtol_r+0xe>
   db09c:	2c2d      	cmp	r4, #45	; 0x2d
   db09e:	d103      	bne.n	db0a8 <_strtol_r+0x34>
   db0a0:	1cbd      	adds	r5, r7, #2
   db0a2:	787c      	ldrb	r4, [r7, #1]
   db0a4:	2601      	movs	r6, #1
   db0a6:	e003      	b.n	db0b0 <_strtol_r+0x3c>
   db0a8:	2c2b      	cmp	r4, #43	; 0x2b
   db0aa:	bf04      	itt	eq
   db0ac:	787c      	ldrbeq	r4, [r7, #1]
   db0ae:	1cbd      	addeq	r5, r7, #2
   db0b0:	b113      	cbz	r3, db0b8 <_strtol_r+0x44>
   db0b2:	2b10      	cmp	r3, #16
   db0b4:	d10a      	bne.n	db0cc <_strtol_r+0x58>
   db0b6:	e05b      	b.n	db170 <_strtol_r+0xfc>
   db0b8:	2c30      	cmp	r4, #48	; 0x30
   db0ba:	d157      	bne.n	db16c <_strtol_r+0xf8>
   db0bc:	7828      	ldrb	r0, [r5, #0]
   db0be:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db0c2:	2858      	cmp	r0, #88	; 0x58
   db0c4:	d14d      	bne.n	db162 <_strtol_r+0xee>
   db0c6:	786c      	ldrb	r4, [r5, #1]
   db0c8:	2310      	movs	r3, #16
   db0ca:	3502      	adds	r5, #2
   db0cc:	2e00      	cmp	r6, #0
   db0ce:	bf14      	ite	ne
   db0d0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   db0d4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   db0d8:	2700      	movs	r7, #0
   db0da:	fbbc faf3 	udiv	sl, ip, r3
   db0de:	4638      	mov	r0, r7
   db0e0:	fb03 cc1a 	mls	ip, r3, sl, ip
   db0e4:	eb09 0e04 	add.w	lr, r9, r4
   db0e8:	f89e e001 	ldrb.w	lr, [lr, #1]
   db0ec:	f01e 0f04 	tst.w	lr, #4
   db0f0:	d001      	beq.n	db0f6 <_strtol_r+0x82>
   db0f2:	3c30      	subs	r4, #48	; 0x30
   db0f4:	e00b      	b.n	db10e <_strtol_r+0x9a>
   db0f6:	f01e 0e03 	ands.w	lr, lr, #3
   db0fa:	d01b      	beq.n	db134 <_strtol_r+0xc0>
   db0fc:	f1be 0f01 	cmp.w	lr, #1
   db100:	bf0c      	ite	eq
   db102:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db106:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db10a:	ebce 0404 	rsb	r4, lr, r4
   db10e:	42a3      	cmp	r3, r4
   db110:	dd10      	ble.n	db134 <_strtol_r+0xc0>
   db112:	f1b7 3fff 	cmp.w	r7, #4294967295
   db116:	d00a      	beq.n	db12e <_strtol_r+0xba>
   db118:	4550      	cmp	r0, sl
   db11a:	d806      	bhi.n	db12a <_strtol_r+0xb6>
   db11c:	d101      	bne.n	db122 <_strtol_r+0xae>
   db11e:	4564      	cmp	r4, ip
   db120:	dc03      	bgt.n	db12a <_strtol_r+0xb6>
   db122:	fb03 4000 	mla	r0, r3, r0, r4
   db126:	2701      	movs	r7, #1
   db128:	e001      	b.n	db12e <_strtol_r+0xba>
   db12a:	f04f 37ff 	mov.w	r7, #4294967295
   db12e:	f815 4b01 	ldrb.w	r4, [r5], #1
   db132:	e7d7      	b.n	db0e4 <_strtol_r+0x70>
   db134:	1c7b      	adds	r3, r7, #1
   db136:	d10c      	bne.n	db152 <_strtol_r+0xde>
   db138:	2e00      	cmp	r6, #0
   db13a:	f04f 0322 	mov.w	r3, #34	; 0x22
   db13e:	bf14      	ite	ne
   db140:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   db144:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db148:	f8c8 3000 	str.w	r3, [r8]
   db14c:	b92a      	cbnz	r2, db15a <_strtol_r+0xe6>
   db14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db152:	b106      	cbz	r6, db156 <_strtol_r+0xe2>
   db154:	4240      	negs	r0, r0
   db156:	b172      	cbz	r2, db176 <_strtol_r+0x102>
   db158:	b107      	cbz	r7, db15c <_strtol_r+0xe8>
   db15a:	1e69      	subs	r1, r5, #1
   db15c:	6011      	str	r1, [r2, #0]
   db15e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db162:	2430      	movs	r4, #48	; 0x30
   db164:	2b00      	cmp	r3, #0
   db166:	d1b1      	bne.n	db0cc <_strtol_r+0x58>
   db168:	2308      	movs	r3, #8
   db16a:	e7af      	b.n	db0cc <_strtol_r+0x58>
   db16c:	230a      	movs	r3, #10
   db16e:	e7ad      	b.n	db0cc <_strtol_r+0x58>
   db170:	2c30      	cmp	r4, #48	; 0x30
   db172:	d0a3      	beq.n	db0bc <_strtol_r+0x48>
   db174:	e7aa      	b.n	db0cc <_strtol_r+0x58>
   db176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db17a:	bf00      	nop
   db17c:	2003d858 	.word	0x2003d858

000db180 <strtol>:
   db180:	4613      	mov	r3, r2
   db182:	460a      	mov	r2, r1
   db184:	4601      	mov	r1, r0
   db186:	4802      	ldr	r0, [pc, #8]	; (db190 <strtol+0x10>)
   db188:	6800      	ldr	r0, [r0, #0]
   db18a:	f7ff bf73 	b.w	db074 <_strtol_r>
   db18e:	bf00      	nop
   db190:	2003d8bc 	.word	0x2003d8bc

000db194 <tolower>:
   db194:	4b04      	ldr	r3, [pc, #16]	; (db1a8 <tolower+0x14>)
   db196:	681b      	ldr	r3, [r3, #0]
   db198:	4403      	add	r3, r0
   db19a:	785b      	ldrb	r3, [r3, #1]
   db19c:	f003 0303 	and.w	r3, r3, #3
   db1a0:	2b01      	cmp	r3, #1
   db1a2:	bf08      	it	eq
   db1a4:	3020      	addeq	r0, #32
   db1a6:	4770      	bx	lr
   db1a8:	2003d858 	.word	0x2003d858

000db1ac <dynalib_user>:
   db1ac:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   db1bc:	00000000                                ....

000db1c0 <_ZTVN5spark10LogHandlerE>:
	...
   db1d0:	000d40a9 000d40cd                       .@...@..

000db1d8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   db1e0:	000d415d 000d4191 000d9095 000d40cf     ]A...A.......@..
   db1f0:	69706f54 25203a63 4d202e73 61737365     Topic: %s. Messa
   db200:	203a6567 53007325 6f736e65 20312072     ge: %s.Sensor 1 
   db210:	6554202d 7265706d 72757461 25203a65     - Temperature: %
   db220:	65642075 65657267 65432073 7569736c     u degrees Celsiu
   db230:	65530073 726f736e 2d203120 6d754820     s.Sensor 1 - Hum
   db240:	74696469 25203a79 00252575 736e6553     idity: %u%%.Sens
   db250:	3120726f 53202d20 206c696f 73696f6d     or 1 - Soil mois
   db260:	65727574 7525203a 53002525 6f736e65     ture: %u%%.Senso
   db270:	20312072 694c202d 3a746867 20752520     r 1 - Light: %u 
   db280:	0078754c 736e6553 3220726f 52202d20     Lux.Sensor 2 - R
   db290:	736e6961 6d616574 6425203a 65530020     ainsteam: %d .Se
   db2a0:	726f736e 2d203220 71694c20 20646975     nsor 2 - Liquid 
   db2b0:	6576656c 25203a6c 53002075 6f736e65     level: %u .Senso
   db2c0:	20322072 7548202d 206e616d 65746564     r 2 - Human dete
   db2d0:	726f7463 7525203a 6e655300 20726f73     ctor: %u.Sensor 
   db2e0:	202d2032 616d7548 6f6c206e 2e2e7473     2 - Human lost..
   db2f0:	6553002e 726f736e 2d203220 6d754820     ..Sensor 2 - Hum
   db300:	64206e61 63657465 21646574 6e655300     an detected!.Sen
   db310:	20726f73 202d2032 61766e49 2064696c     sor 2 - Invalid 
   db320:	616d7568 6564206e 74636574 6d20726f     human detector m
   db330:	61737365 202e6567 65707845 64657463     essage. Expected
   db340:	6f203020 2c312072 63657220 65766965      0 or 1, receive
   db350:	75252064 656c6500 34373463 00366730     d %u.elec4740g6.
   db360:	6e756f46 20612064 65756c62 746f6f74     Found a bluetoot
   db370:	65642068 65636976 6441002e 73657264     h device..Addres
   db380:	00203a73 6e756f46 55552064 203a4449     s: .Found UUID: 
   db390:	6e655300 4e726f73 3165646f 49555520     .SensorNode1 UUI
   db3a0:	00203a44 736e6553 6f4e726f 20326564     D: .SensorNode2 
   db3b0:	44495555 5300203a 65636375 75667373     UUID: .Successfu
   db3c0:	20796c6c 6e6e6f63 65746365 6f742064     lly connected to
   db3d0:	6e657320 20726f73 65646f6e 00213120      sensor node 1!.
   db3e0:	62663932 35663361 6563342d 36342d38     29fba3f5-4ce8-46
   db3f0:	382d6362 2d353764 30383737 32626436     bc-8d75-77806db2
   db400:	31336332 61393900 66326430 63312d39     2c31.99a0d2f9-1c
   db410:	342d6166 2d336232 61623562 3462312d     fa-42b3-b5ba-1b4
   db420:	34333464 32393331 35340066 61346562     d4341392f.45be4a
   db430:	342d3635 2d356638 63333834 6262382d     56-48f5-483c-8bb
   db440:	33642d31 34656566 32633333 65006333     1-d3fee433c23c.e
   db450:	34323561 2d346138 63633334 3931342d     a5248a4-43cc-419
   db460:	34612d38 372d6161 30303239 30353761     8-a4aa-79200a750
   db470:	00353338 6c696146 74206465 6f63206f     835.Failed to co
   db480:	63656e6e 6f742074 6e657320 20726f73     nnect to sensor 
   db490:	65646f6e 002e3120 736e6553 6e20726f     node 1..Sensor n
   db4a0:	2065646f 6c612031 64616572 6f632079     ode 1 already co
   db4b0:	63656e6e 2e646574 63755300 73736563     nnected..Success
   db4c0:	6c6c7566 6f632079 63656e6e 20646574     fully connected 
   db4d0:	73206f74 6f736e65 6f6e2072 32206564     to sensor node 2
   db4e0:	63620021 38316637 322d3964 2d333463     !.bc7f18d9-2c43-
   db4f0:	65383034 3265622d 32362d35 36303466     408e-be25-62f406
   db500:	38393534 38006337 32616238 2d643566     45987c.88ba2f5d-
   db510:	38396531 6139342d 36382d66 642d3739     1e98-49af-8697-d
   db520:	36313530 33306664 00396562 32383462     0516df03be9.b482
   db530:	31353564 6133632d 64342d65 622d6564     d551-c3ae-4dde-b
   db540:	2d353231 34326563 38376434 30623639     125-ce244d7896b0
   db550:	30373900 37363731 36392d34 342d3531     .97017674-9615-4
   db560:	2d616266 32313739 3238362d 30326639     fba-9712-6829f20
   db570:	33383534 61460036 64656c69 206f7420     45836.Failed to 
   db580:	6e6e6f63 20746365 73206f74 6f736e65     connect to senso
   db590:	6f6e2072 32206564 6553002e 726f736e     r node 2..Sensor
   db5a0:	646f6e20 20322065 65726c61 20796461      node 2 already 
   db5b0:	6e6e6f63 65746365 25002e64 65642064     connected..%d de
   db5c0:	65636976 6f662073 00646e75 756f6241     vices found.Abou
   db5d0:	6f742074 61637320 2e2e2e6e 756f4600     t to scan....Fou
   db5e0:	7320646e 6f736e65 6f6e2072 31206564     nd sensor node 1
   db5f0:	6f46002e 20646e75 736e6573 6e20726f     ..Found sensor n
   db600:	2065646f 46002e32 756c6961 64206572     ode 2..Failure d
   db610:	74206575 6572206f 6e6f7361 00642520     ue to reason %d.
   db620:	65696c63 3231746e 65740033 6d2e7473     client123.test.m
   db630:	7571736f 6f747469 67726f2e 72707300     osquitto.org.spr
   db640:	6c6b6e69 77537265 68637469 726f6600     inklerSwitch.for
   db650:	714d6563 75507474 73696c62 65730068     ceMqttPublish.se
   db660:	776f4c74 6c696f53 73696f4d 65727574     tLowSoilMoisture
   db670:	65726854 6c6f6873 65730064 67694874     Threshold.setHig
   db680:	696f5368 696f4d6c 72757473 72685465     hSoilMoistureThr
   db690:	6f687365 7300646c 65547465 7265706d     eshold.setTemper
   db6a0:	72757461 72685465 6f687365 7300646c     atureThreshold.s
   db6b0:	69417465 6d754872 74696469 72685479     etAirHumidityThr
   db6c0:	6f687365 7300646c 75537465 4c796e6e     eshold.setSunnyL
   db6d0:	74686769 65726854 6c6f6873 514d0064     ightThreshold.MQ
   db6e0:	63205454 656e6e6f 6f697463 6166206e     TT connection fa
   db6f0:	72756c69 283a2065 6c654800 77206f6c     ilure :(.Hello w
   db700:	646c726f 656c6500 34373463 2f366730     orld.elec4740g6/
   db710:	61746164 54514d00 6f632054 63656e6e     data.MQTT connec
   db720:	64657463 63757320 73736563 6c6c7566     cted successfull
   db730:	6f002179 666f006e 35370066 66626534     y!.on.off.754ebf
   db740:	632d6535 2d313365 30303334 6466392d     5e-ce31-4300-9fd
   db750:	38612d35 65346266 38613465 39003131     5-a8fb4ee4a811.9
   db760:	38323737 2d396461 38393961 3236342d     7728ad9-a998-462
   db770:	38622d39 652d3535 35363265 30616338     9-b855-ee2658ca0
   db780:	00376631                                1f7.

000db784 <_ZL32MQTT5_DEFAULT_CONNECT_PROPERTIES>:
   db784:	00000000 0000ffff 00000000 0000000a     ................

000db794 <_ZL29MQTT5_DEFAULT_CONNECT_OPTIONS>:
   db794:	00000001 0000003c 00000000 00000000     ....<...........
	...
   db7b0:	000db784                                ....

000db7b4 <._379>:
   db7b4:	5454514d 2e707061 5454514d 6c614d00     MQTTapp.MQTT.Mal
   db7c4:	6d726f66 56206465 61697261 20656c62     formed Variable 
   db7d4:	65747942 746e4920 72656765 6b636100     Byte Integer.ack
   db7e4:	63657200 63655200 65766965 75702064     .rec.Received pu
   db7f4:	73696c62 73252068 726f6620 63617020     blish %s for pac
   db804:	2074656b 61206425 7220646e 6f707365     ket %d and respo
   db814:	2065736e 52006425 69656365 20646576     nse %d.Received 
   db824:	6c627570 20687369 706d6f63 6574656c     publish complete
   db834:	726f6620 63617020 2074656b 61206425      for packet %d a
   db844:	7220646e 6f707365 2065736e 52006425     nd response %d.R
   db854:	69656365 20646576 73627573 70697263     eceived subscrip
   db864:	6e6f6974 6b636120 726f6620 63617020     tion ack for pac
   db874:	2074656b 61206425 7320646e 63736275     ket %d and subsc
   db884:	74706972 206e6f69 65646e69 64252078     ription index %d
   db894:	646e6120 73657220 736e6f70 64252065      and response %d
   db8a4:	63655200 65766965 6e752064 73627573     .Received unsubs
   db8b4:	70697263 6e6f6974 6b636120 726f6620     cription ack for
   db8c4:	63617020 2074656b 61206425 7320646e      packet %d and s
   db8d4:	63736275 74706972 206e6f69 65646e69     ubscription inde
   db8e4:	64252078 646e6120 73657220 736e6f70     x %d and respons
   db8f4:	64252065 73655300 6e6f6973 70784520     e %d.Session Exp
   db904:	20797269 65746e49 6c617672 6c25203a     iry Interval: %l
   db914:	65520064 76696563 614d2065 756d6978     d.Receive Maximu
   db924:	25203a6d 614d0064 756d6978 6f51206d     m: %d.Maximum Qo
   db934:	25203a53 65520064 6e696174 61764120     S: %d.Retain Ava
   db944:	62616c69 203a656c 4d006425 6d697861     ilable: %d.Maxim
   db954:	50206d75 656b6361 69532074 203a657a     um Packet Size: 
   db964:	00646c25 69737341 64656e67 696c4320     %ld.Assigned Cli
   db974:	20746e65 6e656449 69666974 203a7265     ent Identifier: 
   db984:	54007325 6369706f 696c4120 4d207361     %s.Topic Alias M
   db994:	6d697861 203a6d75 52006425 6f736165     aximum: %d.Reaso
   db9a4:	7453206e 676e6972 7325203a 65735500     n String: %s.Use
   db9b4:	72502072 7265706f 57007974 63646c69     r Property.Wildc
   db9c4:	20647261 73627553 70697263 6e6f6974     ard Subscription
   db9d4:	61764120 62616c69 203a656c 53006425      Available: %d.S
   db9e4:	63736275 74706972 206e6f69 6e656449     ubscription Iden
   db9f4:	69666974 20737265 69617641 6c62616c     tifiers Availabl
   dba04:	25203a65 68530064 64657261 62755320     e: %d.Shared Sub
   dba14:	69726373 6f697470 7641206e 616c6961     scription Availa
   dba24:	3a656c62 00642520 76726553 4b207265     ble: %d.Server K
   dba34:	20706565 76696c41 25203a65 65520064     eep Alive: %d.Re
   dba44:	6e6f7073 49206573 726f666e 6974616d     sponse Informati
   dba54:	203a6e6f 53007325 65767265 65522072     on: %s.Server Re
   dba64:	65726566 3a65636e 00732520 68747541     ference: %s.Auth
   dba74:	69746e65 69746163 4d206e6f 6f687465     entication Metho
   dba84:	25203a64 75410073 6e656874 61636974     d: %s.Authentica
   dba94:	6e6f6974 74614420 6e550061 776f6e6b     tion Data.Unknow
   dbaa4:	6f63206e 63656e6e 72702074 7265706f     n connect proper
   dbab4:	50007974 6f6c7961 46206461 616d726f     ty.Payload Forma
   dbac4:	6e492074 61636964 3a726f74 00642520     t Indicator: %d.
   dbad4:	7373654d 20656761 69707845 49207972     Message Expiry I
   dbae4:	7265746e 3a6c6176 646c2520 706f5400     nterval: %ld.Top
   dbaf4:	41206369 7361696c 6425203a 73655200     ic Alias: %d.Res
   dbb04:	736e6f70 6f542065 3a636970 00732520     ponse Topic: %s.
   dbb14:	72726f43 74616c65 206e6f69 61746144     Correlation Data
   dbb24:	62755300 69726373 6f697470 6449206e     .Subscription Id
   dbb34:	69746e65 72656966 6e6f4300 746e6574     entifier.Content
   dbb44:	70795420 25203a65 6e550073 776f6e6b      Type: %s.Unknow
   dbb54:	7570206e 73696c62 72702068 7265706f     n publish proper
   dbb64:	50007974 656b6361 78652074 64656563     ty.Packet exceed
   dbb74:	616d2073 61702078 74656b63 7a697320     s max packet siz
   dbb84:	64252065 6e655300 676e6964 6e697020     e %d.Sending pin
   dbb94:	65722067 73657571 65530074 6e69646e     g request.Sendin
   dbba4:	69642067 6e6f6373 7463656e 74697720     g disconnect wit
   dbbb4:	65722068 6e6f7361 00642520 646e6553     h reason %d.Send
   dbbc4:	20676e69 6c627570 20687369 206b6361     ing publish ack 
   dbbd4:	20726f66 6b636170 25207465 65530064     for packet %d.Se
   dbbe4:	6e69646e 75702067 73696c62 65722068     nding publish re
   dbbf4:	6f662063 61702072 74656b63 00642520     c for packet %d.
   dbc04:	65636552 64657669 63617020 2074656b     Received packet 
   dbc14:	20726f66 69706f74 73252063 74697720     for topic %s wit
   dbc24:	64692068 20642520 20646e61 676e656c     h id %d and leng
   dbc34:	25206874 65520064 76696563 70206465     th %d.Received p
   dbc44:	656b6361 6f662074 6f742072 20636970     acket for topic 
   dbc54:	77207325 20687469 676e656c 25206874     %s with length %
   dbc64:	65530064 6e69646e 75702067 73696c62     d.Sending publis
   dbc74:	6f632068 6620706d 7020726f 656b6361     h comp for packe
   dbc84:	64252074 63655200 65766965 75702064     t %d.Received pu
   dbc94:	73696c62 65722068 6f66206c 61702072     blish rel for pa
   dbca4:	74656b63 20642520 20646e61 70736572     cket %d and resp
   dbcb4:	65736e6f 00642520 73627553 62697263     onse %d.Subscrib
   dbcc4:	61772065 73692073 64657573 726f6620     e was issued for
   dbcd4:	20642520 69706f74 77207363 20687469      %d topics with 
   dbce4:	6b636170 69207465 64252064 736e5500     packet id %d.Uns
   dbcf4:	63736275 65626972 73617720 73736920     ubscribe was iss
   dbd04:	20646575 20726f66 74206425 6369706f     ued for %d topic
   dbd14:	69772073 70206874 656b6361 64692074     s with packet id
   dbd24:	00642520 6c627550 20687369 656c6572      %d.Publish rele
   dbd34:	20657361 20726f66 6b636170 25207465     ase for packet %
   dbd44:	75500064 73696c62 676e6968 63617020     d.Publishing pac
   dbd54:	2074656b 68746977 20646920 69206425     ket with id %d i
   dbd64:	6f74206e 20636970 77207325 20687469     n topic %s with 
   dbd74:	676e656c 25206874 75500064 73696c62     length %d.Publis
   dbd84:	676e6968 63617020 2074656b 74206e69     hing packet in t
   dbd94:	6369706f 20732520 68746977 6e656c20     opic %s with len
   dbda4:	20687467 55006425 676e6973 706f7420     gth %d.Using top
   dbdb4:	61206369 7361696c 00642520 69706f54     ic alias %d.Topi
   dbdc4:	73252063 73617720 73736120 656e6769     c %s was assigne
   dbdd4:	6f742064 696c6120 25207361 75530064     d to alias %d.Su
   dbde4:	73656363 6c756673 6320796c 656e6e6f     ccessfully conne
   dbdf4:	64657463 69614600 2064656c 63206f74     cted.Failed to c
   dbe04:	656e6e6f 202e7463 73616552 203a6e6f     onnect. Reason: 
   dbe14:	52006425 69656365 20646576 63736964     %d.Received disc
   dbe24:	656e6e6f 66207463 206d6f72 76726573     onnect from serv
   dbe34:	64207265 74206575 6572206f 6e6f7361     er due to reason
   dbe44:	00642520 6f6b6e55 63206e77 72746e6f      %d.Unkown contr
   dbe54:	70206c6f 656b6361 79742074 25206570     ol packet type %
   dbe64:	6f530064 64656b63 6f6c6320 00646573     d.Socked closed.
   dbe74:	6e6e6f43 20746365 656d6974 756f2064     Connect timed ou
   dbe84:	61500074 74656b63 746f6e20 6d6f6320     t.Packet not com
   dbe94:	74656c70 65520065 76696563 70206465     plete.Received p
   dbea4:	656b6361 79742074 25206570 69772064     acket type %d wi
   dbeb4:	6c206874 74676e65 64252068 6e695000     th length %d.Pin
   dbec4:	6f632067 20646c75 20746f6e 73206562     g could not be s
   dbed4:	00746e65 676e6950 73657220 736e6f70     ent.Ping respons
   dbee4:	6f6e2065 65722074 76696563 79206465     e not received y
   dbef4:	202e7465 65736552 6e69646e 69702067     et. Resending pi
   dbf04:	7220676e 65757165 41007473 74696177     ng request.Await
   dbf14:	63617020 2074656b 736b6361 6c6c4100      packet acks.All
   dbf24:	63617020 7374656b 6b636120 6c776f6e      packets acknowl
   dbf34:	65676465 77410064 20746961 656d6974     edged.Await time
   dbf44:	756f2064 6f430074 63656e6e 676e6974     d out.Connecting
   dbf54:	206f7420 76726573 25207265 6e6f2073      to server %s on
   dbf64:	726f7020 64252074 6e6f4300 7463656e      port %d.Connect
   dbf74:	20676e69 73206f74 65767265 64252072     ing to server %d
   dbf84:	2e64252e 252e6425 6e6f2064 726f7020     .%d.%d.%d on por
   dbf94:	64252074 756f4300 6e20646c 6f20746f     t %d.Could not o
   dbfa4:	206e6570 20504354 6e6e6f63 69746365     pen TCP connecti
   dbfb4:	74206e6f 6573206f 72657672 726c4100     on to server.Alr
   dbfc4:	79646165 6e6f6320 7463656e 74206465     eady connected t
   dbfd4:	6573206f 72657672 00000000              o server....

000dbfe0 <_ZL32MQTT5_DEFAULT_PUBLISH_PROPERTIES>:
	...

000dbff8 <_ZTVN5spark13EthernetClassE>:
	...
   dc000:	000d68cb 000d68c1 000d68b7 000d68ad     .h...h...h...h..
   dc010:	000d68a1 000d6895 000d6889 000d6881     .h...h...h...h..
   dc020:	000d6877 000d686d 000da745              wh..mh..E...

000dc02c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc034:	000d6ad9 000d6adf 000d8025 000d6b09     .j...j..%....k..
   dc044:	000d6adb                                .j..

000dc048 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc050:	000d6ad3 000d6aed 000d81e1 000d6b0d     .j...j.......k..
   dc060:	000d6ad5                                .j..

000dc064 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc06c:	000d6acd 000d6afb 000d7737 000d6b11     .j...j..7w...k..
   dc07c:	000d6acf 69726977 622e676e 5300656c     .j..wiring.ble.S
   dc08c:	74726174 73696420 65766f63 676e6972     tart discovering
   dc09c:	72657320 65636976 53002e73 74726174      services..Start
   dc0ac:	73696420 65766f63 676e6972 61686320      discovering cha
   dc0bc:	74636172 73697265 73636974 6550002e     racteristics..Pe
   dc0cc:	64207265 63697665 73692065 73696d20     er device is mis
   dc0dc:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   dc0ec:	65707061 7020646e 20726565 746e6543     append peer Cent
   dc0fc:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   dc10c:	65746365 79622064 6e654320 6c617274     ected by Central
   dc11c:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   dc12c:	65746365 79622064 6d657220 2065746f     ected by remote 
   dc13c:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   dc14c:	6e206464 70207765 20726565 69766564     dd new peer devi
   dc15c:	002e6563 2077654e 69726570 72656870     ce..New peripher
   dc16c:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   dc17c:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   dc18c:	69642064 766f6373 64657265 61686320     d discovered cha
   dc19c:	74636172 73697265 2e636974 69614600     racteristic..Fai
   dc1ac:	2064656c 61206f74 6e657070 69642064     led to append di
   dc1bc:	766f6373 64657265 72657320 65636976     scovered service
   dc1cc:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   dc1dc:	6c20646e 6c61636f 61686320 74636172     nd local charact
   dc1ec:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   dc1fc:	20646574 72616863 65746361 74736972     ted characterist
   dc20c:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   dc21c:	002e6465                                ed..

000dc220 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dc220:	5f9b34fb 80000080 00001000 00000000     .4._............

000dc230 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dc238:	000d8471 000d8497 000d844b 000da853     q.......K...S...

000dc248 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dc250:	000d88ed 000d8901 000d9249 000d8453     ........I...S...
   dc260:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   dc270:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   dc280:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   dc290:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   dc2a0:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   dc2b0:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   dc2c0:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   dc2d0:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   dc2e0:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   dc2f0:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   dc300:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   dc310:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   dc320:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   dc330:	61700072 0063696e 006c6c61              r.panic.all.

000dc33c <_ZTVN5spark16StreamLogHandlerE>:
	...
   dc344:	000d88c1 000d88d9 000d9095 000d40cf     .............@..

000dc354 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dc35c:	000d846f 000d84a5 000d8fbd 000d8455     o...........U...

000dc36c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dc374:	000d846d 000d84b3 000d8805 000d84c1     m...............
   dc384:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   dc394:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   dc3a4:	63736100 656d6974 00000000              .asctime....

000dc3b0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc3b8:	000d9601 000d9607 000d964b 000d9615     ........K.......
   dc3c8:	000d9603                                ....

000dc3cc <_ZTV9IPAddress>:
	...
   dc3d4:	000d9bf1 000d9be1 000d9be3              ............

000dc3e0 <_ZTV9USBSerial>:
	...
   dc3e8:	000d9d09 000d9d59 000d9d67 000d832d     ....Y...g...-...
   dc3f8:	000d9d45 000d9d0b 000d9d21 000d9d53     E.......!...S...
   dc408:	000d9d37 000d9d05                       7.......

000dc410 <_ZTV11USARTSerial>:
	...
   dc418:	000d9e1d 000d9e6d 000d9e7b 000d832d     ....m...{...-...
   dc428:	000d9e31 000d9e53 000d9e3f 000d9e67     1...S...?...g...
   dc438:	000d9e1f 000d9e23                       ....#...

000dc440 <_ZTVN5spark9MeshClassE>:
	...
   dc448:	000d9fb3 000d9fa9 000d9f9f 000d9f95     ................
   dc458:	000d9f89 000d9f7d 000d9f71 000d9f69     ....}...q...i...
   dc468:	000d9f5f 000d9f55 000da745              _...U...E...

000dc474 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc47c:	000da159 000da15f 000da647 000da16d     Y..._...G...m...
   dc48c:	000da15b                                [...

000dc490 <_ZTV9TCPClient>:
	...
   dc498:	000d9461 000d9481 000da0d1 000da0eb     a...............
   dc4a8:	000da4ed 000da23f 000da211 000da115     ....?...........
   dc4b8:	000da3c9 000da2c5 000da273 000da4bd     ........s.......
   dc4c8:	000da117 000da14f 000da0fd 000da171     ....O.......q...
   dc4d8:	000da1f1 69726977 7200676e 20766365     ....wiring.recv 
   dc4e8:	6f727265 203d2072 00006425              error = %d..

000dc4f4 <_ZTVN5spark9WiFiClassE>:
	...
   dc4fc:	000da6bd 000da6b3 000da6a9 000da65f     ............_...
   dc50c:	000da69d 000da691 000da685 000da67d     ............}...
   dc51c:	000da673 000da669 000da745              s...i...E...

000dc528 <_ZTVN5spark12NetworkClassE>:
	...
   dc530:	000da6dd 000da6e7 000da6f1 000da6fb     ................
   dc540:	000da705 000da711 000da71d 000da729     ............)...
   dc550:	000da731 000da73b 000da745 00302e30     1...;...E...0.0.
   dc560:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   dc570:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000dc57f <_ZSt7nothrow>:
	...

000dc580 <_ctype_>:
   dc580:	20202000 20202020 28282020 20282828     .         ((((( 
   dc590:	20202020 20202020 20202020 20202020                     
   dc5a0:	10108820 10101010 10101010 10101010      ...............
   dc5b0:	04040410 04040404 10040404 10101010     ................
   dc5c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dc5d0:	01010101 01010101 01010101 10101010     ................
   dc5e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dc5f0:	02020202 02020202 02020202 10101010     ................
   dc600:	00000020 00000000 00000000 00000000      ...............
	...

000dc684 <__sf_fake_stdin>:
	...

000dc6a4 <__sf_fake_stdout>:
	...

000dc6c4 <__sf_fake_stderr>:
	...
   dc6e4:	00000043                                         C.

000dc6e6 <link_const_variable_data_end>:
	...

000dc6e8 <link_constructors_location>:
   dc6e8:	000d4b6d 	.word	0x000d4b6d
   dc6ec:	000d4d95 	.word	0x000d4d95
   dc6f0:	000d624b 	.word	0x000d624b
   dc6f4:	000d68d5 	.word	0x000d68d5
   dc6f8:	000d68e9 	.word	0x000d68e9
   dc6fc:	000d8305 	.word	0x000d8305
   dc700:	000d9085 	.word	0x000d9085
   dc704:	000d942d 	.word	0x000d942d
   dc708:	000d94d5 	.word	0x000d94d5
   dc70c:	000da081 	.word	0x000da081
   dc710:	000da6c9 	.word	0x000da6c9
   dc714:	000da811 	.word	0x000da811
   dc718:	000dabf1 	.word	0x000dabf1
   dc71c:	000dac75 	.word	0x000dac75
   dc720:	000dad39 	.word	0x000dad39
   dc724:	000dadfd 	.word	0x000dadfd

000dc728 <link_constructors_end>:
	...
