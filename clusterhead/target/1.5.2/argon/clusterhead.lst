
c:/Users/tschw/repos/elec4740Group6/clusterhead/target/1.5.2/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000070f4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000db110  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000d0  2003d774  000db114  0001d774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000fac  2003d848  2003d848  0002d848  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000db1e4  000db1e4  0002b1e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000db20c  000db20c  0002b20c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fd235  00000000  00000000  0002b210  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012a45  00000000  00000000  00128445  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002325b  00000000  00000000  0013ae8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002c78  00000000  00000000  0015e0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000052c0  00000000  00000000  00160d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003652f  00000000  00000000  0016601d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002b5ee  00000000  00000000  0019c54c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b458  00000000  00000000  001c7b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e5f8  00000000  00000000  002d2f94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fbe8 	bl	d9802 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fc08 	bl	d984e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d774 	.word	0x2003d774
   d4048:	000db114 	.word	0x000db114
   d404c:	2003d844 	.word	0x2003d844
   d4050:	2003d848 	.word	0x2003d848
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 fae7 	bl	d862c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000db108 	.word	0x000db108
   d4080:	000db0cc 	.word	0x000db0cc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bd34 	b.w	d4af0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fb23 	bl	d46d4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 ba8d 	b.w	d85b0 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bb85 	b.w	d57a4 <malloc>

000d409a <_ZdlPv>:
   d409a:	f001 bb8b 	b.w	d57b4 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f001 bb89 	b.w	d57b4 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 face 	bl	d564c <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d5289 	.word	0x000d5289

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3

000d40d2 <_ZN13LiquidCrystalD1Ev>:
#define LCD_2LINE 0x08
#define LCD_1LINE 0x00
#define LCD_5x10DOTS 0x04
#define LCD_5x8DOTS 0x00

class LiquidCrystal : public Print {
   d40d2:	4770      	bx	lr

000d40d4 <_Z20setAlarmCooloffDelay6String>:
   d40d4:	b508      	push	{r3, lr}
   d40d6:	f001 fd23 	bl	d5b20 <_ZNK6String5toIntEv>
   d40da:	4b02      	ldr	r3, [pc, #8]	; (d40e4 <_Z20setAlarmCooloffDelay6String+0x10>)
   d40dc:	8018      	strh	r0, [r3, #0]
   d40de:	2001      	movs	r0, #1
   d40e0:	bd08      	pop	{r3, pc}
   d40e2:	bf00      	nop
   d40e4:	2003d782 	.word	0x2003d782

000d40e8 <_Z20setDistanceThreshold6String>:
   d40e8:	b508      	push	{r3, lr}
   d40ea:	f001 fd19 	bl	d5b20 <_ZNK6String5toIntEv>
   d40ee:	4b02      	ldr	r3, [pc, #8]	; (d40f8 <_Z20setDistanceThreshold6String+0x10>)
   d40f0:	8018      	strh	r0, [r3, #0]
   d40f2:	2001      	movs	r0, #1
   d40f4:	bd08      	pop	{r3, pc}
   d40f6:	bf00      	nop
   d40f8:	2003d780 	.word	0x2003d780

000d40fc <_Z22setAlarmLightThreshold6String>:
   d40fc:	b508      	push	{r3, lr}
   d40fe:	f001 fd0f 	bl	d5b20 <_ZNK6String5toIntEv>
   d4102:	4b02      	ldr	r3, [pc, #8]	; (d410c <_Z22setAlarmLightThreshold6String+0x10>)
   d4104:	8018      	strh	r0, [r3, #0]
   d4106:	2001      	movs	r0, #1
   d4108:	bd08      	pop	{r3, pc}
   d410a:	bf00      	nop
   d410c:	2003d774 	.word	0x2003d774

000d4110 <_Z19setVolumeThresholds6String>:
   d4110:	b570      	push	{r4, r5, r6, lr}
   d4112:	b088      	sub	sp, #32
   d4114:	4604      	mov	r4, r0
   d4116:	490f      	ldr	r1, [pc, #60]	; (d4154 <_Z19setVolumeThresholds6String+0x44>)
   d4118:	4e0f      	ldr	r6, [pc, #60]	; (d4158 <_Z19setVolumeThresholds6String+0x48>)
   d411a:	4668      	mov	r0, sp
   d411c:	f001 fc37 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d4120:	4669      	mov	r1, sp
   d4122:	4620      	mov	r0, r4
   d4124:	f001 fcbe 	bl	d5aa4 <_ZNK6String7indexOfERKS_>
   d4128:	b2c5      	uxtb	r5, r0
   d412a:	4621      	mov	r1, r4
   d412c:	462b      	mov	r3, r5
   d412e:	2200      	movs	r2, #0
   d4130:	a804      	add	r0, sp, #16
   d4132:	f001 fcbb 	bl	d5aac <_ZNK6String9substringEjj>
   d4136:	a804      	add	r0, sp, #16
   d4138:	f001 fcf2 	bl	d5b20 <_ZNK6String5toIntEv>
   d413c:	f826 0f02 	strh.w	r0, [r6, #2]!
   d4140:	a804      	add	r0, sp, #16
   d4142:	f001 fbdd 	bl	d5900 <_ZN6StringD1Ev>
   d4146:	9a02      	ldr	r2, [sp, #8]
   d4148:	2100      	movs	r1, #0
   d414a:	442a      	add	r2, r5
   d414c:	4620      	mov	r0, r4
   d414e:	f001 fccd 	bl	d5aec <_ZN6String6removeEjj>
   d4152:	e7e5      	b.n	d4120 <_Z19setVolumeThresholds6String+0x10>
   d4154:	000da260 	.word	0x000da260
   d4158:	2003d778 	.word	0x2003d778

000d415c <_Z26setSoundDurationThresholds6String>:
   d415c:	b570      	push	{r4, r5, r6, lr}
   d415e:	b088      	sub	sp, #32
   d4160:	4604      	mov	r4, r0
   d4162:	490f      	ldr	r1, [pc, #60]	; (d41a0 <_Z26setSoundDurationThresholds6String+0x44>)
   d4164:	4e0f      	ldr	r6, [pc, #60]	; (d41a4 <_Z26setSoundDurationThresholds6String+0x48>)
   d4166:	4668      	mov	r0, sp
   d4168:	f001 fc11 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d416c:	4669      	mov	r1, sp
   d416e:	4620      	mov	r0, r4
   d4170:	f001 fc98 	bl	d5aa4 <_ZNK6String7indexOfERKS_>
   d4174:	b2c5      	uxtb	r5, r0
   d4176:	4621      	mov	r1, r4
   d4178:	462b      	mov	r3, r5
   d417a:	2200      	movs	r2, #0
   d417c:	a804      	add	r0, sp, #16
   d417e:	f001 fc95 	bl	d5aac <_ZNK6String9substringEjj>
   d4182:	a804      	add	r0, sp, #16
   d4184:	f001 fccc 	bl	d5b20 <_ZNK6String5toIntEv>
   d4188:	f826 0f02 	strh.w	r0, [r6, #2]!
   d418c:	a804      	add	r0, sp, #16
   d418e:	f001 fbb7 	bl	d5900 <_ZN6StringD1Ev>
   d4192:	9a02      	ldr	r2, [sp, #8]
   d4194:	2100      	movs	r1, #0
   d4196:	442a      	add	r2, r5
   d4198:	4620      	mov	r0, r4
   d419a:	f001 fca7 	bl	d5aec <_ZN6String6removeEjj>
   d419e:	e7e5      	b.n	d416c <_Z26setSoundDurationThresholds6String+0x10>
   d41a0:	000da260 	.word	0x000da260
   d41a4:	2003d774 	.word	0x2003d774

000d41a8 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a8:	b510      	push	{r4, lr}
   d41aa:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d41ac:	6800      	ldr	r0, [r0, #0]
   d41ae:	b108      	cbz	r0, d41b4 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41b0:	f001 fb00 	bl	d57b4 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41b4:	4620      	mov	r0, r4
   d41b6:	bd10      	pop	{r4, pc}

000d41b8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41b8:	4b0a      	ldr	r3, [pc, #40]	; (d41e4 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d41ba:	b510      	push	{r4, lr}
   d41bc:	4604      	mov	r4, r0
   d41be:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d41c0:	f003 fabe 	bl	d7740 <_ZN5spark10LogManager8instanceEv>
   d41c4:	4621      	mov	r1, r4
   d41c6:	f003 fcab 	bl	d7b20 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d41ca:	f004 fb61 	bl	d8890 <_Z16_fetch_usbserialv>
   d41ce:	f004 fb53 	bl	d8878 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d41d2:	4620      	mov	r0, r4
   d41d4:	4b04      	ldr	r3, [pc, #16]	; (d41e8 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d41d6:	f840 3b04 	str.w	r3, [r0], #4
   d41da:	f003 fba7 	bl	d792c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d41de:	4620      	mov	r0, r4
   d41e0:	bd10      	pop	{r4, pc}
   d41e2:	bf00      	nop
   d41e4:	000da250 	.word	0x000da250
   d41e8:	000da238 	.word	0x000da238

000d41ec <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d41ec:	b510      	push	{r4, lr}
   d41ee:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d41f0:	f7ff ffe2 	bl	d41b8 <_ZN5spark16SerialLogHandlerD1Ev>
   d41f4:	4620      	mov	r0, r4
   d41f6:	2124      	movs	r1, #36	; 0x24
   d41f8:	f005 f852 	bl	d92a0 <_ZdlPvj>
   d41fc:	4620      	mov	r0, r4
   d41fe:	bd10      	pop	{r4, pc}

000d4200 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4200:	b40e      	push	{r1, r2, r3}
   d4202:	b500      	push	{lr}
   d4204:	b08c      	sub	sp, #48	; 0x30
   d4206:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4208:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d420a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d420e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4210:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4214:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4216:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4218:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d421a:	aa04      	add	r2, sp, #16
   d421c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d421e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4220:	f001 fa24 	bl	d566c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4224:	b00c      	add	sp, #48	; 0x30
   d4226:	f85d eb04 	ldr.w	lr, [sp], #4
   d422a:	b003      	add	sp, #12
   d422c:	4770      	bx	lr
	...

000d4230 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
   d4230:	b508      	push	{r3, lr}
   d4232:	4903      	ldr	r1, [pc, #12]	; (d4240 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d4234:	f990 2000 	ldrsb.w	r2, [r0]
   d4238:	4802      	ldr	r0, [pc, #8]	; (d4244 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d423a:	f7ff ffe1 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d423e:	bd08      	pop	{r3, pc}
   d4240:	000da262 	.word	0x000da262
   d4244:	2003e3bc 	.word	0x2003e3bc

000d4248 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
   d4248:	b508      	push	{r3, lr}
   d424a:	4903      	ldr	r1, [pc, #12]	; (d4258 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d424c:	7802      	ldrb	r2, [r0, #0]
   d424e:	4803      	ldr	r0, [pc, #12]	; (d425c <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d4250:	f7ff ffd6 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4254:	bd08      	pop	{r3, pc}
   d4256:	bf00      	nop
   d4258:	000da28d 	.word	0x000da28d
   d425c:	2003e3bc 	.word	0x2003e3bc

000d4260 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
   d4260:	b507      	push	{r0, r1, r2, lr}
   d4262:	8803      	ldrh	r3, [r0, #0]
   d4264:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4268:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d426c:	4903      	ldr	r1, [pc, #12]	; (d427c <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d426e:	4804      	ldr	r0, [pc, #16]	; (d4280 <_Z18onCurrentReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4270:	f7ff ffc6 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4274:	b003      	add	sp, #12
   d4276:	f85d fb04 	ldr.w	pc, [sp], #4
   d427a:	bf00      	nop
   d427c:	000da2a7 	.word	0x000da2a7
   d4280:	2003e3bc 	.word	0x2003e3bc

000d4284 <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
   d4284:	b507      	push	{r0, r1, r2, lr}
   d4286:	8803      	ldrh	r3, [r0, #0]
   d4288:	f8ad 3006 	strh.w	r3, [sp, #6]
   d428c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4290:	4903      	ldr	r1, [pc, #12]	; (d42a0 <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d4292:	4804      	ldr	r0, [pc, #16]	; (d42a4 <_Z18onCurrentReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4294:	f7ff ffb4 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4298:	b003      	add	sp, #12
   d429a:	f85d fb04 	ldr.w	pc, [sp], #4
   d429e:	bf00      	nop
   d42a0:	000da2c3 	.word	0x000da2c3
   d42a4:	2003e3bc 	.word	0x2003e3bc

000d42a8 <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
   d42a8:	b508      	push	{r3, lr}
   d42aa:	4903      	ldr	r1, [pc, #12]	; (d42b8 <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d42ac:	f990 2000 	ldrsb.w	r2, [r0]
   d42b0:	4802      	ldr	r0, [pc, #8]	; (d42bc <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d42b2:	f7ff ffa5 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d42b6:	bd08      	pop	{r3, pc}
   d42b8:	000da2df 	.word	0x000da2df
   d42bc:	2003e3bc 	.word	0x2003e3bc

000d42c0 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
   d42c0:	b513      	push	{r0, r1, r4, lr}
   d42c2:	8803      	ldrh	r3, [r0, #0]
   d42c4:	f8ad 3006 	strh.w	r3, [sp, #6]
   d42c8:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d42cc:	4904      	ldr	r1, [pc, #16]	; (d42e0 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d42ce:	4805      	ldr	r0, [pc, #20]	; (d42e4 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d42d0:	4622      	mov	r2, r4
   d42d2:	f7ff ff95 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d42d6:	4b04      	ldr	r3, [pc, #16]	; (d42e8 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d42d8:	801c      	strh	r4, [r3, #0]
   d42da:	b002      	add	sp, #8
   d42dc:	bd10      	pop	{r4, pc}
   d42de:	bf00      	nop
   d42e0:	000da30a 	.word	0x000da30a
   d42e4:	2003e3bc 	.word	0x2003e3bc
   d42e8:	2003e310 	.word	0x2003e310

000d42ec <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
   d42ec:	b513      	push	{r0, r1, r4, lr}
   d42ee:	4602      	mov	r2, r0
   d42f0:	4604      	mov	r4, r0
   d42f2:	f852 0f01 	ldr.w	r0, [r2, #1]!
   d42f6:	7824      	ldrb	r4, [r4, #0]
   d42f8:	6851      	ldr	r1, [r2, #4]
   d42fa:	466b      	mov	r3, sp
   d42fc:	c303      	stmia	r3!, {r0, r1}
   d42fe:	4622      	mov	r2, r4
   d4300:	490a      	ldr	r1, [pc, #40]	; (d432c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d4302:	480b      	ldr	r0, [pc, #44]	; (d4330 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4304:	f7ff ff7c 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4308:	b90c      	cbnz	r4, d430e <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
   d430a:	490a      	ldr	r1, [pc, #40]	; (d4334 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d430c:	e002      	b.n	d4314 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>
   d430e:	2c01      	cmp	r4, #1
   d4310:	d104      	bne.n	d431c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x30>
   d4312:	4909      	ldr	r1, [pc, #36]	; (d4338 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4c>)
   d4314:	4806      	ldr	r0, [pc, #24]	; (d4330 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4316:	f7ff ff73 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d431a:	e004      	b.n	d4326 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3a>
   d431c:	4622      	mov	r2, r4
   d431e:	4907      	ldr	r1, [pc, #28]	; (d433c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x50>)
   d4320:	4803      	ldr	r0, [pc, #12]	; (d4330 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4322:	f7ff ff6d 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4326:	b002      	add	sp, #8
   d4328:	bd10      	pop	{r4, pc}
   d432a:	bf00      	nop
   d432c:	000da323 	.word	0x000da323
   d4330:	2003e3bc 	.word	0x2003e3bc
   d4334:	000da341 	.word	0x000da341
   d4338:	000da35a 	.word	0x000da35a
   d433c:	000da375 	.word	0x000da375

000d4340 <_Z28updateSoundThresholdCountersh>:
   d4340:	b510      	push	{r4, lr}
   d4342:	4b0f      	ldr	r3, [pc, #60]	; (d4380 <_Z28updateSoundThresholdCountersh+0x40>)
   d4344:	881a      	ldrh	r2, [r3, #0]
   d4346:	4b0f      	ldr	r3, [pc, #60]	; (d4384 <_Z28updateSoundThresholdCountersh+0x44>)
   d4348:	881b      	ldrh	r3, [r3, #0]
   d434a:	429a      	cmp	r2, r3
   d434c:	4b0e      	ldr	r3, [pc, #56]	; (d4388 <_Z28updateSoundThresholdCountersh+0x48>)
   d434e:	d213      	bcs.n	d4378 <_Z28updateSoundThresholdCountersh+0x38>
   d4350:	4a0e      	ldr	r2, [pc, #56]	; (d438c <_Z28updateSoundThresholdCountersh+0x4c>)
   d4352:	490f      	ldr	r1, [pc, #60]	; (d4390 <_Z28updateSoundThresholdCountersh+0x50>)
   d4354:	6812      	ldr	r2, [r2, #0]
   d4356:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
   d435a:	4294      	cmp	r4, r2
   d435c:	da02      	bge.n	d4364 <_Z28updateSoundThresholdCountersh+0x24>
   d435e:	685a      	ldr	r2, [r3, #4]
   d4360:	4402      	add	r2, r0
   d4362:	e004      	b.n	d436e <_Z28updateSoundThresholdCountersh+0x2e>
   d4364:	f9b1 1000 	ldrsh.w	r1, [r1]
   d4368:	428a      	cmp	r2, r1
   d436a:	dd05      	ble.n	d4378 <_Z28updateSoundThresholdCountersh+0x38>
   d436c:	2200      	movs	r2, #0
   d436e:	605a      	str	r2, [r3, #4]
   d4370:	681a      	ldr	r2, [r3, #0]
   d4372:	4410      	add	r0, r2
   d4374:	6018      	str	r0, [r3, #0]
   d4376:	bd10      	pop	{r4, pc}
   d4378:	2200      	movs	r2, #0
   d437a:	605a      	str	r2, [r3, #4]
   d437c:	601a      	str	r2, [r3, #0]
   d437e:	bd10      	pop	{r4, pc}
   d4380:	2003e310 	.word	0x2003e310
   d4384:	2003d774 	.word	0x2003d774
   d4388:	2003e274 	.word	0x2003e274
   d438c:	2003e29c 	.word	0x2003e29c
   d4390:	2003d77a 	.word	0x2003d77a

000d4394 <_Z15updateStatusLedv>:
   d4394:	4b16      	ldr	r3, [pc, #88]	; (d43f0 <_Z15updateStatusLedv+0x5c>)
   d4396:	781a      	ldrb	r2, [r3, #0]
   d4398:	b172      	cbz	r2, d43b8 <_Z15updateStatusLedv+0x24>
   d439a:	4b16      	ldr	r3, [pc, #88]	; (d43f4 <_Z15updateStatusLedv+0x60>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	f013 0307 	ands.w	r3, r3, #7
   d43a2:	d103      	bne.n	d43ac <_Z15updateStatusLedv+0x18>
   d43a4:	2100      	movs	r1, #0
   d43a6:	22ff      	movs	r2, #255	; 0xff
   d43a8:	4608      	mov	r0, r1
   d43aa:	e00e      	b.n	d43ca <_Z15updateStatusLedv+0x36>
   d43ac:	2b04      	cmp	r3, #4
   d43ae:	d11e      	bne.n	d43ee <_Z15updateStatusLedv+0x5a>
   d43b0:	2200      	movs	r2, #0
   d43b2:	4611      	mov	r1, r2
   d43b4:	4610      	mov	r0, r2
   d43b6:	e008      	b.n	d43ca <_Z15updateStatusLedv+0x36>
   d43b8:	78da      	ldrb	r2, [r3, #3]
   d43ba:	b142      	cbz	r2, d43ce <_Z15updateStatusLedv+0x3a>
   d43bc:	4b0d      	ldr	r3, [pc, #52]	; (d43f4 <_Z15updateStatusLedv+0x60>)
   d43be:	681b      	ldr	r3, [r3, #0]
   d43c0:	07da      	lsls	r2, r3, #31
   d43c2:	d4f5      	bmi.n	d43b0 <_Z15updateStatusLedv+0x1c>
   d43c4:	2200      	movs	r2, #0
   d43c6:	4611      	mov	r1, r2
   d43c8:	20ff      	movs	r0, #255	; 0xff
   d43ca:	f004 b8b1 	b.w	d8530 <_ZN8RGBClass5colorEiii>
   d43ce:	789a      	ldrb	r2, [r3, #2]
   d43d0:	b132      	cbz	r2, d43e0 <_Z15updateStatusLedv+0x4c>
   d43d2:	4b08      	ldr	r3, [pc, #32]	; (d43f4 <_Z15updateStatusLedv+0x60>)
   d43d4:	681b      	ldr	r3, [r3, #0]
   d43d6:	f013 0303 	ands.w	r3, r3, #3
   d43da:	d0f3      	beq.n	d43c4 <_Z15updateStatusLedv+0x30>
   d43dc:	2b02      	cmp	r3, #2
   d43de:	e7e6      	b.n	d43ae <_Z15updateStatusLedv+0x1a>
   d43e0:	785b      	ldrb	r3, [r3, #1]
   d43e2:	b123      	cbz	r3, d43ee <_Z15updateStatusLedv+0x5a>
   d43e4:	4b03      	ldr	r3, [pc, #12]	; (d43f4 <_Z15updateStatusLedv+0x60>)
   d43e6:	681b      	ldr	r3, [r3, #0]
   d43e8:	07db      	lsls	r3, r3, #31
   d43ea:	d4e1      	bmi.n	d43b0 <_Z15updateStatusLedv+0x1c>
   d43ec:	e7da      	b.n	d43a4 <_Z15updateStatusLedv+0x10>
   d43ee:	4770      	bx	lr
   d43f0:	2003e312 	.word	0x2003e312
   d43f4:	2003e2d8 	.word	0x2003e2d8

000d43f8 <_Z19alarmCondtitionsMeti>:
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4602      	mov	r2, r0
   d43fc:	2803      	cmp	r0, #3
   d43fe:	d82c      	bhi.n	d445a <_Z19alarmCondtitionsMeti+0x62>
   d4400:	e8df f000 	tbb	[pc, r0]
   d4404:	21120d02 	.word	0x21120d02
   d4408:	4b17      	ldr	r3, [pc, #92]	; (d4468 <_Z19alarmCondtitionsMeti+0x70>)
   d440a:	7818      	ldrb	r0, [r3, #0]
   d440c:	2800      	cmp	r0, #0
   d440e:	d029      	beq.n	d4464 <_Z19alarmCondtitionsMeti+0x6c>
   d4410:	4b16      	ldr	r3, [pc, #88]	; (d446c <_Z19alarmCondtitionsMeti+0x74>)
   d4412:	881b      	ldrh	r3, [r3, #0]
   d4414:	4283      	cmp	r3, r0
   d4416:	bf34      	ite	cc
   d4418:	2000      	movcc	r0, #0
   d441a:	2001      	movcs	r0, #1
   d441c:	bd08      	pop	{r3, pc}
   d441e:	4b14      	ldr	r3, [pc, #80]	; (d4470 <_Z19alarmCondtitionsMeti+0x78>)
   d4420:	4a14      	ldr	r2, [pc, #80]	; (d4474 <_Z19alarmCondtitionsMeti+0x7c>)
   d4422:	881b      	ldrh	r3, [r3, #0]
   d4424:	6812      	ldr	r2, [r2, #0]
   d4426:	e003      	b.n	d4430 <_Z19alarmCondtitionsMeti+0x38>
   d4428:	4b11      	ldr	r3, [pc, #68]	; (d4470 <_Z19alarmCondtitionsMeti+0x78>)
   d442a:	4a12      	ldr	r2, [pc, #72]	; (d4474 <_Z19alarmCondtitionsMeti+0x7c>)
   d442c:	885b      	ldrh	r3, [r3, #2]
   d442e:	6852      	ldr	r2, [r2, #4]
   d4430:	429a      	cmp	r2, r3
   d4432:	d316      	bcc.n	d4462 <_Z19alarmCondtitionsMeti+0x6a>
   d4434:	4a10      	ldr	r2, [pc, #64]	; (d4478 <_Z19alarmCondtitionsMeti+0x80>)
   d4436:	4b11      	ldr	r3, [pc, #68]	; (d447c <_Z19alarmCondtitionsMeti+0x84>)
   d4438:	8810      	ldrh	r0, [r2, #0]
   d443a:	881b      	ldrh	r3, [r3, #0]
   d443c:	4283      	cmp	r3, r0
   d443e:	bf2c      	ite	cs
   d4440:	2000      	movcs	r0, #0
   d4442:	2001      	movcc	r0, #1
   d4444:	bd08      	pop	{r3, pc}
   d4446:	4a0e      	ldr	r2, [pc, #56]	; (d4480 <_Z19alarmCondtitionsMeti+0x88>)
   d4448:	4b0e      	ldr	r3, [pc, #56]	; (d4484 <_Z19alarmCondtitionsMeti+0x8c>)
   d444a:	6810      	ldr	r0, [r2, #0]
   d444c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
   d4450:	4283      	cmp	r3, r0
   d4452:	bfac      	ite	ge
   d4454:	2000      	movge	r0, #0
   d4456:	2001      	movlt	r0, #1
   d4458:	bd08      	pop	{r3, pc}
   d445a:	490b      	ldr	r1, [pc, #44]	; (d4488 <_Z19alarmCondtitionsMeti+0x90>)
   d445c:	480b      	ldr	r0, [pc, #44]	; (d448c <_Z19alarmCondtitionsMeti+0x94>)
   d445e:	f7ff fecf 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4462:	2000      	movs	r0, #0
   d4464:	bd08      	pop	{r3, pc}
   d4466:	bf00      	nop
   d4468:	2003e2d4 	.word	0x2003e2d4
   d446c:	2003d780 	.word	0x2003d780
   d4470:	2003d776 	.word	0x2003d776
   d4474:	2003e274 	.word	0x2003e274
   d4478:	2003d774 	.word	0x2003d774
   d447c:	2003e310 	.word	0x2003e310
   d4480:	2003e29c 	.word	0x2003e29c
   d4484:	2003d77a 	.word	0x2003d77a
   d4488:	000da3bd 	.word	0x000da3bd
   d448c:	2003e3bc 	.word	0x2003e3bc

000d4490 <_Z10startAlarmi>:
   d4490:	2803      	cmp	r0, #3
   d4492:	b510      	push	{r4, lr}
   d4494:	4604      	mov	r4, r0
   d4496:	d814      	bhi.n	d44c2 <_Z10startAlarmi+0x32>
   d4498:	4b0d      	ldr	r3, [pc, #52]	; (d44d0 <_Z10startAlarmi+0x40>)
   d449a:	2201      	movs	r2, #1
   d449c:	541a      	strb	r2, [r3, r0]
   d449e:	f003 ffcf 	bl	d8440 <_ZN9TimeClass5localEv>
   d44a2:	4b0c      	ldr	r3, [pc, #48]	; (d44d4 <_Z10startAlarmi+0x44>)
   d44a4:	17c1      	asrs	r1, r0, #31
   d44a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   d44aa:	2c00      	cmp	r4, #0
   d44ac:	e9c3 0100 	strd	r0, r1, [r3]
   d44b0:	4622      	mov	r2, r4
   d44b2:	bf0c      	ite	eq
   d44b4:	2301      	moveq	r3, #1
   d44b6:	2302      	movne	r3, #2
   d44b8:	4907      	ldr	r1, [pc, #28]	; (d44d8 <_Z10startAlarmi+0x48>)
   d44ba:	4808      	ldr	r0, [pc, #32]	; (d44dc <_Z10startAlarmi+0x4c>)
   d44bc:	f7ff fea0 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d44c0:	bd10      	pop	{r4, pc}
   d44c2:	4602      	mov	r2, r0
   d44c4:	4906      	ldr	r1, [pc, #24]	; (d44e0 <_Z10startAlarmi+0x50>)
   d44c6:	4805      	ldr	r0, [pc, #20]	; (d44dc <_Z10startAlarmi+0x4c>)
   d44c8:	f7ff fe9a 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d44cc:	bd10      	pop	{r4, pc}
   d44ce:	bf00      	nop
   d44d0:	2003e312 	.word	0x2003e312
   d44d4:	2003e318 	.word	0x2003e318
   d44d8:	000da42e 	.word	0x000da42e
   d44dc:	2003e3bc 	.word	0x2003e3bc
   d44e0:	000da456 	.word	0x000da456

000d44e4 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
   d44e4:	b513      	push	{r0, r1, r4, lr}
   d44e6:	4602      	mov	r2, r0
   d44e8:	4604      	mov	r4, r0
   d44ea:	f852 0f01 	ldr.w	r0, [r2, #1]!
   d44ee:	7824      	ldrb	r4, [r4, #0]
   d44f0:	6851      	ldr	r1, [r2, #4]
   d44f2:	466b      	mov	r3, sp
   d44f4:	c303      	stmia	r3!, {r0, r1}
   d44f6:	4622      	mov	r2, r4
   d44f8:	4808      	ldr	r0, [pc, #32]	; (d451c <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d44fa:	4909      	ldr	r1, [pc, #36]	; (d4520 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d44fc:	f7ff fe80 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4500:	4b08      	ldr	r3, [pc, #32]	; (d4524 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d4502:	2000      	movs	r0, #0
   d4504:	701c      	strb	r4, [r3, #0]
   d4506:	f7ff ff77 	bl	d43f8 <_Z19alarmCondtitionsMeti>
   d450a:	b128      	cbz	r0, d4518 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
   d450c:	2000      	movs	r0, #0
   d450e:	b002      	add	sp, #8
   d4510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4514:	f7ff bfbc 	b.w	d4490 <_Z10startAlarmi>
   d4518:	b002      	add	sp, #8
   d451a:	bd10      	pop	{r4, pc}
   d451c:	2003e3bc 	.word	0x2003e3bc
   d4520:	000da4bf 	.word	0x000da4bf
   d4524:	2003e2d4 	.word	0x2003e2d4

000d4528 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
   d4528:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d452a:	4602      	mov	r2, r0
   d452c:	4604      	mov	r4, r0
   d452e:	f852 0f02 	ldr.w	r0, [r2, #2]!
   d4532:	6851      	ldr	r1, [r2, #4]
   d4534:	ab02      	add	r3, sp, #8
   d4536:	c303      	stmia	r3!, {r0, r1}
   d4538:	8823      	ldrh	r3, [r4, #0]
   d453a:	f8ad 3006 	strh.w	r3, [sp, #6]
   d453e:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d4542:	4809      	ldr	r0, [pc, #36]	; (d4568 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d4544:	4909      	ldr	r1, [pc, #36]	; (d456c <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d4546:	4622      	mov	r2, r4
   d4548:	f7ff fe5a 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d454c:	4b08      	ldr	r3, [pc, #32]	; (d4570 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d454e:	2003      	movs	r0, #3
   d4550:	601c      	str	r4, [r3, #0]
   d4552:	f7ff ff51 	bl	d43f8 <_Z19alarmCondtitionsMeti>
   d4556:	b128      	cbz	r0, d4564 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>
   d4558:	2003      	movs	r0, #3
   d455a:	b004      	add	sp, #16
   d455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4560:	f7ff bf96 	b.w	d4490 <_Z10startAlarmi>
   d4564:	b004      	add	sp, #16
   d4566:	bd10      	pop	{r4, pc}
   d4568:	2003e3bc 	.word	0x2003e3bc
   d456c:	000da4da 	.word	0x000da4da
   d4570:	2003e29c 	.word	0x2003e29c

000d4574 <_Z10resetAlarmi>:
   d4574:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4576:	2803      	cmp	r0, #3
   d4578:	b087      	sub	sp, #28
   d457a:	4604      	mov	r4, r0
   d457c:	d821      	bhi.n	d45c2 <_Z10resetAlarmi+0x4e>
   d457e:	f003 ff5f 	bl	d8440 <_ZN9TimeClass5localEv>
   d4582:	4b13      	ldr	r3, [pc, #76]	; (d45d0 <_Z10resetAlarmi+0x5c>)
   d4584:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
   d4588:	2c00      	cmp	r4, #0
   d458a:	ad02      	add	r5, sp, #8
   d458c:	eba0 0701 	sub.w	r7, r0, r1
   d4590:	bf0c      	ite	eq
   d4592:	2601      	moveq	r6, #1
   d4594:	2602      	movne	r6, #2
   d4596:	4628      	mov	r0, r5
   d4598:	f003 ff7c 	bl	d8494 <_ZN9TimeClass7timeStrEl>
   d459c:	4633      	mov	r3, r6
   d459e:	4622      	mov	r2, r4
   d45a0:	490c      	ldr	r1, [pc, #48]	; (d45d4 <_Z10resetAlarmi+0x60>)
   d45a2:	480d      	ldr	r0, [pc, #52]	; (d45d8 <_Z10resetAlarmi+0x64>)
   d45a4:	e88d 00a0 	stmia.w	sp, {r5, r7}
   d45a8:	f7ff fe2a 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d45ac:	4628      	mov	r0, r5
   d45ae:	f001 f9a7 	bl	d5900 <_ZN6StringD1Ev>
   d45b2:	2200      	movs	r2, #0
   d45b4:	4b09      	ldr	r3, [pc, #36]	; (d45dc <_Z10resetAlarmi+0x68>)
   d45b6:	4611      	mov	r1, r2
   d45b8:	4610      	mov	r0, r2
   d45ba:	551a      	strb	r2, [r3, r4]
   d45bc:	f003 ffb8 	bl	d8530 <_ZN8RGBClass5colorEiii>
   d45c0:	e004      	b.n	d45cc <_Z10resetAlarmi+0x58>
   d45c2:	4602      	mov	r2, r0
   d45c4:	4906      	ldr	r1, [pc, #24]	; (d45e0 <_Z10resetAlarmi+0x6c>)
   d45c6:	4804      	ldr	r0, [pc, #16]	; (d45d8 <_Z10resetAlarmi+0x64>)
   d45c8:	f7ff fe1a 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d45cc:	b007      	add	sp, #28
   d45ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45d0:	2003e318 	.word	0x2003e318
   d45d4:	000da4f2 	.word	0x000da4f2
   d45d8:	2003e3bc 	.word	0x2003e3bc
   d45dc:	2003e312 	.word	0x2003e312
   d45e0:	000da539 	.word	0x000da539

000d45e4 <_Z15resetAlarmCloud6String>:
   d45e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d45e6:	4606      	mov	r6, r0
   d45e8:	4910      	ldr	r1, [pc, #64]	; (d462c <_Z15resetAlarmCloud6String+0x48>)
   d45ea:	4d11      	ldr	r5, [pc, #68]	; (d4630 <_Z15resetAlarmCloud6String+0x4c>)
   d45ec:	4668      	mov	r0, sp
   d45ee:	f001 f9ce 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d45f2:	4669      	mov	r1, sp
   d45f4:	4630      	mov	r0, r6
   d45f6:	f001 fa2b 	bl	d5a50 <_ZNK6String16equalsIgnoreCaseERKS_>
   d45fa:	4604      	mov	r4, r0
   d45fc:	4668      	mov	r0, sp
   d45fe:	f001 f97f 	bl	d5900 <_ZN6StringD1Ev>
   d4602:	b944      	cbnz	r4, d4616 <_Z15resetAlarmCloud6String+0x32>
   d4604:	5d2b      	ldrb	r3, [r5, r4]
   d4606:	b113      	cbz	r3, d460e <_Z15resetAlarmCloud6String+0x2a>
   d4608:	4620      	mov	r0, r4
   d460a:	f7ff ffb3 	bl	d4574 <_Z10resetAlarmi>
   d460e:	3401      	adds	r4, #1
   d4610:	2c04      	cmp	r4, #4
   d4612:	d1f7      	bne.n	d4604 <_Z15resetAlarmCloud6String+0x20>
   d4614:	e006      	b.n	d4624 <_Z15resetAlarmCloud6String+0x40>
   d4616:	4630      	mov	r0, r6
   d4618:	f001 fa82 	bl	d5b20 <_ZNK6String5toIntEv>
   d461c:	5c2b      	ldrb	r3, [r5, r0]
   d461e:	b10b      	cbz	r3, d4624 <_Z15resetAlarmCloud6String+0x40>
   d4620:	f7ff ffa8 	bl	d4574 <_Z10resetAlarmi>
   d4624:	2001      	movs	r0, #1
   d4626:	b004      	add	sp, #16
   d4628:	bd70      	pop	{r4, r5, r6, pc}
   d462a:	bf00      	nop
   d462c:	000da5a2 	.word	0x000da5a2
   d4630:	2003e312 	.word	0x2003e312

000d4634 <_Z13monitorAlarmsh>:
   d4634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4638:	4d22      	ldr	r5, [pc, #136]	; (d46c4 <_Z13monitorAlarmsh+0x90>)
   d463a:	4e23      	ldr	r6, [pc, #140]	; (d46c8 <_Z13monitorAlarmsh+0x94>)
   d463c:	f8df 908c 	ldr.w	r9, [pc, #140]	; d46cc <_Z13monitorAlarmsh+0x98>
   d4640:	f8df a08c 	ldr.w	sl, [pc, #140]	; d46d0 <_Z13monitorAlarmsh+0x9c>
   d4644:	4680      	mov	r8, r0
   d4646:	2400      	movs	r4, #0
   d4648:	f814 3009 	ldrb.w	r3, [r4, r9]
   d464c:	4f1f      	ldr	r7, [pc, #124]	; (d46cc <_Z13monitorAlarmsh+0x98>)
   d464e:	b1c3      	cbz	r3, d4682 <_Z13monitorAlarmsh+0x4e>
   d4650:	4620      	mov	r0, r4
   d4652:	f7ff fed1 	bl	d43f8 <_Z19alarmCondtitionsMeti>
   d4656:	b990      	cbnz	r0, d467e <_Z13monitorAlarmsh+0x4a>
   d4658:	882b      	ldrh	r3, [r5, #0]
   d465a:	b923      	cbnz	r3, d4666 <_Z13monitorAlarmsh+0x32>
   d465c:	f003 fef0 	bl	d8440 <_ZN9TimeClass5localEv>
   d4660:	17c1      	asrs	r1, r0, #31
   d4662:	e9c6 0100 	strd	r0, r1, [r6]
   d4666:	882b      	ldrh	r3, [r5, #0]
   d4668:	f8ba 2000 	ldrh.w	r2, [sl]
   d466c:	4443      	add	r3, r8
   d466e:	b29b      	uxth	r3, r3
   d4670:	429a      	cmp	r2, r3
   d4672:	802b      	strh	r3, [r5, #0]
   d4674:	d805      	bhi.n	d4682 <_Z13monitorAlarmsh+0x4e>
   d4676:	4620      	mov	r0, r4
   d4678:	f7ff ff7c 	bl	d4574 <_Z10resetAlarmi>
   d467c:	e001      	b.n	d4682 <_Z13monitorAlarmsh+0x4e>
   d467e:	2300      	movs	r3, #0
   d4680:	802b      	strh	r3, [r5, #0]
   d4682:	3401      	adds	r4, #1
   d4684:	2c04      	cmp	r4, #4
   d4686:	f105 0502 	add.w	r5, r5, #2
   d468a:	f106 0608 	add.w	r6, r6, #8
   d468e:	d1db      	bne.n	d4648 <_Z13monitorAlarmsh+0x14>
   d4690:	78bb      	ldrb	r3, [r7, #2]
   d4692:	b91b      	cbnz	r3, d469c <_Z13monitorAlarmsh+0x68>
   d4694:	2002      	movs	r0, #2
   d4696:	f7ff feaf 	bl	d43f8 <_Z19alarmCondtitionsMeti>
   d469a:	b938      	cbnz	r0, d46ac <_Z13monitorAlarmsh+0x78>
   d469c:	787b      	ldrb	r3, [r7, #1]
   d469e:	b973      	cbnz	r3, d46be <_Z13monitorAlarmsh+0x8a>
   d46a0:	2001      	movs	r0, #1
   d46a2:	f7ff fea9 	bl	d43f8 <_Z19alarmCondtitionsMeti>
   d46a6:	b928      	cbnz	r0, d46b4 <_Z13monitorAlarmsh+0x80>
   d46a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d46ac:	2002      	movs	r0, #2
   d46ae:	f7ff feef 	bl	d4490 <_Z10startAlarmi>
   d46b2:	e7f3      	b.n	d469c <_Z13monitorAlarmsh+0x68>
   d46b4:	2001      	movs	r0, #1
   d46b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d46ba:	f7ff bee9 	b.w	d4490 <_Z10startAlarmi>
   d46be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d46c2:	bf00      	nop
   d46c4:	2003e2a8 	.word	0x2003e2a8
   d46c8:	2003e340 	.word	0x2003e340
   d46cc:	2003e312 	.word	0x2003e312
   d46d0:	2003d782 	.word	0x2003d782

000d46d4 <loop>:
   d46d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d46d8:	4896      	ldr	r0, [pc, #600]	; (d4934 <loop+0x260>)
   d46da:	b08e      	sub	sp, #56	; 0x38
   d46dc:	f001 ff2a 	bl	d6534 <_ZNK8particle13BlePeerDevice9connectedEv>
   d46e0:	4605      	mov	r5, r0
   d46e2:	2800      	cmp	r0, #0
   d46e4:	d03c      	beq.n	d4760 <loop+0x8c>
   d46e6:	4c94      	ldr	r4, [pc, #592]	; (d4938 <loop+0x264>)

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d46e8:	f000 fdd6 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
   d46ec:	6822      	ldr	r2, [r4, #0]
   d46ee:	4b93      	ldr	r3, [pc, #588]	; (d493c <loop+0x268>)
   d46f0:	f012 0f03 	tst.w	r2, #3
   d46f4:	6018      	str	r0, [r3, #0]
   d46f6:	461d      	mov	r5, r3
   d46f8:	d105      	bne.n	d4706 <loop+0x32>
   d46fa:	2002      	movs	r0, #2
   d46fc:	f7ff ff9a 	bl	d4634 <_Z13monitorAlarmsh>
   d4700:	2002      	movs	r0, #2
   d4702:	f7ff fe1d 	bl	d4340 <_Z28updateSoundThresholdCountersh>
   d4706:	f7ff fe45 	bl	d4394 <_Z15updateStatusLedv>
   d470a:	6822      	ldr	r2, [r4, #0]
   d470c:	f012 0307 	ands.w	r3, r2, #7
   d4710:	d10c      	bne.n	d472c <loop+0x58>
   d4712:	a90e      	add	r1, sp, #56	; 0x38
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4714:	488a      	ldr	r0, [pc, #552]	; (d4940 <loop+0x26c>)
   d4716:	f821 2d14 	strh.w	r2, [r1, #-20]!
   d471a:	2202      	movs	r2, #2
   d471c:	f001 fdfa 	bl	d6314 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
   d4720:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d4724:	4987      	ldr	r1, [pc, #540]	; (d4944 <loop+0x270>)
   d4726:	4888      	ldr	r0, [pc, #544]	; (d4948 <loop+0x274>)
   d4728:	f7ff fd6a 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d472c:	682d      	ldr	r5, [r5, #0]
   d472e:	f000 fdb3 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
   d4732:	35fa      	adds	r5, #250	; 0xfa
   d4734:	1a28      	subs	r0, r5, r0
   d4736:	f003 fed9 	bl	d84ec <delay>
   d473a:	6823      	ldr	r3, [r4, #0]
   d473c:	4883      	ldr	r0, [pc, #524]	; (d494c <loop+0x278>)
   d473e:	3301      	adds	r3, #1
   d4740:	2201      	movs	r2, #1
   d4742:	2100      	movs	r1, #0
   d4744:	6023      	str	r3, [r4, #0]
   d4746:	f000 fd35 	bl	d51b4 <_ZN13LiquidCrystal9setCursorEhh>
   d474a:	f000 fda5 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d474e:	220a      	movs	r2, #10
   d4750:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4754:	fbb0 f1f1 	udiv	r1, r0, r1
   d4758:	487c      	ldr	r0, [pc, #496]	; (d494c <loop+0x278>)
   d475a:	f002 fe5c 	bl	d7416 <_ZN5Print11printNumberEmh>
   d475e:	e185      	b.n	d4a6c <loop+0x398>
   d4760:	497b      	ldr	r1, [pc, #492]	; (d4950 <loop+0x27c>)
   d4762:	4879      	ldr	r0, [pc, #484]	; (d4948 <loop+0x274>)
   d4764:	4e7b      	ldr	r6, [pc, #492]	; (d4954 <loop+0x280>)
   d4766:	f7ff fd4b 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d476a:	f001 ff43 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d476e:	221e      	movs	r2, #30
   d4770:	4978      	ldr	r1, [pc, #480]	; (d4954 <loop+0x280>)
   d4772:	f001 ff95 	bl	d66a0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d4776:	4607      	mov	r7, r0
   d4778:	42bd      	cmp	r5, r7
   d477a:	f280 80c8 	bge.w	d490e <loop+0x23a>
   d477e:	2454      	movs	r4, #84	; 0x54
   d4780:	436c      	muls	r4, r5
   d4782:	a804      	add	r0, sp, #16
   d4784:	f001 fb06 	bl	d5d94 <_ZN8particle7BleUuidC1Ev>
   d4788:	f104 0008 	add.w	r0, r4, #8
   d478c:	2201      	movs	r2, #1
   d478e:	a904      	add	r1, sp, #16
   d4790:	4430      	add	r0, r6
   d4792:	f001 fd65 	bl	d6260 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
   d4796:	4970      	ldr	r1, [pc, #448]	; (d4958 <loop+0x284>)
   d4798:	4680      	mov	r8, r0
   d479a:	486b      	ldr	r0, [pc, #428]	; (d4948 <loop+0x274>)
   d479c:	f7ff fd30 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d47a0:	4434      	add	r4, r6

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d47a2:	496e      	ldr	r1, [pc, #440]	; (d495c <loop+0x288>)
   d47a4:	a809      	add	r0, sp, #36	; 0x24
   d47a6:	f001 f8f2 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d47aa:	2200      	movs	r2, #0
   d47ac:	4621      	mov	r1, r4
   d47ae:	4668      	mov	r0, sp
   d47b0:	f001 fadf 	bl	d5d72 <_ZNK8particle10BleAddress8toStringEb>
   d47b4:	4669      	mov	r1, sp
   d47b6:	a809      	add	r0, sp, #36	; 0x24
   d47b8:	f001 f93e 	bl	d5a38 <_ZplRK15StringSumHelperRK6String>
   d47bc:	6801      	ldr	r1, [r0, #0]
   d47be:	4862      	ldr	r0, [pc, #392]	; (d4948 <loop+0x274>)
   d47c0:	f7ff fd1e 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d47c4:	4668      	mov	r0, sp
   d47c6:	f001 f89b 	bl	d5900 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47ca:	a809      	add	r0, sp, #36	; 0x24
   d47cc:	f001 f898 	bl	d5900 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d47d0:	4963      	ldr	r1, [pc, #396]	; (d4960 <loop+0x28c>)
   d47d2:	a809      	add	r0, sp, #36	; 0x24
   d47d4:	f001 f8db 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d47d8:	2200      	movs	r2, #0
   d47da:	a904      	add	r1, sp, #16
   d47dc:	4668      	mov	r0, sp
   d47de:	f001 fc69 	bl	d60b4 <_ZNK8particle7BleUuid8toStringEb>
   d47e2:	4669      	mov	r1, sp
   d47e4:	a809      	add	r0, sp, #36	; 0x24
   d47e6:	f001 f927 	bl	d5a38 <_ZplRK15StringSumHelperRK6String>
   d47ea:	6801      	ldr	r1, [r0, #0]
   d47ec:	4856      	ldr	r0, [pc, #344]	; (d4948 <loop+0x274>)
   d47ee:	f7ff fd07 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d47f2:	4668      	mov	r0, sp
   d47f4:	f001 f884 	bl	d5900 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d47f8:	a809      	add	r0, sp, #36	; 0x24
   d47fa:	f001 f881 	bl	d5900 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d47fe:	4959      	ldr	r1, [pc, #356]	; (d4964 <loop+0x290>)
   d4800:	a809      	add	r0, sp, #36	; 0x24
   d4802:	f001 f8c4 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d4806:	2200      	movs	r2, #0
   d4808:	4957      	ldr	r1, [pc, #348]	; (d4968 <loop+0x294>)
   d480a:	4668      	mov	r0, sp
   d480c:	f001 fc52 	bl	d60b4 <_ZNK8particle7BleUuid8toStringEb>
   d4810:	4669      	mov	r1, sp
   d4812:	a809      	add	r0, sp, #36	; 0x24
   d4814:	f001 f910 	bl	d5a38 <_ZplRK15StringSumHelperRK6String>
   d4818:	6801      	ldr	r1, [r0, #0]
   d481a:	484b      	ldr	r0, [pc, #300]	; (d4948 <loop+0x274>)
   d481c:	f7ff fcf0 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4820:	4668      	mov	r0, sp
   d4822:	f001 f86d 	bl	d5900 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4826:	a809      	add	r0, sp, #36	; 0x24
   d4828:	f001 f86a 	bl	d5900 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d482c:	494f      	ldr	r1, [pc, #316]	; (d496c <loop+0x298>)
   d482e:	a809      	add	r0, sp, #36	; 0x24
   d4830:	f001 f8ad 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d4834:	2200      	movs	r2, #0
   d4836:	494e      	ldr	r1, [pc, #312]	; (d4970 <loop+0x29c>)
   d4838:	4668      	mov	r0, sp
   d483a:	f001 fc3b 	bl	d60b4 <_ZNK8particle7BleUuid8toStringEb>
   d483e:	4669      	mov	r1, sp
   d4840:	a809      	add	r0, sp, #36	; 0x24
   d4842:	f001 f8f9 	bl	d5a38 <_ZplRK15StringSumHelperRK6String>
   d4846:	6801      	ldr	r1, [r0, #0]
   d4848:	483f      	ldr	r0, [pc, #252]	; (d4948 <loop+0x274>)
   d484a:	f7ff fcd9 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d484e:	4668      	mov	r0, sp
   d4850:	f001 f856 	bl	d5900 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4854:	a809      	add	r0, sp, #36	; 0x24
   d4856:	f001 f853 	bl	d5900 <_ZN6StringD1Ev>
   d485a:	f1b8 0f00 	cmp.w	r8, #0
   d485e:	d054      	beq.n	d490a <loop+0x236>
   d4860:	4941      	ldr	r1, [pc, #260]	; (d4968 <loop+0x294>)
   d4862:	a804      	add	r0, sp, #16
   d4864:	f001 fb36 	bl	d5ed4 <_ZNK8particle7BleUuideqERKS0_>
   d4868:	2800      	cmp	r0, #0
   d486a:	f000 80a1 	beq.w	d49b0 <loop+0x2dc>
   d486e:	4836      	ldr	r0, [pc, #216]	; (d4948 <loop+0x274>)
   d4870:	4940      	ldr	r1, [pc, #256]	; (d4974 <loop+0x2a0>)
   d4872:	f7ff fcc5 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4876:	482f      	ldr	r0, [pc, #188]	; (d4934 <loop+0x260>)
   d4878:	f001 fe5c 	bl	d6534 <_ZNK8particle13BlePeerDevice9connectedEv>
   d487c:	2800      	cmp	r0, #0
   d487e:	d151      	bne.n	d4924 <loop+0x250>
   d4880:	f001 feb8 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4884:	2301      	movs	r3, #1
   d4886:	4622      	mov	r2, r4
   d4888:	4601      	mov	r1, r0
   d488a:	a809      	add	r0, sp, #36	; 0x24
   d488c:	f002 fbc6 	bl	d701c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4890:	a909      	add	r1, sp, #36	; 0x24
   d4892:	4828      	ldr	r0, [pc, #160]	; (d4934 <loop+0x260>)
   d4894:	f002 f83d 	bl	d6912 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4898:	a809      	add	r0, sp, #36	; 0x24
   d489a:	f001 ff5d 	bl	d6758 <_ZN8particle13BlePeerDeviceD1Ev>
   d489e:	4825      	ldr	r0, [pc, #148]	; (d4934 <loop+0x260>)
   d48a0:	f001 fe48 	bl	d6534 <_ZNK8particle13BlePeerDevice9connectedEv>
   d48a4:	2800      	cmp	r0, #0
   d48a6:	d03b      	beq.n	d4920 <loop+0x24c>
   d48a8:	4933      	ldr	r1, [pc, #204]	; (d4978 <loop+0x2a4>)
   d48aa:	4827      	ldr	r0, [pc, #156]	; (d4948 <loop+0x274>)
   d48ac:	f7ff fca8 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d48b0:	4932      	ldr	r1, [pc, #200]	; (d497c <loop+0x2a8>)
   d48b2:	a809      	add	r0, sp, #36	; 0x24
   d48b4:	f001 fb84 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d48b8:	aa09      	add	r2, sp, #36	; 0x24
   d48ba:	4931      	ldr	r1, [pc, #196]	; (d4980 <loop+0x2ac>)
   d48bc:	481d      	ldr	r0, [pc, #116]	; (d4934 <loop+0x260>)
   d48be:	f002 f804 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d48c2:	4930      	ldr	r1, [pc, #192]	; (d4984 <loop+0x2b0>)
   d48c4:	a809      	add	r0, sp, #36	; 0x24
   d48c6:	f001 fb7b 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d48ca:	aa09      	add	r2, sp, #36	; 0x24
   d48cc:	492e      	ldr	r1, [pc, #184]	; (d4988 <loop+0x2b4>)
   d48ce:	4819      	ldr	r0, [pc, #100]	; (d4934 <loop+0x260>)
   d48d0:	f001 fffb 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d48d4:	492d      	ldr	r1, [pc, #180]	; (d498c <loop+0x2b8>)
   d48d6:	a809      	add	r0, sp, #36	; 0x24
   d48d8:	f001 fb72 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d48dc:	aa09      	add	r2, sp, #36	; 0x24
   d48de:	492c      	ldr	r1, [pc, #176]	; (d4990 <loop+0x2bc>)
   d48e0:	4814      	ldr	r0, [pc, #80]	; (d4934 <loop+0x260>)
   d48e2:	f001 fff2 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d48e6:	492b      	ldr	r1, [pc, #172]	; (d4994 <loop+0x2c0>)
   d48e8:	a809      	add	r0, sp, #36	; 0x24
   d48ea:	f001 fb69 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d48ee:	aa09      	add	r2, sp, #36	; 0x24
   d48f0:	4929      	ldr	r1, [pc, #164]	; (d4998 <loop+0x2c4>)
   d48f2:	4810      	ldr	r0, [pc, #64]	; (d4934 <loop+0x260>)
   d48f4:	f001 ffe9 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d48f8:	4928      	ldr	r1, [pc, #160]	; (d499c <loop+0x2c8>)
   d48fa:	a809      	add	r0, sp, #36	; 0x24
   d48fc:	f001 fb60 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4900:	490f      	ldr	r1, [pc, #60]	; (d4940 <loop+0x26c>)
   d4902:	480c      	ldr	r0, [pc, #48]	; (d4934 <loop+0x260>)
   d4904:	aa09      	add	r2, sp, #36	; 0x24
   d4906:	f001 ffe0 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d490a:	3501      	adds	r5, #1
   d490c:	e734      	b.n	d4778 <loop+0xa4>
   d490e:	2f00      	cmp	r7, #0
   d4910:	f340 80ac 	ble.w	d4a6c <loop+0x398>
   d4914:	463a      	mov	r2, r7
   d4916:	4922      	ldr	r1, [pc, #136]	; (d49a0 <loop+0x2cc>)
   d4918:	480b      	ldr	r0, [pc, #44]	; (d4948 <loop+0x274>)
   d491a:	f7ff fc71 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d491e:	e0a5      	b.n	d4a6c <loop+0x398>
   d4920:	4920      	ldr	r1, [pc, #128]	; (d49a4 <loop+0x2d0>)
   d4922:	e002      	b.n	d492a <loop+0x256>
   d4924:	4920      	ldr	r1, [pc, #128]	; (d49a8 <loop+0x2d4>)
   d4926:	e000      	b.n	d492a <loop+0x256>
   d4928:	4920      	ldr	r1, [pc, #128]	; (d49ac <loop+0x2d8>)
   d492a:	4807      	ldr	r0, [pc, #28]	; (d4948 <loop+0x274>)
   d492c:	f7ff fc68 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d4930:	e7eb      	b.n	d490a <loop+0x236>
   d4932:	bf00      	nop
   d4934:	2003e2a0 	.word	0x2003e2a0
   d4938:	2003e2d8 	.word	0x2003e2d8
   d493c:	2003e290 	.word	0x2003e290
   d4940:	2003d854 	.word	0x2003d854
   d4944:	000da33e 	.word	0x000da33e
   d4948:	2003e3bc 	.word	0x2003e3bc
   d494c:	2003e2b0 	.word	0x2003e2b0
   d4950:	000da5a6 	.word	0x000da5a6
   d4954:	2003d86c 	.word	0x2003d86c
   d4958:	000da5b7 	.word	0x000da5b7
   d495c:	000da5d1 	.word	0x000da5d1
   d4960:	000da5db 	.word	0x000da5db
   d4964:	000da5e8 	.word	0x000da5e8
   d4968:	2003e27c 	.word	0x2003e27c
   d496c:	000da5fb 	.word	0x000da5fb
   d4970:	2003e244 	.word	0x2003e244
   d4974:	000da848 	.word	0x000da848
   d4978:	000da60e 	.word	0x000da60e
   d497c:	000da637 	.word	0x000da637
   d4980:	2003d85c 	.word	0x2003d85c
   d4984:	000da65c 	.word	0x000da65c
   d4988:	2003e2cc 	.word	0x2003e2cc
   d498c:	000da681 	.word	0x000da681
   d4990:	2003e258 	.word	0x2003e258
   d4994:	000da6a6 	.word	0x000da6a6
   d4998:	2003e2dc 	.word	0x2003e2dc
   d499c:	000da6cb 	.word	0x000da6cb
   d49a0:	000da837 	.word	0x000da837
   d49a4:	000da6f0 	.word	0x000da6f0
   d49a8:	000da714 	.word	0x000da714
   d49ac:	000da7f2 	.word	0x000da7f2
   d49b0:	4930      	ldr	r1, [pc, #192]	; (d4a74 <loop+0x3a0>)
   d49b2:	a804      	add	r0, sp, #16
   d49b4:	f001 fa8e 	bl	d5ed4 <_ZNK8particle7BleUuideqERKS0_>
   d49b8:	2800      	cmp	r0, #0
   d49ba:	d0a6      	beq.n	d490a <loop+0x236>
   d49bc:	482e      	ldr	r0, [pc, #184]	; (d4a78 <loop+0x3a4>)
   d49be:	492f      	ldr	r1, [pc, #188]	; (d4a7c <loop+0x3a8>)
   d49c0:	f7ff fc1e 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d49c4:	482e      	ldr	r0, [pc, #184]	; (d4a80 <loop+0x3ac>)
   d49c6:	f001 fdb5 	bl	d6534 <_ZNK8particle13BlePeerDevice9connectedEv>
   d49ca:	2800      	cmp	r0, #0
   d49cc:	d14c      	bne.n	d4a68 <loop+0x394>
   d49ce:	f001 fe11 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d49d2:	2301      	movs	r3, #1
   d49d4:	4622      	mov	r2, r4
   d49d6:	4601      	mov	r1, r0
   d49d8:	a809      	add	r0, sp, #36	; 0x24
   d49da:	f002 fb1f 	bl	d701c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d49de:	a909      	add	r1, sp, #36	; 0x24
   d49e0:	4827      	ldr	r0, [pc, #156]	; (d4a80 <loop+0x3ac>)
   d49e2:	f001 ff96 	bl	d6912 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d49e6:	a809      	add	r0, sp, #36	; 0x24
   d49e8:	f001 feb6 	bl	d6758 <_ZN8particle13BlePeerDeviceD1Ev>
   d49ec:	4824      	ldr	r0, [pc, #144]	; (d4a80 <loop+0x3ac>)
   d49ee:	f001 fda1 	bl	d6534 <_ZNK8particle13BlePeerDevice9connectedEv>
   d49f2:	2800      	cmp	r0, #0
   d49f4:	d098      	beq.n	d4928 <loop+0x254>
   d49f6:	4923      	ldr	r1, [pc, #140]	; (d4a84 <loop+0x3b0>)
   d49f8:	481f      	ldr	r0, [pc, #124]	; (d4a78 <loop+0x3a4>)
   d49fa:	f7ff fc01 	bl	d4200 <_ZNK5spark6Logger4infoEPKcz>
   d49fe:	4922      	ldr	r1, [pc, #136]	; (d4a88 <loop+0x3b4>)
   d4a00:	a809      	add	r0, sp, #36	; 0x24
   d4a02:	f001 fadd 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4a06:	aa09      	add	r2, sp, #36	; 0x24
   d4a08:	4920      	ldr	r1, [pc, #128]	; (d4a8c <loop+0x3b8>)
   d4a0a:	481d      	ldr	r0, [pc, #116]	; (d4a80 <loop+0x3ac>)
   d4a0c:	f001 ff5d 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d4a10:	491f      	ldr	r1, [pc, #124]	; (d4a90 <loop+0x3bc>)
   d4a12:	a809      	add	r0, sp, #36	; 0x24
   d4a14:	f001 fad4 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4a18:	aa09      	add	r2, sp, #36	; 0x24
   d4a1a:	491e      	ldr	r1, [pc, #120]	; (d4a94 <loop+0x3c0>)
   d4a1c:	4818      	ldr	r0, [pc, #96]	; (d4a80 <loop+0x3ac>)
   d4a1e:	f001 ff54 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d4a22:	491d      	ldr	r1, [pc, #116]	; (d4a98 <loop+0x3c4>)
   d4a24:	a809      	add	r0, sp, #36	; 0x24
   d4a26:	f001 facb 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4a2a:	aa09      	add	r2, sp, #36	; 0x24
   d4a2c:	491b      	ldr	r1, [pc, #108]	; (d4a9c <loop+0x3c8>)
   d4a2e:	4814      	ldr	r0, [pc, #80]	; (d4a80 <loop+0x3ac>)
   d4a30:	f001 ff4b 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d4a34:	491a      	ldr	r1, [pc, #104]	; (d4aa0 <loop+0x3cc>)
   d4a36:	a809      	add	r0, sp, #36	; 0x24
   d4a38:	f001 fac2 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4a3c:	aa09      	add	r2, sp, #36	; 0x24
   d4a3e:	4919      	ldr	r1, [pc, #100]	; (d4aa4 <loop+0x3d0>)
   d4a40:	480f      	ldr	r0, [pc, #60]	; (d4a80 <loop+0x3ac>)
   d4a42:	f001 ff42 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d4a46:	4918      	ldr	r1, [pc, #96]	; (d4aa8 <loop+0x3d4>)
   d4a48:	a809      	add	r0, sp, #36	; 0x24
   d4a4a:	f001 fab9 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4a4e:	aa09      	add	r2, sp, #36	; 0x24
   d4a50:	4916      	ldr	r1, [pc, #88]	; (d4aac <loop+0x3d8>)
   d4a52:	480b      	ldr	r0, [pc, #44]	; (d4a80 <loop+0x3ac>)
   d4a54:	f001 ff39 	bl	d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
   d4a58:	4915      	ldr	r1, [pc, #84]	; (d4ab0 <loop+0x3dc>)
   d4a5a:	a809      	add	r0, sp, #36	; 0x24
   d4a5c:	f001 fab0 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4a60:	aa09      	add	r2, sp, #36	; 0x24
   d4a62:	4914      	ldr	r1, [pc, #80]	; (d4ab4 <loop+0x3e0>)
   d4a64:	4806      	ldr	r0, [pc, #24]	; (d4a80 <loop+0x3ac>)
   d4a66:	e74e      	b.n	d4906 <loop+0x232>
   d4a68:	4913      	ldr	r1, [pc, #76]	; (d4ab8 <loop+0x3e4>)
   d4a6a:	e75e      	b.n	d492a <loop+0x256>
   d4a6c:	b00e      	add	sp, #56	; 0x38
   d4a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4a72:	bf00      	nop
   d4a74:	2003e244 	.word	0x2003e244
   d4a78:	2003e3bc 	.word	0x2003e3bc
   d4a7c:	000da85d 	.word	0x000da85d
   d4a80:	2003e338 	.word	0x2003e338
   d4a84:	000da735 	.word	0x000da735
   d4a88:	000da637 	.word	0x000da637
   d4a8c:	2003d864 	.word	0x2003d864
   d4a90:	000da75e 	.word	0x000da75e
   d4a94:	2003d84c 	.word	0x2003d84c
   d4a98:	000da783 	.word	0x000da783
   d4a9c:	2003e360 	.word	0x2003e360
   d4aa0:	000da7a8 	.word	0x000da7a8
   d4aa4:	2003e294 	.word	0x2003e294
   d4aa8:	000da6a6 	.word	0x000da6a6
   d4aac:	2003e2e4 	.word	0x2003e2e4
   d4ab0:	000da7cd 	.word	0x000da7cd
   d4ab4:	2003e260 	.word	0x2003e260
   d4ab8:	000da816 	.word	0x000da816

000d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4abc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4abe:	6804      	ldr	r4, [r0, #0]
   d4ac0:	6843      	ldr	r3, [r0, #4]
   d4ac2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4ac4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4ac6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4aca:	42a6      	cmp	r6, r4
   d4acc:	d004      	beq.n	d4ad8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4ace:	4620      	mov	r0, r4
   d4ad0:	f000 ff16 	bl	d5900 <_ZN6StringD1Ev>
   d4ad4:	3414      	adds	r4, #20
   d4ad6:	e7f8      	b.n	d4aca <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4ad8:	6828      	ldr	r0, [r5, #0]
   d4ada:	f000 fe6b 	bl	d57b4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4ade:	4628      	mov	r0, r5
   d4ae0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4ae4 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4ae4:	4602      	mov	r2, r0
   d4ae6:	4801      	ldr	r0, [pc, #4]	; (d4aec <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d4ae8:	f003 bde2 	b.w	d86b0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4aec:	000d8685 	.word	0x000d8685

000d4af0 <setup>:
   d4af0:	b513      	push	{r0, r1, r4, lr}
   d4af2:	4932      	ldr	r1, [pc, #200]	; (d4bbc <setup+0xcc>)
   d4af4:	4832      	ldr	r0, [pc, #200]	; (d4bc0 <setup+0xd0>)
   d4af6:	4c33      	ldr	r4, [pc, #204]	; (d4bc4 <setup+0xd4>)
   d4af8:	f7ff fff4 	bl	d4ae4 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
   d4afc:	4932      	ldr	r1, [pc, #200]	; (d4bc8 <setup+0xd8>)
   d4afe:	4833      	ldr	r0, [pc, #204]	; (d4bcc <setup+0xdc>)
   d4b00:	f7ff fff0 	bl	d4ae4 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
   d4b04:	4932      	ldr	r1, [pc, #200]	; (d4bd0 <setup+0xe0>)
   d4b06:	4833      	ldr	r0, [pc, #204]	; (d4bd4 <setup+0xe4>)
   d4b08:	f7ff ffec 	bl	d4ae4 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
   d4b0c:	4932      	ldr	r1, [pc, #200]	; (d4bd8 <setup+0xe8>)
   d4b0e:	4833      	ldr	r0, [pc, #204]	; (d4bdc <setup+0xec>)
   d4b10:	f7ff ffe8 	bl	d4ae4 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
   d4b14:	4932      	ldr	r1, [pc, #200]	; (d4be0 <setup+0xf0>)
   d4b16:	4833      	ldr	r0, [pc, #204]	; (d4be4 <setup+0xf4>)
   d4b18:	f7ff ffe4 	bl	d4ae4 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
   d4b1c:	4932      	ldr	r1, [pc, #200]	; (d4be8 <setup+0xf8>)
   d4b1e:	4833      	ldr	r0, [pc, #204]	; (d4bec <setup+0xfc>)
   d4b20:	f7ff ffe0 	bl	d4ae4 <_ZN10CloudClass8functionIA27_cIPFi6StringEEEEbRKT_DpT0_>
   d4b24:	2001      	movs	r0, #1
   d4b26:	f003 fcf3 	bl	d8510 <_ZN8RGBClass7controlEb>
   d4b2a:	eeb2 0a06 	vmov.f32	s0, #38	; 0x41300000  11.0
   d4b2e:	f003 fc95 	bl	d845c <_ZN9TimeClass4zoneEf>
   d4b32:	a802      	add	r0, sp, #8
   d4b34:	2201      	movs	r2, #1
   d4b36:	f800 2d01 	strb.w	r2, [r0, #-1]!
   d4b3a:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d4b3e:	f000 fd15 	bl	d556c <dct_write_app_data>
   d4b42:	f001 fd57 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4b46:	f001 fd9b 	bl	d6680 <_ZNK8particle14BleLocalDevice2onEv>
   d4b4a:	2200      	movs	r2, #0
   d4b4c:	4928      	ldr	r1, [pc, #160]	; (d4bf0 <setup+0x100>)
   d4b4e:	4829      	ldr	r0, [pc, #164]	; (d4bf4 <setup+0x104>)
   d4b50:	f001 fc82 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b54:	2200      	movs	r2, #0
   d4b56:	4928      	ldr	r1, [pc, #160]	; (d4bf8 <setup+0x108>)
   d4b58:	4828      	ldr	r0, [pc, #160]	; (d4bfc <setup+0x10c>)
   d4b5a:	f001 fc7d 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b5e:	2200      	movs	r2, #0
   d4b60:	4927      	ldr	r1, [pc, #156]	; (d4c00 <setup+0x110>)
   d4b62:	4828      	ldr	r0, [pc, #160]	; (d4c04 <setup+0x114>)
   d4b64:	f001 fc78 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b68:	2200      	movs	r2, #0
   d4b6a:	4927      	ldr	r1, [pc, #156]	; (d4c08 <setup+0x118>)
   d4b6c:	4827      	ldr	r0, [pc, #156]	; (d4c0c <setup+0x11c>)
   d4b6e:	f001 fc73 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b72:	2200      	movs	r2, #0
   d4b74:	4926      	ldr	r1, [pc, #152]	; (d4c10 <setup+0x120>)
   d4b76:	4827      	ldr	r0, [pc, #156]	; (d4c14 <setup+0x124>)
   d4b78:	f001 fc6e 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b7c:	2200      	movs	r2, #0
   d4b7e:	4926      	ldr	r1, [pc, #152]	; (d4c18 <setup+0x128>)
   d4b80:	4826      	ldr	r0, [pc, #152]	; (d4c1c <setup+0x12c>)
   d4b82:	f001 fc69 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b86:	2200      	movs	r2, #0
   d4b88:	4925      	ldr	r1, [pc, #148]	; (d4c20 <setup+0x130>)
   d4b8a:	4826      	ldr	r0, [pc, #152]	; (d4c24 <setup+0x134>)
   d4b8c:	f001 fc64 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b90:	2200      	movs	r2, #0
   d4b92:	4925      	ldr	r1, [pc, #148]	; (d4c28 <setup+0x138>)
   d4b94:	4825      	ldr	r0, [pc, #148]	; (d4c2c <setup+0x13c>)
   d4b96:	f001 fc5f 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4b9a:	2200      	movs	r2, #0
   d4b9c:	4924      	ldr	r1, [pc, #144]	; (d4c30 <setup+0x140>)
   d4b9e:	4825      	ldr	r0, [pc, #148]	; (d4c34 <setup+0x144>)
   d4ba0:	f001 fc5a 	bl	d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d4ba4:	2300      	movs	r3, #0
   d4ba6:	2202      	movs	r2, #2
   d4ba8:	4620      	mov	r0, r4
   d4baa:	2110      	movs	r1, #16
   d4bac:	f000 fa76 	bl	d509c <_ZN13LiquidCrystal5beginEhhh>
   d4bb0:	4921      	ldr	r1, [pc, #132]	; (d4c38 <setup+0x148>)
   d4bb2:	4620      	mov	r0, r4
   d4bb4:	f002 fc1c 	bl	d73f0 <_ZN5Print5printEPKc>
   d4bb8:	b002      	add	sp, #8
   d4bba:	bd10      	pop	{r4, pc}
   d4bbc:	000d45e5 	.word	0x000d45e5
   d4bc0:	000da872 	.word	0x000da872
   d4bc4:	2003e2b0 	.word	0x2003e2b0
   d4bc8:	000d40d5 	.word	0x000d40d5
   d4bcc:	000da87d 	.word	0x000da87d
   d4bd0:	000d40e9 	.word	0x000d40e9
   d4bd4:	000da892 	.word	0x000da892
   d4bd8:	000d40fd 	.word	0x000d40fd
   d4bdc:	000da8a7 	.word	0x000da8a7
   d4be0:	000d4111 	.word	0x000d4111
   d4be4:	000da8be 	.word	0x000da8be
   d4be8:	000d415d 	.word	0x000d415d
   d4bec:	000da8d2 	.word	0x000da8d2
   d4bf0:	000d4231 	.word	0x000d4231
   d4bf4:	2003d85c 	.word	0x2003d85c
   d4bf8:	000d4249 	.word	0x000d4249
   d4bfc:	2003e2cc 	.word	0x2003e2cc
   d4c00:	000d44e5 	.word	0x000d44e5
   d4c04:	2003e258 	.word	0x2003e258
   d4c08:	000d4261 	.word	0x000d4261
   d4c0c:	2003e2dc 	.word	0x2003e2dc
   d4c10:	000d42a9 	.word	0x000d42a9
   d4c14:	2003d864 	.word	0x2003d864
   d4c18:	000d42c1 	.word	0x000d42c1
   d4c1c:	2003d84c 	.word	0x2003d84c
   d4c20:	000d4529 	.word	0x000d4529
   d4c24:	2003e360 	.word	0x2003e360
   d4c28:	000d42ed 	.word	0x000d42ed
   d4c2c:	2003e294 	.word	0x2003e294
   d4c30:	000d4285 	.word	0x000d4285
   d4c34:	2003e2e4 	.word	0x2003e2e4
   d4c38:	000da8ed 	.word	0x000da8ed

000d4c3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4c3c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c40:	4606      	mov	r6, r0
   d4c42:	460c      	mov	r4, r1
   d4c44:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4c46:	d916      	bls.n	d4c76 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4c48:	4290      	cmp	r0, r2
   d4c4a:	d215      	bcs.n	d4c78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4c4c:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4c50:	1a6c      	subs	r4, r5, r1
   d4c52:	f1a1 0714 	sub.w	r7, r1, #20
   d4c56:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4c58:	42af      	cmp	r7, r5
   d4c5a:	d01c      	beq.n	d4c96 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4c5c:	b12c      	cbz	r4, d4c6a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4c5e:	4629      	mov	r1, r5
   d4c60:	4620      	mov	r0, r4
   d4c62:	f000 fe3d 	bl	d58e0 <_ZN6StringC1EOS_>
   d4c66:	7c2b      	ldrb	r3, [r5, #16]
   d4c68:	7423      	strb	r3, [r4, #16]
   d4c6a:	4628      	mov	r0, r5
   d4c6c:	f000 fe48 	bl	d5900 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4c70:	3d14      	subs	r5, #20
   d4c72:	3c14      	subs	r4, #20
   d4c74:	e7f0      	b.n	d4c58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4c76:	d00e      	beq.n	d4c96 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4c78:	42ac      	cmp	r4, r5
   d4c7a:	d00c      	beq.n	d4c96 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4c7c:	b12e      	cbz	r6, d4c8a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4c7e:	4621      	mov	r1, r4
   d4c80:	4630      	mov	r0, r6
   d4c82:	f000 fe2d 	bl	d58e0 <_ZN6StringC1EOS_>
   d4c86:	7c23      	ldrb	r3, [r4, #16]
   d4c88:	7433      	strb	r3, [r6, #16]
   d4c8a:	4620      	mov	r0, r4
   d4c8c:	f000 fe38 	bl	d5900 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4c90:	3414      	adds	r4, #20
   d4c92:	3614      	adds	r6, #20
   d4c94:	e7f0      	b.n	d4c78 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4c9c:	2300      	movs	r3, #0
   d4c9e:	6003      	str	r3, [r0, #0]
   d4ca0:	6043      	str	r3, [r0, #4]
   d4ca2:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4ca4:	684e      	ldr	r6, [r1, #4]
   d4ca6:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4ca8:	4604      	mov	r4, r0
   d4caa:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4cac:	dd24      	ble.n	d4cf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4cae:	f04f 0814 	mov.w	r8, #20
   d4cb2:	fb08 f006 	mul.w	r0, r8, r6
   d4cb6:	f000 fd75 	bl	d57a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4cba:	4605      	mov	r5, r0
   d4cbc:	b1e0      	cbz	r0, d4cf8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4cbe:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4cc2:	fb08 1202 	mla	r2, r8, r2, r1
   d4cc6:	f7ff ffb9 	bl	d4c3c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4cca:	6820      	ldr	r0, [r4, #0]
   d4ccc:	f000 fd72 	bl	d57b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4cd0:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4cd2:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4cd4:	683e      	ldr	r6, [r7, #0]
   d4cd6:	687b      	ldr	r3, [r7, #4]
   d4cd8:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4cdc:	4546      	cmp	r6, r8
   d4cde:	d009      	beq.n	d4cf4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4ce0:	b12d      	cbz	r5, d4cee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4ce2:	4631      	mov	r1, r6
   d4ce4:	4628      	mov	r0, r5
   d4ce6:	f000 fe74 	bl	d59d2 <_ZN6StringC1ERKS_>
   d4cea:	7c33      	ldrb	r3, [r6, #16]
   d4cec:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4cee:	3614      	adds	r6, #20
   d4cf0:	3514      	adds	r5, #20
   d4cf2:	e7f3      	b.n	d4cdc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4cf4:	687b      	ldr	r3, [r7, #4]
   d4cf6:	6063      	str	r3, [r4, #4]
    }
}
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4cfe <_ZN13LiquidCrystalD0Ev>:
   d4cfe:	b510      	push	{r4, lr}
   d4d00:	211c      	movs	r1, #28
   d4d02:	4604      	mov	r4, r0
   d4d04:	f004 facc 	bl	d92a0 <_ZdlPvj>
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bd10      	pop	{r4, pc}

000d4d0c <_GLOBAL__sub_I_SystemMode>:
   d4d0c:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d0e:	4d72      	ldr	r5, [pc, #456]	; (d4ed8 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4d10:	b090      	sub	sp, #64	; 0x40

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4d12:	f000 fa81 	bl	d5218 <HAL_Pin_Map>
   d4d16:	2400      	movs	r4, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d18:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4d1c:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d1e:	602c      	str	r4, [r5, #0]
   d4d20:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d22:	71ac      	strb	r4, [r5, #6]
   d4d24:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4d26:	2001      	movs	r0, #1
   d4d28:	f000 fcb8 	bl	d569c <set_system_mode>
   d4d2c:	4a6b      	ldr	r2, [pc, #428]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4d2e:	496c      	ldr	r1, [pc, #432]	; (d4ee0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4d30:	4628      	mov	r0, r5
   d4d32:	f004 faa7 	bl	d9284 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4d36:	9404      	str	r4, [sp, #16]
   d4d38:	9405      	str	r4, [sp, #20]
   d4d3a:	9406      	str	r4, [sp, #24]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4d3c:	f003 fda8 	bl	d8890 <_Z16_fetch_usbserialv>
   d4d40:	a904      	add	r1, sp, #16
   d4d42:	4606      	mov	r6, r0
   d4d44:	a807      	add	r0, sp, #28
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4d46:	4d67      	ldr	r5, [pc, #412]	; (d4ee4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4d48:	f7ff ffa6 	bl	d4c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4d4c:	a907      	add	r1, sp, #28
   d4d4e:	a80a      	add	r0, sp, #40	; 0x28
   d4d50:	f7ff ffa2 	bl	d4c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4d54:	4b64      	ldr	r3, [pc, #400]	; (d4ee8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4d56:	602b      	str	r3, [r5, #0]
   d4d58:	a90a      	add	r1, sp, #40	; 0x28
   d4d5a:	a80d      	add	r0, sp, #52	; 0x34
   d4d5c:	f7ff ff9c 	bl	d4c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4d60:	aa0d      	add	r2, sp, #52	; 0x34
   d4d62:	2101      	movs	r1, #1
   d4d64:	1d28      	adds	r0, r5, #4
   d4d66:	f003 f842 	bl	d7dee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4d6a:	a80d      	add	r0, sp, #52	; 0x34
   d4d6c:	f7ff fea6 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4d70:	a80a      	add	r0, sp, #40	; 0x28
   d4d72:	f7ff fea3 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4d76:	4b5d      	ldr	r3, [pc, #372]	; (d4eec <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4d78:	602b      	str	r3, [r5, #0]
   d4d7a:	622e      	str	r6, [r5, #32]
   d4d7c:	a807      	add	r0, sp, #28
   d4d7e:	f7ff fe9d 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4d82:	4b5b      	ldr	r3, [pc, #364]	; (d4ef0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4d84:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4d86:	f003 fd83 	bl	d8890 <_Z16_fetch_usbserialv>
   d4d8a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4d8e:	f003 fd6f 	bl	d8870 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4d92:	f002 fcd5 	bl	d7740 <_ZN5spark10LogManager8instanceEv>
   d4d96:	4629      	mov	r1, r5
   d4d98:	f002 ffbc 	bl	d7d14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   d4d9c:	a804      	add	r0, sp, #16
   d4d9e:	f7ff fe8d 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4da2:	4a4e      	ldr	r2, [pc, #312]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4da4:	4953      	ldr	r1, [pc, #332]	; (d4ef4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4da6:	4628      	mov	r0, r5
   d4da8:	f004 fa6c 	bl	d9284 <__aeabi_atexit>
   d4dac:	4852      	ldr	r0, [pc, #328]	; (d4ef8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4dae:	4d53      	ldr	r5, [pc, #332]	; (d4efc <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4db0:	f001 fd2c 	bl	d680c <_ZN8particle13BlePeerDeviceC1Ev>
   d4db4:	4a49      	ldr	r2, [pc, #292]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4db6:	4952      	ldr	r1, [pc, #328]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4db8:	484f      	ldr	r0, [pc, #316]	; (d4ef8 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4dba:	f004 fa63 	bl	d9284 <__aeabi_atexit>
   d4dbe:	4851      	ldr	r0, [pc, #324]	; (d4f04 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4dc0:	f001 fd24 	bl	d680c <_ZN8particle13BlePeerDeviceC1Ev>
   d4dc4:	4a45      	ldr	r2, [pc, #276]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4dc6:	494e      	ldr	r1, [pc, #312]	; (d4f00 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4dc8:	484e      	ldr	r0, [pc, #312]	; (d4f04 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4dca:	f004 fa5b 	bl	d9284 <__aeabi_atexit>
   d4dce:	494e      	ldr	r1, [pc, #312]	; (d4f08 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4dd0:	484e      	ldr	r0, [pc, #312]	; (d4f0c <_GLOBAL__sub_I_SystemMode+0x200>)
   d4dd2:	f001 f8f5 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4dd6:	494e      	ldr	r1, [pc, #312]	; (d4f10 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4dd8:	484e      	ldr	r0, [pc, #312]	; (d4f14 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4dda:	f001 f8f1 	bl	d5fc0 <_ZN8particle7BleUuidC1EPKc>
   d4dde:	484e      	ldr	r0, [pc, #312]	; (d4f18 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4de0:	f002 f980 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4de4:	4a3d      	ldr	r2, [pc, #244]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4de6:	494d      	ldr	r1, [pc, #308]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4de8:	484b      	ldr	r0, [pc, #300]	; (d4f18 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4dea:	f004 fa4b 	bl	d9284 <__aeabi_atexit>
   d4dee:	484c      	ldr	r0, [pc, #304]	; (d4f20 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4df0:	f002 f978 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4df4:	4a39      	ldr	r2, [pc, #228]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4df6:	4949      	ldr	r1, [pc, #292]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4df8:	4849      	ldr	r0, [pc, #292]	; (d4f20 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4dfa:	f004 fa43 	bl	d9284 <__aeabi_atexit>
   d4dfe:	4849      	ldr	r0, [pc, #292]	; (d4f24 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4e00:	f002 f970 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e04:	4a35      	ldr	r2, [pc, #212]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e06:	4945      	ldr	r1, [pc, #276]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e08:	4846      	ldr	r0, [pc, #280]	; (d4f24 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4e0a:	f004 fa3b 	bl	d9284 <__aeabi_atexit>
   d4e0e:	4846      	ldr	r0, [pc, #280]	; (d4f28 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4e10:	f002 f968 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e14:	4a31      	ldr	r2, [pc, #196]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e16:	4941      	ldr	r1, [pc, #260]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e18:	4843      	ldr	r0, [pc, #268]	; (d4f28 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4e1a:	f004 fa33 	bl	d9284 <__aeabi_atexit>
   d4e1e:	4843      	ldr	r0, [pc, #268]	; (d4f2c <_GLOBAL__sub_I_SystemMode+0x220>)
   d4e20:	f002 f960 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e24:	4a2d      	ldr	r2, [pc, #180]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e26:	493d      	ldr	r1, [pc, #244]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e28:	4840      	ldr	r0, [pc, #256]	; (d4f2c <_GLOBAL__sub_I_SystemMode+0x220>)
   d4e2a:	f004 fa2b 	bl	d9284 <__aeabi_atexit>
   d4e2e:	4840      	ldr	r0, [pc, #256]	; (d4f30 <_GLOBAL__sub_I_SystemMode+0x224>)
   d4e30:	f002 f958 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e34:	4a29      	ldr	r2, [pc, #164]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e36:	4939      	ldr	r1, [pc, #228]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e38:	483d      	ldr	r0, [pc, #244]	; (d4f30 <_GLOBAL__sub_I_SystemMode+0x224>)
   d4e3a:	f004 fa23 	bl	d9284 <__aeabi_atexit>
   d4e3e:	483d      	ldr	r0, [pc, #244]	; (d4f34 <_GLOBAL__sub_I_SystemMode+0x228>)
   d4e40:	f002 f950 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e44:	4a25      	ldr	r2, [pc, #148]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e46:	4935      	ldr	r1, [pc, #212]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e48:	483a      	ldr	r0, [pc, #232]	; (d4f34 <_GLOBAL__sub_I_SystemMode+0x228>)
   d4e4a:	f004 fa1b 	bl	d9284 <__aeabi_atexit>
   d4e4e:	483a      	ldr	r0, [pc, #232]	; (d4f38 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d4e50:	f002 f948 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e54:	4a21      	ldr	r2, [pc, #132]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e56:	4931      	ldr	r1, [pc, #196]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e58:	4837      	ldr	r0, [pc, #220]	; (d4f38 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d4e5a:	f004 fa13 	bl	d9284 <__aeabi_atexit>
   d4e5e:	4837      	ldr	r0, [pc, #220]	; (d4f3c <_GLOBAL__sub_I_SystemMode+0x230>)
   d4e60:	f002 f940 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e64:	4a1d      	ldr	r2, [pc, #116]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e66:	492d      	ldr	r1, [pc, #180]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e68:	4834      	ldr	r0, [pc, #208]	; (d4f3c <_GLOBAL__sub_I_SystemMode+0x230>)
   d4e6a:	f004 fa0b 	bl	d9284 <__aeabi_atexit>
   d4e6e:	4834      	ldr	r0, [pc, #208]	; (d4f40 <_GLOBAL__sub_I_SystemMode+0x234>)
   d4e70:	f002 f938 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e74:	4a19      	ldr	r2, [pc, #100]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e76:	4929      	ldr	r1, [pc, #164]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e78:	4831      	ldr	r0, [pc, #196]	; (d4f40 <_GLOBAL__sub_I_SystemMode+0x234>)
   d4e7a:	f004 fa03 	bl	d9284 <__aeabi_atexit>
   d4e7e:	4831      	ldr	r0, [pc, #196]	; (d4f44 <_GLOBAL__sub_I_SystemMode+0x238>)
   d4e80:	f002 f930 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
   d4e84:	4a15      	ldr	r2, [pc, #84]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4e86:	4925      	ldr	r1, [pc, #148]	; (d4f1c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4e88:	482e      	ldr	r0, [pc, #184]	; (d4f44 <_GLOBAL__sub_I_SystemMode+0x238>)
   d4e8a:	f004 f9fb 	bl	d9284 <__aeabi_atexit>
   d4e8e:	2103      	movs	r1, #3
   d4e90:	2204      	movs	r2, #4
   d4e92:	2305      	movs	r3, #5
   d4e94:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   d4e98:	482b      	ldr	r0, [pc, #172]	; (d4f48 <_GLOBAL__sub_I_SystemMode+0x23c>)
   d4e9a:	2302      	movs	r3, #2
   d4e9c:	2201      	movs	r2, #1
   d4e9e:	4621      	mov	r1, r4
   d4ea0:	f000 f856 	bl	d4f50 <_ZN13LiquidCrystalC1Ehhhhhh>
   d4ea4:	4a0d      	ldr	r2, [pc, #52]	; (d4edc <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d4ea6:	4929      	ldr	r1, [pc, #164]	; (d4f4c <_GLOBAL__sub_I_SystemMode+0x240>)
   d4ea8:	4827      	ldr	r0, [pc, #156]	; (d4f48 <_GLOBAL__sub_I_SystemMode+0x23c>)
   d4eaa:	f004 f9eb 	bl	d9284 <__aeabi_atexit>
   d4eae:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d4eb2:	1928      	adds	r0, r5, r4
   d4eb4:	f000 feee 	bl	d5c94 <_ZN8particle10BleAddressC1Ev>
   d4eb8:	f104 0008 	add.w	r0, r4, #8
   d4ebc:	4428      	add	r0, r5
   d4ebe:	f001 f978 	bl	d61b2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4ec2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4ec6:	4428      	add	r0, r5
   d4ec8:	3454      	adds	r4, #84	; 0x54
   d4eca:	f001 f972 	bl	d61b2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4ece:	42b4      	cmp	r4, r6
   d4ed0:	d1ef      	bne.n	d4eb2 <_GLOBAL__sub_I_SystemMode+0x1a6>
   d4ed2:	b010      	add	sp, #64	; 0x40
   d4ed4:	bd70      	pop	{r4, r5, r6, pc}
   d4ed6:	bf00      	nop
   d4ed8:	2003e268 	.word	0x2003e268
   d4edc:	2003d848 	.word	0x2003d848
   d4ee0:	000d41a9 	.word	0x000d41a9
   d4ee4:	2003e2ec 	.word	0x2003e2ec
   d4ee8:	000da238 	.word	0x000da238
   d4eec:	000dacac 	.word	0x000dacac
   d4ef0:	000da250 	.word	0x000da250
   d4ef4:	000d41b9 	.word	0x000d41b9
   d4ef8:	2003e2a0 	.word	0x2003e2a0
   d4efc:	2003d86c 	.word	0x2003d86c
   d4f00:	000d6759 	.word	0x000d6759
   d4f04:	2003e338 	.word	0x2003e338
   d4f08:	000da8f2 	.word	0x000da8f2
   d4f0c:	2003e27c 	.word	0x2003e27c
   d4f10:	000da917 	.word	0x000da917
   d4f14:	2003e244 	.word	0x2003e244
   d4f18:	2003d85c 	.word	0x2003d85c
   d4f1c:	000d674b 	.word	0x000d674b
   d4f20:	2003e2cc 	.word	0x2003e2cc
   d4f24:	2003e258 	.word	0x2003e258
   d4f28:	2003e2dc 	.word	0x2003e2dc
   d4f2c:	2003d854 	.word	0x2003d854
   d4f30:	2003d864 	.word	0x2003d864
   d4f34:	2003d84c 	.word	0x2003d84c
   d4f38:	2003e360 	.word	0x2003e360
   d4f3c:	2003e294 	.word	0x2003e294
   d4f40:	2003e2e4 	.word	0x2003e2e4
   d4f44:	2003e260 	.word	0x2003e260
   d4f48:	2003e2b0 	.word	0x2003e2b0
   d4f4c:	000d40d3 	.word	0x000d40d3

000d4f50 <_ZN13LiquidCrystalC1Ehhhhhh>:
                             uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
   d4f50:	b570      	push	{r4, r5, r6, lr}
{
  _rs_pin = rs;
  _rw_pin = rw;
  _enable_pin = enable;
  
  _data_pins[0] = d0;
   d4f52:	72c3      	strb	r3, [r0, #11]
  _data_pins[1] = d1;
   d4f54:	f89d 3010 	ldrb.w	r3, [sp, #16]
   d4f58:	7303      	strb	r3, [r0, #12]
  _data_pins[2] = d2;
   d4f5a:	f89d 3014 	ldrb.w	r3, [sp, #20]
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
                             uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
   d4f5e:	4e09      	ldr	r6, [pc, #36]	; (d4f84 <_ZN13LiquidCrystalC1Ehhhhhh+0x34>)

void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
                         uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
                         uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
  _rs_pin = rs;
   d4f60:	7201      	strb	r1, [r0, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d4f62:	2500      	movs	r5, #0
  _rw_pin = rw;
   d4f64:	21ff      	movs	r1, #255	; 0xff
  _enable_pin = enable;
  
  _data_pins[0] = d0;
  _data_pins[1] = d1;
  _data_pins[2] = d2;
   d4f66:	7343      	strb	r3, [r0, #13]
  _data_pins[3] = d3; 
   d4f68:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4f6c:	6045      	str	r5, [r0, #4]
{
  init(1, rs, rw, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
                             uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
   d4f6e:	6006      	str	r6, [r0, #0]
void LiquidCrystal::init(uint8_t fourbitmode, uint8_t rs, uint8_t rw, uint8_t enable,
                         uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3,
                         uint8_t d4, uint8_t d5, uint8_t d6, uint8_t d7)
{
  _rs_pin = rs;
  _rw_pin = rw;
   d4f70:	7241      	strb	r1, [r0, #9]
  _enable_pin = enable;
   d4f72:	7282      	strb	r2, [r0, #10]
  
  _data_pins[0] = d0;
  _data_pins[1] = d1;
  _data_pins[2] = d2;
  _data_pins[3] = d3; 
   d4f74:	7383      	strb	r3, [r0, #14]
  _data_pins[4] = d4;
   d4f76:	73c5      	strb	r5, [r0, #15]
  _data_pins[5] = d5;
   d4f78:	7405      	strb	r5, [r0, #16]
  _data_pins[6] = d6;
   d4f7a:	7445      	strb	r5, [r0, #17]
  _data_pins[7] = d7; 
   d4f7c:	7485      	strb	r5, [r0, #18]
  
  // Always 4-bit mode, don't waste pins!
  //
  //if (fourbitmode)
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
   d4f7e:	74c5      	strb	r5, [r0, #19]

LiquidCrystal::LiquidCrystal(uint8_t rs,  uint8_t enable,
                             uint8_t d0, uint8_t d1, uint8_t d2, uint8_t d3)
{
  init(1, rs, 255, enable, d0, d1, d2, d3, 0, 0, 0, 0);
}
   d4f80:	bd70      	pop	{r4, r5, r6, pc}
   d4f82:	bf00      	nop
   d4f84:	000da944 	.word	0x000da944

000d4f88 <_ZN13LiquidCrystal11pulseEnableEv>:
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
   d4f88:	b510      	push	{r4, lr}
  digitalWrite(_enable_pin, LOW);
   d4f8a:	2100      	movs	r1, #0
    write4bits(value>>4);
    write4bits(value);
  }
}

void LiquidCrystal::pulseEnable(void) {
   d4f8c:	4604      	mov	r4, r0
  digitalWrite(_enable_pin, LOW);
   d4f8e:	7a80      	ldrb	r0, [r0, #10]
   d4f90:	f004 f91f 	bl	d91d2 <digitalWrite>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d4f94:	2001      	movs	r0, #1
   d4f96:	f000 f977 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(1);    
  digitalWrite(_enable_pin, HIGH);
   d4f9a:	2101      	movs	r1, #1
   d4f9c:	7aa0      	ldrb	r0, [r4, #10]
   d4f9e:	f004 f918 	bl	d91d2 <digitalWrite>
   d4fa2:	2001      	movs	r0, #1
   d4fa4:	f000 f970 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(1);    // enable pulse must be >450ns
  digitalWrite(_enable_pin, LOW);
   d4fa8:	7aa0      	ldrb	r0, [r4, #10]
   d4faa:	2100      	movs	r1, #0
   d4fac:	f004 f911 	bl	d91d2 <digitalWrite>
   d4fb0:	2064      	movs	r0, #100	; 0x64
  delayMicroseconds(100);   // commands need > 37us to settle
}
   d4fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4fb6:	f000 b967 	b.w	d5288 <HAL_Delay_Microseconds>

000d4fba <_ZN13LiquidCrystal10write4bitsEh>:

void LiquidCrystal::write4bits(uint8_t value) {
   d4fba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4fbc:	4606      	mov	r6, r0
   d4fbe:	460f      	mov	r7, r1
   d4fc0:	f100 050a 	add.w	r5, r0, #10
  for (int i = 0; i < 4; i++) {
   d4fc4:	2400      	movs	r4, #0
    pinMode(_data_pins[i], OUTPUT);
   d4fc6:	2101      	movs	r1, #1
   d4fc8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   d4fcc:	f004 f8f0 	bl	d91b0 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
   d4fd0:	fa47 f104 	asr.w	r1, r7, r4
   d4fd4:	f001 0101 	and.w	r1, r1, #1
   d4fd8:	7828      	ldrb	r0, [r5, #0]
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
   d4fda:	3401      	adds	r4, #1
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
   d4fdc:	f004 f8f9 	bl	d91d2 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
  delayMicroseconds(100);   // commands need > 37us to settle
}

void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
   d4fe0:	2c04      	cmp	r4, #4
   d4fe2:	d1f0      	bne.n	d4fc6 <_ZN13LiquidCrystal10write4bitsEh+0xc>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  pulseEnable();
   d4fe4:	4630      	mov	r0, r6
}
   d4fe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
void LiquidCrystal::write4bits(uint8_t value) {
  for (int i = 0; i < 4; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  pulseEnable();
   d4fea:	f7ff bfcd 	b.w	d4f88 <_ZN13LiquidCrystal11pulseEnableEv>

000d4fee <_ZN13LiquidCrystal10write8bitsEh>:
}

void LiquidCrystal::write8bits(uint8_t value) {
   d4fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ff0:	4606      	mov	r6, r0
   d4ff2:	460f      	mov	r7, r1
   d4ff4:	f100 050a 	add.w	r5, r0, #10
  for (int i = 0; i < 8; i++) {
   d4ff8:	2400      	movs	r4, #0
    pinMode(_data_pins[i], OUTPUT);
   d4ffa:	2101      	movs	r1, #1
   d4ffc:	f815 0f01 	ldrb.w	r0, [r5, #1]!
   d5000:	f004 f8d6 	bl	d91b0 <pinMode>
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
   d5004:	fa47 f104 	asr.w	r1, r7, r4
   d5008:	f001 0101 	and.w	r1, r1, #1
   d500c:	7828      	ldrb	r0, [r5, #0]
  }
  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
   d500e:	3401      	adds	r4, #1
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
   d5010:	f004 f8df 	bl	d91d2 <digitalWrite>
  }
  pulseEnable();
}

void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
   d5014:	2c08      	cmp	r4, #8
   d5016:	d1f0      	bne.n	d4ffa <_ZN13LiquidCrystal10write8bitsEh+0xc>
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  pulseEnable();
   d5018:	4630      	mov	r0, r6
   d501a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
void LiquidCrystal::write8bits(uint8_t value) {
  for (int i = 0; i < 8; i++) {
    pinMode(_data_pins[i], OUTPUT);
    digitalWrite(_data_pins[i], (value >> i) & 0x01);
  }
  pulseEnable();
   d501e:	f7ff bfb3 	b.w	d4f88 <_ZN13LiquidCrystal11pulseEnableEv>

000d5022 <_ZN13LiquidCrystal4sendEhh>:
}

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void LiquidCrystal::send(uint8_t value, uint8_t mode) {
   d5022:	b538      	push	{r3, r4, r5, lr}
   d5024:	4604      	mov	r4, r0
   d5026:	460d      	mov	r5, r1
  digitalWrite(_rs_pin, mode);
   d5028:	7a00      	ldrb	r0, [r0, #8]
   d502a:	4611      	mov	r1, r2
   d502c:	f004 f8d1 	bl	d91d2 <digitalWrite>

  // if there is a RW pin indicated, set it low to Write
  if (_rw_pin != 255) { 
   d5030:	7a60      	ldrb	r0, [r4, #9]
   d5032:	28ff      	cmp	r0, #255	; 0xff
   d5034:	d002      	beq.n	d503c <_ZN13LiquidCrystal4sendEhh+0x1a>
    digitalWrite(_rw_pin, LOW);
   d5036:	2100      	movs	r1, #0
   d5038:	f004 f8cb 	bl	d91d2 <digitalWrite>
  }
  
  if (_displayfunction & LCD_8BITMODE) {
   d503c:	7ce3      	ldrb	r3, [r4, #19]
   d503e:	06db      	lsls	r3, r3, #27
   d5040:	d505      	bpl.n	d504e <_ZN13LiquidCrystal4sendEhh+0x2c>
    write8bits(value); 
   d5042:	4629      	mov	r1, r5
   d5044:	4620      	mov	r0, r4
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
   d5046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  if (_rw_pin != 255) { 
    digitalWrite(_rw_pin, LOW);
  }
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
   d504a:	f7ff bfd0 	b.w	d4fee <_ZN13LiquidCrystal10write8bitsEh>
  } else {
    write4bits(value>>4);
   d504e:	0929      	lsrs	r1, r5, #4
   d5050:	4620      	mov	r0, r4
   d5052:	f7ff ffb2 	bl	d4fba <_ZN13LiquidCrystal10write4bitsEh>
    write4bits(value);
   d5056:	4629      	mov	r1, r5
   d5058:	4620      	mov	r0, r4
  }
}
   d505a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  
  if (_displayfunction & LCD_8BITMODE) {
    write8bits(value); 
  } else {
    write4bits(value>>4);
    write4bits(value);
   d505e:	f7ff bfac 	b.w	d4fba <_ZN13LiquidCrystal10write4bitsEh>

000d5062 <_ZN13LiquidCrystal5writeEh>:

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
   d5062:	b508      	push	{r3, lr}
  send(value, HIGH);
   d5064:	2201      	movs	r2, #1
   d5066:	f7ff ffdc 	bl	d5022 <_ZN13LiquidCrystal4sendEhh>
  return 1;
}
   d506a:	2001      	movs	r0, #1
   d506c:	bd08      	pop	{r3, pc}

000d506e <_ZN13LiquidCrystal7commandEh>:
}

/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
   d506e:	2200      	movs	r2, #0
   d5070:	f7ff bfd7 	b.w	d5022 <_ZN13LiquidCrystal4sendEhh>

000d5074 <_ZN13LiquidCrystal5clearEv>:
  delayMicroseconds(5000);
}

/********** high level commands, for the user! */
void LiquidCrystal::clear()
{
   d5074:	b508      	push	{r3, lr}
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
   d5076:	2101      	movs	r1, #1
   d5078:	f7ff fff9 	bl	d506e <_ZN13LiquidCrystal7commandEh>
   d507c:	f241 3088 	movw	r0, #5000	; 0x1388
  delayMicroseconds(5000);  // this command takes a long time!
}
   d5080:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5084:	f000 b900 	b.w	d5288 <HAL_Delay_Microseconds>

000d5088 <_ZN13LiquidCrystal4homeEv>:

void LiquidCrystal::home()
{
   d5088:	b508      	push	{r3, lr}
  command(LCD_RETURNHOME);  // set cursor position to zero
   d508a:	2102      	movs	r1, #2
   d508c:	f7ff ffef 	bl	d506e <_ZN13LiquidCrystal7commandEh>
   d5090:	f241 3088 	movw	r0, #5000	; 0x1388
  delayMicroseconds(5000);  // this command takes a long time!
}
   d5094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d5098:	f000 b8f6 	b.w	d5288 <HAL_Delay_Microseconds>

000d509c <_ZN13LiquidCrystal5beginEhhh>:
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  //else 
    //_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   d509c:	b570      	push	{r4, r5, r6, lr}
  if (lines > 1) {
   d509e:	2a01      	cmp	r2, #1
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  //else 
    //_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   d50a0:	461e      	mov	r6, r3
  if (lines > 1) {
    _displayfunction |= LCD_2LINE;
   d50a2:	bf88      	it	hi
   d50a4:	7cc3      	ldrbhi	r3, [r0, #19]
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  //else 
    //_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   d50a6:	4604      	mov	r4, r0
  if (lines > 1) {
    _displayfunction |= LCD_2LINE;
   d50a8:	bf84      	itt	hi
   d50aa:	f043 0308 	orrhi.w	r3, r3, #8
   d50ae:	74c3      	strbhi	r3, [r0, #19]
  }
  _numlines = lines;
   d50b0:	75e2      	strb	r2, [r4, #23]
  _currline = 0;
   d50b2:	2300      	movs	r3, #0
   d50b4:	7603      	strb	r3, [r0, #24]
  
  pinMode(_rs_pin, OUTPUT);
   d50b6:	2101      	movs	r1, #1
   d50b8:	7a00      	ldrb	r0, [r0, #8]
    _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  //else 
    //_displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;
}

void LiquidCrystal::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
   d50ba:	4615      	mov	r5, r2
    _displayfunction |= LCD_2LINE;
  }
  _numlines = lines;
  _currline = 0;
  
  pinMode(_rs_pin, OUTPUT);
   d50bc:	f004 f878 	bl	d91b0 <pinMode>
  // we can save 1 pin by not using RW. Indicate by passing 255 instead of pin#
  if (_rw_pin != 255) { 
   d50c0:	7a60      	ldrb	r0, [r4, #9]
   d50c2:	28ff      	cmp	r0, #255	; 0xff
   d50c4:	d002      	beq.n	d50cc <_ZN13LiquidCrystal5beginEhhh+0x30>
    pinMode(_rw_pin, OUTPUT);
   d50c6:	2101      	movs	r1, #1
   d50c8:	f004 f872 	bl	d91b0 <pinMode>
  }
  pinMode(_enable_pin, OUTPUT);
   d50cc:	2101      	movs	r1, #1
   d50ce:	7aa0      	ldrb	r0, [r4, #10]
   d50d0:	f004 f86e 	bl	d91b0 <pinMode>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != 0) && (lines == 1)) {
   d50d4:	b12e      	cbz	r6, d50e2 <_ZN13LiquidCrystal5beginEhhh+0x46>
   d50d6:	2d01      	cmp	r5, #1
    _displayfunction |= LCD_5x10DOTS;
   d50d8:	bf02      	ittt	eq
   d50da:	7ce3      	ldrbeq	r3, [r4, #19]
   d50dc:	f043 0304 	orreq.w	r3, r3, #4
   d50e0:	74e3      	strbeq	r3, [r4, #19]
   d50e2:	f24c 3050 	movw	r0, #50000	; 0xc350
   d50e6:	f000 f8cf 	bl	d5288 <HAL_Delay_Microseconds>
  // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
  // according to datasheet, we need at least 40ms after power rises above 2.7V
  // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
  delayMicroseconds(50000); 
  // Now we pull both RS and R/W low to begin commands
  digitalWrite(_rs_pin, LOW);
   d50ea:	2100      	movs	r1, #0
   d50ec:	7a20      	ldrb	r0, [r4, #8]
   d50ee:	f004 f870 	bl	d91d2 <digitalWrite>
  digitalWrite(_enable_pin, LOW);
   d50f2:	7aa0      	ldrb	r0, [r4, #10]
   d50f4:	2100      	movs	r1, #0
   d50f6:	f004 f86c 	bl	d91d2 <digitalWrite>
  if (_rw_pin != 255) { 
   d50fa:	7a60      	ldrb	r0, [r4, #9]
   d50fc:	28ff      	cmp	r0, #255	; 0xff
   d50fe:	d002      	beq.n	d5106 <_ZN13LiquidCrystal5beginEhhh+0x6a>
    digitalWrite(_rw_pin, LOW);
   d5100:	2100      	movs	r1, #0
   d5102:	f004 f866 	bl	d91d2 <digitalWrite>
  }

  // 4-Bit initialization sequence from Technobly
  write4bits(0x03);         // Put back into 8-bit mode
   d5106:	2103      	movs	r1, #3
   d5108:	4620      	mov	r0, r4
   d510a:	f7ff ff56 	bl	d4fba <_ZN13LiquidCrystal10write4bitsEh>
   d510e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5112:	f000 f8b9 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);

  write4bits(0x08);         // Comment this out for V1 OLED
   d5116:	2108      	movs	r1, #8
   d5118:	4620      	mov	r0, r4
   d511a:	f7ff ff4e 	bl	d4fba <_ZN13LiquidCrystal10write4bitsEh>
   d511e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5122:	f000 f8b1 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);  // Comment this out for V1 OLED
  
  write4bits(0x02);         // Put into 4-bit mode
   d5126:	2102      	movs	r1, #2
   d5128:	4620      	mov	r0, r4
   d512a:	f7ff ff46 	bl	d4fba <_ZN13LiquidCrystal10write4bitsEh>
   d512e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5132:	f000 f8a9 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);
  write4bits(0x02);
   d5136:	2102      	movs	r1, #2
   d5138:	4620      	mov	r0, r4
   d513a:	f7ff ff3e 	bl	d4fba <_ZN13LiquidCrystal10write4bitsEh>
   d513e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5142:	f000 f8a1 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);
  write4bits(0x08);
   d5146:	2108      	movs	r1, #8
   d5148:	4620      	mov	r0, r4
   d514a:	f7ff ff36 	bl	d4fba <_ZN13LiquidCrystal10write4bitsEh>
   d514e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5152:	f000 f899 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);
  
  command(LCD_DISPLAYCONTROL);                  // Turn Off
   d5156:	2108      	movs	r1, #8
   d5158:	4620      	mov	r0, r4
   d515a:	f7ff ff88 	bl	d506e <_ZN13LiquidCrystal7commandEh>
   d515e:	f241 3088 	movw	r0, #5000	; 0x1388
   d5162:	f000 f891 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);
  command(LCD_FUNCTIONSET | _displayfunction);  // Set # lines, font size, etc.
   d5166:	7ce1      	ldrb	r1, [r4, #19]
   d5168:	4620      	mov	r0, r4
   d516a:	f041 0120 	orr.w	r1, r1, #32
   d516e:	f7ff ff7e 	bl	d506e <_ZN13LiquidCrystal7commandEh>
   d5172:	f241 3088 	movw	r0, #5000	; 0x1388
   d5176:	f000 f887 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);
  clear();                                      // Clear Display
   d517a:	4620      	mov	r0, r4
   d517c:	f7ff ff7a 	bl	d5074 <_ZN13LiquidCrystal5clearEv>
  command(LCD_ENTRYMODESET | LCD_ENTRYLEFT);    // Set Entry Mode
   d5180:	2106      	movs	r1, #6
   d5182:	4620      	mov	r0, r4
   d5184:	f7ff ff73 	bl	d506e <_ZN13LiquidCrystal7commandEh>
   d5188:	f241 3088 	movw	r0, #5000	; 0x1388
   d518c:	f000 f87c 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);
  home();                                       // Home Cursor
   d5190:	4620      	mov	r0, r4
   d5192:	f7ff ff79 	bl	d5088 <_ZN13LiquidCrystal4homeEv>
   d5196:	f241 3088 	movw	r0, #5000	; 0x1388
   d519a:	f000 f875 	bl	d5288 <HAL_Delay_Microseconds>
  delayMicroseconds(5000);
  command(LCD_DISPLAYCONTROL | LCD_DISPLAYON);  // Turn On - enable cursor & blink
   d519e:	4620      	mov	r0, r4
   d51a0:	210c      	movs	r1, #12
   d51a2:	f7ff ff64 	bl	d506e <_ZN13LiquidCrystal7commandEh>
   d51a6:	f241 3088 	movw	r0, #5000	; 0x1388
  delayMicroseconds(5000);
}
   d51aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d51ae:	f000 b86b 	b.w	d5288 <HAL_Delay_Microseconds>
	...

000d51b4 <_ZN13LiquidCrystal9setCursorEhh>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(5000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
{
   d51b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   d51b6:	4b0e      	ldr	r3, [pc, #56]	; (d51f0 <_ZN13LiquidCrystal9setCursorEhh+0x3c>)
  command(LCD_RETURNHOME);  // set cursor position to zero
  delayMicroseconds(5000);  // this command takes a long time!
}

void LiquidCrystal::setCursor(uint8_t col, uint8_t row)
{
   d51b8:	4614      	mov	r4, r2
   d51ba:	4605      	mov	r5, r0
   d51bc:	460e      	mov	r6, r1
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
   d51be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d51c0:	f10d 0e10 	add.w	lr, sp, #16
   d51c4:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
  if ( row > _numlines ) {
   d51c8:	7deb      	ldrb	r3, [r5, #23]
   d51ca:	42a3      	cmp	r3, r4
    row = _numlines-1;    // we count rows starting w/0
   d51cc:	bf3c      	itt	cc
   d51ce:	f103 34ff 	addcc.w	r4, r3, #4294967295
   d51d2:	b2e4      	uxtbcc	r4, r4
  }
  command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
   d51d4:	ab04      	add	r3, sp, #16
   d51d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   d51da:	4628      	mov	r0, r5
   d51dc:	f854 1c10 	ldr.w	r1, [r4, #-16]
   d51e0:	4431      	add	r1, r6
   d51e2:	f061 017f 	orn	r1, r1, #127	; 0x7f
   d51e6:	b2c9      	uxtb	r1, r1
   d51e8:	f7ff ff41 	bl	d506e <_ZN13LiquidCrystal7commandEh>
}
   d51ec:	b004      	add	sp, #16
   d51ee:	bd70      	pop	{r4, r5, r6, pc}
   d51f0:	000da954 	.word	0x000da954

000d51f4 <_GLOBAL__sub_I__ZN13LiquidCrystalC2Ehhhhhhhhhhh>:
   d51f4:	f000 b810 	b.w	d5218 <HAL_Pin_Map>

000d51f8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d51f8:	b508      	push	{r3, lr}
   d51fa:	4b02      	ldr	r3, [pc, #8]	; (d5204 <netdb_freeaddrinfo+0xc>)
   d51fc:	681b      	ldr	r3, [r3, #0]
   d51fe:	689b      	ldr	r3, [r3, #8]
   d5200:	9301      	str	r3, [sp, #4]
   d5202:	bd08      	pop	{r3, pc}
   d5204:	00030268 	.word	0x00030268

000d5208 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5208:	b508      	push	{r3, lr}
   d520a:	4b02      	ldr	r3, [pc, #8]	; (d5214 <netdb_getaddrinfo+0xc>)
   d520c:	681b      	ldr	r3, [r3, #0]
   d520e:	68db      	ldr	r3, [r3, #12]
   d5210:	9301      	str	r3, [sp, #4]
   d5212:	bd08      	pop	{r3, pc}
   d5214:	00030268 	.word	0x00030268

000d5218 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d5218:	b508      	push	{r3, lr}
   d521a:	4b02      	ldr	r3, [pc, #8]	; (d5224 <HAL_Pin_Map+0xc>)
   d521c:	681b      	ldr	r3, [r3, #0]
   d521e:	681b      	ldr	r3, [r3, #0]
   d5220:	9301      	str	r3, [sp, #4]
   d5222:	bd08      	pop	{r3, pc}
   d5224:	0003022c 	.word	0x0003022c

000d5228 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5228:	b508      	push	{r3, lr}
   d522a:	4b02      	ldr	r3, [pc, #8]	; (d5234 <HAL_Pin_Mode+0xc>)
   d522c:	681b      	ldr	r3, [r3, #0]
   d522e:	689b      	ldr	r3, [r3, #8]
   d5230:	9301      	str	r3, [sp, #4]
   d5232:	bd08      	pop	{r3, pc}
   d5234:	0003022c 	.word	0x0003022c

000d5238 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5238:	b508      	push	{r3, lr}
   d523a:	4b02      	ldr	r3, [pc, #8]	; (d5244 <HAL_Get_Pin_Mode+0xc>)
   d523c:	681b      	ldr	r3, [r3, #0]
   d523e:	68db      	ldr	r3, [r3, #12]
   d5240:	9301      	str	r3, [sp, #4]
   d5242:	bd08      	pop	{r3, pc}
   d5244:	0003022c 	.word	0x0003022c

000d5248 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5248:	b508      	push	{r3, lr}
   d524a:	4b02      	ldr	r3, [pc, #8]	; (d5254 <HAL_GPIO_Write+0xc>)
   d524c:	681b      	ldr	r3, [r3, #0]
   d524e:	691b      	ldr	r3, [r3, #16]
   d5250:	9301      	str	r3, [sp, #4]
   d5252:	bd08      	pop	{r3, pc}
   d5254:	0003022c 	.word	0x0003022c

000d5258 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d5258:	b508      	push	{r3, lr}
   d525a:	4b02      	ldr	r3, [pc, #8]	; (d5264 <HAL_SPI_Init+0xc>)
   d525c:	681b      	ldr	r3, [r3, #0]
   d525e:	69db      	ldr	r3, [r3, #28]
   d5260:	9301      	str	r3, [sp, #4]
   d5262:	bd08      	pop	{r3, pc}
   d5264:	00030230 	.word	0x00030230

000d5268 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d5268:	b508      	push	{r3, lr}
   d526a:	4b02      	ldr	r3, [pc, #8]	; (d5274 <HAL_SPI_Is_Enabled+0xc>)
   d526c:	681b      	ldr	r3, [r3, #0]
   d526e:	6a1b      	ldr	r3, [r3, #32]
   d5270:	9301      	str	r3, [sp, #4]
   d5272:	bd08      	pop	{r3, pc}
   d5274:	00030230 	.word	0x00030230

000d5278 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5278:	b508      	push	{r3, lr}
   d527a:	4b02      	ldr	r3, [pc, #8]	; (d5284 <HAL_RNG_GetRandomNumber+0xc>)
   d527c:	681b      	ldr	r3, [r3, #0]
   d527e:	685b      	ldr	r3, [r3, #4]
   d5280:	9301      	str	r3, [sp, #4]
   d5282:	bd08      	pop	{r3, pc}
   d5284:	00030218 	.word	0x00030218

000d5288 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d5288:	b508      	push	{r3, lr}
   d528a:	4b02      	ldr	r3, [pc, #8]	; (d5294 <HAL_Delay_Microseconds+0xc>)
   d528c:	681b      	ldr	r3, [r3, #0]
   d528e:	68db      	ldr	r3, [r3, #12]
   d5290:	9301      	str	r3, [sp, #4]
   d5292:	bd08      	pop	{r3, pc}
   d5294:	00030218 	.word	0x00030218

000d5298 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d5298:	b508      	push	{r3, lr}
   d529a:	4b02      	ldr	r3, [pc, #8]	; (d52a4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d529c:	681b      	ldr	r3, [r3, #0]
   d529e:	695b      	ldr	r3, [r3, #20]
   d52a0:	9301      	str	r3, [sp, #4]
   d52a2:	bd08      	pop	{r3, pc}
   d52a4:	00030218 	.word	0x00030218

000d52a8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d52a8:	b508      	push	{r3, lr}
   d52aa:	4b02      	ldr	r3, [pc, #8]	; (d52b4 <HAL_RTC_Get_UnixTime+0xc>)
   d52ac:	681b      	ldr	r3, [r3, #0]
   d52ae:	69db      	ldr	r3, [r3, #28]
   d52b0:	9301      	str	r3, [sp, #4]
   d52b2:	bd08      	pop	{r3, pc}
   d52b4:	00030218 	.word	0x00030218

000d52b8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d52b8:	b508      	push	{r3, lr}
   d52ba:	4b02      	ldr	r3, [pc, #8]	; (d52c4 <hal_ble_stack_init+0xc>)
   d52bc:	681b      	ldr	r3, [r3, #0]
   d52be:	689b      	ldr	r3, [r3, #8]
   d52c0:	9301      	str	r3, [sp, #4]
   d52c2:	bd08      	pop	{r3, pc}
   d52c4:	00030278 	.word	0x00030278

000d52c8 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d52c8:	b508      	push	{r3, lr}
   d52ca:	4b02      	ldr	r3, [pc, #8]	; (d52d4 <hal_ble_gap_start_scan+0xc>)
   d52cc:	681b      	ldr	r3, [r3, #0]
   d52ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d52d0:	9301      	str	r3, [sp, #4]
   d52d2:	bd08      	pop	{r3, pc}
   d52d4:	00030278 	.word	0x00030278

000d52d8 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d52d8:	b508      	push	{r3, lr}
   d52da:	4b03      	ldr	r3, [pc, #12]	; (d52e8 <hal_ble_gap_stop_scan+0x10>)
   d52dc:	681b      	ldr	r3, [r3, #0]
   d52de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d52e2:	9301      	str	r3, [sp, #4]
   d52e4:	bd08      	pop	{r3, pc}
   d52e6:	0000      	.short	0x0000
   d52e8:	00030278 	.word	0x00030278

000d52ec <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d52ec:	b508      	push	{r3, lr}
   d52ee:	4b03      	ldr	r3, [pc, #12]	; (d52fc <hal_ble_gap_disconnect+0x10>)
   d52f0:	681b      	ldr	r3, [r3, #0]
   d52f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d52f6:	9301      	str	r3, [sp, #4]
   d52f8:	bd08      	pop	{r3, pc}
   d52fa:	0000      	.short	0x0000
   d52fc:	00030278 	.word	0x00030278

000d5300 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b03      	ldr	r3, [pc, #12]	; (d5310 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d530a:	9301      	str	r3, [sp, #4]
   d530c:	bd08      	pop	{r3, pc}
   d530e:	0000      	.short	0x0000
   d5310:	00030278 	.word	0x00030278

000d5314 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d5314:	b508      	push	{r3, lr}
   d5316:	4b03      	ldr	r3, [pc, #12]	; (d5324 <hal_ble_gatt_client_discover_all_services+0x10>)
   d5318:	681b      	ldr	r3, [r3, #0]
   d531a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d531e:	9301      	str	r3, [sp, #4]
   d5320:	bd08      	pop	{r3, pc}
   d5322:	0000      	.short	0x0000
   d5324:	00030278 	.word	0x00030278

000d5328 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b03      	ldr	r3, [pc, #12]	; (d5338 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d5332:	9301      	str	r3, [sp, #4]
   d5334:	bd08      	pop	{r3, pc}
   d5336:	0000      	.short	0x0000
   d5338:	00030278 	.word	0x00030278

000d533c <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d533c:	b508      	push	{r3, lr}
   d533e:	4b03      	ldr	r3, [pc, #12]	; (d534c <hal_ble_gatt_client_write_with_response+0x10>)
   d5340:	681b      	ldr	r3, [r3, #0]
   d5342:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d5346:	9301      	str	r3, [sp, #4]
   d5348:	bd08      	pop	{r3, pc}
   d534a:	0000      	.short	0x0000
   d534c:	00030278 	.word	0x00030278

000d5350 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d5350:	b508      	push	{r3, lr}
   d5352:	4b03      	ldr	r3, [pc, #12]	; (d5360 <hal_ble_gatt_client_write_without_response+0x10>)
   d5354:	681b      	ldr	r3, [r3, #0]
   d5356:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d535a:	9301      	str	r3, [sp, #4]
   d535c:	bd08      	pop	{r3, pc}
   d535e:	0000      	.short	0x0000
   d5360:	00030278 	.word	0x00030278

000d5364 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d5364:	b508      	push	{r3, lr}
   d5366:	4b03      	ldr	r3, [pc, #12]	; (d5374 <hal_ble_gatt_client_read+0x10>)
   d5368:	681b      	ldr	r3, [r3, #0]
   d536a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d536e:	9301      	str	r3, [sp, #4]
   d5370:	bd08      	pop	{r3, pc}
   d5372:	0000      	.short	0x0000
   d5374:	00030278 	.word	0x00030278

000d5378 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b03      	ldr	r3, [pc, #12]	; (d5388 <hal_ble_gap_connect+0x10>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d5382:	9301      	str	r3, [sp, #4]
   d5384:	bd08      	pop	{r3, pc}
   d5386:	0000      	.short	0x0000
   d5388:	00030278 	.word	0x00030278

000d538c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d538c:	b508      	push	{r3, lr}
   d538e:	4b03      	ldr	r3, [pc, #12]	; (d539c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5390:	681b      	ldr	r3, [r3, #0]
   d5392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d5396:	9301      	str	r3, [sp, #4]
   d5398:	bd08      	pop	{r3, pc}
   d539a:	0000      	.short	0x0000
   d539c:	00030278 	.word	0x00030278

000d53a0 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d53a0:	b508      	push	{r3, lr}
   d53a2:	4b03      	ldr	r3, [pc, #12]	; (d53b0 <hal_ble_gatt_client_configure_cccd+0x10>)
   d53a4:	681b      	ldr	r3, [r3, #0]
   d53a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d53aa:	9301      	str	r3, [sp, #4]
   d53ac:	bd08      	pop	{r3, pc}
   d53ae:	0000      	.short	0x0000
   d53b0:	00030278 	.word	0x00030278

000d53b4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d53b4:	b508      	push	{r3, lr}
   d53b6:	4b03      	ldr	r3, [pc, #12]	; (d53c4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d53b8:	681b      	ldr	r3, [r3, #0]
   d53ba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d53be:	9301      	str	r3, [sp, #4]
   d53c0:	bd08      	pop	{r3, pc}
   d53c2:	0000      	.short	0x0000
   d53c4:	00030278 	.word	0x00030278

000d53c8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b03      	ldr	r3, [pc, #12]	; (d53d8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d53d2:	9301      	str	r3, [sp, #4]
   d53d4:	bd08      	pop	{r3, pc}
   d53d6:	0000      	.short	0x0000
   d53d8:	00030278 	.word	0x00030278

000d53dc <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d53dc:	b508      	push	{r3, lr}
   d53de:	4b02      	ldr	r3, [pc, #8]	; (d53e8 <os_thread_is_current+0xc>)
   d53e0:	681b      	ldr	r3, [r3, #0]
   d53e2:	689b      	ldr	r3, [r3, #8]
   d53e4:	9301      	str	r3, [sp, #4]
   d53e6:	bd08      	pop	{r3, pc}
   d53e8:	00030248 	.word	0x00030248

000d53ec <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d53ec:	b508      	push	{r3, lr}
   d53ee:	4b02      	ldr	r3, [pc, #8]	; (d53f8 <os_thread_join+0xc>)
   d53f0:	681b      	ldr	r3, [r3, #0]
   d53f2:	691b      	ldr	r3, [r3, #16]
   d53f4:	9301      	str	r3, [sp, #4]
   d53f6:	bd08      	pop	{r3, pc}
   d53f8:	00030248 	.word	0x00030248

000d53fc <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d53fc:	b508      	push	{r3, lr}
   d53fe:	4b02      	ldr	r3, [pc, #8]	; (d5408 <os_thread_cleanup+0xc>)
   d5400:	681b      	ldr	r3, [r3, #0]
   d5402:	695b      	ldr	r3, [r3, #20]
   d5404:	9301      	str	r3, [sp, #4]
   d5406:	bd08      	pop	{r3, pc}
   d5408:	00030248 	.word	0x00030248

000d540c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d540c:	b508      	push	{r3, lr}
   d540e:	4b02      	ldr	r3, [pc, #8]	; (d5418 <os_mutex_recursive_create+0xc>)
   d5410:	681b      	ldr	r3, [r3, #0]
   d5412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5414:	9301      	str	r3, [sp, #4]
   d5416:	bd08      	pop	{r3, pc}
   d5418:	00030248 	.word	0x00030248

000d541c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d541c:	b508      	push	{r3, lr}
   d541e:	4b02      	ldr	r3, [pc, #8]	; (d5428 <os_mutex_recursive_destroy+0xc>)
   d5420:	681b      	ldr	r3, [r3, #0]
   d5422:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5424:	9301      	str	r3, [sp, #4]
   d5426:	bd08      	pop	{r3, pc}
   d5428:	00030248 	.word	0x00030248

000d542c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d542c:	b508      	push	{r3, lr}
   d542e:	4b02      	ldr	r3, [pc, #8]	; (d5438 <os_mutex_recursive_lock+0xc>)
   d5430:	681b      	ldr	r3, [r3, #0]
   d5432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5434:	9301      	str	r3, [sp, #4]
   d5436:	bd08      	pop	{r3, pc}
   d5438:	00030248 	.word	0x00030248

000d543c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d543c:	b508      	push	{r3, lr}
   d543e:	4b02      	ldr	r3, [pc, #8]	; (d5448 <os_mutex_recursive_unlock+0xc>)
   d5440:	681b      	ldr	r3, [r3, #0]
   d5442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5444:	9301      	str	r3, [sp, #4]
   d5446:	bd08      	pop	{r3, pc}
   d5448:	00030248 	.word	0x00030248

000d544c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d544c:	b508      	push	{r3, lr}
   d544e:	4b02      	ldr	r3, [pc, #8]	; (d5458 <inet_inet_ntop+0xc>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	695b      	ldr	r3, [r3, #20]
   d5454:	9301      	str	r3, [sp, #4]
   d5456:	bd08      	pop	{r3, pc}
   d5458:	00030264 	.word	0x00030264

000d545c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d545c:	b508      	push	{r3, lr}
   d545e:	4b02      	ldr	r3, [pc, #8]	; (d5468 <HAL_USART_Init+0xc>)
   d5460:	681b      	ldr	r3, [r3, #0]
   d5462:	681b      	ldr	r3, [r3, #0]
   d5464:	9301      	str	r3, [sp, #4]
   d5466:	bd08      	pop	{r3, pc}
   d5468:	0003023c 	.word	0x0003023c

000d546c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d546c:	b508      	push	{r3, lr}
   d546e:	4b02      	ldr	r3, [pc, #8]	; (d5478 <HAL_USART_End+0xc>)
   d5470:	681b      	ldr	r3, [r3, #0]
   d5472:	689b      	ldr	r3, [r3, #8]
   d5474:	9301      	str	r3, [sp, #4]
   d5476:	bd08      	pop	{r3, pc}
   d5478:	0003023c 	.word	0x0003023c

000d547c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d547c:	b508      	push	{r3, lr}
   d547e:	4b02      	ldr	r3, [pc, #8]	; (d5488 <HAL_USART_Write_Data+0xc>)
   d5480:	681b      	ldr	r3, [r3, #0]
   d5482:	68db      	ldr	r3, [r3, #12]
   d5484:	9301      	str	r3, [sp, #4]
   d5486:	bd08      	pop	{r3, pc}
   d5488:	0003023c 	.word	0x0003023c

000d548c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d548c:	b508      	push	{r3, lr}
   d548e:	4b02      	ldr	r3, [pc, #8]	; (d5498 <HAL_USART_Available_Data+0xc>)
   d5490:	681b      	ldr	r3, [r3, #0]
   d5492:	691b      	ldr	r3, [r3, #16]
   d5494:	9301      	str	r3, [sp, #4]
   d5496:	bd08      	pop	{r3, pc}
   d5498:	0003023c 	.word	0x0003023c

000d549c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d549c:	b508      	push	{r3, lr}
   d549e:	4b02      	ldr	r3, [pc, #8]	; (d54a8 <HAL_USART_Read_Data+0xc>)
   d54a0:	681b      	ldr	r3, [r3, #0]
   d54a2:	695b      	ldr	r3, [r3, #20]
   d54a4:	9301      	str	r3, [sp, #4]
   d54a6:	bd08      	pop	{r3, pc}
   d54a8:	0003023c 	.word	0x0003023c

000d54ac <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d54ac:	b508      	push	{r3, lr}
   d54ae:	4b02      	ldr	r3, [pc, #8]	; (d54b8 <HAL_USART_Peek_Data+0xc>)
   d54b0:	681b      	ldr	r3, [r3, #0]
   d54b2:	699b      	ldr	r3, [r3, #24]
   d54b4:	9301      	str	r3, [sp, #4]
   d54b6:	bd08      	pop	{r3, pc}
   d54b8:	0003023c 	.word	0x0003023c

000d54bc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d54bc:	b508      	push	{r3, lr}
   d54be:	4b02      	ldr	r3, [pc, #8]	; (d54c8 <HAL_USART_Flush_Data+0xc>)
   d54c0:	681b      	ldr	r3, [r3, #0]
   d54c2:	69db      	ldr	r3, [r3, #28]
   d54c4:	9301      	str	r3, [sp, #4]
   d54c6:	bd08      	pop	{r3, pc}
   d54c8:	0003023c 	.word	0x0003023c

000d54cc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d54cc:	b508      	push	{r3, lr}
   d54ce:	4b02      	ldr	r3, [pc, #8]	; (d54d8 <HAL_USART_Is_Enabled+0xc>)
   d54d0:	681b      	ldr	r3, [r3, #0]
   d54d2:	6a1b      	ldr	r3, [r3, #32]
   d54d4:	9301      	str	r3, [sp, #4]
   d54d6:	bd08      	pop	{r3, pc}
   d54d8:	0003023c 	.word	0x0003023c

000d54dc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b02      	ldr	r3, [pc, #8]	; (d54e8 <HAL_USART_Available_Data_For_Write+0xc>)
   d54e0:	681b      	ldr	r3, [r3, #0]
   d54e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54e4:	9301      	str	r3, [sp, #4]
   d54e6:	bd08      	pop	{r3, pc}
   d54e8:	0003023c 	.word	0x0003023c

000d54ec <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d54ec:	b508      	push	{r3, lr}
   d54ee:	4b02      	ldr	r3, [pc, #8]	; (d54f8 <HAL_USART_BeginConfig+0xc>)
   d54f0:	681b      	ldr	r3, [r3, #0]
   d54f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d54f4:	9301      	str	r3, [sp, #4]
   d54f6:	bd08      	pop	{r3, pc}
   d54f8:	0003023c 	.word	0x0003023c

000d54fc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d54fc:	b508      	push	{r3, lr}
   d54fe:	4b02      	ldr	r3, [pc, #8]	; (d5508 <HAL_I2C_Write_Data+0xc>)
   d5500:	681b      	ldr	r3, [r3, #0]
   d5502:	6a1b      	ldr	r3, [r3, #32]
   d5504:	9301      	str	r3, [sp, #4]
   d5506:	bd08      	pop	{r3, pc}
   d5508:	00030228 	.word	0x00030228

000d550c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d550c:	b508      	push	{r3, lr}
   d550e:	4b02      	ldr	r3, [pc, #8]	; (d5518 <HAL_I2C_Available_Data+0xc>)
   d5510:	681b      	ldr	r3, [r3, #0]
   d5512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5514:	9301      	str	r3, [sp, #4]
   d5516:	bd08      	pop	{r3, pc}
   d5518:	00030228 	.word	0x00030228

000d551c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d551c:	b508      	push	{r3, lr}
   d551e:	4b02      	ldr	r3, [pc, #8]	; (d5528 <HAL_I2C_Read_Data+0xc>)
   d5520:	681b      	ldr	r3, [r3, #0]
   d5522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5524:	9301      	str	r3, [sp, #4]
   d5526:	bd08      	pop	{r3, pc}
   d5528:	00030228 	.word	0x00030228

000d552c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d552c:	b508      	push	{r3, lr}
   d552e:	4b02      	ldr	r3, [pc, #8]	; (d5538 <HAL_I2C_Peek_Data+0xc>)
   d5530:	681b      	ldr	r3, [r3, #0]
   d5532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5534:	9301      	str	r3, [sp, #4]
   d5536:	bd08      	pop	{r3, pc}
   d5538:	00030228 	.word	0x00030228

000d553c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d553c:	b508      	push	{r3, lr}
   d553e:	4b02      	ldr	r3, [pc, #8]	; (d5548 <HAL_I2C_Flush_Data+0xc>)
   d5540:	681b      	ldr	r3, [r3, #0]
   d5542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5544:	9301      	str	r3, [sp, #4]
   d5546:	bd08      	pop	{r3, pc}
   d5548:	00030228 	.word	0x00030228

000d554c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d554c:	b508      	push	{r3, lr}
   d554e:	4b02      	ldr	r3, [pc, #8]	; (d5558 <HAL_I2C_Is_Enabled+0xc>)
   d5550:	681b      	ldr	r3, [r3, #0]
   d5552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5554:	9301      	str	r3, [sp, #4]
   d5556:	bd08      	pop	{r3, pc}
   d5558:	00030228 	.word	0x00030228

000d555c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b02      	ldr	r3, [pc, #8]	; (d5568 <HAL_I2C_Init+0xc>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5564:	9301      	str	r3, [sp, #4]
   d5566:	bd08      	pop	{r3, pc}
   d5568:	00030228 	.word	0x00030228

000d556c <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d556c:	b508      	push	{r3, lr}
   d556e:	4b02      	ldr	r3, [pc, #8]	; (d5578 <dct_write_app_data+0xc>)
   d5570:	681b      	ldr	r3, [r3, #0]
   d5572:	685b      	ldr	r3, [r3, #4]
   d5574:	9301      	str	r3, [sp, #4]
   d5576:	bd08      	pop	{r3, pc}
   d5578:	00030258 	.word	0x00030258

000d557c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d557c:	b508      	push	{r3, lr}
   d557e:	4b02      	ldr	r3, [pc, #8]	; (d5588 <HAL_USB_USART_Init+0xc>)
   d5580:	681b      	ldr	r3, [r3, #0]
   d5582:	681b      	ldr	r3, [r3, #0]
   d5584:	9301      	str	r3, [sp, #4]
   d5586:	bd08      	pop	{r3, pc}
   d5588:	0003024c 	.word	0x0003024c

000d558c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d558c:	b508      	push	{r3, lr}
   d558e:	4b02      	ldr	r3, [pc, #8]	; (d5598 <HAL_USB_USART_Begin+0xc>)
   d5590:	681b      	ldr	r3, [r3, #0]
   d5592:	685b      	ldr	r3, [r3, #4]
   d5594:	9301      	str	r3, [sp, #4]
   d5596:	bd08      	pop	{r3, pc}
   d5598:	0003024c 	.word	0x0003024c

000d559c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d559c:	b508      	push	{r3, lr}
   d559e:	4b02      	ldr	r3, [pc, #8]	; (d55a8 <HAL_USB_USART_End+0xc>)
   d55a0:	681b      	ldr	r3, [r3, #0]
   d55a2:	689b      	ldr	r3, [r3, #8]
   d55a4:	9301      	str	r3, [sp, #4]
   d55a6:	bd08      	pop	{r3, pc}
   d55a8:	0003024c 	.word	0x0003024c

000d55ac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d55ac:	b508      	push	{r3, lr}
   d55ae:	4b02      	ldr	r3, [pc, #8]	; (d55b8 <HAL_USB_USART_Available_Data+0xc>)
   d55b0:	681b      	ldr	r3, [r3, #0]
   d55b2:	691b      	ldr	r3, [r3, #16]
   d55b4:	9301      	str	r3, [sp, #4]
   d55b6:	bd08      	pop	{r3, pc}
   d55b8:	0003024c 	.word	0x0003024c

000d55bc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d55bc:	b508      	push	{r3, lr}
   d55be:	4b02      	ldr	r3, [pc, #8]	; (d55c8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d55c0:	681b      	ldr	r3, [r3, #0]
   d55c2:	695b      	ldr	r3, [r3, #20]
   d55c4:	9301      	str	r3, [sp, #4]
   d55c6:	bd08      	pop	{r3, pc}
   d55c8:	0003024c 	.word	0x0003024c

000d55cc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55cc:	b508      	push	{r3, lr}
   d55ce:	4b02      	ldr	r3, [pc, #8]	; (d55d8 <HAL_USB_USART_Receive_Data+0xc>)
   d55d0:	681b      	ldr	r3, [r3, #0]
   d55d2:	699b      	ldr	r3, [r3, #24]
   d55d4:	9301      	str	r3, [sp, #4]
   d55d6:	bd08      	pop	{r3, pc}
   d55d8:	0003024c 	.word	0x0003024c

000d55dc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d55dc:	b508      	push	{r3, lr}
   d55de:	4b02      	ldr	r3, [pc, #8]	; (d55e8 <HAL_USB_USART_Send_Data+0xc>)
   d55e0:	681b      	ldr	r3, [r3, #0]
   d55e2:	69db      	ldr	r3, [r3, #28]
   d55e4:	9301      	str	r3, [sp, #4]
   d55e6:	bd08      	pop	{r3, pc}
   d55e8:	0003024c 	.word	0x0003024c

000d55ec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d55ec:	b508      	push	{r3, lr}
   d55ee:	4b02      	ldr	r3, [pc, #8]	; (d55f8 <HAL_USB_USART_Flush_Data+0xc>)
   d55f0:	681b      	ldr	r3, [r3, #0]
   d55f2:	6a1b      	ldr	r3, [r3, #32]
   d55f4:	9301      	str	r3, [sp, #4]
   d55f6:	bd08      	pop	{r3, pc}
   d55f8:	0003024c 	.word	0x0003024c

000d55fc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   d55fc:	b508      	push	{r3, lr}
   d55fe:	4b02      	ldr	r3, [pc, #8]	; (d5608 <LED_SetSignalingColor+0xc>)
   d5600:	681b      	ldr	r3, [r3, #0]
   d5602:	685b      	ldr	r3, [r3, #4]
   d5604:	9301      	str	r3, [sp, #4]
   d5606:	bd08      	pop	{r3, pc}
   d5608:	00030260 	.word	0x00030260

000d560c <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   d560c:	b508      	push	{r3, lr}
   d560e:	4b02      	ldr	r3, [pc, #8]	; (d5618 <LED_Signaling_Start+0xc>)
   d5610:	681b      	ldr	r3, [r3, #0]
   d5612:	689b      	ldr	r3, [r3, #8]
   d5614:	9301      	str	r3, [sp, #4]
   d5616:	bd08      	pop	{r3, pc}
   d5618:	00030260 	.word	0x00030260

000d561c <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   d561c:	b508      	push	{r3, lr}
   d561e:	4b02      	ldr	r3, [pc, #8]	; (d5628 <LED_Signaling_Stop+0xc>)
   d5620:	681b      	ldr	r3, [r3, #0]
   d5622:	68db      	ldr	r3, [r3, #12]
   d5624:	9301      	str	r3, [sp, #4]
   d5626:	bd08      	pop	{r3, pc}
   d5628:	00030260 	.word	0x00030260

000d562c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   d562c:	b508      	push	{r3, lr}
   d562e:	4b02      	ldr	r3, [pc, #8]	; (d5638 <LED_RGB_IsOverRidden+0xc>)
   d5630:	681b      	ldr	r3, [r3, #0]
   d5632:	699b      	ldr	r3, [r3, #24]
   d5634:	9301      	str	r3, [sp, #4]
   d5636:	bd08      	pop	{r3, pc}
   d5638:	00030260 	.word	0x00030260

000d563c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   d563c:	b508      	push	{r3, lr}
   d563e:	4b02      	ldr	r3, [pc, #8]	; (d5648 <LED_On+0xc>)
   d5640:	681b      	ldr	r3, [r3, #0]
   d5642:	69db      	ldr	r3, [r3, #28]
   d5644:	9301      	str	r3, [sp, #4]
   d5646:	bd08      	pop	{r3, pc}
   d5648:	00030260 	.word	0x00030260

000d564c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d564c:	b508      	push	{r3, lr}
   d564e:	4b02      	ldr	r3, [pc, #8]	; (d5658 <panic_+0xc>)
   d5650:	681b      	ldr	r3, [r3, #0]
   d5652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5654:	9301      	str	r3, [sp, #4]
   d5656:	bd08      	pop	{r3, pc}
   d5658:	00030260 	.word	0x00030260

000d565c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d565c:	b508      	push	{r3, lr}
   d565e:	4b02      	ldr	r3, [pc, #8]	; (d5668 <log_message+0xc>)
   d5660:	681b      	ldr	r3, [r3, #0]
   d5662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5664:	9301      	str	r3, [sp, #4]
   d5666:	bd08      	pop	{r3, pc}
   d5668:	00030260 	.word	0x00030260

000d566c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d566c:	b508      	push	{r3, lr}
   d566e:	4b02      	ldr	r3, [pc, #8]	; (d5678 <log_message_v+0xc>)
   d5670:	681b      	ldr	r3, [r3, #0]
   d5672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5674:	9301      	str	r3, [sp, #4]
   d5676:	bd08      	pop	{r3, pc}
   d5678:	00030260 	.word	0x00030260

000d567c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d567c:	b508      	push	{r3, lr}
   d567e:	4b02      	ldr	r3, [pc, #8]	; (d5688 <log_level_name+0xc>)
   d5680:	681b      	ldr	r3, [r3, #0]
   d5682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5684:	9301      	str	r3, [sp, #4]
   d5686:	bd08      	pop	{r3, pc}
   d5688:	00030260 	.word	0x00030260

000d568c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d568c:	b508      	push	{r3, lr}
   d568e:	4b02      	ldr	r3, [pc, #8]	; (d5698 <log_set_callbacks+0xc>)
   d5690:	681b      	ldr	r3, [r3, #0]
   d5692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5694:	9301      	str	r3, [sp, #4]
   d5696:	bd08      	pop	{r3, pc}
   d5698:	00030260 	.word	0x00030260

000d569c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d569c:	b508      	push	{r3, lr}
   d569e:	4b02      	ldr	r3, [pc, #8]	; (d56a8 <set_system_mode+0xc>)
   d56a0:	681b      	ldr	r3, [r3, #0]
   d56a2:	685b      	ldr	r3, [r3, #4]
   d56a4:	9301      	str	r3, [sp, #4]
   d56a6:	bd08      	pop	{r3, pc}
   d56a8:	00030220 	.word	0x00030220

000d56ac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d56ac:	b508      	push	{r3, lr}
   d56ae:	4b02      	ldr	r3, [pc, #8]	; (d56b8 <system_delay_ms+0xc>)
   d56b0:	681b      	ldr	r3, [r3, #0]
   d56b2:	695b      	ldr	r3, [r3, #20]
   d56b4:	9301      	str	r3, [sp, #4]
   d56b6:	bd08      	pop	{r3, pc}
   d56b8:	00030220 	.word	0x00030220

000d56bc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d56bc:	b508      	push	{r3, lr}
   d56be:	4b03      	ldr	r3, [pc, #12]	; (d56cc <system_ctrl_set_app_request_handler+0x10>)
   d56c0:	681b      	ldr	r3, [r3, #0]
   d56c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d56c6:	9301      	str	r3, [sp, #4]
   d56c8:	bd08      	pop	{r3, pc}
   d56ca:	0000      	.short	0x0000
   d56cc:	00030220 	.word	0x00030220

000d56d0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d56d0:	b508      	push	{r3, lr}
   d56d2:	4b03      	ldr	r3, [pc, #12]	; (d56e0 <system_ctrl_set_result+0x10>)
   d56d4:	681b      	ldr	r3, [r3, #0]
   d56d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d56da:	9301      	str	r3, [sp, #4]
   d56dc:	bd08      	pop	{r3, pc}
   d56de:	0000      	.short	0x0000
   d56e0:	00030220 	.word	0x00030220

000d56e4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d56e4:	b508      	push	{r3, lr}
   d56e6:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <network_connect+0xc>)
   d56e8:	681b      	ldr	r3, [r3, #0]
   d56ea:	685b      	ldr	r3, [r3, #4]
   d56ec:	9301      	str	r3, [sp, #4]
   d56ee:	bd08      	pop	{r3, pc}
   d56f0:	00030240 	.word	0x00030240

000d56f4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d56f4:	b508      	push	{r3, lr}
   d56f6:	4b02      	ldr	r3, [pc, #8]	; (d5700 <network_connecting+0xc>)
   d56f8:	681b      	ldr	r3, [r3, #0]
   d56fa:	689b      	ldr	r3, [r3, #8]
   d56fc:	9301      	str	r3, [sp, #4]
   d56fe:	bd08      	pop	{r3, pc}
   d5700:	00030240 	.word	0x00030240

000d5704 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5704:	b508      	push	{r3, lr}
   d5706:	4b02      	ldr	r3, [pc, #8]	; (d5710 <network_disconnect+0xc>)
   d5708:	681b      	ldr	r3, [r3, #0]
   d570a:	68db      	ldr	r3, [r3, #12]
   d570c:	9301      	str	r3, [sp, #4]
   d570e:	bd08      	pop	{r3, pc}
   d5710:	00030240 	.word	0x00030240

000d5714 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5714:	b508      	push	{r3, lr}
   d5716:	4b02      	ldr	r3, [pc, #8]	; (d5720 <network_ready+0xc>)
   d5718:	681b      	ldr	r3, [r3, #0]
   d571a:	691b      	ldr	r3, [r3, #16]
   d571c:	9301      	str	r3, [sp, #4]
   d571e:	bd08      	pop	{r3, pc}
   d5720:	00030240 	.word	0x00030240

000d5724 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5724:	b508      	push	{r3, lr}
   d5726:	4b02      	ldr	r3, [pc, #8]	; (d5730 <network_on+0xc>)
   d5728:	681b      	ldr	r3, [r3, #0]
   d572a:	695b      	ldr	r3, [r3, #20]
   d572c:	9301      	str	r3, [sp, #4]
   d572e:	bd08      	pop	{r3, pc}
   d5730:	00030240 	.word	0x00030240

000d5734 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5734:	b508      	push	{r3, lr}
   d5736:	4b02      	ldr	r3, [pc, #8]	; (d5740 <network_off+0xc>)
   d5738:	681b      	ldr	r3, [r3, #0]
   d573a:	699b      	ldr	r3, [r3, #24]
   d573c:	9301      	str	r3, [sp, #4]
   d573e:	bd08      	pop	{r3, pc}
   d5740:	00030240 	.word	0x00030240

000d5744 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5744:	b508      	push	{r3, lr}
   d5746:	4b02      	ldr	r3, [pc, #8]	; (d5750 <network_listen+0xc>)
   d5748:	681b      	ldr	r3, [r3, #0]
   d574a:	69db      	ldr	r3, [r3, #28]
   d574c:	9301      	str	r3, [sp, #4]
   d574e:	bd08      	pop	{r3, pc}
   d5750:	00030240 	.word	0x00030240

000d5754 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5754:	b508      	push	{r3, lr}
   d5756:	4b02      	ldr	r3, [pc, #8]	; (d5760 <network_listening+0xc>)
   d5758:	681b      	ldr	r3, [r3, #0]
   d575a:	6a1b      	ldr	r3, [r3, #32]
   d575c:	9301      	str	r3, [sp, #4]
   d575e:	bd08      	pop	{r3, pc}
   d5760:	00030240 	.word	0x00030240

000d5764 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5764:	b508      	push	{r3, lr}
   d5766:	4b02      	ldr	r3, [pc, #8]	; (d5770 <network_set_listen_timeout+0xc>)
   d5768:	681b      	ldr	r3, [r3, #0]
   d576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d576c:	9301      	str	r3, [sp, #4]
   d576e:	bd08      	pop	{r3, pc}
   d5770:	00030240 	.word	0x00030240

000d5774 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5774:	b508      	push	{r3, lr}
   d5776:	4b02      	ldr	r3, [pc, #8]	; (d5780 <network_get_listen_timeout+0xc>)
   d5778:	681b      	ldr	r3, [r3, #0]
   d577a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d577c:	9301      	str	r3, [sp, #4]
   d577e:	bd08      	pop	{r3, pc}
   d5780:	00030240 	.word	0x00030240

000d5784 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5784:	b508      	push	{r3, lr}
   d5786:	4b02      	ldr	r3, [pc, #8]	; (d5790 <spark_function+0xc>)
   d5788:	681b      	ldr	r3, [r3, #0]
   d578a:	685b      	ldr	r3, [r3, #4]
   d578c:	9301      	str	r3, [sp, #4]
   d578e:	bd08      	pop	{r3, pc}
   d5790:	00030244 	.word	0x00030244

000d5794 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5794:	b508      	push	{r3, lr}
   d5796:	4b02      	ldr	r3, [pc, #8]	; (d57a0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5798:	681b      	ldr	r3, [r3, #0]
   d579a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d579c:	9301      	str	r3, [sp, #4]
   d579e:	bd08      	pop	{r3, pc}
   d57a0:	00030244 	.word	0x00030244

000d57a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d57a4:	b508      	push	{r3, lr}
   d57a6:	4b02      	ldr	r3, [pc, #8]	; (d57b0 <malloc+0xc>)
   d57a8:	681b      	ldr	r3, [r3, #0]
   d57aa:	681b      	ldr	r3, [r3, #0]
   d57ac:	9301      	str	r3, [sp, #4]
   d57ae:	bd08      	pop	{r3, pc}
   d57b0:	0003021c 	.word	0x0003021c

000d57b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d57b4:	b508      	push	{r3, lr}
   d57b6:	4b02      	ldr	r3, [pc, #8]	; (d57c0 <free+0xc>)
   d57b8:	681b      	ldr	r3, [r3, #0]
   d57ba:	685b      	ldr	r3, [r3, #4]
   d57bc:	9301      	str	r3, [sp, #4]
   d57be:	bd08      	pop	{r3, pc}
   d57c0:	0003021c 	.word	0x0003021c

000d57c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d57c4:	b508      	push	{r3, lr}
   d57c6:	4b02      	ldr	r3, [pc, #8]	; (d57d0 <realloc+0xc>)
   d57c8:	681b      	ldr	r3, [r3, #0]
   d57ca:	689b      	ldr	r3, [r3, #8]
   d57cc:	9301      	str	r3, [sp, #4]
   d57ce:	bd08      	pop	{r3, pc}
   d57d0:	0003021c 	.word	0x0003021c

000d57d4 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d57d4:	b508      	push	{r3, lr}
   d57d6:	4b02      	ldr	r3, [pc, #8]	; (d57e0 <siprintf+0xc>)
   d57d8:	681b      	ldr	r3, [r3, #0]
   d57da:	691b      	ldr	r3, [r3, #16]
   d57dc:	9301      	str	r3, [sp, #4]
   d57de:	bd08      	pop	{r3, pc}
   d57e0:	0003021c 	.word	0x0003021c

000d57e4 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d57e4:	b508      	push	{r3, lr}
   d57e6:	4b02      	ldr	r3, [pc, #8]	; (d57f0 <siscanf+0xc>)
   d57e8:	681b      	ldr	r3, [r3, #0]
   d57ea:	699b      	ldr	r3, [r3, #24]
   d57ec:	9301      	str	r3, [sp, #4]
   d57ee:	bd08      	pop	{r3, pc}
   d57f0:	0003021c 	.word	0x0003021c

000d57f4 <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d57f4:	b508      	push	{r3, lr}
   d57f6:	4b02      	ldr	r3, [pc, #8]	; (d5800 <vsnprintf+0xc>)
   d57f8:	681b      	ldr	r3, [r3, #0]
   d57fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57fc:	9301      	str	r3, [sp, #4]
   d57fe:	bd08      	pop	{r3, pc}
   d5800:	0003021c 	.word	0x0003021c

000d5804 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b02      	ldr	r3, [pc, #8]	; (d5810 <_malloc_r+0xc>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d580c:	9301      	str	r3, [sp, #4]
   d580e:	bd08      	pop	{r3, pc}
   d5810:	0003021c 	.word	0x0003021c

000d5814 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5814:	2200      	movs	r2, #0
   d5816:	4611      	mov	r1, r2
   d5818:	6840      	ldr	r0, [r0, #4]
   d581a:	f7ff bf9b 	b.w	d5754 <network_listening>

000d581e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d581e:	2200      	movs	r2, #0
   d5820:	4611      	mov	r1, r2
   d5822:	6840      	ldr	r0, [r0, #4]
   d5824:	f7ff bfa6 	b.w	d5774 <network_get_listen_timeout>

000d5828 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5828:	2200      	movs	r2, #0
   d582a:	6840      	ldr	r0, [r0, #4]
   d582c:	f7ff bf9a 	b.w	d5764 <network_set_listen_timeout>

000d5830 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5830:	2200      	movs	r2, #0
   d5832:	f081 0101 	eor.w	r1, r1, #1
   d5836:	6840      	ldr	r0, [r0, #4]
   d5838:	f7ff bf84 	b.w	d5744 <network_listen>

000d583c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d583c:	2300      	movs	r3, #0
   d583e:	461a      	mov	r2, r3
   d5840:	4619      	mov	r1, r3
   d5842:	6840      	ldr	r0, [r0, #4]
   d5844:	f7ff bf76 	b.w	d5734 <network_off>

000d5848 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5848:	2300      	movs	r3, #0
   d584a:	461a      	mov	r2, r3
   d584c:	4619      	mov	r1, r3
   d584e:	6840      	ldr	r0, [r0, #4]
   d5850:	f7ff bf68 	b.w	d5724 <network_on>

000d5854 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5854:	2200      	movs	r2, #0
   d5856:	4611      	mov	r1, r2
   d5858:	6840      	ldr	r0, [r0, #4]
   d585a:	f7ff bf5b 	b.w	d5714 <network_ready>

000d585e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d585e:	2200      	movs	r2, #0
   d5860:	4611      	mov	r1, r2
   d5862:	6840      	ldr	r0, [r0, #4]
   d5864:	f7ff bf46 	b.w	d56f4 <network_connecting>

000d5868 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5868:	2200      	movs	r2, #0
   d586a:	2102      	movs	r1, #2
   d586c:	6840      	ldr	r0, [r0, #4]
   d586e:	f7ff bf49 	b.w	d5704 <network_disconnect>

000d5872 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5872:	2300      	movs	r3, #0
   d5874:	461a      	mov	r2, r3
   d5876:	6840      	ldr	r0, [r0, #4]
   d5878:	f7ff bf34 	b.w	d56e4 <network_connect>

000d587c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d587c:	4b02      	ldr	r3, [pc, #8]	; (d5888 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d587e:	2203      	movs	r2, #3
   d5880:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5882:	4a02      	ldr	r2, [pc, #8]	; (d588c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5884:	601a      	str	r2, [r3, #0]
   d5886:	4770      	bx	lr
   d5888:	2003e368 	.word	0x2003e368
   d588c:	000da96c 	.word	0x000da96c

000d5890 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5890:	b510      	push	{r4, lr}
   d5892:	4604      	mov	r4, r0
{
    _spi = spi;
   d5894:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d5896:	4608      	mov	r0, r1
   d5898:	f7ff fcde 	bl	d5258 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d589c:	2300      	movs	r3, #0
   d589e:	6063      	str	r3, [r4, #4]
}
   d58a0:	4620      	mov	r0, r4
   d58a2:	bd10      	pop	{r4, pc}

000d58a4 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d58a4:	7800      	ldrb	r0, [r0, #0]
   d58a6:	f7ff bcdf 	b.w	d5268 <HAL_SPI_Is_Enabled>
	...

000d58ac <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d58ac:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d58ae:	4c09      	ldr	r4, [pc, #36]	; (d58d4 <_GLOBAL__sub_I_System+0x28>)
   d58b0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d58b2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d58b6:	6020      	str	r0, [r4, #0]
   d58b8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d58ba:	71a0      	strb	r0, [r4, #6]
   d58bc:	8120      	strh	r0, [r4, #8]
   d58be:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d58c0:	f7ff feec 	bl	d569c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58c4:	4620      	mov	r0, r4
   d58c6:	4a04      	ldr	r2, [pc, #16]	; (d58d8 <_GLOBAL__sub_I_System+0x2c>)
   d58c8:	4904      	ldr	r1, [pc, #16]	; (d58dc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d58ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d58ce:	f003 bcd9 	b.w	d9284 <__aeabi_atexit>
   d58d2:	bf00      	nop
   d58d4:	2003e370 	.word	0x2003e370
   d58d8:	2003d848 	.word	0x2003d848
   d58dc:	000d41a9 	.word	0x000d41a9

000d58e0 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d58e0:	2300      	movs	r3, #0
   d58e2:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d58e4:	6043      	str	r3, [r0, #4]
	len = 0;
   d58e6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d58e8:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d58ea:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d58ec:	680c      	ldr	r4, [r1, #0]
   d58ee:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d58f0:	684c      	ldr	r4, [r1, #4]
   d58f2:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d58f4:	688c      	ldr	r4, [r1, #8]
   d58f6:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d58f8:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d58fa:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d58fc:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d58fe:	bd10      	pop	{r4, pc}

000d5900 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5900:	b510      	push	{r4, lr}
   d5902:	4604      	mov	r4, r0
{
	free(buffer);
   d5904:	6800      	ldr	r0, [r0, #0]
   d5906:	f7ff ff55 	bl	d57b4 <free>
}
   d590a:	4620      	mov	r0, r4
   d590c:	bd10      	pop	{r4, pc}

000d590e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d590e:	b510      	push	{r4, lr}
   d5910:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5912:	6800      	ldr	r0, [r0, #0]
   d5914:	b108      	cbz	r0, d591a <_ZN6String10invalidateEv+0xc>
   d5916:	f7ff ff4d 	bl	d57b4 <free>
	buffer = NULL;
   d591a:	2300      	movs	r3, #0
   d591c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d591e:	60a3      	str	r3, [r4, #8]
   d5920:	6063      	str	r3, [r4, #4]
   d5922:	bd10      	pop	{r4, pc}

000d5924 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5924:	b538      	push	{r3, r4, r5, lr}
   d5926:	4604      	mov	r4, r0
   d5928:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d592a:	6800      	ldr	r0, [r0, #0]
   d592c:	3101      	adds	r1, #1
   d592e:	f7ff ff49 	bl	d57c4 <realloc>
	if (newbuffer) {
   d5932:	b110      	cbz	r0, d593a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5934:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5938:	2001      	movs	r0, #1
	}
	return 0;
}
   d593a:	bd38      	pop	{r3, r4, r5, pc}

000d593c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d593c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d593e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5940:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5942:	b113      	cbz	r3, d594a <_ZN6String7reserveEj+0xe>
   d5944:	6843      	ldr	r3, [r0, #4]
   d5946:	428b      	cmp	r3, r1
   d5948:	d207      	bcs.n	d595a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d594a:	4620      	mov	r0, r4
   d594c:	f7ff ffea 	bl	d5924 <_ZN6String12changeBufferEj>
   d5950:	b120      	cbz	r0, d595c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5952:	68a3      	ldr	r3, [r4, #8]
   d5954:	b90b      	cbnz	r3, d595a <_ZN6String7reserveEj+0x1e>
   d5956:	6822      	ldr	r2, [r4, #0]
   d5958:	7013      	strb	r3, [r2, #0]
   d595a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d595c:	bd10      	pop	{r4, pc}

000d595e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d595e:	b570      	push	{r4, r5, r6, lr}
   d5960:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5962:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5964:	4604      	mov	r4, r0
   d5966:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5968:	f7ff ffe8 	bl	d593c <_ZN6String7reserveEj>
   d596c:	b918      	cbnz	r0, d5976 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d596e:	4620      	mov	r0, r4
   d5970:	f7ff ffcd 	bl	d590e <_ZN6String10invalidateEv>
		return *this;
   d5974:	e009      	b.n	d598a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5976:	462a      	mov	r2, r5
   d5978:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d597a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d597c:	6820      	ldr	r0, [r4, #0]
   d597e:	f003 ff40 	bl	d9802 <memcpy>
	buffer[len] = 0;
   d5982:	6822      	ldr	r2, [r4, #0]
   d5984:	68a3      	ldr	r3, [r4, #8]
   d5986:	2100      	movs	r1, #0
   d5988:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d598a:	4620      	mov	r0, r4
   d598c:	bd70      	pop	{r4, r5, r6, pc}

000d598e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d598e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5990:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5992:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5994:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5996:	6043      	str	r3, [r0, #4]
	len = 0;
   d5998:	6083      	str	r3, [r0, #8]
	flags = 0;
   d599a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d599c:	460d      	mov	r5, r1
   d599e:	b139      	cbz	r1, d59b0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d59a0:	4608      	mov	r0, r1
   d59a2:	f003 ffaf 	bl	d9904 <strlen>
   d59a6:	4629      	mov	r1, r5
   d59a8:	4602      	mov	r2, r0
   d59aa:	4620      	mov	r0, r4
   d59ac:	f7ff ffd7 	bl	d595e <_ZN6String4copyEPKcj>
}
   d59b0:	4620      	mov	r0, r4
   d59b2:	bd38      	pop	{r3, r4, r5, pc}

000d59b4 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d59b4:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d59b6:	b510      	push	{r4, lr}
   d59b8:	460b      	mov	r3, r1
   d59ba:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d59bc:	d007      	beq.n	d59ce <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d59be:	6809      	ldr	r1, [r1, #0]
   d59c0:	b119      	cbz	r1, d59ca <_ZN6StringaSERKS_+0x16>
   d59c2:	689a      	ldr	r2, [r3, #8]
   d59c4:	f7ff ffcb 	bl	d595e <_ZN6String4copyEPKcj>
   d59c8:	e001      	b.n	d59ce <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d59ca:	f7ff ffa0 	bl	d590e <_ZN6String10invalidateEv>

	return *this;
}
   d59ce:	4620      	mov	r0, r4
   d59d0:	bd10      	pop	{r4, pc}

000d59d2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d59d2:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d59d4:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d59d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d59d8:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d59da:	6043      	str	r3, [r0, #4]
	len = 0;
   d59dc:	6083      	str	r3, [r0, #8]
	flags = 0;
   d59de:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d59e0:	f7ff ffe8 	bl	d59b4 <_ZN6StringaSERKS_>
}
   d59e4:	4620      	mov	r0, r4
   d59e6:	bd10      	pop	{r4, pc}

000d59e8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d59e8:	b538      	push	{r3, r4, r5, lr}
   d59ea:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d59ec:	460c      	mov	r4, r1
   d59ee:	b141      	cbz	r1, d5a02 <_ZN6StringaSEPKc+0x1a>
   d59f0:	4608      	mov	r0, r1
   d59f2:	f003 ff87 	bl	d9904 <strlen>
   d59f6:	4621      	mov	r1, r4
   d59f8:	4602      	mov	r2, r0
   d59fa:	4628      	mov	r0, r5
   d59fc:	f7ff ffaf 	bl	d595e <_ZN6String4copyEPKcj>
   d5a00:	e001      	b.n	d5a06 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d5a02:	f7ff ff84 	bl	d590e <_ZN6String10invalidateEv>

	return *this;
}
   d5a06:	4628      	mov	r0, r5
   d5a08:	bd38      	pop	{r3, r4, r5, pc}

000d5a0a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d5a0a:	b570      	push	{r4, r5, r6, lr}
   d5a0c:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d5a0e:	460e      	mov	r6, r1
   d5a10:	b909      	cbnz	r1, d5a16 <_ZN6String6concatEPKcj+0xc>
   d5a12:	2000      	movs	r0, #0
   d5a14:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d5a16:	b16a      	cbz	r2, d5a34 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d5a18:	6883      	ldr	r3, [r0, #8]
   d5a1a:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d5a1c:	4629      	mov	r1, r5
   d5a1e:	f7ff ff8d 	bl	d593c <_ZN6String7reserveEj>
   d5a22:	2800      	cmp	r0, #0
   d5a24:	d0f5      	beq.n	d5a12 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d5a26:	6820      	ldr	r0, [r4, #0]
   d5a28:	68a3      	ldr	r3, [r4, #8]
   d5a2a:	4631      	mov	r1, r6
   d5a2c:	4418      	add	r0, r3
   d5a2e:	f003 ff61 	bl	d98f4 <strcpy>
	len = newlen;
   d5a32:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d5a34:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d5a36:	bd70      	pop	{r4, r5, r6, pc}

000d5a38 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5a38:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5a3a:	688a      	ldr	r2, [r1, #8]
   d5a3c:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d5a3e:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d5a40:	f7ff ffe3 	bl	d5a0a <_ZN6String6concatEPKcj>
   d5a44:	b910      	cbnz	r0, d5a4c <_ZplRK15StringSumHelperRK6String+0x14>
   d5a46:	4620      	mov	r0, r4
   d5a48:	f7ff ff61 	bl	d590e <_ZN6String10invalidateEv>
	return a;
}
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	bd10      	pop	{r4, pc}

000d5a50 <_ZNK6String16equalsIgnoreCaseERKS_>:
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d5a50:	4288      	cmp	r0, r1
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
   d5a52:	b570      	push	{r4, r5, r6, lr}
	if (this == &s2) return 1;
   d5a54:	d015      	beq.n	d5a82 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
	if (len != s2.len) return 0;
   d5a56:	6883      	ldr	r3, [r0, #8]
   d5a58:	688a      	ldr	r2, [r1, #8]
   d5a5a:	4293      	cmp	r3, r2
   d5a5c:	d10f      	bne.n	d5a7e <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
	if (len == 0) return 1;
   d5a5e:	b183      	cbz	r3, d5a82 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
   d5a60:	6804      	ldr	r4, [r0, #0]
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
   d5a62:	680d      	ldr	r5, [r1, #0]
   d5a64:	3c01      	subs	r4, #1
	while (*p1) {
   d5a66:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   d5a6a:	b150      	cbz	r0, d5a82 <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
   d5a6c:	f004 f8b8 	bl	d9be0 <tolower>
   d5a70:	4606      	mov	r6, r0
   d5a72:	f815 0b01 	ldrb.w	r0, [r5], #1
   d5a76:	f004 f8b3 	bl	d9be0 <tolower>
   d5a7a:	4286      	cmp	r6, r0
   d5a7c:	d0f3      	beq.n	d5a66 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
   d5a7e:	2000      	movs	r0, #0
   d5a80:	bd70      	pop	{r4, r5, r6, pc}
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d5a82:	2001      	movs	r0, #1
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	}
	return 1;
}
   d5a84:	bd70      	pop	{r4, r5, r6, pc}

000d5a86 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d5a86:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d5a88:	6883      	ldr	r3, [r0, #8]
   d5a8a:	4293      	cmp	r3, r2
   d5a8c:	d907      	bls.n	d5a9e <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d5a8e:	6804      	ldr	r4, [r0, #0]
   d5a90:	6809      	ldr	r1, [r1, #0]
   d5a92:	18a0      	adds	r0, r4, r2
   d5a94:	f003 ff72 	bl	d997c <strstr>
	if (found == NULL) return -1;
   d5a98:	b108      	cbz	r0, d5a9e <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d5a9a:	1b00      	subs	r0, r0, r4
   d5a9c:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
   d5a9e:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
   d5aa2:	bd10      	pop	{r4, pc}

000d5aa4 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   d5aa4:	2200      	movs	r2, #0
   d5aa6:	f7ff bfee 	b.w	d5a86 <_ZNK6String7indexOfERKS_j>
	...

000d5aac <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d5aae:	429a      	cmp	r2, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5ab0:	460f      	mov	r7, r1
   d5ab2:	461d      	mov	r5, r3
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5ab4:	490c      	ldr	r1, [pc, #48]	; (d5ae8 <_ZNK6String9substringEjj+0x3c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
   d5ab6:	bf88      	it	hi
   d5ab8:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d5aba:	4614      	mov	r4, r2
   d5abc:	4606      	mov	r6, r0
	if (left > right) {
   d5abe:	bf84      	itt	hi
   d5ac0:	462c      	movhi	r4, r5
   d5ac2:	461d      	movhi	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d5ac4:	f7ff ff63 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
   d5ac8:	68ba      	ldr	r2, [r7, #8]
   d5aca:	4294      	cmp	r4, r2
   d5acc:	d80a      	bhi.n	d5ae4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d5ace:	6839      	ldr	r1, [r7, #0]
   d5ad0:	4295      	cmp	r5, r2
   d5ad2:	bf94      	ite	ls
   d5ad4:	ebc4 0205 	rsbls	r2, r4, r5
   d5ad8:	ebc4 0202 	rsbhi	r2, r4, r2
   d5adc:	4421      	add	r1, r4
   d5ade:	4630      	mov	r0, r6
   d5ae0:	f7ff ff3d 	bl	d595e <_ZN6String4copyEPKcj>
	return out;
}
   d5ae4:	4630      	mov	r0, r6
   d5ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5ae8:	000dac70 	.word	0x000dac70

000d5aec <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d5aec:	b538      	push	{r3, r4, r5, lr}
   d5aee:	4604      	mov	r4, r0
   d5af0:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d5af2:	68a3      	ldr	r3, [r4, #8]
   d5af4:	428b      	cmp	r3, r1
   d5af6:	d911      	bls.n	d5b1c <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d5af8:	b182      	cbz	r2, d5b1c <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d5afa:	4411      	add	r1, r2
   d5afc:	428b      	cmp	r3, r1
   d5afe:	bf38      	it	cc
   d5b00:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d5b02:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d5b04:	1a9b      	subs	r3, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d5b06:	1811      	adds	r1, r2, r0
String& String::remove(unsigned int index, unsigned int count){
	if (index >= len) { return *this; }
	if (count <= 0) { return *this; }
	if (index + count > len) { count = len - index; }
	char *writeTo = buffer + index;
	len = len - count;
   d5b08:	60a3      	str	r3, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d5b0a:	1a1a      	subs	r2, r3, r0
   d5b0c:	4429      	add	r1, r5
   d5b0e:	4428      	add	r0, r5
   d5b10:	f003 fe82 	bl	d9818 <memmove>
	buffer[len] = 0;
   d5b14:	6822      	ldr	r2, [r4, #0]
   d5b16:	68a3      	ldr	r3, [r4, #8]
   d5b18:	2100      	movs	r1, #0
   d5b1a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5b1c:	4620      	mov	r0, r4
   d5b1e:	bd38      	pop	{r3, r4, r5, pc}

000d5b20 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d5b20:	6800      	ldr	r0, [r0, #0]
   d5b22:	b108      	cbz	r0, d5b28 <_ZNK6String5toIntEv+0x8>
   d5b24:	f003 bd54 	b.w	d95d0 <atol>
	return 0;
}
   d5b28:	4770      	bx	lr

000d5b2a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5b2a:	4770      	bx	lr

000d5b2c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5b2c:	2000      	movs	r0, #0
   d5b2e:	4770      	bx	lr

000d5b30 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5b30:	4770      	bx	lr

000d5b32 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5b32:	2000      	movs	r0, #0
   d5b34:	4770      	bx	lr

000d5b36 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5b36:	4770      	bx	lr

000d5b38 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5b38:	2000      	movs	r0, #0
   d5b3a:	4770      	bx	lr

000d5b3c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5b3c:	b510      	push	{r4, lr}
   d5b3e:	2114      	movs	r1, #20
   d5b40:	4604      	mov	r4, r0
   d5b42:	f003 fbad 	bl	d92a0 <_ZdlPvj>
   d5b46:	4620      	mov	r0, r4
   d5b48:	bd10      	pop	{r4, pc}

000d5b4a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5b4a:	b510      	push	{r4, lr}
   d5b4c:	2114      	movs	r1, #20
   d5b4e:	4604      	mov	r4, r0
   d5b50:	f003 fba6 	bl	d92a0 <_ZdlPvj>
   d5b54:	4620      	mov	r0, r4
   d5b56:	bd10      	pop	{r4, pc}

000d5b58 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5b58:	b510      	push	{r4, lr}
   d5b5a:	2114      	movs	r1, #20
   d5b5c:	4604      	mov	r4, r0
   d5b5e:	f003 fb9f 	bl	d92a0 <_ZdlPvj>
   d5b62:	4620      	mov	r0, r4
   d5b64:	bd10      	pop	{r4, pc}

000d5b66 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5b66:	f7fe ba98 	b.w	d409a <_ZdlPv>

000d5b6a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5b6a:	f7fe ba96 	b.w	d409a <_ZdlPv>

000d5b6e <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d5b6e:	f7fe ba94 	b.w	d409a <_ZdlPv>

000d5b72 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5b72:	b510      	push	{r4, lr}
   d5b74:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5b76:	6800      	ldr	r0, [r0, #0]
   d5b78:	b108      	cbz	r0, d5b7e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5b7a:	f7ff fc4f 	bl	d541c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5b7e:	4620      	mov	r0, r4
   d5b80:	bd10      	pop	{r4, pc}
	...

000d5b84 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d5b84:	b530      	push	{r4, r5, lr}
   d5b86:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d5b88:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d5b8a:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d5b8c:	2400      	movs	r4, #0
   d5b8e:	9302      	str	r3, [sp, #8]
   d5b90:	4b08      	ldr	r3, [pc, #32]	; (d5bb4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d5b92:	9300      	str	r3, [sp, #0]
   d5b94:	aa02      	add	r2, sp, #8
   d5b96:	4623      	mov	r3, r4
   d5b98:	4907      	ldr	r1, [pc, #28]	; (d5bb8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d5b9a:	9403      	str	r4, [sp, #12]
   d5b9c:	2001      	movs	r0, #1
   d5b9e:	f7ff fd5d 	bl	d565c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d5ba2:	6828      	ldr	r0, [r5, #0]
   d5ba4:	4905      	ldr	r1, [pc, #20]	; (d5bbc <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d5ba6:	8800      	ldrh	r0, [r0, #0]
   d5ba8:	4623      	mov	r3, r4
   d5baa:	462a      	mov	r2, r5
   d5bac:	f7ff fbb2 	bl	d5314 <hal_ble_gatt_client_discover_all_services>
    }
   d5bb0:	b00b      	add	sp, #44	; 0x2c
   d5bb2:	bd30      	pop	{r4, r5, pc}
   d5bb4:	000da9f7 	.word	0x000da9f7
   d5bb8:	000da9ec 	.word	0x000da9ec
   d5bbc:	000d72f1 	.word	0x000d72f1

000d5bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5bc0:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d5bc2:	200a      	movs	r0, #10
   d5bc4:	4a02      	ldr	r2, [pc, #8]	; (d5bd0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d5bc6:	2100      	movs	r1, #0
   d5bc8:	f7ff fd40 	bl	d564c <panic_>
    }
}
   d5bcc:	bd08      	pop	{r3, pc}
   d5bce:	bf00      	nop
   d5bd0:	000d5289 	.word	0x000d5289

000d5bd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5bd4:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5bd6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5bd8:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5bda:	689b      	ldr	r3, [r3, #8]
   d5bdc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5bde:	68a3      	ldr	r3, [r4, #8]
   d5be0:	3b01      	subs	r3, #1
   d5be2:	60a3      	str	r3, [r4, #8]
   d5be4:	b92b      	cbnz	r3, d5bf2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5be6:	6823      	ldr	r3, [r4, #0]
   d5be8:	4620      	mov	r0, r4
   d5bea:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5bf0:	4718      	bx	r3
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d5bf4:	b570      	push	{r4, r5, r6, lr}
   d5bf6:	1c93      	adds	r3, r2, #2
   d5bf8:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d5bfa:	4288      	cmp	r0, r1
   d5bfc:	d018      	beq.n	d5c30 <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d5bfe:	7804      	ldrb	r4, [r0, #0]
   d5c00:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d5c02:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d5c06:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5c08:	bf88      	it	hi
   d5c0a:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d5c0e:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d5c10:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d5c14:	7834      	ldrb	r4, [r6, #0]
   d5c16:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d5c1a:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d5c1e:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5c20:	bf88      	it	hi
   d5c22:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d5c26:	f803 5c01 	strb.w	r5, [r3, #-1]
   d5c2a:	3001      	adds	r0, #1
   d5c2c:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d5c2e:	e7e4      	b.n	d5bfa <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d5c30:	4610      	mov	r0, r2
   d5c32:	bd70      	pop	{r4, r5, r6, pc}

000d5c34 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5c34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5c38:	b2da      	uxtb	r2, r3
   d5c3a:	2a09      	cmp	r2, #9
   d5c3c:	d801      	bhi.n	d5c42 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d5c3e:	4618      	mov	r0, r3
   d5c40:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d5c42:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5c46:	2b05      	cmp	r3, #5
   d5c48:	d801      	bhi.n	d5c4e <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5c4a:	3857      	subs	r0, #87	; 0x57
   d5c4c:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5c4e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5c52:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5c54:	bf94      	ite	ls
   d5c56:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5c58:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d5c5c:	4770      	bx	lr
	...

000d5c60 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5c60:	b510      	push	{r4, lr}
            locked_(false) {
   d5c62:	2300      	movs	r3, #0
   d5c64:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5c66:	4b04      	ldr	r3, [pc, #16]	; (d5c78 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5c68:	4604      	mov	r4, r0
   d5c6a:	6818      	ldr	r0, [r3, #0]
   d5c6c:	f7ff fbde 	bl	d542c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d5c70:	2301      	movs	r3, #1
   d5c72:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5c74:	4620      	mov	r0, r4
   d5c76:	bd10      	pop	{r4, pc}
   d5c78:	2003e384 	.word	0x2003e384

000d5c7c <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5c7c:	b510      	push	{r4, lr}
        if (locked_) {
   d5c7e:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d5c80:	4604      	mov	r4, r0
        if (locked_) {
   d5c82:	b11b      	cbz	r3, d5c8c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5c84:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5c86:	6818      	ldr	r0, [r3, #0]
   d5c88:	f7ff fbd8 	bl	d543c <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5c8c:	4620      	mov	r0, r4
   d5c8e:	bd10      	pop	{r4, pc}
   d5c90:	2003e384 	.word	0x2003e384

000d5c94 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5c94:	2200      	movs	r2, #0
   d5c96:	6002      	str	r2, [r0, #0]
   d5c98:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d5c9a:	4770      	bx	lr

000d5c9c <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5c9c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5c9e:	7982      	ldrb	r2, [r0, #6]
   d5ca0:	798b      	ldrb	r3, [r1, #6]
   d5ca2:	429a      	cmp	r2, r3
   d5ca4:	d106      	bne.n	d5cb4 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5ca6:	2206      	movs	r2, #6
   d5ca8:	f003 fd9c 	bl	d97e4 <memcmp>
   d5cac:	fab0 f080 	clz	r0, r0
   d5cb0:	0940      	lsrs	r0, r0, #5
   d5cb2:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5cb4:	2000      	movs	r0, #0
}
   d5cb6:	bd08      	pop	{r3, pc}

000d5cb8 <_ZNK8particle10BleAddress11toBigEndianEPh>:

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d5cb8:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d5cba:	2305      	movs	r3, #5
        buf[i] = address_.addr[j];
   d5cbc:	5cc2      	ldrb	r2, [r0, r3]
   d5cbe:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    return false;
}

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d5cc2:	3b01      	subs	r3, #1
   d5cc4:	b2db      	uxtb	r3, r3
   d5cc6:	2bff      	cmp	r3, #255	; 0xff
   d5cc8:	d1f8      	bne.n	d5cbc <_ZNK8particle10BleAddress11toBigEndianEPh+0x4>
        buf[i] = address_.addr[j];
    }
}
   d5cca:	4770      	bx	lr

000d5ccc <_ZNK8particle10BleAddress8toStringEPcjb>:
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d5ccc:	b570      	push	{r4, r5, r6, lr}
   d5cce:	4614      	mov	r4, r2
   d5cd0:	b088      	sub	sp, #32
   d5cd2:	461d      	mov	r5, r3
    if (!buf || len == 0) {
   d5cd4:	460e      	mov	r6, r1
   d5cd6:	2900      	cmp	r1, #0
   d5cd8:	d046      	beq.n	d5d68 <_ZNK8particle10BleAddress8toStringEPcjb+0x9c>
   d5cda:	2a00      	cmp	r2, #0
   d5cdc:	d046      	beq.n	d5d6c <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
   d5cde:	a901      	add	r1, sp, #4
   d5ce0:	f7ff ffea 	bl	d5cb8 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d5ce4:	aa03      	add	r2, sp, #12
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
    if (stripped) {
   d5ce6:	b115      	cbz	r5, d5cee <_ZNK8particle10BleAddress8toStringEPcjb+0x22>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d5ce8:	2106      	movs	r1, #6
   d5cea:	a801      	add	r0, sp, #4
   d5cec:	e02d      	b.n	d5d4a <_ZNK8particle10BleAddress8toStringEPcjb+0x7e>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d5cee:	2101      	movs	r1, #1
   d5cf0:	a801      	add	r0, sp, #4
   d5cf2:	f7ff ff7f 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2] = ':';
   d5cf6:	253a      	movs	r5, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d5cf8:	f10d 020f 	add.w	r2, sp, #15
   d5cfc:	2101      	movs	r1, #1
   d5cfe:	f10d 0005 	add.w	r0, sp, #5
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
   d5d02:	f88d 500e 	strb.w	r5, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d5d06:	f7ff ff75 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d5d0a:	f10d 0212 	add.w	r2, sp, #18
   d5d0e:	2101      	movs	r1, #1
   d5d10:	f10d 0006 	add.w	r0, sp, #6
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
   d5d14:	f88d 5011 	strb.w	r5, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d5d18:	f7ff ff6c 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d5d1c:	f10d 0215 	add.w	r2, sp, #21
   d5d20:	2101      	movs	r1, #1
   d5d22:	f10d 0007 	add.w	r0, sp, #7
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
   d5d26:	f88d 5014 	strb.w	r5, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d5d2a:	f7ff ff63 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 3] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d5d2e:	aa06      	add	r2, sp, #24
   d5d30:	2101      	movs	r1, #1
   d5d32:	a802      	add	r0, sp, #8
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
        idx++;
        cStr[idx * 2 + 3] = ':';
   d5d34:	f88d 5017 	strb.w	r5, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d5d38:	f7ff ff5c 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 4] = ':';
   d5d3c:	f88d 501a 	strb.w	r5, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d5d40:	f10d 021b 	add.w	r2, sp, #27
   d5d44:	2101      	movs	r1, #1
   d5d46:	f10d 0009 	add.w	r0, sp, #9
   d5d4a:	3c01      	subs	r4, #1
   d5d4c:	f7ff ff52 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
   d5d50:	2c11      	cmp	r4, #17
   d5d52:	bf28      	it	cs
   d5d54:	2411      	movcs	r4, #17
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d5d56:	4622      	mov	r2, r4
   d5d58:	a903      	add	r1, sp, #12
   d5d5a:	4630      	mov	r0, r6
   d5d5c:	f003 fd51 	bl	d9802 <memcpy>
    buf[len++] = '\0';
   d5d60:	2300      	movs	r3, #0
   d5d62:	5533      	strb	r3, [r6, r4]
   d5d64:	1c60      	adds	r0, r4, #1
   d5d66:	e002      	b.n	d5d6e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d5d68:	4608      	mov	r0, r1
   d5d6a:	e000      	b.n	d5d6e <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
   d5d6c:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d5d6e:	b008      	add	sp, #32
   d5d70:	bd70      	pop	{r4, r5, r6, pc}

000d5d72 <_ZNK8particle10BleAddress8toStringEb>:

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d5d72:	b510      	push	{r4, lr}
   d5d74:	b086      	sub	sp, #24
   d5d76:	4604      	mov	r4, r0
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d5d78:	4613      	mov	r3, r2

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d5d7a:	4608      	mov	r0, r1
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d5d7c:	2212      	movs	r2, #18
   d5d7e:	a901      	add	r1, sp, #4
   d5d80:	f7ff ffa4 	bl	d5ccc <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d5d84:	a901      	add	r1, sp, #4
   d5d86:	4620      	mov	r0, r4
   d5d88:	f7ff fe01 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5d8c:	4620      	mov	r0, r4
   d5d8e:	b006      	add	sp, #24
   d5d90:	bd10      	pop	{r4, pc}
	...

000d5d94 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d5d94:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d5d96:	2301      	movs	r3, #1
   d5d98:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5d9a:	4b05      	ldr	r3, [pc, #20]	; (d5db0 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d5d9c:	4602      	mov	r2, r0
   d5d9e:	f103 0110 	add.w	r1, r3, #16
   d5da2:	f853 4b04 	ldr.w	r4, [r3], #4
   d5da6:	f842 4b04 	str.w	r4, [r2], #4
   d5daa:	428b      	cmp	r3, r1
   d5dac:	d1f9      	bne.n	d5da2 <_ZN8particle7BleUuidC1Ev+0xe>
}
   d5dae:	bd10      	pop	{r4, pc}
   d5db0:	000dab8c 	.word	0x000dab8c

000d5db4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d5db4:	7c0b      	ldrb	r3, [r1, #16]
   d5db6:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d5dba:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d5dbc:	d110      	bne.n	d5de0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d5dbe:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5dc0:	4b0d      	ldr	r3, [pc, #52]	; (d5df8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d5dc2:	4602      	mov	r2, r0
   d5dc4:	f103 0410 	add.w	r4, r3, #16
   d5dc8:	f853 5b04 	ldr.w	r5, [r3], #4
   d5dcc:	f842 5b04 	str.w	r5, [r2], #4
   d5dd0:	42a3      	cmp	r3, r4
   d5dd2:	d1f9      	bne.n	d5dc8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d5dd4:	880b      	ldrh	r3, [r1, #0]
   d5dd6:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d5dd8:	880b      	ldrh	r3, [r1, #0]
   d5dda:	121b      	asrs	r3, r3, #8
   d5ddc:	7343      	strb	r3, [r0, #13]
   d5dde:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d5de0:	2301      	movs	r3, #1
   d5de2:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5de4:	f101 0210 	add.w	r2, r1, #16
   d5de8:	4603      	mov	r3, r0
   d5dea:	f851 4b04 	ldr.w	r4, [r1], #4
   d5dee:	f843 4b04 	str.w	r4, [r3], #4
   d5df2:	4291      	cmp	r1, r2
   d5df4:	d1f9      	bne.n	d5dea <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d5df6:	bd30      	pop	{r4, r5, pc}
   d5df8:	000dab8c 	.word	0x000dab8c

000d5dfc <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d5dfc:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d5dfe:	690b      	ldr	r3, [r1, #16]
   d5e00:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5e02:	f101 0210 	add.w	r2, r1, #16
   d5e06:	4603      	mov	r3, r0
   d5e08:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e0c:	f843 4b04 	str.w	r4, [r3], #4
   d5e10:	4291      	cmp	r1, r2
   d5e12:	d1f9      	bne.n	d5e08 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5e14:	bd10      	pop	{r4, pc}

000d5e16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5e16:	b510      	push	{r4, lr}
    if (uuid128) {
   d5e18:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5e1a:	4604      	mov	r4, r0
    if (uuid128) {
   d5e1c:	b1b9      	cbz	r1, d5e4e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d5e1e:	2a01      	cmp	r2, #1
   d5e20:	d109      	bne.n	d5e36 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5e22:	4603      	mov	r3, r0
   d5e24:	f101 0210 	add.w	r2, r1, #16
   d5e28:	f851 0b04 	ldr.w	r0, [r1], #4
   d5e2c:	f843 0b04 	str.w	r0, [r3], #4
   d5e30:	4291      	cmp	r1, r2
   d5e32:	d1f9      	bne.n	d5e28 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d5e34:	e008      	b.n	d5e48 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d5e36:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d5e38:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d5e3a:	5c98      	ldrb	r0, [r3, r2]
   d5e3c:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5e40:	3a01      	subs	r2, #1
   d5e42:	b2d2      	uxtb	r2, r2
   d5e44:	2aff      	cmp	r2, #255	; 0xff
   d5e46:	d1f8      	bne.n	d5e3a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d5e48:	2301      	movs	r3, #1
   d5e4a:	6123      	str	r3, [r4, #16]
   d5e4c:	e002      	b.n	d5e54 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5e4e:	2210      	movs	r2, #16
   d5e50:	f003 fcfd 	bl	d984e <memset>
    }
}
   d5e54:	4620      	mov	r0, r4
   d5e56:	bd10      	pop	{r4, pc}

000d5e58 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d5e58:	b538      	push	{r3, r4, r5, lr}
   d5e5a:	4604      	mov	r4, r0
   d5e5c:	460d      	mov	r5, r1
        : BleUuid() {
   d5e5e:	f7ff ff99 	bl	d5d94 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d5e62:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5e64:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5e66:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d5e68:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5e6a:	7365      	strb	r5, [r4, #13]
}
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	bd38      	pop	{r3, r4, r5, pc}

000d5e70 <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d5e70:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d5e72:	690b      	ldr	r3, [r1, #16]
   d5e74:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5e76:	f101 0210 	add.w	r2, r1, #16
   d5e7a:	4603      	mov	r3, r0
   d5e7c:	f851 4b04 	ldr.w	r4, [r1], #4
   d5e80:	f843 4b04 	str.w	r4, [r3], #4
   d5e84:	4291      	cmp	r1, r2
   d5e86:	d1f9      	bne.n	d5e7c <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d5e88:	bd10      	pop	{r4, pc}

000d5e8a <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5e8a:	b510      	push	{r4, lr}
   d5e8c:	b086      	sub	sp, #24
   d5e8e:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d5e90:	2201      	movs	r2, #1
   d5e92:	a801      	add	r0, sp, #4
   d5e94:	f7ff ffbf 	bl	d5e16 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5e98:	a901      	add	r1, sp, #4
   d5e9a:	4620      	mov	r0, r4
   d5e9c:	f7ff ffe8 	bl	d5e70 <_ZN8particle7BleUuidaSERKS0_>
}
   d5ea0:	b006      	add	sp, #24
   d5ea2:	bd10      	pop	{r4, pc}

000d5ea4 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d5ea4:	b510      	push	{r4, lr}
   d5ea6:	b086      	sub	sp, #24
   d5ea8:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d5eaa:	a801      	add	r0, sp, #4
   d5eac:	f7ff ffd4 	bl	d5e58 <_ZN8particle7BleUuidC1Et>
   d5eb0:	a901      	add	r1, sp, #4
   d5eb2:	4620      	mov	r0, r4
   d5eb4:	f7ff ffdc 	bl	d5e70 <_ZN8particle7BleUuidaSERKS0_>
}
   d5eb8:	b006      	add	sp, #24
   d5eba:	bd10      	pop	{r4, pc}

000d5ebc <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d5ebc:	b510      	push	{r4, lr}
   d5ebe:	b086      	sub	sp, #24
   d5ec0:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d5ec2:	a801      	add	r0, sp, #4
   d5ec4:	f7ff ff76 	bl	d5db4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d5ec8:	a901      	add	r1, sp, #4
   d5eca:	4620      	mov	r0, r4
   d5ecc:	f7ff ffd0 	bl	d5e70 <_ZN8particle7BleUuidaSERKS0_>
}
   d5ed0:	b006      	add	sp, #24
   d5ed2:	bd10      	pop	{r4, pc}

000d5ed4 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5ed4:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5ed6:	6902      	ldr	r2, [r0, #16]
   d5ed8:	690b      	ldr	r3, [r1, #16]
   d5eda:	429a      	cmp	r2, r3
   d5edc:	d106      	bne.n	d5eec <_ZNK8particle7BleUuideqERKS0_+0x18>
   d5ede:	2210      	movs	r2, #16
   d5ee0:	f003 fc80 	bl	d97e4 <memcmp>
   d5ee4:	fab0 f080 	clz	r0, r0
   d5ee8:	0940      	lsrs	r0, r0, #5
   d5eea:	bd08      	pop	{r3, pc}
   d5eec:	2000      	movs	r0, #0
}
   d5eee:	bd08      	pop	{r3, pc}

000d5ef0 <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d5ef0:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5ef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d5ef4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5ef6:	4b31      	ldr	r3, [pc, #196]	; (d5fbc <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5ef8:	460e      	mov	r6, r1
   d5efa:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5efc:	4602      	mov	r2, r0
   d5efe:	f103 0110 	add.w	r1, r3, #16
   d5f02:	f853 0b04 	ldr.w	r0, [r3], #4
   d5f06:	f842 0b04 	str.w	r0, [r2], #4
   d5f0a:	428b      	cmp	r3, r1
   d5f0c:	d1f9      	bne.n	d5f02 <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d5f0e:	2e00      	cmp	r6, #0
   d5f10:	d051      	beq.n	d5fb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5f12:	2124      	movs	r1, #36	; 0x24
   d5f14:	4630      	mov	r0, r6
   d5f16:	f003 fd12 	bl	d993e <strnlen>
   d5f1a:	2804      	cmp	r0, #4
   d5f1c:	d010      	beq.n	d5f40 <_ZN8particle7BleUuid9constructEPKc+0x50>
   d5f1e:	2700      	movs	r7, #0
   d5f20:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5f22:	2124      	movs	r1, #36	; 0x24
   d5f24:	4630      	mov	r0, r6
   d5f26:	f003 fd0a 	bl	d993e <strnlen>
   d5f2a:	42b8      	cmp	r0, r7
   d5f2c:	d901      	bls.n	d5f32 <_ZN8particle7BleUuid9constructEPKc+0x42>
   d5f2e:	bb44      	cbnz	r4, d5f82 <_ZN8particle7BleUuid9constructEPKc+0x92>
   d5f30:	e041      	b.n	d5fb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d5f32:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d5f34:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5f36:	42a5      	cmp	r5, r4
   d5f38:	d03d      	beq.n	d5fb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d5f3a:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d5f3e:	e7fa      	b.n	d5f36 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5f40:	7830      	ldrb	r0, [r6, #0]
   d5f42:	f7ff fe77 	bl	d5c34 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5f46:	1e04      	subs	r4, r0, #0
   d5f48:	db18      	blt.n	d5f7c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5f4a:	7870      	ldrb	r0, [r6, #1]
   d5f4c:	f7ff fe72 	bl	d5c34 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5f50:	2800      	cmp	r0, #0
   d5f52:	db13      	blt.n	d5f7c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5f54:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5f58:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5f5c:	78b0      	ldrb	r0, [r6, #2]
   d5f5e:	f7ff fe69 	bl	d5c34 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5f62:	1e04      	subs	r4, r0, #0
   d5f64:	db0a      	blt.n	d5f7c <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5f66:	78f0      	ldrb	r0, [r6, #3]
   d5f68:	f7ff fe64 	bl	d5c34 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5f6c:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5f6e:	bfa1      	itttt	ge
   d5f70:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d5f74:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d5f78:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d5f7a:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d5f7c:	2300      	movs	r3, #0
   d5f7e:	612b      	str	r3, [r5, #16]
   d5f80:	e019      	b.n	d5fb6 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d5f82:	5df0      	ldrb	r0, [r6, r7]
   d5f84:	f7ff fe56 	bl	d5c34 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5f88:	0603      	lsls	r3, r0, #24
   d5f8a:	d412      	bmi.n	d5fb2 <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d5f8c:	3c01      	subs	r4, #1
   d5f8e:	0100      	lsls	r0, r0, #4
   d5f90:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5f92:	2124      	movs	r1, #36	; 0x24
   d5f94:	4630      	mov	r0, r6
   d5f96:	f003 fcd2 	bl	d993e <strnlen>
   d5f9a:	3701      	adds	r7, #1
   d5f9c:	4287      	cmp	r7, r0
   d5f9e:	d208      	bcs.n	d5fb2 <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d5fa0:	5df0      	ldrb	r0, [r6, r7]
   d5fa2:	f7ff fe47 	bl	d5c34 <_ZN8particle11hexToNibbleEc>
   d5fa6:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5fa8:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5faa:	bfa2      	ittt	ge
   d5fac:	5d2b      	ldrbge	r3, [r5, r4]
   d5fae:	4318      	orrge	r0, r3
   d5fb0:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5fb2:	3701      	adds	r7, #1
   d5fb4:	e7b5      	b.n	d5f22 <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d5fb6:	b003      	add	sp, #12
   d5fb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5fba:	bf00      	nop
   d5fbc:	000dab8c 	.word	0x000dab8c

000d5fc0 <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d5fc0:	b538      	push	{r3, r4, r5, lr}
   d5fc2:	4604      	mov	r4, r0
   d5fc4:	460d      	mov	r5, r1
        : BleUuid() {
   d5fc6:	f7ff fee5 	bl	d5d94 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5fca:	4620      	mov	r0, r4
   d5fcc:	4629      	mov	r1, r5
   d5fce:	f7ff ff8f 	bl	d5ef0 <_ZN8particle7BleUuid9constructEPKc>
}
   d5fd2:	4620      	mov	r0, r4
   d5fd4:	bd38      	pop	{r3, r4, r5, pc}

000d5fd6 <_ZNK8particle7BleUuid11toBigEndianEPh>:
        uuid128_[len - 1] = 0x00;
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d5fd6:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5fd8:	230f      	movs	r3, #15
        buf[i] = uuid128_[j];
   d5fda:	5cc2      	ldrb	r2, [r0, r3]
   d5fdc:	f801 2f01 	strb.w	r2, [r1, #1]!
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5fe0:	3b01      	subs	r3, #1
   d5fe2:	b2db      	uxtb	r3, r3
   d5fe4:	2bff      	cmp	r3, #255	; 0xff
   d5fe6:	d1f8      	bne.n	d5fda <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid128_[j];
    }
}
   d5fe8:	4770      	bx	lr

000d5fea <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d5fea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5fee:	4698      	mov	r8, r3
   d5ff0:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d5ff2:	460d      	mov	r5, r1
   d5ff4:	2900      	cmp	r1, #0
   d5ff6:	d057      	beq.n	d60a8 <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
   d5ff8:	2a00      	cmp	r2, #0
   d5ffa:	d057      	beq.n	d60ac <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d5ffc:	6906      	ldr	r6, [r0, #16]
   d5ffe:	1e54      	subs	r4, r2, #1
   d6000:	b9ae      	cbnz	r6, d602e <_ZNK8particle7BleUuid8toStringEPcjb+0x44>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d6002:	7b02      	ldrb	r2, [r0, #12]
   d6004:	7b43      	ldrb	r3, [r0, #13]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d6006:	9605      	str	r6, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d6008:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d600c:	2102      	movs	r1, #2
   d600e:	aa05      	add	r2, sp, #20
   d6010:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d6012:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d6016:	f7ff fded 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
   d601a:	2c04      	cmp	r4, #4
   d601c:	bf28      	it	cs
   d601e:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d6020:	4622      	mov	r2, r4
   d6022:	a905      	add	r1, sp, #20
   d6024:	4628      	mov	r0, r5
   d6026:	f003 fbec 	bl	d9802 <memcpy>
        buf[len++] = '\0';
   d602a:	552e      	strb	r6, [r5, r4]
   d602c:	e03a      	b.n	d60a4 <_ZNK8particle7BleUuid8toStringEPcjb+0xba>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d602e:	a901      	add	r1, sp, #4
   d6030:	f7ff ffd1 	bl	d5fd6 <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d6034:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d6036:	f1b8 0f00 	cmp.w	r8, #0
   d603a:	d002      	beq.n	d6042 <_ZNK8particle7BleUuid8toStringEPcjb+0x58>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d603c:	2110      	movs	r1, #16
   d603e:	a801      	add	r0, sp, #4
   d6040:	e024      	b.n	d608c <_ZNK8particle7BleUuid8toStringEPcjb+0xa2>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d6042:	2104      	movs	r1, #4
   d6044:	eb0d 0001 	add.w	r0, sp, r1
   d6048:	f7ff fdd4 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d604c:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d604e:	f10d 021d 	add.w	r2, sp, #29
   d6052:	2102      	movs	r1, #2
   d6054:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d6056:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d605a:	f7ff fdcb 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d605e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d6062:	2102      	movs	r1, #2
   d6064:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d6068:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d606c:	f7ff fdc2 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d6070:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d6074:	2102      	movs	r1, #2
   d6076:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d6078:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d607c:	f7ff fdba 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d6080:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d6084:	aa0b      	add	r2, sp, #44	; 0x2c
   d6086:	2106      	movs	r1, #6
   d6088:	f10d 000e 	add.w	r0, sp, #14
   d608c:	f7ff fdb2 	bl	d5bf4 <_ZL12bytes2hexbufPKhjPc>
   d6090:	2c24      	cmp	r4, #36	; 0x24
   d6092:	bf28      	it	cs
   d6094:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d6096:	4622      	mov	r2, r4
   d6098:	a905      	add	r1, sp, #20
   d609a:	4628      	mov	r0, r5
   d609c:	f003 fbb1 	bl	d9802 <memcpy>
    buf[len++] = '\0';
   d60a0:	2300      	movs	r3, #0
   d60a2:	552b      	strb	r3, [r5, r4]
   d60a4:	1c60      	adds	r0, r4, #1
   d60a6:	e002      	b.n	d60ae <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d60a8:	4608      	mov	r0, r1
   d60aa:	e000      	b.n	d60ae <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
   d60ac:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d60ae:	b00e      	add	sp, #56	; 0x38
   d60b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60b4 <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d60b4:	b510      	push	{r4, lr}
   d60b6:	b08a      	sub	sp, #40	; 0x28
   d60b8:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d60ba:	2300      	movs	r3, #0
   d60bc:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d60be:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d60c0:	4669      	mov	r1, sp
   d60c2:	f7ff ff92 	bl	d5fea <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d60c6:	4669      	mov	r1, sp
   d60c8:	4620      	mov	r0, r4
   d60ca:	f7ff fc60 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d60ce:	4620      	mov	r0, r4
   d60d0:	b00a      	add	sp, #40	; 0x28
   d60d2:	bd10      	pop	{r4, pc}

000d60d4 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d60d4:	b538      	push	{r3, r4, r5, lr}
   d60d6:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d60d8:	b101      	cbz	r1, d60dc <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d60da:	b912      	cbnz	r2, d60e2 <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d60dc:	2000      	movs	r0, #0
   d60de:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d60e0:	bd38      	pop	{r3, r4, r5, pc}
   d60e2:	2a1f      	cmp	r2, #31
   d60e4:	bf28      	it	cs
   d60e6:	221f      	movcs	r2, #31
   d60e8:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d60ea:	f003 fb8a 	bl	d9802 <memcpy>
    selfLen_ = len;
   d60ee:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d60f0:	4620      	mov	r0, r4
}
   d60f2:	bd38      	pop	{r3, r4, r5, pc}

000d60f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d60f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d60f6:	b18b      	cbz	r3, d611c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d60f8:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d60fa:	1ce5      	adds	r5, r4, #3
   d60fc:	428d      	cmp	r5, r1
   d60fe:	d80f      	bhi.n	d6120 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6100:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d6102:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d6104:	5d87      	ldrb	r7, [r0, r6]
   d6106:	4297      	cmp	r7, r2
   d6108:	d105      	bne.n	d6116 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d610a:	442e      	add	r6, r5
   d610c:	42b1      	cmp	r1, r6
   d610e:	d307      	bcc.n	d6120 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d6110:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d6112:	1c68      	adds	r0, r5, #1
                return adsLen;
   d6114:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d6116:	3501      	adds	r5, #1
   d6118:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d611a:	e7ee      	b.n	d60fa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d611c:	4618      	mov	r0, r3
   d611e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6120:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6122:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6124 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d6128:	4604      	mov	r4, r0
   d612a:	460e      	mov	r6, r1
   d612c:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d612e:	4617      	mov	r7, r2
   d6130:	2a00      	cmp	r2, #0
   d6132:	d03a      	beq.n	d61aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d6134:	460a      	mov	r2, r1
   d6136:	ab01      	add	r3, sp, #4
   d6138:	6a01      	ldr	r1, [r0, #32]
   d613a:	f7ff ffdb 	bl	d60f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d613e:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d6142:	6a22      	ldr	r2, [r4, #32]
   d6144:	bb03      	cbnz	r3, d6188 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d6146:	b1f8      	cbz	r0, d6188 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6148:	1c96      	adds	r6, r2, #2
   d614a:	442e      	add	r6, r5
   d614c:	1a36      	subs	r6, r6, r0
   d614e:	2e1f      	cmp	r6, #31
   d6150:	d82b      	bhi.n	d61aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6152:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d6156:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d615a:	ebc8 0202 	rsb	r2, r8, r2
   d615e:	1a12      	subs	r2, r2, r0
   d6160:	eb00 0108 	add.w	r1, r0, r8
   d6164:	eb05 0009 	add.w	r0, r5, r9
   d6168:	b292      	uxth	r2, r2
   d616a:	4421      	add	r1, r4
   d616c:	4420      	add	r0, r4
   d616e:	f003 fb53 	bl	d9818 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d6172:	1c6b      	adds	r3, r5, #1
   d6174:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d6178:	462a      	mov	r2, r5
   d617a:	4639      	mov	r1, r7
   d617c:	eb04 0009 	add.w	r0, r4, r9
   d6180:	f003 fb3f 	bl	d9802 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d6184:	6226      	str	r6, [r4, #32]
   d6186:	e010      	b.n	d61aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d6188:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d618a:	182b      	adds	r3, r5, r0
   d618c:	2b1f      	cmp	r3, #31
   d618e:	d80c      	bhi.n	d61aa <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d6190:	1c6b      	adds	r3, r5, #1
   d6192:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d6194:	4422      	add	r2, r4
   d6196:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d6198:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d619a:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d619c:	4420      	add	r0, r4
   d619e:	462a      	mov	r2, r5
   d61a0:	f003 fb2f 	bl	d9802 <memcpy>
        selfLen_ += len;
   d61a4:	6a22      	ldr	r2, [r4, #32]
   d61a6:	442a      	add	r2, r5
   d61a8:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d61aa:	6a20      	ldr	r0, [r4, #32]
}
   d61ac:	b003      	add	sp, #12
   d61ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d61b2 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d61b2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d61b4:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d61b6:	4603      	mov	r3, r0
   d61b8:	f100 021f 	add.w	r2, r0, #31
   d61bc:	2000      	movs	r0, #0
   d61be:	f803 0b01 	strb.w	r0, [r3], #1
   d61c2:	4293      	cmp	r3, r2
   d61c4:	f04f 0100 	mov.w	r1, #0
   d61c8:	d1f9      	bne.n	d61be <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d61ca:	aa04      	add	r2, sp, #16
   d61cc:	2306      	movs	r3, #6
   d61ce:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d61d2:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d61d4:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d61d6:	9100      	str	r1, [sp, #0]
   d61d8:	4620      	mov	r0, r4
   d61da:	4619      	mov	r1, r3
   d61dc:	f7ff ffa2 	bl	d6124 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d61e0:	4620      	mov	r0, r4
   d61e2:	b004      	add	sp, #16
   d61e4:	bd10      	pop	{r4, pc}

000d61e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d61e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d61ea:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d61ec:	b085      	sub	sp, #20
   d61ee:	4606      	mov	r6, r0
   d61f0:	4689      	mov	r9, r1
   d61f2:	4617      	mov	r7, r2
   d61f4:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d61f6:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d61f8:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d61fc:	6a31      	ldr	r1, [r6, #32]
   d61fe:	428d      	cmp	r5, r1
   d6200:	d22a      	bcs.n	d6258 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d6202:	ab03      	add	r3, sp, #12
   d6204:	464a      	mov	r2, r9
   d6206:	1b49      	subs	r1, r1, r5
   d6208:	1970      	adds	r0, r6, r5
   d620a:	f7ff ff73 	bl	d60f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d620e:	4683      	mov	fp, r0
   d6210:	b310      	cbz	r0, d6258 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d6212:	4554      	cmp	r4, sl
   d6214:	d220      	bcs.n	d6258 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d6216:	2804      	cmp	r0, #4
   d6218:	9903      	ldr	r1, [sp, #12]
   d621a:	d10c      	bne.n	d6236 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d621c:	4429      	add	r1, r5
   d621e:	1872      	adds	r2, r6, r1
   d6220:	1c63      	adds	r3, r4, #1
   d6222:	78d1      	ldrb	r1, [r2, #3]
   d6224:	7892      	ldrb	r2, [r2, #2]
   d6226:	9301      	str	r3, [sp, #4]
   d6228:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d622c:	fb08 7004 	mla	r0, r8, r4, r7
   d6230:	f7ff fe38 	bl	d5ea4 <_ZN8particle7BleUuidaSEt>
   d6234:	e00a      	b.n	d624c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d6236:	2812      	cmp	r0, #18
   d6238:	d10a      	bne.n	d6250 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d623a:	3102      	adds	r1, #2
   d623c:	4429      	add	r1, r5
   d623e:	1c63      	adds	r3, r4, #1
   d6240:	4431      	add	r1, r6
   d6242:	fb08 7004 	mla	r0, r8, r4, r7
   d6246:	9301      	str	r3, [sp, #4]
   d6248:	f7ff fe1f 	bl	d5e8a <_ZN8particle7BleUuidaSEPKh>
   d624c:	9b01      	ldr	r3, [sp, #4]
   d624e:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d6250:	9b03      	ldr	r3, [sp, #12]
   d6252:	445b      	add	r3, fp
   d6254:	441d      	add	r5, r3
   d6256:	e7d1      	b.n	d61fc <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d6258:	4620      	mov	r0, r4
   d625a:	b005      	add	sp, #20
   d625c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d6260 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d6260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d6264:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d6266:	460d      	mov	r5, r1
   d6268:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d626a:	460a      	mov	r2, r1
   d626c:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d626e:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d6270:	f7ff ffb9 	bl	d61e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d6274:	f04f 0814 	mov.w	r8, #20
   d6278:	1a33      	subs	r3, r6, r0
   d627a:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d627e:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d6280:	2103      	movs	r1, #3
   d6282:	4638      	mov	r0, r7
   d6284:	f7ff ffaf 	bl	d61e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d6288:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d628a:	1b33      	subs	r3, r6, r4
   d628c:	fb08 5204 	mla	r2, r8, r4, r5
   d6290:	2106      	movs	r1, #6
   d6292:	4638      	mov	r0, r7
   d6294:	f7ff ffa7 	bl	d61e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d6298:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d629a:	1b33      	subs	r3, r6, r4
   d629c:	fb08 5204 	mla	r2, r8, r4, r5
   d62a0:	2107      	movs	r1, #7
   d62a2:	4638      	mov	r0, r7
   d62a4:	f7ff ff9f 	bl	d61e6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d62a8:	4420      	add	r0, r4
   d62aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d62b0 <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d62b0:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d62b2:	2500      	movs	r5, #0
   d62b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d62b8:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d62ba:	8043      	strh	r3, [r0, #2]
   d62bc:	220e      	movs	r2, #14
   d62be:	4629      	mov	r1, r5
   d62c0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d62c2:	7105      	strb	r5, [r0, #4]
   d62c4:	3006      	adds	r0, #6
   d62c6:	f003 fac2 	bl	d984e <memset>
   d62ca:	f104 0014 	add.w	r0, r4, #20
   d62ce:	f7ff fd61 	bl	d5d94 <_ZN8particle7BleUuidC1Ev>
   d62d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d62d6:	f7ff fd5d 	bl	d5d94 <_ZN8particle7BleUuidC1Ev>
   d62da:	4904      	ldr	r1, [pc, #16]	; (d62ec <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d62dc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d62e0:	f7ff fb55 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
   d62e4:	64e5      	str	r5, [r4, #76]	; 0x4c
   d62e6:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d62e8:	4620      	mov	r0, r4
   d62ea:	bd38      	pop	{r3, r4, r5, pc}
   d62ec:	000dac70 	.word	0x000dac70

000d62f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d62f0:	b510      	push	{r4, lr}
   d62f2:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d62f4:	69c2      	ldr	r2, [r0, #28]
   d62f6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d62fa:	4293      	cmp	r3, r2
   d62fc:	4618      	mov	r0, r3
   d62fe:	d006      	beq.n	d630e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6300:	6804      	ldr	r4, [r0, #0]
   d6302:	8824      	ldrh	r4, [r4, #0]
   d6304:	428c      	cmp	r4, r1
   d6306:	f103 0308 	add.w	r3, r3, #8
   d630a:	d1f6      	bne.n	d62fa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d630c:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d630e:	2000      	movs	r0, #0
    }
   d6310:	bd10      	pop	{r4, pc}
	...

000d6314 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d6314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6318:	4680      	mov	r8, r0
   d631a:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d631c:	460e      	mov	r6, r1
   d631e:	b369      	cbz	r1, d637c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d6320:	b362      	cbz	r2, d637c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d6322:	2af4      	cmp	r2, #244	; 0xf4
   d6324:	6805      	ldr	r5, [r0, #0]
   d6326:	bf28      	it	cs
   d6328:	22f4      	movcs	r2, #244	; 0xf4
   d632a:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d632c:	782a      	ldrb	r2, [r5, #0]
   d632e:	b1a2      	cbz	r2, d635a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d6330:	792b      	ldrb	r3, [r5, #4]
   d6332:	0798      	lsls	r0, r3, #30
   d6334:	d507      	bpl.n	d6346 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d6336:	2300      	movs	r3, #0
   d6338:	4622      	mov	r2, r4
   d633a:	89a8      	ldrh	r0, [r5, #12]
   d633c:	f7fe ffe0 	bl	d5300 <hal_ble_gatt_server_set_characteristic_value>
   d6340:	2800      	cmp	r0, #0
   d6342:	da02      	bge.n	d634a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d6344:	e043      	b.n	d63ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d6346:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d634a:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d634e:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d6350:	06da      	lsls	r2, r3, #27
   d6352:	d518      	bpl.n	d6386 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d6354:	2f01      	cmp	r7, #1
   d6356:	d123      	bne.n	d63a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d6358:	e015      	b.n	d6386 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d635a:	8868      	ldrh	r0, [r5, #2]
   d635c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6360:	4298      	cmp	r0, r3
   d6362:	d00d      	beq.n	d6380 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d6364:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d6366:	0759      	lsls	r1, r3, #29
   d6368:	d523      	bpl.n	d63b2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d636a:	2f01      	cmp	r7, #1
   d636c:	d021      	beq.n	d63b2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d636e:	89a9      	ldrh	r1, [r5, #12]
   d6370:	9200      	str	r2, [sp, #0]
   d6372:	4623      	mov	r3, r4
   d6374:	4632      	mov	r2, r6
   d6376:	f7fe ffeb 	bl	d5350 <hal_ble_gatt_client_write_without_response>
   d637a:	e028      	b.n	d63ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d637c:	4815      	ldr	r0, [pc, #84]	; (d63d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d637e:	e026      	b.n	d63ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d6380:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6384:	e023      	b.n	d63ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d6386:	069a      	lsls	r2, r3, #26
   d6388:	d521      	bpl.n	d63ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d638a:	2f02      	cmp	r7, #2
   d638c:	d01f      	beq.n	d63ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d638e:	89a8      	ldrh	r0, [r5, #12]
   d6390:	2300      	movs	r3, #0
   d6392:	4622      	mov	r2, r4
   d6394:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d6396:	b002      	add	sp, #8
   d6398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d639c:	f7ff b814 	b.w	d53c8 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d63a0:	89a8      	ldrh	r0, [r5, #12]
   d63a2:	2300      	movs	r3, #0
   d63a4:	4622      	mov	r2, r4
   d63a6:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d63a8:	b002      	add	sp, #8
   d63aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d63ae:	f7ff b801 	b.w	d53b4 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d63b2:	071b      	lsls	r3, r3, #28
   d63b4:	d501      	bpl.n	d63ba <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d63b6:	2f02      	cmp	r7, #2
   d63b8:	d102      	bne.n	d63c0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d63ba:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d63be:	e006      	b.n	d63ce <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d63c0:	2300      	movs	r3, #0
   d63c2:	89a9      	ldrh	r1, [r5, #12]
   d63c4:	9300      	str	r3, [sp, #0]
   d63c6:	4632      	mov	r2, r6
   d63c8:	4623      	mov	r3, r4
   d63ca:	f7fe ffb7 	bl	d533c <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d63ce:	b002      	add	sp, #8
   d63d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d63d4:	fffffef2 	.word	0xfffffef2

000d63d8 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d63d8:	b570      	push	{r4, r5, r6, lr}
   d63da:	6804      	ldr	r4, [r0, #0]
   d63dc:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d63de:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d63e0:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d63e2:	2900      	cmp	r1, #0
   d63e4:	d12e      	bne.n	d6444 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d63e6:	8862      	ldrh	r2, [r4, #2]
   d63e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d63ec:	429a      	cmp	r2, r3
   d63ee:	d029      	beq.n	d6444 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d63f0:	8a23      	ldrh	r3, [r4, #16]
   d63f2:	b353      	cbz	r3, d644a <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d63f4:	2518      	movs	r5, #24
   d63f6:	462a      	mov	r2, r5
   d63f8:	4668      	mov	r0, sp
   d63fa:	f003 fa28 	bl	d984e <memset>
    config.version = BLE_API_VERSION;
   d63fe:	2301      	movs	r3, #1
   d6400:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d6404:	4b13      	ldr	r3, [pc, #76]	; (d6454 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d6406:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d640a:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d640c:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d640e:	8863      	ldrh	r3, [r4, #2]
   d6410:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d6414:	8a23      	ldrh	r3, [r4, #16]
   d6416:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d641a:	89a3      	ldrh	r3, [r4, #12]
   d641c:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d6420:	b15e      	cbz	r6, d643a <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d6422:	7923      	ldrb	r3, [r4, #4]
   d6424:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d6426:	bf44      	itt	mi
   d6428:	2302      	movmi	r3, #2
   d642a:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d642c:	7923      	ldrb	r3, [r4, #4]
   d642e:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d6430:	bf42      	ittt	mi
   d6432:	9b05      	ldrmi	r3, [sp, #20]
   d6434:	f043 0301 	orrmi.w	r3, r3, #1
   d6438:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d643a:	2100      	movs	r1, #0
   d643c:	4668      	mov	r0, sp
   d643e:	f7fe ffaf 	bl	d53a0 <hal_ble_gatt_client_configure_cccd>
   d6442:	e004      	b.n	d644e <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d6444:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d6448:	e001      	b.n	d644e <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d644a:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d644e:	b006      	add	sp, #24
   d6450:	bd70      	pop	{r4, r5, r6, pc}
   d6452:	bf00      	nop
   d6454:	000d6631 	.word	0x000d6631

000d6458 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d6458:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d645a:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d645c:	651a      	str	r2, [r3, #80]	; 0x50
   d645e:	4770      	bx	lr

000d6460 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d6460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6464:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d6466:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d6468:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d646a:	9302      	str	r3, [sp, #8]
   d646c:	2500      	movs	r5, #0
   d646e:	4b2e      	ldr	r3, [pc, #184]	; (d6528 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d6470:	9300      	str	r3, [sp, #0]
   d6472:	aa02      	add	r2, sp, #8
   d6474:	462b      	mov	r3, r5
   d6476:	492d      	ldr	r1, [pc, #180]	; (d652c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d6478:	9503      	str	r5, [sp, #12]
   d647a:	2001      	movs	r0, #1
   d647c:	f7ff f8ee 	bl	d565c <log_message>
   d6480:	6833      	ldr	r3, [r6, #0]
   d6482:	68dc      	ldr	r4, [r3, #12]
   d6484:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d6486:	f04f 081c 	mov.w	r8, #28
   d648a:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d648e:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d6490:	f1a4 0308 	sub.w	r3, r4, #8
   d6494:	429f      	cmp	r7, r3
   d6496:	6832      	ldr	r2, [r6, #0]
   d6498:	d017      	beq.n	d64ca <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d649a:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d649e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d64a2:	8a9b      	ldrh	r3, [r3, #20]
   d64a4:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d64a8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d64ac:	8adb      	ldrh	r3, [r3, #22]
   d64ae:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d64b2:	8810      	ldrh	r0, [r2, #0]
   d64b4:	9500      	str	r5, [sp, #0]
   d64b6:	4633      	mov	r3, r6
   d64b8:	4a1d      	ldr	r2, [pc, #116]	; (d6530 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d64ba:	a902      	add	r1, sp, #8
   d64bc:	f7fe ff34 	bl	d5328 <hal_ble_gatt_client_discover_characteristics>
   d64c0:	2800      	cmp	r0, #0
   d64c2:	f104 0408 	add.w	r4, r4, #8
   d64c6:	dae3      	bge.n	d6490 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d64c8:	e02a      	b.n	d6520 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d64ca:	6994      	ldr	r4, [r2, #24]
   d64cc:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d64ce:	2700      	movs	r7, #0
   d64d0:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d64d4:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d64d6:	f1a4 0308 	sub.w	r3, r4, #8
   d64da:	429d      	cmp	r5, r3
   d64dc:	d01f      	beq.n	d651e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d64de:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d64e2:	89db      	ldrh	r3, [r3, #14]
   d64e4:	b1cb      	cbz	r3, d651a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d64e6:	2214      	movs	r2, #20
   d64e8:	2100      	movs	r1, #0
   d64ea:	a802      	add	r0, sp, #8
   d64ec:	f003 f9af 	bl	d984e <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d64f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d64f4:	89d9      	ldrh	r1, [r3, #14]
   d64f6:	6833      	ldr	r3, [r6, #0]
   d64f8:	aa02      	add	r2, sp, #8
   d64fa:	8818      	ldrh	r0, [r3, #0]
   d64fc:	9700      	str	r7, [sp, #0]
   d64fe:	2313      	movs	r3, #19
   d6500:	f7fe ff30 	bl	d5364 <hal_ble_gatt_client_read>
                if (len > 0) {
   d6504:	b148      	cbz	r0, d651a <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d6506:	ab0a      	add	r3, sp, #40	; 0x28
   d6508:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d650a:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d650c:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d6510:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d6514:	303c      	adds	r0, #60	; 0x3c
   d6516:	f7ff fa67 	bl	d59e8 <_ZN6StringaSEPKc>
   d651a:	3408      	adds	r4, #8
   d651c:	e7db      	b.n	d64d6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d651e:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d6520:	b00a      	add	sp, #40	; 0x28
   d6522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6526:	bf00      	nop
   d6528:	000daa13 	.word	0x000daa13
   d652c:	000da9ec 	.word	0x000da9ec
   d6530:	000d7139 	.word	0x000d7139

000d6534 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d6534:	6803      	ldr	r3, [r0, #0]
   d6536:	8818      	ldrh	r0, [r3, #0]
}
   d6538:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d653c:	1ac0      	subs	r0, r0, r3
   d653e:	bf18      	it	ne
   d6540:	2001      	movne	r0, #1
   d6542:	4770      	bx	lr

000d6544 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d6544:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d6546:	680b      	ldr	r3, [r1, #0]
   d6548:	f8c2 3002 	str.w	r3, [r2, #2]
   d654c:	684b      	ldr	r3, [r1, #4]
   d654e:	f8c2 3006 	str.w	r3, [r2, #6]
   d6552:	4770      	bx	lr

000d6554 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d6554:	b510      	push	{r4, lr}
    return impl()->address();
   d6556:	680a      	ldr	r2, [r1, #0]
   d6558:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d655c:	6003      	str	r3, [r0, #0]
   d655e:	6853      	ldr	r3, [r2, #4]
   d6560:	6043      	str	r3, [r0, #4]
}
   d6562:	bd10      	pop	{r4, pc}

000d6564 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6566:	6802      	ldr	r2, [r0, #0]
   d6568:	680b      	ldr	r3, [r1, #0]
   d656a:	8812      	ldrh	r2, [r2, #0]
   d656c:	881b      	ldrh	r3, [r3, #0]
   d656e:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d6570:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d6572:	d10c      	bne.n	d658e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d6574:	4601      	mov	r1, r0
   d6576:	4668      	mov	r0, sp
   d6578:	f7ff ffec 	bl	d6554 <_ZNK8particle13BlePeerDevice7addressEv>
   d657c:	4621      	mov	r1, r4
   d657e:	a802      	add	r0, sp, #8
   d6580:	f7ff ffe8 	bl	d6554 <_ZNK8particle13BlePeerDevice7addressEv>
   d6584:	a902      	add	r1, sp, #8
   d6586:	4668      	mov	r0, sp
   d6588:	f7ff fb88 	bl	d5c9c <_ZNK8particle10BleAddresseqERKS0_>
   d658c:	b900      	cbnz	r0, d6590 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d658e:	2000      	movs	r0, #0
}
   d6590:	b004      	add	sp, #16
   d6592:	bd10      	pop	{r4, pc}

000d6594 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6594:	b510      	push	{r4, lr}
   d6596:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d6598:	2034      	movs	r0, #52	; 0x34
   d659a:	f7fd fd7c 	bl	d4096 <_Znwj>
   d659e:	4601      	mov	r1, r0
   d65a0:	b168      	cbz	r0, d65be <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d65a2:	2300      	movs	r3, #0
   d65a4:	6003      	str	r3, [r0, #0]
   d65a6:	6043      	str	r3, [r0, #4]
   d65a8:	6083      	str	r3, [r0, #8]
   d65aa:	60c3      	str	r3, [r0, #12]
   d65ac:	6103      	str	r3, [r0, #16]
   d65ae:	6143      	str	r3, [r0, #20]
   d65b0:	6183      	str	r3, [r0, #24]
   d65b2:	61c3      	str	r3, [r0, #28]
   d65b4:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d65b6:	6243      	str	r3, [r0, #36]	; 0x24
   d65b8:	6283      	str	r3, [r0, #40]	; 0x28
   d65ba:	62c3      	str	r3, [r0, #44]	; 0x2c
   d65bc:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d65be:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d65c0:	b919      	cbnz	r1, d65ca <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d65c2:	4a0a      	ldr	r2, [pc, #40]	; (d65ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d65c4:	200a      	movs	r0, #10
   d65c6:	f7ff f841 	bl	d564c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d65ca:	2000      	movs	r0, #0
   d65cc:	f7fe fe74 	bl	d52b8 <hal_ble_stack_init>
   d65d0:	b120      	cbz	r0, d65dc <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d65d2:	4a06      	ldr	r2, [pc, #24]	; (d65ec <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d65d4:	2100      	movs	r1, #0
   d65d6:	200a      	movs	r0, #10
   d65d8:	f7ff f838 	bl	d564c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d65dc:	2200      	movs	r2, #0
   d65de:	6821      	ldr	r1, [r4, #0]
   d65e0:	4803      	ldr	r0, [pc, #12]	; (d65f0 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d65e2:	f7fe fed3 	bl	d538c <hal_ble_set_callback_on_periph_link_events>
}
   d65e6:	4620      	mov	r0, r4
   d65e8:	bd10      	pop	{r4, pc}
   d65ea:	bf00      	nop
   d65ec:	000d5289 	.word	0x000d5289
   d65f0:	000d6a65 	.word	0x000d6a65

000d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d65f4:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d65f6:	4c0a      	ldr	r4, [pc, #40]	; (d6620 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d65f8:	6823      	ldr	r3, [r4, #0]
   d65fa:	07db      	lsls	r3, r3, #31
   d65fc:	d40e      	bmi.n	d661c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d65fe:	4620      	mov	r0, r4
   d6600:	f7fd fd5a 	bl	d40b8 <__cxa_guard_acquire>
   d6604:	b150      	cbz	r0, d661c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d6606:	4807      	ldr	r0, [pc, #28]	; (d6624 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6608:	f7ff ffc4 	bl	d6594 <_ZN8particle14BleLocalDeviceC1Ev>
   d660c:	4620      	mov	r0, r4
   d660e:	f7fd fd58 	bl	d40c2 <__cxa_guard_release>
   d6612:	4a05      	ldr	r2, [pc, #20]	; (d6628 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d6614:	4905      	ldr	r1, [pc, #20]	; (d662c <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d6616:	4803      	ldr	r0, [pc, #12]	; (d6624 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6618:	f002 fe34 	bl	d9284 <__aeabi_atexit>
    return instance;
}
   d661c:	4801      	ldr	r0, [pc, #4]	; (d6624 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d661e:	bd10      	pop	{r4, pc}
   d6620:	2003e380 	.word	0x2003e380
   d6624:	2003e37c 	.word	0x2003e37c
   d6628:	2003d848 	.word	0x2003d848
   d662c:	000d67cd 	.word	0x000d67cd

000d6630 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6630:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d6632:	6803      	ldr	r3, [r0, #0]
   d6634:	3b09      	subs	r3, #9
   d6636:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d6638:	b08a      	sub	sp, #40	; 0x28
   d663a:	4604      	mov	r4, r0
   d663c:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d663e:	d819      	bhi.n	d6674 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d6640:	f7ff ffd8 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6644:	88a1      	ldrh	r1, [r4, #4]
   d6646:	6800      	ldr	r0, [r0, #0]
   d6648:	f7ff fe52 	bl	d62f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d664c:	4602      	mov	r2, r0
   d664e:	b958      	cbnz	r0, d6668 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d6650:	2320      	movs	r3, #32
   d6652:	9302      	str	r3, [sp, #8]
   d6654:	4b08      	ldr	r3, [pc, #32]	; (d6678 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d6656:	9003      	str	r0, [sp, #12]
   d6658:	9300      	str	r3, [sp, #0]
   d665a:	aa02      	add	r2, sp, #8
   d665c:	4603      	mov	r3, r0
   d665e:	4907      	ldr	r1, [pc, #28]	; (d667c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d6660:	2032      	movs	r0, #50	; 0x32
   d6662:	f7fe fffb 	bl	d565c <log_message>
   d6666:	e005      	b.n	d6674 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d6668:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d666a:	b11d      	cbz	r5, d6674 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d666c:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d666e:	68e1      	ldr	r1, [r4, #12]
   d6670:	6920      	ldr	r0, [r4, #16]
   d6672:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d6674:	b00a      	add	sp, #40	; 0x28
   d6676:	bd70      	pop	{r4, r5, r6, pc}
   d6678:	000daa36 	.word	0x000daa36
   d667c:	000da9ec 	.word	0x000da9ec

000d6680 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6680:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d6682:	a801      	add	r0, sp, #4
   d6684:	f7ff faec 	bl	d5c60 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d6688:	2000      	movs	r0, #0
   d668a:	f7fe fe15 	bl	d52b8 <hal_ble_stack_init>
   d668e:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d6690:	a801      	add	r0, sp, #4
   d6692:	f7ff faf3 	bl	d5c7c <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d6696:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d669a:	b002      	add	sp, #8
   d669c:	bd10      	pop	{r4, pc}
	...

000d66a0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d66a0:	b530      	push	{r4, r5, lr}
   d66a2:	b08b      	sub	sp, #44	; 0x2c
   d66a4:	460d      	mov	r5, r1
    WiringBleLock lk;
   d66a6:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d66a8:	4614      	mov	r4, r2
    WiringBleLock lk;
   d66aa:	f7ff fad9 	bl	d5c60 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d66ae:	b1b5      	cbz	r5, d66de <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d66b0:	b1ac      	cbz	r4, d66de <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d66b2:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d66b4:	a902      	add	r1, sp, #8
   d66b6:	480d      	ldr	r0, [pc, #52]	; (d66ec <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d66b8:	9406      	str	r4, [sp, #24]
   d66ba:	9202      	str	r2, [sp, #8]
   d66bc:	9203      	str	r2, [sp, #12]
   d66be:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d66c0:	9207      	str	r2, [sp, #28]
   d66c2:	9208      	str	r2, [sp, #32]
   d66c4:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d66c6:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d66c8:	f7fe fdfe 	bl	d52c8 <hal_ble_gap_start_scan>
   d66cc:	2800      	cmp	r0, #0
   d66ce:	bfb8      	it	lt
   d66d0:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d66d2:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d66d4:	bfa8      	it	ge
   d66d6:	9c07      	ldrge	r4, [sp, #28]
   d66d8:	f7ff f86c 	bl	d57b4 <free>
   d66dc:	e000      	b.n	d66e0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d66de:	4c04      	ldr	r4, [pc, #16]	; (d66f0 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d66e0:	a801      	add	r0, sp, #4
   d66e2:	f7ff facb 	bl	d5c7c <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d66e6:	4620      	mov	r0, r4
   d66e8:	b00b      	add	sp, #44	; 0x2c
   d66ea:	bd30      	pop	{r4, r5, pc}
   d66ec:	000d6bd3 	.word	0x000d6bd3
   d66f0:	fffffef2 	.word	0xfffffef2

000d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d66f4:	680b      	ldr	r3, [r1, #0]
   d66f6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d66f8:	b113      	cbz	r3, d6700 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d66fa:	685a      	ldr	r2, [r3, #4]
   d66fc:	3201      	adds	r2, #1
   d66fe:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d6700:	4770      	bx	lr

000d6702 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6702:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6704:	f851 3b04 	ldr.w	r3, [r1], #4
   d6708:	4604      	mov	r4, r0
   d670a:	f840 3b04 	str.w	r3, [r0], #4
   d670e:	f7ff fff1 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d6712:	6823      	ldr	r3, [r4, #0]
   d6714:	b90b      	cbnz	r3, d671a <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6716:	f7ff fa53 	bl	d5bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d671a:	4620      	mov	r0, r4
   d671c:	bd10      	pop	{r4, pc}

000d671e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d671e:	b510      	push	{r4, lr}
   d6720:	f851 3b04 	ldr.w	r3, [r1], #4
   d6724:	4604      	mov	r4, r0
   d6726:	f840 3b04 	str.w	r3, [r0], #4
   d672a:	f7ff ffe3 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d672e:	4620      	mov	r0, r4
   d6730:	bd10      	pop	{r4, pc}

000d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d6732:	b510      	push	{r4, lr}
   d6734:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d6736:	6800      	ldr	r0, [r0, #0]
   d6738:	b128      	cbz	r0, d6746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d673a:	6843      	ldr	r3, [r0, #4]
   d673c:	3b01      	subs	r3, #1
   d673e:	6043      	str	r3, [r0, #4]
   d6740:	b90b      	cbnz	r3, d6746 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6742:	f7ff fa47 	bl	d5bd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6746:	4620      	mov	r0, r4
   d6748:	bd10      	pop	{r4, pc}

000d674a <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d674a:	b510      	push	{r4, lr}
   d674c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d674e:	3004      	adds	r0, #4
   d6750:	f7ff ffef 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6754:	4620      	mov	r0, r4
   d6756:	bd10      	pop	{r4, pc}

000d6758 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d6758:	b510      	push	{r4, lr}
   d675a:	4604      	mov	r4, r0
   d675c:	3004      	adds	r0, #4
   d675e:	f7ff ffe8 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d6762:	4620      	mov	r0, r4
   d6764:	bd10      	pop	{r4, pc}

000d6766 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6766:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6768:	6804      	ldr	r4, [r0, #0]
   d676a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d676c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d676e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6772:	42a6      	cmp	r6, r4
   d6774:	d004      	beq.n	d6780 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6776:	1d20      	adds	r0, r4, #4
   d6778:	f7ff ffdb 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d677c:	3408      	adds	r4, #8
   d677e:	e7f8      	b.n	d6772 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6780:	6828      	ldr	r0, [r5, #0]
   d6782:	f7ff f817 	bl	d57b4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6786:	4628      	mov	r0, r5
   d6788:	bd70      	pop	{r4, r5, r6, pc}

000d678a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d678a:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d678c:	6804      	ldr	r4, [r0, #0]
   d678e:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6790:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6792:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6796:	42a6      	cmp	r6, r4
   d6798:	d004      	beq.n	d67a4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d679a:	1d20      	adds	r0, r4, #4
   d679c:	f7ff ffc9 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67a0:	3408      	adds	r4, #8
   d67a2:	e7f8      	b.n	d6796 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d67a4:	6828      	ldr	r0, [r5, #0]
   d67a6:	f7ff f805 	bl	d57b4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d67aa:	4628      	mov	r0, r5
   d67ac:	bd70      	pop	{r4, r5, r6, pc}

000d67ae <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d67ae:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d67b0:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d67b2:	f104 0018 	add.w	r0, r4, #24
   d67b6:	f7ff ffe8 	bl	d678a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d67ba:	f104 000c 	add.w	r0, r4, #12
   d67be:	f7ff ffd2 	bl	d6766 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d67c2:	4620      	mov	r0, r4
   d67c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d67c8:	f7fd bc67 	b.w	d409a <_ZdlPv>

000d67cc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d67cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d67ce:	6804      	ldr	r4, [r0, #0]
   d67d0:	4607      	mov	r7, r0
   d67d2:	b1c4      	cbz	r4, d6806 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d67d4:	69a5      	ldr	r5, [r4, #24]
   d67d6:	69e3      	ldr	r3, [r4, #28]
   d67d8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d67dc:	42ae      	cmp	r6, r5
   d67de:	d004      	beq.n	d67ea <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67e0:	1d28      	adds	r0, r5, #4
   d67e2:	f7ff ffa6 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67e6:	3508      	adds	r5, #8
   d67e8:	e7f8      	b.n	d67dc <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d67ea:	69a0      	ldr	r0, [r4, #24]
   d67ec:	f7fe ffe2 	bl	d57b4 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d67f0:	f104 000c 	add.w	r0, r4, #12
   d67f4:	f7ff ffc9 	bl	d678a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d67f8:	4620      	mov	r0, r4
   d67fa:	f7ff ffb4 	bl	d6766 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d67fe:	2134      	movs	r1, #52	; 0x34
   d6800:	4620      	mov	r0, r4
   d6802:	f002 fd4d 	bl	d92a0 <_ZdlPvj>
   d6806:	4638      	mov	r0, r7
   d6808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d680c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d680c:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d680e:	2500      	movs	r5, #0
   d6810:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6812:	6045      	str	r5, [r0, #4]
   d6814:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6816:	2024      	movs	r0, #36	; 0x24
   d6818:	f7fd fc3d 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d681c:	4604      	mov	r4, r0
   d681e:	b178      	cbz	r0, d6840 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6820:	4603      	mov	r3, r0
   d6822:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6826:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d682a:	f8c0 5002 	str.w	r5, [r0, #2]
   d682e:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d6830:	7285      	strb	r5, [r0, #10]
   d6832:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6834:	60c5      	str	r5, [r0, #12]
   d6836:	6105      	str	r5, [r0, #16]
   d6838:	6145      	str	r5, [r0, #20]
   d683a:	6185      	str	r5, [r0, #24]
   d683c:	61c5      	str	r5, [r0, #28]
   d683e:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6840:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d6842:	2014      	movs	r0, #20
   d6844:	9301      	str	r3, [sp, #4]
   d6846:	f7fd fc26 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d684a:	4603      	mov	r3, r0
   d684c:	b128      	cbz	r0, d685a <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d684e:	2201      	movs	r2, #1
   d6850:	6042      	str	r2, [r0, #4]
   d6852:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d6854:	4a08      	ldr	r2, [pc, #32]	; (d6878 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d6856:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6858:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d685a:	a802      	add	r0, sp, #8
   d685c:	6872      	ldr	r2, [r6, #4]
   d685e:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d6862:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6864:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6866:	f7ff ff64 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d686a:	6833      	ldr	r3, [r6, #0]
   d686c:	b90b      	cbnz	r3, d6872 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d686e:	f7ff f9a7 	bl	d5bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6872:	4630      	mov	r0, r6
   d6874:	b002      	add	sp, #8
   d6876:	bd70      	pop	{r4, r5, r6, pc}
   d6878:	000da9d8 	.word	0x000da9d8

000d687c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d687c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d687e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d6880:	6803      	ldr	r3, [r0, #0]
   d6882:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d6884:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d6886:	d00c      	beq.n	d68a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d6888:	b114      	cbz	r4, d6890 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d688a:	6863      	ldr	r3, [r4, #4]
   d688c:	3301      	adds	r3, #1
   d688e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d6890:	6828      	ldr	r0, [r5, #0]
   d6892:	b128      	cbz	r0, d68a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6894:	6843      	ldr	r3, [r0, #4]
   d6896:	3b01      	subs	r3, #1
   d6898:	6043      	str	r3, [r0, #4]
   d689a:	b90b      	cbnz	r3, d68a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d689c:	f7ff f99a 	bl	d5bd4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d68a0:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d68a2:	4628      	mov	r0, r5
   d68a4:	bd38      	pop	{r3, r4, r5, pc}

000d68a6 <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d68a6:	b510      	push	{r4, lr}
   d68a8:	6802      	ldr	r2, [r0, #0]
   d68aa:	680b      	ldr	r3, [r1, #0]
   d68ac:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d68ae:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d68b0:	b110      	cbz	r0, d68b8 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d68b2:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d68b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d68b6:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d68b8:	4620      	mov	r0, r4
   d68ba:	f851 3b04 	ldr.w	r3, [r1], #4
   d68be:	f840 3b04 	str.w	r3, [r0], #4
   d68c2:	f7ff ffdb 	bl	d687c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d68c6:	4620      	mov	r0, r4
   d68c8:	bd10      	pop	{r4, pc}

000d68ca <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d68ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d68ce:	6803      	ldr	r3, [r0, #0]
   d68d0:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d68d2:	69de      	ldr	r6, [r3, #28]
   d68d4:	b087      	sub	sp, #28
   d68d6:	460f      	mov	r7, r1
   d68d8:	4690      	mov	r8, r2
   d68da:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d68de:	42b4      	cmp	r4, r6
   d68e0:	46a1      	mov	r9, r4
   d68e2:	d011      	beq.n	d6908 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d68e4:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d68e8:	a801      	add	r0, sp, #4
   d68ea:	3114      	adds	r1, #20
   d68ec:	f7ff fa86 	bl	d5dfc <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d68f0:	4641      	mov	r1, r8
   d68f2:	a801      	add	r0, sp, #4
   d68f4:	f7ff faee 	bl	d5ed4 <_ZNK8particle7BleUuideqERKS0_>
   d68f8:	4605      	mov	r5, r0
   d68fa:	2800      	cmp	r0, #0
   d68fc:	d0ef      	beq.n	d68de <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d68fe:	4649      	mov	r1, r9
   d6900:	4638      	mov	r0, r7
   d6902:	f7ff ffd0 	bl	d68a6 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d6906:	e000      	b.n	d690a <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d6908:	2500      	movs	r5, #0
}
   d690a:	4628      	mov	r0, r5
   d690c:	b007      	add	sp, #28
   d690e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6912 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d6912:	b510      	push	{r4, lr}
   d6914:	f851 3b04 	ldr.w	r3, [r1], #4
   d6918:	4604      	mov	r4, r0
   d691a:	f840 3b04 	str.w	r3, [r0], #4
   d691e:	f7ff ffad 	bl	d687c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d6922:	4620      	mov	r0, r4
   d6924:	bd10      	pop	{r4, pc}

000d6926 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6926:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6928:	b570      	push	{r4, r5, r6, lr}
   d692a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d692c:	d91a      	bls.n	d6964 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d692e:	4290      	cmp	r0, r2
   d6930:	d219      	bcs.n	d6966 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6932:	f1a1 0608 	sub.w	r6, r1, #8
   d6936:	1a51      	subs	r1, r2, r1
   d6938:	3904      	subs	r1, #4
   d693a:	1f15      	subs	r5, r2, #4
   d693c:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d693e:	1f2b      	subs	r3, r5, #4
   d6940:	429e      	cmp	r6, r3
   d6942:	d025      	beq.n	d6990 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d6944:	2c04      	cmp	r4, #4
   d6946:	d007      	beq.n	d6958 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6948:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d694c:	f844 3c04 	str.w	r3, [r4, #-4]
   d6950:	4629      	mov	r1, r5
   d6952:	4620      	mov	r0, r4
   d6954:	f7ff fece 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6958:	4628      	mov	r0, r5
   d695a:	f7ff feea 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d695e:	3d08      	subs	r5, #8
   d6960:	3c08      	subs	r4, #8
   d6962:	e7ec      	b.n	d693e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d6964:	d014      	beq.n	d6990 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d6966:	1d0c      	adds	r4, r1, #4
   d6968:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d696a:	1f23      	subs	r3, r4, #4
   d696c:	429d      	cmp	r5, r3
   d696e:	d00f      	beq.n	d6990 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d6970:	2e04      	cmp	r6, #4
   d6972:	d007      	beq.n	d6984 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6974:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d6978:	f846 3c04 	str.w	r3, [r6, #-4]
   d697c:	4621      	mov	r1, r4
   d697e:	4630      	mov	r0, r6
   d6980:	f7ff feb8 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6984:	4620      	mov	r0, r4
   d6986:	f7ff fed4 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d698a:	3408      	adds	r4, #8
   d698c:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d698e:	e7ec      	b.n	d696a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d6990:	bd70      	pop	{r4, r5, r6, pc}

000d6992 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6996:	6804      	ldr	r4, [r0, #0]
   d6998:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d699a:	4605      	mov	r5, r0
   d699c:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d699e:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d69a2:	42a7      	cmp	r7, r4
   d69a4:	d018      	beq.n	d69d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d69a6:	4641      	mov	r1, r8
   d69a8:	4620      	mov	r0, r4
   d69aa:	f7ff fddb 	bl	d6564 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d69ae:	4606      	mov	r6, r0
   d69b0:	b908      	cbnz	r0, d69b6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d69b2:	3408      	adds	r4, #8
   d69b4:	e7f5      	b.n	d69a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d69b6:	b18c      	cbz	r4, d69dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d69b8:	1d20      	adds	r0, r4, #4
   d69ba:	f7ff feba 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d69be:	682b      	ldr	r3, [r5, #0]
   d69c0:	686a      	ldr	r2, [r5, #4]
   d69c2:	f104 0108 	add.w	r1, r4, #8
   d69c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d69ca:	4620      	mov	r0, r4
   d69cc:	f7ff ffab 	bl	d6926 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d69d0:	686b      	ldr	r3, [r5, #4]
   d69d2:	3b01      	subs	r3, #1
   d69d4:	606b      	str	r3, [r5, #4]
    return true;
   d69d6:	e002      	b.n	d69de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d69d8:	2600      	movs	r6, #0
   d69da:	e000      	b.n	d69de <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d69dc:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d69de:	4630      	mov	r0, r6
   d69e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d69e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d69e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d69e6:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d69e8:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d69ec:	6847      	ldr	r7, [r0, #4]
   d69ee:	9300      	str	r3, [sp, #0]
   d69f0:	a801      	add	r0, sp, #4
   d69f2:	f7ff fe7f 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d69f6:	6866      	ldr	r6, [r4, #4]
   d69f8:	68a3      	ldr	r3, [r4, #8]
   d69fa:	429e      	cmp	r6, r3
   d69fc:	db14      	blt.n	d6a28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d69fe:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6a00:	2e00      	cmp	r6, #0
   d6a02:	dd0b      	ble.n	d6a1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6a04:	00f0      	lsls	r0, r6, #3
   d6a06:	f7fe fecd 	bl	d57a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6a0a:	4605      	mov	r5, r0
   d6a0c:	b318      	cbz	r0, d6a56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d6a0e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6a12:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6a16:	f7ff ff86 	bl	d6926 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6a1a:	e000      	b.n	d6a1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6a1c:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a1e:	6820      	ldr	r0, [r4, #0]
   d6a20:	f7fe fec8 	bl	d57b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6a24:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6a26:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a28:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6a2a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6a2c:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d6a30:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d6a34:	4629      	mov	r1, r5
   d6a36:	f105 0008 	add.w	r0, r5, #8
   d6a3a:	f7ff ff74 	bl	d6926 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6a3e:	b135      	cbz	r5, d6a4e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d6a40:	9b00      	ldr	r3, [sp, #0]
   d6a42:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d6a46:	a901      	add	r1, sp, #4
   d6a48:	1d28      	adds	r0, r5, #4
   d6a4a:	f7ff fe53 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d6a4e:	6863      	ldr	r3, [r4, #4]
   d6a50:	3301      	adds	r3, #1
   d6a52:	6063      	str	r3, [r4, #4]
   d6a54:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a56:	a801      	add	r0, sp, #4
   d6a58:	f7ff fe6b 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6a5c:	4628      	mov	r0, r5
   d6a5e:	b003      	add	sp, #12
   d6a60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6a64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6a68:	4604      	mov	r4, r0
   d6a6a:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6a6c:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6a6e:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6a70:	f7ff f8f6 	bl	d5c60 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6a74:	6823      	ldr	r3, [r4, #0]
   d6a76:	2b03      	cmp	r3, #3
   d6a78:	d002      	beq.n	d6a80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d6a7a:	2b04      	cmp	r3, #4
   d6a7c:	d042      	beq.n	d6b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d6a7e:	e087      	b.n	d6b90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d6a80:	a804      	add	r0, sp, #16
   d6a82:	f7ff fec3 	bl	d680c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6a86:	9b04      	ldr	r3, [sp, #16]
   d6a88:	8922      	ldrh	r2, [r4, #8]
   d6a8a:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6a8c:	6862      	ldr	r2, [r4, #4]
   d6a8e:	9904      	ldr	r1, [sp, #16]
   d6a90:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d6a94:	f8c1 3002 	str.w	r3, [r1, #2]
   d6a98:	6853      	ldr	r3, [r2, #4]
   d6a9a:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a9e:	a807      	add	r0, sp, #28
   d6aa0:	9b04      	ldr	r3, [sp, #16]
   d6aa2:	9306      	str	r3, [sp, #24]
   d6aa4:	a905      	add	r1, sp, #20
   d6aa6:	f7ff fe25 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6aaa:	a906      	add	r1, sp, #24
   d6aac:	f105 0018 	add.w	r0, r5, #24
   d6ab0:	f7ff ff98 	bl	d69e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6ab4:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6ab6:	a807      	add	r0, sp, #28
   d6ab8:	f7ff fe3b 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6abc:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6abe:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d6ac0:	b974      	cbnz	r4, d6ae0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6ac2:	4b36      	ldr	r3, [pc, #216]	; (d6b9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d6ac4:	9300      	str	r3, [sp, #0]
   d6ac6:	aa06      	add	r2, sp, #24
   d6ac8:	4623      	mov	r3, r4
   d6aca:	4935      	ldr	r1, [pc, #212]	; (d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6acc:	9407      	str	r4, [sp, #28]
   d6ace:	2032      	movs	r0, #50	; 0x32
   d6ad0:	f7fe fdc4 	bl	d565c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6ad4:	9b04      	ldr	r3, [sp, #16]
   d6ad6:	4621      	mov	r1, r4
   d6ad8:	8818      	ldrh	r0, [r3, #0]
   d6ada:	f7fe fc07 	bl	d52ec <hal_ble_gap_disconnect>
   d6ade:	e00d      	b.n	d6afc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d6ae0:	4a30      	ldr	r2, [pc, #192]	; (d6ba4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d6ae2:	9200      	str	r2, [sp, #0]
   d6ae4:	2300      	movs	r3, #0
   d6ae6:	aa06      	add	r2, sp, #24
   d6ae8:	492d      	ldr	r1, [pc, #180]	; (d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6aea:	9307      	str	r3, [sp, #28]
   d6aec:	2001      	movs	r0, #1
   d6aee:	f7fe fdb5 	bl	d565c <log_message>
                if (impl->connectedCb_) {
   d6af2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d6af4:	b113      	cbz	r3, d6afc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d6af6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d6af8:	a804      	add	r0, sp, #16
   d6afa:	4798      	blx	r3
   d6afc:	a805      	add	r0, sp, #20
   d6afe:	f7ff fe18 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b02:	e045      	b.n	d6b90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6b04:	8921      	ldrh	r1, [r4, #8]
   d6b06:	4628      	mov	r0, r5
   d6b08:	f7ff fbf2 	bl	d62f0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6b0c:	4607      	mov	r7, r0
   d6b0e:	2800      	cmp	r0, #0
   d6b10:	d03e      	beq.n	d6b90 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d6b12:	6804      	ldr	r4, [r0, #0]
   d6b14:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6b16:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6b1c:	8022      	strh	r2, [r4, #0]
   d6b1e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6b22:	4299      	cmp	r1, r3
   d6b24:	d003      	beq.n	d6b2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d6b26:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6b2a:	8042      	strh	r2, [r0, #2]
   d6b2c:	e7f9      	b.n	d6b22 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6b2e:	68e6      	ldr	r6, [r4, #12]
   d6b30:	6923      	ldr	r3, [r4, #16]
   d6b32:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6b36:	45b0      	cmp	r8, r6
   d6b38:	d004      	beq.n	d6b44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d6b3a:	1d30      	adds	r0, r6, #4
   d6b3c:	f7ff fdf9 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b40:	3608      	adds	r6, #8
   d6b42:	e7f8      	b.n	d6b36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6b44:	2300      	movs	r3, #0
   d6b46:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6b48:	69a6      	ldr	r6, [r4, #24]
   d6b4a:	69e3      	ldr	r3, [r4, #28]
   d6b4c:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6b50:	45b0      	cmp	r8, r6
   d6b52:	d004      	beq.n	d6b5e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d6b54:	1d30      	adds	r0, r6, #4
   d6b56:	f7ff fdec 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b5a:	3608      	adds	r6, #8
   d6b5c:	e7f8      	b.n	d6b50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6b5e:	2300      	movs	r3, #0
   d6b60:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d6b62:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d6b64:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d6b66:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d6b68:	b113      	cbz	r3, d6b70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6b6a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6b6c:	4638      	mov	r0, r7
   d6b6e:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d6b70:	2320      	movs	r3, #32
   d6b72:	4a0d      	ldr	r2, [pc, #52]	; (d6ba8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6b74:	9306      	str	r3, [sp, #24]
   d6b76:	9200      	str	r2, [sp, #0]
   d6b78:	2300      	movs	r3, #0
   d6b7a:	4909      	ldr	r1, [pc, #36]	; (d6ba0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6b7c:	9307      	str	r3, [sp, #28]
   d6b7e:	2001      	movs	r0, #1
   d6b80:	aa06      	add	r2, sp, #24
   d6b82:	f7fe fd6b 	bl	d565c <log_message>
                    impl->peers_.removeOne(*peer);
   d6b86:	4639      	mov	r1, r7
   d6b88:	f105 0018 	add.w	r0, r5, #24
   d6b8c:	f7ff ff01 	bl	d6992 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d6b90:	a803      	add	r0, sp, #12
   d6b92:	f7ff f873 	bl	d5c7c <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d6b96:	b00e      	add	sp, #56	; 0x38
   d6b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6b9c:	000daa4e 	.word	0x000daa4e
   d6ba0:	000da9ec 	.word	0x000da9ec
   d6ba4:	000daa74 	.word	0x000daa74
   d6ba8:	000daa91 	.word	0x000daa91

000d6bac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6bac:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d6bae:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6bb0:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d6bb2:	dd06      	ble.n	d6bc2 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6bb4:	2154      	movs	r1, #84	; 0x54
   d6bb6:	4369      	muls	r1, r5
   d6bb8:	6800      	ldr	r0, [r0, #0]
   d6bba:	f7fe fe03 	bl	d57c4 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6bbe:	b920      	cbnz	r0, d6bca <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d6bc0:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6bc2:	6800      	ldr	r0, [r0, #0]
   d6bc4:	f7fe fdf6 	bl	d57b4 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6bc8:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6bca:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6bcc:	60a5      	str	r5, [r4, #8]
        return true;
   d6bce:	2001      	movs	r0, #1
    }
   d6bd0:	bd38      	pop	{r3, r4, r5, pc}

000d6bd2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6bd2:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6bd4:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6bd6:	b0c0      	sub	sp, #256	; 0x100
   d6bd8:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6bda:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6bdc:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d6bde:	a801      	add	r0, sp, #4
   d6be0:	2100      	movs	r1, #0
   d6be2:	f002 fe34 	bl	d984e <memset>
   d6be6:	a803      	add	r0, sp, #12
   d6be8:	f7ff fae3 	bl	d61b2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d6bec:	a80c      	add	r0, sp, #48	; 0x30
   d6bee:	f7ff fae0 	bl	d61b2 <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6bf2:	462a      	mov	r2, r5
   d6bf4:	ab01      	add	r3, sp, #4
   d6bf6:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d6bfa:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6bfc:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d6bfe:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6c00:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6c02:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d6c04:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6c08:	a80c      	add	r0, sp, #48	; 0x30
   d6c0a:	f7ff fa63 	bl	d60d4 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d6c0e:	89aa      	ldrh	r2, [r5, #12]
   d6c10:	6869      	ldr	r1, [r5, #4]
   d6c12:	a803      	add	r0, sp, #12
   d6c14:	f7ff fa5e 	bl	d60d4 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d6c18:	69a5      	ldr	r5, [r4, #24]
   d6c1a:	b11d      	cbz	r5, d6c24 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d6c1c:	69e1      	ldr	r1, [r4, #28]
   d6c1e:	a801      	add	r0, sp, #4
   d6c20:	47a8      	blx	r5
   d6c22:	e03c      	b.n	d6c9e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d6c24:	68e0      	ldr	r0, [r4, #12]
   d6c26:	b198      	cbz	r0, d6c50 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d6c28:	6963      	ldr	r3, [r4, #20]
   d6c2a:	6922      	ldr	r2, [r4, #16]
   d6c2c:	4293      	cmp	r3, r2
   d6c2e:	d239      	bcs.n	d6ca4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d6c30:	1c5a      	adds	r2, r3, #1
   d6c32:	6162      	str	r2, [r4, #20]
   d6c34:	fb06 0003 	mla	r0, r6, r3, r0
   d6c38:	2251      	movs	r2, #81	; 0x51
   d6c3a:	a901      	add	r1, sp, #4
   d6c3c:	f002 fde1 	bl	d9802 <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d6c40:	6962      	ldr	r2, [r4, #20]
   d6c42:	6923      	ldr	r3, [r4, #16]
   d6c44:	429a      	cmp	r2, r3
   d6c46:	d32d      	bcc.n	d6ca4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d6c48:	4628      	mov	r0, r5
   d6c4a:	f7fe fb45 	bl	d52d8 <hal_ble_gap_stop_scan>
   d6c4e:	e029      	b.n	d6ca4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d6c50:	4632      	mov	r2, r6
   d6c52:	a901      	add	r1, sp, #4
   d6c54:	a816      	add	r0, sp, #88	; 0x58
   d6c56:	f002 fdd4 	bl	d9802 <memcpy>
   d6c5a:	4632      	mov	r2, r6
   d6c5c:	a916      	add	r1, sp, #88	; 0x58
   d6c5e:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6c60:	6865      	ldr	r5, [r4, #4]
   d6c62:	f002 fdce 	bl	d9802 <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c66:	68a3      	ldr	r3, [r4, #8]
   d6c68:	429d      	cmp	r5, r3
   d6c6a:	db04      	blt.n	d6c76 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d6c6c:	1c69      	adds	r1, r5, #1
   d6c6e:	4620      	mov	r0, r4
   d6c70:	f7ff ff9c 	bl	d6bac <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6c74:	b1b0      	cbz	r0, d6ca4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6c76:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6c78:	6822      	ldr	r2, [r4, #0]
   d6c7a:	2654      	movs	r6, #84	; 0x54
   d6c7c:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6c80:	fb06 2203 	mla	r2, r6, r3, r2
   d6c84:	1b52      	subs	r2, r2, r5
   d6c86:	4629      	mov	r1, r5
   d6c88:	19a8      	adds	r0, r5, r6
   d6c8a:	f002 fdc5 	bl	d9818 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6c8e:	4632      	mov	r2, r6
   d6c90:	a92b      	add	r1, sp, #172	; 0xac
   d6c92:	4628      	mov	r0, r5
   d6c94:	f002 fdb5 	bl	d9802 <memcpy>
    ++size_;
   d6c98:	6863      	ldr	r3, [r4, #4]
   d6c9a:	3301      	adds	r3, #1
   d6c9c:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d6c9e:	6963      	ldr	r3, [r4, #20]
   d6ca0:	3301      	adds	r3, #1
   d6ca2:	6163      	str	r3, [r4, #20]
        }
    }
   d6ca4:	b040      	add	sp, #256	; 0x100
   d6ca6:	bd70      	pop	{r4, r5, r6, pc}

000d6ca8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6ca8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cac:	4606      	mov	r6, r0
   d6cae:	460c      	mov	r4, r1
   d6cb0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6cb2:	d914      	bls.n	d6cde <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6cb4:	4290      	cmp	r0, r2
   d6cb6:	d213      	bcs.n	d6ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6cb8:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6cbc:	1a6c      	subs	r4, r5, r1
   d6cbe:	f1a1 0708 	sub.w	r7, r1, #8
   d6cc2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6cc4:	42af      	cmp	r7, r5
   d6cc6:	d018      	beq.n	d6cfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6cc8:	b11c      	cbz	r4, d6cd2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6cca:	4629      	mov	r1, r5
   d6ccc:	4620      	mov	r0, r4
   d6cce:	f7ff fd26 	bl	d671e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6cd2:	1d28      	adds	r0, r5, #4
   d6cd4:	f7ff fd2d 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6cd8:	3d08      	subs	r5, #8
   d6cda:	3c08      	subs	r4, #8
   d6cdc:	e7f2      	b.n	d6cc4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6cde:	d00c      	beq.n	d6cfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6ce0:	42ac      	cmp	r4, r5
   d6ce2:	d00a      	beq.n	d6cfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6ce4:	b11e      	cbz	r6, d6cee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6ce6:	4621      	mov	r1, r4
   d6ce8:	4630      	mov	r0, r6
   d6cea:	f7ff fd18 	bl	d671e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6cee:	1d20      	adds	r0, r4, #4
   d6cf0:	f7ff fd1f 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6cf4:	3408      	adds	r4, #8
   d6cf6:	3608      	adds	r6, #8
   d6cf8:	e7f2      	b.n	d6ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6cfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6cfc:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6cfe:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6d00:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6d02:	dd0b      	ble.n	d6d1c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6d04:	00f0      	lsls	r0, r6, #3
   d6d06:	f7fe fd4d 	bl	d57a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6d0a:	4604      	mov	r4, r0
   d6d0c:	b170      	cbz	r0, d6d2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6d0e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6d12:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6d16:	f7ff ffc7 	bl	d6ca8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6d1a:	e000      	b.n	d6d1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6d1c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d1e:	6828      	ldr	r0, [r5, #0]
   d6d20:	f7fe fd48 	bl	d57b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6d24:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6d26:	60ae      	str	r6, [r5, #8]
        return true;
   d6d28:	2001      	movs	r0, #1
   d6d2a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6d2c:	bd70      	pop	{r4, r5, r6, pc}

000d6d2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6d2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6d32:	2300      	movs	r3, #0
   d6d34:	6003      	str	r3, [r0, #0]
   d6d36:	6043      	str	r3, [r0, #4]
   d6d38:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6d3a:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6d3c:	6849      	ldr	r1, [r1, #4]
   d6d3e:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6d40:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6d42:	dd13      	ble.n	d6d6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6d44:	f7ff ffda 	bl	d6cfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6d48:	b180      	cbz	r0, d6d6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6d4a:	6835      	ldr	r5, [r6, #0]
   d6d4c:	6873      	ldr	r3, [r6, #4]
   d6d4e:	6827      	ldr	r7, [r4, #0]
   d6d50:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6d54:	4545      	cmp	r5, r8
   d6d56:	d007      	beq.n	d6d68 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6d58:	b11f      	cbz	r7, d6d62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6d5a:	4629      	mov	r1, r5
   d6d5c:	4638      	mov	r0, r7
   d6d5e:	f7ff fcde 	bl	d671e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6d62:	3508      	adds	r5, #8
   d6d64:	3708      	adds	r7, #8
   d6d66:	e7f5      	b.n	d6d54 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6d68:	6873      	ldr	r3, [r6, #4]
   d6d6a:	6063      	str	r3, [r4, #4]
    }
}
   d6d6c:	4620      	mov	r0, r4
   d6d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6d72 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6d72:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6d74:	680b      	ldr	r3, [r1, #0]
   d6d76:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6d78:	4605      	mov	r5, r0
   d6d7a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6d7c:	b933      	cbnz	r3, d6d8c <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d6d7e:	4608      	mov	r0, r1
   d6d80:	f7fe ff00 	bl	d5b84 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d6d84:	b910      	cbnz	r0, d6d8c <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d6d86:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d6d88:	2201      	movs	r2, #1
   d6d8a:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d6d8c:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d6d8e:	4628      	mov	r0, r5
   d6d90:	310c      	adds	r1, #12
   d6d92:	f7ff ffcc 	bl	d6d2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d6d96:	4628      	mov	r0, r5
   d6d98:	bd38      	pop	{r3, r4, r5, pc}

000d6d9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6d9c:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6d9e:	6845      	ldr	r5, [r0, #4]
   d6da0:	4668      	mov	r0, sp
   d6da2:	f7ff fcbc 	bl	d671e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6da6:	6861      	ldr	r1, [r4, #4]
   d6da8:	68a3      	ldr	r3, [r4, #8]
   d6daa:	4299      	cmp	r1, r3
   d6dac:	db05      	blt.n	d6dba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6dae:	3101      	adds	r1, #1
   d6db0:	4620      	mov	r0, r4
   d6db2:	f7ff ffa3 	bl	d6cfc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6db6:	4606      	mov	r6, r0
   d6db8:	b198      	cbz	r0, d6de2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6dba:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6dbc:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6dbe:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6dc2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6dc6:	4629      	mov	r1, r5
   d6dc8:	f105 0008 	add.w	r0, r5, #8
   d6dcc:	f7ff ff6c 	bl	d6ca8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6dd0:	b11d      	cbz	r5, d6dda <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d6dd2:	4669      	mov	r1, sp
   d6dd4:	4628      	mov	r0, r5
   d6dd6:	f7ff fca2 	bl	d671e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6dda:	6863      	ldr	r3, [r4, #4]
   d6ddc:	3301      	adds	r3, #1
   d6dde:	6063      	str	r3, [r4, #4]
   d6de0:	2601      	movs	r6, #1
   d6de2:	a801      	add	r0, sp, #4
   d6de4:	f7ff fca5 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6de8:	4630      	mov	r0, r6
   d6dea:	b002      	add	sp, #8
   d6dec:	bd70      	pop	{r4, r5, r6, pc}

000d6dee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6dee:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6df2:	4606      	mov	r6, r0
   d6df4:	460c      	mov	r4, r1
   d6df6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6df8:	d914      	bls.n	d6e24 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6dfa:	4290      	cmp	r0, r2
   d6dfc:	d213      	bcs.n	d6e26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6dfe:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6e02:	1a6c      	subs	r4, r5, r1
   d6e04:	f1a1 0708 	sub.w	r7, r1, #8
   d6e08:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6e0a:	42af      	cmp	r7, r5
   d6e0c:	d018      	beq.n	d6e40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6e0e:	b11c      	cbz	r4, d6e18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6e10:	4629      	mov	r1, r5
   d6e12:	4620      	mov	r0, r4
   d6e14:	f7ff fc75 	bl	d6702 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6e18:	1d28      	adds	r0, r5, #4
   d6e1a:	f7ff fc8a 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6e1e:	3d08      	subs	r5, #8
   d6e20:	3c08      	subs	r4, #8
   d6e22:	e7f2      	b.n	d6e0a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6e24:	d00c      	beq.n	d6e40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6e26:	42ac      	cmp	r4, r5
   d6e28:	d00a      	beq.n	d6e40 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6e2a:	b11e      	cbz	r6, d6e34 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6e2c:	4621      	mov	r1, r4
   d6e2e:	4630      	mov	r0, r6
   d6e30:	f7ff fc67 	bl	d6702 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6e34:	1d20      	adds	r0, r4, #4
   d6e36:	f7ff fc7c 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6e3a:	3408      	adds	r4, #8
   d6e3c:	3608      	adds	r6, #8
   d6e3e:	e7f2      	b.n	d6e26 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6e42:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6e44:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6e46:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6e48:	dd0b      	ble.n	d6e62 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6e4a:	00f0      	lsls	r0, r6, #3
   d6e4c:	f7fe fcaa 	bl	d57a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6e50:	4604      	mov	r4, r0
   d6e52:	b170      	cbz	r0, d6e72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6e54:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6e58:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6e5c:	f7ff ffc7 	bl	d6dee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6e60:	e000      	b.n	d6e64 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6e62:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6e64:	6828      	ldr	r0, [r5, #0]
   d6e66:	f7fe fca5 	bl	d57b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6e6a:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6e6c:	60ae      	str	r6, [r5, #8]
        return true;
   d6e6e:	2001      	movs	r0, #1
   d6e70:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6e72:	bd70      	pop	{r4, r5, r6, pc}

000d6e74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6e78:	2300      	movs	r3, #0
   d6e7a:	6003      	str	r3, [r0, #0]
   d6e7c:	6043      	str	r3, [r0, #4]
   d6e7e:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6e80:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6e82:	6849      	ldr	r1, [r1, #4]
   d6e84:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6e86:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6e88:	dd13      	ble.n	d6eb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d6e8a:	f7ff ffda 	bl	d6e42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6e8e:	b180      	cbz	r0, d6eb2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6e90:	6835      	ldr	r5, [r6, #0]
   d6e92:	6873      	ldr	r3, [r6, #4]
   d6e94:	6827      	ldr	r7, [r4, #0]
   d6e96:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6e9a:	4545      	cmp	r5, r8
   d6e9c:	d007      	beq.n	d6eae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6e9e:	b11f      	cbz	r7, d6ea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6ea0:	4629      	mov	r1, r5
   d6ea2:	4638      	mov	r0, r7
   d6ea4:	f7ff fc2d 	bl	d6702 <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d6ea8:	3508      	adds	r5, #8
   d6eaa:	3708      	adds	r7, #8
   d6eac:	e7f5      	b.n	d6e9a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d6eae:	6873      	ldr	r3, [r6, #4]
   d6eb0:	6063      	str	r3, [r4, #4]
    }
}
   d6eb2:	4620      	mov	r0, r4
   d6eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6eb8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6eb8:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6eba:	680b      	ldr	r3, [r1, #0]
   d6ebc:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6ebe:	b085      	sub	sp, #20
   d6ec0:	4605      	mov	r5, r0
   d6ec2:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6ec4:	b92b      	cbnz	r3, d6ed2 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d6ec6:	a801      	add	r0, sp, #4
   d6ec8:	f7ff ff53 	bl	d6d72 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d6ecc:	a801      	add	r0, sp, #4
   d6ece:	f7ff fc4a 	bl	d6766 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d6ed2:	6823      	ldr	r3, [r4, #0]
   d6ed4:	7adb      	ldrb	r3, [r3, #11]
   d6ed6:	b93b      	cbnz	r3, d6ee8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d6ed8:	4621      	mov	r1, r4
   d6eda:	a801      	add	r0, sp, #4
   d6edc:	f7ff fac0 	bl	d6460 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d6ee0:	b910      	cbnz	r0, d6ee8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d6ee2:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d6ee4:	2201      	movs	r2, #1
   d6ee6:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6ee8:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d6eea:	4628      	mov	r0, r5
   d6eec:	3118      	adds	r1, #24
   d6eee:	f7ff ffc1 	bl	d6e74 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d6ef2:	4628      	mov	r0, r5
   d6ef4:	b005      	add	sp, #20
   d6ef6:	bd30      	pop	{r4, r5, pc}

000d6ef8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6ef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6efc:	460d      	mov	r5, r1
   d6efe:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d6f00:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6f04:	4617      	mov	r7, r2
   d6f06:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d6f08:	4642      	mov	r2, r8
   d6f0a:	2100      	movs	r1, #0
   d6f0c:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6f0e:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d6f10:	f002 fc9d 	bl	d984e <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6f14:	6869      	ldr	r1, [r5, #4]
   d6f16:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d6f18:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6f1a:	ab02      	add	r3, sp, #8
   d6f1c:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6f1e:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d6f22:	ab05      	add	r3, sp, #20
   d6f24:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6f28:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d6f2c:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d6f30:	f7ff fb60 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6f34:	4b34      	ldr	r3, [pc, #208]	; (d7008 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d6f36:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6f38:	f7ff fb5c 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6f3c:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6f3e:	6803      	ldr	r3, [r0, #0]
   d6f40:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6f42:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6f44:	a804      	add	r0, sp, #16
   d6f46:	f7fe fa17 	bl	d5378 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d6f4a:	4607      	mov	r7, r0
   d6f4c:	b120      	cbz	r0, d6f58 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d6f4e:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6f50:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6f54:	801a      	strh	r2, [r3, #0]
        return ret;
   d6f56:	e053      	b.n	d7000 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d6f58:	4629      	mov	r1, r5
   d6f5a:	4630      	mov	r0, r6
   d6f5c:	f7ff faf2 	bl	d6544 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6f60:	f7ff fb48 	bl	d65f4 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6f64:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d6f66:	6803      	ldr	r3, [r0, #0]
   d6f68:	ad12      	add	r5, sp, #72	; 0x48
   d6f6a:	f103 0818 	add.w	r8, r3, #24
   d6f6e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6f72:	f845 3d20 	str.w	r3, [r5, #-32]!
   d6f76:	a80b      	add	r0, sp, #44	; 0x2c
   d6f78:	f7ff fbbc 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6f7c:	4629      	mov	r1, r5
   d6f7e:	4640      	mov	r0, r8
   d6f80:	f7ff fd30 	bl	d69e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6f84:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6f86:	a80b      	add	r0, sp, #44	; 0x2c
   d6f88:	f7ff fbd3 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f8c:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d6f8e:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6f90:	f1b8 0f00 	cmp.w	r8, #0
   d6f94:	d114      	bne.n	d6fc0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d6f96:	4b1d      	ldr	r3, [pc, #116]	; (d700c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d6f98:	9300      	str	r3, [sp, #0]
   d6f9a:	462a      	mov	r2, r5
   d6f9c:	4643      	mov	r3, r8
   d6f9e:	491c      	ldr	r1, [pc, #112]	; (d7010 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6fa0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d6fa4:	2032      	movs	r0, #50	; 0x32
   d6fa6:	f7fe fb59 	bl	d565c <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d6faa:	6833      	ldr	r3, [r6, #0]
   d6fac:	4641      	mov	r1, r8
   d6fae:	8818      	ldrh	r0, [r3, #0]
   d6fb0:	f7fe f99c 	bl	d52ec <hal_ble_gap_disconnect>
   d6fb4:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d6fb6:	4817      	ldr	r0, [pc, #92]	; (d7014 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6fbc:	801a      	strh	r2, [r3, #0]
   d6fbe:	e01f      	b.n	d7000 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d6fc0:	4b15      	ldr	r3, [pc, #84]	; (d7018 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d6fc2:	9300      	str	r3, [sp, #0]
   d6fc4:	462a      	mov	r2, r5
   d6fc6:	463b      	mov	r3, r7
   d6fc8:	4911      	ldr	r1, [pc, #68]	; (d7010 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6fca:	970b      	str	r7, [sp, #44]	; 0x2c
   d6fcc:	4648      	mov	r0, r9
   d6fce:	f7fe fb45 	bl	d565c <log_message>
    if (automatic) {
   d6fd2:	b1a4      	cbz	r4, d6ffe <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6fd4:	4631      	mov	r1, r6
   d6fd6:	4628      	mov	r0, r5
   d6fd8:	f7ff ff6e 	bl	d6eb8 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d6fdc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6fde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6fe0:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d6fe4:	42a6      	cmp	r6, r4
   d6fe6:	d005      	beq.n	d6ff4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d6fe8:	4620      	mov	r0, r4
   d6fea:	2101      	movs	r1, #1
   d6fec:	f7ff f9f4 	bl	d63d8 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d6ff0:	3408      	adds	r4, #8
   d6ff2:	e7f7      	b.n	d6fe4 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6ff4:	4628      	mov	r0, r5
   d6ff6:	f7ff fbc8 	bl	d678a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d6ffa:	2000      	movs	r0, #0
   d6ffc:	e000      	b.n	d7000 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d6ffe:	4620      	mov	r0, r4
}
   d7000:	b013      	add	sp, #76	; 0x4c
   d7002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7006:	bf00      	nop
   d7008:	000d6a65 	.word	0x000d6a65
   d700c:	000daab0 	.word	0x000daab0
   d7010:	000da9ec 	.word	0x000da9ec
   d7014:	fffffefc 	.word	0xfffffefc
   d7018:	000daacc 	.word	0x000daacc

000d701c <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d701c:	b570      	push	{r4, r5, r6, lr}
   d701e:	4604      	mov	r4, r0
   d7020:	4615      	mov	r5, r2
   d7022:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d7024:	f7ff fbf2 	bl	d680c <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d7028:	4633      	mov	r3, r6
   d702a:	2200      	movs	r2, #0
   d702c:	4629      	mov	r1, r5
   d702e:	4620      	mov	r0, r4
   d7030:	f7ff ff62 	bl	d6ef8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d7034:	4620      	mov	r0, r4
   d7036:	bd70      	pop	{r4, r5, r6, pc}

000d7038 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7038:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d703a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d703c:	6845      	ldr	r5, [r0, #4]
   d703e:	4668      	mov	r0, sp
   d7040:	f7ff fb5f 	bl	d6702 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7044:	6861      	ldr	r1, [r4, #4]
   d7046:	68a3      	ldr	r3, [r4, #8]
   d7048:	4299      	cmp	r1, r3
   d704a:	db05      	blt.n	d7058 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d704c:	3101      	adds	r1, #1
   d704e:	4620      	mov	r0, r4
   d7050:	f7ff fef7 	bl	d6e42 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7054:	4606      	mov	r6, r0
   d7056:	b198      	cbz	r0, d7080 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d7058:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d705a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d705c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7060:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7064:	4629      	mov	r1, r5
   d7066:	f105 0008 	add.w	r0, r5, #8
   d706a:	f7ff fec0 	bl	d6dee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d706e:	b11d      	cbz	r5, d7078 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d7070:	4669      	mov	r1, sp
   d7072:	4628      	mov	r0, r5
   d7074:	f7ff fb45 	bl	d6702 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d7078:	6863      	ldr	r3, [r4, #4]
   d707a:	3301      	adds	r3, #1
   d707c:	6063      	str	r3, [r4, #4]
   d707e:	2601      	movs	r6, #1
   d7080:	a801      	add	r0, sp, #4
   d7082:	f7ff fb56 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7086:	4630      	mov	r0, r6
   d7088:	b002      	add	sp, #8
   d708a:	bd70      	pop	{r4, r5, r6, pc}

000d708c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d708c:	b510      	push	{r4, lr}
   d708e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d7090:	6840      	ldr	r0, [r0, #4]
   d7092:	b108      	cbz	r0, d7098 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7094:	f7fd f801 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d7098:	4620      	mov	r0, r4
   d709a:	bd10      	pop	{r4, pc}

000d709c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d709c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d709e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d70a0:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d70a2:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d70a6:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d70aa:	f7fe fc29 	bl	d5900 <_ZN6StringD1Ev>
   d70ae:	4668      	mov	r0, sp
   d70b0:	f7ff ffec 	bl	d708c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d70b4:	b003      	add	sp, #12
   d70b6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d70bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d70bc:	b538      	push	{r3, r4, r5, lr}
   d70be:	2300      	movs	r3, #0
   d70c0:	4604      	mov	r4, r0
   d70c2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d70c4:	2014      	movs	r0, #20
   d70c6:	460d      	mov	r5, r1
   d70c8:	f7fc ffe5 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d70cc:	b128      	cbz	r0, d70da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d70ce:	2301      	movs	r3, #1
   d70d0:	6043      	str	r3, [r0, #4]
   d70d2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d70d4:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d70d6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d70d8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d70da:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d70dc:	4620      	mov	r0, r4
   d70de:	bd38      	pop	{r3, r4, r5, pc}
   d70e0:	000da9a0 	.word	0x000da9a0

000d70e4 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d70e4:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d70e6:	2500      	movs	r5, #0
   d70e8:	b086      	sub	sp, #24
   d70ea:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d70ec:	6045      	str	r5, [r0, #4]
   d70ee:	4604      	mov	r4, r0
   d70f0:	2054      	movs	r0, #84	; 0x54
   d70f2:	f7fc ffd0 	bl	d4096 <_Znwj>
   d70f6:	f8cd d010 	str.w	sp, [sp, #16]
   d70fa:	4606      	mov	r6, r0
   d70fc:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d70fe:	b108      	cbz	r0, d7104 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d7100:	f7ff f8d6 	bl	d62b0 <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d7104:	4631      	mov	r1, r6
   d7106:	ab01      	add	r3, sp, #4
   d7108:	aa02      	add	r2, sp, #8
   d710a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d710c:	9505      	str	r5, [sp, #20]
   d710e:	f7ff ffd5 	bl	d70bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7112:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d7114:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7116:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7118:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d711a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d711c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d711e:	f7ff fb08 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d7122:	a804      	add	r0, sp, #16
   d7124:	f7ff ffb2 	bl	d708c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d7128:	6823      	ldr	r3, [r4, #0]
   d712a:	b90b      	cbnz	r3, d7130 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d712c:	f7fe fd48 	bl	d5bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d7130:	4620      	mov	r0, r4
   d7132:	b006      	add	sp, #24
   d7134:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7138 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d7138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d713c:	f8df 8104 	ldr.w	r8, [pc, #260]	; d7244 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d7140:	b08c      	sub	sp, #48	; 0x30
   d7142:	4605      	mov	r5, r0
   d7144:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d7146:	2600      	movs	r6, #0
   d7148:	682b      	ldr	r3, [r5, #0]
   d714a:	429e      	cmp	r6, r3
   d714c:	d275      	bcs.n	d723a <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d714e:	a802      	add	r0, sp, #8
   d7150:	f7ff ffc8 	bl	d70e4 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d7154:	9b02      	ldr	r3, [sp, #8]
   d7156:	892a      	ldrh	r2, [r5, #8]
   d7158:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d715a:	686b      	ldr	r3, [r5, #4]
   d715c:	9802      	ldr	r0, [sp, #8]
   d715e:	242a      	movs	r4, #42	; 0x2a
   d7160:	4374      	muls	r4, r6
   d7162:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d7164:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d7166:	7e5b      	ldrb	r3, [r3, #25]
   d7168:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d716c:	bf1e      	ittt	ne
   d716e:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d7172:	f043 0302 	orrne.w	r3, r3, #2
   d7176:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d717a:	686b      	ldr	r3, [r5, #4]
   d717c:	4423      	add	r3, r4
   d717e:	7e5b      	ldrb	r3, [r3, #25]
   d7180:	075b      	lsls	r3, r3, #29
   d7182:	bf42      	ittt	mi
   d7184:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d7188:	f043 0304 	orrmi.w	r3, r3, #4
   d718c:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d7190:	686b      	ldr	r3, [r5, #4]
   d7192:	4423      	add	r3, r4
   d7194:	7e5b      	ldrb	r3, [r3, #25]
   d7196:	0719      	lsls	r1, r3, #28
   d7198:	bf42      	ittt	mi
   d719a:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d719e:	f043 0308 	orrmi.w	r3, r3, #8
   d71a2:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d71a6:	686b      	ldr	r3, [r5, #4]
   d71a8:	4423      	add	r3, r4
   d71aa:	7e5b      	ldrb	r3, [r3, #25]
   d71ac:	06da      	lsls	r2, r3, #27
   d71ae:	bf42      	ittt	mi
   d71b0:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d71b4:	f043 0310 	orrmi.w	r3, r3, #16
   d71b8:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d71bc:	686b      	ldr	r3, [r5, #4]
   d71be:	4423      	add	r3, r4
   d71c0:	7e5b      	ldrb	r3, [r3, #25]
   d71c2:	069b      	lsls	r3, r3, #26
   d71c4:	bf42      	ittt	mi
   d71c6:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d71ca:	f043 0320 	orrmi.w	r3, r3, #32
   d71ce:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d71d2:	6869      	ldr	r1, [r5, #4]
   d71d4:	4421      	add	r1, r4
   d71d6:	3104      	adds	r1, #4
   d71d8:	f7fe fe70 	bl	d5ebc <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d71dc:	686a      	ldr	r2, [r5, #4]
   d71de:	9b02      	ldr	r3, [sp, #8]
   d71e0:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d71e2:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d71e4:	8be2      	ldrh	r2, [r4, #30]
   d71e6:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d71e8:	8c22      	ldrh	r2, [r4, #32]
   d71ea:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d71ec:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d71ee:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d71f0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d71f2:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d71f4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d71f6:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d71f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d71fa:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d71fc:	6838      	ldr	r0, [r7, #0]
   d71fe:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d7202:	a804      	add	r0, sp, #16
   d7204:	f7ff fa7d 	bl	d6702 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7208:	4620      	mov	r0, r4
   d720a:	a904      	add	r1, sp, #16
   d720c:	f7ff ff14 	bl	d7038 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d7210:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7212:	a805      	add	r0, sp, #20
   d7214:	f7ff fa8d 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7218:	b954      	cbnz	r4, d7230 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d721a:	2320      	movs	r3, #32
   d721c:	9304      	str	r3, [sp, #16]
   d721e:	f8cd 8000 	str.w	r8, [sp]
   d7222:	4623      	mov	r3, r4
   d7224:	aa04      	add	r2, sp, #16
   d7226:	4906      	ldr	r1, [pc, #24]	; (d7240 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d7228:	9405      	str	r4, [sp, #20]
   d722a:	2032      	movs	r0, #50	; 0x32
   d722c:	f7fe fa16 	bl	d565c <log_message>
   d7230:	a803      	add	r0, sp, #12
   d7232:	f7ff fa7e 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d7236:	3601      	adds	r6, #1
   d7238:	e786      	b.n	d7148 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d723a:	b00c      	add	sp, #48	; 0x30
   d723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7240:	000da9ec 	.word	0x000da9ec
   d7244:	000daae9 	.word	0x000daae9

000d7248 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d7248:	b510      	push	{r4, lr}
   d724a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d724c:	6840      	ldr	r0, [r0, #4]
   d724e:	b108      	cbz	r0, d7254 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7250:	f7fc ff23 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d7254:	4620      	mov	r0, r4
   d7256:	bd10      	pop	{r4, pc}

000d7258 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7258:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d725a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d725c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d725e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d7262:	4668      	mov	r0, sp
   d7264:	f7ff fff0 	bl	d7248 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7268:	b003      	add	sp, #12
   d726a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7270 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d7270:	b538      	push	{r3, r4, r5, lr}
   d7272:	2300      	movs	r3, #0
   d7274:	4604      	mov	r4, r0
   d7276:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7278:	2014      	movs	r0, #20
   d727a:	460d      	mov	r5, r1
   d727c:	f7fc ff0b 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7280:	b128      	cbz	r0, d728e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7282:	2301      	movs	r3, #1
   d7284:	6043      	str	r3, [r0, #4]
   d7286:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7288:	4b02      	ldr	r3, [pc, #8]	; (d7294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d728a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d728c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d728e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d7290:	4620      	mov	r0, r4
   d7292:	bd38      	pop	{r3, r4, r5, pc}
   d7294:	000da9bc 	.word	0x000da9bc

000d7298 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d7298:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d729a:	2500      	movs	r5, #0
   d729c:	b086      	sub	sp, #24
   d729e:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d72a0:	6045      	str	r5, [r0, #4]
   d72a2:	4604      	mov	r4, r0
   d72a4:	2018      	movs	r0, #24
   d72a6:	f7fc fef6 	bl	d4096 <_Znwj>
   d72aa:	f8cd d010 	str.w	sp, [sp, #16]
   d72ae:	4606      	mov	r6, r0
   d72b0:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d72b2:	b118      	cbz	r0, d72bc <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d72b4:	f7fe fd6e 	bl	d5d94 <_ZN8particle7BleUuidC1Ev>
   d72b8:	82b5      	strh	r5, [r6, #20]
   d72ba:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d72bc:	4631      	mov	r1, r6
   d72be:	ab01      	add	r3, sp, #4
   d72c0:	aa02      	add	r2, sp, #8
   d72c2:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d72c4:	9505      	str	r5, [sp, #20]
   d72c6:	f7ff ffd3 	bl	d7270 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d72ca:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d72cc:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d72ce:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d72d0:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d72d2:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d72d4:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d72d6:	f7ff fa2c 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d72da:	a804      	add	r0, sp, #16
   d72dc:	f7ff ffb4 	bl	d7248 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d72e0:	6823      	ldr	r3, [r4, #0]
   d72e2:	b90b      	cbnz	r3, d72e8 <_ZN8particle10BleServiceC1Ev+0x50>
   d72e4:	f7fe fc6c 	bl	d5bc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d72e8:	4620      	mov	r0, r4
   d72ea:	b006      	add	sp, #24
   d72ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000d72f0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d72f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d72f4:	f8df 8080 	ldr.w	r8, [pc, #128]	; d7378 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d72f8:	b08c      	sub	sp, #48	; 0x30
   d72fa:	4606      	mov	r6, r0
   d72fc:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d72fe:	2500      	movs	r5, #0
   d7300:	6833      	ldr	r3, [r6, #0]
   d7302:	429d      	cmp	r5, r3
   d7304:	d233      	bcs.n	d736e <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d7306:	a802      	add	r0, sp, #8
   d7308:	f7ff ffc6 	bl	d7298 <_ZN8particle10BleServiceC1Ev>
   d730c:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d730e:	6871      	ldr	r1, [r6, #4]
   d7310:	9802      	ldr	r0, [sp, #8]
   d7312:	436c      	muls	r4, r5
   d7314:	4421      	add	r1, r4
   d7316:	3104      	adds	r1, #4
   d7318:	f7fe fdd0 	bl	d5ebc <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d731c:	6873      	ldr	r3, [r6, #4]
   d731e:	9a02      	ldr	r2, [sp, #8]
   d7320:	4423      	add	r3, r4
   d7322:	a902      	add	r1, sp, #8
   d7324:	8b1b      	ldrh	r3, [r3, #24]
   d7326:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d7328:	6873      	ldr	r3, [r6, #4]
   d732a:	441c      	add	r4, r3
   d732c:	8b63      	ldrh	r3, [r4, #26]
   d732e:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d7330:	6838      	ldr	r0, [r7, #0]
   d7332:	f100 040c 	add.w	r4, r0, #12
   d7336:	a804      	add	r0, sp, #16
   d7338:	f7ff f9f1 	bl	d671e <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d733c:	4620      	mov	r0, r4
   d733e:	a904      	add	r1, sp, #16
   d7340:	f7ff fd2b 	bl	d6d9a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d7344:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7346:	a805      	add	r0, sp, #20
   d7348:	f7ff f9f3 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d734c:	b954      	cbnz	r4, d7364 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d734e:	2320      	movs	r3, #32
   d7350:	9304      	str	r3, [sp, #16]
   d7352:	f8cd 8000 	str.w	r8, [sp]
   d7356:	4623      	mov	r3, r4
   d7358:	aa04      	add	r2, sp, #16
   d735a:	4906      	ldr	r1, [pc, #24]	; (d7374 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d735c:	9405      	str	r4, [sp, #20]
   d735e:	2032      	movs	r0, #50	; 0x32
   d7360:	f7fe f97c 	bl	d565c <log_message>
   d7364:	a803      	add	r0, sp, #12
   d7366:	f7ff f9e4 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d736a:	3501      	adds	r5, #1
   d736c:	e7c8      	b.n	d7300 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d736e:	b00c      	add	sp, #48	; 0x30
   d7370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7374:	000da9ec 	.word	0x000da9ec
   d7378:	000dab15 	.word	0x000dab15

000d737c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d737c:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d737e:	4c06      	ldr	r4, [pc, #24]	; (d7398 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7380:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d7382:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7384:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d7386:	f7fe f841 	bl	d540c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d738a:	4620      	mov	r0, r4
   d738c:	4a03      	ldr	r2, [pc, #12]	; (d739c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d738e:	4904      	ldr	r1, [pc, #16]	; (d73a0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d7394:	f001 bf76 	b.w	d9284 <__aeabi_atexit>
   d7398:	2003e384 	.word	0x2003e384
   d739c:	2003d848 	.word	0x2003d848
   d73a0:	000d5b73 	.word	0x000d5b73

000d73a4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d73a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d73a6:	4606      	mov	r6, r0
   d73a8:	460d      	mov	r5, r1
   d73aa:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d73ac:	2400      	movs	r4, #0
  while (size--) {
   d73ae:	42bd      	cmp	r5, r7
   d73b0:	d00c      	beq.n	d73cc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d73b2:	6833      	ldr	r3, [r6, #0]
   d73b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d73b8:	689b      	ldr	r3, [r3, #8]
   d73ba:	4630      	mov	r0, r6
   d73bc:	4798      	blx	r3
     if (chunk>=0)
   d73be:	2800      	cmp	r0, #0
   d73c0:	db01      	blt.n	d73c6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d73c2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d73c4:	e7f3      	b.n	d73ae <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d73c6:	2c00      	cmp	r4, #0
   d73c8:	bf08      	it	eq
   d73ca:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d73cc:	4620      	mov	r0, r4
   d73ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d73d0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d73d0:	b570      	push	{r4, r5, r6, lr}
   d73d2:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d73d4:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d73d6:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d73d8:	b149      	cbz	r1, d73ee <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d73da:	f002 fa93 	bl	d9904 <strlen>
   d73de:	682b      	ldr	r3, [r5, #0]
   d73e0:	4602      	mov	r2, r0
   d73e2:	4621      	mov	r1, r4
   d73e4:	4628      	mov	r0, r5
   d73e6:	68db      	ldr	r3, [r3, #12]
    }
   d73e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d73ec:	4718      	bx	r3
    }
   d73ee:	bd70      	pop	{r4, r5, r6, pc}

000d73f0 <_ZN5Print5printEPKc>:
   d73f0:	b508      	push	{r3, lr}
   d73f2:	f7ff ffed 	bl	d73d0 <_ZN5Print5writeEPKc>
   d73f6:	bd08      	pop	{r3, pc}

000d73f8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d73f8:	6803      	ldr	r3, [r0, #0]
   d73fa:	689b      	ldr	r3, [r3, #8]
   d73fc:	4718      	bx	r3

000d73fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d73fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7400:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7402:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7404:	f7ff fff8 	bl	d73f8 <_ZN5Print5printEc>
  n += print('\n');
   d7408:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d740a:	4604      	mov	r4, r0
  n += print('\n');
   d740c:	4628      	mov	r0, r5
   d740e:	f7ff fff3 	bl	d73f8 <_ZN5Print5printEc>
  return n;
}
   d7412:	4420      	add	r0, r4
   d7414:	bd38      	pop	{r3, r4, r5, pc}

000d7416 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7416:	b530      	push	{r4, r5, lr}
   d7418:	b08b      	sub	sp, #44	; 0x2c
   d741a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d741c:	2100      	movs	r1, #0
   d741e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7422:	2a01      	cmp	r2, #1
   d7424:	bf98      	it	ls
   d7426:	220a      	movls	r2, #10
   d7428:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d742c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d7430:	fb05 3312 	mls	r3, r5, r2, r3
   d7434:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7438:	2b09      	cmp	r3, #9
   d743a:	bf94      	ite	ls
   d743c:	3330      	addls	r3, #48	; 0x30
   d743e:	3337      	addhi	r3, #55	; 0x37
   d7440:	b2db      	uxtb	r3, r3
   d7442:	4621      	mov	r1, r4
   d7444:	f804 3901 	strb.w	r3, [r4], #-1
   d7448:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d744a:	2d00      	cmp	r5, #0
   d744c:	d1ee      	bne.n	d742c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d744e:	f7ff ffbf 	bl	d73d0 <_ZN5Print5writeEPKc>
}
   d7452:	b00b      	add	sp, #44	; 0x2c
   d7454:	bd30      	pop	{r4, r5, pc}

000d7456 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d7456:	b40c      	push	{r2, r3}
   d7458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d745c:	b087      	sub	sp, #28
   d745e:	af00      	add	r7, sp, #0
   d7460:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d7464:	4605      	mov	r5, r0
   d7466:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d746a:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d746c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d746e:	4623      	mov	r3, r4
   d7470:	464a      	mov	r2, r9
   d7472:	2114      	movs	r1, #20
   d7474:	1d38      	adds	r0, r7, #4
   d7476:	f7fe f9bd 	bl	d57f4 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d747a:	2813      	cmp	r0, #19
   d747c:	d805      	bhi.n	d748a <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d747e:	1d39      	adds	r1, r7, #4
   d7480:	4628      	mov	r0, r5
   d7482:	f7ff ffa5 	bl	d73d0 <_ZN5Print5writeEPKc>
   d7486:	4604      	mov	r4, r0
   d7488:	e013      	b.n	d74b2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d748a:	f100 0308 	add.w	r3, r0, #8
   d748e:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d7492:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d7494:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d7498:	1c41      	adds	r1, r0, #1
   d749a:	4623      	mov	r3, r4
   d749c:	464a      	mov	r2, r9
   d749e:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d74a0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d74a2:	f7fe f9a7 	bl	d57f4 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d74a6:	4669      	mov	r1, sp
   d74a8:	4628      	mov	r0, r5
   d74aa:	f7ff ff91 	bl	d73d0 <_ZN5Print5writeEPKc>
   d74ae:	4604      	mov	r4, r0
   d74b0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d74b2:	b11e      	cbz	r6, d74bc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d74b4:	4628      	mov	r0, r5
   d74b6:	f7ff ffa2 	bl	d73fe <_ZN5Print7printlnEv>
   d74ba:	4404      	add	r4, r0
    return n;
}
   d74bc:	4620      	mov	r0, r4
   d74be:	371c      	adds	r7, #28
   d74c0:	46bd      	mov	sp, r7
   d74c2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d74c6:	b002      	add	sp, #8
   d74c8:	4770      	bx	lr

000d74ca <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d74ca:	6880      	ldr	r0, [r0, #8]
   d74cc:	6803      	ldr	r3, [r0, #0]
   d74ce:	68db      	ldr	r3, [r3, #12]
   d74d0:	4718      	bx	r3

000d74d2 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d74d2:	4770      	bx	lr

000d74d4 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d74d4:	b119      	cbz	r1, d74de <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d74d6:	680b      	ldr	r3, [r1, #0]
   d74d8:	4608      	mov	r0, r1
   d74da:	685b      	ldr	r3, [r3, #4]
   d74dc:	4718      	bx	r3
   d74de:	4770      	bx	lr

000d74e0 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d74e0:	b119      	cbz	r1, d74ea <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d74e2:	680b      	ldr	r3, [r1, #0]
   d74e4:	4608      	mov	r0, r1
   d74e6:	685b      	ldr	r3, [r3, #4]
   d74e8:	4718      	bx	r3
   d74ea:	4770      	bx	lr

000d74ec <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d74ec:	4770      	bx	lr

000d74ee <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d74ee:	4770      	bx	lr

000d74f0 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d74f0:	4770      	bx	lr

000d74f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d74f2:	b538      	push	{r3, r4, r5, lr}
   d74f4:	4604      	mov	r4, r0
   d74f6:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d74f8:	6800      	ldr	r0, [r0, #0]
   d74fa:	212e      	movs	r1, #46	; 0x2e
   d74fc:	f002 f9e6 	bl	d98cc <strchrnul>
    size = s - category;
   d7500:	6823      	ldr	r3, [r4, #0]
   d7502:	1ac3      	subs	r3, r0, r3
   d7504:	602b      	str	r3, [r5, #0]
    if (size) {
   d7506:	b123      	cbz	r3, d7512 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d7508:	7803      	ldrb	r3, [r0, #0]
   d750a:	b103      	cbz	r3, d750e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d750c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d750e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7510:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d7512:	4618      	mov	r0, r3
}
   d7514:	bd38      	pop	{r3, r4, r5, pc}

000d7516 <_ZN5spark16JSONStreamWriterD0Ev>:
   d7516:	b510      	push	{r4, lr}
   d7518:	210c      	movs	r1, #12
   d751a:	4604      	mov	r4, r0
   d751c:	f001 fec0 	bl	d92a0 <_ZdlPvj>
   d7520:	4620      	mov	r0, r4
   d7522:	bd10      	pop	{r4, pc}

000d7524 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d7524:	b510      	push	{r4, lr}
   d7526:	2104      	movs	r1, #4
   d7528:	4604      	mov	r4, r0
   d752a:	f001 feb9 	bl	d92a0 <_ZdlPvj>
   d752e:	4620      	mov	r0, r4
   d7530:	bd10      	pop	{r4, pc}

000d7532 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d7532:	b510      	push	{r4, lr}
   d7534:	2104      	movs	r1, #4
   d7536:	4604      	mov	r4, r0
   d7538:	f001 feb2 	bl	d92a0 <_ZdlPvj>
   d753c:	4620      	mov	r0, r4
   d753e:	bd10      	pop	{r4, pc}

000d7540 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d7540:	b538      	push	{r3, r4, r5, lr}
   d7542:	460c      	mov	r4, r1
   d7544:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d7546:	f001 f9a3 	bl	d8890 <_Z16_fetch_usbserialv>
   d754a:	4284      	cmp	r4, r0
   d754c:	d00d      	beq.n	d756a <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d754e:	f001 fa2b 	bl	d89a8 <_Z22__fetch_global_Serial1v>
   d7552:	4284      	cmp	r4, r0
   d7554:	d105      	bne.n	d7562 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d7556:	f001 fa27 	bl	d89a8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d755a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d755e:	f001 ba1c 	b.w	d899a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d7562:	4621      	mov	r1, r4
   d7564:	4628      	mov	r0, r5
   d7566:	f7ff ffbb 	bl	d74e0 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d756a:	bd38      	pop	{r3, r4, r5, pc}

000d756c <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d756c:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d756e:	f002 f9b7 	bl	d98e0 <strcmp>
}
   d7572:	fab0 f080 	clz	r0, r0
   d7576:	0940      	lsrs	r0, r0, #5
   d7578:	bd08      	pop	{r3, pc}

000d757a <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d757a:	b538      	push	{r3, r4, r5, lr}
   d757c:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d757e:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7580:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d7582:	f002 f9bf 	bl	d9904 <strlen>
   d7586:	4621      	mov	r1, r4
   d7588:	4602      	mov	r2, r0
   d758a:	4628      	mov	r0, r5
}
   d758c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d7590:	f001 bd75 	b.w	d907e <_ZN5spark10JSONWriter5valueEPKcj>

000d7594 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d7594:	6800      	ldr	r0, [r0, #0]
   d7596:	f7fd bf49 	b.w	d542c <os_mutex_recursive_lock>

000d759a <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d759a:	b570      	push	{r4, r5, r6, lr}
   d759c:	4604      	mov	r4, r0
    write(str, strlen(str));
   d759e:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d75a0:	460d      	mov	r5, r1
    write(str, strlen(str));
   d75a2:	f002 f9af 	bl	d9904 <strlen>
   d75a6:	6823      	ldr	r3, [r4, #0]
   d75a8:	4602      	mov	r2, r0
   d75aa:	4629      	mov	r1, r5
   d75ac:	4620      	mov	r0, r4
   d75ae:	68db      	ldr	r3, [r3, #12]
}
   d75b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d75b4:	4718      	bx	r3

000d75b6 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d75b6:	b513      	push	{r0, r1, r4, lr}
   d75b8:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d75ba:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d75bc:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d75c0:	68d4      	ldr	r4, [r2, #12]
   d75c2:	4619      	mov	r1, r3
   d75c4:	2201      	movs	r2, #1
   d75c6:	47a0      	blx	r4
}
   d75c8:	b002      	add	sp, #8
   d75ca:	bd10      	pop	{r4, pc}

000d75cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d75cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d75d0:	6845      	ldr	r5, [r0, #4]
   d75d2:	6807      	ldr	r7, [r0, #0]
   d75d4:	b085      	sub	sp, #20
   d75d6:	4691      	mov	r9, r2
   d75d8:	2214      	movs	r2, #20
   d75da:	4355      	muls	r5, r2
   d75dc:	9301      	str	r3, [sp, #4]
   d75de:	10ab      	asrs	r3, r5, #2
   d75e0:	4d19      	ldr	r5, [pc, #100]	; (d7648 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d75e2:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d75e4:	435d      	muls	r5, r3
   d75e6:	468b      	mov	fp, r1
   d75e8:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d75ea:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d75ec:	2d00      	cmp	r5, #0
   d75ee:	9303      	str	r3, [sp, #12]
   d75f0:	dd23      	ble.n	d763a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d75f2:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d75f4:	106e      	asrs	r6, r5, #1
   d75f6:	fb03 f006 	mul.w	r0, r3, r6
   d75fa:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d75fe:	464a      	mov	r2, r9
   d7600:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d7604:	5820      	ldr	r0, [r4, r0]
   d7606:	45d1      	cmp	r9, sl
   d7608:	bf28      	it	cs
   d760a:	4652      	movcs	r2, sl
   d760c:	4659      	mov	r1, fp
   d760e:	f002 f981 	bl	d9914 <strncmp>
                if (cmp == 0) {
   d7612:	9b03      	ldr	r3, [sp, #12]
   d7614:	b948      	cbnz	r0, d762a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d7616:	45d1      	cmp	r9, sl
   d7618:	d103      	bne.n	d7622 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d761a:	9a01      	ldr	r2, [sp, #4]
   d761c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d761e:	4635      	mov	r5, r6
   d7620:	e7e4      	b.n	d75ec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d7622:	bf8c      	ite	hi
   d7624:	2001      	movhi	r0, #1
   d7626:	2000      	movls	r0, #0
   d7628:	e000      	b.n	d762c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d762a:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d762c:	2800      	cmp	r0, #0
   d762e:	d0f6      	beq.n	d761e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d7630:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d7632:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d7636:	3e01      	subs	r6, #1
   d7638:	e7f1      	b.n	d761e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d763a:	1be4      	subs	r4, r4, r7
}
   d763c:	4802      	ldr	r0, [pc, #8]	; (d7648 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d763e:	10a4      	asrs	r4, r4, #2
}
   d7640:	4360      	muls	r0, r4
   d7642:	b005      	add	sp, #20
   d7644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7648:	cccccccd 	.word	0xcccccccd

000d764c <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d764c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d764e:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d7650:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7652:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d7654:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d7656:	b313      	cbz	r3, d769e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d7658:	b309      	cbz	r1, d769e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d765a:	af04      	add	r7, sp, #16
   d765c:	2300      	movs	r3, #0
   d765e:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d7662:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7666:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7668:	4639      	mov	r1, r7
   d766a:	a801      	add	r0, sp, #4
   d766c:	f7ff ff41 	bl	d74f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7670:	4601      	mov	r1, r0
   d7672:	b1a0      	cbz	r0, d769e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d7674:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d7676:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7678:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d767c:	4620      	mov	r0, r4
   d767e:	f7ff ffa5 	bl	d75cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d7682:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7686:	b153      	cbz	r3, d769e <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d7688:	6823      	ldr	r3, [r4, #0]
   d768a:	2414      	movs	r4, #20
   d768c:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d7690:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d7692:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d7696:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7698:	bfa8      	it	ge
   d769a:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d769c:	e7e4      	b.n	d7668 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d769e:	4630      	mov	r0, r6
   d76a0:	b005      	add	sp, #20
   d76a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d76a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d76a4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d76a6:	4c09      	ldr	r4, [pc, #36]	; (d76cc <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d76a8:	6823      	ldr	r3, [r4, #0]
   d76aa:	07db      	lsls	r3, r3, #31
   d76ac:	d40b      	bmi.n	d76c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d76ae:	4620      	mov	r0, r4
   d76b0:	f7fc fd02 	bl	d40b8 <__cxa_guard_acquire>
   d76b4:	b138      	cbz	r0, d76c6 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d76b6:	4620      	mov	r0, r4
   d76b8:	f7fc fd03 	bl	d40c2 <__cxa_guard_release>
   d76bc:	4a04      	ldr	r2, [pc, #16]	; (d76d0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d76be:	4905      	ldr	r1, [pc, #20]	; (d76d4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d76c0:	4805      	ldr	r0, [pc, #20]	; (d76d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d76c2:	f001 fddf 	bl	d9284 <__aeabi_atexit>
    return &factory;
}
   d76c6:	4804      	ldr	r0, [pc, #16]	; (d76d8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d76c8:	bd10      	pop	{r4, pc}
   d76ca:	bf00      	nop
   d76cc:	2003e388 	.word	0x2003e388
   d76d0:	2003d848 	.word	0x2003d848
   d76d4:	000d74ef 	.word	0x000d74ef
   d76d8:	2003d788 	.word	0x2003d788

000d76dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d76dc:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d76de:	4c09      	ldr	r4, [pc, #36]	; (d7704 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d76e0:	6823      	ldr	r3, [r4, #0]
   d76e2:	07db      	lsls	r3, r3, #31
   d76e4:	d40b      	bmi.n	d76fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d76e6:	4620      	mov	r0, r4
   d76e8:	f7fc fce6 	bl	d40b8 <__cxa_guard_acquire>
   d76ec:	b138      	cbz	r0, d76fe <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d76ee:	4620      	mov	r0, r4
   d76f0:	f7fc fce7 	bl	d40c2 <__cxa_guard_release>
   d76f4:	4a04      	ldr	r2, [pc, #16]	; (d7708 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d76f6:	4905      	ldr	r1, [pc, #20]	; (d770c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d76f8:	4805      	ldr	r0, [pc, #20]	; (d7710 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d76fa:	f001 fdc3 	bl	d9284 <__aeabi_atexit>
    return &factory;
}
   d76fe:	4804      	ldr	r0, [pc, #16]	; (d7710 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d7700:	bd10      	pop	{r4, pc}
   d7702:	bf00      	nop
   d7704:	2003e3b8 	.word	0x2003e3b8
   d7708:	2003d848 	.word	0x2003d848
   d770c:	000d74ed 	.word	0x000d74ed
   d7710:	2003d784 	.word	0x2003d784

000d7714 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d7714:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7716:	2500      	movs	r5, #0
   d7718:	4604      	mov	r4, r0
   d771a:	6005      	str	r5, [r0, #0]
   d771c:	6045      	str	r5, [r0, #4]
   d771e:	6085      	str	r5, [r0, #8]
   d7720:	6105      	str	r5, [r0, #16]
   d7722:	6145      	str	r5, [r0, #20]
   d7724:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7726:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d772a:	f7fd fe6f 	bl	d540c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d772e:	f7ff ffb9 	bl	d76a4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d7732:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7734:	f7ff ffd2 	bl	d76dc <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d7738:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d773a:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d773c:	4620      	mov	r0, r4
   d773e:	bd38      	pop	{r3, r4, r5, pc}

000d7740 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d7740:	b510      	push	{r4, lr}
    static LogManager mgr;
   d7742:	4c0a      	ldr	r4, [pc, #40]	; (d776c <_ZN5spark10LogManager8instanceEv+0x2c>)
   d7744:	6823      	ldr	r3, [r4, #0]
   d7746:	07db      	lsls	r3, r3, #31
   d7748:	d40e      	bmi.n	d7768 <_ZN5spark10LogManager8instanceEv+0x28>
   d774a:	4620      	mov	r0, r4
   d774c:	f7fc fcb4 	bl	d40b8 <__cxa_guard_acquire>
   d7750:	b150      	cbz	r0, d7768 <_ZN5spark10LogManager8instanceEv+0x28>
   d7752:	4807      	ldr	r0, [pc, #28]	; (d7770 <_ZN5spark10LogManager8instanceEv+0x30>)
   d7754:	f7ff ffde 	bl	d7714 <_ZN5spark10LogManagerC1Ev>
   d7758:	4620      	mov	r0, r4
   d775a:	f7fc fcb2 	bl	d40c2 <__cxa_guard_release>
   d775e:	4a05      	ldr	r2, [pc, #20]	; (d7774 <_ZN5spark10LogManager8instanceEv+0x34>)
   d7760:	4905      	ldr	r1, [pc, #20]	; (d7778 <_ZN5spark10LogManager8instanceEv+0x38>)
   d7762:	4803      	ldr	r0, [pc, #12]	; (d7770 <_ZN5spark10LogManager8instanceEv+0x30>)
   d7764:	f001 fd8e 	bl	d9284 <__aeabi_atexit>
    return &mgr;
}
   d7768:	4801      	ldr	r0, [pc, #4]	; (d7770 <_ZN5spark10LogManager8instanceEv+0x30>)
   d776a:	bd10      	pop	{r4, pc}
   d776c:	2003e38c 	.word	0x2003e38c
   d7770:	2003e390 	.word	0x2003e390
   d7774:	2003d848 	.word	0x2003d848
   d7778:	000d7bab 	.word	0x000d7bab

000d777c <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d777c:	2300      	movs	r3, #0
   d777e:	4a02      	ldr	r2, [pc, #8]	; (d7788 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7780:	4902      	ldr	r1, [pc, #8]	; (d778c <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7782:	4803      	ldr	r0, [pc, #12]	; (d7790 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d7784:	f7fd bf82 	b.w	d568c <log_set_callbacks>
   d7788:	000d7a8d 	.word	0x000d7a8d
   d778c:	000d7a1d 	.word	0x000d7a1d
   d7790:	000d79a5 	.word	0x000d79a5

000d7794 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d7794:	2300      	movs	r3, #0
   d7796:	461a      	mov	r2, r3
   d7798:	4619      	mov	r1, r3
   d779a:	4618      	mov	r0, r3
   d779c:	f7fd bf76 	b.w	d568c <log_set_callbacks>

000d77a0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d77a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77a2:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d77a4:	688e      	ldr	r6, [r1, #8]
   d77a6:	f851 3b04 	ldr.w	r3, [r1], #4
   d77aa:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d77ae:	4605      	mov	r5, r0
   d77b0:	a801      	add	r0, sp, #4
   d77b2:	f7fe ff9f 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d77b6:	4622      	mov	r2, r4
   d77b8:	4631      	mov	r1, r6
   d77ba:	4628      	mov	r0, r5
   d77bc:	f001 fc96 	bl	d90ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d77c0:	a801      	add	r0, sp, #4
   d77c2:	f7fe ffb6 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d77c6:	4628      	mov	r0, r5
   d77c8:	b002      	add	sp, #8
   d77ca:	bd70      	pop	{r4, r5, r6, pc}

000d77cc <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d77cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77ce:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d77d0:	690e      	ldr	r6, [r1, #16]
   d77d2:	f851 3b04 	ldr.w	r3, [r1], #4
   d77d6:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d77da:	4605      	mov	r5, r0
   d77dc:	a801      	add	r0, sp, #4
   d77de:	f7fe ff89 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d77e2:	4622      	mov	r2, r4
   d77e4:	4631      	mov	r1, r6
   d77e6:	4628      	mov	r0, r5
   d77e8:	f001 fc9b 	bl	d9122 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d77ec:	a801      	add	r0, sp, #4
   d77ee:	f7fe ffa0 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d77f2:	4628      	mov	r0, r5
   d77f4:	b002      	add	sp, #8
   d77f6:	bd70      	pop	{r4, r5, r6, pc}

000d77f8 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d77f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77fa:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d77fc:	68ce      	ldr	r6, [r1, #12]
   d77fe:	f851 3b04 	ldr.w	r3, [r1], #4
   d7802:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7806:	4605      	mov	r5, r0
   d7808:	a801      	add	r0, sp, #4
   d780a:	f7fe ff73 	bl	d66f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d780e:	4622      	mov	r2, r4
   d7810:	4631      	mov	r1, r6
   d7812:	4628      	mov	r0, r5
   d7814:	f001 fc42 	bl	d909c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7818:	a801      	add	r0, sp, #4
   d781a:	f7fe ff8a 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d781e:	4628      	mov	r0, r5
   d7820:	b002      	add	sp, #8
   d7822:	bd70      	pop	{r4, r5, r6, pc}

000d7824 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7824:	b530      	push	{r4, r5, lr}
   d7826:	b08b      	sub	sp, #44	; 0x2c
   d7828:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d782a:	4601      	mov	r1, r0
   d782c:	a804      	add	r0, sp, #16
   d782e:	f7ff ffb7 	bl	d77a0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d7832:	a804      	add	r0, sp, #16
   d7834:	f001 fb65 	bl	d8f02 <_ZN5spark18JSONObjectIterator4nextEv>
   d7838:	b1e8      	cbz	r0, d7876 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d783a:	a904      	add	r1, sp, #16
   d783c:	4668      	mov	r0, sp
   d783e:	f7ff ffdb 	bl	d77f8 <_ZNK5spark18JSONObjectIterator4nameEv>
   d7842:	490f      	ldr	r1, [pc, #60]	; (d7880 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d7844:	9802      	ldr	r0, [sp, #8]
   d7846:	f7ff fe91 	bl	d756c <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d784a:	4604      	mov	r4, r0
   d784c:	b110      	cbz	r0, d7854 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d784e:	1c2c      	adds	r4, r5, #0
   d7850:	bf18      	it	ne
   d7852:	2401      	movne	r4, #1
   d7854:	a801      	add	r0, sp, #4
   d7856:	f7fe ff6c 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d785a:	2c00      	cmp	r4, #0
   d785c:	d0e9      	beq.n	d7832 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d785e:	a904      	add	r1, sp, #16
   d7860:	4668      	mov	r0, sp
   d7862:	f7ff ffb3 	bl	d77cc <_ZNK5spark18JSONObjectIterator5valueEv>
   d7866:	4668      	mov	r0, sp
   d7868:	f001 fb2b 	bl	d8ec2 <_ZNK5spark9JSONValue5toIntEv>
   d786c:	6028      	str	r0, [r5, #0]
   d786e:	a801      	add	r0, sp, #4
   d7870:	f7fe ff5f 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7874:	e7dd      	b.n	d7832 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d7876:	a805      	add	r0, sp, #20
   d7878:	f7fe ff5b 	bl	d6732 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d787c:	b00b      	add	sp, #44	; 0x2c
   d787e:	bd30      	pop	{r4, r5, pc}
   d7880:	000dabcc 	.word	0x000dabcc

000d7884 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7884:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7886:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d7888:	4620      	mov	r0, r4
   d788a:	4913      	ldr	r1, [pc, #76]	; (d78d8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d788c:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d788e:	f002 f827 	bl	d98e0 <strcmp>
   d7892:	b940      	cbnz	r0, d78a6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d7894:	f000 fffc 	bl	d8890 <_Z16_fetch_usbserialv>
   d7898:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d789c:	f000 ffe8 	bl	d8870 <_ZN9USBSerial5beginEl>
        return &Serial;
   d78a0:	f000 fff6 	bl	d8890 <_Z16_fetch_usbserialv>
   d78a4:	e015      	b.n	d78d2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d78a6:	490d      	ldr	r1, [pc, #52]	; (d78dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d78a8:	4620      	mov	r0, r4
   d78aa:	f002 f819 	bl	d98e0 <strcmp>
   d78ae:	b978      	cbnz	r0, d78d0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d78b0:	a902      	add	r1, sp, #8
   d78b2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d78b6:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d78ba:	4628      	mov	r0, r5
   d78bc:	f7ff ffb2 	bl	d7824 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d78c0:	f001 f872 	bl	d89a8 <_Z22__fetch_global_Serial1v>
   d78c4:	9901      	ldr	r1, [sp, #4]
   d78c6:	f001 f865 	bl	d8994 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d78ca:	f001 f86d 	bl	d89a8 <_Z22__fetch_global_Serial1v>
   d78ce:	e000      	b.n	d78d2 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d78d0:	2000      	movs	r0, #0
}
   d78d2:	b003      	add	sp, #12
   d78d4:	bd30      	pop	{r4, r5, pc}
   d78d6:	bf00      	nop
   d78d8:	000dabd1 	.word	0x000dabd1
   d78dc:	000dabd8 	.word	0x000dabd8

000d78e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d78e0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d78e2:	6804      	ldr	r4, [r0, #0]
   d78e4:	6843      	ldr	r3, [r0, #4]
   d78e6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d78e8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d78ea:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d78ee:	42a6      	cmp	r6, r4
   d78f0:	d005      	beq.n	d78fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d78f2:	f104 0008 	add.w	r0, r4, #8
   d78f6:	f7ff fff3 	bl	d78e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d78fa:	3414      	adds	r4, #20
   d78fc:	e7f7      	b.n	d78ee <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d78fe:	6828      	ldr	r0, [r5, #0]
   d7900:	f7fd ff58 	bl	d57b4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7904:	4628      	mov	r0, r5
   d7906:	bd70      	pop	{r4, r5, r6, pc}

000d7908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7908:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d790a:	6804      	ldr	r4, [r0, #0]
   d790c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d790e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7910:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7914:	42a6      	cmp	r6, r4
   d7916:	d004      	beq.n	d7922 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7918:	4620      	mov	r0, r4
   d791a:	f7fd fff1 	bl	d5900 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d791e:	3410      	adds	r4, #16
   d7920:	e7f8      	b.n	d7914 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7922:	6828      	ldr	r0, [r5, #0]
   d7924:	f7fd ff46 	bl	d57b4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d7928:	4628      	mov	r0, r5
   d792a:	bd70      	pop	{r4, r5, r6, pc}

000d792c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d792c:	b510      	push	{r4, lr}
   d792e:	4604      	mov	r4, r0
   d7930:	300c      	adds	r0, #12
   d7932:	f7ff ffd5 	bl	d78e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7936:	4620      	mov	r0, r4
   d7938:	f7ff ffe6 	bl	d7908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d793c:	4620      	mov	r0, r4
   d793e:	bd10      	pop	{r4, pc}

000d7940 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7940:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d7942:	4b04      	ldr	r3, [pc, #16]	; (d7954 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d7944:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d7946:	f840 3b04 	str.w	r3, [r0], #4
   d794a:	f7ff ffef 	bl	d792c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d794e:	4620      	mov	r0, r4
   d7950:	bd10      	pop	{r4, pc}
   d7952:	bf00      	nop
   d7954:	000da238 	.word	0x000da238

000d7958 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7958:	b510      	push	{r4, lr}
   d795a:	4604      	mov	r4, r0
   d795c:	f7ff fff0 	bl	d7940 <_ZN5spark16StreamLogHandlerD1Ev>
   d7960:	4620      	mov	r0, r4
   d7962:	2124      	movs	r1, #36	; 0x24
   d7964:	f001 fc9c 	bl	d92a0 <_ZdlPvj>
   d7968:	4620      	mov	r0, r4
   d796a:	bd10      	pop	{r4, pc}

000d796c <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d796c:	b510      	push	{r4, lr}
   d796e:	4b03      	ldr	r3, [pc, #12]	; (d797c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7970:	6003      	str	r3, [r0, #0]
   d7972:	4604      	mov	r4, r0
   d7974:	f7ff ffe4 	bl	d7940 <_ZN5spark16StreamLogHandlerD1Ev>
   d7978:	4620      	mov	r0, r4
   d797a:	bd10      	pop	{r4, pc}
   d797c:	000dabbc 	.word	0x000dabbc

000d7980 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7980:	b510      	push	{r4, lr}
   d7982:	4604      	mov	r4, r0
   d7984:	f7ff fff2 	bl	d796c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7988:	4620      	mov	r0, r4
   d798a:	2124      	movs	r1, #36	; 0x24
   d798c:	f001 fc88 	bl	d92a0 <_ZdlPvj>
   d7990:	4620      	mov	r0, r4
   d7992:	bd10      	pop	{r4, pc}

000d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d7994:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7996:	6803      	ldr	r3, [r0, #0]
   d7998:	4604      	mov	r4, r0
   d799a:	6818      	ldr	r0, [r3, #0]
   d799c:	f7fd fd4e 	bl	d543c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d79a0:	4620      	mov	r0, r4
   d79a2:	bd10      	pop	{r4, pc}

000d79a4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d79a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79a8:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d79aa:	4b1b      	ldr	r3, [pc, #108]	; (d7a18 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d79ac:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d79ae:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d79b2:	b085      	sub	sp, #20
   d79b4:	4682      	mov	sl, r0
   d79b6:	460e      	mov	r6, r1
   d79b8:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d79ba:	bb53      	cbnz	r3, d7a12 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d79bc:	f7ff fec0 	bl	d7740 <_ZN5spark10LogManager8instanceEv>
   d79c0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d79c2:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d79c4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d79c6:	f7ff fde5 	bl	d7594 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d79ca:	7b23      	ldrb	r3, [r4, #12]
   d79cc:	b9f3      	cbnz	r3, d7a0c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d79ce:	2301      	movs	r3, #1
   d79d0:	7323      	strb	r3, [r4, #12]
   d79d2:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d79d4:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d79d6:	b2f6      	uxtb	r6, r6
   d79d8:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d79dc:	454d      	cmp	r5, r9
   d79de:	d013      	beq.n	d7a08 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d79e0:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d79e4:	4641      	mov	r1, r8
   d79e6:	1d38      	adds	r0, r7, #4
   d79e8:	f7ff fe30 	bl	d764c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d79ec:	4286      	cmp	r6, r0
   d79ee:	d3f5      	bcc.n	d79dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d79f0:	683b      	ldr	r3, [r7, #0]
   d79f2:	f8cd b000 	str.w	fp, [sp]
   d79f6:	689b      	ldr	r3, [r3, #8]
   d79f8:	469e      	mov	lr, r3
   d79fa:	4638      	mov	r0, r7
   d79fc:	4643      	mov	r3, r8
   d79fe:	4632      	mov	r2, r6
   d7a00:	4651      	mov	r1, sl
   d7a02:	4677      	mov	r7, lr
   d7a04:	47b8      	blx	r7
   d7a06:	e7e9      	b.n	d79dc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7a08:	2300      	movs	r3, #0
   d7a0a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d7a0c:	a803      	add	r0, sp, #12
   d7a0e:	f7ff ffc1 	bl	d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d7a12:	b005      	add	sp, #20
   d7a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a18:	e000ed00 	.word	0xe000ed00

000d7a1c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7a1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a20:	4699      	mov	r9, r3
   d7a22:	4b19      	ldr	r3, [pc, #100]	; (d7a88 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d7a24:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7a2a:	4607      	mov	r7, r0
   d7a2c:	4688      	mov	r8, r1
   d7a2e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7a30:	bb33      	cbnz	r3, d7a80 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d7a32:	f7ff fe85 	bl	d7740 <_ZN5spark10LogManager8instanceEv>
   d7a36:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7a38:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7a3a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7a3c:	f7ff fdaa 	bl	d7594 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d7a40:	7b23      	ldrb	r3, [r4, #12]
   d7a42:	b9d3      	cbnz	r3, d7a7a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7a44:	2301      	movs	r3, #1
   d7a46:	7323      	strb	r3, [r4, #12]
   d7a48:	6825      	ldr	r5, [r4, #0]
   d7a4a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d7a4c:	fa5f fb86 	uxtb.w	fp, r6
   d7a50:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d7a54:	4555      	cmp	r5, sl
   d7a56:	d00e      	beq.n	d7a76 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d7a58:	f855 6b04 	ldr.w	r6, [r5], #4
   d7a5c:	4649      	mov	r1, r9
   d7a5e:	1d30      	adds	r0, r6, #4
   d7a60:	f7ff fdf4 	bl	d764c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7a64:	4583      	cmp	fp, r0
   d7a66:	d3f5      	bcc.n	d7a54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d7a68:	6833      	ldr	r3, [r6, #0]
   d7a6a:	4642      	mov	r2, r8
   d7a6c:	68db      	ldr	r3, [r3, #12]
   d7a6e:	4639      	mov	r1, r7
   d7a70:	4630      	mov	r0, r6
   d7a72:	4798      	blx	r3
   d7a74:	e7ee      	b.n	d7a54 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7a76:	2300      	movs	r3, #0
   d7a78:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d7a7a:	a801      	add	r0, sp, #4
   d7a7c:	f7ff ff8a 	bl	d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d7a80:	b003      	add	sp, #12
   d7a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7a86:	bf00      	nop
   d7a88:	e000ed00 	.word	0xe000ed00

000d7a8c <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7a8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7a90:	4b15      	ldr	r3, [pc, #84]	; (d7ae8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d7a92:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7a94:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7a98:	4604      	mov	r4, r0
   d7a9a:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7a9c:	b9fb      	cbnz	r3, d7ade <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d7a9e:	f7ff fe4f 	bl	d7740 <_ZN5spark10LogManager8instanceEv>
   d7aa2:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d7aa4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7aa6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7aa8:	f7ff fd74 	bl	d7594 <_ZN14RecursiveMutex4lockEv>
   d7aac:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d7ab0:	2646      	movs	r6, #70	; 0x46
   d7ab2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7ab6:	42af      	cmp	r7, r5
   d7ab8:	d107      	bne.n	d7aca <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d7aba:	a801      	add	r0, sp, #4
   d7abc:	f7ff ff6a 	bl	d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d7ac0:	42b4      	cmp	r4, r6
   d7ac2:	bfb4      	ite	lt
   d7ac4:	2000      	movlt	r0, #0
   d7ac6:	2001      	movge	r0, #1
   d7ac8:	e00a      	b.n	d7ae0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d7aca:	f855 0b04 	ldr.w	r0, [r5], #4
   d7ace:	4641      	mov	r1, r8
   d7ad0:	3004      	adds	r0, #4
   d7ad2:	f7ff fdbb 	bl	d764c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7ad6:	4286      	cmp	r6, r0
   d7ad8:	bfa8      	it	ge
   d7ada:	4606      	movge	r6, r0
   d7adc:	e7eb      	b.n	d7ab6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d7ade:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d7ae0:	b002      	add	sp, #8
   d7ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7ae6:	bf00      	nop
   d7ae8:	e000ed00 	.word	0xe000ed00

000d7aec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7aec:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d7aee:	6803      	ldr	r3, [r0, #0]
   d7af0:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7af2:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7af4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7af8:	429a      	cmp	r2, r3
   d7afa:	4618      	mov	r0, r3
   d7afc:	d00e      	beq.n	d7b1c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d7afe:	6806      	ldr	r6, [r0, #0]
   d7b00:	680d      	ldr	r5, [r1, #0]
   d7b02:	42ae      	cmp	r6, r5
   d7b04:	f103 0304 	add.w	r3, r3, #4
   d7b08:	d1f6      	bne.n	d7af8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7b0a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7b0c:	1a52      	subs	r2, r2, r1
   d7b0e:	f001 fe83 	bl	d9818 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d7b12:	6863      	ldr	r3, [r4, #4]
   d7b14:	3b01      	subs	r3, #1
   d7b16:	6063      	str	r3, [r4, #4]
    return true;
   d7b18:	2001      	movs	r0, #1
}
   d7b1a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7b1c:	2000      	movs	r0, #0
   d7b1e:	bd70      	pop	{r4, r5, r6, pc}

000d7b20 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7b20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7b22:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7b24:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d7b26:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7b28:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d7b2a:	f7ff fd33 	bl	d7594 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7b2e:	a901      	add	r1, sp, #4
   d7b30:	4620      	mov	r0, r4
   d7b32:	f7ff ffdb 	bl	d7aec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7b36:	b920      	cbnz	r0, d7b42 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7b38:	a803      	add	r0, sp, #12
   d7b3a:	f7ff ff2b 	bl	d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d7b3e:	b004      	add	sp, #16
   d7b40:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7b42:	6863      	ldr	r3, [r4, #4]
   d7b44:	2b00      	cmp	r3, #0
   d7b46:	d1f7      	bne.n	d7b38 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d7b48:	f7ff fe24 	bl	d7794 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d7b4c:	e7f4      	b.n	d7b38 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d7b4e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d7b4e:	b570      	push	{r4, r5, r6, lr}
   d7b50:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7b52:	6943      	ldr	r3, [r0, #20]
   d7b54:	2618      	movs	r6, #24
   d7b56:	4604      	mov	r4, r0
   d7b58:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7b5c:	42ae      	cmp	r6, r5
   d7b5e:	d015      	beq.n	d7b8c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7b60:	f105 0110 	add.w	r1, r5, #16
   d7b64:	4620      	mov	r0, r4
   d7b66:	f7ff ffc1 	bl	d7aec <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7b6a:	6863      	ldr	r3, [r4, #4]
   d7b6c:	b90b      	cbnz	r3, d7b72 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7b6e:	f7ff fe11 	bl	d7794 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d7b72:	69e0      	ldr	r0, [r4, #28]
   d7b74:	6929      	ldr	r1, [r5, #16]
   d7b76:	6803      	ldr	r3, [r0, #0]
   d7b78:	68db      	ldr	r3, [r3, #12]
   d7b7a:	4798      	blx	r3
        if (h.stream) {
   d7b7c:	6969      	ldr	r1, [r5, #20]
   d7b7e:	b119      	cbz	r1, d7b88 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7b80:	6a20      	ldr	r0, [r4, #32]
   d7b82:	6803      	ldr	r3, [r0, #0]
   d7b84:	68db      	ldr	r3, [r3, #12]
   d7b86:	4798      	blx	r3
   d7b88:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d7b8a:	e7e7      	b.n	d7b5c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7b8c:	6925      	ldr	r5, [r4, #16]
   d7b8e:	6963      	ldr	r3, [r4, #20]
   d7b90:	2618      	movs	r6, #24
   d7b92:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7b96:	42b5      	cmp	r5, r6
   d7b98:	d004      	beq.n	d7ba4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d7b9a:	4628      	mov	r0, r5
   d7b9c:	f7fd feb0 	bl	d5900 <_ZN6StringD1Ev>
   d7ba0:	3518      	adds	r5, #24
   d7ba2:	e7f8      	b.n	d7b96 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7ba4:	2300      	movs	r3, #0
   d7ba6:	6163      	str	r3, [r4, #20]
   d7ba8:	bd70      	pop	{r4, r5, r6, pc}

000d7baa <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d7baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7bac:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7bae:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d7bb0:	f7ff fdf0 	bl	d7794 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7bb4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d7bb8:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d7bbc:	f7ff fcea 	bl	d7594 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d7bc0:	4620      	mov	r0, r4
   d7bc2:	f7ff ffc4 	bl	d7b4e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d7bc6:	4628      	mov	r0, r5
   d7bc8:	f7ff fee4 	bl	d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7bcc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7bce:	b108      	cbz	r0, d7bd4 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d7bd0:	f7fd fc24 	bl	d541c <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7bd4:	6925      	ldr	r5, [r4, #16]
   d7bd6:	6963      	ldr	r3, [r4, #20]
   d7bd8:	2618      	movs	r6, #24
   d7bda:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7bde:	42b5      	cmp	r5, r6
   d7be0:	d004      	beq.n	d7bec <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d7be2:	4628      	mov	r0, r5
   d7be4:	f7fd fe8c 	bl	d5900 <_ZN6StringD1Ev>
   d7be8:	3518      	adds	r5, #24
   d7bea:	e7f8      	b.n	d7bde <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7bec:	6920      	ldr	r0, [r4, #16]
   d7bee:	f7fd fde1 	bl	d57b4 <free>
   d7bf2:	6820      	ldr	r0, [r4, #0]
   d7bf4:	f7fd fdde 	bl	d57b4 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d7bf8:	4620      	mov	r0, r4
   d7bfa:	b002      	add	sp, #8
   d7bfc:	bd70      	pop	{r4, r5, r6, pc}

000d7bfe <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7bfe:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7c00:	680a      	ldr	r2, [r1, #0]
   d7c02:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c04:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c06:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7c08:	684a      	ldr	r2, [r1, #4]
   d7c0a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c0c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7c0e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7c10:	688a      	ldr	r2, [r1, #8]
   d7c12:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7c14:	608b      	str	r3, [r1, #8]
   d7c16:	4770      	bx	lr

000d7c18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7c18:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7c1a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7c1c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7c1e:	6003      	str	r3, [r0, #0]
   d7c20:	6043      	str	r3, [r0, #4]
   d7c22:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7c24:	f7ff ffeb 	bl	d7bfe <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d7c28:	4620      	mov	r0, r4
   d7c2a:	bd10      	pop	{r4, pc}

000d7c2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7c2c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c30:	4604      	mov	r4, r0
   d7c32:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7c34:	d925      	bls.n	d7c82 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d7c36:	4290      	cmp	r0, r2
   d7c38:	d224      	bcs.n	d7c84 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d7c3a:	1a55      	subs	r5, r2, r1
   d7c3c:	3d14      	subs	r5, #20
   d7c3e:	442c      	add	r4, r5
   d7c40:	f1a1 0714 	sub.w	r7, r1, #20
   d7c44:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7c48:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7c4a:	f1a5 0308 	sub.w	r3, r5, #8
   d7c4e:	429f      	cmp	r7, r3
   d7c50:	d037      	beq.n	d7cc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d7c52:	b184      	cbz	r4, d7c76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7c54:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7c58:	6023      	str	r3, [r4, #0]
   d7c5a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7c5e:	80a3      	strh	r3, [r4, #4]
   d7c60:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7c64:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7c66:	60a6      	str	r6, [r4, #8]
   d7c68:	60e6      	str	r6, [r4, #12]
   d7c6a:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7c6c:	4629      	mov	r1, r5
   d7c6e:	f104 0008 	add.w	r0, r4, #8
   d7c72:	f7ff ffc4 	bl	d7bfe <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7c76:	4628      	mov	r0, r5
   d7c78:	f7ff fe32 	bl	d78e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7c7c:	3c14      	subs	r4, #20
   d7c7e:	3d14      	subs	r5, #20
   d7c80:	e7e3      	b.n	d7c4a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7c82:	d01e      	beq.n	d7cc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d7c84:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7c88:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7c8a:	f1a5 0308 	sub.w	r3, r5, #8
   d7c8e:	429e      	cmp	r6, r3
   d7c90:	d017      	beq.n	d7cc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d7c92:	b184      	cbz	r4, d7cb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d7c94:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d7c98:	6023      	str	r3, [r4, #0]
   d7c9a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d7c9e:	80a3      	strh	r3, [r4, #4]
   d7ca0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d7ca4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7ca6:	60a7      	str	r7, [r4, #8]
   d7ca8:	60e7      	str	r7, [r4, #12]
   d7caa:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7cac:	4629      	mov	r1, r5
   d7cae:	f104 0008 	add.w	r0, r4, #8
   d7cb2:	f7ff ffa4 	bl	d7bfe <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d7cb6:	4628      	mov	r0, r5
   d7cb8:	f7ff fe12 	bl	d78e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7cbc:	3414      	adds	r4, #20
   d7cbe:	3514      	adds	r5, #20
   d7cc0:	e7e3      	b.n	d7c8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d7cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7cc6:	6845      	ldr	r5, [r0, #4]
   d7cc8:	6883      	ldr	r3, [r0, #8]
   d7cca:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7ccc:	4604      	mov	r4, r0
   d7cce:	460e      	mov	r6, r1
   d7cd0:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7cd2:	db0e      	blt.n	d7cf2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d7cd4:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7cd6:	2d00      	cmp	r5, #0
   d7cd8:	dd05      	ble.n	d7ce6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d7cda:	00a9      	lsls	r1, r5, #2
   d7cdc:	6800      	ldr	r0, [r0, #0]
   d7cde:	f7fd fd71 	bl	d57c4 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7ce2:	b920      	cbnz	r0, d7cee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d7ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7ce6:	6800      	ldr	r0, [r0, #0]
   d7ce8:	f7fd fd64 	bl	d57b4 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7cec:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7cee:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7cf0:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7cf2:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7cf4:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7cf6:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7cfa:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d7cfe:	1a52      	subs	r2, r2, r1
   d7d00:	1d08      	adds	r0, r1, #4
   d7d02:	f001 fd89 	bl	d9818 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7d06:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7d0a:	6863      	ldr	r3, [r4, #4]
   d7d0c:	3301      	adds	r3, #1
   d7d0e:	6063      	str	r3, [r4, #4]
   d7d10:	2001      	movs	r0, #1
    return true;
}
   d7d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d14 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7d14:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7d16:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7d18:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7d1a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7d1c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7d1e:	f7ff fc39 	bl	d7594 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d7d22:	6823      	ldr	r3, [r4, #0]
   d7d24:	6861      	ldr	r1, [r4, #4]
   d7d26:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7d2a:	4283      	cmp	r3, r0
   d7d2c:	461a      	mov	r2, r3
   d7d2e:	d009      	beq.n	d7d44 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d7d30:	6812      	ldr	r2, [r2, #0]
   d7d32:	42aa      	cmp	r2, r5
   d7d34:	f103 0304 	add.w	r3, r3, #4
   d7d38:	d1f7      	bne.n	d7d2a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d7d3a:	a801      	add	r0, sp, #4
   d7d3c:	f7ff fe2a 	bl	d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7d40:	2500      	movs	r5, #0
   d7d42:	e00e      	b.n	d7d62 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7d44:	462a      	mov	r2, r5
   d7d46:	4620      	mov	r0, r4
   d7d48:	f7ff ffbc 	bl	d7cc4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7d4c:	4605      	mov	r5, r0
   d7d4e:	2800      	cmp	r0, #0
   d7d50:	d0f3      	beq.n	d7d3a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d7d52:	6863      	ldr	r3, [r4, #4]
   d7d54:	2b01      	cmp	r3, #1
   d7d56:	d101      	bne.n	d7d5c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d7d58:	f7ff fd10 	bl	d777c <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d7d5c:	a801      	add	r0, sp, #4
   d7d5e:	f7ff fe19 	bl	d7994 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d7d62:	4628      	mov	r0, r5
   d7d64:	b003      	add	sp, #12
   d7d66:	bd30      	pop	{r4, r5, pc}

000d7d68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7d68:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d6c:	4606      	mov	r6, r0
   d7d6e:	460c      	mov	r4, r1
   d7d70:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7d72:	d914      	bls.n	d7d9e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7d74:	4290      	cmp	r0, r2
   d7d76:	d213      	bcs.n	d7da0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7d78:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d7d7c:	1a6c      	subs	r4, r5, r1
   d7d7e:	f1a1 0710 	sub.w	r7, r1, #16
   d7d82:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7d84:	42af      	cmp	r7, r5
   d7d86:	d018      	beq.n	d7dba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7d88:	b11c      	cbz	r4, d7d92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7d8a:	4629      	mov	r1, r5
   d7d8c:	4620      	mov	r0, r4
   d7d8e:	f7fd fda7 	bl	d58e0 <_ZN6StringC1EOS_>
                end->~T();
   d7d92:	4628      	mov	r0, r5
   d7d94:	f7fd fdb4 	bl	d5900 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7d98:	3d10      	subs	r5, #16
   d7d9a:	3c10      	subs	r4, #16
   d7d9c:	e7f2      	b.n	d7d84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7d9e:	d00c      	beq.n	d7dba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7da0:	42ac      	cmp	r4, r5
   d7da2:	d00a      	beq.n	d7dba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7da4:	b11e      	cbz	r6, d7dae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7da6:	4621      	mov	r1, r4
   d7da8:	4630      	mov	r0, r6
   d7daa:	f7fd fd99 	bl	d58e0 <_ZN6StringC1EOS_>
                p->~T();
   d7dae:	4620      	mov	r0, r4
   d7db0:	f7fd fda6 	bl	d5900 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7db4:	3410      	adds	r4, #16
   d7db6:	3610      	adds	r6, #16
   d7db8:	e7f2      	b.n	d7da0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d7dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7dbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7dbc:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7dbe:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7dc0:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7dc2:	dd0b      	ble.n	d7ddc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7dc4:	0130      	lsls	r0, r6, #4
   d7dc6:	f7fd fced 	bl	d57a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7dca:	4604      	mov	r4, r0
   d7dcc:	b170      	cbz	r0, d7dec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7dce:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7dd2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7dd6:	f7ff ffc7 	bl	d7d68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d7dda:	e000      	b.n	d7dde <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7ddc:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7dde:	6828      	ldr	r0, [r5, #0]
   d7de0:	f7fd fce8 	bl	d57b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7de4:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7de6:	60ae      	str	r6, [r5, #8]
        return true;
   d7de8:	2001      	movs	r0, #1
   d7dea:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7dec:	bd70      	pop	{r4, r5, r6, pc}

000d7dee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7dee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7df2:	2300      	movs	r3, #0
   d7df4:	b095      	sub	sp, #84	; 0x54
   d7df6:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7df8:	2246      	movs	r2, #70	; 0x46
   d7dfa:	6003      	str	r3, [r0, #0]
   d7dfc:	6043      	str	r3, [r0, #4]
   d7dfe:	6083      	str	r3, [r0, #8]
   d7e00:	60c3      	str	r3, [r0, #12]
   d7e02:	6103      	str	r3, [r0, #16]
   d7e04:	6143      	str	r3, [r0, #20]
   d7e06:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7e08:	9102      	str	r1, [sp, #8]
   d7e0a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d7e0e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7e10:	4299      	cmp	r1, r3
   d7e12:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e14:	9309      	str	r3, [sp, #36]	; 0x24
   d7e16:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7e18:	f340 809d 	ble.w	d7f56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7e1c:	a808      	add	r0, sp, #32
   d7e1e:	f7ff ffcd 	bl	d7dbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7e22:	2800      	cmp	r0, #0
   d7e24:	f040 8097 	bne.w	d7f56 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7e28:	e08e      	b.n	d7f48 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d7e2a:	4621      	mov	r1, r4
   d7e2c:	a80b      	add	r0, sp, #44	; 0x2c
   d7e2e:	f7fd fd57 	bl	d58e0 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7e32:	a90b      	add	r1, sp, #44	; 0x2c
   d7e34:	a80f      	add	r0, sp, #60	; 0x3c
   d7e36:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7e38:	f7fd fd52 	bl	d58e0 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e3c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7e3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7e40:	4299      	cmp	r1, r3
   d7e42:	f2c0 80ce 	blt.w	d7fe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d7e46:	3101      	adds	r1, #1
   d7e48:	a808      	add	r0, sp, #32
   d7e4a:	f7ff ffb7 	bl	d7dbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7e4e:	2800      	cmp	r0, #0
   d7e50:	f040 80c7 	bne.w	d7fe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7e54:	a80f      	add	r0, sp, #60	; 0x3c
   d7e56:	f7fd fd53 	bl	d5900 <_ZN6StringD1Ev>
   d7e5a:	a80b      	add	r0, sp, #44	; 0x2c
   d7e5c:	f7fd fd50 	bl	d5900 <_ZN6StringD1Ev>
   d7e60:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d7e62:	42a7      	cmp	r7, r4
   d7e64:	d1e1      	bne.n	d7e2a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7e66:	2600      	movs	r6, #0
   d7e68:	960b      	str	r6, [sp, #44]	; 0x2c
   d7e6a:	960c      	str	r6, [sp, #48]	; 0x30
   d7e6c:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7e6e:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7e72:	429e      	cmp	r6, r3
   d7e74:	f280 80a8 	bge.w	d7fc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7e78:	0133      	lsls	r3, r6, #4
   d7e7a:	9a08      	ldr	r2, [sp, #32]
   d7e7c:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d7e7e:	9306      	str	r3, [sp, #24]
        if (!category) {
   d7e80:	2b00      	cmp	r3, #0
   d7e82:	f000 809f 	beq.w	d7fc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d7e86:	2314      	movs	r3, #20
   d7e88:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d7e8a:	f8cd 901c 	str.w	r9, [sp, #28]
   d7e8e:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7e90:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7e92:	a907      	add	r1, sp, #28
   d7e94:	a806      	add	r0, sp, #24
   d7e96:	f7ff fb2c 	bl	d74f2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7e9a:	4607      	mov	r7, r0
   d7e9c:	2800      	cmp	r0, #0
   d7e9e:	f000 8091 	beq.w	d7fc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d7ea2:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d7ea4:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d7ea6:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d7eaa:	9a07      	ldr	r2, [sp, #28]
   d7eac:	4620      	mov	r0, r4
   d7eae:	f7ff fb8d 	bl	d75cc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7eb2:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d7eb6:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7eb8:	f1b8 0f00 	cmp.w	r8, #0
   d7ebc:	d153      	bne.n	d7f66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d7ebe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7ec2:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7eca:	970f      	str	r7, [sp, #60]	; 0x3c
   d7ecc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7ed0:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7ed4:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7ed8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7edc:	6867      	ldr	r7, [r4, #4]
   d7ede:	68a3      	ldr	r3, [r4, #8]
   d7ee0:	429f      	cmp	r7, r3
   d7ee2:	da4f      	bge.n	d7f84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7ee4:	9b00      	ldr	r3, [sp, #0]
   d7ee6:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d7eea:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7eec:	2214      	movs	r2, #20
   d7eee:	4353      	muls	r3, r2
   d7ef0:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7ef4:	fb02 b201 	mla	r2, r2, r1, fp
   d7ef8:	f107 0014 	add.w	r0, r7, #20
   d7efc:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7efe:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7f00:	f7ff fe94 	bl	d7c2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7f04:	b1a7      	cbz	r7, d7f30 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7f06:	9b03      	ldr	r3, [sp, #12]
   d7f08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d7f0a:	f84b 2003 	str.w	r2, [fp, r3]
   d7f0e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7f12:	80bb      	strh	r3, [r7, #4]
   d7f14:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7f18:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7f1a:	f8c7 9008 	str.w	r9, [r7, #8]
   d7f1e:	f8c7 900c 	str.w	r9, [r7, #12]
   d7f22:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7f26:	a911      	add	r1, sp, #68	; 0x44
   d7f28:	f107 0008 	add.w	r0, r7, #8
   d7f2c:	f7ff fe67 	bl	d7bfe <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7f30:	6863      	ldr	r3, [r4, #4]
   d7f32:	3301      	adds	r3, #1
   d7f34:	6063      	str	r3, [r4, #4]
   d7f36:	a811      	add	r0, sp, #68	; 0x44
   d7f38:	f7ff fcd2 	bl	d78e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7f3c:	f1b8 0f00 	cmp.w	r8, #0
   d7f40:	d011      	beq.n	d7f66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d7f42:	a80b      	add	r0, sp, #44	; 0x2c
   d7f44:	f7ff fccc 	bl	d78e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7f48:	a808      	add	r0, sp, #32
   d7f4a:	f7ff fcdd 	bl	d7908 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d7f4e:	4628      	mov	r0, r5
   d7f50:	b015      	add	sp, #84	; 0x54
   d7f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7f56:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7f5a:	f8da 3004 	ldr.w	r3, [sl, #4]
   d7f5e:	2714      	movs	r7, #20
   d7f60:	fb07 4703 	mla	r7, r7, r3, r4
   d7f64:	e77d      	b.n	d7e62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d7f66:	6823      	ldr	r3, [r4, #0]
   d7f68:	9a00      	ldr	r2, [sp, #0]
   d7f6a:	2414      	movs	r4, #20
   d7f6c:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d7f70:	9b06      	ldr	r3, [sp, #24]
   d7f72:	781b      	ldrb	r3, [r3, #0]
   d7f74:	bb23      	cbnz	r3, d7fc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d7f76:	f8da 3000 	ldr.w	r3, [sl]
   d7f7a:	9a01      	ldr	r2, [sp, #4]
   d7f7c:	4413      	add	r3, r2
   d7f7e:	7c1b      	ldrb	r3, [r3, #16]
   d7f80:	80e3      	strh	r3, [r4, #6]
   d7f82:	e01d      	b.n	d7fc0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7f84:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7f86:	2f00      	cmp	r7, #0
   d7f88:	dd0f      	ble.n	d7faa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7f8a:	2314      	movs	r3, #20
   d7f8c:	fb03 f007 	mul.w	r0, r3, r7
   d7f90:	9303      	str	r3, [sp, #12]
   d7f92:	f7fd fc07 	bl	d57a4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7f96:	4683      	mov	fp, r0
   d7f98:	b178      	cbz	r0, d7fba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d7f9a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7f9e:	9b03      	ldr	r3, [sp, #12]
   d7fa0:	fb03 1202 	mla	r2, r3, r2, r1
   d7fa4:	f7ff fe42 	bl	d7c2c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7fa8:	e000      	b.n	d7fac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7faa:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7fac:	6820      	ldr	r0, [r4, #0]
   d7fae:	f7fd fc01 	bl	d57b4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7fb2:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d7fb6:	60a7      	str	r7, [r4, #8]
   d7fb8:	e794      	b.n	d7ee4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7fba:	f04f 0801 	mov.w	r8, #1
   d7fbe:	e7ba      	b.n	d7f36 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7fc0:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7fc2:	e766      	b.n	d7e92 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7fc4:	3601      	adds	r6, #1
   d7fc6:	e753      	b.n	d7e70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7fc8:	a908      	add	r1, sp, #32
   d7fca:	4628      	mov	r0, r5
   d7fcc:	f7ff fe17 	bl	d7bfe <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7fd0:	a90b      	add	r1, sp, #44	; 0x2c
   d7fd2:	f105 000c 	add.w	r0, r5, #12
   d7fd6:	f7ff fe12 	bl	d7bfe <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d7fda:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d7fde:	762b      	strb	r3, [r5, #24]
   d7fe0:	e7af      	b.n	d7f42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7fe2:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7fe4:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7fe6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7fea:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7fee:	4631      	mov	r1, r6
   d7ff0:	f106 0010 	add.w	r0, r6, #16
   d7ff4:	f7ff feb8 	bl	d7d68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7ff8:	b11e      	cbz	r6, d8002 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d7ffa:	a90f      	add	r1, sp, #60	; 0x3c
   d7ffc:	4630      	mov	r0, r6
   d7ffe:	f7fd fc6f 	bl	d58e0 <_ZN6StringC1EOS_>
    ++size_;
   d8002:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8004:	3301      	adds	r3, #1
   d8006:	9309      	str	r3, [sp, #36]	; 0x24
   d8008:	e724      	b.n	d7e54 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d800c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d800c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d800e:	4604      	mov	r4, r0
   d8010:	4b09      	ldr	r3, [pc, #36]	; (d8038 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d8012:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d8016:	4605      	mov	r5, r0
   d8018:	460e      	mov	r6, r1
        filter_(level, filters) {
   d801a:	a801      	add	r0, sp, #4
   d801c:	4611      	mov	r1, r2
   d801e:	f7fc fe3b 	bl	d4c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d8022:	aa01      	add	r2, sp, #4
   d8024:	4631      	mov	r1, r6
   d8026:	4620      	mov	r0, r4
   d8028:	f7ff fee1 	bl	d7dee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d802c:	a801      	add	r0, sp, #4
   d802e:	f7fc fd45 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d8032:	4628      	mov	r0, r5
   d8034:	b004      	add	sp, #16
   d8036:	bd70      	pop	{r4, r5, r6, pc}
   d8038:	000da238 	.word	0x000da238

000d803c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d803c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d803e:	460f      	mov	r7, r1
   d8040:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8042:	492b      	ldr	r1, [pc, #172]	; (d80f0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d8044:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d8046:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d8048:	4616      	mov	r6, r2
   d804a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d804c:	f001 fc48 	bl	d98e0 <strcmp>
   d8050:	bb28      	cbnz	r0, d809e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d8052:	2c00      	cmp	r4, #0
   d8054:	d049      	beq.n	d80ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d8056:	4629      	mov	r1, r5
   d8058:	a801      	add	r0, sp, #4
   d805a:	f7ff fddd 	bl	d7c18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d805e:	4925      	ldr	r1, [pc, #148]	; (d80f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d8060:	2024      	movs	r0, #36	; 0x24
   d8062:	f001 f921 	bl	d92a8 <_ZnwjRKSt9nothrow_t>
   d8066:	4605      	mov	r5, r0
   d8068:	b1b8      	cbz	r0, d809a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d806a:	a901      	add	r1, sp, #4
   d806c:	a804      	add	r0, sp, #16
   d806e:	f7ff fdd3 	bl	d7c18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d8072:	a904      	add	r1, sp, #16
   d8074:	a807      	add	r0, sp, #28
   d8076:	f7fc fe0f 	bl	d4c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d807a:	aa07      	add	r2, sp, #28
   d807c:	4631      	mov	r1, r6
   d807e:	4628      	mov	r0, r5
   d8080:	f7ff ffc4 	bl	d800c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d8084:	a807      	add	r0, sp, #28
   d8086:	f7fc fd19 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d808a:	4b1b      	ldr	r3, [pc, #108]	; (d80f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d808c:	602b      	str	r3, [r5, #0]
   d808e:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d8090:	a804      	add	r0, sp, #16
   d8092:	f7fc fd13 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d8096:	4b19      	ldr	r3, [pc, #100]	; (d80fc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d8098:	602b      	str	r3, [r5, #0]
   d809a:	a801      	add	r0, sp, #4
   d809c:	e01f      	b.n	d80de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d809e:	4918      	ldr	r1, [pc, #96]	; (d8100 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d80a0:	4638      	mov	r0, r7
   d80a2:	f001 fc1d 	bl	d98e0 <strcmp>
   d80a6:	b9f0      	cbnz	r0, d80e6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d80a8:	b1fc      	cbz	r4, d80ea <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d80aa:	4629      	mov	r1, r5
   d80ac:	a804      	add	r0, sp, #16
   d80ae:	f7ff fdb3 	bl	d7c18 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d80b2:	4910      	ldr	r1, [pc, #64]	; (d80f4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d80b4:	2024      	movs	r0, #36	; 0x24
   d80b6:	f001 f8f7 	bl	d92a8 <_ZnwjRKSt9nothrow_t>
   d80ba:	4605      	mov	r5, r0
   d80bc:	b170      	cbz	r0, d80dc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d80be:	a904      	add	r1, sp, #16
   d80c0:	a807      	add	r0, sp, #28
   d80c2:	f7fc fde9 	bl	d4c98 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d80c6:	aa07      	add	r2, sp, #28
   d80c8:	4631      	mov	r1, r6
   d80ca:	4628      	mov	r0, r5
   d80cc:	f7ff ff9e 	bl	d800c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d80d0:	a807      	add	r0, sp, #28
   d80d2:	f7fc fcf3 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d80d6:	4b08      	ldr	r3, [pc, #32]	; (d80f8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d80d8:	602b      	str	r3, [r5, #0]
   d80da:	622c      	str	r4, [r5, #32]
   d80dc:	a804      	add	r0, sp, #16
   d80de:	f7fc fced 	bl	d4abc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d80e2:	4628      	mov	r0, r5
   d80e4:	e002      	b.n	d80ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d80e6:	2000      	movs	r0, #0
   d80e8:	e000      	b.n	d80ec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d80ea:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d80ec:	b00b      	add	sp, #44	; 0x2c
   d80ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d80f0:	000dac2a 	.word	0x000dac2a
   d80f4:	000dae6f 	.word	0x000dae6f
   d80f8:	000dacac 	.word	0x000dacac
   d80fc:	000dabbc 	.word	0x000dabbc
   d8100:	000dac2e 	.word	0x000dac2e

000d8104 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d8104:	4b01      	ldr	r3, [pc, #4]	; (d810c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d8106:	4a02      	ldr	r2, [pc, #8]	; (d8110 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d8108:	601a      	str	r2, [r3, #0]
   d810a:	4770      	bx	lr
   d810c:	2003e3bc 	.word	0x2003e3bc
   d8110:	000dac3f 	.word	0x000dac3f

000d8114 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8118:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d811a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d811e:	4604      	mov	r4, r0
   d8120:	460e      	mov	r6, r1
   d8122:	4617      	mov	r7, r2
   d8124:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d8126:	f000 fbb3 	bl	d8890 <_Z16_fetch_usbserialv>
   d812a:	4581      	cmp	r9, r0
   d812c:	d105      	bne.n	d813a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d812e:	485a      	ldr	r0, [pc, #360]	; (d8298 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d8130:	f000 fdcd 	bl	d8cce <_ZN5spark12NetworkClass9listeningEv>
   d8134:	2800      	cmp	r0, #0
   d8136:	f040 80ac 	bne.w	d8292 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d813a:	792b      	ldrb	r3, [r5, #4]
   d813c:	071b      	lsls	r3, r3, #28
   d813e:	d505      	bpl.n	d814c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d8140:	696b      	ldr	r3, [r5, #20]
   d8142:	4a56      	ldr	r2, [pc, #344]	; (d829c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d8144:	6a20      	ldr	r0, [r4, #32]
   d8146:	2100      	movs	r1, #0
   d8148:	f7ff f985 	bl	d7456 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d814c:	f1b8 0f00 	cmp.w	r8, #0
   d8150:	d00d      	beq.n	d816e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d8152:	215b      	movs	r1, #91	; 0x5b
   d8154:	4620      	mov	r0, r4
   d8156:	f7ff fa2e 	bl	d75b6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d815a:	4641      	mov	r1, r8
   d815c:	4620      	mov	r0, r4
   d815e:	f7ff fa1c 	bl	d759a <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d8162:	6823      	ldr	r3, [r4, #0]
   d8164:	494e      	ldr	r1, [pc, #312]	; (d82a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d8166:	68db      	ldr	r3, [r3, #12]
   d8168:	2202      	movs	r2, #2
   d816a:	4620      	mov	r0, r4
   d816c:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d816e:	792b      	ldrb	r3, [r5, #4]
   d8170:	07d9      	lsls	r1, r3, #31
   d8172:	d525      	bpl.n	d81c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d8174:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d8178:	212f      	movs	r1, #47	; 0x2f
   d817a:	4640      	mov	r0, r8
   d817c:	f001 fbeb 	bl	d9956 <strrchr>
    if (s1) {
   d8180:	b108      	cbz	r0, d8186 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d8182:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d8186:	4641      	mov	r1, r8
   d8188:	4620      	mov	r0, r4
   d818a:	f7ff fa06 	bl	d759a <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d818e:	792b      	ldrb	r3, [r5, #4]
   d8190:	079a      	lsls	r2, r3, #30
   d8192:	d509      	bpl.n	d81a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d8194:	213a      	movs	r1, #58	; 0x3a
   d8196:	4620      	mov	r0, r4
   d8198:	f7ff fa0d 	bl	d75b6 <_ZN5spark16StreamLogHandler5writeEc>
   d819c:	68eb      	ldr	r3, [r5, #12]
   d819e:	4a41      	ldr	r2, [pc, #260]	; (d82a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d81a0:	6a20      	ldr	r0, [r4, #32]
   d81a2:	2100      	movs	r1, #0
   d81a4:	f7ff f957 	bl	d7456 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d81a8:	792b      	ldrb	r3, [r5, #4]
   d81aa:	f013 0f04 	tst.w	r3, #4
   d81ae:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d81b0:	bf18      	it	ne
   d81b2:	493d      	ldrne	r1, [pc, #244]	; (d82a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d81b4:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d81b6:	bf08      	it	eq
   d81b8:	493c      	ldreq	r1, [pc, #240]	; (d82ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d81ba:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d81bc:	4620      	mov	r0, r4
   d81be:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d81c0:	792b      	ldrb	r3, [r5, #4]
   d81c2:	075b      	lsls	r3, r3, #29
   d81c4:	d518      	bpl.n	d81f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d81c6:	6929      	ldr	r1, [r5, #16]
   d81c8:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d81ca:	4613      	mov	r3, r2
   d81cc:	f813 0b01 	ldrb.w	r0, [r3], #1
   d81d0:	b138      	cbz	r0, d81e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d81d2:	2820      	cmp	r0, #32
   d81d4:	d101      	bne.n	d81da <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d81d6:	4619      	mov	r1, r3
   d81d8:	e001      	b.n	d81de <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d81da:	2828      	cmp	r0, #40	; 0x28
   d81dc:	d001      	beq.n	d81e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d81de:	461a      	mov	r2, r3
   d81e0:	e7f3      	b.n	d81ca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d81e2:	6823      	ldr	r3, [r4, #0]
   d81e4:	1a52      	subs	r2, r2, r1
   d81e6:	68db      	ldr	r3, [r3, #12]
   d81e8:	4620      	mov	r0, r4
   d81ea:	4798      	blx	r3
        write("(): ", 4);
   d81ec:	6823      	ldr	r3, [r4, #0]
   d81ee:	4930      	ldr	r1, [pc, #192]	; (d82b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d81f0:	68db      	ldr	r3, [r3, #12]
   d81f2:	2204      	movs	r2, #4
   d81f4:	4620      	mov	r0, r4
   d81f6:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d81f8:	2100      	movs	r1, #0
   d81fa:	4638      	mov	r0, r7
   d81fc:	f7fd fa3e 	bl	d567c <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d8200:	4601      	mov	r1, r0
   d8202:	4620      	mov	r0, r4
   d8204:	f7ff f9c9 	bl	d759a <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d8208:	6823      	ldr	r3, [r4, #0]
   d820a:	4928      	ldr	r1, [pc, #160]	; (d82ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d820c:	68db      	ldr	r3, [r3, #12]
   d820e:	2202      	movs	r2, #2
   d8210:	4620      	mov	r0, r4
   d8212:	4798      	blx	r3
    // Message
    if (msg) {
   d8214:	b11e      	cbz	r6, d821e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d8216:	4631      	mov	r1, r6
   d8218:	4620      	mov	r0, r4
   d821a:	f7ff f9be 	bl	d759a <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d821e:	792b      	ldrb	r3, [r5, #4]
   d8220:	f013 0f30 	tst.w	r3, #48	; 0x30
   d8224:	d02d      	beq.n	d8282 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d8226:	6823      	ldr	r3, [r4, #0]
   d8228:	4922      	ldr	r1, [pc, #136]	; (d82b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d822a:	68db      	ldr	r3, [r3, #12]
   d822c:	4620      	mov	r0, r4
   d822e:	2202      	movs	r2, #2
   d8230:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d8232:	792b      	ldrb	r3, [r5, #4]
   d8234:	06d8      	lsls	r0, r3, #27
   d8236:	d50b      	bpl.n	d8250 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d8238:	6823      	ldr	r3, [r4, #0]
   d823a:	491f      	ldr	r1, [pc, #124]	; (d82b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d823c:	68db      	ldr	r3, [r3, #12]
   d823e:	2207      	movs	r2, #7
   d8240:	4620      	mov	r0, r4
   d8242:	4798      	blx	r3
   d8244:	69ab      	ldr	r3, [r5, #24]
   d8246:	4a1d      	ldr	r2, [pc, #116]	; (d82bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d8248:	6a20      	ldr	r0, [r4, #32]
   d824a:	2100      	movs	r1, #0
   d824c:	f7ff f903 	bl	d7456 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d8250:	792b      	ldrb	r3, [r5, #4]
   d8252:	0699      	lsls	r1, r3, #26
   d8254:	d511      	bpl.n	d827a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d8256:	06da      	lsls	r2, r3, #27
   d8258:	d505      	bpl.n	d8266 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d825a:	6823      	ldr	r3, [r4, #0]
   d825c:	4912      	ldr	r1, [pc, #72]	; (d82a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d825e:	68db      	ldr	r3, [r3, #12]
   d8260:	2202      	movs	r2, #2
   d8262:	4620      	mov	r0, r4
   d8264:	4798      	blx	r3
            }
            write("details = ", 10);
   d8266:	6823      	ldr	r3, [r4, #0]
   d8268:	4915      	ldr	r1, [pc, #84]	; (d82c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d826a:	68db      	ldr	r3, [r3, #12]
   d826c:	4620      	mov	r0, r4
   d826e:	220a      	movs	r2, #10
   d8270:	4798      	blx	r3
            write(attr.details);
   d8272:	69e9      	ldr	r1, [r5, #28]
   d8274:	4620      	mov	r0, r4
   d8276:	f7ff f990 	bl	d759a <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d827a:	215d      	movs	r1, #93	; 0x5d
   d827c:	4620      	mov	r0, r4
   d827e:	f7ff f99a 	bl	d75b6 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d8282:	6823      	ldr	r3, [r4, #0]
   d8284:	490f      	ldr	r1, [pc, #60]	; (d82c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d8286:	68db      	ldr	r3, [r3, #12]
   d8288:	4620      	mov	r0, r4
   d828a:	2202      	movs	r2, #2
}
   d828c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d8290:	4718      	bx	r3
   d8292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8296:	bf00      	nop
   d8298:	2003e6f8 	.word	0x2003e6f8
   d829c:	000dac43 	.word	0x000dac43
   d82a0:	000dac4a 	.word	0x000dac4a
   d82a4:	000da59f 	.word	0x000da59f
   d82a8:	000dac4d 	.word	0x000dac4d
   d82ac:	000dac52 	.word	0x000dac52
   d82b0:	000dac50 	.word	0x000dac50
   d82b4:	000dac55 	.word	0x000dac55
   d82b8:	000dac58 	.word	0x000dac58
   d82bc:	000dac60 	.word	0x000dac60
   d82c0:	000dac63 	.word	0x000dac63
   d82c4:	000dac6e 	.word	0x000dac6e

000d82c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d82c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d82cc:	b085      	sub	sp, #20
   d82ce:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d82d2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d82d4:	4606      	mov	r6, r0
   d82d6:	460f      	mov	r7, r1
   d82d8:	4691      	mov	r9, r2
   d82da:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d82dc:	f000 fad8 	bl	d8890 <_Z16_fetch_usbserialv>
   d82e0:	4580      	cmp	r8, r0
   d82e2:	d105      	bne.n	d82f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d82e4:	484a      	ldr	r0, [pc, #296]	; (d8410 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d82e6:	f000 fcf2 	bl	d8cce <_ZN5spark12NetworkClass9listeningEv>
   d82ea:	2800      	cmp	r0, #0
   d82ec:	f040 808c 	bne.w	d8408 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d82f0:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d82f2:	4a48      	ldr	r2, [pc, #288]	; (d8414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d82f4:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d82f6:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d82fa:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d82fc:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d82fe:	f88d 8008 	strb.w	r8, [sp, #8]
   d8302:	f000 fe28 	bl	d8f56 <_ZN5spark10JSONWriter11beginObjectEv>
   d8306:	4641      	mov	r1, r8
   d8308:	4648      	mov	r0, r9
   d830a:	f7fd f9b7 	bl	d567c <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d830e:	4942      	ldr	r1, [pc, #264]	; (d8418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d8310:	4680      	mov	r8, r0
   d8312:	2201      	movs	r2, #1
   d8314:	a801      	add	r0, sp, #4
   d8316:	f000 fea3 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d831a:	4641      	mov	r1, r8
   d831c:	f7ff f92d 	bl	d757a <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d8320:	b13f      	cbz	r7, d8332 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d8322:	493e      	ldr	r1, [pc, #248]	; (d841c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d8324:	2201      	movs	r2, #1
   d8326:	a801      	add	r0, sp, #4
   d8328:	f000 fe9a 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d832c:	4639      	mov	r1, r7
   d832e:	f7ff f924 	bl	d757a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d8332:	b13d      	cbz	r5, d8344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d8334:	493a      	ldr	r1, [pc, #232]	; (d8420 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d8336:	2201      	movs	r2, #1
   d8338:	a801      	add	r0, sp, #4
   d833a:	f000 fe91 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d833e:	4629      	mov	r1, r5
   d8340:	f7ff f91b 	bl	d757a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d8344:	7923      	ldrb	r3, [r4, #4]
   d8346:	07df      	lsls	r7, r3, #31
   d8348:	d50e      	bpl.n	d8368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d834a:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d834c:	212f      	movs	r1, #47	; 0x2f
   d834e:	4628      	mov	r0, r5
   d8350:	f001 fb01 	bl	d9956 <strrchr>
    if (s1) {
   d8354:	b100      	cbz	r0, d8358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d8356:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d8358:	4932      	ldr	r1, [pc, #200]	; (d8424 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d835a:	2201      	movs	r2, #1
   d835c:	a801      	add	r0, sp, #4
   d835e:	f000 fe7f 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d8362:	4629      	mov	r1, r5
   d8364:	f7ff f909 	bl	d757a <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d8368:	7923      	ldrb	r3, [r4, #4]
   d836a:	079d      	lsls	r5, r3, #30
   d836c:	d507      	bpl.n	d837e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d836e:	492e      	ldr	r1, [pc, #184]	; (d8428 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d8370:	2202      	movs	r2, #2
   d8372:	a801      	add	r0, sp, #4
   d8374:	f000 fe74 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d8378:	68e1      	ldr	r1, [r4, #12]
   d837a:	f000 fdf9 	bl	d8f70 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d837e:	7923      	ldrb	r3, [r4, #4]
   d8380:	0758      	lsls	r0, r3, #29
   d8382:	d516      	bpl.n	d83b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d8384:	6925      	ldr	r5, [r4, #16]
   d8386:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d8388:	463b      	mov	r3, r7
   d838a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d838e:	b13a      	cbz	r2, d83a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d8390:	2a20      	cmp	r2, #32
   d8392:	d101      	bne.n	d8398 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d8394:	461d      	mov	r5, r3
   d8396:	e001      	b.n	d839c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d8398:	2a28      	cmp	r2, #40	; 0x28
   d839a:	d001      	beq.n	d83a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d839c:	461f      	mov	r7, r3
   d839e:	e7f3      	b.n	d8388 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d83a0:	2202      	movs	r2, #2
   d83a2:	4922      	ldr	r1, [pc, #136]	; (d842c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d83a4:	a801      	add	r0, sp, #4
   d83a6:	f000 fe5b 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d83aa:	1b7a      	subs	r2, r7, r5
   d83ac:	4629      	mov	r1, r5
   d83ae:	f000 fe66 	bl	d907e <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d83b2:	7923      	ldrb	r3, [r4, #4]
   d83b4:	0719      	lsls	r1, r3, #28
   d83b6:	d507      	bpl.n	d83c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d83b8:	491d      	ldr	r1, [pc, #116]	; (d8430 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d83ba:	2201      	movs	r2, #1
   d83bc:	a801      	add	r0, sp, #4
   d83be:	f000 fe4f 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d83c2:	6961      	ldr	r1, [r4, #20]
   d83c4:	f000 fde6 	bl	d8f94 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d83c8:	7923      	ldrb	r3, [r4, #4]
   d83ca:	06da      	lsls	r2, r3, #27
   d83cc:	d508      	bpl.n	d83e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d83ce:	2204      	movs	r2, #4
   d83d0:	4918      	ldr	r1, [pc, #96]	; (d8434 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d83d2:	eb0d 0002 	add.w	r0, sp, r2
   d83d6:	f000 fe43 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d83da:	69a1      	ldr	r1, [r4, #24]
   d83dc:	f000 fdc8 	bl	d8f70 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d83e0:	7923      	ldrb	r3, [r4, #4]
   d83e2:	069b      	lsls	r3, r3, #26
   d83e4:	d507      	bpl.n	d83f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d83e6:	4914      	ldr	r1, [pc, #80]	; (d8438 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d83e8:	2206      	movs	r2, #6
   d83ea:	a801      	add	r0, sp, #4
   d83ec:	f000 fe38 	bl	d9060 <_ZN5spark10JSONWriter4nameEPKcj>
   d83f0:	69e1      	ldr	r1, [r4, #28]
   d83f2:	f7ff f8c2 	bl	d757a <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d83f6:	a801      	add	r0, sp, #4
   d83f8:	f000 fd97 	bl	d8f2a <_ZN5spark10JSONWriter9endObjectEv>
   d83fc:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d83fe:	490f      	ldr	r1, [pc, #60]	; (d843c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d8400:	6803      	ldr	r3, [r0, #0]
   d8402:	2202      	movs	r2, #2
   d8404:	68db      	ldr	r3, [r3, #12]
   d8406:	4798      	blx	r3
}
   d8408:	b005      	add	sp, #20
   d840a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d840e:	bf00      	nop
   d8410:	2003e6f8 	.word	0x2003e6f8
   d8414:	000daba4 	.word	0x000daba4
   d8418:	000dabd6 	.word	0x000dabd6
   d841c:	000dabe9 	.word	0x000dabe9
   d8420:	000da6a4 	.word	0x000da6a4
   d8424:	000da67f 	.word	0x000da67f
   d8428:	000dac71 	.word	0x000dac71
   d842c:	000dac74 	.word	0x000dac74
   d8430:	000dabfe 	.word	0x000dabfe
   d8434:	000dac77 	.word	0x000dac77
   d8438:	000dac7c 	.word	0x000dac7c
   d843c:	000dac6e 	.word	0x000dac6e

000d8440 <_ZN9TimeClass5localEv>:
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
}

time_t TimeClass::local()
{
   d8440:	b508      	push	{r3, lr}
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
   d8442:	f7fc ff31 	bl	d52a8 <HAL_RTC_Get_UnixTime>
   d8446:	4b03      	ldr	r3, [pc, #12]	; (d8454 <_ZN9TimeClass5localEv+0x14>)
   d8448:	681b      	ldr	r3, [r3, #0]
   d844a:	4418      	add	r0, r3
   d844c:	4b02      	ldr	r3, [pc, #8]	; (d8458 <_ZN9TimeClass5localEv+0x18>)
   d844e:	681b      	ldr	r3, [r3, #0]
}
   d8450:	4418      	add	r0, r3
   d8452:	bd08      	pop	{r3, pc}
   d8454:	2003e3c8 	.word	0x2003e3c8
   d8458:	2003e3c4 	.word	0x2003e3c4

000d845c <_ZN9TimeClass4zoneEf>:

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   d845c:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   d8460:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8468:	d40f      	bmi.n	d848a <_ZN9TimeClass4zoneEf+0x2e>
   d846a:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   d846e:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d8472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d8476:	dc08      	bgt.n	d848a <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   d8478:	eddf 7a04 	vldr	s15, [pc, #16]	; d848c <_ZN9TimeClass4zoneEf+0x30>
   d847c:	4b04      	ldr	r3, [pc, #16]	; (d8490 <_ZN9TimeClass4zoneEf+0x34>)
   d847e:	ee20 0a27 	vmul.f32	s0, s0, s15
   d8482:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   d8486:	ed83 0a00 	vstr	s0, [r3]
   d848a:	4770      	bx	lr
   d848c:	45610000 	.word	0x45610000
   d8490:	2003e3c8 	.word	0x2003e3c8

000d8494 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8494:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d8496:	4b0e      	ldr	r3, [pc, #56]	; (d84d0 <_ZN9TimeClass7timeStrEl+0x3c>)
   d8498:	681b      	ldr	r3, [r3, #0]
   d849a:	4419      	add	r1, r3
   d849c:	4b0d      	ldr	r3, [pc, #52]	; (d84d4 <_ZN9TimeClass7timeStrEl+0x40>)
   d849e:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d84a0:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d84a2:	a802      	add	r0, sp, #8
   d84a4:	4419      	add	r1, r3
   d84a6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d84aa:	f001 f8a3 	bl	d95f4 <localtime>
        char* ascstr = asctime(calendar_time);
   d84ae:	f001 f853 	bl	d9558 <asctime>
   d84b2:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d84b4:	f001 fa26 	bl	d9904 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d84b8:	4428      	add	r0, r5
   d84ba:	2300      	movs	r3, #0
   d84bc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d84c0:	4629      	mov	r1, r5
   d84c2:	4620      	mov	r0, r4
   d84c4:	f7fd fa63 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
}
   d84c8:	4620      	mov	r0, r4
   d84ca:	b003      	add	sp, #12
   d84cc:	bd30      	pop	{r4, r5, pc}
   d84ce:	bf00      	nop
   d84d0:	2003e3c8 	.word	0x2003e3c8
   d84d4:	2003e3c4 	.word	0x2003e3c4

000d84d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d84d8:	4b02      	ldr	r3, [pc, #8]	; (d84e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d84da:	681a      	ldr	r2, [r3, #0]
   d84dc:	4b02      	ldr	r3, [pc, #8]	; (d84e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d84de:	601a      	str	r2, [r3, #0]
   d84e0:	4770      	bx	lr
   d84e2:	bf00      	nop
   d84e4:	2003d78c 	.word	0x2003d78c
   d84e8:	2003e3c0 	.word	0x2003e3c0

000d84ec <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d84ec:	2100      	movs	r1, #0
   d84ee:	f7fd b8dd 	b.w	d56ac <system_delay_ms>

000d84f2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d84f2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d84f4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d84f6:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d84f8:	b113      	cbz	r3, d8500 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d84fa:	2203      	movs	r2, #3
   d84fc:	4601      	mov	r1, r0
   d84fe:	4798      	blx	r3
    }
   d8500:	4620      	mov	r0, r4
   d8502:	bd10      	pop	{r4, pc}

000d8504 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8504:	b510      	push	{r4, lr}
   d8506:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d8508:	f7ff fff3 	bl	d84f2 <_ZNSt14_Function_baseD1Ev>
   d850c:	4620      	mov	r0, r4
   d850e:	bd10      	pop	{r4, pc}

000d8510 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   d8510:	b510      	push	{r4, lr}
   d8512:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d8514:	f7fd f88a 	bl	d562c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   d8518:	4284      	cmp	r4, r0
   d851a:	d008      	beq.n	d852e <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   d851c:	b11c      	cbz	r4, d8526 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   d851e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   d8522:	f7fd b873 	b.w	d560c <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   d8526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   d852a:	f7fd b877 	b.w	d561c <LED_Signaling_Stop>
   d852e:	bd10      	pop	{r4, pc}

000d8530 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   d8530:	b570      	push	{r4, r5, r6, lr}
   d8532:	4605      	mov	r5, r0
   d8534:	460e      	mov	r6, r1
   d8536:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   d8538:	f7fd f878 	bl	d562c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   d853c:	b150      	cbz	r0, d8554 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   d853e:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   d8542:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   d8546:	f7fd f859 	bl	d55fc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   d854a:	20e7      	movs	r0, #231	; 0xe7
}
   d854c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   d8550:	f7fd b874 	b.w	d563c <LED_On>
   d8554:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8558 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d8558:	4803      	ldr	r0, [pc, #12]	; (d8568 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d855a:	4a04      	ldr	r2, [pc, #16]	; (d856c <_GLOBAL__sub_I_RGB+0x14>)
   d855c:	4904      	ldr	r1, [pc, #16]	; (d8570 <_GLOBAL__sub_I_RGB+0x18>)
   d855e:	2300      	movs	r3, #0
   d8560:	6083      	str	r3, [r0, #8]
   d8562:	f000 be8f 	b.w	d9284 <__aeabi_atexit>
   d8566:	bf00      	nop
   d8568:	2003e3cc 	.word	0x2003e3cc
   d856c:	2003d848 	.word	0x2003d848
   d8570:	000d8505 	.word	0x000d8505

000d8574 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d8574:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8576:	4b0c      	ldr	r3, [pc, #48]	; (d85a8 <serialEventRun+0x34>)
   d8578:	b133      	cbz	r3, d8588 <serialEventRun+0x14>
   d857a:	f000 f989 	bl	d8890 <_Z16_fetch_usbserialv>
   d857e:	6803      	ldr	r3, [r0, #0]
   d8580:	691b      	ldr	r3, [r3, #16]
   d8582:	4798      	blx	r3
   d8584:	2800      	cmp	r0, #0
   d8586:	dc09      	bgt.n	d859c <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8588:	4b08      	ldr	r3, [pc, #32]	; (d85ac <serialEventRun+0x38>)
   d858a:	b163      	cbz	r3, d85a6 <serialEventRun+0x32>
   d858c:	f000 fa0c 	bl	d89a8 <_Z22__fetch_global_Serial1v>
   d8590:	6803      	ldr	r3, [r0, #0]
   d8592:	691b      	ldr	r3, [r3, #16]
   d8594:	4798      	blx	r3
   d8596:	2800      	cmp	r0, #0
   d8598:	dc03      	bgt.n	d85a2 <serialEventRun+0x2e>
   d859a:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d859c:	f3af 8000 	nop.w
   d85a0:	e7f2      	b.n	d8588 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d85a2:	f3af 8000 	nop.w
   d85a6:	bd08      	pop	{r3, pc}
	...

000d85b0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d85b0:	b508      	push	{r3, lr}
	serialEventRun();
   d85b2:	f7ff ffdf 	bl	d8574 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d85b6:	f7fc fe6f 	bl	d5298 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d85ba:	4b01      	ldr	r3, [pc, #4]	; (d85c0 <_post_loop+0x10>)
   d85bc:	6018      	str	r0, [r3, #0]
   d85be:	bd08      	pop	{r3, pc}
   d85c0:	2003e70c 	.word	0x2003e70c

000d85c4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d85c4:	4802      	ldr	r0, [pc, #8]	; (d85d0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d85c6:	4a03      	ldr	r2, [pc, #12]	; (d85d4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d85c8:	4903      	ldr	r1, [pc, #12]	; (d85d8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d85ca:	1a12      	subs	r2, r2, r0
   d85cc:	f001 b919 	b.w	d9802 <memcpy>
   d85d0:	2003f400 	.word	0x2003f400
   d85d4:	2003f404 	.word	0x2003f404
   d85d8:	000db110 	.word	0x000db110

000d85dc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d85dc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85de:	2300      	movs	r3, #0
   d85e0:	9300      	str	r3, [sp, #0]
   d85e2:	461a      	mov	r2, r3
   d85e4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85e8:	f7fd f872 	bl	d56d0 <system_ctrl_set_result>
}
   d85ec:	b003      	add	sp, #12
   d85ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85f4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d85f4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d85f6:	8843      	ldrh	r3, [r0, #2]
   d85f8:	2b0a      	cmp	r3, #10
   d85fa:	d008      	beq.n	d860e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d85fc:	2b50      	cmp	r3, #80	; 0x50
   d85fe:	d109      	bne.n	d8614 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d8600:	4b09      	ldr	r3, [pc, #36]	; (d8628 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8602:	681b      	ldr	r3, [r3, #0]
   d8604:	b13b      	cbz	r3, d8616 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d8606:	b003      	add	sp, #12
   d8608:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d860c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d860e:	f7ff ffe5 	bl	d85dc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8612:	e006      	b.n	d8622 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8614:	2300      	movs	r3, #0
   d8616:	9300      	str	r3, [sp, #0]
   d8618:	461a      	mov	r2, r3
   d861a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d861e:	f7fd f857 	bl	d56d0 <system_ctrl_set_result>
        break;
    }
}
   d8622:	b003      	add	sp, #12
   d8624:	f85d fb04 	ldr.w	pc, [sp], #4
   d8628:	2003e3dc 	.word	0x2003e3dc

000d862c <module_user_init_hook>:

void module_user_init_hook()
{
   d862c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d862e:	4c10      	ldr	r4, [pc, #64]	; (d8670 <module_user_init_hook+0x44>)
   d8630:	4d10      	ldr	r5, [pc, #64]	; (d8674 <module_user_init_hook+0x48>)
   d8632:	6823      	ldr	r3, [r4, #0]
   d8634:	42ab      	cmp	r3, r5
   d8636:	4b10      	ldr	r3, [pc, #64]	; (d8678 <module_user_init_hook+0x4c>)
   d8638:	bf0c      	ite	eq
   d863a:	2201      	moveq	r2, #1
   d863c:	2200      	movne	r2, #0
   d863e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8640:	d002      	beq.n	d8648 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d8642:	f7ff ffbf 	bl	d85c4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8646:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8648:	f7fc fe16 	bl	d5278 <HAL_RNG_GetRandomNumber>
   d864c:	4604      	mov	r4, r0
    srand(seed);
   d864e:	f001 f907 	bl	d9860 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8652:	4b0a      	ldr	r3, [pc, #40]	; (d867c <module_user_init_hook+0x50>)
   d8654:	b113      	cbz	r3, d865c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d8656:	4620      	mov	r0, r4
   d8658:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d865c:	2100      	movs	r1, #0
   d865e:	4807      	ldr	r0, [pc, #28]	; (d867c <module_user_init_hook+0x50>)
   d8660:	f7fd f898 	bl	d5794 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8664:	2100      	movs	r1, #0
   d8666:	4806      	ldr	r0, [pc, #24]	; (d8680 <module_user_init_hook+0x54>)
}
   d8668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d866c:	f7fd b826 	b.w	d56bc <system_ctrl_set_app_request_handler>
   d8670:	2003f400 	.word	0x2003f400
   d8674:	9a271c1e 	.word	0x9a271c1e
   d8678:	2003e3e0 	.word	0x2003e3e0
   d867c:	00000000 	.word	0x00000000
   d8680:	000d85f5 	.word	0x000d85f5

000d8684 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d8684:	b510      	push	{r4, lr}
   d8686:	b088      	sub	sp, #32
   d8688:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d868a:	4668      	mov	r0, sp
   d868c:	f7fd f97f 	bl	d598e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d8690:	4669      	mov	r1, sp
   d8692:	a804      	add	r0, sp, #16
   d8694:	f7fd f99d 	bl	d59d2 <_ZN6StringC1ERKS_>
   d8698:	a804      	add	r0, sp, #16
   d869a:	47a0      	blx	r4
   d869c:	4604      	mov	r4, r0
   d869e:	a804      	add	r0, sp, #16
   d86a0:	f7fd f92e 	bl	d5900 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d86a4:	4668      	mov	r0, sp
   d86a6:	f7fd f92b 	bl	d5900 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d86aa:	4620      	mov	r0, r4
   d86ac:	b008      	add	sp, #32
   d86ae:	bd10      	pop	{r4, pc}

000d86b0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d86b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d86b2:	2410      	movs	r4, #16
   d86b4:	b085      	sub	sp, #20
   d86b6:	4607      	mov	r7, r0
   d86b8:	460e      	mov	r6, r1
   d86ba:	4615      	mov	r5, r2
   d86bc:	2100      	movs	r1, #0
   d86be:	4622      	mov	r2, r4
   d86c0:	4668      	mov	r0, sp
   d86c2:	f001 f8c4 	bl	d984e <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d86c6:	2200      	movs	r2, #0
   d86c8:	4669      	mov	r1, sp
   d86ca:	4610      	mov	r0, r2
         size = sizeof(*this);
   d86cc:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d86d0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d86d2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d86d4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d86d6:	f7fd f855 	bl	d5784 <spark_function>
}
   d86da:	b005      	add	sp, #20
   d86dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d86de <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d86de:	4770      	bx	lr

000d86e0 <_ZN9IPAddressD0Ev>:
   d86e0:	b510      	push	{r4, lr}
   d86e2:	2118      	movs	r1, #24
   d86e4:	4604      	mov	r4, r0
   d86e6:	f000 fddb 	bl	d92a0 <_ZdlPvj>
   d86ea:	4620      	mov	r0, r4
   d86ec:	bd10      	pop	{r4, pc}

000d86ee <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d86ee:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d86f0:	7d03      	ldrb	r3, [r0, #20]
   d86f2:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d86f4:	b08d      	sub	sp, #52	; 0x34
   d86f6:	460e      	mov	r6, r1
   d86f8:	f100 0704 	add.w	r7, r0, #4
   d86fc:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d8700:	d002      	beq.n	d8708 <_ZNK9IPAddress7printToER5Print+0x1a>
   d8702:	f100 0508 	add.w	r5, r0, #8
   d8706:	e018      	b.n	d873a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d8708:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d870a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d870c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d8710:	232f      	movs	r3, #47	; 0x2f
   d8712:	462a      	mov	r2, r5
   d8714:	200a      	movs	r0, #10
   d8716:	f7fc fe99 	bl	d544c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d871a:	4628      	mov	r0, r5
   d871c:	f001 f8f2 	bl	d9904 <strlen>
   d8720:	6833      	ldr	r3, [r6, #0]
   d8722:	4602      	mov	r2, r0
   d8724:	68db      	ldr	r3, [r3, #12]
   d8726:	4629      	mov	r1, r5
   d8728:	4630      	mov	r0, r6
   d872a:	4798      	blx	r3
   d872c:	e00f      	b.n	d874e <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d872e:	b124      	cbz	r4, d873a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d8730:	212e      	movs	r1, #46	; 0x2e
   d8732:	4630      	mov	r0, r6
   d8734:	f7fe fe60 	bl	d73f8 <_ZN5Print5printEc>
   d8738:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d873a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d873e:	220a      	movs	r2, #10
   d8740:	4630      	mov	r0, r6
   d8742:	f7fe fe68 	bl	d7416 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d8746:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d8748:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d874a:	d1f0      	bne.n	d872e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d874c:	4620      	mov	r0, r4
    }
    return n;
}
   d874e:	b00d      	add	sp, #52	; 0x34
   d8750:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d8754 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d8754:	b510      	push	{r4, lr}
   d8756:	4b05      	ldr	r3, [pc, #20]	; (d876c <_ZN9IPAddressC1Ev+0x18>)
   d8758:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d875a:	2211      	movs	r2, #17
   d875c:	f840 3b04 	str.w	r3, [r0], #4
   d8760:	2100      	movs	r1, #0
   d8762:	f001 f874 	bl	d984e <memset>
{
    clear();
}
   d8766:	4620      	mov	r0, r4
   d8768:	bd10      	pop	{r4, pc}
   d876a:	bf00      	nop
   d876c:	000dad1c 	.word	0x000dad1c

000d8770 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d8770:	4603      	mov	r3, r0
   d8772:	4a07      	ldr	r2, [pc, #28]	; (d8790 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d8774:	b510      	push	{r4, lr}
   d8776:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d877a:	f101 0210 	add.w	r2, r1, #16
   d877e:	f851 4b04 	ldr.w	r4, [r1], #4
   d8782:	f843 4b04 	str.w	r4, [r3], #4
   d8786:	4291      	cmp	r1, r2
   d8788:	d1f9      	bne.n	d877e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d878a:	780a      	ldrb	r2, [r1, #0]
   d878c:	701a      	strb	r2, [r3, #0]
}
   d878e:	bd10      	pop	{r4, pc}
   d8790:	000dad1c 	.word	0x000dad1c

000d8794 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d8794:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d8796:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d879a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d879e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d87a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d87a6:	2304      	movs	r3, #4
   d87a8:	6041      	str	r1, [r0, #4]
   d87aa:	7503      	strb	r3, [r0, #20]
   d87ac:	bd10      	pop	{r4, pc}

000d87ae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d87ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d87b0:	780d      	ldrb	r5, [r1, #0]
   d87b2:	788b      	ldrb	r3, [r1, #2]
   d87b4:	784a      	ldrb	r2, [r1, #1]
   d87b6:	78c9      	ldrb	r1, [r1, #3]
   d87b8:	9100      	str	r1, [sp, #0]
   d87ba:	4629      	mov	r1, r5
   d87bc:	f7ff ffea 	bl	d8794 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d87c0:	b003      	add	sp, #12
   d87c2:	bd30      	pop	{r4, r5, pc}

000d87c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d87c4:	7441      	strb	r1, [r0, #17]
   d87c6:	4770      	bx	lr

000d87c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d87c8:	4770      	bx	lr

000d87ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d87ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d87cc:	2100      	movs	r1, #0
   d87ce:	7c00      	ldrb	r0, [r0, #16]
   d87d0:	f7fc fefc 	bl	d55cc <HAL_USB_USART_Receive_Data>
}
   d87d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d87d8:	bf28      	it	cs
   d87da:	f04f 30ff 	movcs.w	r0, #4294967295
   d87de:	bd08      	pop	{r3, pc}

000d87e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d87e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d87e2:	2101      	movs	r1, #1
   d87e4:	7c00      	ldrb	r0, [r0, #16]
   d87e6:	f7fc fef1 	bl	d55cc <HAL_USB_USART_Receive_Data>
}
   d87ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d87ee:	bf28      	it	cs
   d87f0:	f04f 30ff 	movcs.w	r0, #4294967295
   d87f4:	bd08      	pop	{r3, pc}

000d87f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d87f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d87f8:	7c00      	ldrb	r0, [r0, #16]
   d87fa:	f7fc fedf 	bl	d55bc <HAL_USB_USART_Available_Data_For_Write>
}
   d87fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8802:	bd08      	pop	{r3, pc}

000d8804 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d8804:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8806:	7c00      	ldrb	r0, [r0, #16]
   d8808:	f7fc fed0 	bl	d55ac <HAL_USB_USART_Available_Data>
}
   d880c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8810:	bd08      	pop	{r3, pc}

000d8812 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d8812:	7c00      	ldrb	r0, [r0, #16]
   d8814:	f7fc beea 	b.w	d55ec <HAL_USB_USART_Flush_Data>

000d8818 <_ZN9USBSerialD0Ev>:
   d8818:	b510      	push	{r4, lr}
   d881a:	2114      	movs	r1, #20
   d881c:	4604      	mov	r4, r0
   d881e:	f000 fd3f 	bl	d92a0 <_ZdlPvj>
   d8822:	4620      	mov	r0, r4
   d8824:	bd10      	pop	{r4, pc}

000d8826 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d8826:	b538      	push	{r3, r4, r5, lr}
   d8828:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d882a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d882c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d882e:	f7fc fec5 	bl	d55bc <HAL_USB_USART_Available_Data_For_Write>
   d8832:	2800      	cmp	r0, #0
   d8834:	dc01      	bgt.n	d883a <_ZN9USBSerial5writeEh+0x14>
   d8836:	7c60      	ldrb	r0, [r4, #17]
   d8838:	b128      	cbz	r0, d8846 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d883a:	4629      	mov	r1, r5
   d883c:	7c20      	ldrb	r0, [r4, #16]
   d883e:	f7fc fecd 	bl	d55dc <HAL_USB_USART_Send_Data>
   d8842:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d8846:	bd38      	pop	{r3, r4, r5, pc}

000d8848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8848:	b510      	push	{r4, lr}
   d884a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d884c:	2300      	movs	r3, #0
   d884e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d8850:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8854:	60a3      	str	r3, [r4, #8]
   d8856:	4b05      	ldr	r3, [pc, #20]	; (d886c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8858:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d885a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d885c:	4608      	mov	r0, r1
{
  _serial = serial;
   d885e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8860:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8862:	4611      	mov	r1, r2
   d8864:	f7fc fe8a 	bl	d557c <HAL_USB_USART_Init>
}
   d8868:	4620      	mov	r0, r4
   d886a:	bd10      	pop	{r4, pc}
   d886c:	000dad30 	.word	0x000dad30

000d8870 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d8870:	2200      	movs	r2, #0
   d8872:	7c00      	ldrb	r0, [r0, #16]
   d8874:	f7fc be8a 	b.w	d558c <HAL_USB_USART_Begin>

000d8878 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d8878:	7c00      	ldrb	r0, [r0, #16]
   d887a:	f7fc be8f 	b.w	d559c <HAL_USB_USART_End>

000d887e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d887e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8880:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8882:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8884:	2100      	movs	r1, #0
   d8886:	f000 ffe2 	bl	d984e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d888a:	4620      	mov	r0, r4
   d888c:	bd10      	pop	{r4, pc}
	...

000d8890 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8890:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8892:	4d0e      	ldr	r5, [pc, #56]	; (d88cc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d8894:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8896:	a801      	add	r0, sp, #4
   d8898:	f7ff fff1 	bl	d887e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d889c:	6829      	ldr	r1, [r5, #0]
   d889e:	f011 0401 	ands.w	r4, r1, #1
   d88a2:	d110      	bne.n	d88c6 <_Z16_fetch_usbserialv+0x36>
   d88a4:	4628      	mov	r0, r5
   d88a6:	f7fb fc07 	bl	d40b8 <__cxa_guard_acquire>
   d88aa:	b160      	cbz	r0, d88c6 <_Z16_fetch_usbserialv+0x36>
   d88ac:	aa01      	add	r2, sp, #4
   d88ae:	4621      	mov	r1, r4
   d88b0:	4807      	ldr	r0, [pc, #28]	; (d88d0 <_Z16_fetch_usbserialv+0x40>)
   d88b2:	f7ff ffc9 	bl	d8848 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d88b6:	4628      	mov	r0, r5
   d88b8:	f7fb fc03 	bl	d40c2 <__cxa_guard_release>
   d88bc:	4a05      	ldr	r2, [pc, #20]	; (d88d4 <_Z16_fetch_usbserialv+0x44>)
   d88be:	4906      	ldr	r1, [pc, #24]	; (d88d8 <_Z16_fetch_usbserialv+0x48>)
   d88c0:	4803      	ldr	r0, [pc, #12]	; (d88d0 <_Z16_fetch_usbserialv+0x40>)
   d88c2:	f000 fcdf 	bl	d9284 <__aeabi_atexit>
	return _usbserial;
}
   d88c6:	4802      	ldr	r0, [pc, #8]	; (d88d0 <_Z16_fetch_usbserialv+0x40>)
   d88c8:	b007      	add	sp, #28
   d88ca:	bd30      	pop	{r4, r5, pc}
   d88cc:	2003e3e4 	.word	0x2003e3e4
   d88d0:	2003e3e8 	.word	0x2003e3e8
   d88d4:	2003d848 	.word	0x2003d848
   d88d8:	000d87c9 	.word	0x000d87c9

000d88dc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d88dc:	4770      	bx	lr

000d88de <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d88de:	7441      	strb	r1, [r0, #17]
   d88e0:	4770      	bx	lr

000d88e2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d88e2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d88e4:	7c00      	ldrb	r0, [r0, #16]
   d88e6:	f7fc fdf9 	bl	d54dc <HAL_USART_Available_Data_For_Write>
}
   d88ea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88ee:	bd08      	pop	{r3, pc}

000d88f0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d88f0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d88f2:	7c00      	ldrb	r0, [r0, #16]
   d88f4:	f7fc fdca 	bl	d548c <HAL_USART_Available_Data>
}
   d88f8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d88fc:	bd08      	pop	{r3, pc}

000d88fe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d88fe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d8900:	7c00      	ldrb	r0, [r0, #16]
   d8902:	f7fc fdd3 	bl	d54ac <HAL_USART_Peek_Data>
}
   d8906:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d890a:	bf28      	it	cs
   d890c:	f04f 30ff 	movcs.w	r0, #4294967295
   d8910:	bd08      	pop	{r3, pc}

000d8912 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8912:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d8914:	7c00      	ldrb	r0, [r0, #16]
   d8916:	f7fc fdc1 	bl	d549c <HAL_USART_Read_Data>
}
   d891a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d891e:	bf28      	it	cs
   d8920:	f04f 30ff 	movcs.w	r0, #4294967295
   d8924:	bd08      	pop	{r3, pc}

000d8926 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d8926:	7c00      	ldrb	r0, [r0, #16]
   d8928:	f7fc bdc8 	b.w	d54bc <HAL_USART_Flush_Data>

000d892c <_ZN11USARTSerialD0Ev>:
   d892c:	b510      	push	{r4, lr}
   d892e:	2114      	movs	r1, #20
   d8930:	4604      	mov	r4, r0
   d8932:	f000 fcb5 	bl	d92a0 <_ZdlPvj>
   d8936:	4620      	mov	r0, r4
   d8938:	bd10      	pop	{r4, pc}

000d893a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d893a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d893c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d893e:	4604      	mov	r4, r0
   d8940:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8942:	b925      	cbnz	r5, d894e <_ZN11USARTSerial5writeEh+0x14>
   d8944:	7c00      	ldrb	r0, [r0, #16]
   d8946:	f7fc fdc9 	bl	d54dc <HAL_USART_Available_Data_For_Write>
   d894a:	2800      	cmp	r0, #0
   d894c:	dd05      	ble.n	d895a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d894e:	4631      	mov	r1, r6
   d8950:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8956:	f7fc bd91 	b.w	d547c <HAL_USART_Write_Data>
  }
  return 0;
}
   d895a:	4628      	mov	r0, r5
   d895c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8960 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8960:	b510      	push	{r4, lr}
   d8962:	4604      	mov	r4, r0
   d8964:	4608      	mov	r0, r1
   d8966:	4611      	mov	r1, r2
   d8968:	2200      	movs	r2, #0
   d896a:	6062      	str	r2, [r4, #4]
   d896c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8970:	60a2      	str	r2, [r4, #8]
   d8972:	4a05      	ldr	r2, [pc, #20]	; (d8988 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8974:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d8976:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d8978:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d897a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d897c:	461a      	mov	r2, r3
   d897e:	f7fc fd6d 	bl	d545c <HAL_USART_Init>
}
   d8982:	4620      	mov	r0, r4
   d8984:	bd10      	pop	{r4, pc}
   d8986:	bf00      	nop
   d8988:	000dad60 	.word	0x000dad60

000d898c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d898c:	2300      	movs	r3, #0
   d898e:	7c00      	ldrb	r0, [r0, #16]
   d8990:	f7fc bdac 	b.w	d54ec <HAL_USART_BeginConfig>

000d8994 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d8994:	2200      	movs	r2, #0
   d8996:	f7ff bff9 	b.w	d898c <_ZN11USARTSerial5beginEmm>

000d899a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d899a:	7c00      	ldrb	r0, [r0, #16]
   d899c:	f7fc bd66 	b.w	d546c <HAL_USART_End>

000d89a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d89a0:	7c00      	ldrb	r0, [r0, #16]
   d89a2:	f7fc bd93 	b.w	d54cc <HAL_USART_Is_Enabled>
	...

000d89a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d89a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d89aa:	4d0c      	ldr	r5, [pc, #48]	; (d89dc <_Z22__fetch_global_Serial1v+0x34>)
   d89ac:	6829      	ldr	r1, [r5, #0]
   d89ae:	f011 0401 	ands.w	r4, r1, #1
   d89b2:	d111      	bne.n	d89d8 <_Z22__fetch_global_Serial1v+0x30>
   d89b4:	4628      	mov	r0, r5
   d89b6:	f7fb fb7f 	bl	d40b8 <__cxa_guard_acquire>
   d89ba:	b168      	cbz	r0, d89d8 <_Z22__fetch_global_Serial1v+0x30>
   d89bc:	4a08      	ldr	r2, [pc, #32]	; (d89e0 <_Z22__fetch_global_Serial1v+0x38>)
   d89be:	4b09      	ldr	r3, [pc, #36]	; (d89e4 <_Z22__fetch_global_Serial1v+0x3c>)
   d89c0:	4809      	ldr	r0, [pc, #36]	; (d89e8 <_Z22__fetch_global_Serial1v+0x40>)
   d89c2:	4621      	mov	r1, r4
   d89c4:	f7ff ffcc 	bl	d8960 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d89c8:	4628      	mov	r0, r5
   d89ca:	f7fb fb7a 	bl	d40c2 <__cxa_guard_release>
   d89ce:	4a07      	ldr	r2, [pc, #28]	; (d89ec <_Z22__fetch_global_Serial1v+0x44>)
   d89d0:	4907      	ldr	r1, [pc, #28]	; (d89f0 <_Z22__fetch_global_Serial1v+0x48>)
   d89d2:	4805      	ldr	r0, [pc, #20]	; (d89e8 <_Z22__fetch_global_Serial1v+0x40>)
   d89d4:	f000 fc56 	bl	d9284 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d89d8:	4803      	ldr	r0, [pc, #12]	; (d89e8 <_Z22__fetch_global_Serial1v+0x40>)
   d89da:	bd38      	pop	{r3, r4, r5, pc}
   d89dc:	2003e494 	.word	0x2003e494
   d89e0:	2003e498 	.word	0x2003e498
   d89e4:	2003e410 	.word	0x2003e410
   d89e8:	2003e3fc 	.word	0x2003e3fc
   d89ec:	2003d848 	.word	0x2003d848
   d89f0:	000d88dd 	.word	0x000d88dd

000d89f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d89f4:	4770      	bx	lr

000d89f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d89f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d89f8:	4606      	mov	r6, r0
   d89fa:	4615      	mov	r5, r2
   d89fc:	460c      	mov	r4, r1
   d89fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8a00:	42bc      	cmp	r4, r7
   d8a02:	d006      	beq.n	d8a12 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d8a04:	6833      	ldr	r3, [r6, #0]
   d8a06:	f814 1b01 	ldrb.w	r1, [r4], #1
   d8a0a:	689b      	ldr	r3, [r3, #8]
   d8a0c:	4630      	mov	r0, r6
   d8a0e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d8a10:	e7f6      	b.n	d8a00 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d8a12:	4628      	mov	r0, r5
   d8a14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8a16 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d8a16:	2200      	movs	r2, #0
   d8a18:	7c00      	ldrb	r0, [r0, #16]
   d8a1a:	f7fc bd6f 	b.w	d54fc <HAL_I2C_Write_Data>

000d8a1e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d8a1e:	2100      	movs	r1, #0
   d8a20:	7c00      	ldrb	r0, [r0, #16]
   d8a22:	f7fc bd73 	b.w	d550c <HAL_I2C_Available_Data>

000d8a26 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d8a26:	2100      	movs	r1, #0
   d8a28:	7c00      	ldrb	r0, [r0, #16]
   d8a2a:	f7fc bd77 	b.w	d551c <HAL_I2C_Read_Data>

000d8a2e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d8a2e:	2100      	movs	r1, #0
   d8a30:	7c00      	ldrb	r0, [r0, #16]
   d8a32:	f7fc bd7b 	b.w	d552c <HAL_I2C_Peek_Data>

000d8a36 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d8a36:	2100      	movs	r1, #0
   d8a38:	7c00      	ldrb	r0, [r0, #16]
   d8a3a:	f7fc bd7f 	b.w	d553c <HAL_I2C_Flush_Data>

000d8a3e <_ZN7TwoWireD0Ev>:
   d8a3e:	b510      	push	{r4, lr}
   d8a40:	2114      	movs	r1, #20
   d8a42:	4604      	mov	r4, r0
   d8a44:	f000 fc2c 	bl	d92a0 <_ZdlPvj>
   d8a48:	4620      	mov	r0, r4
   d8a4a:	bd10      	pop	{r4, pc}

000d8a4c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8a4c:	b510      	push	{r4, lr}
   d8a4e:	4604      	mov	r4, r0
   d8a50:	2300      	movs	r3, #0
   d8a52:	6063      	str	r3, [r4, #4]
   d8a54:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8a58:	60a3      	str	r3, [r4, #8]
   d8a5a:	4b04      	ldr	r3, [pc, #16]	; (d8a6c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d8a5c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d8a5e:	4608      	mov	r0, r1
   d8a60:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d8a62:	4611      	mov	r1, r2
   d8a64:	f7fc fd7a 	bl	d555c <HAL_I2C_Init>
}
   d8a68:	4620      	mov	r0, r4
   d8a6a:	bd10      	pop	{r4, pc}
   d8a6c:	000dad90 	.word	0x000dad90

000d8a70 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d8a70:	2100      	movs	r1, #0
   d8a72:	7c00      	ldrb	r0, [r0, #16]
   d8a74:	f7fc bd6a 	b.w	d554c <HAL_I2C_Is_Enabled>

000d8a78 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8a78:	2200      	movs	r2, #0
   d8a7a:	4611      	mov	r1, r2
   d8a7c:	6840      	ldr	r0, [r0, #4]
   d8a7e:	f7fc be69 	b.w	d5754 <network_listening>

000d8a82 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8a82:	2200      	movs	r2, #0
   d8a84:	4611      	mov	r1, r2
   d8a86:	6840      	ldr	r0, [r0, #4]
   d8a88:	f7fc be74 	b.w	d5774 <network_get_listen_timeout>

000d8a8c <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8a8c:	2200      	movs	r2, #0
   d8a8e:	6840      	ldr	r0, [r0, #4]
   d8a90:	f7fc be68 	b.w	d5764 <network_set_listen_timeout>

000d8a94 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8a94:	2200      	movs	r2, #0
   d8a96:	f081 0101 	eor.w	r1, r1, #1
   d8a9a:	6840      	ldr	r0, [r0, #4]
   d8a9c:	f7fc be52 	b.w	d5744 <network_listen>

000d8aa0 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d8aa0:	2300      	movs	r3, #0
   d8aa2:	461a      	mov	r2, r3
   d8aa4:	2101      	movs	r1, #1
   d8aa6:	6840      	ldr	r0, [r0, #4]
   d8aa8:	f7fc be44 	b.w	d5734 <network_off>

000d8aac <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d8aac:	2300      	movs	r3, #0
   d8aae:	461a      	mov	r2, r3
   d8ab0:	4619      	mov	r1, r3
   d8ab2:	6840      	ldr	r0, [r0, #4]
   d8ab4:	f7fc be36 	b.w	d5724 <network_on>

000d8ab8 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d8ab8:	2200      	movs	r2, #0
   d8aba:	4611      	mov	r1, r2
   d8abc:	6840      	ldr	r0, [r0, #4]
   d8abe:	f7fc be29 	b.w	d5714 <network_ready>

000d8ac2 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8ac2:	2200      	movs	r2, #0
   d8ac4:	4611      	mov	r1, r2
   d8ac6:	6840      	ldr	r0, [r0, #4]
   d8ac8:	f7fc be14 	b.w	d56f4 <network_connecting>

000d8acc <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8acc:	2200      	movs	r2, #0
   d8ace:	2102      	movs	r1, #2
   d8ad0:	6840      	ldr	r0, [r0, #4]
   d8ad2:	f7fc be17 	b.w	d5704 <network_disconnect>

000d8ad6 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8ad6:	2300      	movs	r3, #0
   d8ad8:	461a      	mov	r2, r3
   d8ada:	6840      	ldr	r0, [r0, #4]
   d8adc:	f7fc be02 	b.w	d56e4 <network_connect>

000d8ae0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d8ae0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8ae2:	4605      	mov	r5, r0
   d8ae4:	b188      	cbz	r0, d8b0a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8ae6:	6804      	ldr	r4, [r0, #0]
   d8ae8:	b14c      	cbz	r4, d8afe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d8aea:	68a3      	ldr	r3, [r4, #8]
   d8aec:	b11b      	cbz	r3, d8af6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d8aee:	2203      	movs	r2, #3
   d8af0:	4621      	mov	r1, r4
   d8af2:	4620      	mov	r0, r4
   d8af4:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8af6:	2110      	movs	r1, #16
   d8af8:	4620      	mov	r0, r4
   d8afa:	f000 fbd1 	bl	d92a0 <_ZdlPvj>
   d8afe:	4628      	mov	r0, r5
   d8b00:	2114      	movs	r1, #20
      }
   d8b02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8b06:	f000 bbcb 	b.w	d92a0 <_ZdlPvj>
   d8b0a:	bd38      	pop	{r3, r4, r5, pc}

000d8b0c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d8b0c:	b110      	cbz	r0, d8b14 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d8b0e:	6803      	ldr	r3, [r0, #0]
   d8b10:	685b      	ldr	r3, [r3, #4]
   d8b12:	4718      	bx	r3
   d8b14:	4770      	bx	lr

000d8b16 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d8b16:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d8b18:	6803      	ldr	r3, [r0, #0]
   d8b1a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d8b1c:	b1bb      	cbz	r3, d8b4e <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d8b1e:	6858      	ldr	r0, [r3, #4]
   d8b20:	f7fc fc5c 	bl	d53dc <os_thread_is_current>
   d8b24:	b978      	cbnz	r0, d8b46 <_ZN6ThreadD1Ev+0x30>
   d8b26:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d8b28:	7c5a      	ldrb	r2, [r3, #17]
   d8b2a:	b912      	cbnz	r2, d8b32 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d8b2c:	6858      	ldr	r0, [r3, #4]
   d8b2e:	f7fc fc5d 	bl	d53ec <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d8b32:	6823      	ldr	r3, [r4, #0]
   d8b34:	6858      	ldr	r0, [r3, #4]
   d8b36:	f7fc fc61 	bl	d53fc <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8b3a:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8b3c:	2300      	movs	r3, #0
   d8b3e:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d8b40:	b128      	cbz	r0, d8b4e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d8b42:	f7ff ffcd 	bl	d8ae0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8b46:	6820      	ldr	r0, [r4, #0]
   d8b48:	b108      	cbz	r0, d8b4e <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d8b4a:	f7ff ffc9 	bl	d8ae0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d8b4e:	4620      	mov	r0, r4
   d8b50:	bd10      	pop	{r4, pc}

000d8b52 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d8b52:	b538      	push	{r3, r4, r5, lr}
   d8b54:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8b56:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d8b5a:	b108      	cbz	r0, d8b60 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d8b5c:	f7fb fa9f 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8b60:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d8b64:	b108      	cbz	r0, d8b6a <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d8b66:	f7fc fc59 	bl	d541c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8b6a:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d8b6e:	b135      	cbz	r5, d8b7e <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d8b70:	4628      	mov	r0, r5
   d8b72:	f7ff ffd0 	bl	d8b16 <_ZN6ThreadD1Ev>
   d8b76:	2104      	movs	r1, #4
   d8b78:	4628      	mov	r0, r5
   d8b7a:	f000 fb91 	bl	d92a0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d8b7e:	6820      	ldr	r0, [r4, #0]
   d8b80:	b108      	cbz	r0, d8b86 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d8b82:	f7ff ffc3 	bl	d8b0c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d8b86:	4620      	mov	r0, r4
   d8b88:	bd38      	pop	{r3, r4, r5, pc}
	...

000d8b8c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d8b8c:	b510      	push	{r4, lr}
   d8b8e:	4b04      	ldr	r3, [pc, #16]	; (d8ba0 <_ZN5spark9MeshClassD1Ev+0x14>)
   d8b90:	4604      	mov	r4, r0
   d8b92:	f840 3b08 	str.w	r3, [r0], #8
   d8b96:	f7ff ffdc 	bl	d8b52 <_ZN5spark11MeshPublishD1Ev>
   d8b9a:	4620      	mov	r0, r4
   d8b9c:	bd10      	pop	{r4, pc}
   d8b9e:	bf00      	nop
   d8ba0:	000dadb8 	.word	0x000dadb8

000d8ba4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d8ba4:	b538      	push	{r3, r4, r5, lr}
   d8ba6:	4c0e      	ldr	r4, [pc, #56]	; (d8be0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d8ba8:	4b0e      	ldr	r3, [pc, #56]	; (d8be4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d8baa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d8bac:	2500      	movs	r5, #0
   d8bae:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d8bb0:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d8bb4:	6063      	str	r3, [r4, #4]
   d8bb6:	60a5      	str	r5, [r4, #8]
   d8bb8:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8bbc:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d8bc0:	f7fc fc24 	bl	d540c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d8bc4:	4b08      	ldr	r3, [pc, #32]	; (d8be8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d8bc6:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d8bca:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d8bce:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d8bd0:	4620      	mov	r0, r4
   d8bd2:	4a06      	ldr	r2, [pc, #24]	; (d8bec <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d8bd4:	4906      	ldr	r1, [pc, #24]	; (d8bf0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d8bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d8bda:	f000 bb53 	b.w	d9284 <__aeabi_atexit>
   d8bde:	bf00      	nop
   d8be0:	2003e51c 	.word	0x2003e51c
   d8be4:	000dae20 	.word	0x000dae20
   d8be8:	000dadb8 	.word	0x000dadb8
   d8bec:	2003d848 	.word	0x2003d848
   d8bf0:	000d8b8d 	.word	0x000d8b8d

000d8bf4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8bf4:	2200      	movs	r2, #0
   d8bf6:	4611      	mov	r1, r2
   d8bf8:	6840      	ldr	r0, [r0, #4]
   d8bfa:	f7fc bd8b 	b.w	d5714 <network_ready>

000d8bfe <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8bfe:	2200      	movs	r2, #0
   d8c00:	4611      	mov	r1, r2
   d8c02:	6840      	ldr	r0, [r0, #4]
   d8c04:	f7fc bda6 	b.w	d5754 <network_listening>

000d8c08 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8c08:	2200      	movs	r2, #0
   d8c0a:	4611      	mov	r1, r2
   d8c0c:	6840      	ldr	r0, [r0, #4]
   d8c0e:	f7fc bdb1 	b.w	d5774 <network_get_listen_timeout>

000d8c12 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d8c12:	2200      	movs	r2, #0
   d8c14:	6840      	ldr	r0, [r0, #4]
   d8c16:	f7fc bda5 	b.w	d5764 <network_set_listen_timeout>

000d8c1a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8c1a:	2200      	movs	r2, #0
   d8c1c:	f081 0101 	eor.w	r1, r1, #1
   d8c20:	6840      	ldr	r0, [r0, #4]
   d8c22:	f7fc bd8f 	b.w	d5744 <network_listen>

000d8c26 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8c26:	2300      	movs	r3, #0
   d8c28:	461a      	mov	r2, r3
   d8c2a:	4619      	mov	r1, r3
   d8c2c:	6840      	ldr	r0, [r0, #4]
   d8c2e:	f7fc bd81 	b.w	d5734 <network_off>

000d8c32 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d8c32:	2300      	movs	r3, #0
   d8c34:	461a      	mov	r2, r3
   d8c36:	4619      	mov	r1, r3
   d8c38:	6840      	ldr	r0, [r0, #4]
   d8c3a:	f7fc bd73 	b.w	d5724 <network_on>

000d8c3e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d8c3e:	2200      	movs	r2, #0
   d8c40:	4611      	mov	r1, r2
   d8c42:	6840      	ldr	r0, [r0, #4]
   d8c44:	f7fc bd56 	b.w	d56f4 <network_connecting>

000d8c48 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8c48:	2200      	movs	r2, #0
   d8c4a:	2102      	movs	r1, #2
   d8c4c:	6840      	ldr	r0, [r0, #4]
   d8c4e:	f7fc bd59 	b.w	d5704 <network_disconnect>

000d8c52 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d8c52:	2300      	movs	r3, #0
   d8c54:	461a      	mov	r2, r3
   d8c56:	6840      	ldr	r0, [r0, #4]
   d8c58:	f7fc bd44 	b.w	d56e4 <network_connect>

000d8c5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8c5c:	4b02      	ldr	r3, [pc, #8]	; (d8c68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8c5e:	2204      	movs	r2, #4
   d8c60:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8c62:	4a02      	ldr	r2, [pc, #8]	; (d8c6c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8c64:	601a      	str	r2, [r3, #0]
   d8c66:	4770      	bx	lr
   d8c68:	2003e6f0 	.word	0x2003e6f0
   d8c6c:	000dadec 	.word	0x000dadec

000d8c70 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8c70:	2300      	movs	r3, #0
   d8c72:	461a      	mov	r2, r3
   d8c74:	6840      	ldr	r0, [r0, #4]
   d8c76:	f7fc bd35 	b.w	d56e4 <network_connect>

000d8c7a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d8c7a:	2200      	movs	r2, #0
   d8c7c:	2102      	movs	r1, #2
   d8c7e:	6840      	ldr	r0, [r0, #4]
   d8c80:	f7fc bd40 	b.w	d5704 <network_disconnect>

000d8c84 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8c84:	2200      	movs	r2, #0
   d8c86:	4611      	mov	r1, r2
   d8c88:	6840      	ldr	r0, [r0, #4]
   d8c8a:	f7fc bd33 	b.w	d56f4 <network_connecting>

000d8c8e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d8c8e:	2200      	movs	r2, #0
   d8c90:	4611      	mov	r1, r2
   d8c92:	6840      	ldr	r0, [r0, #4]
   d8c94:	f7fc bd3e 	b.w	d5714 <network_ready>

000d8c98 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8c98:	2300      	movs	r3, #0
   d8c9a:	461a      	mov	r2, r3
   d8c9c:	4619      	mov	r1, r3
   d8c9e:	6840      	ldr	r0, [r0, #4]
   d8ca0:	f7fc bd40 	b.w	d5724 <network_on>

000d8ca4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8ca4:	2300      	movs	r3, #0
   d8ca6:	461a      	mov	r2, r3
   d8ca8:	4619      	mov	r1, r3
   d8caa:	6840      	ldr	r0, [r0, #4]
   d8cac:	f7fc bd42 	b.w	d5734 <network_off>

000d8cb0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8cb0:	2200      	movs	r2, #0
   d8cb2:	f081 0101 	eor.w	r1, r1, #1
   d8cb6:	6840      	ldr	r0, [r0, #4]
   d8cb8:	f7fc bd44 	b.w	d5744 <network_listen>

000d8cbc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8cbc:	2200      	movs	r2, #0
   d8cbe:	6840      	ldr	r0, [r0, #4]
   d8cc0:	f7fc bd50 	b.w	d5764 <network_set_listen_timeout>

000d8cc4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8cc4:	2200      	movs	r2, #0
   d8cc6:	4611      	mov	r1, r2
   d8cc8:	6840      	ldr	r0, [r0, #4]
   d8cca:	f7fc bd53 	b.w	d5774 <network_get_listen_timeout>

000d8cce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8cce:	2200      	movs	r2, #0
   d8cd0:	4611      	mov	r1, r2
   d8cd2:	6840      	ldr	r0, [r0, #4]
   d8cd4:	f7fc bd3e 	b.w	d5754 <network_listening>

000d8cd8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8cdc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d8cde:	b095      	sub	sp, #84	; 0x54
   d8ce0:	4616      	mov	r6, r2
   d8ce2:	460d      	mov	r5, r1
   d8ce4:	4607      	mov	r7, r0
    IPAddress addr;
   d8ce6:	f7ff fd35 	bl	d8754 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d8cea:	4621      	mov	r1, r4
   d8cec:	2220      	movs	r2, #32
   d8cee:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8cf0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8cf2:	f000 fdac 	bl	d984e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8cf6:	2340      	movs	r3, #64	; 0x40
   d8cf8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8cfa:	4621      	mov	r1, r4
   d8cfc:	466b      	mov	r3, sp
   d8cfe:	aa0c      	add	r2, sp, #48	; 0x30
   d8d00:	4630      	mov	r0, r6
   d8d02:	f7fc fa81 	bl	d5208 <netdb_getaddrinfo>
    if (!r) {
   d8d06:	4604      	mov	r4, r0
   d8d08:	2800      	cmp	r0, #0
   d8d0a:	d144      	bne.n	d8d96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8d0c:	4602      	mov	r2, r0
   d8d0e:	2101      	movs	r1, #1
   d8d10:	6868      	ldr	r0, [r5, #4]
   d8d12:	f7fc fcff 	bl	d5714 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d16:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8d18:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d1a:	4622      	mov	r2, r4
   d8d1c:	6868      	ldr	r0, [r5, #4]
   d8d1e:	f7fc fcf9 	bl	d5714 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d22:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8d24:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d8d26:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d28:	2e00      	cmp	r6, #0
   d8d2a:	d034      	beq.n	d8d96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d8d2c:	2900      	cmp	r1, #0
   d8d2e:	d132      	bne.n	d8d96 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8d30:	6873      	ldr	r3, [r6, #4]
   d8d32:	2b02      	cmp	r3, #2
   d8d34:	d002      	beq.n	d8d3c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d8d36:	2b0a      	cmp	r3, #10
   d8d38:	d009      	beq.n	d8d4e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d8d3a:	e02a      	b.n	d8d92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d8d3c:	f1b8 0f00 	cmp.w	r8, #0
   d8d40:	d027      	beq.n	d8d92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8d42:	6971      	ldr	r1, [r6, #20]
   d8d44:	4638      	mov	r0, r7
   d8d46:	3104      	adds	r1, #4
   d8d48:	f7ff fd31 	bl	d87ae <_ZN9IPAddressaSEPKh>
   d8d4c:	e020      	b.n	d8d90 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8d4e:	f1b9 0f00 	cmp.w	r9, #0
   d8d52:	d01e      	beq.n	d8d92 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8d54:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8d56:	2211      	movs	r2, #17
   d8d58:	a801      	add	r0, sp, #4
   d8d5a:	f000 fd78 	bl	d984e <memset>
                    a.v = 6;
   d8d5e:	2306      	movs	r3, #6
   d8d60:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8d64:	ad01      	add	r5, sp, #4
   d8d66:	f104 0308 	add.w	r3, r4, #8
   d8d6a:	3418      	adds	r4, #24
   d8d6c:	6818      	ldr	r0, [r3, #0]
   d8d6e:	6859      	ldr	r1, [r3, #4]
   d8d70:	462a      	mov	r2, r5
   d8d72:	c203      	stmia	r2!, {r0, r1}
   d8d74:	3308      	adds	r3, #8
   d8d76:	42a3      	cmp	r3, r4
   d8d78:	4615      	mov	r5, r2
   d8d7a:	d1f7      	bne.n	d8d6c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8d7c:	a901      	add	r1, sp, #4
   d8d7e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8d80:	ad07      	add	r5, sp, #28
   d8d82:	f7ff fcf5 	bl	d8770 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8d88:	1d3c      	adds	r4, r7, #4
   d8d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8d8c:	682b      	ldr	r3, [r5, #0]
   d8d8e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8d90:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8d92:	69f6      	ldr	r6, [r6, #28]
   d8d94:	e7c8      	b.n	d8d28 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d8d96:	9800      	ldr	r0, [sp, #0]
   d8d98:	f7fc fa2e 	bl	d51f8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8d9c:	4638      	mov	r0, r7
   d8d9e:	b015      	add	sp, #84	; 0x54
   d8da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8da4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8da4:	4b02      	ldr	r3, [pc, #8]	; (d8db0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d8da6:	4a03      	ldr	r2, [pc, #12]	; (d8db4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8da8:	601a      	str	r2, [r3, #0]
   d8daa:	2200      	movs	r2, #0
   d8dac:	605a      	str	r2, [r3, #4]
   d8dae:	4770      	bx	lr
   d8db0:	2003e6f8 	.word	0x2003e6f8
   d8db4:	000dae20 	.word	0x000dae20

000d8db8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d8db8:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d8dbc:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8dbe:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d8dc2:	2901      	cmp	r1, #1
   d8dc4:	4610      	mov	r0, r2
   d8dc6:	d104      	bne.n	d8dd2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d8dc8:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d8dcc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d8dd0:	e004      	b.n	d8ddc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d8dd2:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8dd4:	bf04      	itt	eq
   d8dd6:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d8dda:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d8ddc:	3b01      	subs	r3, #1
   d8dde:	f102 0210 	add.w	r2, r2, #16
   d8de2:	d1ec      	bne.n	d8dbe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d8de4:	4770      	bx	lr

000d8de6 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d8de6:	b40e      	push	{r1, r2, r3}
   d8de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8dec:	b087      	sub	sp, #28
   d8dee:	af00      	add	r7, sp, #0
   d8df0:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d8df4:	4605      	mov	r5, r0
   d8df6:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d8dfa:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8dfc:	4623      	mov	r3, r4
   d8dfe:	4632      	mov	r2, r6
   d8e00:	2110      	movs	r1, #16
   d8e02:	f107 0008 	add.w	r0, r7, #8
   d8e06:	f7fc fcf5 	bl	d57f4 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d8e0a:	280f      	cmp	r0, #15
   d8e0c:	d916      	bls.n	d8e3c <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d8e0e:	f100 0308 	add.w	r3, r0, #8
   d8e12:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d8e16:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d8e18:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8e1c:	4632      	mov	r2, r6
   d8e1e:	1c41      	adds	r1, r0, #1
   d8e20:	4623      	mov	r3, r4
   d8e22:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d8e24:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d8e26:	f7fc fce5 	bl	d57f4 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d8e2a:	1e02      	subs	r2, r0, #0
   d8e2c:	dd04      	ble.n	d8e38 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d8e2e:	682b      	ldr	r3, [r5, #0]
   d8e30:	4669      	mov	r1, sp
   d8e32:	689b      	ldr	r3, [r3, #8]
   d8e34:	4628      	mov	r0, r5
   d8e36:	4798      	blx	r3
   d8e38:	46c5      	mov	sp, r8
   d8e3a:	e007      	b.n	d8e4c <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d8e3c:	b130      	cbz	r0, d8e4c <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d8e3e:	682b      	ldr	r3, [r5, #0]
   d8e40:	4602      	mov	r2, r0
   d8e42:	689b      	ldr	r3, [r3, #8]
   d8e44:	f107 0108 	add.w	r1, r7, #8
   d8e48:	4628      	mov	r0, r5
   d8e4a:	4798      	blx	r3
    }
}
   d8e4c:	371c      	adds	r7, #28
   d8e4e:	46bd      	mov	sp, r7
   d8e50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8e54:	b003      	add	sp, #12
   d8e56:	4770      	bx	lr

000d8e58 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8e58:	b513      	push	{r0, r1, r4, lr}
   d8e5a:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d8e5c:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8e5e:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d8e62:	6894      	ldr	r4, [r2, #8]
   d8e64:	4619      	mov	r1, r3
   d8e66:	2201      	movs	r2, #1
   d8e68:	47a0      	blx	r4
}
   d8e6a:	b002      	add	sp, #8
   d8e6c:	bd10      	pop	{r4, pc}

000d8e6e <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d8e6e:	6883      	ldr	r3, [r0, #8]
   d8e70:	b1fb      	cbz	r3, d8eb2 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d8e72:	781a      	ldrb	r2, [r3, #0]
   d8e74:	2a03      	cmp	r2, #3
   d8e76:	d81a      	bhi.n	d8eae <_ZNK5spark9JSONValue4typeEv+0x40>
   d8e78:	e8df f002 	tbb	[pc, r2]
   d8e7c:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d8e80:	2005      	movs	r0, #5
   d8e82:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d8e84:	6802      	ldr	r2, [r0, #0]
   d8e86:	685b      	ldr	r3, [r3, #4]
   d8e88:	6852      	ldr	r2, [r2, #4]
   d8e8a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8e8c:	282d      	cmp	r0, #45	; 0x2d
   d8e8e:	d014      	beq.n	d8eba <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8e90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8e94:	2b09      	cmp	r3, #9
   d8e96:	d910      	bls.n	d8eba <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d8e98:	2874      	cmp	r0, #116	; 0x74
   d8e9a:	d010      	beq.n	d8ebe <_ZNK5spark9JSONValue4typeEv+0x50>
   d8e9c:	2866      	cmp	r0, #102	; 0x66
   d8e9e:	d00e      	beq.n	d8ebe <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8ea0:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8ea4:	4258      	negs	r0, r3
   d8ea6:	4158      	adcs	r0, r3
   d8ea8:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d8eaa:	2006      	movs	r0, #6
   d8eac:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8eae:	2000      	movs	r0, #0
   d8eb0:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8eb2:	4618      	mov	r0, r3
   d8eb4:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d8eb6:	2004      	movs	r0, #4
   d8eb8:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d8eba:	2003      	movs	r0, #3
   d8ebc:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d8ebe:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d8ec0:	4770      	bx	lr

000d8ec2 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d8ec2:	b510      	push	{r4, lr}
   d8ec4:	4604      	mov	r4, r0
    switch (type()) {
   d8ec6:	f7ff ffd2 	bl	d8e6e <_ZNK5spark9JSONValue4typeEv>
   d8eca:	2802      	cmp	r0, #2
   d8ecc:	d00d      	beq.n	d8eea <_ZNK5spark9JSONValue5toIntEv+0x28>
   d8ece:	d316      	bcc.n	d8efe <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d8ed0:	2804      	cmp	r0, #4
   d8ed2:	d814      	bhi.n	d8efe <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d8ed4:	6822      	ldr	r2, [r4, #0]
   d8ed6:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d8ed8:	6850      	ldr	r0, [r2, #4]
   d8eda:	685b      	ldr	r3, [r3, #4]
   d8edc:	220a      	movs	r2, #10
   d8ede:	2100      	movs	r1, #0
   d8ee0:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d8ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d8ee6:	f000 bde9 	b.w	d9abc <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d8eea:	6822      	ldr	r2, [r4, #0]
   d8eec:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8eee:	6852      	ldr	r2, [r2, #4]
   d8ef0:	685b      	ldr	r3, [r3, #4]
   d8ef2:	5cd0      	ldrb	r0, [r2, r3]
   d8ef4:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d8ef8:	4258      	negs	r0, r3
   d8efa:	4158      	adcs	r0, r3
   d8efc:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d8efe:	2000      	movs	r0, #0
    }
}
   d8f00:	bd10      	pop	{r4, pc}

000d8f02 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8f02:	b510      	push	{r4, lr}
    if (!n_) {
   d8f04:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8f06:	4604      	mov	r4, r0
    if (!n_) {
   d8f08:	b15b      	cbz	r3, d8f22 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d8f0a:	6880      	ldr	r0, [r0, #8]
   d8f0c:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d8f0e:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d8f10:	3010      	adds	r0, #16
   d8f12:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8f14:	6120      	str	r0, [r4, #16]
    --n_;
   d8f16:	6163      	str	r3, [r4, #20]
    if (n_) {
   d8f18:	b12b      	cbz	r3, d8f26 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d8f1a:	f7ff ff4d 	bl	d8db8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8f1e:	60a0      	str	r0, [r4, #8]
   d8f20:	e001      	b.n	d8f26 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d8f22:	4618      	mov	r0, r3
   d8f24:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d8f26:	2001      	movs	r0, #1
}
   d8f28:	bd10      	pop	{r4, pc}

000d8f2a <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d8f2a:	b510      	push	{r4, lr}
    write('}');
   d8f2c:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d8f2e:	4604      	mov	r4, r0
    write('}');
   d8f30:	f7ff ff92 	bl	d8e58 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d8f34:	2301      	movs	r3, #1
   d8f36:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8f38:	4620      	mov	r0, r4
   d8f3a:	bd10      	pop	{r4, pc}

000d8f3c <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d8f3c:	b508      	push	{r3, lr}
    switch (state_) {
   d8f3e:	7903      	ldrb	r3, [r0, #4]
   d8f40:	2b01      	cmp	r3, #1
   d8f42:	d002      	beq.n	d8f4a <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d8f44:	2b02      	cmp	r3, #2
   d8f46:	d002      	beq.n	d8f4e <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d8f48:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d8f4a:	212c      	movs	r1, #44	; 0x2c
   d8f4c:	e000      	b.n	d8f50 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d8f4e:	213a      	movs	r1, #58	; 0x3a
   d8f50:	f7ff ff82 	bl	d8e58 <_ZN5spark10JSONWriter5writeEc>
   d8f54:	bd08      	pop	{r3, pc}

000d8f56 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d8f56:	b510      	push	{r4, lr}
   d8f58:	4604      	mov	r4, r0
    writeSeparator();
   d8f5a:	f7ff ffef 	bl	d8f3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8f5e:	4620      	mov	r0, r4
   d8f60:	217b      	movs	r1, #123	; 0x7b
   d8f62:	f7ff ff79 	bl	d8e58 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d8f66:	2300      	movs	r3, #0
   d8f68:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8f6a:	4620      	mov	r0, r4
   d8f6c:	bd10      	pop	{r4, pc}
	...

000d8f70 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8f70:	b538      	push	{r3, r4, r5, lr}
   d8f72:	4604      	mov	r4, r0
   d8f74:	460d      	mov	r5, r1
    writeSeparator();
   d8f76:	f7ff ffe1 	bl	d8f3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d8f7a:	6823      	ldr	r3, [r4, #0]
   d8f7c:	4904      	ldr	r1, [pc, #16]	; (d8f90 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8f7e:	68db      	ldr	r3, [r3, #12]
   d8f80:	4620      	mov	r0, r4
   d8f82:	462a      	mov	r2, r5
   d8f84:	4798      	blx	r3
    state_ = NEXT;
   d8f86:	2301      	movs	r3, #1
   d8f88:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8f8a:	4620      	mov	r0, r4
   d8f8c:	bd38      	pop	{r3, r4, r5, pc}
   d8f8e:	bf00      	nop
   d8f90:	000da59f 	.word	0x000da59f

000d8f94 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8f94:	b538      	push	{r3, r4, r5, lr}
   d8f96:	4604      	mov	r4, r0
   d8f98:	460d      	mov	r5, r1
    writeSeparator();
   d8f9a:	f7ff ffcf 	bl	d8f3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8f9e:	6823      	ldr	r3, [r4, #0]
   d8fa0:	4904      	ldr	r1, [pc, #16]	; (d8fb4 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8fa2:	68db      	ldr	r3, [r3, #12]
   d8fa4:	4620      	mov	r0, r4
   d8fa6:	462a      	mov	r2, r5
   d8fa8:	4798      	blx	r3
    state_ = NEXT;
   d8faa:	2301      	movs	r3, #1
   d8fac:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8fae:	4620      	mov	r0, r4
   d8fb0:	bd38      	pop	{r3, r4, r5, pc}
   d8fb2:	bf00      	nop
   d8fb4:	000da33e 	.word	0x000da33e

000d8fb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8fba:	460d      	mov	r5, r1
   d8fbc:	4617      	mov	r7, r2
    write('"');
   d8fbe:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8fc0:	4604      	mov	r4, r0
   d8fc2:	442f      	add	r7, r5
    write('"');
   d8fc4:	f7ff ff48 	bl	d8e58 <_ZN5spark10JSONWriter5writeEc>
   d8fc8:	462a      	mov	r2, r5
    const char* const end = str + size;
   d8fca:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d8fcc:	42ba      	cmp	r2, r7
   d8fce:	d038      	beq.n	d9042 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d8fd0:	4616      	mov	r6, r2
   d8fd2:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d8fd6:	2d22      	cmp	r5, #34	; 0x22
   d8fd8:	d003      	beq.n	d8fe2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8fda:	2d5c      	cmp	r5, #92	; 0x5c
   d8fdc:	d001      	beq.n	d8fe2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8fde:	2d1f      	cmp	r5, #31
   d8fe0:	d82d      	bhi.n	d903e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d8fe2:	6823      	ldr	r3, [r4, #0]
   d8fe4:	1a52      	subs	r2, r2, r1
   d8fe6:	689b      	ldr	r3, [r3, #8]
   d8fe8:	4620      	mov	r0, r4
   d8fea:	4798      	blx	r3
            write('\\');
   d8fec:	215c      	movs	r1, #92	; 0x5c
   d8fee:	4620      	mov	r0, r4
   d8ff0:	f7ff ff32 	bl	d8e58 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8ff4:	2d0c      	cmp	r5, #12
   d8ff6:	d019      	beq.n	d902c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d8ff8:	d807      	bhi.n	d900a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d8ffa:	2d09      	cmp	r5, #9
   d8ffc:	d00f      	beq.n	d901e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d8ffe:	2d0a      	cmp	r5, #10
   d9000:	d012      	beq.n	d9028 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d9002:	2d08      	cmp	r5, #8
   d9004:	d114      	bne.n	d9030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d9006:	2162      	movs	r1, #98	; 0x62
   d9008:	e00a      	b.n	d9020 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d900a:	2d22      	cmp	r5, #34	; 0x22
   d900c:	d005      	beq.n	d901a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d900e:	2d5c      	cmp	r5, #92	; 0x5c
   d9010:	d003      	beq.n	d901a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d9012:	2d0d      	cmp	r5, #13
   d9014:	d10c      	bne.n	d9030 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d9016:	2172      	movs	r1, #114	; 0x72
   d9018:	e002      	b.n	d9020 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d901a:	4629      	mov	r1, r5
   d901c:	e000      	b.n	d9020 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d901e:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d9020:	4620      	mov	r0, r4
   d9022:	f7ff ff19 	bl	d8e58 <_ZN5spark10JSONWriter5writeEc>
                break;
   d9026:	e009      	b.n	d903c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d9028:	216e      	movs	r1, #110	; 0x6e
   d902a:	e7f9      	b.n	d9020 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d902c:	2166      	movs	r1, #102	; 0x66
   d902e:	e7f7      	b.n	d9020 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d9030:	6823      	ldr	r3, [r4, #0]
   d9032:	490a      	ldr	r1, [pc, #40]	; (d905c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d9034:	68db      	ldr	r3, [r3, #12]
   d9036:	462a      	mov	r2, r5
   d9038:	4620      	mov	r0, r4
   d903a:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d903c:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d903e:	4632      	mov	r2, r6
   d9040:	e7c4      	b.n	d8fcc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d9042:	4291      	cmp	r1, r2
   d9044:	d004      	beq.n	d9050 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d9046:	6823      	ldr	r3, [r4, #0]
   d9048:	1a52      	subs	r2, r2, r1
   d904a:	689d      	ldr	r5, [r3, #8]
   d904c:	4620      	mov	r0, r4
   d904e:	47a8      	blx	r5
    }
    write('"');
   d9050:	2122      	movs	r1, #34	; 0x22
   d9052:	4620      	mov	r0, r4
   d9054:	f7ff ff00 	bl	d8e58 <_ZN5spark10JSONWriter5writeEc>
   d9058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d905a:	bf00      	nop
   d905c:	000dae69 	.word	0x000dae69

000d9060 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d9060:	b570      	push	{r4, r5, r6, lr}
   d9062:	4604      	mov	r4, r0
   d9064:	460d      	mov	r5, r1
   d9066:	4616      	mov	r6, r2
    writeSeparator();
   d9068:	f7ff ff68 	bl	d8f3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d906c:	4620      	mov	r0, r4
   d906e:	4632      	mov	r2, r6
   d9070:	4629      	mov	r1, r5
   d9072:	f7ff ffa1 	bl	d8fb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d9076:	2302      	movs	r3, #2
   d9078:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d907a:	4620      	mov	r0, r4
   d907c:	bd70      	pop	{r4, r5, r6, pc}

000d907e <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d907e:	b570      	push	{r4, r5, r6, lr}
   d9080:	4604      	mov	r4, r0
   d9082:	460d      	mov	r5, r1
   d9084:	4616      	mov	r6, r2
    writeSeparator();
   d9086:	f7ff ff59 	bl	d8f3c <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d908a:	4620      	mov	r0, r4
   d908c:	4632      	mov	r2, r6
   d908e:	4629      	mov	r1, r5
   d9090:	f7ff ff92 	bl	d8fb8 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d9094:	2301      	movs	r3, #1
   d9096:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d9098:	4620      	mov	r0, r4
   d909a:	bd70      	pop	{r4, r5, r6, pc}

000d909c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d909c:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d909e:	2300      	movs	r3, #0
   d90a0:	4604      	mov	r4, r0
   d90a2:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d90a4:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d90a6:	4810      	ldr	r0, [pc, #64]	; (d90e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d90a8:	60a0      	str	r0, [r4, #8]
   d90aa:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d90ac:	b1d1      	cbz	r1, d90e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d90ae:	780b      	ldrb	r3, [r1, #0]
   d90b0:	2b03      	cmp	r3, #3
   d90b2:	d006      	beq.n	d90c2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d90b4:	b9b3      	cbnz	r3, d90e4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d90b6:	6813      	ldr	r3, [r2, #0]
   d90b8:	6858      	ldr	r0, [r3, #4]
   d90ba:	684b      	ldr	r3, [r1, #4]
   d90bc:	5cc3      	ldrb	r3, [r0, r3]
   d90be:	2b6e      	cmp	r3, #110	; 0x6e
   d90c0:	d008      	beq.n	d90d4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d90c2:	6813      	ldr	r3, [r2, #0]
   d90c4:	6858      	ldr	r0, [r3, #4]
   d90c6:	684b      	ldr	r3, [r1, #4]
   d90c8:	4403      	add	r3, r0
   d90ca:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d90cc:	688b      	ldr	r3, [r1, #8]
   d90ce:	6849      	ldr	r1, [r1, #4]
   d90d0:	1a5b      	subs	r3, r3, r1
   d90d2:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d90d4:	4611      	mov	r1, r2
   d90d6:	4620      	mov	r0, r4
   d90d8:	f851 3b04 	ldr.w	r3, [r1], #4
   d90dc:	f840 3b04 	str.w	r3, [r0], #4
   d90e0:	f7fd fbcc 	bl	d687c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d90e4:	4620      	mov	r0, r4
   d90e6:	bd10      	pop	{r4, pc}
   d90e8:	000dac70 	.word	0x000dac70

000d90ec <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d90ec:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d90ee:	b510      	push	{r4, lr}
   d90f0:	4604      	mov	r4, r0
   d90f2:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d90f4:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d90f6:	6083      	str	r3, [r0, #8]
   d90f8:	60c3      	str	r3, [r0, #12]
   d90fa:	6103      	str	r3, [r0, #16]
   d90fc:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d90fe:	b171      	cbz	r1, d911e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d9100:	780b      	ldrb	r3, [r1, #0]
   d9102:	2b01      	cmp	r3, #1
   d9104:	d10b      	bne.n	d911e <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d9106:	f101 0310 	add.w	r3, r1, #16
   d910a:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d910c:	68cb      	ldr	r3, [r1, #12]
   d910e:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d9110:	4611      	mov	r1, r2
   d9112:	f851 3b04 	ldr.w	r3, [r1], #4
   d9116:	f840 3b04 	str.w	r3, [r0], #4
   d911a:	f7fd fbaf 	bl	d687c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d911e:	4620      	mov	r0, r4
   d9120:	bd10      	pop	{r4, pc}

000d9122 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d9122:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d9124:	b510      	push	{r4, lr}
   d9126:	4604      	mov	r4, r0
   d9128:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d912a:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d912c:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d912e:	b131      	cbz	r1, d913e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d9130:	4611      	mov	r1, r2
   d9132:	f851 3b04 	ldr.w	r3, [r1], #4
   d9136:	f840 3b04 	str.w	r3, [r0], #4
   d913a:	f7fd fb9f 	bl	d687c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d913e:	4620      	mov	r0, r4
   d9140:	bd10      	pop	{r4, pc}
	...

000d9144 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d9144:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d9146:	4e18      	ldr	r6, [pc, #96]	; (d91a8 <pinAvailable+0x64>)
   d9148:	6831      	ldr	r1, [r6, #0]
   d914a:	f011 0501 	ands.w	r5, r1, #1
   d914e:	4604      	mov	r4, r0
   d9150:	d10a      	bne.n	d9168 <pinAvailable+0x24>
   d9152:	4630      	mov	r0, r6
   d9154:	f7fa ffb0 	bl	d40b8 <__cxa_guard_acquire>
   d9158:	b130      	cbz	r0, d9168 <pinAvailable+0x24>
   d915a:	4629      	mov	r1, r5
   d915c:	4813      	ldr	r0, [pc, #76]	; (d91ac <pinAvailable+0x68>)
   d915e:	f7fc fb97 	bl	d5890 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d9162:	4630      	mov	r0, r6
   d9164:	f7fa ffad 	bl	d40c2 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d9168:	4810      	ldr	r0, [pc, #64]	; (d91ac <pinAvailable+0x68>)
   d916a:	f7fc fb9b 	bl	d58a4 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d916e:	b128      	cbz	r0, d917c <pinAvailable+0x38>
   d9170:	f1a4 030b 	sub.w	r3, r4, #11
   d9174:	2b02      	cmp	r3, #2
   d9176:	d801      	bhi.n	d917c <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d9178:	2000      	movs	r0, #0
   d917a:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d917c:	f000 f85c 	bl	d9238 <_Z19__fetch_global_Wirev>
   d9180:	f7ff fc76 	bl	d8a70 <_ZN7TwoWire9isEnabledEv>
   d9184:	b108      	cbz	r0, d918a <pinAvailable+0x46>
   d9186:	2c01      	cmp	r4, #1
   d9188:	d9f6      	bls.n	d9178 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d918a:	f7ff fc0d 	bl	d89a8 <_Z22__fetch_global_Serial1v>
   d918e:	f7ff fc07 	bl	d89a0 <_ZN11USARTSerial9isEnabledEv>
   d9192:	b118      	cbz	r0, d919c <pinAvailable+0x58>
   d9194:	f1a4 0309 	sub.w	r3, r4, #9
   d9198:	2b01      	cmp	r3, #1
   d919a:	d9ed      	bls.n	d9178 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d919c:	2c23      	cmp	r4, #35	; 0x23
   d919e:	bf8c      	ite	hi
   d91a0:	2000      	movhi	r0, #0
   d91a2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d91a4:	bd70      	pop	{r4, r5, r6, pc}
   d91a6:	bf00      	nop
   d91a8:	2003e700 	.word	0x2003e700
   d91ac:	2003e704 	.word	0x2003e704

000d91b0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d91b0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d91b2:	b538      	push	{r3, r4, r5, lr}
   d91b4:	4604      	mov	r4, r0
   d91b6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d91b8:	d80a      	bhi.n	d91d0 <pinMode+0x20>
   d91ba:	29ff      	cmp	r1, #255	; 0xff
   d91bc:	d008      	beq.n	d91d0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d91be:	f7ff ffc1 	bl	d9144 <pinAvailable>
   d91c2:	b128      	cbz	r0, d91d0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d91c4:	4629      	mov	r1, r5
   d91c6:	4620      	mov	r0, r4
}
   d91c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d91cc:	f7fc b82c 	b.w	d5228 <HAL_Pin_Mode>
   d91d0:	bd38      	pop	{r3, r4, r5, pc}

000d91d2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d91d2:	b538      	push	{r3, r4, r5, lr}
   d91d4:	4604      	mov	r4, r0
   d91d6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d91d8:	f7fc f82e 	bl	d5238 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d91dc:	28ff      	cmp	r0, #255	; 0xff
   d91de:	d010      	beq.n	d9202 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d91e0:	2806      	cmp	r0, #6
   d91e2:	d804      	bhi.n	d91ee <digitalWrite+0x1c>
   d91e4:	234d      	movs	r3, #77	; 0x4d
   d91e6:	fa23 f000 	lsr.w	r0, r3, r0
   d91ea:	07c3      	lsls	r3, r0, #31
   d91ec:	d409      	bmi.n	d9202 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d91ee:	4620      	mov	r0, r4
   d91f0:	f7ff ffa8 	bl	d9144 <pinAvailable>
   d91f4:	b128      	cbz	r0, d9202 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d91f6:	4629      	mov	r1, r5
   d91f8:	4620      	mov	r0, r4
}
   d91fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d91fe:	f7fc b823 	b.w	d5248 <HAL_GPIO_Write>
   d9202:	bd38      	pop	{r3, r4, r5, pc}

000d9204 <_Z17acquireWireBufferv>:
   d9204:	b570      	push	{r4, r5, r6, lr}
   d9206:	4604      	mov	r4, r0
   d9208:	2514      	movs	r5, #20
   d920a:	462a      	mov	r2, r5
   d920c:	4e09      	ldr	r6, [pc, #36]	; (d9234 <_Z17acquireWireBufferv+0x30>)
   d920e:	2100      	movs	r1, #0
   d9210:	f000 fb1d 	bl	d984e <memset>
   d9214:	8025      	strh	r5, [r4, #0]
   d9216:	2520      	movs	r5, #32
   d9218:	4631      	mov	r1, r6
   d921a:	60a5      	str	r5, [r4, #8]
   d921c:	6125      	str	r5, [r4, #16]
   d921e:	4628      	mov	r0, r5
   d9220:	f000 f840 	bl	d92a4 <_ZnajRKSt9nothrow_t>
   d9224:	4631      	mov	r1, r6
   d9226:	6060      	str	r0, [r4, #4]
   d9228:	4628      	mov	r0, r5
   d922a:	f000 f83b 	bl	d92a4 <_ZnajRKSt9nothrow_t>
   d922e:	60e0      	str	r0, [r4, #12]
   d9230:	4620      	mov	r0, r4
   d9232:	bd70      	pop	{r4, r5, r6, pc}
   d9234:	000dae6f 	.word	0x000dae6f

000d9238 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9238:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d923a:	4d0e      	ldr	r5, [pc, #56]	; (d9274 <_Z19__fetch_global_Wirev+0x3c>)
   d923c:	6829      	ldr	r1, [r5, #0]
   d923e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d9242:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d9244:	d113      	bne.n	d926e <_Z19__fetch_global_Wirev+0x36>
   d9246:	4628      	mov	r0, r5
   d9248:	f7fa ff36 	bl	d40b8 <__cxa_guard_acquire>
   d924c:	b178      	cbz	r0, d926e <_Z19__fetch_global_Wirev+0x36>
   d924e:	a801      	add	r0, sp, #4
   d9250:	f7ff ffd8 	bl	d9204 <_Z17acquireWireBufferv>
   d9254:	aa01      	add	r2, sp, #4
   d9256:	4621      	mov	r1, r4
   d9258:	4807      	ldr	r0, [pc, #28]	; (d9278 <_Z19__fetch_global_Wirev+0x40>)
   d925a:	f7ff fbf7 	bl	d8a4c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d925e:	4628      	mov	r0, r5
   d9260:	f7fa ff2f 	bl	d40c2 <__cxa_guard_release>
   d9264:	4a05      	ldr	r2, [pc, #20]	; (d927c <_Z19__fetch_global_Wirev+0x44>)
   d9266:	4906      	ldr	r1, [pc, #24]	; (d9280 <_Z19__fetch_global_Wirev+0x48>)
   d9268:	4803      	ldr	r0, [pc, #12]	; (d9278 <_Z19__fetch_global_Wirev+0x40>)
   d926a:	f000 f80b 	bl	d9284 <__aeabi_atexit>
	return wire;
}
   d926e:	4802      	ldr	r0, [pc, #8]	; (d9278 <_Z19__fetch_global_Wirev+0x40>)
   d9270:	b007      	add	sp, #28
   d9272:	bd30      	pop	{r4, r5, pc}
   d9274:	2003e710 	.word	0x2003e710
   d9278:	2003e714 	.word	0x2003e714
   d927c:	2003d848 	.word	0x2003d848
   d9280:	000d89f5 	.word	0x000d89f5

000d9284 <__aeabi_atexit>:
   d9284:	460b      	mov	r3, r1
   d9286:	4601      	mov	r1, r0
   d9288:	4618      	mov	r0, r3
   d928a:	f000 b9a5 	b.w	d95d8 <__cxa_atexit>
	...

000d9290 <_ZSt15get_new_handlerv>:
   d9290:	4b02      	ldr	r3, [pc, #8]	; (d929c <_ZSt15get_new_handlerv+0xc>)
   d9292:	6818      	ldr	r0, [r3, #0]
   d9294:	f3bf 8f5f 	dmb	sy
   d9298:	4770      	bx	lr
   d929a:	bf00      	nop
   d929c:	2003e728 	.word	0x2003e728

000d92a0 <_ZdlPvj>:
   d92a0:	f7fa befb 	b.w	d409a <_ZdlPv>

000d92a4 <_ZnajRKSt9nothrow_t>:
   d92a4:	f000 b800 	b.w	d92a8 <_ZnwjRKSt9nothrow_t>

000d92a8 <_ZnwjRKSt9nothrow_t>:
   d92a8:	b510      	push	{r4, lr}
   d92aa:	2800      	cmp	r0, #0
   d92ac:	bf14      	ite	ne
   d92ae:	4604      	movne	r4, r0
   d92b0:	2401      	moveq	r4, #1
   d92b2:	4620      	mov	r0, r4
   d92b4:	f7fc fa76 	bl	d57a4 <malloc>
   d92b8:	b920      	cbnz	r0, d92c4 <_ZnwjRKSt9nothrow_t+0x1c>
   d92ba:	f7ff ffe9 	bl	d9290 <_ZSt15get_new_handlerv>
   d92be:	b108      	cbz	r0, d92c4 <_ZnwjRKSt9nothrow_t+0x1c>
   d92c0:	4780      	blx	r0
   d92c2:	e7f6      	b.n	d92b2 <_ZnwjRKSt9nothrow_t+0xa>
   d92c4:	bd10      	pop	{r4, pc}
	...

000d92c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d92c8:	4b18      	ldr	r3, [pc, #96]	; (d932c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d92ca:	681a      	ldr	r2, [r3, #0]
   d92cc:	07d1      	lsls	r1, r2, #31
   d92ce:	bf5c      	itt	pl
   d92d0:	2201      	movpl	r2, #1
   d92d2:	601a      	strpl	r2, [r3, #0]
   d92d4:	4b16      	ldr	r3, [pc, #88]	; (d9330 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d92d6:	681a      	ldr	r2, [r3, #0]
   d92d8:	07d2      	lsls	r2, r2, #31
   d92da:	bf5c      	itt	pl
   d92dc:	2201      	movpl	r2, #1
   d92de:	601a      	strpl	r2, [r3, #0]
   d92e0:	4b14      	ldr	r3, [pc, #80]	; (d9334 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d92e2:	681a      	ldr	r2, [r3, #0]
   d92e4:	07d0      	lsls	r0, r2, #31
   d92e6:	bf5c      	itt	pl
   d92e8:	2201      	movpl	r2, #1
   d92ea:	601a      	strpl	r2, [r3, #0]
   d92ec:	4b12      	ldr	r3, [pc, #72]	; (d9338 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d92ee:	681a      	ldr	r2, [r3, #0]
   d92f0:	07d1      	lsls	r1, r2, #31
   d92f2:	bf5c      	itt	pl
   d92f4:	2201      	movpl	r2, #1
   d92f6:	601a      	strpl	r2, [r3, #0]
   d92f8:	4b10      	ldr	r3, [pc, #64]	; (d933c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d92fa:	681a      	ldr	r2, [r3, #0]
   d92fc:	07d2      	lsls	r2, r2, #31
   d92fe:	bf5c      	itt	pl
   d9300:	2201      	movpl	r2, #1
   d9302:	601a      	strpl	r2, [r3, #0]
   d9304:	4b0e      	ldr	r3, [pc, #56]	; (d9340 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9306:	681a      	ldr	r2, [r3, #0]
   d9308:	07d0      	lsls	r0, r2, #31
   d930a:	bf5c      	itt	pl
   d930c:	2201      	movpl	r2, #1
   d930e:	601a      	strpl	r2, [r3, #0]
   d9310:	4b0c      	ldr	r3, [pc, #48]	; (d9344 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d9312:	681a      	ldr	r2, [r3, #0]
   d9314:	07d1      	lsls	r1, r2, #31
   d9316:	bf5c      	itt	pl
   d9318:	2201      	movpl	r2, #1
   d931a:	601a      	strpl	r2, [r3, #0]
   d931c:	4b0a      	ldr	r3, [pc, #40]	; (d9348 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d931e:	681a      	ldr	r2, [r3, #0]
   d9320:	07d2      	lsls	r2, r2, #31
   d9322:	bf5c      	itt	pl
   d9324:	2201      	movpl	r2, #1
   d9326:	601a      	strpl	r2, [r3, #0]
   d9328:	4770      	bx	lr
   d932a:	bf00      	nop
   d932c:	2003e748 	.word	0x2003e748
   d9330:	2003e744 	.word	0x2003e744
   d9334:	2003e740 	.word	0x2003e740
   d9338:	2003e73c 	.word	0x2003e73c
   d933c:	2003e738 	.word	0x2003e738
   d9340:	2003e734 	.word	0x2003e734
   d9344:	2003e730 	.word	0x2003e730
   d9348:	2003e72c 	.word	0x2003e72c

000d934c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d934c:	4b24      	ldr	r3, [pc, #144]	; (d93e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d934e:	681a      	ldr	r2, [r3, #0]
   d9350:	07d0      	lsls	r0, r2, #31
   d9352:	bf5c      	itt	pl
   d9354:	2201      	movpl	r2, #1
   d9356:	601a      	strpl	r2, [r3, #0]
   d9358:	4b22      	ldr	r3, [pc, #136]	; (d93e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d935a:	681a      	ldr	r2, [r3, #0]
   d935c:	07d1      	lsls	r1, r2, #31
   d935e:	bf5c      	itt	pl
   d9360:	2201      	movpl	r2, #1
   d9362:	601a      	strpl	r2, [r3, #0]
   d9364:	4b20      	ldr	r3, [pc, #128]	; (d93e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d9366:	681a      	ldr	r2, [r3, #0]
   d9368:	07d2      	lsls	r2, r2, #31
   d936a:	bf5c      	itt	pl
   d936c:	2201      	movpl	r2, #1
   d936e:	601a      	strpl	r2, [r3, #0]
   d9370:	4b1e      	ldr	r3, [pc, #120]	; (d93ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d9372:	681a      	ldr	r2, [r3, #0]
   d9374:	07d0      	lsls	r0, r2, #31
   d9376:	bf5c      	itt	pl
   d9378:	2201      	movpl	r2, #1
   d937a:	601a      	strpl	r2, [r3, #0]
   d937c:	4b1c      	ldr	r3, [pc, #112]	; (d93f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d937e:	681a      	ldr	r2, [r3, #0]
   d9380:	07d1      	lsls	r1, r2, #31
   d9382:	bf5c      	itt	pl
   d9384:	2201      	movpl	r2, #1
   d9386:	601a      	strpl	r2, [r3, #0]
   d9388:	4b1a      	ldr	r3, [pc, #104]	; (d93f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d938a:	681a      	ldr	r2, [r3, #0]
   d938c:	07d2      	lsls	r2, r2, #31
   d938e:	bf5c      	itt	pl
   d9390:	2201      	movpl	r2, #1
   d9392:	601a      	strpl	r2, [r3, #0]
   d9394:	4b18      	ldr	r3, [pc, #96]	; (d93f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d9396:	681a      	ldr	r2, [r3, #0]
   d9398:	07d0      	lsls	r0, r2, #31
   d939a:	bf5c      	itt	pl
   d939c:	2201      	movpl	r2, #1
   d939e:	601a      	strpl	r2, [r3, #0]
   d93a0:	4b16      	ldr	r3, [pc, #88]	; (d93fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d93a2:	681a      	ldr	r2, [r3, #0]
   d93a4:	07d1      	lsls	r1, r2, #31
   d93a6:	bf5c      	itt	pl
   d93a8:	2201      	movpl	r2, #1
   d93aa:	601a      	strpl	r2, [r3, #0]
   d93ac:	4b14      	ldr	r3, [pc, #80]	; (d9400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d93ae:	681a      	ldr	r2, [r3, #0]
   d93b0:	07d2      	lsls	r2, r2, #31
   d93b2:	bf5c      	itt	pl
   d93b4:	2201      	movpl	r2, #1
   d93b6:	601a      	strpl	r2, [r3, #0]
   d93b8:	4b12      	ldr	r3, [pc, #72]	; (d9404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d93ba:	681a      	ldr	r2, [r3, #0]
   d93bc:	07d0      	lsls	r0, r2, #31
   d93be:	bf5c      	itt	pl
   d93c0:	2201      	movpl	r2, #1
   d93c2:	601a      	strpl	r2, [r3, #0]
   d93c4:	4b10      	ldr	r3, [pc, #64]	; (d9408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d93c6:	681a      	ldr	r2, [r3, #0]
   d93c8:	07d1      	lsls	r1, r2, #31
   d93ca:	bf5c      	itt	pl
   d93cc:	2201      	movpl	r2, #1
   d93ce:	601a      	strpl	r2, [r3, #0]
   d93d0:	4b0e      	ldr	r3, [pc, #56]	; (d940c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d93d2:	681a      	ldr	r2, [r3, #0]
   d93d4:	07d2      	lsls	r2, r2, #31
   d93d6:	bf5c      	itt	pl
   d93d8:	2201      	movpl	r2, #1
   d93da:	601a      	strpl	r2, [r3, #0]
   d93dc:	4770      	bx	lr
   d93de:	bf00      	nop
   d93e0:	2003e778 	.word	0x2003e778
   d93e4:	2003e774 	.word	0x2003e774
   d93e8:	2003e770 	.word	0x2003e770
   d93ec:	2003e76c 	.word	0x2003e76c
   d93f0:	2003e768 	.word	0x2003e768
   d93f4:	2003e764 	.word	0x2003e764
   d93f8:	2003e760 	.word	0x2003e760
   d93fc:	2003e75c 	.word	0x2003e75c
   d9400:	2003e758 	.word	0x2003e758
   d9404:	2003e754 	.word	0x2003e754
   d9408:	2003e750 	.word	0x2003e750
   d940c:	2003e74c 	.word	0x2003e74c

000d9410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d9410:	4b24      	ldr	r3, [pc, #144]	; (d94a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d9412:	681a      	ldr	r2, [r3, #0]
   d9414:	07d0      	lsls	r0, r2, #31
   d9416:	bf5c      	itt	pl
   d9418:	2201      	movpl	r2, #1
   d941a:	601a      	strpl	r2, [r3, #0]
   d941c:	4b22      	ldr	r3, [pc, #136]	; (d94a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d941e:	681a      	ldr	r2, [r3, #0]
   d9420:	07d1      	lsls	r1, r2, #31
   d9422:	bf5c      	itt	pl
   d9424:	2201      	movpl	r2, #1
   d9426:	601a      	strpl	r2, [r3, #0]
   d9428:	4b20      	ldr	r3, [pc, #128]	; (d94ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d942a:	681a      	ldr	r2, [r3, #0]
   d942c:	07d2      	lsls	r2, r2, #31
   d942e:	bf5c      	itt	pl
   d9430:	2201      	movpl	r2, #1
   d9432:	601a      	strpl	r2, [r3, #0]
   d9434:	4b1e      	ldr	r3, [pc, #120]	; (d94b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d9436:	681a      	ldr	r2, [r3, #0]
   d9438:	07d0      	lsls	r0, r2, #31
   d943a:	bf5c      	itt	pl
   d943c:	2201      	movpl	r2, #1
   d943e:	601a      	strpl	r2, [r3, #0]
   d9440:	4b1c      	ldr	r3, [pc, #112]	; (d94b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d9442:	681a      	ldr	r2, [r3, #0]
   d9444:	07d1      	lsls	r1, r2, #31
   d9446:	bf5c      	itt	pl
   d9448:	2201      	movpl	r2, #1
   d944a:	601a      	strpl	r2, [r3, #0]
   d944c:	4b1a      	ldr	r3, [pc, #104]	; (d94b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d944e:	681a      	ldr	r2, [r3, #0]
   d9450:	07d2      	lsls	r2, r2, #31
   d9452:	bf5c      	itt	pl
   d9454:	2201      	movpl	r2, #1
   d9456:	601a      	strpl	r2, [r3, #0]
   d9458:	4b18      	ldr	r3, [pc, #96]	; (d94bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d945a:	681a      	ldr	r2, [r3, #0]
   d945c:	07d0      	lsls	r0, r2, #31
   d945e:	bf5c      	itt	pl
   d9460:	2201      	movpl	r2, #1
   d9462:	601a      	strpl	r2, [r3, #0]
   d9464:	4b16      	ldr	r3, [pc, #88]	; (d94c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d9466:	681a      	ldr	r2, [r3, #0]
   d9468:	07d1      	lsls	r1, r2, #31
   d946a:	bf5c      	itt	pl
   d946c:	2201      	movpl	r2, #1
   d946e:	601a      	strpl	r2, [r3, #0]
   d9470:	4b14      	ldr	r3, [pc, #80]	; (d94c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d9472:	681a      	ldr	r2, [r3, #0]
   d9474:	07d2      	lsls	r2, r2, #31
   d9476:	bf5c      	itt	pl
   d9478:	2201      	movpl	r2, #1
   d947a:	601a      	strpl	r2, [r3, #0]
   d947c:	4b12      	ldr	r3, [pc, #72]	; (d94c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d947e:	681a      	ldr	r2, [r3, #0]
   d9480:	07d0      	lsls	r0, r2, #31
   d9482:	bf5c      	itt	pl
   d9484:	2201      	movpl	r2, #1
   d9486:	601a      	strpl	r2, [r3, #0]
   d9488:	4b10      	ldr	r3, [pc, #64]	; (d94cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d948a:	681a      	ldr	r2, [r3, #0]
   d948c:	07d1      	lsls	r1, r2, #31
   d948e:	bf5c      	itt	pl
   d9490:	2201      	movpl	r2, #1
   d9492:	601a      	strpl	r2, [r3, #0]
   d9494:	4b0e      	ldr	r3, [pc, #56]	; (d94d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d9496:	681a      	ldr	r2, [r3, #0]
   d9498:	07d2      	lsls	r2, r2, #31
   d949a:	bf5c      	itt	pl
   d949c:	2201      	movpl	r2, #1
   d949e:	601a      	strpl	r2, [r3, #0]
   d94a0:	4770      	bx	lr
   d94a2:	bf00      	nop
   d94a4:	2003e7a8 	.word	0x2003e7a8
   d94a8:	2003e7a4 	.word	0x2003e7a4
   d94ac:	2003e7a0 	.word	0x2003e7a0
   d94b0:	2003e79c 	.word	0x2003e79c
   d94b4:	2003e798 	.word	0x2003e798
   d94b8:	2003e794 	.word	0x2003e794
   d94bc:	2003e790 	.word	0x2003e790
   d94c0:	2003e78c 	.word	0x2003e78c
   d94c4:	2003e788 	.word	0x2003e788
   d94c8:	2003e784 	.word	0x2003e784
   d94cc:	2003e780 	.word	0x2003e780
   d94d0:	2003e77c 	.word	0x2003e77c

000d94d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d94d4:	4b18      	ldr	r3, [pc, #96]	; (d9538 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d94d6:	681a      	ldr	r2, [r3, #0]
   d94d8:	07d1      	lsls	r1, r2, #31
   d94da:	bf5c      	itt	pl
   d94dc:	2201      	movpl	r2, #1
   d94de:	601a      	strpl	r2, [r3, #0]
   d94e0:	4b16      	ldr	r3, [pc, #88]	; (d953c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d94e2:	681a      	ldr	r2, [r3, #0]
   d94e4:	07d2      	lsls	r2, r2, #31
   d94e6:	bf5c      	itt	pl
   d94e8:	2201      	movpl	r2, #1
   d94ea:	601a      	strpl	r2, [r3, #0]
   d94ec:	4b14      	ldr	r3, [pc, #80]	; (d9540 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d94ee:	681a      	ldr	r2, [r3, #0]
   d94f0:	07d0      	lsls	r0, r2, #31
   d94f2:	bf5c      	itt	pl
   d94f4:	2201      	movpl	r2, #1
   d94f6:	601a      	strpl	r2, [r3, #0]
   d94f8:	4b12      	ldr	r3, [pc, #72]	; (d9544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d94fa:	681a      	ldr	r2, [r3, #0]
   d94fc:	07d1      	lsls	r1, r2, #31
   d94fe:	bf5c      	itt	pl
   d9500:	2201      	movpl	r2, #1
   d9502:	601a      	strpl	r2, [r3, #0]
   d9504:	4b10      	ldr	r3, [pc, #64]	; (d9548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d9506:	681a      	ldr	r2, [r3, #0]
   d9508:	07d2      	lsls	r2, r2, #31
   d950a:	bf5c      	itt	pl
   d950c:	2201      	movpl	r2, #1
   d950e:	601a      	strpl	r2, [r3, #0]
   d9510:	4b0e      	ldr	r3, [pc, #56]	; (d954c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d9512:	681a      	ldr	r2, [r3, #0]
   d9514:	07d0      	lsls	r0, r2, #31
   d9516:	bf5c      	itt	pl
   d9518:	2201      	movpl	r2, #1
   d951a:	601a      	strpl	r2, [r3, #0]
   d951c:	4b0c      	ldr	r3, [pc, #48]	; (d9550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d951e:	681a      	ldr	r2, [r3, #0]
   d9520:	07d1      	lsls	r1, r2, #31
   d9522:	bf5c      	itt	pl
   d9524:	2201      	movpl	r2, #1
   d9526:	601a      	strpl	r2, [r3, #0]
   d9528:	4b0a      	ldr	r3, [pc, #40]	; (d9554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d952a:	681a      	ldr	r2, [r3, #0]
   d952c:	07d2      	lsls	r2, r2, #31
   d952e:	bf5c      	itt	pl
   d9530:	2201      	movpl	r2, #1
   d9532:	601a      	strpl	r2, [r3, #0]
   d9534:	4770      	bx	lr
   d9536:	bf00      	nop
   d9538:	2003e7c8 	.word	0x2003e7c8
   d953c:	2003e7c4 	.word	0x2003e7c4
   d9540:	2003e7c0 	.word	0x2003e7c0
   d9544:	2003e7bc 	.word	0x2003e7bc
   d9548:	2003e7b8 	.word	0x2003e7b8
   d954c:	2003e7b4 	.word	0x2003e7b4
   d9550:	2003e7b0 	.word	0x2003e7b0
   d9554:	2003e7ac 	.word	0x2003e7ac

000d9558 <asctime>:
   d9558:	4b09      	ldr	r3, [pc, #36]	; (d9580 <asctime+0x28>)
   d955a:	b570      	push	{r4, r5, r6, lr}
   d955c:	681c      	ldr	r4, [r3, #0]
   d955e:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d9560:	4606      	mov	r6, r0
   d9562:	b93d      	cbnz	r5, d9574 <asctime+0x1c>
   d9564:	201a      	movs	r0, #26
   d9566:	f7fc f91d 	bl	d57a4 <malloc>
   d956a:	221a      	movs	r2, #26
   d956c:	6420      	str	r0, [r4, #64]	; 0x40
   d956e:	4629      	mov	r1, r5
   d9570:	f000 f96d 	bl	d984e <memset>
   d9574:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d9576:	4630      	mov	r0, r6
   d9578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d957c:	f000 b802 	b.w	d9584 <asctime_r>
   d9580:	2003d7f4 	.word	0x2003d7f4

000d9584 <asctime_r>:
   d9584:	b510      	push	{r4, lr}
   d9586:	460c      	mov	r4, r1
   d9588:	6941      	ldr	r1, [r0, #20]
   d958a:	6903      	ldr	r3, [r0, #16]
   d958c:	6982      	ldr	r2, [r0, #24]
   d958e:	b086      	sub	sp, #24
   d9590:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9594:	9104      	str	r1, [sp, #16]
   d9596:	6801      	ldr	r1, [r0, #0]
   d9598:	9103      	str	r1, [sp, #12]
   d959a:	6841      	ldr	r1, [r0, #4]
   d959c:	9102      	str	r1, [sp, #8]
   d959e:	6881      	ldr	r1, [r0, #8]
   d95a0:	9101      	str	r1, [sp, #4]
   d95a2:	68c1      	ldr	r1, [r0, #12]
   d95a4:	9100      	str	r1, [sp, #0]
   d95a6:	4907      	ldr	r1, [pc, #28]	; (d95c4 <asctime_r+0x40>)
   d95a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d95ac:	440b      	add	r3, r1
   d95ae:	4906      	ldr	r1, [pc, #24]	; (d95c8 <asctime_r+0x44>)
   d95b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d95b4:	440a      	add	r2, r1
   d95b6:	4620      	mov	r0, r4
   d95b8:	4904      	ldr	r1, [pc, #16]	; (d95cc <asctime_r+0x48>)
   d95ba:	f7fc f90b 	bl	d57d4 <siprintf>
   d95be:	4620      	mov	r0, r4
   d95c0:	b006      	add	sp, #24
   d95c2:	bd10      	pop	{r4, pc}
   d95c4:	000dae85 	.word	0x000dae85
   d95c8:	000dae70 	.word	0x000dae70
   d95cc:	000daea9 	.word	0x000daea9

000d95d0 <atol>:
   d95d0:	220a      	movs	r2, #10
   d95d2:	2100      	movs	r1, #0
   d95d4:	f000 ba72 	b.w	d9abc <strtol>

000d95d8 <__cxa_atexit>:
   d95d8:	b510      	push	{r4, lr}
   d95da:	4c05      	ldr	r4, [pc, #20]	; (d95f0 <__cxa_atexit+0x18>)
   d95dc:	4613      	mov	r3, r2
   d95de:	b12c      	cbz	r4, d95ec <__cxa_atexit+0x14>
   d95e0:	460a      	mov	r2, r1
   d95e2:	4601      	mov	r1, r0
   d95e4:	2002      	movs	r0, #2
   d95e6:	f3af 8000 	nop.w
   d95ea:	bd10      	pop	{r4, pc}
   d95ec:	4620      	mov	r0, r4
   d95ee:	bd10      	pop	{r4, pc}
   d95f0:	00000000 	.word	0x00000000

000d95f4 <localtime>:
   d95f4:	b538      	push	{r3, r4, r5, lr}
   d95f6:	4b07      	ldr	r3, [pc, #28]	; (d9614 <localtime+0x20>)
   d95f8:	681c      	ldr	r4, [r3, #0]
   d95fa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d95fc:	4605      	mov	r5, r0
   d95fe:	b91b      	cbnz	r3, d9608 <localtime+0x14>
   d9600:	2024      	movs	r0, #36	; 0x24
   d9602:	f7fc f8cf 	bl	d57a4 <malloc>
   d9606:	63e0      	str	r0, [r4, #60]	; 0x3c
   d9608:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d960a:	4628      	mov	r0, r5
   d960c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9610:	f000 b802 	b.w	d9618 <localtime_r>
   d9614:	2003d7f4 	.word	0x2003d7f4

000d9618 <localtime_r>:
   d9618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d961c:	460c      	mov	r4, r1
   d961e:	4680      	mov	r8, r0
   d9620:	f000 fd5e 	bl	da0e0 <__gettzinfo>
   d9624:	4621      	mov	r1, r4
   d9626:	4607      	mov	r7, r0
   d9628:	4640      	mov	r0, r8
   d962a:	f000 fd5d 	bl	da0e8 <gmtime_r>
   d962e:	6946      	ldr	r6, [r0, #20]
   d9630:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d9634:	07b3      	lsls	r3, r6, #30
   d9636:	4604      	mov	r4, r0
   d9638:	d105      	bne.n	d9646 <localtime_r+0x2e>
   d963a:	2264      	movs	r2, #100	; 0x64
   d963c:	fb96 f3f2 	sdiv	r3, r6, r2
   d9640:	fb02 6313 	mls	r3, r2, r3, r6
   d9644:	b94b      	cbnz	r3, d965a <localtime_r+0x42>
   d9646:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d964a:	fb96 f3f5 	sdiv	r3, r6, r5
   d964e:	fb05 6513 	mls	r5, r5, r3, r6
   d9652:	fab5 f385 	clz	r3, r5
   d9656:	095b      	lsrs	r3, r3, #5
   d9658:	e000      	b.n	d965c <localtime_r+0x44>
   d965a:	2301      	movs	r3, #1
   d965c:	4a5f      	ldr	r2, [pc, #380]	; (d97dc <localtime_r+0x1c4>)
   d965e:	2530      	movs	r5, #48	; 0x30
   d9660:	fb05 2503 	mla	r5, r5, r3, r2
   d9664:	f000 fb70 	bl	d9d48 <__tz_lock>
   d9668:	f000 fb70 	bl	d9d4c <_tzset_unlocked>
   d966c:	4b5c      	ldr	r3, [pc, #368]	; (d97e0 <localtime_r+0x1c8>)
   d966e:	681b      	ldr	r3, [r3, #0]
   d9670:	b1f3      	cbz	r3, d96b0 <localtime_r+0x98>
   d9672:	687b      	ldr	r3, [r7, #4]
   d9674:	429e      	cmp	r6, r3
   d9676:	d105      	bne.n	d9684 <localtime_r+0x6c>
   d9678:	6839      	ldr	r1, [r7, #0]
   d967a:	f8d8 3000 	ldr.w	r3, [r8]
   d967e:	69fa      	ldr	r2, [r7, #28]
   d9680:	b941      	cbnz	r1, d9694 <localtime_r+0x7c>
   d9682:	e00a      	b.n	d969a <localtime_r+0x82>
   d9684:	4630      	mov	r0, r6
   d9686:	f000 fab7 	bl	d9bf8 <__tzcalc_limits>
   d968a:	2800      	cmp	r0, #0
   d968c:	d1f4      	bne.n	d9678 <localtime_r+0x60>
   d968e:	f04f 33ff 	mov.w	r3, #4294967295
   d9692:	e00d      	b.n	d96b0 <localtime_r+0x98>
   d9694:	4293      	cmp	r3, r2
   d9696:	db08      	blt.n	d96aa <localtime_r+0x92>
   d9698:	e001      	b.n	d969e <localtime_r+0x86>
   d969a:	4293      	cmp	r3, r2
   d969c:	da07      	bge.n	d96ae <localtime_r+0x96>
   d969e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d96a0:	4293      	cmp	r3, r2
   d96a2:	bfac      	ite	ge
   d96a4:	2300      	movge	r3, #0
   d96a6:	2301      	movlt	r3, #1
   d96a8:	e002      	b.n	d96b0 <localtime_r+0x98>
   d96aa:	2300      	movs	r3, #0
   d96ac:	e000      	b.n	d96b0 <localtime_r+0x98>
   d96ae:	2301      	movs	r3, #1
   d96b0:	6223      	str	r3, [r4, #32]
   d96b2:	6a23      	ldr	r3, [r4, #32]
   d96b4:	2b01      	cmp	r3, #1
   d96b6:	bf0c      	ite	eq
   d96b8:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d96ba:	6a39      	ldrne	r1, [r7, #32]
   d96bc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d96c0:	203c      	movs	r0, #60	; 0x3c
   d96c2:	fb91 f6f3 	sdiv	r6, r1, r3
   d96c6:	fb03 1316 	mls	r3, r3, r6, r1
   d96ca:	6861      	ldr	r1, [r4, #4]
   d96cc:	fb93 f2f0 	sdiv	r2, r3, r0
   d96d0:	fb00 3012 	mls	r0, r0, r2, r3
   d96d4:	6823      	ldr	r3, [r4, #0]
   d96d6:	1a89      	subs	r1, r1, r2
   d96d8:	68a2      	ldr	r2, [r4, #8]
   d96da:	6061      	str	r1, [r4, #4]
   d96dc:	1a1b      	subs	r3, r3, r0
   d96de:	1b92      	subs	r2, r2, r6
   d96e0:	2b3b      	cmp	r3, #59	; 0x3b
   d96e2:	6023      	str	r3, [r4, #0]
   d96e4:	60a2      	str	r2, [r4, #8]
   d96e6:	dd03      	ble.n	d96f0 <localtime_r+0xd8>
   d96e8:	3101      	adds	r1, #1
   d96ea:	6061      	str	r1, [r4, #4]
   d96ec:	3b3c      	subs	r3, #60	; 0x3c
   d96ee:	e004      	b.n	d96fa <localtime_r+0xe2>
   d96f0:	2b00      	cmp	r3, #0
   d96f2:	da03      	bge.n	d96fc <localtime_r+0xe4>
   d96f4:	3901      	subs	r1, #1
   d96f6:	6061      	str	r1, [r4, #4]
   d96f8:	333c      	adds	r3, #60	; 0x3c
   d96fa:	6023      	str	r3, [r4, #0]
   d96fc:	6863      	ldr	r3, [r4, #4]
   d96fe:	2b3b      	cmp	r3, #59	; 0x3b
   d9700:	dd03      	ble.n	d970a <localtime_r+0xf2>
   d9702:	3201      	adds	r2, #1
   d9704:	60a2      	str	r2, [r4, #8]
   d9706:	3b3c      	subs	r3, #60	; 0x3c
   d9708:	e004      	b.n	d9714 <localtime_r+0xfc>
   d970a:	2b00      	cmp	r3, #0
   d970c:	da03      	bge.n	d9716 <localtime_r+0xfe>
   d970e:	3a01      	subs	r2, #1
   d9710:	60a2      	str	r2, [r4, #8]
   d9712:	333c      	adds	r3, #60	; 0x3c
   d9714:	6063      	str	r3, [r4, #4]
   d9716:	68a3      	ldr	r3, [r4, #8]
   d9718:	2b17      	cmp	r3, #23
   d971a:	dd22      	ble.n	d9762 <localtime_r+0x14a>
   d971c:	69e2      	ldr	r2, [r4, #28]
   d971e:	3201      	adds	r2, #1
   d9720:	61e2      	str	r2, [r4, #28]
   d9722:	69a2      	ldr	r2, [r4, #24]
   d9724:	3201      	adds	r2, #1
   d9726:	2a06      	cmp	r2, #6
   d9728:	bfc8      	it	gt
   d972a:	2200      	movgt	r2, #0
   d972c:	61a2      	str	r2, [r4, #24]
   d972e:	68e2      	ldr	r2, [r4, #12]
   d9730:	3b18      	subs	r3, #24
   d9732:	3201      	adds	r2, #1
   d9734:	60a3      	str	r3, [r4, #8]
   d9736:	6923      	ldr	r3, [r4, #16]
   d9738:	60e2      	str	r2, [r4, #12]
   d973a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d973e:	428a      	cmp	r2, r1
   d9740:	dd46      	ble.n	d97d0 <localtime_r+0x1b8>
   d9742:	3301      	adds	r3, #1
   d9744:	2b0c      	cmp	r3, #12
   d9746:	bf0c      	ite	eq
   d9748:	6963      	ldreq	r3, [r4, #20]
   d974a:	6123      	strne	r3, [r4, #16]
   d974c:	eba2 0201 	sub.w	r2, r2, r1
   d9750:	60e2      	str	r2, [r4, #12]
   d9752:	bf01      	itttt	eq
   d9754:	3301      	addeq	r3, #1
   d9756:	2200      	moveq	r2, #0
   d9758:	6122      	streq	r2, [r4, #16]
   d975a:	6163      	streq	r3, [r4, #20]
   d975c:	bf08      	it	eq
   d975e:	61e2      	streq	r2, [r4, #28]
   d9760:	e036      	b.n	d97d0 <localtime_r+0x1b8>
   d9762:	2b00      	cmp	r3, #0
   d9764:	da34      	bge.n	d97d0 <localtime_r+0x1b8>
   d9766:	69e2      	ldr	r2, [r4, #28]
   d9768:	3a01      	subs	r2, #1
   d976a:	61e2      	str	r2, [r4, #28]
   d976c:	69a2      	ldr	r2, [r4, #24]
   d976e:	3a01      	subs	r2, #1
   d9770:	bf48      	it	mi
   d9772:	2206      	movmi	r2, #6
   d9774:	61a2      	str	r2, [r4, #24]
   d9776:	68e2      	ldr	r2, [r4, #12]
   d9778:	3318      	adds	r3, #24
   d977a:	3a01      	subs	r2, #1
   d977c:	60e2      	str	r2, [r4, #12]
   d977e:	60a3      	str	r3, [r4, #8]
   d9780:	bb32      	cbnz	r2, d97d0 <localtime_r+0x1b8>
   d9782:	6923      	ldr	r3, [r4, #16]
   d9784:	3b01      	subs	r3, #1
   d9786:	d401      	bmi.n	d978c <localtime_r+0x174>
   d9788:	6123      	str	r3, [r4, #16]
   d978a:	e01d      	b.n	d97c8 <localtime_r+0x1b0>
   d978c:	230b      	movs	r3, #11
   d978e:	6123      	str	r3, [r4, #16]
   d9790:	6963      	ldr	r3, [r4, #20]
   d9792:	1e5a      	subs	r2, r3, #1
   d9794:	f012 0f03 	tst.w	r2, #3
   d9798:	6162      	str	r2, [r4, #20]
   d979a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d979e:	d105      	bne.n	d97ac <localtime_r+0x194>
   d97a0:	2164      	movs	r1, #100	; 0x64
   d97a2:	fb93 f2f1 	sdiv	r2, r3, r1
   d97a6:	fb01 3212 	mls	r2, r1, r2, r3
   d97aa:	b94a      	cbnz	r2, d97c0 <localtime_r+0x1a8>
   d97ac:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d97b0:	fb93 f2f1 	sdiv	r2, r3, r1
   d97b4:	fb01 3312 	mls	r3, r1, r2, r3
   d97b8:	fab3 f383 	clz	r3, r3
   d97bc:	095b      	lsrs	r3, r3, #5
   d97be:	e000      	b.n	d97c2 <localtime_r+0x1aa>
   d97c0:	2301      	movs	r3, #1
   d97c2:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d97c6:	61e3      	str	r3, [r4, #28]
   d97c8:	6923      	ldr	r3, [r4, #16]
   d97ca:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d97ce:	60e3      	str	r3, [r4, #12]
   d97d0:	f000 fabb 	bl	d9d4a <__tz_unlock>
   d97d4:	4620      	mov	r0, r4
   d97d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d97da:	bf00      	nop
   d97dc:	000db030 	.word	0x000db030
   d97e0:	2003e7e8 	.word	0x2003e7e8

000d97e4 <memcmp>:
   d97e4:	b510      	push	{r4, lr}
   d97e6:	3901      	subs	r1, #1
   d97e8:	4402      	add	r2, r0
   d97ea:	4290      	cmp	r0, r2
   d97ec:	d007      	beq.n	d97fe <memcmp+0x1a>
   d97ee:	f810 3b01 	ldrb.w	r3, [r0], #1
   d97f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d97f6:	42a3      	cmp	r3, r4
   d97f8:	d0f7      	beq.n	d97ea <memcmp+0x6>
   d97fa:	1b18      	subs	r0, r3, r4
   d97fc:	bd10      	pop	{r4, pc}
   d97fe:	2000      	movs	r0, #0
   d9800:	bd10      	pop	{r4, pc}

000d9802 <memcpy>:
   d9802:	b510      	push	{r4, lr}
   d9804:	1e43      	subs	r3, r0, #1
   d9806:	440a      	add	r2, r1
   d9808:	4291      	cmp	r1, r2
   d980a:	d004      	beq.n	d9816 <memcpy+0x14>
   d980c:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9810:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9814:	e7f8      	b.n	d9808 <memcpy+0x6>
   d9816:	bd10      	pop	{r4, pc}

000d9818 <memmove>:
   d9818:	4288      	cmp	r0, r1
   d981a:	b510      	push	{r4, lr}
   d981c:	eb01 0302 	add.w	r3, r1, r2
   d9820:	d801      	bhi.n	d9826 <memmove+0xe>
   d9822:	1e42      	subs	r2, r0, #1
   d9824:	e00b      	b.n	d983e <memmove+0x26>
   d9826:	4298      	cmp	r0, r3
   d9828:	d2fb      	bcs.n	d9822 <memmove+0xa>
   d982a:	1881      	adds	r1, r0, r2
   d982c:	1ad2      	subs	r2, r2, r3
   d982e:	42d3      	cmn	r3, r2
   d9830:	d004      	beq.n	d983c <memmove+0x24>
   d9832:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9836:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d983a:	e7f8      	b.n	d982e <memmove+0x16>
   d983c:	bd10      	pop	{r4, pc}
   d983e:	4299      	cmp	r1, r3
   d9840:	d004      	beq.n	d984c <memmove+0x34>
   d9842:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9846:	f802 4f01 	strb.w	r4, [r2, #1]!
   d984a:	e7f8      	b.n	d983e <memmove+0x26>
   d984c:	bd10      	pop	{r4, pc}

000d984e <memset>:
   d984e:	4402      	add	r2, r0
   d9850:	4603      	mov	r3, r0
   d9852:	4293      	cmp	r3, r2
   d9854:	d002      	beq.n	d985c <memset+0xe>
   d9856:	f803 1b01 	strb.w	r1, [r3], #1
   d985a:	e7fa      	b.n	d9852 <memset+0x4>
   d985c:	4770      	bx	lr
	...

000d9860 <srand>:
   d9860:	b538      	push	{r3, r4, r5, lr}
   d9862:	4b12      	ldr	r3, [pc, #72]	; (d98ac <srand+0x4c>)
   d9864:	681c      	ldr	r4, [r3, #0]
   d9866:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9868:	4605      	mov	r5, r0
   d986a:	b9d3      	cbnz	r3, d98a2 <srand+0x42>
   d986c:	2018      	movs	r0, #24
   d986e:	f7fb ff99 	bl	d57a4 <malloc>
   d9872:	f243 330e 	movw	r3, #13070	; 0x330e
   d9876:	63a0      	str	r0, [r4, #56]	; 0x38
   d9878:	8003      	strh	r3, [r0, #0]
   d987a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d987e:	8043      	strh	r3, [r0, #2]
   d9880:	f241 2334 	movw	r3, #4660	; 0x1234
   d9884:	8083      	strh	r3, [r0, #4]
   d9886:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d988a:	80c3      	strh	r3, [r0, #6]
   d988c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9890:	8103      	strh	r3, [r0, #8]
   d9892:	2305      	movs	r3, #5
   d9894:	8143      	strh	r3, [r0, #10]
   d9896:	230b      	movs	r3, #11
   d9898:	8183      	strh	r3, [r0, #12]
   d989a:	2201      	movs	r2, #1
   d989c:	2300      	movs	r3, #0
   d989e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d98a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d98a4:	2200      	movs	r2, #0
   d98a6:	611d      	str	r5, [r3, #16]
   d98a8:	615a      	str	r2, [r3, #20]
   d98aa:	bd38      	pop	{r3, r4, r5, pc}
   d98ac:	2003d7f4 	.word	0x2003d7f4

000d98b0 <strchr>:
   d98b0:	b2c9      	uxtb	r1, r1
   d98b2:	4603      	mov	r3, r0
   d98b4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d98b8:	b11a      	cbz	r2, d98c2 <strchr+0x12>
   d98ba:	4291      	cmp	r1, r2
   d98bc:	d1f9      	bne.n	d98b2 <strchr+0x2>
   d98be:	4618      	mov	r0, r3
   d98c0:	4770      	bx	lr
   d98c2:	2900      	cmp	r1, #0
   d98c4:	bf0c      	ite	eq
   d98c6:	4618      	moveq	r0, r3
   d98c8:	2000      	movne	r0, #0
   d98ca:	4770      	bx	lr

000d98cc <strchrnul>:
   d98cc:	b510      	push	{r4, lr}
   d98ce:	4604      	mov	r4, r0
   d98d0:	f7ff ffee 	bl	d98b0 <strchr>
   d98d4:	b918      	cbnz	r0, d98de <strchrnul+0x12>
   d98d6:	4620      	mov	r0, r4
   d98d8:	f000 f814 	bl	d9904 <strlen>
   d98dc:	4420      	add	r0, r4
   d98de:	bd10      	pop	{r4, pc}

000d98e0 <strcmp>:
   d98e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d98e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d98e8:	2a01      	cmp	r2, #1
   d98ea:	bf28      	it	cs
   d98ec:	429a      	cmpcs	r2, r3
   d98ee:	d0f7      	beq.n	d98e0 <strcmp>
   d98f0:	1ad0      	subs	r0, r2, r3
   d98f2:	4770      	bx	lr

000d98f4 <strcpy>:
   d98f4:	4603      	mov	r3, r0
   d98f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d98fa:	f803 2b01 	strb.w	r2, [r3], #1
   d98fe:	2a00      	cmp	r2, #0
   d9900:	d1f9      	bne.n	d98f6 <strcpy+0x2>
   d9902:	4770      	bx	lr

000d9904 <strlen>:
   d9904:	4603      	mov	r3, r0
   d9906:	f813 2b01 	ldrb.w	r2, [r3], #1
   d990a:	2a00      	cmp	r2, #0
   d990c:	d1fb      	bne.n	d9906 <strlen+0x2>
   d990e:	1a18      	subs	r0, r3, r0
   d9910:	3801      	subs	r0, #1
   d9912:	4770      	bx	lr

000d9914 <strncmp>:
   d9914:	b530      	push	{r4, r5, lr}
   d9916:	b182      	cbz	r2, d993a <strncmp+0x26>
   d9918:	1e45      	subs	r5, r0, #1
   d991a:	3901      	subs	r1, #1
   d991c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9920:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9924:	42a3      	cmp	r3, r4
   d9926:	d106      	bne.n	d9936 <strncmp+0x22>
   d9928:	43ec      	mvns	r4, r5
   d992a:	4414      	add	r4, r2
   d992c:	42e0      	cmn	r0, r4
   d992e:	d001      	beq.n	d9934 <strncmp+0x20>
   d9930:	2b00      	cmp	r3, #0
   d9932:	d1f3      	bne.n	d991c <strncmp+0x8>
   d9934:	461c      	mov	r4, r3
   d9936:	1b18      	subs	r0, r3, r4
   d9938:	bd30      	pop	{r4, r5, pc}
   d993a:	4610      	mov	r0, r2
   d993c:	bd30      	pop	{r4, r5, pc}

000d993e <strnlen>:
   d993e:	b510      	push	{r4, lr}
   d9940:	4603      	mov	r3, r0
   d9942:	4401      	add	r1, r0
   d9944:	428b      	cmp	r3, r1
   d9946:	d004      	beq.n	d9952 <strnlen+0x14>
   d9948:	781a      	ldrb	r2, [r3, #0]
   d994a:	1c5c      	adds	r4, r3, #1
   d994c:	b10a      	cbz	r2, d9952 <strnlen+0x14>
   d994e:	4623      	mov	r3, r4
   d9950:	e7f8      	b.n	d9944 <strnlen+0x6>
   d9952:	1a18      	subs	r0, r3, r0
   d9954:	bd10      	pop	{r4, pc}

000d9956 <strrchr>:
   d9956:	b538      	push	{r3, r4, r5, lr}
   d9958:	4603      	mov	r3, r0
   d995a:	460d      	mov	r5, r1
   d995c:	b141      	cbz	r1, d9970 <strrchr+0x1a>
   d995e:	2400      	movs	r4, #0
   d9960:	4629      	mov	r1, r5
   d9962:	4618      	mov	r0, r3
   d9964:	f7ff ffa4 	bl	d98b0 <strchr>
   d9968:	b130      	cbz	r0, d9978 <strrchr+0x22>
   d996a:	1c43      	adds	r3, r0, #1
   d996c:	4604      	mov	r4, r0
   d996e:	e7f7      	b.n	d9960 <strrchr+0xa>
   d9970:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9974:	f7ff bf9c 	b.w	d98b0 <strchr>
   d9978:	4620      	mov	r0, r4
   d997a:	bd38      	pop	{r3, r4, r5, pc}

000d997c <strstr>:
   d997c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d997e:	7803      	ldrb	r3, [r0, #0]
   d9980:	b963      	cbnz	r3, d999c <strstr+0x20>
   d9982:	780b      	ldrb	r3, [r1, #0]
   d9984:	2b00      	cmp	r3, #0
   d9986:	bf18      	it	ne
   d9988:	2000      	movne	r0, #0
   d998a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d998c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9990:	b162      	cbz	r2, d99ac <strstr+0x30>
   d9992:	f814 7f01 	ldrb.w	r7, [r4, #1]!
   d9996:	4297      	cmp	r7, r2
   d9998:	4630      	mov	r0, r6
   d999a:	d0f7      	beq.n	d998c <strstr+0x10>
   d999c:	4603      	mov	r3, r0
   d999e:	1c46      	adds	r6, r0, #1
   d99a0:	7800      	ldrb	r0, [r0, #0]
   d99a2:	b110      	cbz	r0, d99aa <strstr+0x2e>
   d99a4:	1e4d      	subs	r5, r1, #1
   d99a6:	1e5c      	subs	r4, r3, #1
   d99a8:	e7f0      	b.n	d998c <strstr+0x10>
   d99aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d99ac:	4618      	mov	r0, r3
   d99ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d99b0 <_strtol_r>:
   d99b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d99b4:	4680      	mov	r8, r0
   d99b6:	4840      	ldr	r0, [pc, #256]	; (d9ab8 <_strtol_r+0x108>)
   d99b8:	f8d0 9000 	ldr.w	r9, [r0]
   d99bc:	460f      	mov	r7, r1
   d99be:	463d      	mov	r5, r7
   d99c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d99c4:	eb09 0004 	add.w	r0, r9, r4
   d99c8:	7840      	ldrb	r0, [r0, #1]
   d99ca:	f000 0008 	and.w	r0, r0, #8
   d99ce:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d99d2:	b108      	cbz	r0, d99d8 <_strtol_r+0x28>
   d99d4:	462f      	mov	r7, r5
   d99d6:	e7f2      	b.n	d99be <_strtol_r+0xe>
   d99d8:	2c2d      	cmp	r4, #45	; 0x2d
   d99da:	d103      	bne.n	d99e4 <_strtol_r+0x34>
   d99dc:	1cbd      	adds	r5, r7, #2
   d99de:	787c      	ldrb	r4, [r7, #1]
   d99e0:	2601      	movs	r6, #1
   d99e2:	e003      	b.n	d99ec <_strtol_r+0x3c>
   d99e4:	2c2b      	cmp	r4, #43	; 0x2b
   d99e6:	bf04      	itt	eq
   d99e8:	787c      	ldrbeq	r4, [r7, #1]
   d99ea:	1cbd      	addeq	r5, r7, #2
   d99ec:	b113      	cbz	r3, d99f4 <_strtol_r+0x44>
   d99ee:	2b10      	cmp	r3, #16
   d99f0:	d10a      	bne.n	d9a08 <_strtol_r+0x58>
   d99f2:	e05b      	b.n	d9aac <_strtol_r+0xfc>
   d99f4:	2c30      	cmp	r4, #48	; 0x30
   d99f6:	d157      	bne.n	d9aa8 <_strtol_r+0xf8>
   d99f8:	7828      	ldrb	r0, [r5, #0]
   d99fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d99fe:	2858      	cmp	r0, #88	; 0x58
   d9a00:	d14d      	bne.n	d9a9e <_strtol_r+0xee>
   d9a02:	786c      	ldrb	r4, [r5, #1]
   d9a04:	2310      	movs	r3, #16
   d9a06:	3502      	adds	r5, #2
   d9a08:	2e00      	cmp	r6, #0
   d9a0a:	bf14      	ite	ne
   d9a0c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9a10:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9a14:	2700      	movs	r7, #0
   d9a16:	fbbc faf3 	udiv	sl, ip, r3
   d9a1a:	4638      	mov	r0, r7
   d9a1c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9a20:	eb09 0e04 	add.w	lr, r9, r4
   d9a24:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9a28:	f01e 0f04 	tst.w	lr, #4
   d9a2c:	d001      	beq.n	d9a32 <_strtol_r+0x82>
   d9a2e:	3c30      	subs	r4, #48	; 0x30
   d9a30:	e00b      	b.n	d9a4a <_strtol_r+0x9a>
   d9a32:	f01e 0e03 	ands.w	lr, lr, #3
   d9a36:	d01b      	beq.n	d9a70 <_strtol_r+0xc0>
   d9a38:	f1be 0f01 	cmp.w	lr, #1
   d9a3c:	bf0c      	ite	eq
   d9a3e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9a42:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9a46:	ebce 0404 	rsb	r4, lr, r4
   d9a4a:	42a3      	cmp	r3, r4
   d9a4c:	dd10      	ble.n	d9a70 <_strtol_r+0xc0>
   d9a4e:	f1b7 3fff 	cmp.w	r7, #4294967295
   d9a52:	d00a      	beq.n	d9a6a <_strtol_r+0xba>
   d9a54:	4550      	cmp	r0, sl
   d9a56:	d806      	bhi.n	d9a66 <_strtol_r+0xb6>
   d9a58:	d101      	bne.n	d9a5e <_strtol_r+0xae>
   d9a5a:	4564      	cmp	r4, ip
   d9a5c:	dc03      	bgt.n	d9a66 <_strtol_r+0xb6>
   d9a5e:	fb03 4000 	mla	r0, r3, r0, r4
   d9a62:	2701      	movs	r7, #1
   d9a64:	e001      	b.n	d9a6a <_strtol_r+0xba>
   d9a66:	f04f 37ff 	mov.w	r7, #4294967295
   d9a6a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9a6e:	e7d7      	b.n	d9a20 <_strtol_r+0x70>
   d9a70:	1c7b      	adds	r3, r7, #1
   d9a72:	d10c      	bne.n	d9a8e <_strtol_r+0xde>
   d9a74:	2e00      	cmp	r6, #0
   d9a76:	f04f 0322 	mov.w	r3, #34	; 0x22
   d9a7a:	bf14      	ite	ne
   d9a7c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9a80:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9a84:	f8c8 3000 	str.w	r3, [r8]
   d9a88:	b92a      	cbnz	r2, d9a96 <_strtol_r+0xe6>
   d9a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9a8e:	b106      	cbz	r6, d9a92 <_strtol_r+0xe2>
   d9a90:	4240      	negs	r0, r0
   d9a92:	b172      	cbz	r2, d9ab2 <_strtol_r+0x102>
   d9a94:	b107      	cbz	r7, d9a98 <_strtol_r+0xe8>
   d9a96:	1e69      	subs	r1, r5, #1
   d9a98:	6011      	str	r1, [r2, #0]
   d9a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9a9e:	2430      	movs	r4, #48	; 0x30
   d9aa0:	2b00      	cmp	r3, #0
   d9aa2:	d1b1      	bne.n	d9a08 <_strtol_r+0x58>
   d9aa4:	2308      	movs	r3, #8
   d9aa6:	e7af      	b.n	d9a08 <_strtol_r+0x58>
   d9aa8:	230a      	movs	r3, #10
   d9aaa:	e7ad      	b.n	d9a08 <_strtol_r+0x58>
   d9aac:	2c30      	cmp	r4, #48	; 0x30
   d9aae:	d0a3      	beq.n	d99f8 <_strtol_r+0x48>
   d9ab0:	e7aa      	b.n	d9a08 <_strtol_r+0x58>
   d9ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9ab6:	bf00      	nop
   d9ab8:	2003d790 	.word	0x2003d790

000d9abc <strtol>:
   d9abc:	4613      	mov	r3, r2
   d9abe:	460a      	mov	r2, r1
   d9ac0:	4601      	mov	r1, r0
   d9ac2:	4802      	ldr	r0, [pc, #8]	; (d9acc <strtol+0x10>)
   d9ac4:	6800      	ldr	r0, [r0, #0]
   d9ac6:	f7ff bf73 	b.w	d99b0 <_strtol_r>
   d9aca:	bf00      	nop
   d9acc:	2003d7f4 	.word	0x2003d7f4

000d9ad0 <_strtoul_r>:
   d9ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9ad4:	4680      	mov	r8, r0
   d9ad6:	483c      	ldr	r0, [pc, #240]	; (d9bc8 <_strtoul_r+0xf8>)
   d9ad8:	f8d0 9000 	ldr.w	r9, [r0]
   d9adc:	460e      	mov	r6, r1
   d9ade:	4635      	mov	r5, r6
   d9ae0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9ae4:	eb09 0004 	add.w	r0, r9, r4
   d9ae8:	7840      	ldrb	r0, [r0, #1]
   d9aea:	f000 0008 	and.w	r0, r0, #8
   d9aee:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d9af2:	b108      	cbz	r0, d9af8 <_strtoul_r+0x28>
   d9af4:	462e      	mov	r6, r5
   d9af6:	e7f2      	b.n	d9ade <_strtoul_r+0xe>
   d9af8:	2c2d      	cmp	r4, #45	; 0x2d
   d9afa:	d103      	bne.n	d9b04 <_strtoul_r+0x34>
   d9afc:	1cb5      	adds	r5, r6, #2
   d9afe:	7874      	ldrb	r4, [r6, #1]
   d9b00:	2701      	movs	r7, #1
   d9b02:	e003      	b.n	d9b0c <_strtoul_r+0x3c>
   d9b04:	2c2b      	cmp	r4, #43	; 0x2b
   d9b06:	bf04      	itt	eq
   d9b08:	7874      	ldrbeq	r4, [r6, #1]
   d9b0a:	1cb5      	addeq	r5, r6, #2
   d9b0c:	b113      	cbz	r3, d9b14 <_strtoul_r+0x44>
   d9b0e:	2b10      	cmp	r3, #16
   d9b10:	d10a      	bne.n	d9b28 <_strtoul_r+0x58>
   d9b12:	e053      	b.n	d9bbc <_strtoul_r+0xec>
   d9b14:	2c30      	cmp	r4, #48	; 0x30
   d9b16:	d14f      	bne.n	d9bb8 <_strtoul_r+0xe8>
   d9b18:	7828      	ldrb	r0, [r5, #0]
   d9b1a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9b1e:	2858      	cmp	r0, #88	; 0x58
   d9b20:	d145      	bne.n	d9bae <_strtoul_r+0xde>
   d9b22:	786c      	ldrb	r4, [r5, #1]
   d9b24:	2310      	movs	r3, #16
   d9b26:	3502      	adds	r5, #2
   d9b28:	f04f 3cff 	mov.w	ip, #4294967295
   d9b2c:	2600      	movs	r6, #0
   d9b2e:	fbbc fcf3 	udiv	ip, ip, r3
   d9b32:	fb03 fa0c 	mul.w	sl, r3, ip
   d9b36:	ea6f 0a0a 	mvn.w	sl, sl
   d9b3a:	4630      	mov	r0, r6
   d9b3c:	eb09 0e04 	add.w	lr, r9, r4
   d9b40:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9b44:	f01e 0f04 	tst.w	lr, #4
   d9b48:	d001      	beq.n	d9b4e <_strtoul_r+0x7e>
   d9b4a:	3c30      	subs	r4, #48	; 0x30
   d9b4c:	e00b      	b.n	d9b66 <_strtoul_r+0x96>
   d9b4e:	f01e 0e03 	ands.w	lr, lr, #3
   d9b52:	d01a      	beq.n	d9b8a <_strtoul_r+0xba>
   d9b54:	f1be 0f01 	cmp.w	lr, #1
   d9b58:	bf0c      	ite	eq
   d9b5a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9b5e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9b62:	ebce 0404 	rsb	r4, lr, r4
   d9b66:	42a3      	cmp	r3, r4
   d9b68:	dd0f      	ble.n	d9b8a <_strtoul_r+0xba>
   d9b6a:	2e00      	cmp	r6, #0
   d9b6c:	db08      	blt.n	d9b80 <_strtoul_r+0xb0>
   d9b6e:	4560      	cmp	r0, ip
   d9b70:	d806      	bhi.n	d9b80 <_strtoul_r+0xb0>
   d9b72:	d101      	bne.n	d9b78 <_strtoul_r+0xa8>
   d9b74:	4554      	cmp	r4, sl
   d9b76:	dc03      	bgt.n	d9b80 <_strtoul_r+0xb0>
   d9b78:	fb03 4000 	mla	r0, r3, r0, r4
   d9b7c:	2601      	movs	r6, #1
   d9b7e:	e001      	b.n	d9b84 <_strtoul_r+0xb4>
   d9b80:	f04f 36ff 	mov.w	r6, #4294967295
   d9b84:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9b88:	e7d8      	b.n	d9b3c <_strtoul_r+0x6c>
   d9b8a:	2e00      	cmp	r6, #0
   d9b8c:	da07      	bge.n	d9b9e <_strtoul_r+0xce>
   d9b8e:	2322      	movs	r3, #34	; 0x22
   d9b90:	f8c8 3000 	str.w	r3, [r8]
   d9b94:	f04f 30ff 	mov.w	r0, #4294967295
   d9b98:	b92a      	cbnz	r2, d9ba6 <_strtoul_r+0xd6>
   d9b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9b9e:	b107      	cbz	r7, d9ba2 <_strtoul_r+0xd2>
   d9ba0:	4240      	negs	r0, r0
   d9ba2:	b172      	cbz	r2, d9bc2 <_strtoul_r+0xf2>
   d9ba4:	b106      	cbz	r6, d9ba8 <_strtoul_r+0xd8>
   d9ba6:	1e69      	subs	r1, r5, #1
   d9ba8:	6011      	str	r1, [r2, #0]
   d9baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9bae:	2430      	movs	r4, #48	; 0x30
   d9bb0:	2b00      	cmp	r3, #0
   d9bb2:	d1b9      	bne.n	d9b28 <_strtoul_r+0x58>
   d9bb4:	2308      	movs	r3, #8
   d9bb6:	e7b7      	b.n	d9b28 <_strtoul_r+0x58>
   d9bb8:	230a      	movs	r3, #10
   d9bba:	e7b5      	b.n	d9b28 <_strtoul_r+0x58>
   d9bbc:	2c30      	cmp	r4, #48	; 0x30
   d9bbe:	d0ab      	beq.n	d9b18 <_strtoul_r+0x48>
   d9bc0:	e7b2      	b.n	d9b28 <_strtoul_r+0x58>
   d9bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9bc6:	bf00      	nop
   d9bc8:	2003d790 	.word	0x2003d790

000d9bcc <strtoul>:
   d9bcc:	4613      	mov	r3, r2
   d9bce:	460a      	mov	r2, r1
   d9bd0:	4601      	mov	r1, r0
   d9bd2:	4802      	ldr	r0, [pc, #8]	; (d9bdc <strtoul+0x10>)
   d9bd4:	6800      	ldr	r0, [r0, #0]
   d9bd6:	f7ff bf7b 	b.w	d9ad0 <_strtoul_r>
   d9bda:	bf00      	nop
   d9bdc:	2003d7f4 	.word	0x2003d7f4

000d9be0 <tolower>:
   d9be0:	4b04      	ldr	r3, [pc, #16]	; (d9bf4 <tolower+0x14>)
   d9be2:	681b      	ldr	r3, [r3, #0]
   d9be4:	4403      	add	r3, r0
   d9be6:	785b      	ldrb	r3, [r3, #1]
   d9be8:	f003 0303 	and.w	r3, r3, #3
   d9bec:	2b01      	cmp	r3, #1
   d9bee:	bf08      	it	eq
   d9bf0:	3020      	addeq	r0, #32
   d9bf2:	4770      	bx	lr
   d9bf4:	2003d790 	.word	0x2003d790

000d9bf8 <__tzcalc_limits>:
   d9bf8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9bfc:	4604      	mov	r4, r0
   d9bfe:	f000 fa6f 	bl	da0e0 <__gettzinfo>
   d9c02:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d9c06:	429c      	cmp	r4, r3
   d9c08:	f340 8096 	ble.w	d9d38 <__tzcalc_limits+0x140>
   d9c0c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d9c10:	18e3      	adds	r3, r4, r3
   d9c12:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d9c16:	109b      	asrs	r3, r3, #2
   d9c18:	f240 156d 	movw	r5, #365	; 0x16d
   d9c1c:	fb05 3502 	mla	r5, r5, r2, r3
   d9c20:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d9c24:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d9c28:	fb92 f3f3 	sdiv	r3, r2, r3
   d9c2c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9c30:	442b      	add	r3, r5
   d9c32:	18a5      	adds	r5, r4, r2
   d9c34:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9c38:	fb95 f5f2 	sdiv	r5, r5, r2
   d9c3c:	441d      	add	r5, r3
   d9c3e:	2364      	movs	r3, #100	; 0x64
   d9c40:	fb94 f7f2 	sdiv	r7, r4, r2
   d9c44:	fb94 f6f3 	sdiv	r6, r4, r3
   d9c48:	fb02 4717 	mls	r7, r2, r7, r4
   d9c4c:	fb03 4616 	mls	r6, r3, r6, r4
   d9c50:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d9c54:	fab7 fe87 	clz	lr, r7
   d9c58:	9301      	str	r3, [sp, #4]
   d9c5a:	f004 0303 	and.w	r3, r4, #3
   d9c5e:	6044      	str	r4, [r0, #4]
   d9c60:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d9c64:	4601      	mov	r1, r0
   d9c66:	9300      	str	r3, [sp, #0]
   d9c68:	f04f 0c07 	mov.w	ip, #7
   d9c6c:	7a0b      	ldrb	r3, [r1, #8]
   d9c6e:	2b4a      	cmp	r3, #74	; 0x4a
   d9c70:	d10e      	bne.n	d9c90 <__tzcalc_limits+0x98>
   d9c72:	694b      	ldr	r3, [r1, #20]
   d9c74:	9a00      	ldr	r2, [sp, #0]
   d9c76:	18ec      	adds	r4, r5, r3
   d9c78:	b902      	cbnz	r2, d9c7c <__tzcalc_limits+0x84>
   d9c7a:	b906      	cbnz	r6, d9c7e <__tzcalc_limits+0x86>
   d9c7c:	b927      	cbnz	r7, d9c88 <__tzcalc_limits+0x90>
   d9c7e:	2b3b      	cmp	r3, #59	; 0x3b
   d9c80:	bfd4      	ite	le
   d9c82:	2300      	movle	r3, #0
   d9c84:	2301      	movgt	r3, #1
   d9c86:	e000      	b.n	d9c8a <__tzcalc_limits+0x92>
   d9c88:	2300      	movs	r3, #0
   d9c8a:	4423      	add	r3, r4
   d9c8c:	3b01      	subs	r3, #1
   d9c8e:	e03f      	b.n	d9d10 <__tzcalc_limits+0x118>
   d9c90:	2b44      	cmp	r3, #68	; 0x44
   d9c92:	d102      	bne.n	d9c9a <__tzcalc_limits+0xa2>
   d9c94:	694b      	ldr	r3, [r1, #20]
   d9c96:	442b      	add	r3, r5
   d9c98:	e03a      	b.n	d9d10 <__tzcalc_limits+0x118>
   d9c9a:	9b00      	ldr	r3, [sp, #0]
   d9c9c:	b92b      	cbnz	r3, d9caa <__tzcalc_limits+0xb2>
   d9c9e:	2e00      	cmp	r6, #0
   d9ca0:	bf0c      	ite	eq
   d9ca2:	46f0      	moveq	r8, lr
   d9ca4:	f04f 0801 	movne.w	r8, #1
   d9ca8:	e000      	b.n	d9cac <__tzcalc_limits+0xb4>
   d9caa:	46f0      	mov	r8, lr
   d9cac:	4b24      	ldr	r3, [pc, #144]	; (d9d40 <__tzcalc_limits+0x148>)
   d9cae:	68cc      	ldr	r4, [r1, #12]
   d9cb0:	2230      	movs	r2, #48	; 0x30
   d9cb2:	fb02 3808 	mla	r8, r2, r8, r3
   d9cb6:	f1a8 0a04 	sub.w	sl, r8, #4
   d9cba:	46a9      	mov	r9, r5
   d9cbc:	2301      	movs	r3, #1
   d9cbe:	42a3      	cmp	r3, r4
   d9cc0:	da04      	bge.n	d9ccc <__tzcalc_limits+0xd4>
   d9cc2:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d9cc6:	3301      	adds	r3, #1
   d9cc8:	44d9      	add	r9, fp
   d9cca:	e7f8      	b.n	d9cbe <__tzcalc_limits+0xc6>
   d9ccc:	f109 0304 	add.w	r3, r9, #4
   d9cd0:	fb93 fbfc 	sdiv	fp, r3, ip
   d9cd4:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d9cd8:	2c01      	cmp	r4, #1
   d9cda:	ebca 0a03 	rsb	sl, sl, r3
   d9cde:	694b      	ldr	r3, [r1, #20]
   d9ce0:	bfb8      	it	lt
   d9ce2:	2401      	movlt	r4, #1
   d9ce4:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d9ce8:	ebb3 0a0a 	subs.w	sl, r3, sl
   d9cec:	690b      	ldr	r3, [r1, #16]
   d9cee:	f104 34ff 	add.w	r4, r4, #4294967295
   d9cf2:	f103 33ff 	add.w	r3, r3, #4294967295
   d9cf6:	bf48      	it	mi
   d9cf8:	f10a 0a07 	addmi.w	sl, sl, #7
   d9cfc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d9d00:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d9d04:	4453      	add	r3, sl
   d9d06:	42a3      	cmp	r3, r4
   d9d08:	db01      	blt.n	d9d0e <__tzcalc_limits+0x116>
   d9d0a:	3b07      	subs	r3, #7
   d9d0c:	e7fb      	b.n	d9d06 <__tzcalc_limits+0x10e>
   d9d0e:	444b      	add	r3, r9
   d9d10:	698c      	ldr	r4, [r1, #24]
   d9d12:	4a0c      	ldr	r2, [pc, #48]	; (d9d44 <__tzcalc_limits+0x14c>)
   d9d14:	fb02 4303 	mla	r3, r2, r3, r4
   d9d18:	6a0c      	ldr	r4, [r1, #32]
   d9d1a:	4423      	add	r3, r4
   d9d1c:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9d20:	9b01      	ldr	r3, [sp, #4]
   d9d22:	4299      	cmp	r1, r3
   d9d24:	d1a2      	bne.n	d9c6c <__tzcalc_limits+0x74>
   d9d26:	69c3      	ldr	r3, [r0, #28]
   d9d28:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d9d2a:	4293      	cmp	r3, r2
   d9d2c:	bfac      	ite	ge
   d9d2e:	2300      	movge	r3, #0
   d9d30:	2301      	movlt	r3, #1
   d9d32:	6003      	str	r3, [r0, #0]
   d9d34:	2001      	movs	r0, #1
   d9d36:	e000      	b.n	d9d3a <__tzcalc_limits+0x142>
   d9d38:	2000      	movs	r0, #0
   d9d3a:	b003      	add	sp, #12
   d9d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9d40:	000db030 	.word	0x000db030
   d9d44:	00015180 	.word	0x00015180

000d9d48 <__tz_lock>:
   d9d48:	4770      	bx	lr

000d9d4a <__tz_unlock>:
   d9d4a:	4770      	bx	lr

000d9d4c <_tzset_unlocked>:
   d9d4c:	4b01      	ldr	r3, [pc, #4]	; (d9d54 <_tzset_unlocked+0x8>)
   d9d4e:	6818      	ldr	r0, [r3, #0]
   d9d50:	f000 b802 	b.w	d9d58 <_tzset_unlocked_r>
   d9d54:	2003d7f4 	.word	0x2003d7f4

000d9d58 <_tzset_unlocked_r>:
   d9d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9d5c:	b08d      	sub	sp, #52	; 0x34
   d9d5e:	4607      	mov	r7, r0
   d9d60:	f000 f9be 	bl	da0e0 <__gettzinfo>
   d9d64:	49b0      	ldr	r1, [pc, #704]	; (da028 <_tzset_unlocked_r+0x2d0>)
   d9d66:	4eb1      	ldr	r6, [pc, #708]	; (da02c <_tzset_unlocked_r+0x2d4>)
   d9d68:	4604      	mov	r4, r0
   d9d6a:	4638      	mov	r0, r7
   d9d6c:	f000 f9b0 	bl	da0d0 <_getenv_r>
   d9d70:	4605      	mov	r5, r0
   d9d72:	b960      	cbnz	r0, d9d8e <_tzset_unlocked_r+0x36>
   d9d74:	4bae      	ldr	r3, [pc, #696]	; (da030 <_tzset_unlocked_r+0x2d8>)
   d9d76:	4aaf      	ldr	r2, [pc, #700]	; (da034 <_tzset_unlocked_r+0x2dc>)
   d9d78:	6018      	str	r0, [r3, #0]
   d9d7a:	4baf      	ldr	r3, [pc, #700]	; (da038 <_tzset_unlocked_r+0x2e0>)
   d9d7c:	6018      	str	r0, [r3, #0]
   d9d7e:	4baf      	ldr	r3, [pc, #700]	; (da03c <_tzset_unlocked_r+0x2e4>)
   d9d80:	6830      	ldr	r0, [r6, #0]
   d9d82:	601a      	str	r2, [r3, #0]
   d9d84:	605a      	str	r2, [r3, #4]
   d9d86:	f7fb fd15 	bl	d57b4 <free>
   d9d8a:	6035      	str	r5, [r6, #0]
   d9d8c:	e148      	b.n	da020 <_tzset_unlocked_r+0x2c8>
   d9d8e:	6831      	ldr	r1, [r6, #0]
   d9d90:	b979      	cbnz	r1, d9db2 <_tzset_unlocked_r+0x5a>
   d9d92:	6830      	ldr	r0, [r6, #0]
   d9d94:	f7fb fd0e 	bl	d57b4 <free>
   d9d98:	4628      	mov	r0, r5
   d9d9a:	f7ff fdb3 	bl	d9904 <strlen>
   d9d9e:	1c41      	adds	r1, r0, #1
   d9da0:	4638      	mov	r0, r7
   d9da2:	f7fb fd2f 	bl	d5804 <_malloc_r>
   d9da6:	6030      	str	r0, [r6, #0]
   d9da8:	b148      	cbz	r0, d9dbe <_tzset_unlocked_r+0x66>
   d9daa:	4629      	mov	r1, r5
   d9dac:	f7ff fda2 	bl	d98f4 <strcpy>
   d9db0:	e005      	b.n	d9dbe <_tzset_unlocked_r+0x66>
   d9db2:	f7ff fd95 	bl	d98e0 <strcmp>
   d9db6:	2800      	cmp	r0, #0
   d9db8:	f000 8132 	beq.w	da020 <_tzset_unlocked_r+0x2c8>
   d9dbc:	e7e9      	b.n	d9d92 <_tzset_unlocked_r+0x3a>
   d9dbe:	782b      	ldrb	r3, [r5, #0]
   d9dc0:	4a9f      	ldr	r2, [pc, #636]	; (da040 <_tzset_unlocked_r+0x2e8>)
   d9dc2:	49a0      	ldr	r1, [pc, #640]	; (da044 <_tzset_unlocked_r+0x2ec>)
   d9dc4:	2b3a      	cmp	r3, #58	; 0x3a
   d9dc6:	bf08      	it	eq
   d9dc8:	3501      	addeq	r5, #1
   d9dca:	ae0a      	add	r6, sp, #40	; 0x28
   d9dcc:	4633      	mov	r3, r6
   d9dce:	4628      	mov	r0, r5
   d9dd0:	f7fb fd08 	bl	d57e4 <siscanf>
   d9dd4:	2800      	cmp	r0, #0
   d9dd6:	f340 8123 	ble.w	da020 <_tzset_unlocked_r+0x2c8>
   d9dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ddc:	18ef      	adds	r7, r5, r3
   d9dde:	5ceb      	ldrb	r3, [r5, r3]
   d9de0:	2b2d      	cmp	r3, #45	; 0x2d
   d9de2:	d103      	bne.n	d9dec <_tzset_unlocked_r+0x94>
   d9de4:	3701      	adds	r7, #1
   d9de6:	f04f 35ff 	mov.w	r5, #4294967295
   d9dea:	e003      	b.n	d9df4 <_tzset_unlocked_r+0x9c>
   d9dec:	2b2b      	cmp	r3, #43	; 0x2b
   d9dee:	bf08      	it	eq
   d9df0:	3701      	addeq	r7, #1
   d9df2:	2501      	movs	r5, #1
   d9df4:	f10d 0a20 	add.w	sl, sp, #32
   d9df8:	f10d 0b1e 	add.w	fp, sp, #30
   d9dfc:	f04f 0800 	mov.w	r8, #0
   d9e00:	9603      	str	r6, [sp, #12]
   d9e02:	f8cd a008 	str.w	sl, [sp, #8]
   d9e06:	9601      	str	r6, [sp, #4]
   d9e08:	f8cd b000 	str.w	fp, [sp]
   d9e0c:	4633      	mov	r3, r6
   d9e0e:	aa07      	add	r2, sp, #28
   d9e10:	498d      	ldr	r1, [pc, #564]	; (da048 <_tzset_unlocked_r+0x2f0>)
   d9e12:	f8ad 801e 	strh.w	r8, [sp, #30]
   d9e16:	4638      	mov	r0, r7
   d9e18:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9e1c:	f7fb fce2 	bl	d57e4 <siscanf>
   d9e20:	4540      	cmp	r0, r8
   d9e22:	f340 80fd 	ble.w	da020 <_tzset_unlocked_r+0x2c8>
   d9e26:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9e2a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9e2e:	f8df 9224 	ldr.w	r9, [pc, #548]	; da054 <_tzset_unlocked_r+0x2fc>
   d9e32:	213c      	movs	r1, #60	; 0x3c
   d9e34:	fb01 3302 	mla	r3, r1, r2, r3
   d9e38:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9e3c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9e40:	fb01 3302 	mla	r3, r1, r2, r3
   d9e44:	435d      	muls	r5, r3
   d9e46:	6225      	str	r5, [r4, #32]
   d9e48:	4d7c      	ldr	r5, [pc, #496]	; (da03c <_tzset_unlocked_r+0x2e4>)
   d9e4a:	4b7d      	ldr	r3, [pc, #500]	; (da040 <_tzset_unlocked_r+0x2e8>)
   d9e4c:	602b      	str	r3, [r5, #0]
   d9e4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9e50:	497c      	ldr	r1, [pc, #496]	; (da044 <_tzset_unlocked_r+0x2ec>)
   d9e52:	441f      	add	r7, r3
   d9e54:	464a      	mov	r2, r9
   d9e56:	4633      	mov	r3, r6
   d9e58:	4638      	mov	r0, r7
   d9e5a:	f7fb fcc3 	bl	d57e4 <siscanf>
   d9e5e:	4540      	cmp	r0, r8
   d9e60:	dc08      	bgt.n	d9e74 <_tzset_unlocked_r+0x11c>
   d9e62:	682b      	ldr	r3, [r5, #0]
   d9e64:	606b      	str	r3, [r5, #4]
   d9e66:	4b72      	ldr	r3, [pc, #456]	; (da030 <_tzset_unlocked_r+0x2d8>)
   d9e68:	6a22      	ldr	r2, [r4, #32]
   d9e6a:	601a      	str	r2, [r3, #0]
   d9e6c:	4b72      	ldr	r3, [pc, #456]	; (da038 <_tzset_unlocked_r+0x2e0>)
   d9e6e:	f8c3 8000 	str.w	r8, [r3]
   d9e72:	e0d5      	b.n	da020 <_tzset_unlocked_r+0x2c8>
   d9e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9e76:	f8c5 9004 	str.w	r9, [r5, #4]
   d9e7a:	18fd      	adds	r5, r7, r3
   d9e7c:	5cfb      	ldrb	r3, [r7, r3]
   d9e7e:	2b2d      	cmp	r3, #45	; 0x2d
   d9e80:	d103      	bne.n	d9e8a <_tzset_unlocked_r+0x132>
   d9e82:	3501      	adds	r5, #1
   d9e84:	f04f 37ff 	mov.w	r7, #4294967295
   d9e88:	e003      	b.n	d9e92 <_tzset_unlocked_r+0x13a>
   d9e8a:	2b2b      	cmp	r3, #43	; 0x2b
   d9e8c:	bf08      	it	eq
   d9e8e:	3501      	addeq	r5, #1
   d9e90:	2701      	movs	r7, #1
   d9e92:	2300      	movs	r3, #0
   d9e94:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9e98:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9e9c:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9ea0:	930a      	str	r3, [sp, #40]	; 0x28
   d9ea2:	9603      	str	r6, [sp, #12]
   d9ea4:	f8cd a008 	str.w	sl, [sp, #8]
   d9ea8:	9601      	str	r6, [sp, #4]
   d9eaa:	f8cd b000 	str.w	fp, [sp]
   d9eae:	4633      	mov	r3, r6
   d9eb0:	aa07      	add	r2, sp, #28
   d9eb2:	4965      	ldr	r1, [pc, #404]	; (da048 <_tzset_unlocked_r+0x2f0>)
   d9eb4:	4628      	mov	r0, r5
   d9eb6:	f7fb fc95 	bl	d57e4 <siscanf>
   d9eba:	2800      	cmp	r0, #0
   d9ebc:	dc04      	bgt.n	d9ec8 <_tzset_unlocked_r+0x170>
   d9ebe:	6a23      	ldr	r3, [r4, #32]
   d9ec0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d9ec4:	63e3      	str	r3, [r4, #60]	; 0x3c
   d9ec6:	e00e      	b.n	d9ee6 <_tzset_unlocked_r+0x18e>
   d9ec8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9ecc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9ed0:	213c      	movs	r1, #60	; 0x3c
   d9ed2:	fb01 3302 	mla	r3, r1, r2, r3
   d9ed6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9eda:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9ede:	fb01 3302 	mla	r3, r1, r2, r3
   d9ee2:	435f      	muls	r7, r3
   d9ee4:	63e7      	str	r7, [r4, #60]	; 0x3c
   d9ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9ee8:	4627      	mov	r7, r4
   d9eea:	441d      	add	r5, r3
   d9eec:	f04f 0900 	mov.w	r9, #0
   d9ef0:	782b      	ldrb	r3, [r5, #0]
   d9ef2:	2b2c      	cmp	r3, #44	; 0x2c
   d9ef4:	bf08      	it	eq
   d9ef6:	3501      	addeq	r5, #1
   d9ef8:	f895 8000 	ldrb.w	r8, [r5]
   d9efc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9f00:	d126      	bne.n	d9f50 <_tzset_unlocked_r+0x1f8>
   d9f02:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d9f06:	9302      	str	r3, [sp, #8]
   d9f08:	ab09      	add	r3, sp, #36	; 0x24
   d9f0a:	9300      	str	r3, [sp, #0]
   d9f0c:	9603      	str	r6, [sp, #12]
   d9f0e:	9601      	str	r6, [sp, #4]
   d9f10:	4633      	mov	r3, r6
   d9f12:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d9f16:	494d      	ldr	r1, [pc, #308]	; (da04c <_tzset_unlocked_r+0x2f4>)
   d9f18:	4628      	mov	r0, r5
   d9f1a:	f7fb fc63 	bl	d57e4 <siscanf>
   d9f1e:	2803      	cmp	r0, #3
   d9f20:	d17e      	bne.n	da020 <_tzset_unlocked_r+0x2c8>
   d9f22:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d9f26:	1e4b      	subs	r3, r1, #1
   d9f28:	2b0b      	cmp	r3, #11
   d9f2a:	d879      	bhi.n	da020 <_tzset_unlocked_r+0x2c8>
   d9f2c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9f30:	1e53      	subs	r3, r2, #1
   d9f32:	2b04      	cmp	r3, #4
   d9f34:	d874      	bhi.n	da020 <_tzset_unlocked_r+0x2c8>
   d9f36:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9f3a:	2b06      	cmp	r3, #6
   d9f3c:	d870      	bhi.n	da020 <_tzset_unlocked_r+0x2c8>
   d9f3e:	f887 8008 	strb.w	r8, [r7, #8]
   d9f42:	60f9      	str	r1, [r7, #12]
   d9f44:	613a      	str	r2, [r7, #16]
   d9f46:	617b      	str	r3, [r7, #20]
   d9f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9f4a:	eb05 0803 	add.w	r8, r5, r3
   d9f4e:	e02a      	b.n	d9fa6 <_tzset_unlocked_r+0x24e>
   d9f50:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9f54:	bf06      	itte	eq
   d9f56:	3501      	addeq	r5, #1
   d9f58:	4643      	moveq	r3, r8
   d9f5a:	2344      	movne	r3, #68	; 0x44
   d9f5c:	220a      	movs	r2, #10
   d9f5e:	a90b      	add	r1, sp, #44	; 0x2c
   d9f60:	4628      	mov	r0, r5
   d9f62:	9305      	str	r3, [sp, #20]
   d9f64:	f7ff fe32 	bl	d9bcc <strtoul>
   d9f68:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9f6c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9f70:	4545      	cmp	r5, r8
   d9f72:	9b05      	ldr	r3, [sp, #20]
   d9f74:	d114      	bne.n	d9fa0 <_tzset_unlocked_r+0x248>
   d9f76:	234d      	movs	r3, #77	; 0x4d
   d9f78:	f1b9 0f00 	cmp.w	r9, #0
   d9f7c:	d107      	bne.n	d9f8e <_tzset_unlocked_r+0x236>
   d9f7e:	7223      	strb	r3, [r4, #8]
   d9f80:	2303      	movs	r3, #3
   d9f82:	60e3      	str	r3, [r4, #12]
   d9f84:	2302      	movs	r3, #2
   d9f86:	6123      	str	r3, [r4, #16]
   d9f88:	f8c4 9014 	str.w	r9, [r4, #20]
   d9f8c:	e00b      	b.n	d9fa6 <_tzset_unlocked_r+0x24e>
   d9f8e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d9f92:	230b      	movs	r3, #11
   d9f94:	62a3      	str	r3, [r4, #40]	; 0x28
   d9f96:	2301      	movs	r3, #1
   d9f98:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9f9a:	2300      	movs	r3, #0
   d9f9c:	6323      	str	r3, [r4, #48]	; 0x30
   d9f9e:	e002      	b.n	d9fa6 <_tzset_unlocked_r+0x24e>
   d9fa0:	b280      	uxth	r0, r0
   d9fa2:	723b      	strb	r3, [r7, #8]
   d9fa4:	6178      	str	r0, [r7, #20]
   d9fa6:	2302      	movs	r3, #2
   d9fa8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9fac:	2300      	movs	r3, #0
   d9fae:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9fb2:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9fb6:	930a      	str	r3, [sp, #40]	; 0x28
   d9fb8:	f898 3000 	ldrb.w	r3, [r8]
   d9fbc:	2b2f      	cmp	r3, #47	; 0x2f
   d9fbe:	d10b      	bne.n	d9fd8 <_tzset_unlocked_r+0x280>
   d9fc0:	9603      	str	r6, [sp, #12]
   d9fc2:	f8cd a008 	str.w	sl, [sp, #8]
   d9fc6:	9601      	str	r6, [sp, #4]
   d9fc8:	f8cd b000 	str.w	fp, [sp]
   d9fcc:	4633      	mov	r3, r6
   d9fce:	aa07      	add	r2, sp, #28
   d9fd0:	491f      	ldr	r1, [pc, #124]	; (da050 <_tzset_unlocked_r+0x2f8>)
   d9fd2:	4640      	mov	r0, r8
   d9fd4:	f7fb fc06 	bl	d57e4 <siscanf>
   d9fd8:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9fdc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9fe0:	213c      	movs	r1, #60	; 0x3c
   d9fe2:	fb01 3302 	mla	r3, r1, r2, r3
   d9fe6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9fea:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9fee:	fb01 3302 	mla	r3, r1, r2, r3
   d9ff2:	61bb      	str	r3, [r7, #24]
   d9ff4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d9ff6:	f109 0901 	add.w	r9, r9, #1
   d9ffa:	f1b9 0f02 	cmp.w	r9, #2
   d9ffe:	4445      	add	r5, r8
   da000:	f107 071c 	add.w	r7, r7, #28
   da004:	f47f af74 	bne.w	d9ef0 <_tzset_unlocked_r+0x198>
   da008:	6860      	ldr	r0, [r4, #4]
   da00a:	f7ff fdf5 	bl	d9bf8 <__tzcalc_limits>
   da00e:	4b08      	ldr	r3, [pc, #32]	; (da030 <_tzset_unlocked_r+0x2d8>)
   da010:	6a22      	ldr	r2, [r4, #32]
   da012:	601a      	str	r2, [r3, #0]
   da014:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   da016:	1a9b      	subs	r3, r3, r2
   da018:	4a07      	ldr	r2, [pc, #28]	; (da038 <_tzset_unlocked_r+0x2e0>)
   da01a:	bf18      	it	ne
   da01c:	2301      	movne	r3, #1
   da01e:	6013      	str	r3, [r2, #0]
   da020:	b00d      	add	sp, #52	; 0x34
   da022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da026:	bf00      	nop
   da028:	000db090 	.word	0x000db090
   da02c:	2003e7e4 	.word	0x2003e7e4
   da030:	2003e7ec 	.word	0x2003e7ec
   da034:	000db093 	.word	0x000db093
   da038:	2003e7e8 	.word	0x2003e7e8
   da03c:	2003d7f8 	.word	0x2003d7f8
   da040:	2003e7d7 	.word	0x2003e7d7
   da044:	000db097 	.word	0x000db097
   da048:	000db0ba 	.word	0x000db0ba
   da04c:	000db0a6 	.word	0x000db0a6
   da050:	000db0b9 	.word	0x000db0b9
   da054:	2003e7cc 	.word	0x2003e7cc

000da058 <_findenv_r>:
   da058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da05c:	4607      	mov	r7, r0
   da05e:	468b      	mov	fp, r1
   da060:	4690      	mov	r8, r2
   da062:	f000 f8d9 	bl	da218 <__env_lock>
   da066:	4b19      	ldr	r3, [pc, #100]	; (da0cc <_findenv_r+0x74>)
   da068:	681d      	ldr	r5, [r3, #0]
   da06a:	469a      	mov	sl, r3
   da06c:	b13d      	cbz	r5, da07e <_findenv_r+0x26>
   da06e:	465c      	mov	r4, fp
   da070:	4623      	mov	r3, r4
   da072:	f813 2b01 	ldrb.w	r2, [r3], #1
   da076:	b142      	cbz	r2, da08a <_findenv_r+0x32>
   da078:	2a3d      	cmp	r2, #61	; 0x3d
   da07a:	461c      	mov	r4, r3
   da07c:	d1f8      	bne.n	da070 <_findenv_r+0x18>
   da07e:	4638      	mov	r0, r7
   da080:	f000 f8cb 	bl	da21a <__env_unlock>
   da084:	2000      	movs	r0, #0
   da086:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da08a:	ebcb 0404 	rsb	r4, fp, r4
   da08e:	46a9      	mov	r9, r5
   da090:	f859 0b04 	ldr.w	r0, [r9], #4
   da094:	2800      	cmp	r0, #0
   da096:	d0f2      	beq.n	da07e <_findenv_r+0x26>
   da098:	4622      	mov	r2, r4
   da09a:	4659      	mov	r1, fp
   da09c:	f7ff fc3a 	bl	d9914 <strncmp>
   da0a0:	b988      	cbnz	r0, da0c6 <_findenv_r+0x6e>
   da0a2:	f859 3c04 	ldr.w	r3, [r9, #-4]
   da0a6:	191e      	adds	r6, r3, r4
   da0a8:	5d1b      	ldrb	r3, [r3, r4]
   da0aa:	2b3d      	cmp	r3, #61	; 0x3d
   da0ac:	d10b      	bne.n	da0c6 <_findenv_r+0x6e>
   da0ae:	f8da 3000 	ldr.w	r3, [sl]
   da0b2:	1aed      	subs	r5, r5, r3
   da0b4:	10ad      	asrs	r5, r5, #2
   da0b6:	4638      	mov	r0, r7
   da0b8:	f8c8 5000 	str.w	r5, [r8]
   da0bc:	f000 f8ad 	bl	da21a <__env_unlock>
   da0c0:	1c70      	adds	r0, r6, #1
   da0c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da0c6:	464d      	mov	r5, r9
   da0c8:	e7e1      	b.n	da08e <_findenv_r+0x36>
   da0ca:	bf00      	nop
   da0cc:	2003d840 	.word	0x2003d840

000da0d0 <_getenv_r>:
   da0d0:	b507      	push	{r0, r1, r2, lr}
   da0d2:	aa01      	add	r2, sp, #4
   da0d4:	f7ff ffc0 	bl	da058 <_findenv_r>
   da0d8:	b003      	add	sp, #12
   da0da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000da0e0 <__gettzinfo>:
   da0e0:	4800      	ldr	r0, [pc, #0]	; (da0e4 <__gettzinfo+0x4>)
   da0e2:	4770      	bx	lr
   da0e4:	2003d800 	.word	0x2003d800

000da0e8 <gmtime_r>:
   da0e8:	6802      	ldr	r2, [r0, #0]
   da0ea:	4b47      	ldr	r3, [pc, #284]	; (da208 <gmtime_r+0x120>)
   da0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   da0ee:	fb92 f4f3 	sdiv	r4, r2, r3
   da0f2:	fb03 2214 	mls	r2, r3, r4, r2
   da0f6:	2a00      	cmp	r2, #0
   da0f8:	bfbc      	itt	lt
   da0fa:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   da0fe:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   da102:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   da106:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   da10a:	fb92 f3f0 	sdiv	r3, r2, r0
   da10e:	fb00 2213 	mls	r2, r0, r3, r2
   da112:	f04f 003c 	mov.w	r0, #60	; 0x3c
   da116:	bfac      	ite	ge
   da118:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   da11c:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   da120:	608b      	str	r3, [r1, #8]
   da122:	fb92 f3f0 	sdiv	r3, r2, r0
   da126:	fb00 2213 	mls	r2, r0, r3, r2
   da12a:	604b      	str	r3, [r1, #4]
   da12c:	600a      	str	r2, [r1, #0]
   da12e:	2307      	movs	r3, #7
   da130:	1ce2      	adds	r2, r4, #3
   da132:	fb92 f3f3 	sdiv	r3, r2, r3
   da136:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   da13a:	1ad3      	subs	r3, r2, r3
   da13c:	618b      	str	r3, [r1, #24]
   da13e:	4b33      	ldr	r3, [pc, #204]	; (da20c <gmtime_r+0x124>)
   da140:	4d33      	ldr	r5, [pc, #204]	; (da210 <gmtime_r+0x128>)
   da142:	fb94 f5f5 	sdiv	r5, r4, r5
   da146:	fb03 4405 	mla	r4, r3, r5, r4
   da14a:	f648 62ac 	movw	r2, #36524	; 0x8eac
   da14e:	fbb4 f2f2 	udiv	r2, r4, r2
   da152:	4422      	add	r2, r4
   da154:	f240 57b4 	movw	r7, #1460	; 0x5b4
   da158:	fbb4 f3f7 	udiv	r3, r4, r7
   da15c:	1ad2      	subs	r2, r2, r3
   da15e:	482d      	ldr	r0, [pc, #180]	; (da214 <gmtime_r+0x12c>)
   da160:	fbb4 f0f0 	udiv	r0, r4, r0
   da164:	f648 6694 	movw	r6, #36500	; 0x8e94
   da168:	1a13      	subs	r3, r2, r0
   da16a:	fbb3 f6f6 	udiv	r6, r3, r6
   da16e:	4434      	add	r4, r6
   da170:	f240 126d 	movw	r2, #365	; 0x16d
   da174:	fbb3 f0f2 	udiv	r0, r3, r2
   da178:	fbb3 f3f7 	udiv	r3, r3, r7
   da17c:	1ae3      	subs	r3, r4, r3
   da17e:	fb02 3310 	mls	r3, r2, r0, r3
   da182:	2499      	movs	r4, #153	; 0x99
   da184:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   da188:	3202      	adds	r2, #2
   da18a:	fbb2 f2f4 	udiv	r2, r2, r4
   da18e:	2a0a      	cmp	r2, #10
   da190:	fb04 f402 	mul.w	r4, r4, r2
   da194:	f104 0602 	add.w	r6, r4, #2
   da198:	f04f 0405 	mov.w	r4, #5
   da19c:	fbb6 f4f4 	udiv	r4, r6, r4
   da1a0:	bf34      	ite	cc
   da1a2:	2602      	movcc	r6, #2
   da1a4:	f06f 0609 	mvncs.w	r6, #9
   da1a8:	4416      	add	r6, r2
   da1aa:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da1ae:	fb02 0505 	mla	r5, r2, r5, r0
   da1b2:	1c5f      	adds	r7, r3, #1
   da1b4:	2e01      	cmp	r6, #1
   da1b6:	bf98      	it	ls
   da1b8:	3501      	addls	r5, #1
   da1ba:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   da1be:	eba7 0704 	sub.w	r7, r7, r4
   da1c2:	d302      	bcc.n	da1ca <gmtime_r+0xe2>
   da1c4:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   da1c8:	e014      	b.n	da1f4 <gmtime_r+0x10c>
   da1ca:	0782      	lsls	r2, r0, #30
   da1cc:	d105      	bne.n	da1da <gmtime_r+0xf2>
   da1ce:	2464      	movs	r4, #100	; 0x64
   da1d0:	fbb0 f2f4 	udiv	r2, r0, r4
   da1d4:	fb04 0212 	mls	r2, r4, r2, r0
   da1d8:	b94a      	cbnz	r2, da1ee <gmtime_r+0x106>
   da1da:	f44f 72c8 	mov.w	r2, #400	; 0x190
   da1de:	fbb0 f4f2 	udiv	r4, r0, r2
   da1e2:	fb02 0014 	mls	r0, r2, r4, r0
   da1e6:	fab0 f280 	clz	r2, r0
   da1ea:	0952      	lsrs	r2, r2, #5
   da1ec:	e000      	b.n	da1f0 <gmtime_r+0x108>
   da1ee:	2201      	movs	r2, #1
   da1f0:	333b      	adds	r3, #59	; 0x3b
   da1f2:	441a      	add	r2, r3
   da1f4:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   da1f8:	2300      	movs	r3, #0
   da1fa:	61ca      	str	r2, [r1, #28]
   da1fc:	614d      	str	r5, [r1, #20]
   da1fe:	610e      	str	r6, [r1, #16]
   da200:	60cf      	str	r7, [r1, #12]
   da202:	620b      	str	r3, [r1, #32]
   da204:	4608      	mov	r0, r1
   da206:	bdf0      	pop	{r4, r5, r6, r7, pc}
   da208:	00015180 	.word	0x00015180
   da20c:	fffdc54f 	.word	0xfffdc54f
   da210:	00023ab1 	.word	0x00023ab1
   da214:	00023ab0 	.word	0x00023ab0

000da218 <__env_lock>:
   da218:	4770      	bx	lr

000da21a <__env_unlock>:
   da21a:	4770      	bx	lr

000da21c <dynalib_user>:
   da21c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   da22c:	0000 0000                                   ....

000da230 <_ZTVN5spark10LogHandlerE>:
	...
   da240:	40a5 000d 40c9 000d                         .@...@..

000da248 <_ZTVN5spark16SerialLogHandlerE>:
	...
   da250:	41b9 000d 41ed 000d 8115 000d 40cb 000d     .A...A.......@..
   da260:	002c 6553 736e 726f 3120 2d20 5420 6d65     ,.Sensor 1 - Tem
   da270:	6570 6172 7574 6572 203a 7525 6420 6765     perature: %u deg
   da280:	6572 7365 4320 6c65 6973 7375 5300 6e65     rees Celsius.Sen
   da290:	6f73 2072 2031 202d 7548 696d 6964 7974     sor 1 - Humidity
   da2a0:	203a 7525 2525 5300 6e65 6f73 2072 2031     : %u%%.Sensor 1 
   da2b0:	202d 7543 7272 6e65 3a74 2520 2075 6d41     - Current: %u Am
   da2c0:	7370 5300 6e65 6f73 2072 2032 202d 7543     ps.Sensor 2 - Cu
   da2d0:	7272 6e65 3a74 2520 2075 6d41 7370 5300     rrent: %u Amps.S
   da2e0:	6e65 6f73 2072 2032 202d 6554 706d 7265     ensor 2 - Temper
   da2f0:	7461 7275 3a65 2520 2064 6564 7267 6565     ature: %d degree
   da300:	2073 6543 736c 7569 0073 6553 736e 726f     s Celsius.Sensor
   da310:	3220 2d20 4c20 6769 7468 203a 7525 4c20      2 - Light: %u L
   da320:	7875 5300 6e65 6f73 2072 2032 202d 7548     ux.Sensor 2 - Hu
   da330:	616d 206e 6564 6574 7463 726f 203a 7525     man detector: %u
   da340:	5300 6e65 6f73 2072 2032 202d 7548 616d     .Sensor 2 - Huma
   da350:	206e 6f6c 7473 2e2e 002e 6553 736e 726f     n lost....Sensor
   da360:	3220 2d20 4820 6d75 6e61 6420 7465 6365      2 - Human detec
   da370:	6574 2164 5300 6e65 6f73 2072 2032 202d     ted!.Sensor 2 - 
   da380:	6e49 6176 696c 2064 7568 616d 206e 6564     Invalid human de
   da390:	6574 7463 726f 6d20 7365 6173 6567 202e     tector message. 
   da3a0:	7845 6570 7463 6465 3020 6f20 2072 2c31     Expected 0 or 1,
   da3b0:	7220 6365 6965 6576 2064 7525 4000 4040      received %u.@@@
   da3c0:	4040 2040 5245 4f52 2052 202d 6e69 6176     @@@ ERROR - inva
   da3d0:	696c 2064 6c61 7261 206d 756e 626d 7265     lid alarm number
   da3e0:	7320 7075 6c70 6569 2064 6f74 2720 6c61      supplied to 'al
   da3f0:	7261 436d 6e6f 6964 6974 6e6f 4d73 7465     armConditionsMet
   da400:	2027 7566 636e 6974 6e6f 202e 7845 6570     ' function. Expe
   da410:	7463 6465 7620 6c61 6575 6620 6f72 206d     cted value from 
   da420:	2030 202d 2c33 6720 746f 2520 0064 6341     0 - 3, got %d.Ac
   da430:	6974 6176 6974 676e 6120 616c 6d72 2520     tivating alarm %
   da440:	2064 7266 6d6f 7320 6e65 6f73 2072 6f6e     d from sensor no
   da450:	6564 2520 0075 4040 4040 4040 4520 5252     de %u.@@@@@@ ERR
   da460:	524f 2d20 6920 766e 6c61 6469 6120 616c     OR - invalid ala
   da470:	6d72 6e20 6d75 6562 2072 7573 7070 696c     rm number suppli
   da480:	6465 7420 206f 7327 6174 7472 6c41 7261     ed to 'startAlar
   da490:	276d 6620 6e75 7463 6f69 2e6e 4520 7078     m' function. Exp
   da4a0:	6365 6574 2064 6176 756c 2065 7266 6d6f     ected value from
   da4b0:	3020 2d20 3320 202c 6f67 2074 6425 5300      0 - 3, got %d.S
   da4c0:	6e65 6f73 2072 2031 202d 6944 7473 6e61     ensor 1 - Distan
   da4d0:	6563 203a 7525 6320 006d 6553 736e 726f     ce: %u cm.Sensor
   da4e0:	3220 2d20 5320 756f 646e 203a 7525 6420      2 - Sound: %u d
   da4f0:	0042 6c41 7261 206d 6425 6520 6576 746e     B.Alarm %d event
   da500:	7420 6972 6767 7265 6465 6220 2079 6553      triggered by Se
   da510:	736e 726f 4e20 646f 2065 7525 6120 2074     nsor Node %u at 
   da520:	7325 202e 7544 6172 6974 6e6f 203a 6425     %s. Duration: %d
   da530:	7320 6365 6e6f 7364 4000 4040 4040 2040      seconds.@@@@@@ 
   da540:	5245 4f52 2052 202d 6e69 6176 696c 2064     ERROR - invalid 
   da550:	6c61 7261 206d 756e 626d 7265 7320 7075     alarm number sup
   da560:	6c70 6569 2064 6f74 2720 6572 6573 4174     plied to 'resetA
   da570:	616c 6d72 2027 7566 636e 6974 6e6f 202e     larm' function. 
   da580:	7845 6570 7463 6465 7620 6c61 6575 6620     Expected value f
   da590:	6f72 206d 2030 202d 2c33 6720 746f 2520     rom 0 - 3, got %
   da5a0:	0064 6c61 006c 6241 756f 2074 6f74 7320     d.all.About to s
   da5b0:	6163 2e6e 2e2e 4600 756f 646e 6120 6220     can....Found a b
   da5c0:	756c 7465 6f6f 6874 6420 7665 6369 2e65     luetooth device.
   da5d0:	4100 6464 6572 7373 203a 4600 756f 646e     .Address: .Found
   da5e0:	5520 4955 3a44 0020 6553 736e 726f 6f4e      UUID: .SensorNo
   da5f0:	6564 2031 5555 4449 203a 5300 6e65 6f73     de1 UUID: .Senso
   da600:	4e72 646f 3265 5520 4955 3a44 0020 7553     rNode2 UUID: .Su
   da610:	6363 7365 6673 6c75 796c 6320 6e6f 656e     ccessfully conne
   da620:	7463 6465 7420 206f 6573 736e 726f 6e20     cted to sensor n
   da630:	646f 2065 2131 6200 3763 3166 6438 2d39     ode 1!.bc7f18d9-
   da640:	6332 3334 342d 3830 2d65 6562 3532 362d     2c43-408e-be25-6
   da650:	6632 3034 3436 3935 3738 0063 3939 3061     2f40645987c.99a0
   da660:	3264 3966 312d 6663 2d61 3234 3362 622d     d2f9-1cfa-42b3-b
   da670:	6235 2d61 6231 6434 3334 3134 3933 6632     5ba-1b4d4341392f
   da680:	3400 6235 3465 3561 2d36 3834 3566 342d     .45be4a56-48f5-4
   da690:	3338 2d63 6238 3162 642d 6633 6565 3334     83c-8bb1-d3fee43
   da6a0:	6333 3332 0063 3832 3232 3661 3031 332d     3c23c.2822a610-3
   da6b0:	6432 2d36 3534 3165 622d 6639 2d62 3432     2d6-45e1-b9fb-24
   da6c0:	3137 3833 6366 6438 3766 3200 6639 6162     7138fc8df7.29fba
   da6d0:	6633 2d35 6334 3865 342d 6236 2d63 6438     3f5-4ce8-46bc-8d
   da6e0:	3537 372d 3837 3630 6264 3232 3363 0031     75-77806db22c31.
   da6f0:	6146 6c69 6465 7420 206f 6f63 6e6e 6365     Failed to connec
   da700:	2074 6f74 7320 6e65 6f73 2072 6f6e 6564     t to sensor node
   da710:	3120 002e 6553 736e 726f 6e20 646f 2065      1..Sensor node 
   da720:	2031 6c61 6572 6461 2079 6f63 6e6e 6365     1 already connec
   da730:	6574 2e64 5300 6375 6563 7373 7566 6c6c     ted..Successfull
   da740:	2079 6f63 6e6e 6365 6574 2064 6f74 7320     y connected to s
   da750:	6e65 6f73 2072 6f6e 6564 3220 0021 6165     ensor node 2!.ea
   da760:	3235 3834 3461 342d 6333 2d63 3134 3839     5248a4-43cc-4198
   da770:	612d 6134 2d61 3937 3032 6130 3537 3830     -a4aa-79200a7508
   da780:	3533 3800 6238 3261 3566 2d64 6531 3839     35.88ba2f5d-1e98
   da790:	342d 6139 2d66 3638 3739 642d 3530 3631     -49af-8697-d0516
   da7a0:	6664 3330 6562 0039 3462 3238 3564 3135     df03be9.b482d551
   da7b0:	632d 6133 2d65 6434 6564 622d 3231 2d35     -c3ae-4dde-b125-
   da7c0:	6563 3432 6434 3837 3639 3062 3900 3037     ce244d7896b0.970
   da7d0:	3731 3736 2d34 3639 3531 342d 6266 2d61     17674-9615-4fba-
   da7e0:	3739 3231 362d 3238 6639 3032 3534 3338     9712-6829f204583
   da7f0:	0036 6146 6c69 6465 7420 206f 6f63 6e6e     6.Failed to conn
   da800:	6365 2074 6f74 7320 6e65 6f73 2072 6f6e     ect to sensor no
   da810:	6564 3220 002e 6553 736e 726f 6e20 646f     de 2..Sensor nod
   da820:	2065 2032 6c61 6572 6461 2079 6f63 6e6e     e 2 already conn
   da830:	6365 6574 2e64 2500 2064 6564 6976 6563     ected..%d device
   da840:	2073 6f66 6e75 0064 6f46 6e75 2064 6573     s found.Found se
   da850:	736e 726f 6e20 646f 2065 2e31 4600 756f     nsor node 1..Fou
   da860:	646e 7320 6e65 6f73 2072 6f6e 6564 3220     nd sensor node 2
   da870:	002e 6572 6573 4174 616c 6d72 7300 7465     ..resetAlarm.set
   da880:	6c41 7261 436d 6f6f 6f6c 6666 6544 616c     AlarmCooloffDela
   da890:	0079 6573 4474 7369 6174 636e 5465 7268     y.setDistanceThr
   da8a0:	7365 6f68 646c 7300 7465 6c41 7261 4c6d     eshold.setAlarmL
   da8b0:	6769 7468 6854 6572 6873 6c6f 0064 6573     ightThreshold.se
   da8c0:	5674 6c6f 6d75 5465 7268 7365 6f68 646c     tVolumeThreshold
   da8d0:	0073 6573 5374 756f 646e 7544 6172 6974     s.setSoundDurati
   da8e0:	6e6f 6854 6572 6873 6c6f 7364 5400 7365     onThresholds.Tes
   da8f0:	0074 3537 6534 6662 6535 632d 3365 2d31     t.754ebf5e-ce31-
   da900:	3334 3030 392d 6466 2d35 3861 6266 6534     4300-9fd5-a8fb4e
   da910:	3465 3861 3131 3900 3737 3832 6461 2d39     e4a811.97728ad9-
   da920:	3961 3839 342d 3236 2d39 3862 3535 652d     a998-4629-b855-e
   da930:	3265 3536 6338 3061 6631 0037               e2658ca01f7.

000da93c <_ZTV13LiquidCrystal>:
	...
   da944:	40d3 000d 4cff 000d 5063 000d 73a5 000d     .@...L..cP...s..
   da954:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...

000da964 <_ZTVN5spark13EthernetClassE>:
	...
   da96c:	5873 000d 5869 000d 585f 000d 5855 000d     sX..iX.._X..UX..
   da97c:	5849 000d 583d 000d 5831 000d 5829 000d     IX..=X..1X..)X..
   da98c:	581f 000d 5815 000d 8cd9 000d               .X...X......

000da998 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da9a0:	5b37 000d 5b3d 000d 709d 000d 5b67 000d     7[..=[...p..g[..
   da9b0:	5b39 000d                                   9[..

000da9b4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da9bc:	5b31 000d 5b4b 000d 7259 000d 5b6b 000d     1[..K[..Yr..k[..
   da9cc:	5b33 000d                                   3[..

000da9d0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   da9d8:	5b2b 000d 5b59 000d 67af 000d 5b6f 000d     +[..Y[...g..o[..
   da9e8:	5b2d 000d 6977 6972 676e 622e 656c 5300     -[..wiring.ble.S
   da9f8:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   daa08:	7320 7265 6976 6563 2e73 5300 6174 7472      services..Start
   daa18:	6420 7369 6f63 6576 6972 676e 6320 6168      discovering cha
   daa28:	6172 7463 7265 7369 6974 7363 002e 6550     racteristics..Pe
   daa38:	7265 6420 7665 6369 2065 7369 6d20 7369     er device is mis
   daa48:	6973 676e 0021 6146 6c69 6465 7420 206f     sing!.Failed to 
   daa58:	7061 6570 646e 7020 6565 2072 6543 746e     append peer Cent
   daa68:	6172 206c 6564 6976 6563 002e 6f43 6e6e     ral device..Conn
   daa78:	6365 6574 2064 7962 4320 6e65 7274 6c61     ected by Central
   daa88:	6420 7665 6369 2e65 4400 7369 6f63 6e6e      device..Disconn
   daa98:	6365 6574 2064 7962 7220 6d65 746f 2065     ected by remote 
   daaa8:	6564 6976 6563 002e 6143 6e6e 746f 6120     device..Cannot a
   daab8:	6464 6e20 7765 7020 6565 2072 6564 6976     dd new peer devi
   daac8:	6563 002e 654e 2077 6570 6972 6870 7265     ce..New peripher
   daad8:	6c61 6920 2073 6f63 6e6e 6365 6574 2e64     al is connected.
   daae8:	4600 6961 656c 2064 6f74 6120 7070 6e65     .Failed to appen
   daaf8:	2064 6964 6373 766f 7265 6465 6320 6168     d discovered cha
   dab08:	6172 7463 7265 7369 6974 2e63 4600 6961     racteristic..Fai
   dab18:	656c 2064 6f74 6120 7070 6e65 2064 6964     led to append di
   dab28:	6373 766f 7265 6465 7320 7265 6976 6563     scovered service
   dab38:	002e 6146 6c69 6465 7420 206f 7061 6570     ..Failed to appe
   dab48:	646e 6c20 636f 6c61 6320 6168 6172 7463     nd local charact
   dab58:	7265 7369 6974 2e63 4400 7075 696c 6163     eristic..Duplica
   dab68:	6574 2064 6863 7261 6361 6574 6972 7473     ted characterist
   dab78:	6369 6320 6e61 6f6e 2074 6562 6120 6464     ic cannot be add
   dab88:	6465 002e                                   ed..

000dab8c <_ZN8particle7BleUuid9BASE_UUIDE>:
   dab8c:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............

000dab9c <_ZTVN5spark16JSONStreamWriterE>:
	...
   daba4:	74f1 000d 7517 000d 74cb 000d 8de7 000d     .t...u...t......

000dabb4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dabbc:	796d 000d 7981 000d 82c9 000d 74d3 000d     my...y.......t..
   dabcc:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   dabdc:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   dabec:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
   dabfc:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
   dac0c:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
   dac1c:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
   dac2c:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
   dac3c:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
   dac4c:	2c00 0020 2928 203a 2000 005b 6f63 6564     ., .(): . [.code
   dac5c:	3d20 0020 6925 6400 7465 6961 736c 3d20      = .%i.details =
   dac6c:	0020 0a0d 6c00 006e 6e66 6300 646f 0065      ....ln.fn.code.
   dac7c:	6564 6174 6c69 6e00 6e6f 0065 7274 6361     detail.none.trac
   dac8c:	0065 6e69 6f66 7700 7261 006e 7265 6f72     e.info.warn.erro
   dac9c:	0072 6170 696e 0063                         r.panic.

000daca4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   dacac:	7941 000d 7959 000d 8115 000d 40cb 000d     Ay..Yy.......@..

000dacbc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dacc4:	74ef 000d 7525 000d 803d 000d 74d5 000d     .t..%u..=....t..

000dacd4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dacdc:	74ed 000d 7533 000d 7885 000d 7541 000d     .t..3u...x..Au..
   dacec:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   dacfc:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   dad0c:	6373 6974 656d 0000                         sctime..

000dad14 <_ZTV9IPAddress>:
	...
   dad1c:	86ef 000d 86df 000d 86e1 000d               ............

000dad28 <_ZTV9USBSerial>:
	...
   dad30:	87c9 000d 8819 000d 8827 000d 73a5 000d     ........'....s..
   dad40:	8805 000d 87cb 000d 87e1 000d 8813 000d     ................
   dad50:	87f7 000d 87c5 000d                         ........

000dad58 <_ZTV11USARTSerial>:
	...
   dad60:	88dd 000d 892d 000d 893b 000d 73a5 000d     ....-...;....s..
   dad70:	88f1 000d 8913 000d 88ff 000d 8927 000d     ............'...
   dad80:	88df 000d 88e3 000d                         ........

000dad88 <_ZTV7TwoWire>:
	...
   dad90:	89f5 000d 8a3f 000d 8a17 000d 89f7 000d     ....?...........
   dada0:	8a1f 000d 8a27 000d 8a2f 000d 8a37 000d     ....'.../...7...

000dadb0 <_ZTVN5spark9MeshClassE>:
	...
   dadb8:	8ad7 000d 8acd 000d 8ac3 000d 8ab9 000d     ................
   dadc8:	8aad 000d 8aa1 000d 8a95 000d 8a8d 000d     ................
   dadd8:	8a83 000d 8a79 000d 8cd9 000d               ....y.......

000dade4 <_ZTVN5spark9WiFiClassE>:
	...
   dadec:	8c53 000d 8c49 000d 8c3f 000d 8bf5 000d     S...I...?.......
   dadfc:	8c33 000d 8c27 000d 8c1b 000d 8c13 000d     3...'...........
   dae0c:	8c09 000d 8bff 000d 8cd9 000d               ............

000dae18 <_ZTVN5spark12NetworkClassE>:
	...
   dae20:	8c71 000d 8c7b 000d 8c85 000d 8c8f 000d     q...{...........
   dae30:	8c99 000d 8ca5 000d 8cb1 000d 8cbd 000d     ................
   dae40:	8cc5 000d 8ccf 000d 8cd9 000d 2e30 0030     ............0.0.
   dae50:	6166 736c 0065 7274 6575 2500 2a2e 666c     false.true.%.*lf
   dae60:	2500 0067 756e 6c6c 7500 3025 7834 0000          .%g.null.u%04x.

000dae6f <_ZSt7nothrow>:
	...

000dae70 <day_name.4725>:
   dae70:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dae80:	6972 6153 4a74                                   riSat

000dae85 <mon_name.4726>:
   dae85:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dae95:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   daea5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   daeb5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   daec5:	6425 000a                                   %d..

000daec9 <_ctype_>:
   daec9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   daed9:	2020 2020 2020 2020 2020 2020 2020 2020                     
   daee9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   daef9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   daf09:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   daf19:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   daf29:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   daf39:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   daf49:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dafcc <__sf_fake_stdin>:
	...

000dafec <__sf_fake_stdout>:
	...

000db00c <__sf_fake_stderr>:
	...
   db02c:	0043 0000                                   C...

000db030 <__month_lengths>:
   db030:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   db040:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db050:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db060:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   db070:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   db080:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   db090:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
   db0a0:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
   db0b0:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
   db0c0:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

000db0cc <link_const_variable_data_end>:
   db0cc:	000d4d0d 	.word	0x000d4d0d
   db0d0:	000d51f5 	.word	0x000d51f5
   db0d4:	000d587d 	.word	0x000d587d
   db0d8:	000d58ad 	.word	0x000d58ad
   db0dc:	000d737d 	.word	0x000d737d
   db0e0:	000d8105 	.word	0x000d8105
   db0e4:	000d84d9 	.word	0x000d84d9
   db0e8:	000d8559 	.word	0x000d8559
   db0ec:	000d8ba5 	.word	0x000d8ba5
   db0f0:	000d8c5d 	.word	0x000d8c5d
   db0f4:	000d8da5 	.word	0x000d8da5
   db0f8:	000d92c9 	.word	0x000d92c9
   db0fc:	000d934d 	.word	0x000d934d
   db100:	000d9411 	.word	0x000d9411
   db104:	000d94d5 	.word	0x000d94d5

000db108 <link_constructors_end>:
	...
