
d:/UoN/ELEC4470/Repo/elec4740Group6/clusterhead/target/1.5.2/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008844  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000dc860  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000094  2003d830  000dc864  0001d830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000f2c  2003d8c4  2003d8c4  0002d8c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000dc8f8  000dc8f8  0002c8f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc920  000dc920  0002c920  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00106990  00000000  00000000  0002c924  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000129f5  00000000  00000000  001332b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00028068  00000000  00000000  00145ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e78  00000000  00000000  0016dd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005840  00000000  00000000  00170b89  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00035b0f  00000000  00000000  001763c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002c39d  00000000  00000000  001abed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00111bb8  00000000  00000000  001d8275  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ed28  00000000  00000000  002e9e30  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f006 ff9c 	bl	daf6a <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f006 ffbc 	bl	dafb6 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d830 	.word	0x2003d830
   d4048:	000dc864 	.word	0x000dc864
   d404c:	2003d8c4 	.word	0x2003d8c4
   d4050:	2003d8c4 	.word	0x2003d8c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f005 faf9 	bl	d9650 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000dc85c 	.word	0x000dc85c
   d4080:	000dc818 	.word	0x000dc818

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bbee 	b.w	d4864 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f9f9 	bl	d4480 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f005 ba9f 	b.w	d95d4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bc27 	b.w	d68e8 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 bc25 	b.w	d68e8 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 bc2b 	b.w	d68f8 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bc29 	b.w	d68f8 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f002 fb36 	bl	d6720 <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d639d 	.word	0x000d639d

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3
	...

000d40d8 <_Z27setLowSoilMoistureThreshold6String>:
    }
    return 0;
}

/* Threshold modification functions */
int setLowSoilMoistureThreshold(String threshold){
   d40d8:	b508      	push	{r3, lr}
    LOW_SOIL_MOISTURE_THRESHOLD = threshold.toInt();
   d40da:	f002 fd70 	bl	d6bbe <_ZNK6String5toIntEv>
   d40de:	4b02      	ldr	r3, [pc, #8]	; (d40e8 <_Z27setLowSoilMoistureThreshold6String+0x10>)
   d40e0:	6018      	str	r0, [r3, #0]
    return 1;
}
   d40e2:	2001      	movs	r0, #1
   d40e4:	bd08      	pop	{r3, pc}
   d40e6:	bf00      	nop
   d40e8:	2003d840 	.word	0x2003d840

000d40ec <_Z28setHighSoilMoistureThreshold6String>:
int setHighSoilMoistureThreshold(String threshold){
   d40ec:	b508      	push	{r3, lr}
    HIGH_SOIL_MOISTURE_THRESHOLD = threshold.toInt();
   d40ee:	f002 fd66 	bl	d6bbe <_ZNK6String5toIntEv>
   d40f2:	4b02      	ldr	r3, [pc, #8]	; (d40fc <_Z28setHighSoilMoistureThreshold6String+0x10>)
   d40f4:	6018      	str	r0, [r3, #0]
    return 1;
}
   d40f6:	2001      	movs	r0, #1
   d40f8:	bd08      	pop	{r3, pc}
   d40fa:	bf00      	nop
   d40fc:	2003d848 	.word	0x2003d848

000d4100 <_Z23setTemperatureThreshold6String>:
int setTemperatureThreshold(String threshold){
   d4100:	b508      	push	{r3, lr}
    TEMPERATURE_THRESHOLD = threshold.toInt();
   d4102:	f002 fd5c 	bl	d6bbe <_ZNK6String5toIntEv>
   d4106:	4b02      	ldr	r3, [pc, #8]	; (d4110 <_Z23setTemperatureThreshold6String+0x10>)
   d4108:	6018      	str	r0, [r3, #0]
    return 1;
}
   d410a:	2001      	movs	r0, #1
   d410c:	bd08      	pop	{r3, pc}
   d410e:	bf00      	nop
   d4110:	2003d834 	.word	0x2003d834

000d4114 <_Z23setAirHumidityThreshold6String>:
int setAirHumidityThreshold(String threshold){
   d4114:	b508      	push	{r3, lr}
    AIR_HUMIDITY_THRESHOLD = threshold.toInt();
   d4116:	f002 fd52 	bl	d6bbe <_ZNK6String5toIntEv>
   d411a:	4b02      	ldr	r3, [pc, #8]	; (d4124 <_Z23setAirHumidityThreshold6String+0x10>)
   d411c:	6018      	str	r0, [r3, #0]
    return 1;
}
   d411e:	2001      	movs	r0, #1
   d4120:	bd08      	pop	{r3, pc}
   d4122:	bf00      	nop
   d4124:	2003d838 	.word	0x2003d838

000d4128 <_Z22setSunnyLightThreshold6String>:
int setSunnyLightThreshold(String threshold){
   d4128:	b508      	push	{r3, lr}
    SUNNY_LIGHT_THRESHOLD = threshold.toInt();
   d412a:	f002 fd48 	bl	d6bbe <_ZNK6String5toIntEv>
   d412e:	4b02      	ldr	r3, [pc, #8]	; (d4138 <_Z22setSunnyLightThreshold6String+0x10>)
   d4130:	6018      	str	r0, [r3, #0]
    return 1;
}
   d4132:	2001      	movs	r0, #1
   d4134:	bd08      	pop	{r3, pc}
   d4136:	bf00      	nop
   d4138:	2003d83c 	.word	0x2003d83c

000d413c <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d413c:	b510      	push	{r4, lr}
   d413e:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4140:	6800      	ldr	r0, [r0, #0]
   d4142:	b108      	cbz	r0, d4148 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d4144:	f002 fbd8 	bl	d68f8 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4148:	4620      	mov	r0, r4
   d414a:	bd10      	pop	{r4, pc}

000d414c <_ZNSt6vectorIlSaIlEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
      }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start); }
   d4150:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4152:	b108      	cbz	r0, d4158 <_ZNSt6vectorIlSaIlEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4154:	f7ff ffa3 	bl	d409e <_ZdlPv>
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator()); }
   d4158:	4620      	mov	r0, r4
   d415a:	bd10      	pop	{r4, pc}

000d415c <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d415c:	4b0a      	ldr	r3, [pc, #40]	; (d4188 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d415e:	b510      	push	{r4, lr}
   d4160:	4604      	mov	r4, r0
   d4162:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4164:	f004 fb2a 	bl	d87bc <_ZN5spark10LogManager8instanceEv>
   d4168:	4621      	mov	r1, r4
   d416a:	f004 fd17 	bl	d8b9c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d416e:	f005 fe83 	bl	d9e78 <_Z16_fetch_usbserialv>
   d4172:	f005 fe75 	bl	d9e60 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4176:	4620      	mov	r0, r4
   d4178:	4b04      	ldr	r3, [pc, #16]	; (d418c <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d417a:	f840 3b04 	str.w	r3, [r0], #4
   d417e:	f004 fc13 	bl	d89a8 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4182:	4620      	mov	r0, r4
   d4184:	bd10      	pop	{r4, pc}
   d4186:	bf00      	nop
   d4188:	000db288 	.word	0x000db288
   d418c:	000db270 	.word	0x000db270

000d4190 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4190:	b510      	push	{r4, lr}
   d4192:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4194:	f7ff ffe2 	bl	d415c <_ZN5spark16SerialLogHandlerD1Ev>
   d4198:	4620      	mov	r0, r4
   d419a:	2124      	movs	r1, #36	; 0x24
   d419c:	f006 fd68 	bl	dac70 <_ZdlPvj>
   d41a0:	4620      	mov	r0, r4
   d41a2:	bd10      	pop	{r4, pc}

000d41a4 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41a4:	b40e      	push	{r1, r2, r3}
   d41a6:	b500      	push	{lr}
   d41a8:	b08c      	sub	sp, #48	; 0x30
   d41aa:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41ac:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d41ae:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d41b2:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41b4:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d41b8:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41ba:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41bc:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41be:	aa04      	add	r2, sp, #16
   d41c0:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d41c2:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d41c4:	f002 fabc 	bl	d6740 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d41c8:	b00c      	add	sp, #48	; 0x30
   d41ca:	f85d eb04 	ldr.w	lr, [sp], #4
   d41ce:	b003      	add	sp, #12
   d41d0:	4770      	bx	lr
	...

000d41d4 <_Z18mqttPacketReceivedPcPhtb9MQTT5_QOSb>:
    snprintf(buf, sz+1, "Failure due to reason %d", (int) reason);
    
   Particle.publish(buf, PRIVATE);
}

void mqttPacketReceived(char* topic, uint8_t* payload, uint16_t payloadLength, bool dup, MQTT5_QOS qos, bool retain) {
   d41d4:	b508      	push	{r3, lr}
    char content[payloadLength + 1];
    memcpy(content, payload, payloadLength);
    content[payloadLength] = 0;
    Log.info("Topic: %s. Message: %s", topic, payload);
   d41d6:	4602      	mov	r2, r0
   d41d8:	460b      	mov	r3, r1
   d41da:	4802      	ldr	r0, [pc, #8]	; (d41e4 <_Z18mqttPacketReceivedPcPhtb9MQTT5_QOSb+0x10>)
   d41dc:	4902      	ldr	r1, [pc, #8]	; (d41e8 <_Z18mqttPacketReceivedPcPhtb9MQTT5_QOSb+0x14>)
   d41de:	f7ff ffe1 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d41e2:	bd08      	pop	{r3, pc}
   d41e4:	2003e40c 	.word	0x2003e40c
   d41e8:	000db298 	.word	0x000db298

000d41ec <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
    return client.publish("elec4740g6/data", buf);;
}

/* These functions are where we do something with the data (in bytes) we've received via bluetooth */

void onTemperatureReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41ec:	b510      	push	{r4, lr}
    int8_t receivedTemp;
    
    //read the temp
    memcpy(&receivedTemp, &data[0], sizeof(receivedTemp));
   d41ee:	f990 4000 	ldrsb.w	r4, [r0]

    Log.info("Sensor 1 - Temperature: %u degrees Celsius", receivedTemp);
   d41f2:	4904      	ldr	r1, [pc, #16]	; (d4204 <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   d41f4:	4804      	ldr	r0, [pc, #16]	; (d4208 <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41f6:	4622      	mov	r2, r4
   d41f8:	f7ff ffd4 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentTemperature = receivedTemp;
   d41fc:	4b03      	ldr	r3, [pc, #12]	; (d420c <_Z21onTemperatureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41fe:	701c      	strb	r4, [r3, #0]
   d4200:	bd10      	pop	{r4, pc}
   d4202:	bf00      	nop
   d4204:	000db2af 	.word	0x000db2af
   d4208:	2003e40c 	.word	0x2003e40c
   d420c:	2003d844 	.word	0x2003d844

000d4210 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
}

void onHumidityReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4210:	b510      	push	{r4, lr}
    uint8_t receivedHumidity;
    memcpy(&receivedHumidity, &data[0], sizeof(receivedHumidity));
   d4212:	7804      	ldrb	r4, [r0, #0]
    Log.info("Sensor 1 - Humidity: %u%%", receivedHumidity);
   d4214:	4903      	ldr	r1, [pc, #12]	; (d4224 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d4216:	4804      	ldr	r0, [pc, #16]	; (d4228 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>)
   d4218:	4622      	mov	r2, r4
   d421a:	f7ff ffc3 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentHumidity = receivedHumidity;
   d421e:	4b03      	ldr	r3, [pc, #12]	; (d422c <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d4220:	701c      	strb	r4, [r3, #0]
   d4222:	bd10      	pop	{r4, pc}
   d4224:	000db2da 	.word	0x000db2da
   d4228:	2003e40c 	.word	0x2003e40c
   d422c:	2003d830 	.word	0x2003d830

000d4230 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
}

void onMoistureReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4230:	b513      	push	{r0, r1, r4, lr}
    //read the current sensor reading
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4232:	8803      	ldrh	r3, [r0, #0]
   d4234:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 1 - Soil moisture: %u%%", twoByteValue);
   d4238:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d423c:	4904      	ldr	r1, [pc, #16]	; (d4250 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d423e:	4805      	ldr	r0, [pc, #20]	; (d4254 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d4240:	4622      	mov	r2, r4
   d4242:	f7ff ffaf 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentMoisture = twoByteValue;
   d4246:	4b04      	ldr	r3, [pc, #16]	; (d4258 <_Z18onMoistureReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d4248:	701c      	strb	r4, [r3, #0]
}
   d424a:	b002      	add	sp, #8
   d424c:	bd10      	pop	{r4, pc}
   d424e:	bf00      	nop
   d4250:	000db2f4 	.word	0x000db2f4
   d4254:	2003e40c 	.word	0x2003e40c
   d4258:	2003d845 	.word	0x2003d845

000d425c <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onLightReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d425c:	b513      	push	{r0, r1, r4, lr}
    //read the current sensor reading
    int16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(twoByteValue));
   d425e:	8803      	ldrh	r3, [r0, #0]
   d4260:	f8ad 3006 	strh.w	r3, [sp, #6]
    
    Log.info("Sensor 1 - Light: %u Lux", twoByteValue);
   d4264:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
   d4268:	4904      	ldr	r1, [pc, #16]	; (d427c <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d426a:	4805      	ldr	r0, [pc, #20]	; (d4280 <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x24>)
   d426c:	4622      	mov	r2, r4
   d426e:	f7ff ff99 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    currentLight = twoByteValue;
   d4272:	4b04      	ldr	r3, [pc, #16]	; (d4284 <_Z15onLightReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x28>)
   d4274:	701c      	strb	r4, [r3, #0]
}
   d4276:	b002      	add	sp, #8
   d4278:	bd10      	pop	{r4, pc}
   d427a:	bf00      	nop
   d427c:	000db313 	.word	0x000db313
   d4280:	2003e40c 	.word	0x2003e40c
   d4284:	2003d84c 	.word	0x2003d84c

000d4288 <_Z19onRainsteamReceivedPKhjRKN8particle13BlePeerDeviceEPv>:

void onRainsteamReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4288:	b508      	push	{r3, lr}
    int8_t rainsteam;
    memcpy(&rainsteam, &data[0], sizeof(rainsteam));
    Log.info("Sensor 2 - Rainsteam: %d ", rainsteam);
   d428a:	4903      	ldr	r1, [pc, #12]	; (d4298 <_Z19onRainsteamReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>)
   d428c:	f990 2000 	ldrsb.w	r2, [r0]
   d4290:	4802      	ldr	r0, [pc, #8]	; (d429c <_Z19onRainsteamReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x14>)
   d4292:	f7ff ff87 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4296:	bd08      	pop	{r3, pc}
   d4298:	000db32c 	.word	0x000db32c
   d429c:	2003e40c 	.word	0x2003e40c

000d42a0 <_Z21onLiquidLevelReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
}

void onLiquidLevelReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42a0:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;

    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d42a2:	8803      	ldrh	r3, [r0, #0]
   d42a4:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Liquid level: %u ", twoByteValue);
   d42a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d42ac:	4903      	ldr	r1, [pc, #12]	; (d42bc <_Z21onLiquidLevelReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d42ae:	4804      	ldr	r0, [pc, #16]	; (d42c0 <_Z21onLiquidLevelReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d42b0:	f7ff ff78 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
}
   d42b4:	b003      	add	sp, #12
   d42b6:	f85d fb04 	ldr.w	pc, [sp], #4
   d42ba:	bf00      	nop
   d42bc:	000db346 	.word	0x000db346
   d42c0:	2003e40c 	.word	0x2003e40c

000d42c4 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv>:


void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d42c4:	b510      	push	{r4, lr}
    uint8_t humanSeen;

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
   d42c6:	7804      	ldrb	r4, [r0, #0]
    currentHumanDetect = humanSeen;
   d42c8:	4b0b      	ldr	r3, [pc, #44]	; (d42f8 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>)
    Log.info("Sensor 2 - Human detector: %u", humanSeen);
   d42ca:	490c      	ldr	r1, [pc, #48]	; (d42fc <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d42cc:	480c      	ldr	r0, [pc, #48]	; (d4300 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)

void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
    uint8_t humanSeen;

    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
    currentHumanDetect = humanSeen;
   d42ce:	701c      	strb	r4, [r3, #0]
    Log.info("Sensor 2 - Human detector: %u", humanSeen);
   d42d0:	4622      	mov	r2, r4
   d42d2:	f7ff ff67 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    if(humanSeen == 0x00){
   d42d6:	b90c      	cbnz	r4, d42dc <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x18>
        Log.info("Sensor 2 - Human lost...");
   d42d8:	490a      	ldr	r1, [pc, #40]	; (d4304 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d42da:	e002      	b.n	d42e2 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1e>
    }
    else if (humanSeen == 0x01){
   d42dc:	2c01      	cmp	r4, #1
   d42de:	d104      	bne.n	d42ea <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
        Log.info("Sensor 2 - Human detected!");
   d42e0:	4909      	ldr	r1, [pc, #36]	; (d4308 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d42e2:	4807      	ldr	r0, [pc, #28]	; (d4300 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d42e4:	f7ff ff5e 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d42e8:	bd10      	pop	{r4, pc}
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
   d42ea:	4622      	mov	r2, r4
   d42ec:	4907      	ldr	r1, [pc, #28]	; (d430c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d42ee:	4804      	ldr	r0, [pc, #16]	; (d4300 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d42f0:	f7ff ff58 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d42f4:	bd10      	pop	{r4, pc}
   d42f6:	bf00      	nop
   d42f8:	2003d979 	.word	0x2003d979
   d42fc:	000db363 	.word	0x000db363
   d4300:	2003e40c 	.word	0x2003e40c
   d4304:	000db381 	.word	0x000db381
   d4308:	000db39a 	.word	0x000db39a
   d430c:	000db3b5 	.word	0x000db3b5

000d4310 <_Z11publishMqttv>:
    wateringEventTimes.push_back((int32_t) Time.now());
    //flip the watering flag
    isWatering = !isWatering;
}

bool publishMqtt(){
   d4310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4314:	4d47      	ldr	r5, [pc, #284]	; (d4434 <_Z11publishMqttv+0x124>)
    //memcpy(buf+5, &currentLight, 1);
    //memcpy(buf+6, &currentTemperature, 1);
    //memcpy(buf+7, &currentHumidity, 1);
    
     buf[4] = currentMoisture;
     buf[5] = currentLight;
   d4316:	f8df a158 	ldr.w	sl, [pc, #344]	; d4470 <_Z11publishMqttv+0x160>
     buf[6] = currentTemperature;
   d431a:	f8df 9158 	ldr.w	r9, [pc, #344]	; d4474 <_Z11publishMqttv+0x164>
     buf[7] = currentHumidity;

    //add watering events' durations
    //memcpy(buf+8, &initWateringStatus, 1);
     buf[8] = initWateringStatus;
   d431e:	4e46      	ldr	r6, [pc, #280]	; (d4438 <_Z11publishMqttv+0x128>)
    wateringEventTimes.push_back((int32_t) Time.now());
    //flip the watering flag
    isWatering = !isWatering;
}

bool publishMqtt(){
   d4320:	b084      	sub	sp, #16
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];
   d4322:	e895 000c 	ldmia.w	r5, {r2, r3}
   d4326:	1a9b      	subs	r3, r3, r2
   d4328:	109b      	asrs	r3, r3, #2
   d432a:	005b      	lsls	r3, r3, #1
   d432c:	3310      	adds	r3, #16
   d432e:	f023 0307 	bic.w	r3, r3, #7
    wateringEventTimes.push_back((int32_t) Time.now());
    //flip the watering flag
    isWatering = !isWatering;
}

bool publishMqtt(){
   d4332:	af02      	add	r7, sp, #8
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];
   d4334:	ebad 0d03 	sub.w	sp, sp, r3

    //add timestamp
    int32_t epochSeconds = Time.now();
   d4338:	f005 f8ee 	bl	d9518 <_ZN9TimeClass3nowEv>
   d433c:	f107 0308 	add.w	r3, r7, #8
   d4340:	4686      	mov	lr, r0
   d4342:	f843 0d04 	str.w	r0, [r3, #-4]!
    memcpy(buf, &epochSeconds, 4);
   d4346:	6818      	ldr	r0, [r3, #0]
    //memcpy(buf+4, &currentMoisture, 1);
    //memcpy(buf+5, &currentLight, 1);
    //memcpy(buf+6, &currentTemperature, 1);
    //memcpy(buf+7, &currentHumidity, 1);
    
     buf[4] = currentMoisture;
   d4348:	4b3c      	ldr	r3, [pc, #240]	; (d443c <_Z11publishMqttv+0x12c>)
     buf[5] = currentLight;
     buf[6] = currentTemperature;
     buf[7] = currentHumidity;
   d434a:	493d      	ldr	r1, [pc, #244]	; (d4440 <_Z11publishMqttv+0x130>)
    //memcpy(buf+4, &currentMoisture, 1);
    //memcpy(buf+5, &currentLight, 1);
    //memcpy(buf+6, &currentTemperature, 1);
    //memcpy(buf+7, &currentHumidity, 1);
    
     buf[4] = currentMoisture;
   d434c:	781a      	ldrb	r2, [r3, #0]
     buf[5] = currentLight;
   d434e:	f89a 3000 	ldrb.w	r3, [sl]
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];

    //add timestamp
    int32_t epochSeconds = Time.now();
    memcpy(buf, &epochSeconds, 4);
   d4352:	9002      	str	r0, [sp, #8]
    isWatering = !isWatering;
}

bool publishMqtt(){
    //initialise transmission buffer
    char buf[9+wateringEventTimes.size()*2];
   d4354:	ac02      	add	r4, sp, #8
    //memcpy(buf+5, &currentLight, 1);
    //memcpy(buf+6, &currentTemperature, 1);
    //memcpy(buf+7, &currentHumidity, 1);
    
     buf[4] = currentMoisture;
     buf[5] = currentLight;
   d4356:	7163      	strb	r3, [r4, #5]
     buf[6] = currentTemperature;
   d4358:	f899 3000 	ldrb.w	r3, [r9]
   d435c:	71a3      	strb	r3, [r4, #6]
     buf[7] = currentHumidity;
   d435e:	780b      	ldrb	r3, [r1, #0]
   d4360:	71e3      	strb	r3, [r4, #7]

    //add watering events' durations
    //memcpy(buf+8, &initWateringStatus, 1);
     buf[8] = initWateringStatus;
   d4362:	7833      	ldrb	r3, [r6, #0]
   d4364:	7223      	strb	r3, [r4, #8]
    //memcpy(buf+4, &currentMoisture, 1);
    //memcpy(buf+5, &currentLight, 1);
    //memcpy(buf+6, &currentTemperature, 1);
    //memcpy(buf+7, &currentHumidity, 1);
    
     buf[4] = currentMoisture;
   d4366:	7122      	strb	r2, [r4, #4]
   d4368:	f10d 0011 	add.w	r0, sp, #17
    buf[7] = (char) currentHumidity;

    //add watering events' durations
    buf[8] = (char) initWateringStatus;
    */
    for(uint i = 0; i < wateringEventTimes.size(); i ++){
   d436c:	2300      	movs	r3, #0
   d436e:	4688      	mov	r8, r1
   d4370:	f8d5 c000 	ldr.w	ip, [r5]
   d4374:	6869      	ldr	r1, [r5, #4]
   d4376:	ebcc 0101 	rsb	r1, ip, r1
   d437a:	ebb3 0fa1 	cmp.w	r3, r1, asr #2
   d437e:	d20c      	bcs.n	d439a <_Z11publishMqttv+0x8a>
        uint16_t duration = (uint16_t) wateringEventTimes.at(i) - epochSeconds;
   d4380:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
   d4384:	ebce 0c01 	rsb	ip, lr, r1
   d4388:	f107 0108 	add.w	r1, r7, #8
    buf[7] = (char) currentHumidity;

    //add watering events' durations
    buf[8] = (char) initWateringStatus;
    */
    for(uint i = 0; i < wateringEventTimes.size(); i ++){
   d438c:	3301      	adds	r3, #1
        uint16_t duration = (uint16_t) wateringEventTimes.at(i) - epochSeconds;
   d438e:	f821 cd06 	strh.w	ip, [r1, #-6]!
        memcpy(buf+9+(2*i), &duration, sizeof(duration));
   d4392:	8809      	ldrh	r1, [r1, #0]
   d4394:	f820 1b02 	strh.w	r1, [r0], #2
    buf[7] = (char) currentHumidity;

    //add watering events' durations
    buf[8] = (char) initWateringStatus;
    */
    for(uint i = 0; i < wateringEventTimes.size(); i ++){
   d4398:	e7ea      	b.n	d4370 <_Z11publishMqttv+0x60>
        uint16_t duration = (uint16_t) wateringEventTimes.at(i) - epochSeconds;
        memcpy(buf+9+(2*i), &duration, sizeof(duration));
    }
    Log.info("currentMoisture: %d", currentMoisture);
   d439a:	492a      	ldr	r1, [pc, #168]	; (d4444 <_Z11publishMqttv+0x134>)
   d439c:	482a      	ldr	r0, [pc, #168]	; (d4448 <_Z11publishMqttv+0x138>)
   d439e:	f7ff ff01 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("currentLight: %d", currentLight);
   d43a2:	f89a 2000 	ldrb.w	r2, [sl]
   d43a6:	4929      	ldr	r1, [pc, #164]	; (d444c <_Z11publishMqttv+0x13c>)
   d43a8:	4827      	ldr	r0, [pc, #156]	; (d4448 <_Z11publishMqttv+0x138>)
   d43aa:	f7ff fefb 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("currentTemperature: %d", currentTemperature);
   d43ae:	f999 2000 	ldrsb.w	r2, [r9]
   d43b2:	4927      	ldr	r1, [pc, #156]	; (d4450 <_Z11publishMqttv+0x140>)
   d43b4:	4824      	ldr	r0, [pc, #144]	; (d4448 <_Z11publishMqttv+0x138>)
   d43b6:	f7ff fef5 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("currentHumidity: %d", currentHumidity);
   d43ba:	f998 2000 	ldrsb.w	r2, [r8]
   d43be:	4925      	ldr	r1, [pc, #148]	; (d4454 <_Z11publishMqttv+0x144>)
   d43c0:	4821      	ldr	r0, [pc, #132]	; (d4448 <_Z11publishMqttv+0x138>)
   d43c2:	f7ff feef 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("initWateringStatus: %d", initWateringStatus);
   d43c6:	7832      	ldrb	r2, [r6, #0]
   d43c8:	4923      	ldr	r1, [pc, #140]	; (d4458 <_Z11publishMqttv+0x148>)
   d43ca:	481f      	ldr	r0, [pc, #124]	; (d4448 <_Z11publishMqttv+0x138>)
   d43cc:	f7ff feea 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>

    for(int i = 0; i < 9+wateringEventTimes.size()*2; i++){
   d43d0:	f04f 0800 	mov.w	r8, #0
   d43d4:	e895 000c 	ldmia.w	r5, {r2, r3}
   d43d8:	1a9b      	subs	r3, r3, r2
   d43da:	109b      	asrs	r3, r3, #2
   d43dc:	005b      	lsls	r3, r3, #1
   d43de:	3309      	adds	r3, #9
   d43e0:	4543      	cmp	r3, r8
   d43e2:	f8df 9050 	ldr.w	r9, [pc, #80]	; d4434 <_Z11publishMqttv+0x124>
   d43e6:	d909      	bls.n	d43fc <_Z11publishMqttv+0xec>
        Log.info("Byte %d: %u", i, buf[i]);
   d43e8:	f814 3008 	ldrb.w	r3, [r4, r8]
   d43ec:	491b      	ldr	r1, [pc, #108]	; (d445c <_Z11publishMqttv+0x14c>)
   d43ee:	4816      	ldr	r0, [pc, #88]	; (d4448 <_Z11publishMqttv+0x138>)
   d43f0:	4642      	mov	r2, r8
   d43f2:	f7ff fed7 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("currentLight: %d", currentLight);
    Log.info("currentTemperature: %d", currentTemperature);
    Log.info("currentHumidity: %d", currentHumidity);
    Log.info("initWateringStatus: %d", initWateringStatus);

    for(int i = 0; i < 9+wateringEventTimes.size()*2; i++){
   d43f6:	f108 0801 	add.w	r8, r8, #1
   d43fa:	e7eb      	b.n	d43d4 <_Z11publishMqttv+0xc4>
        Log.info("Byte %d: %u", i, buf[i]);
    }
    Log.info("buffer size: %d", strlen(buf));
   d43fc:	4620      	mov	r0, r4
   d43fe:	f006 fe50 	bl	db0a2 <strlen>
   d4402:	4917      	ldr	r1, [pc, #92]	; (d4460 <_Z11publishMqttv+0x150>)
   d4404:	4602      	mov	r2, r0
   d4406:	4810      	ldr	r0, [pc, #64]	; (d4448 <_Z11publishMqttv+0x138>)
   d4408:	f7ff fecc 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(__pos, this->_M_impl._M_finish, _M_get_Tp_allocator());
	this->_M_impl._M_finish = __pos;
   d440c:	f8d9 3000 	ldr.w	r3, [r9]
   d4410:	f8c9 3004 	str.w	r3, [r9, #4]
    //reset watering event log for next time period
    wateringEventTimes.clear();
    //save init watering status for next transmission
    if(isWatering){
   d4414:	4b13      	ldr	r3, [pc, #76]	; (d4464 <_Z11publishMqttv+0x154>)
   d4416:	781b      	ldrb	r3, [r3, #0]
   d4418:	b103      	cbz	r3, d441c <_Z11publishMqttv+0x10c>
        initWateringStatus = 1;
   d441a:	2301      	movs	r3, #1
    }
    else{
        initWateringStatus = 0;
   d441c:	7033      	strb	r3, [r6, #0]
    }

    //publish buffer via MQTT
    return client.publish("elec4740g6/data", buf);;
   d441e:	2300      	movs	r3, #0
   d4420:	9300      	str	r3, [sp, #0]
   d4422:	4622      	mov	r2, r4
   d4424:	4910      	ldr	r1, [pc, #64]	; (d4468 <_Z11publishMqttv+0x158>)
   d4426:	4811      	ldr	r0, [pc, #68]	; (d446c <_Z11publishMqttv+0x15c>)
   d4428:	f001 fc04 	bl	d5c34 <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt>
}
   d442c:	3708      	adds	r7, #8
   d442e:	46bd      	mov	sp, r7
   d4430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4434:	2003e3ac 	.word	0x2003e3ac
   d4438:	2003d831 	.word	0x2003d831
   d443c:	2003d845 	.word	0x2003d845
   d4440:	2003d830 	.word	0x2003d830
   d4444:	000db3fd 	.word	0x000db3fd
   d4448:	2003e40c 	.word	0x2003e40c
   d444c:	000db411 	.word	0x000db411
   d4450:	000db422 	.word	0x000db422
   d4454:	000db439 	.word	0x000db439
   d4458:	000db44d 	.word	0x000db44d
   d445c:	000db464 	.word	0x000db464
   d4460:	000db470 	.word	0x000db470
   d4464:	2003e3a8 	.word	0x2003e3a8
   d4468:	000db480 	.word	0x000db480
   d446c:	2003d8f0 	.word	0x2003d8f0
   d4470:	2003d84c 	.word	0x2003d84c
   d4474:	2003d844 	.word	0x2003d844

000d4478 <_Z16forceMqttPublish6String>:
        return 0;
    }
    return 1;
}

int forceMqttPublish(String s){
   d4478:	b508      	push	{r3, lr}
    if(publishMqtt()){
   d447a:	f7ff ff49 	bl	d4310 <_Z11publishMqttv>
        return 1;
    }
    return 0;
}
   d447e:	bd08      	pop	{r3, pc}

000d4480 <loop>:
    Particle.function("setTemperatureThreshold",setTemperatureThreshold);
    Particle.function("setAirHumidityThreshold",setAirHumidityThreshold);
    Particle.function("setSunnyLightThreshold",setSunnyLightThreshold);
}

void loop() {
   d4480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //TEST
    // client.publish("elec4740g6/data","test"); 

    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
   d4484:	48a3      	ldr	r0, [pc, #652]	; (d4714 <loop+0x294>)
    Particle.function("setTemperatureThreshold",setTemperatureThreshold);
    Particle.function("setAirHumidityThreshold",setAirHumidityThreshold);
    Particle.function("setSunnyLightThreshold",setSunnyLightThreshold);
}

void loop() {
   d4486:	b08e      	sub	sp, #56	; 0x38
    //TEST
    // client.publish("elec4740g6/data","test"); 

    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
   d4488:	f003 f8a2 	bl	d75d0 <_ZNK8particle13BlePeerDevice9connectedEv>
   d448c:	2800      	cmp	r0, #0
   d448e:	f040 80dc 	bne.w	d464a <loop+0x1ca>
   d4492:	48a1      	ldr	r0, [pc, #644]	; (d4718 <loop+0x298>)
   d4494:	f003 f89c 	bl	d75d0 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4498:	4605      	mov	r5, r0
   d449a:	2800      	cmp	r0, #0
   d449c:	f040 80d5 	bne.w	d464a <loop+0x1ca>
        // }
    }

    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d44a0:	499e      	ldr	r1, [pc, #632]	; (d471c <loop+0x29c>)
   d44a2:	489f      	ldr	r0, [pc, #636]	; (d4720 <loop+0x2a0>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d44a4:	4f9f      	ldr	r7, [pc, #636]	; (d4724 <loop+0x2a4>)
        // }
    }

    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d44a6:	f7ff fe7d 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d44aa:	f003 f8f1 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44ae:	221e      	movs	r2, #30
   d44b0:	499c      	ldr	r1, [pc, #624]	; (d4724 <loop+0x2a4>)
   d44b2:	f003 f943 	bl	d773c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d44b6:	4606      	mov	r6, r0
        for (int i = 0; i < count; i++) {
   d44b8:	42b5      	cmp	r5, r6
   d44ba:	f280 80be 	bge.w	d463a <loop+0x1ba>
   d44be:	2454      	movs	r4, #84	; 0x54
   d44c0:	436c      	muls	r4, r5
            BleUuid foundService;
   d44c2:	a804      	add	r0, sp, #16
   d44c4:	f002 fcb4 	bl	d6e30 <_ZN8particle7BleUuidC1Ev>
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d44c8:	f104 0008 	add.w	r0, r4, #8
   d44cc:	2201      	movs	r2, #1
   d44ce:	a904      	add	r1, sp, #16
   d44d0:	4438      	add	r0, r7
   d44d2:	f002 ff13 	bl	d72fc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>

            Log.info("Found a bluetooth device.");
   d44d6:	4994      	ldr	r1, [pc, #592]	; (d4728 <loop+0x2a8>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d44d8:	4680      	mov	r8, r0

            Log.info("Found a bluetooth device.");
   d44da:	4891      	ldr	r0, [pc, #580]	; (d4720 <loop+0x2a0>)
   d44dc:	f7ff fe62 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d44e0:	443c      	add	r4, r7

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d44e2:	4992      	ldr	r1, [pc, #584]	; (d472c <loop+0x2ac>)
   d44e4:	a809      	add	r0, sp, #36	; 0x24
   d44e6:	f002 faee 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Address: " + scanResults[i].address.toString());
   d44ea:	2200      	movs	r2, #0
   d44ec:	4621      	mov	r1, r4
   d44ee:	4668      	mov	r0, sp
   d44f0:	f002 fc8d 	bl	d6e0e <_ZNK8particle10BleAddress8toStringEb>
   d44f4:	4669      	mov	r1, sp
   d44f6:	a809      	add	r0, sp, #36	; 0x24
   d44f8:	f002 fb3a 	bl	d6b70 <_ZplRK15StringSumHelperRK6String>
   d44fc:	6801      	ldr	r1, [r0, #0]
   d44fe:	4888      	ldr	r0, [pc, #544]	; (d4720 <loop+0x2a0>)
   d4500:	f7ff fe50 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4504:	4668      	mov	r0, sp
   d4506:	f002 fa97 	bl	d6a38 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d450a:	a809      	add	r0, sp, #36	; 0x24
   d450c:	f002 fa94 	bl	d6a38 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4510:	4987      	ldr	r1, [pc, #540]	; (d4730 <loop+0x2b0>)
   d4512:	a809      	add	r0, sp, #36	; 0x24
   d4514:	f002 fad7 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Found UUID: " + foundService.toString());
   d4518:	2200      	movs	r2, #0
   d451a:	a904      	add	r1, sp, #16
   d451c:	4668      	mov	r0, sp
   d451e:	f002 fe17 	bl	d7150 <_ZNK8particle7BleUuid8toStringEb>
   d4522:	4669      	mov	r1, sp
   d4524:	a809      	add	r0, sp, #36	; 0x24
   d4526:	f002 fb23 	bl	d6b70 <_ZplRK15StringSumHelperRK6String>
   d452a:	6801      	ldr	r1, [r0, #0]
   d452c:	487c      	ldr	r0, [pc, #496]	; (d4720 <loop+0x2a0>)
   d452e:	f7ff fe39 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4532:	4668      	mov	r0, sp
   d4534:	f002 fa80 	bl	d6a38 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4538:	a809      	add	r0, sp, #36	; 0x24
   d453a:	f002 fa7d 	bl	d6a38 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d453e:	497d      	ldr	r1, [pc, #500]	; (d4734 <loop+0x2b4>)
   d4540:	a809      	add	r0, sp, #36	; 0x24
   d4542:	f002 fac0 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode1 UUID: " + sensorNode1ServiceUuid.toString());
   d4546:	2200      	movs	r2, #0
   d4548:	497b      	ldr	r1, [pc, #492]	; (d4738 <loop+0x2b8>)
   d454a:	4668      	mov	r0, sp
   d454c:	f002 fe00 	bl	d7150 <_ZNK8particle7BleUuid8toStringEb>
   d4550:	4669      	mov	r1, sp
   d4552:	a809      	add	r0, sp, #36	; 0x24
   d4554:	f002 fb0c 	bl	d6b70 <_ZplRK15StringSumHelperRK6String>
   d4558:	6801      	ldr	r1, [r0, #0]
   d455a:	4871      	ldr	r0, [pc, #452]	; (d4720 <loop+0x2a0>)
   d455c:	f7ff fe22 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4560:	4668      	mov	r0, sp
   d4562:	f002 fa69 	bl	d6a38 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4566:	a809      	add	r0, sp, #36	; 0x24
   d4568:	f002 fa66 	bl	d6a38 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d456c:	4973      	ldr	r1, [pc, #460]	; (d473c <loop+0x2bc>)
   d456e:	a809      	add	r0, sp, #36	; 0x24
   d4570:	f002 faa9 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode2 UUID: " + sensorNode2ServiceUuid.toString());
   d4574:	2200      	movs	r2, #0
   d4576:	4972      	ldr	r1, [pc, #456]	; (d4740 <loop+0x2c0>)
   d4578:	4668      	mov	r0, sp
   d457a:	f002 fde9 	bl	d7150 <_ZNK8particle7BleUuid8toStringEb>
   d457e:	4669      	mov	r1, sp
   d4580:	a809      	add	r0, sp, #36	; 0x24
   d4582:	f002 faf5 	bl	d6b70 <_ZplRK15StringSumHelperRK6String>
   d4586:	6801      	ldr	r1, [r0, #0]
   d4588:	4865      	ldr	r0, [pc, #404]	; (d4720 <loop+0x2a0>)
   d458a:	f7ff fe0b 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d458e:	4668      	mov	r0, sp
   d4590:	f002 fa52 	bl	d6a38 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d4594:	a809      	add	r0, sp, #36	; 0x24
   d4596:	f002 fa4f 	bl	d6a38 <_ZN6StringD1Ev>

            //Check if it matches UUID for sensor node 1
            if (len > 0 && foundService == sensorNode1ServiceUuid){
   d459a:	f1b8 0f00 	cmp.w	r8, #0
   d459e:	d04a      	beq.n	d4636 <loop+0x1b6>
   d45a0:	4965      	ldr	r1, [pc, #404]	; (d4738 <loop+0x2b8>)
   d45a2:	a804      	add	r0, sp, #16
   d45a4:	f002 fce4 	bl	d6f70 <_ZNK8particle7BleUuideqERKS0_>
   d45a8:	2800      	cmp	r0, #0
   d45aa:	d064      	beq.n	d4676 <loop+0x1f6>
                Log.info("Found sensor node 1.");
   d45ac:	485c      	ldr	r0, [pc, #368]	; (d4720 <loop+0x2a0>)
   d45ae:	4965      	ldr	r1, [pc, #404]	; (d4744 <loop+0x2c4>)
   d45b0:	f7ff fdf8 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode1.connected() == false){
   d45b4:	4857      	ldr	r0, [pc, #348]	; (d4714 <loop+0x294>)
   d45b6:	f003 f80b 	bl	d75d0 <_ZNK8particle13BlePeerDevice9connectedEv>
   d45ba:	2800      	cmp	r0, #0
   d45bc:	d154      	bne.n	d4668 <loop+0x1e8>
                    sensorNode1 = BLE.connect(scanResults[i].address);
   d45be:	f003 f867 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45c2:	2301      	movs	r3, #1
   d45c4:	4622      	mov	r2, r4
   d45c6:	4601      	mov	r1, r0
   d45c8:	a809      	add	r0, sp, #36	; 0x24
   d45ca:	f003 fd69 	bl	d80a0 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d45ce:	a909      	add	r1, sp, #36	; 0x24
   d45d0:	4850      	ldr	r0, [pc, #320]	; (d4714 <loop+0x294>)
   d45d2:	f003 f9e0 	bl	d7996 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d45d6:	a809      	add	r0, sp, #36	; 0x24
   d45d8:	f003 f900 	bl	d77dc <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode1.connected()){
   d45dc:	484d      	ldr	r0, [pc, #308]	; (d4714 <loop+0x294>)
   d45de:	f002 fff7 	bl	d75d0 <_ZNK8particle13BlePeerDevice9connectedEv>
   d45e2:	2800      	cmp	r0, #0
   d45e4:	d03e      	beq.n	d4664 <loop+0x1e4>
                        Log.info("Successfully connected to sensor node 1!");
   d45e6:	4958      	ldr	r1, [pc, #352]	; (d4748 <loop+0x2c8>)
   d45e8:	484d      	ldr	r0, [pc, #308]	; (d4720 <loop+0x2a0>)
   d45ea:	f7ff fddb 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode1.getCharacteristicByUUID(temperatureSensorCharacteristic, "29fba3f5-4ce8-46bc-8d75-77806db22c31");
   d45ee:	4957      	ldr	r1, [pc, #348]	; (d474c <loop+0x2cc>)
   d45f0:	a809      	add	r0, sp, #36	; 0x24
   d45f2:	f002 fd33 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d45f6:	aa09      	add	r2, sp, #36	; 0x24
   d45f8:	4955      	ldr	r1, [pc, #340]	; (d4750 <loop+0x2d0>)
   d45fa:	4846      	ldr	r0, [pc, #280]	; (d4714 <loop+0x294>)
   d45fc:	f003 f9a7 	bl	d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
   d4600:	4954      	ldr	r1, [pc, #336]	; (d4754 <loop+0x2d4>)
   d4602:	a809      	add	r0, sp, #36	; 0x24
   d4604:	f002 fd2a 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d4608:	aa09      	add	r2, sp, #36	; 0x24
   d460a:	4953      	ldr	r1, [pc, #332]	; (d4758 <loop+0x2d8>)
   d460c:	4841      	ldr	r0, [pc, #260]	; (d4714 <loop+0x294>)
   d460e:	f003 f99e 	bl	d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
   d4612:	4952      	ldr	r1, [pc, #328]	; (d475c <loop+0x2dc>)
   d4614:	a809      	add	r0, sp, #36	; 0x24
   d4616:	f002 fd21 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d461a:	aa09      	add	r2, sp, #36	; 0x24
   d461c:	4950      	ldr	r1, [pc, #320]	; (d4760 <loop+0x2e0>)
   d461e:	483d      	ldr	r0, [pc, #244]	; (d4714 <loop+0x294>)
   d4620:	f003 f995 	bl	d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(moistureSensorCharacteristic, "ea5248a4-43cc-4198-a4aa-79200a750835");
   d4624:	494f      	ldr	r1, [pc, #316]	; (d4764 <loop+0x2e4>)
   d4626:	a809      	add	r0, sp, #36	; 0x24
   d4628:	f002 fd18 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d462c:	494e      	ldr	r1, [pc, #312]	; (d4768 <loop+0x2e8>)
   d462e:	4839      	ldr	r0, [pc, #228]	; (d4714 <loop+0x294>)
   d4630:	aa09      	add	r2, sp, #36	; 0x24
                        Log.info("Successfully connected to sensor node 2!");
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(rainsteamSensorCharacteristic, "bc7f18d9-2c43-408e-be25-62f40645987c");
                        sensorNode2.getCharacteristicByUUID(liquidSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d4632:	f003 f98c 	bl	d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>

    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
        for (int i = 0; i < count; i++) {
   d4636:	3501      	adds	r5, #1
   d4638:	e73e      	b.n	d44b8 <loop+0x38>
                    Log.info("Sensor node 2 already connected.");
                }
            }
        }

        if (count > 0) {
   d463a:	2e00      	cmp	r6, #0
   d463c:	dd67      	ble.n	d470e <loop+0x28e>
            Log.info("%d devices found", count);
   d463e:	4632      	mov	r2, r6
   d4640:	494a      	ldr	r1, [pc, #296]	; (d476c <loop+0x2ec>)
   d4642:	4837      	ldr	r0, [pc, #220]	; (d4720 <loop+0x2a0>)
   d4644:	f7ff fdae 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        }
    }
}
   d4648:	e061      	b.n	d470e <loop+0x28e>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d464a:	f001 feaf 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
    // client.publish("elec4740g6/data","test"); 

    //do stuff if both sensors have been connected
    if ((sensorNode1.connected()) || (sensorNode2.connected())) {   //Add this back in when required!
        //record start time of this loop
        loopStart = millis();
   d464e:	4b48      	ldr	r3, [pc, #288]	; (d4770 <loop+0x2f0>)
   d4650:	6018      	str	r0, [r3, #0]
                }
            }
        }
        */
        //check if it's time for an MQTT publish
        if(loopStart - lastPublishTime >= PUBLISH_DELAY){
   d4652:	4b48      	ldr	r3, [pc, #288]	; (d4774 <loop+0x2f4>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	1ac0      	subs	r0, r0, r3
   d4658:	4b47      	ldr	r3, [pc, #284]	; (d4778 <loop+0x2f8>)
   d465a:	4298      	cmp	r0, r3
   d465c:	d957      	bls.n	d470e <loop+0x28e>
            publishMqtt();
   d465e:	f7ff fe57 	bl	d4310 <_Z11publishMqttv>
   d4662:	e054      	b.n	d470e <loop+0x28e>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
                        sensorNode1.getCharacteristicByUUID(moistureSensorCharacteristic, "ea5248a4-43cc-4198-a4aa-79200a750835");
                    }
                    else{
                        Log.info("Failed to connect to sensor node 1.");
   d4664:	4945      	ldr	r1, [pc, #276]	; (d477c <loop+0x2fc>)
   d4666:	e002      	b.n	d466e <loop+0x1ee>
                    }
                }
                else{
                    Log.info("Sensor node 1 already connected.");
   d4668:	4945      	ldr	r1, [pc, #276]	; (d4780 <loop+0x300>)
   d466a:	e000      	b.n	d466e <loop+0x1ee>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");

                    }
                    else{
                        Log.info("Failed to connect to sensor node 2.");
   d466c:	4945      	ldr	r1, [pc, #276]	; (d4784 <loop+0x304>)
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d466e:	482c      	ldr	r0, [pc, #176]	; (d4720 <loop+0x2a0>)
   d4670:	f7ff fd98 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d4674:	e7df      	b.n	d4636 <loop+0x1b6>
                    Log.info("Sensor node 1 already connected.");
                }
            }

            //Check if it matches UUID for sensor node 2
            else if (len > 0 && foundService == sensorNode2ServiceUuid){
   d4676:	4932      	ldr	r1, [pc, #200]	; (d4740 <loop+0x2c0>)
   d4678:	a804      	add	r0, sp, #16
   d467a:	f002 fc79 	bl	d6f70 <_ZNK8particle7BleUuideqERKS0_>
   d467e:	2800      	cmp	r0, #0
   d4680:	d0d9      	beq.n	d4636 <loop+0x1b6>
                Log.info("Found sensor node 2.");
   d4682:	4827      	ldr	r0, [pc, #156]	; (d4720 <loop+0x2a0>)
   d4684:	4940      	ldr	r1, [pc, #256]	; (d4788 <loop+0x308>)
   d4686:	f7ff fd8d 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode2.connected() == false){
   d468a:	4823      	ldr	r0, [pc, #140]	; (d4718 <loop+0x298>)
   d468c:	f002 ffa0 	bl	d75d0 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4690:	2800      	cmp	r0, #0
   d4692:	d13a      	bne.n	d470a <loop+0x28a>
                    sensorNode2 = BLE.connect(scanResults[i].address);
   d4694:	f002 fffc 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4698:	2301      	movs	r3, #1
   d469a:	4622      	mov	r2, r4
   d469c:	4601      	mov	r1, r0
   d469e:	a809      	add	r0, sp, #36	; 0x24
   d46a0:	f003 fcfe 	bl	d80a0 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d46a4:	a909      	add	r1, sp, #36	; 0x24
   d46a6:	481c      	ldr	r0, [pc, #112]	; (d4718 <loop+0x298>)
   d46a8:	f003 f975 	bl	d7996 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d46ac:	a809      	add	r0, sp, #36	; 0x24
   d46ae:	f003 f895 	bl	d77dc <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode2.connected()){
   d46b2:	4819      	ldr	r0, [pc, #100]	; (d4718 <loop+0x298>)
   d46b4:	f002 ff8c 	bl	d75d0 <_ZNK8particle13BlePeerDevice9connectedEv>
   d46b8:	2800      	cmp	r0, #0
   d46ba:	d0d7      	beq.n	d466c <loop+0x1ec>
                        Log.info("Successfully connected to sensor node 2!");
   d46bc:	4933      	ldr	r1, [pc, #204]	; (d478c <loop+0x30c>)
   d46be:	4818      	ldr	r0, [pc, #96]	; (d4720 <loop+0x2a0>)
   d46c0:	f7ff fd70 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(rainsteamSensorCharacteristic, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d46c4:	4932      	ldr	r1, [pc, #200]	; (d4790 <loop+0x310>)
   d46c6:	a809      	add	r0, sp, #36	; 0x24
   d46c8:	f002 fcc8 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d46cc:	aa09      	add	r2, sp, #36	; 0x24
   d46ce:	4931      	ldr	r1, [pc, #196]	; (d4794 <loop+0x314>)
   d46d0:	4811      	ldr	r0, [pc, #68]	; (d4718 <loop+0x298>)
   d46d2:	f003 f93c 	bl	d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(liquidSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
   d46d6:	4930      	ldr	r1, [pc, #192]	; (d4798 <loop+0x318>)
   d46d8:	a809      	add	r0, sp, #36	; 0x24
   d46da:	f002 fcbf 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d46de:	aa09      	add	r2, sp, #36	; 0x24
   d46e0:	492e      	ldr	r1, [pc, #184]	; (d479c <loop+0x31c>)
   d46e2:	480d      	ldr	r0, [pc, #52]	; (d4718 <loop+0x298>)
   d46e4:	f003 f933 	bl	d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
   d46e8:	492d      	ldr	r1, [pc, #180]	; (d47a0 <loop+0x320>)
   d46ea:	a809      	add	r0, sp, #36	; 0x24
   d46ec:	f002 fcb6 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d46f0:	aa09      	add	r2, sp, #36	; 0x24
   d46f2:	492c      	ldr	r1, [pc, #176]	; (d47a4 <loop+0x324>)
   d46f4:	4808      	ldr	r0, [pc, #32]	; (d4718 <loop+0x298>)
   d46f6:	f003 f92a 	bl	d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(solenoidVoltageCharacteristic, "97017674-9615-4fba-9712-6829f2045836");
   d46fa:	492b      	ldr	r1, [pc, #172]	; (d47a8 <loop+0x328>)
   d46fc:	a809      	add	r0, sp, #36	; 0x24
   d46fe:	f002 fcad 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
   d4702:	aa09      	add	r2, sp, #36	; 0x24
   d4704:	4929      	ldr	r1, [pc, #164]	; (d47ac <loop+0x32c>)
   d4706:	4804      	ldr	r0, [pc, #16]	; (d4718 <loop+0x298>)
   d4708:	e793      	b.n	d4632 <loop+0x1b2>
                    else{
                        Log.info("Failed to connect to sensor node 2.");
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d470a:	4929      	ldr	r1, [pc, #164]	; (d47b0 <loop+0x330>)
   d470c:	e7af      	b.n	d466e <loop+0x1ee>

        if (count > 0) {
            Log.info("%d devices found", count);
        }
    }
}
   d470e:	b00e      	add	sp, #56	; 0x38
   d4710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4714:	2003e398 	.word	0x2003e398
   d4718:	2003e3a0 	.word	0x2003e3a0
   d471c:	000db6fc 	.word	0x000db6fc
   d4720:	2003e40c 	.word	0x2003e40c
   d4724:	2003d97c 	.word	0x2003d97c
   d4728:	000db490 	.word	0x000db490
   d472c:	000db4aa 	.word	0x000db4aa
   d4730:	000db4b4 	.word	0x000db4b4
   d4734:	000db4c1 	.word	0x000db4c1
   d4738:	2003d944 	.word	0x2003d944
   d473c:	000db4d4 	.word	0x000db4d4
   d4740:	2003d8c8 	.word	0x2003d8c8
   d4744:	000db70d 	.word	0x000db70d
   d4748:	000db4e7 	.word	0x000db4e7
   d474c:	000db510 	.word	0x000db510
   d4750:	2003d968 	.word	0x2003d968
   d4754:	000db535 	.word	0x000db535
   d4758:	2003e390 	.word	0x2003e390
   d475c:	000db55a 	.word	0x000db55a
   d4760:	2003d8dc 	.word	0x2003d8dc
   d4764:	000db57f 	.word	0x000db57f
   d4768:	2003d970 	.word	0x2003d970
   d476c:	000db6eb 	.word	0x000db6eb
   d4770:	2003d960 	.word	0x2003d960
   d4774:	2003d964 	.word	0x2003d964
   d4778:	000dbb9f 	.word	0x000dbb9f
   d477c:	000db5a4 	.word	0x000db5a4
   d4780:	000db5c8 	.word	0x000db5c8
   d4784:	000db6a6 	.word	0x000db6a6
   d4788:	000db722 	.word	0x000db722
   d478c:	000db5e9 	.word	0x000db5e9
   d4790:	000db612 	.word	0x000db612
   d4794:	2003e364 	.word	0x2003e364
   d4798:	000db637 	.word	0x000db637
   d479c:	2003e354 	.word	0x2003e354
   d47a0:	000db65c 	.word	0x000db65c
   d47a4:	2003e35c 	.word	0x2003e35c
   d47a8:	000db681 	.word	0x000db681
   d47ac:	2003d958 	.word	0x2003d958
   d47b0:	000db6ca 	.word	0x000db6ca

000d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47b4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d47b6:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d47b8:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d47ba:	b17c      	cbz	r4, d47dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d47bc:	6863      	ldr	r3, [r4, #4]
   d47be:	3b01      	subs	r3, #1
   d47c0:	6063      	str	r3, [r4, #4]
   d47c2:	b95b      	cbnz	r3, d47dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d47c4:	6823      	ldr	r3, [r4, #0]
   d47c6:	4620      	mov	r0, r4
   d47c8:	689b      	ldr	r3, [r3, #8]
   d47ca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d47cc:	68a3      	ldr	r3, [r4, #8]
   d47ce:	3b01      	subs	r3, #1
   d47d0:	60a3      	str	r3, [r4, #8]
   d47d2:	b91b      	cbnz	r3, d47dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d47d4:	6823      	ldr	r3, [r4, #0]
   d47d6:	4620      	mov	r0, r4
   d47d8:	68db      	ldr	r3, [r3, #12]
   d47da:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d47dc:	4628      	mov	r0, r5
   d47de:	bd38      	pop	{r3, r4, r5, pc}

000d47e0 <_Z11mqttFailure17MQTT5_REASON_CODE>:
MQTT5 client;
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();

//functions used to handle MQTT
void mqttFailure(MQTT5_REASON_CODE reason) {
   d47e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
   d47e2:	4d11      	ldr	r5, [pc, #68]	; (d4828 <_Z11mqttFailure17MQTT5_REASON_CODE+0x48>)
   d47e4:	2100      	movs	r1, #0
MQTT5 client;
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();

//functions used to handle MQTT
void mqttFailure(MQTT5_REASON_CODE reason) {
   d47e6:	b085      	sub	sp, #20
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
   d47e8:	4603      	mov	r3, r0
   d47ea:	462a      	mov	r2, r5
MQTT5 client;
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();

//functions used to handle MQTT
void mqttFailure(MQTT5_REASON_CODE reason) {
   d47ec:	4606      	mov	r6, r0
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
   d47ee:	4608      	mov	r0, r1
   d47f0:	f002 f892 	bl	d6918 <snprintf>
    buf = (char *)malloc(sz + 1); /* make sure you check for != NULL in real code */
   d47f4:	1c44      	adds	r4, r0, #1
   d47f6:	4620      	mov	r0, r4
   d47f8:	f002 f876 	bl	d68e8 <malloc>
    snprintf(buf, sz+1, "Failure due to reason %d", (int) reason);
   d47fc:	4633      	mov	r3, r6
   d47fe:	462a      	mov	r2, r5
   d4800:	4621      	mov	r1, r4
void mqttFailure(MQTT5_REASON_CODE reason) {
    // See codes here: https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901031
    char *buf;
    size_t sz;
    sz = snprintf(NULL, 0, "Failure due to reason %d", (int) reason);
    buf = (char *)malloc(sz + 1); /* make sure you check for != NULL in real code */
   d4802:	4607      	mov	r7, r0
    snprintf(buf, sz+1, "Failure due to reason %d", (int) reason);
   d4804:	f002 f888 	bl	d6918 <snprintf>
   d4808:	4b08      	ldr	r3, [pc, #32]	; (d482c <_Z11mqttFailure17MQTT5_REASON_CODE+0x4c>)
   d480a:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d480c:	f88d 3000 	strb.w	r3, [sp]
   d4810:	2200      	movs	r2, #0
   d4812:	233c      	movs	r3, #60	; 0x3c
   d4814:	4639      	mov	r1, r7
   d4816:	a802      	add	r0, sp, #8
   d4818:	f005 f8b4 	bl	d9984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d481c:	a803      	add	r0, sp, #12
   d481e:	f7ff ffc9 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    
   Particle.publish(buf, PRIVATE);
}
   d4822:	b005      	add	sp, #20
   d4824:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4826:	bf00      	nop
   d4828:	000db737 	.word	0x000db737
   d482c:	2003d978 	.word	0x2003d978

000d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4830:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4832:	6804      	ldr	r4, [r0, #0]
   d4834:	6843      	ldr	r3, [r0, #4]
   d4836:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4838:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d483a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d483e:	42a6      	cmp	r6, r4
   d4840:	d004      	beq.n	d484c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4842:	4620      	mov	r0, r4
   d4844:	f002 f8f8 	bl	d6a38 <_ZN6StringD1Ev>
   d4848:	3414      	adds	r4, #20
   d484a:	e7f8      	b.n	d483e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d484c:	6828      	ldr	r0, [r5, #0]
   d484e:	f002 f853 	bl	d68f8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4852:	4628      	mov	r0, r5
   d4854:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4858:	4602      	mov	r2, r0
   d485a:	4801      	ldr	r0, [pc, #4]	; (d4860 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
   d485c:	f004 bf82 	b.w	d9764 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4860:	000d9739 	.word	0x000d9739

000d4864 <setup>:
int setSunnyLightThreshold(String threshold){
    SUNNY_LIGHT_THRESHOLD = threshold.toInt();
    return 1;
}

void setup() {
   d4864:	b530      	push	{r4, r5, lr}

    //setup MQTT
    client.onConnectFailed(mqttFailure);
   d4866:	4948      	ldr	r1, [pc, #288]	; (d4988 <setup+0x124>)
   d4868:	4848      	ldr	r0, [pc, #288]	; (d498c <setup+0x128>)
    client.onPublishFailed(mqttFailure);
    client.onSubscribeFailed(mqttFailure);
    client.onPacketReceived(mqttPacketReceived);

    if (client.connect("test.mosquitto.org", 1883, "client123") && client.awaitPackets()) {
   d486a:	4d49      	ldr	r5, [pc, #292]	; (d4990 <setup+0x12c>)
int setSunnyLightThreshold(String threshold){
    SUNNY_LIGHT_THRESHOLD = threshold.toInt();
    return 1;
}

void setup() {
   d486c:	b08b      	sub	sp, #44	; 0x2c

    //setup MQTT
    client.onConnectFailed(mqttFailure);
   d486e:	f001 fd55 	bl	d631c <_ZN5MQTT515onConnectFailedEPFv17MQTT5_REASON_CODEE>
    client.onPublishFailed(mqttFailure);
   d4872:	4945      	ldr	r1, [pc, #276]	; (d4988 <setup+0x124>)
   d4874:	4845      	ldr	r0, [pc, #276]	; (d498c <setup+0x128>)
   d4876:	f001 fd53 	bl	d6320 <_ZN5MQTT515onPublishFailedEPFv17MQTT5_REASON_CODEE>
    client.onSubscribeFailed(mqttFailure);
   d487a:	4943      	ldr	r1, [pc, #268]	; (d4988 <setup+0x124>)
   d487c:	4843      	ldr	r0, [pc, #268]	; (d498c <setup+0x128>)
   d487e:	f001 fd51 	bl	d6324 <_ZN5MQTT517onSubscribeFailedEPFv17MQTT5_REASON_CODEE>
    client.onPacketReceived(mqttPacketReceived);
   d4882:	4944      	ldr	r1, [pc, #272]	; (d4994 <setup+0x130>)
   d4884:	4841      	ldr	r0, [pc, #260]	; (d498c <setup+0x128>)
   d4886:	f001 fd4f 	bl	d6328 <_ZN5MQTT516onPacketReceivedEPFvPcPhtb9MQTT5_QOSbE>

    if (client.connect("test.mosquitto.org", 1883, "client123") && client.awaitPackets()) {
   d488a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d488c:	466c      	mov	r4, sp
   d488e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4890:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   d4894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   d4898:	4b3f      	ldr	r3, [pc, #252]	; (d4998 <setup+0x134>)
   d489a:	4940      	ldr	r1, [pc, #256]	; (d499c <setup+0x138>)
   d489c:	483b      	ldr	r0, [pc, #236]	; (d498c <setup+0x128>)
   d489e:	4d40      	ldr	r5, [pc, #256]	; (d49a0 <setup+0x13c>)
   d48a0:	f240 725b 	movw	r2, #1883	; 0x75b
   d48a4:	f001 fd14 	bl	d62d0 <_ZN5MQTT57connectEPKctS1_19MQTT5ConnectOptions>
   d48a8:	b128      	cbz	r0, d48b6 <setup+0x52>
   d48aa:	f241 3188 	movw	r1, #5000	; 0x1388
   d48ae:	4837      	ldr	r0, [pc, #220]	; (d498c <setup+0x128>)
   d48b0:	f001 fb64 	bl	d5f7c <_ZN5MQTT512awaitPacketsEm>
   d48b4:	b930      	cbnz	r0, d48c4 <setup+0x60>
   d48b6:	782b      	ldrb	r3, [r5, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d48b8:	f88d 3000 	strb.w	r3, [sp]
   d48bc:	2200      	movs	r2, #0
   d48be:	233c      	movs	r3, #60	; 0x3c
   d48c0:	4938      	ldr	r1, [pc, #224]	; (d49a4 <setup+0x140>)
   d48c2:	e00d      	b.n	d48e0 <setup+0x7c>
       client.publish("elec4740g6/test", "Hello world");
   d48c4:	2400      	movs	r4, #0
   d48c6:	4623      	mov	r3, r4
   d48c8:	4a37      	ldr	r2, [pc, #220]	; (d49a8 <setup+0x144>)
   d48ca:	4938      	ldr	r1, [pc, #224]	; (d49ac <setup+0x148>)
   d48cc:	9400      	str	r4, [sp, #0]
   d48ce:	482f      	ldr	r0, [pc, #188]	; (d498c <setup+0x128>)
   d48d0:	f001 f9b0 	bl	d5c34 <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt>
   d48d4:	782b      	ldrb	r3, [r5, #0]
   d48d6:	4936      	ldr	r1, [pc, #216]	; (d49b0 <setup+0x14c>)
   d48d8:	f88d 3000 	strb.w	r3, [sp]
   d48dc:	4622      	mov	r2, r4
   d48de:	233c      	movs	r3, #60	; 0x3c
   d48e0:	a808      	add	r0, sp, #32
   d48e2:	f005 f84f 	bl	d9984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d48e6:	a809      	add	r0, sp, #36	; 0x24
   d48e8:	f7ff ff64 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    else{
        Particle.publish("MQTT connection failure :(", PRIVATE);
    }

    const uint8_t val = 0x01;
   d48ec:	2201      	movs	r2, #1
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d48ee:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d48f2:	a808      	add	r0, sp, #32
    }
    else{
        Particle.publish("MQTT connection failure :(", PRIVATE);
    }

    const uint8_t val = 0x01;
   d48f4:	f88d 2020 	strb.w	r2, [sp, #32]
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d48f8:	f001 feca 	bl	d6690 <dct_write_app_data>
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning

    BLE.on();
   d48fc:	f002 fec8 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4900:	f002 ff0c 	bl	d771c <_ZNK8particle14BleLocalDevice2onEv>
    
    
    //map functions to be called whenever new data is received for a characteristic
    temperatureSensorCharacteristic.onDataReceived(onTemperatureReceived, NULL);
   d4904:	2200      	movs	r2, #0
   d4906:	492b      	ldr	r1, [pc, #172]	; (d49b4 <setup+0x150>)
   d4908:	482b      	ldr	r0, [pc, #172]	; (d49b8 <setup+0x154>)
   d490a:	f002 fdf3 	bl	d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humiditySensorCharacteristic.onDataReceived(onHumidityReceived, NULL);
   d490e:	2200      	movs	r2, #0
   d4910:	492a      	ldr	r1, [pc, #168]	; (d49bc <setup+0x158>)
   d4912:	482b      	ldr	r0, [pc, #172]	; (d49c0 <setup+0x15c>)
   d4914:	f002 fdee 	bl	d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    lightSensorCharacteristic.onDataReceived(onLightReceived, NULL);
   d4918:	2200      	movs	r2, #0
   d491a:	492a      	ldr	r1, [pc, #168]	; (d49c4 <setup+0x160>)
   d491c:	482a      	ldr	r0, [pc, #168]	; (d49c8 <setup+0x164>)
   d491e:	f002 fde9 	bl	d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    moistureSensorCharacteristic.onDataReceived(onMoistureReceived, NULL);
   d4922:	2200      	movs	r2, #0
   d4924:	4929      	ldr	r1, [pc, #164]	; (d49cc <setup+0x168>)
   d4926:	482a      	ldr	r0, [pc, #168]	; (d49d0 <setup+0x16c>)
   d4928:	f002 fde4 	bl	d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>

    rainsteamSensorCharacteristic.onDataReceived(onRainsteamReceived, NULL);
   d492c:	2200      	movs	r2, #0
   d492e:	4929      	ldr	r1, [pc, #164]	; (d49d4 <setup+0x170>)
   d4930:	4829      	ldr	r0, [pc, #164]	; (d49d8 <setup+0x174>)
   d4932:	f002 fddf 	bl	d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    liquidSensorCharacteristic.onDataReceived(onLiquidLevelReceived, NULL);
   d4936:	2200      	movs	r2, #0
   d4938:	4928      	ldr	r1, [pc, #160]	; (d49dc <setup+0x178>)
   d493a:	4829      	ldr	r0, [pc, #164]	; (d49e0 <setup+0x17c>)
   d493c:	f002 fdda 	bl	d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
   d4940:	2200      	movs	r2, #0
   d4942:	4928      	ldr	r1, [pc, #160]	; (d49e4 <setup+0x180>)
   d4944:	4828      	ldr	r0, [pc, #160]	; (d49e8 <setup+0x184>)
   d4946:	f002 fdd5 	bl	d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    // commented out, as this value sends from here rather than receives
    // solenoidVoltageCharacteristic.onDataReceived(onSolenoidReceived, NULL);

    //setup particle functions
    Particle.function("sprinklerSwitch",sprinklerSwitch);
   d494a:	4928      	ldr	r1, [pc, #160]	; (d49ec <setup+0x188>)
   d494c:	4828      	ldr	r0, [pc, #160]	; (d49f0 <setup+0x18c>)
   d494e:	f7ff ff83 	bl	d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("forceMqttPublish", forceMqttPublish);
   d4952:	4928      	ldr	r1, [pc, #160]	; (d49f4 <setup+0x190>)
   d4954:	4828      	ldr	r0, [pc, #160]	; (d49f8 <setup+0x194>)
   d4956:	f7ff ff7f 	bl	d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setLowSoilMoistureThreshold",setLowSoilMoistureThreshold);
   d495a:	4928      	ldr	r1, [pc, #160]	; (d49fc <setup+0x198>)
   d495c:	4828      	ldr	r0, [pc, #160]	; (d4a00 <setup+0x19c>)
   d495e:	f7ff ff7b 	bl	d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setHighSoilMoistureThreshold",setHighSoilMoistureThreshold);
   d4962:	4928      	ldr	r1, [pc, #160]	; (d4a04 <setup+0x1a0>)
   d4964:	4828      	ldr	r0, [pc, #160]	; (d4a08 <setup+0x1a4>)
   d4966:	f7ff ff77 	bl	d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setTemperatureThreshold",setTemperatureThreshold);
   d496a:	4928      	ldr	r1, [pc, #160]	; (d4a0c <setup+0x1a8>)
   d496c:	4828      	ldr	r0, [pc, #160]	; (d4a10 <setup+0x1ac>)
   d496e:	f7ff ff73 	bl	d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setAirHumidityThreshold",setAirHumidityThreshold);
   d4972:	4928      	ldr	r1, [pc, #160]	; (d4a14 <setup+0x1b0>)
   d4974:	4828      	ldr	r0, [pc, #160]	; (d4a18 <setup+0x1b4>)
   d4976:	f7ff ff6f 	bl	d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("setSunnyLightThreshold",setSunnyLightThreshold);
   d497a:	4928      	ldr	r1, [pc, #160]	; (d4a1c <setup+0x1b8>)
   d497c:	4828      	ldr	r0, [pc, #160]	; (d4a20 <setup+0x1bc>)
   d497e:	f7ff ff6b 	bl	d4858 <_ZN10CloudClass8functionIA23_cIPFi6StringEEEEbRKT_DpT0_>
}
   d4982:	b00b      	add	sp, #44	; 0x2c
   d4984:	bd30      	pop	{r4, r5, pc}
   d4986:	bf00      	nop
   d4988:	000d47e1 	.word	0x000d47e1
   d498c:	2003d8f0 	.word	0x2003d8f0
   d4990:	000db8b4 	.word	0x000db8b4
   d4994:	000d41d5 	.word	0x000d41d5
   d4998:	000db750 	.word	0x000db750
   d499c:	000db75a 	.word	0x000db75a
   d49a0:	2003d978 	.word	0x2003d978
   d49a4:	000db80e 	.word	0x000db80e
   d49a8:	000db829 	.word	0x000db829
   d49ac:	000db835 	.word	0x000db835
   d49b0:	000db845 	.word	0x000db845
   d49b4:	000d41ed 	.word	0x000d41ed
   d49b8:	2003d968 	.word	0x2003d968
   d49bc:	000d4211 	.word	0x000d4211
   d49c0:	2003e390 	.word	0x2003e390
   d49c4:	000d425d 	.word	0x000d425d
   d49c8:	2003d8dc 	.word	0x2003d8dc
   d49cc:	000d4231 	.word	0x000d4231
   d49d0:	2003d970 	.word	0x2003d970
   d49d4:	000d4289 	.word	0x000d4289
   d49d8:	2003e364 	.word	0x2003e364
   d49dc:	000d42a1 	.word	0x000d42a1
   d49e0:	2003e354 	.word	0x2003e354
   d49e4:	000d42c5 	.word	0x000d42c5
   d49e8:	2003e35c 	.word	0x2003e35c
   d49ec:	000d4bb9 	.word	0x000d4bb9
   d49f0:	000db76d 	.word	0x000db76d
   d49f4:	000d4479 	.word	0x000d4479
   d49f8:	000db77d 	.word	0x000db77d
   d49fc:	000d40d9 	.word	0x000d40d9
   d4a00:	000db78e 	.word	0x000db78e
   d4a04:	000d40ed 	.word	0x000d40ed
   d4a08:	000db7aa 	.word	0x000db7aa
   d4a0c:	000d4101 	.word	0x000d4101
   d4a10:	000db7c7 	.word	0x000db7c7
   d4a14:	000d4115 	.word	0x000d4115
   d4a18:	000db7df 	.word	0x000db7df
   d4a1c:	000d4129 	.word	0x000d4129
   d4a20:	000db7f7 	.word	0x000db7f7

000d4a24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4a24:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4a26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a28:	4606      	mov	r6, r0
   d4a2a:	460c      	mov	r4, r1
   d4a2c:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4a2e:	d916      	bls.n	d4a5e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4a30:	4290      	cmp	r0, r2
   d4a32:	d215      	bcs.n	d4a60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4a34:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d4a38:	1a6c      	subs	r4, r5, r1
   d4a3a:	f1a1 0714 	sub.w	r7, r1, #20
   d4a3e:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4a40:	42af      	cmp	r7, r5
   d4a42:	d01c      	beq.n	d4a7e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4a44:	b12c      	cbz	r4, d4a52 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4a46:	4629      	mov	r1, r5
   d4a48:	4620      	mov	r0, r4
   d4a4a:	f001 ffe5 	bl	d6a18 <_ZN6StringC1EOS_>
   d4a4e:	7c2b      	ldrb	r3, [r5, #16]
   d4a50:	7423      	strb	r3, [r4, #16]
   d4a52:	4628      	mov	r0, r5
   d4a54:	f001 fff0 	bl	d6a38 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d4a58:	3d14      	subs	r5, #20
   d4a5a:	3c14      	subs	r4, #20
   d4a5c:	e7f0      	b.n	d4a40 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4a5e:	d00e      	beq.n	d4a7e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4a60:	42ac      	cmp	r4, r5
   d4a62:	d00c      	beq.n	d4a7e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4a64:	b12e      	cbz	r6, d4a72 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4a66:	4621      	mov	r1, r4
   d4a68:	4630      	mov	r0, r6
   d4a6a:	f001 ffd5 	bl	d6a18 <_ZN6StringC1EOS_>
   d4a6e:	7c23      	ldrb	r3, [r4, #16]
   d4a70:	7433      	strb	r3, [r6, #16]
   d4a72:	4620      	mov	r0, r4
   d4a74:	f001 ffe0 	bl	d6a38 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4a78:	3414      	adds	r4, #20
   d4a7a:	3614      	adds	r6, #20
   d4a7c:	e7f0      	b.n	d4a60 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d4a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4a80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4a84:	2300      	movs	r3, #0
   d4a86:	6003      	str	r3, [r0, #0]
   d4a88:	6043      	str	r3, [r0, #4]
   d4a8a:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4a8c:	684e      	ldr	r6, [r1, #4]
   d4a8e:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4a90:	4604      	mov	r4, r0
   d4a92:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4a94:	dd24      	ble.n	d4ae0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4a96:	f04f 0814 	mov.w	r8, #20
   d4a9a:	fb08 f006 	mul.w	r0, r8, r6
   d4a9e:	f001 ff23 	bl	d68e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4aa2:	4605      	mov	r5, r0
   d4aa4:	b1e0      	cbz	r0, d4ae0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4aa6:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4aaa:	fb08 1202 	mla	r2, r8, r2, r1
   d4aae:	f7ff ffb9 	bl	d4a24 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4ab2:	6820      	ldr	r0, [r4, #0]
   d4ab4:	f001 ff20 	bl	d68f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4ab8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4aba:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4abc:	683e      	ldr	r6, [r7, #0]
   d4abe:	687b      	ldr	r3, [r7, #4]
   d4ac0:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4ac4:	4546      	cmp	r6, r8
   d4ac6:	d009      	beq.n	d4adc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4ac8:	b12d      	cbz	r5, d4ad6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4aca:	4631      	mov	r1, r6
   d4acc:	4628      	mov	r0, r5
   d4ace:	f002 f81c 	bl	d6b0a <_ZN6StringC1ERKS_>
   d4ad2:	7c33      	ldrb	r3, [r6, #16]
   d4ad4:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4ad6:	3614      	adds	r6, #20
   d4ad8:	3514      	adds	r5, #20
   d4ada:	e7f3      	b.n	d4ac4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4adc:	687b      	ldr	r3, [r7, #4]
   d4ade:	6063      	str	r3, [r4, #4]
    }
}
   d4ae0:	4620      	mov	r0, r4
   d4ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4ae6 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
   d4ae6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4aea:	6843      	ldr	r3, [r0, #4]
   d4aec:	6804      	ldr	r4, [r0, #0]
   d4aee:	1b1c      	subs	r4, r3, r4
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
   d4af0:	10a4      	asrs	r4, r4, #2
   d4af2:	bf14      	ite	ne
   d4af4:	4623      	movne	r3, r4
   d4af6:	2301      	moveq	r3, #1
      {
	if (max_size() - size() < __n)
	  __throw_length_error(__N(__s));

	const size_type __len = size() + std::max(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
   d4af8:	18e4      	adds	r4, r4, r3
   d4afa:	4606      	mov	r6, r0
   d4afc:	4689      	mov	r9, r1
   d4afe:	d202      	bcs.n	d4b06 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x20>
   d4b00:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   d4b04:	d325      	bcc.n	d4b52 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x6c>
   d4b06:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d4b0a:	00a0      	lsls	r0, r4, #2
   d4b0c:	f7ff fac3 	bl	d4096 <_Znwj>
   d4b10:	4607      	mov	r7, r0

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
   d4b12:	f8d6 8000 	ldr.w	r8, [r6]
   d4b16:	6875      	ldr	r5, [r6, #4]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4b18:	f8d9 3000 	ldr.w	r3, [r9]
   d4b1c:	ebc8 0505 	rsb	r5, r8, r5
   d4b20:	42ef      	cmn	r7, r5
   d4b22:	bf18      	it	ne
   d4b24:	517b      	strne	r3, [r7, r5]
	  // trivial types can have deleted assignment
	  static_assert( is_copy_assignable<_Tp>::value,
	                 "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
   d4b26:	08ab      	lsrs	r3, r5, #2
   d4b28:	d004      	beq.n	d4b34 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x4e>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
   d4b2a:	462a      	mov	r2, r5
   d4b2c:	4641      	mov	r1, r8
   d4b2e:	4638      	mov	r0, r7
   d4b30:	f006 fa26 	bl	daf80 <memmove>
	    __new_finish
	      = std::__uninitialized_move_if_noexcept_a
	      (this->_M_impl._M_start, this->_M_impl._M_finish,
	       __new_start, _M_get_Tp_allocator());

	    ++__new_finish;
   d4b34:	3504      	adds	r5, #4
   d4b36:	443d      	add	r5, r7

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
   d4b38:	f1b8 0f00 	cmp.w	r8, #0
   d4b3c:	d002      	beq.n	d4b44 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x5e>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4b3e:	4640      	mov	r0, r8
   d4b40:	f7ff faad 	bl	d409e <_ZdlPv>
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
	this->_M_impl._M_finish = __new_finish;
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4b44:	eb07 0484 	add.w	r4, r7, r4, lsl #2
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
		      _M_get_Tp_allocator());
	_M_deallocate(this->_M_impl._M_start,
		      this->_M_impl._M_end_of_storage
		      - this->_M_impl._M_start);
	this->_M_impl._M_start = __new_start;
   d4b48:	6037      	str	r7, [r6, #0]
	this->_M_impl._M_finish = __new_finish;
   d4b4a:	6075      	str	r5, [r6, #4]
	this->_M_impl._M_end_of_storage = __new_start + __len;
   d4b4c:	60b4      	str	r4, [r6, #8]
      }
   d4b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

      pointer
      _M_allocate(size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
   d4b52:	2c00      	cmp	r4, #0
   d4b54:	d1d9      	bne.n	d4b0a <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x24>
   d4b56:	4627      	mov	r7, r4
   d4b58:	e7db      	b.n	d4b12 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_+0x2c>
	...

000d4b5c <_Z15switchSprinklerv>:
            Log.info("%d devices found", count);
        }
    }
}

void switchSprinkler(){
   d4b5c:	b513      	push	{r0, r1, r4, lr}
    //turn sprinkler off if it was on
    if(isWatering){
   d4b5e:	4c13      	ldr	r4, [pc, #76]	; (d4bac <_Z15switchSprinklerv+0x50>)
   d4b60:	7823      	ldrb	r3, [r4, #0]
   d4b62:	b113      	cbz	r3, d4b6a <_Z15switchSprinklerv+0xe>
        solenoidVoltageCharacteristic.setValue(0);
   d4b64:	2300      	movs	r3, #0
   d4b66:	9301      	str	r3, [sp, #4]
   d4b68:	e001      	b.n	d4b6e <_Z15switchSprinklerv+0x12>
    }
    //alternatively, turn sprinkler on if it was off
    else{
        solenoidVoltageCharacteristic.setValue(1);
   d4b6a:	2201      	movs	r2, #1
   d4b6c:	9201      	str	r2, [sp, #4]
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d4b6e:	2204      	movs	r2, #4
   d4b70:	eb0d 0102 	add.w	r1, sp, r2
   d4b74:	480e      	ldr	r0, [pc, #56]	; (d4bb0 <_Z15switchSprinklerv+0x54>)
   d4b76:	f002 fc1b 	bl	d73b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
    }
    //record the time this switch occurred
    wateringEventTimes.push_back((int32_t) Time.now());
   d4b7a:	f004 fccd 	bl	d9518 <_ZN9TimeClass3nowEv>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
   d4b7e:	4b0d      	ldr	r3, [pc, #52]	; (d4bb4 <_Z15switchSprinklerv+0x58>)
   d4b80:	9001      	str	r0, [sp, #4]
   d4b82:	6899      	ldr	r1, [r3, #8]
   d4b84:	685a      	ldr	r2, [r3, #4]
   d4b86:	428a      	cmp	r2, r1
   d4b88:	4619      	mov	r1, r3
   d4b8a:	d005      	beq.n	d4b98 <_Z15switchSprinklerv+0x3c>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d4b8c:	b102      	cbz	r2, d4b90 <_Z15switchSprinklerv+0x34>
   d4b8e:	6010      	str	r0, [r2, #0]
	  {
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
   d4b90:	684b      	ldr	r3, [r1, #4]
   d4b92:	3304      	adds	r3, #4
   d4b94:	604b      	str	r3, [r1, #4]
   d4b96:	e003      	b.n	d4ba0 <_Z15switchSprinklerv+0x44>
	  }
	else
	  _M_emplace_back_aux(std::forward<_Args>(__args)...);
   d4b98:	a901      	add	r1, sp, #4
   d4b9a:	4618      	mov	r0, r3
   d4b9c:	f7ff ffa3 	bl	d4ae6 <_ZNSt6vectorIlSaIlEE19_M_emplace_back_auxIIlEEEvDpOT_>
    //flip the watering flag
    isWatering = !isWatering;
   d4ba0:	7823      	ldrb	r3, [r4, #0]
   d4ba2:	f083 0301 	eor.w	r3, r3, #1
   d4ba6:	7023      	strb	r3, [r4, #0]
}
   d4ba8:	b002      	add	sp, #8
   d4baa:	bd10      	pop	{r4, pc}
   d4bac:	2003e3a8 	.word	0x2003e3a8
   d4bb0:	2003d958 	.word	0x2003d958
   d4bb4:	2003e3ac 	.word	0x2003e3ac

000d4bb8 <_Z15sprinklerSwitch6String>:
    Log.info("Topic: %s. Message: %s", topic, payload);
}

/* Particle functions for Particle console control */
/* Manually turn sprinkler system on/off */
int sprinklerSwitch(String activate){
   d4bb8:	b530      	push	{r4, r5, lr}
   d4bba:	b085      	sub	sp, #20
   d4bbc:	4604      	mov	r4, r0
    if(activate.equalsIgnoreCase("on")){
   d4bbe:	4914      	ldr	r1, [pc, #80]	; (d4c10 <_Z15sprinklerSwitch6String+0x58>)
   d4bc0:	4668      	mov	r0, sp
   d4bc2:	f001 ff80 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4bc6:	4669      	mov	r1, sp
   d4bc8:	4620      	mov	r0, r4
   d4bca:	f001 ffdd 	bl	d6b88 <_ZNK6String16equalsIgnoreCaseERKS_>
   d4bce:	4605      	mov	r5, r0
   d4bd0:	4668      	mov	r0, sp
   d4bd2:	f001 ff31 	bl	d6a38 <_ZN6StringD1Ev>
   d4bd6:	b11d      	cbz	r5, d4be0 <_Z15sprinklerSwitch6String+0x28>
        //turn on sprinkler if it is off
        if(!isWatering){
   d4bd8:	4b0e      	ldr	r3, [pc, #56]	; (d4c14 <_Z15sprinklerSwitch6String+0x5c>)
   d4bda:	781b      	ldrb	r3, [r3, #0]
   d4bdc:	b993      	cbnz	r3, d4c04 <_Z15sprinklerSwitch6String+0x4c>
   d4bde:	e00f      	b.n	d4c00 <_Z15sprinklerSwitch6String+0x48>
            switchSprinkler();
        }
    }
    else if (activate.equalsIgnoreCase("off")){
   d4be0:	490d      	ldr	r1, [pc, #52]	; (d4c18 <_Z15sprinklerSwitch6String+0x60>)
   d4be2:	4668      	mov	r0, sp
   d4be4:	f001 ff6f 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
   d4be8:	4620      	mov	r0, r4
   d4bea:	4669      	mov	r1, sp
   d4bec:	f001 ffcc 	bl	d6b88 <_ZNK6String16equalsIgnoreCaseERKS_>
   d4bf0:	4604      	mov	r4, r0
   d4bf2:	4668      	mov	r0, sp
   d4bf4:	f001 ff20 	bl	d6a38 <_ZN6StringD1Ev>
   d4bf8:	b134      	cbz	r4, d4c08 <_Z15sprinklerSwitch6String+0x50>
        //turn off sprinkler if it is on
        if(isWatering){
   d4bfa:	4b06      	ldr	r3, [pc, #24]	; (d4c14 <_Z15sprinklerSwitch6String+0x5c>)
   d4bfc:	781b      	ldrb	r3, [r3, #0]
   d4bfe:	b10b      	cbz	r3, d4c04 <_Z15sprinklerSwitch6String+0x4c>
/* Manually turn sprinkler system on/off */
int sprinklerSwitch(String activate){
    if(activate.equalsIgnoreCase("on")){
        //turn on sprinkler if it is off
        if(!isWatering){
            switchSprinkler();
   d4c00:	f7ff ffac 	bl	d4b5c <_Z15switchSprinklerv>
        }
    }
    else{
        return 0;
    }
    return 1;
   d4c04:	2001      	movs	r0, #1
   d4c06:	e000      	b.n	d4c0a <_Z15sprinklerSwitch6String+0x52>
        if(isWatering){
            switchSprinkler();
        }
    }
    else{
        return 0;
   d4c08:	4620      	mov	r0, r4
    }
    return 1;
}
   d4c0a:	b005      	add	sp, #20
   d4c0c:	bd30      	pop	{r4, r5, pc}
   d4c0e:	bf00      	nop
   d4c10:	000db863 	.word	0x000db863
   d4c14:	2003e3a8 	.word	0x2003e3a8
   d4c18:	000db866 	.word	0x000db866

000d4c1c <_GLOBAL__sub_I_SystemMode>:
        Log.info("Sensor 2 - Human detected!");
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
   d4c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c1e:	4b6a      	ldr	r3, [pc, #424]	; (d4dc8 <_GLOBAL__sub_I_SystemMode+0x1ac>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c20:	4d6a      	ldr	r5, [pc, #424]	; (d4dcc <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d4c22:	b08d      	sub	sp, #52	; 0x34
   d4c24:	2601      	movs	r6, #1
   d4c26:	2400      	movs	r4, #0
   d4c28:	701e      	strb	r6, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c2a:	f001 fb9f 	bl	d636c <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4c32:	816b      	strh	r3, [r5, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c34:	4630      	mov	r0, r6

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c36:	602c      	str	r4, [r5, #0]
   d4c38:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4c3a:	71ac      	strb	r4, [r5, #6]
   d4c3c:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c3e:	f001 fd9f 	bl	d6780 <set_system_mode>
 * Date: 07/05/2020
 */

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
SYSTEM_MODE(AUTOMATIC);
   d4c42:	4a63      	ldr	r2, [pc, #396]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4c44:	4963      	ldr	r1, [pc, #396]	; (d4dd4 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d4c46:	4628      	mov	r0, r5
   d4c48:	f006 f805 	bl	dac56 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4c4c:	9400      	str	r4, [sp, #0]
   d4c4e:	9401      	str	r4, [sp, #4]
   d4c50:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4c52:	f005 f911 	bl	d9e78 <_Z16_fetch_usbserialv>
   d4c56:	4669      	mov	r1, sp
   d4c58:	4607      	mov	r7, r0
   d4c5a:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4c5c:	4d5e      	ldr	r5, [pc, #376]	; (d4dd8 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d4c5e:	f7ff ff0f 	bl	d4a80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4c62:	a903      	add	r1, sp, #12
   d4c64:	a806      	add	r0, sp, #24
   d4c66:	f7ff ff0b 	bl	d4a80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4c6a:	4b5c      	ldr	r3, [pc, #368]	; (d4ddc <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d4c6c:	602b      	str	r3, [r5, #0]
   d4c6e:	a906      	add	r1, sp, #24
   d4c70:	a809      	add	r0, sp, #36	; 0x24
   d4c72:	f7ff ff05 	bl	d4a80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4c76:	aa09      	add	r2, sp, #36	; 0x24
   d4c78:	4631      	mov	r1, r6
   d4c7a:	1d28      	adds	r0, r5, #4
   d4c7c:	f004 f8f5 	bl	d8e6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4c80:	a809      	add	r0, sp, #36	; 0x24
   d4c82:	f7ff fdd5 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4c86:	a806      	add	r0, sp, #24
   d4c88:	f7ff fdd2 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4c8c:	4b54      	ldr	r3, [pc, #336]	; (d4de0 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d4c8e:	602b      	str	r3, [r5, #0]
   d4c90:	622f      	str	r7, [r5, #32]
   d4c92:	a803      	add	r0, sp, #12
   d4c94:	f7ff fdcc 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4c98:	4b52      	ldr	r3, [pc, #328]	; (d4de4 <_GLOBAL__sub_I_SystemMode+0x1c8>)
   d4c9a:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4c9c:	f005 f8ec 	bl	d9e78 <_Z16_fetch_usbserialv>
   d4ca0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4ca4:	f005 f8d8 	bl	d9e58 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4ca8:	f003 fd88 	bl	d87bc <_ZN5spark10LogManager8instanceEv>
   d4cac:	4629      	mov	r1, r5
   d4cae:	f004 f86f 	bl	d8d90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4cb2:	4668      	mov	r0, sp
   d4cb4:	f7ff fdbc 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4cb8:	4a45      	ldr	r2, [pc, #276]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4cba:	494b      	ldr	r1, [pc, #300]	; (d4de8 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d4cbc:	4628      	mov	r0, r5
   d4cbe:	f005 ffca 	bl	dac56 <__aeabi_atexit>
	pointer _M_start;
	pointer _M_finish;
	pointer _M_end_of_storage;

	_Vector_impl()
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
   d4cc2:	484a      	ldr	r0, [pc, #296]	; (d4dec <_GLOBAL__sub_I_SystemMode+0x1d0>)
uint8_t currentRainsteam = 60;//-1;
uint8_t currentLiquid = 50;//-1;
int8_t currentHumanDetect = 0;//-1;
uint8_t initWateringStatus = 1;//0;
bool isWatering = false;    //Is the solenoid active or not?
std::vector<int32_t> wateringEventTimes = {};
   d4cc4:	4a42      	ldr	r2, [pc, #264]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4cc6:	494a      	ldr	r1, [pc, #296]	; (d4df0 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d4cc8:	6004      	str	r4, [r0, #0]
   d4cca:	6044      	str	r4, [r0, #4]
   d4ccc:	6084      	str	r4, [r0, #8]
   d4cce:	f005 ffc2 	bl	dac56 <__aeabi_atexit>
int AIR_HUMIDITY_THRESHOLD = 80;
int SUNNY_LIGHT_THRESHOLD = 90000;

/* Bluetooth variables */
//bluetooth devices we want to connect to and their service ids
BlePeerDevice sensorNode1;
   d4cd2:	4848      	ldr	r0, [pc, #288]	; (d4df4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4cd4:	4d48      	ldr	r5, [pc, #288]	; (d4df8 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d4cd6:	f002 fddb 	bl	d7890 <_ZN8particle13BlePeerDeviceC1Ev>
   d4cda:	4a3d      	ldr	r2, [pc, #244]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4cdc:	4947      	ldr	r1, [pc, #284]	; (d4dfc <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4cde:	4845      	ldr	r0, [pc, #276]	; (d4df4 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d4ce0:	f005 ffb9 	bl	dac56 <__aeabi_atexit>
BlePeerDevice sensorNode2;
   d4ce4:	4846      	ldr	r0, [pc, #280]	; (d4e00 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4ce6:	f002 fdd3 	bl	d7890 <_ZN8particle13BlePeerDeviceC1Ev>
   d4cea:	4a39      	ldr	r2, [pc, #228]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4cec:	4943      	ldr	r1, [pc, #268]	; (d4dfc <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4cee:	4844      	ldr	r0, [pc, #272]	; (d4e00 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4cf0:	f005 ffb1 	bl	dac56 <__aeabi_atexit>
BleUuid sensorNode1ServiceUuid("754ebf5e-ce31-4300-9fd5-a8fb4ee4a811");
   d4cf4:	4943      	ldr	r1, [pc, #268]	; (d4e04 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4cf6:	4844      	ldr	r0, [pc, #272]	; (d4e08 <_GLOBAL__sub_I_SystemMode+0x1ec>)
   d4cf8:	f002 f9b0 	bl	d705c <_ZN8particle7BleUuidC1EPKc>
BleUuid sensorNode2ServiceUuid("97728ad9-a998-4629-b855-ee2658ca01f7");
   d4cfc:	4943      	ldr	r1, [pc, #268]	; (d4e0c <_GLOBAL__sub_I_SystemMode+0x1f0>)
   d4cfe:	4844      	ldr	r0, [pc, #272]	; (d4e10 <_GLOBAL__sub_I_SystemMode+0x1f4>)
   d4d00:	f002 f9ac 	bl	d705c <_ZN8particle7BleUuidC1EPKc>

//characteristics we want to track
//for sensor node 1
BleCharacteristic temperatureSensorCharacteristic;
   d4d04:	4843      	ldr	r0, [pc, #268]	; (d4e14 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4d06:	f003 fa2f 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d0a:	4a31      	ldr	r2, [pc, #196]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d0c:	4942      	ldr	r1, [pc, #264]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d0e:	4841      	ldr	r0, [pc, #260]	; (d4e14 <_GLOBAL__sub_I_SystemMode+0x1f8>)
   d4d10:	f005 ffa1 	bl	dac56 <__aeabi_atexit>
BleCharacteristic humiditySensorCharacteristic;
   d4d14:	4841      	ldr	r0, [pc, #260]	; (d4e1c <_GLOBAL__sub_I_SystemMode+0x200>)
   d4d16:	f003 fa27 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d1a:	4a2d      	ldr	r2, [pc, #180]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d1c:	493e      	ldr	r1, [pc, #248]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d1e:	483f      	ldr	r0, [pc, #252]	; (d4e1c <_GLOBAL__sub_I_SystemMode+0x200>)
   d4d20:	f005 ff99 	bl	dac56 <__aeabi_atexit>
BleCharacteristic lightSensorCharacteristic;
   d4d24:	483e      	ldr	r0, [pc, #248]	; (d4e20 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4d26:	f003 fa1f 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d2a:	4a29      	ldr	r2, [pc, #164]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d2c:	493a      	ldr	r1, [pc, #232]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d2e:	483c      	ldr	r0, [pc, #240]	; (d4e20 <_GLOBAL__sub_I_SystemMode+0x204>)
   d4d30:	f005 ff91 	bl	dac56 <__aeabi_atexit>
BleCharacteristic moistureSensorCharacteristic;
   d4d34:	483b      	ldr	r0, [pc, #236]	; (d4e24 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4d36:	f003 fa17 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d3a:	4a25      	ldr	r2, [pc, #148]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d3c:	4936      	ldr	r1, [pc, #216]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d3e:	4839      	ldr	r0, [pc, #228]	; (d4e24 <_GLOBAL__sub_I_SystemMode+0x208>)
   d4d40:	f005 ff89 	bl	dac56 <__aeabi_atexit>

//for sensor node 2
BleCharacteristic rainsteamSensorCharacteristic;
   d4d44:	4838      	ldr	r0, [pc, #224]	; (d4e28 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4d46:	f003 fa0f 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d4a:	4a21      	ldr	r2, [pc, #132]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d4c:	4932      	ldr	r1, [pc, #200]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d4e:	4836      	ldr	r0, [pc, #216]	; (d4e28 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d4d50:	f005 ff81 	bl	dac56 <__aeabi_atexit>
BleCharacteristic liquidSensorCharacteristic;
   d4d54:	4835      	ldr	r0, [pc, #212]	; (d4e2c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4d56:	f003 fa07 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d5a:	4a1d      	ldr	r2, [pc, #116]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d5c:	492e      	ldr	r1, [pc, #184]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d5e:	4833      	ldr	r0, [pc, #204]	; (d4e2c <_GLOBAL__sub_I_SystemMode+0x210>)
   d4d60:	f005 ff79 	bl	dac56 <__aeabi_atexit>
BleCharacteristic humanDetectorCharacteristic;
   d4d64:	4832      	ldr	r0, [pc, #200]	; (d4e30 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4d66:	f003 f9ff 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d6a:	4a19      	ldr	r2, [pc, #100]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d6c:	492a      	ldr	r1, [pc, #168]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d6e:	4830      	ldr	r0, [pc, #192]	; (d4e30 <_GLOBAL__sub_I_SystemMode+0x214>)
   d4d70:	f005 ff71 	bl	dac56 <__aeabi_atexit>
BleCharacteristic solenoidVoltageCharacteristic;
   d4d74:	482f      	ldr	r0, [pc, #188]	; (d4e34 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4d76:	f003 f9f7 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
   d4d7a:	4a15      	ldr	r2, [pc, #84]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4d7c:	4926      	ldr	r1, [pc, #152]	; (d4e18 <_GLOBAL__sub_I_SystemMode+0x1fc>)
   d4d7e:	482d      	ldr	r0, [pc, #180]	; (d4e34 <_GLOBAL__sub_I_SystemMode+0x218>)
   d4d80:	f005 ff69 	bl	dac56 <__aeabi_atexit>

// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d4d84:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d4d88:	1928      	adds	r0, r5, r4
   d4d8a:	f001 ffd1 	bl	d6d30 <_ZN8particle10BleAddressC1Ev>
   d4d8e:	f104 0008 	add.w	r0, r4, #8
   d4d92:	4428      	add	r0, r5
   d4d94:	f002 fa5b 	bl	d724e <_ZN8particle18BleAdvertisingDataC1Ev>
   d4d98:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4d9c:	4428      	add	r0, r5
   d4d9e:	3454      	adds	r4, #84	; 0x54
   d4da0:	f002 fa55 	bl	d724e <_ZN8particle18BleAdvertisingDataC1Ev>
   d4da4:	42b4      	cmp	r4, r6
   d4da6:	d1ef      	bne.n	d4d88 <_GLOBAL__sub_I_SystemMode+0x16c>

//MQTT client used to publish MQTT messages
MQTT5 client;
   d4da8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4dac:	4822      	ldr	r0, [pc, #136]	; (d4e38 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4dae:	f000 f8a7 	bl	d4f00 <_ZN5MQTT5C1Et>
   d4db2:	4a07      	ldr	r2, [pc, #28]	; (d4dd0 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d4db4:	4921      	ldr	r1, [pc, #132]	; (d4e3c <_GLOBAL__sub_I_SystemMode+0x220>)
   d4db6:	4820      	ldr	r0, [pc, #128]	; (d4e38 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d4db8:	f005 ff4d 	bl	dac56 <__aeabi_atexit>
   d4dbc:	f001 faf6 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
const int PUBLISH_DELAY = 15*60*1000;//15 minute publish delay
unsigned long lastPublishTime = millis();
   d4dc0:	4b1f      	ldr	r3, [pc, #124]	; (d4e40 <_GLOBAL__sub_I_SystemMode+0x224>)
   d4dc2:	6018      	str	r0, [r3, #0]
        Log.info("Sensor 2 - Human detected!");
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
   d4dc4:	b00d      	add	sp, #52	; 0x34
   d4dc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4dc8:	2003d978 	.word	0x2003d978
   d4dcc:	2003d8e4 	.word	0x2003d8e4
   d4dd0:	2003d8c4 	.word	0x2003d8c4
   d4dd4:	000d413d 	.word	0x000d413d
   d4dd8:	2003e36c 	.word	0x2003e36c
   d4ddc:	000db270 	.word	0x000db270
   d4de0:	000dc474 	.word	0x000dc474
   d4de4:	000db288 	.word	0x000db288
   d4de8:	000d415d 	.word	0x000d415d
   d4dec:	2003e3ac 	.word	0x2003e3ac
   d4df0:	000d414d 	.word	0x000d414d
   d4df4:	2003e398 	.word	0x2003e398
   d4df8:	2003d97c 	.word	0x2003d97c
   d4dfc:	000d77dd 	.word	0x000d77dd
   d4e00:	2003e3a0 	.word	0x2003e3a0
   d4e04:	000db86a 	.word	0x000db86a
   d4e08:	2003d944 	.word	0x2003d944
   d4e0c:	000db88f 	.word	0x000db88f
   d4e10:	2003d8c8 	.word	0x2003d8c8
   d4e14:	2003d968 	.word	0x2003d968
   d4e18:	000d77cf 	.word	0x000d77cf
   d4e1c:	2003e390 	.word	0x2003e390
   d4e20:	2003d8dc 	.word	0x2003d8dc
   d4e24:	2003d970 	.word	0x2003d970
   d4e28:	2003e364 	.word	0x2003e364
   d4e2c:	2003e354 	.word	0x2003e354
   d4e30:	2003e35c 	.word	0x2003e35c
   d4e34:	2003d958 	.word	0x2003d958
   d4e38:	2003d8f0 	.word	0x2003d8f0
   d4e3c:	000d632d 	.word	0x000d632d
   d4e40:	2003d964 	.word	0x2003d964

000d4e44 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4e44:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4e46:	6984      	ldr	r4, [r0, #24]
   d4e48:	4b0a      	ldr	r3, [pc, #40]	; (d4e74 <_ZN9TCPClientD1Ev+0x30>)
   d4e4a:	6003      	str	r3, [r0, #0]
   d4e4c:	4605      	mov	r5, r0
   d4e4e:	b17c      	cbz	r4, d4e70 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4e50:	6863      	ldr	r3, [r4, #4]
   d4e52:	3b01      	subs	r3, #1
   d4e54:	6063      	str	r3, [r4, #4]
   d4e56:	b95b      	cbnz	r3, d4e70 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d4e58:	6823      	ldr	r3, [r4, #0]
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	689b      	ldr	r3, [r3, #8]
   d4e5e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4e60:	68a3      	ldr	r3, [r4, #8]
   d4e62:	3b01      	subs	r3, #1
   d4e64:	60a3      	str	r3, [r4, #8]
   d4e66:	b91b      	cbnz	r3, d4e70 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d4e68:	6823      	ldr	r3, [r4, #0]
   d4e6a:	4620      	mov	r0, r4
   d4e6c:	68db      	ldr	r3, [r3, #12]
   d4e6e:	4798      	blx	r3
   d4e70:	4628      	mov	r0, r5
   d4e72:	bd38      	pop	{r3, r4, r5, pc}
   d4e74:	000dc5c8 	.word	0x000dc5c8

000d4e78 <_ZN9TCPClientD0Ev>:
   d4e78:	b510      	push	{r4, lr}
   d4e7a:	4604      	mov	r4, r0
   d4e7c:	f7ff ffe2 	bl	d4e44 <_ZN9TCPClientD1Ev>
   d4e80:	4620      	mov	r0, r4
   d4e82:	211c      	movs	r1, #28
   d4e84:	f005 fef4 	bl	dac70 <_ZdlPvj>
   d4e88:	4620      	mov	r0, r4
   d4e8a:	bd10      	pop	{r4, pc}

000d4e8c <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d4e8c:	f001 ba6e 	b.w	d636c <HAL_Pin_Map>

000d4e90 <_GLOBAL__sub_I__ZN13LiquidCrystalC2Ehhhhhhhhhhh>:
   d4e90:	f001 ba6c 	b.w	d636c <HAL_Pin_Map>

000d4e94 <_ZN5MQTT510connectingEv.part.0>:
    maxPacketSize = maxp;
    socket = new TCPClient();
    buffer = new uint8_t[maxPacketSize];
}

bool MQTT5::connected() {
   d4e94:	b508      	push	{r3, lr}
    return !connecting() && socket->connected();
   d4e96:	6840      	ldr	r0, [r0, #4]
   d4e98:	6803      	ldr	r3, [r0, #0]
   d4e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e9c:	4798      	blx	r3
}
   d4e9e:	3000      	adds	r0, #0
   d4ea0:	bf18      	it	ne
   d4ea2:	2001      	movne	r0, #1
   d4ea4:	bd08      	pop	{r3, pc}

000d4ea6 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>:
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4ea6:	b510      	push	{r4, lr}
   d4ea8:	b08a      	sub	sp, #40	; 0x28
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4eaa:	e88d 000c 	stmia.w	sp, {r2, r3}
    va_start(args, fmt);
    log(level, fmt, args);
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
   d4eae:	460c      	mov	r4, r1
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4eb0:	2120      	movs	r1, #32
   d4eb2:	9102      	str	r1, [sp, #8]
    attr.flags = 0;
   d4eb4:	2100      	movs	r1, #0
   d4eb6:	9103      	str	r1, [sp, #12]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4eb8:	460b      	mov	r3, r1
   d4eba:	aa02      	add	r2, sp, #8
   d4ebc:	6801      	ldr	r1, [r0, #0]
   d4ebe:	4620      	mov	r0, r4
   d4ec0:	f001 fc3e 	bl	d6740 <log_message_v>
}
   d4ec4:	b00a      	add	sp, #40	; 0x28
   d4ec6:	bd10      	pop	{r4, pc}

000d4ec8 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4ec8:	b40e      	push	{r1, r2, r3}
   d4eca:	b503      	push	{r0, r1, lr}
   d4ecc:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
   d4ece:	2101      	movs	r1, #1
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4ed0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d4ed4:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_TRACE, fmt, args);
   d4ed6:	f7ff ffe6 	bl	d4ea6 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d4eda:	b002      	add	sp, #8
   d4edc:	f85d eb04 	ldr.w	lr, [sp], #4
   d4ee0:	b003      	add	sp, #12
   d4ee2:	4770      	bx	lr

000d4ee4 <_ZNK5spark6Logger4warnEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d4ee4:	b40e      	push	{r1, r2, r3}
   d4ee6:	b503      	push	{r0, r1, lr}
   d4ee8:	ab03      	add	r3, sp, #12
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_WARN, fmt, args);
   d4eea:	2128      	movs	r1, #40	; 0x28
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}

inline void spark::Logger::warn(const char *fmt, ...) const {
   d4eec:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
   d4ef0:	9301      	str	r3, [sp, #4]
    log(LOG_LEVEL_WARN, fmt, args);
   d4ef2:	f7ff ffd8 	bl	d4ea6 <_ZNK5spark6Logger3logE8LogLevelPKcSt9__va_list>
    va_end(args);
}
   d4ef6:	b002      	add	sp, #8
   d4ef8:	f85d eb04 	ldr.w	lr, [sp], #4
   d4efc:	b003      	add	sp, #12
   d4efe:	4770      	bx	lr

000d4f00 <_ZN5MQTT5C1Et>:
/* MQTT5 library by Thomas Peroutka <thomas.peroutka@gmail.com>
 */

#include "MQTT5.h"

MQTT5::MQTT5(uint16_t maxp): logger("app.MQTT") {
   d4f00:	b538      	push	{r3, r4, r5, lr}
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f02:	4b0c      	ldr	r3, [pc, #48]	; (d4f34 <_ZN5MQTT5C1Et+0x34>)
   d4f04:	6003      	str	r3, [r0, #0]
   d4f06:	220a      	movs	r2, #10
   d4f08:	2300      	movs	r3, #0
   d4f0a:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
   d4f0e:	f880 202e 	strb.w	r2, [r0, #46]	; 0x2e
   d4f12:	6303      	str	r3, [r0, #48]	; 0x30
    maxPacketSize = maxp;
   d4f14:	8581      	strh	r1, [r0, #44]	; 0x2c
/* MQTT5 library by Thomas Peroutka <thomas.peroutka@gmail.com>
 */

#include "MQTT5.h"

MQTT5::MQTT5(uint16_t maxp): logger("app.MQTT") {
   d4f16:	4604      	mov	r4, r0
    maxPacketSize = maxp;
    socket = new TCPClient();
   d4f18:	201c      	movs	r0, #28
   d4f1a:	f7ff f8bc 	bl	d4096 <_Znwj>
   d4f1e:	4605      	mov	r5, r0
   d4f20:	b108      	cbz	r0, d4f26 <_ZN5MQTT5C1Et+0x26>
   d4f22:	f005 fbd3 	bl	da6cc <_ZN9TCPClientC1Ev>
   d4f26:	6065      	str	r5, [r4, #4]
    buffer = new uint8_t[maxPacketSize];
   d4f28:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d4f2a:	f7ff f8b6 	bl	d409a <_Znaj>
   d4f2e:	60a0      	str	r0, [r4, #8]
}
   d4f30:	4620      	mov	r0, r4
   d4f32:	bd38      	pop	{r3, r4, r5, pc}
   d4f34:	000db8e8 	.word	0x000db8e8

000d4f38 <_ZN5MQTT510connectingEv>:
bool MQTT5::connected() {
    return !connecting() && socket->connected();
}

bool MQTT5::connecting() {
    return isConnecting && socket->connected();
   d4f38:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   d4f3c:	b10b      	cbz	r3, d4f42 <_ZN5MQTT510connectingEv+0xa>
   d4f3e:	f7ff bfa9 	b.w	d4e94 <_ZN5MQTT510connectingEv.part.0>
}
   d4f42:	4618      	mov	r0, r3
   d4f44:	4770      	bx	lr

000d4f46 <_ZN5MQTT59connectedEv>:
    maxPacketSize = maxp;
    socket = new TCPClient();
    buffer = new uint8_t[maxPacketSize];
}

bool MQTT5::connected() {
   d4f46:	b510      	push	{r4, lr}
   d4f48:	4604      	mov	r4, r0
    return !connecting() && socket->connected();
   d4f4a:	f7ff fff5 	bl	d4f38 <_ZN5MQTT510connectingEv>
   d4f4e:	b920      	cbnz	r0, d4f5a <_ZN5MQTT59connectedEv+0x14>
   d4f50:	4620      	mov	r0, r4
}
   d4f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4f56:	f7ff bf9d 	b.w	d4e94 <_ZN5MQTT510connectingEv.part.0>
   d4f5a:	2000      	movs	r0, #0
   d4f5c:	bd10      	pop	{r4, pc}

000d4f5e <_ZN5MQTT520topicAliasRegisteredEt>:
    registeredTopicAlias[registeredTopicAliasLen] = alias;
    registeredTopicAliasLen++;
    return true;
}

bool MQTT5::topicAliasRegistered(uint16_t alias) {
   d4f5e:	b510      	push	{r4, lr}
    if (registeredTopicAliasLen <= 0 || !registeredTopicAlias)
   d4f60:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
   d4f64:	b154      	cbz	r4, d4f7c <_ZN5MQTT520topicAliasRegisteredEt+0x1e>
   d4f66:	6b03      	ldr	r3, [r0, #48]	; 0x30
   d4f68:	b143      	cbz	r3, d4f7c <_ZN5MQTT520topicAliasRegisteredEt+0x1e>
   d4f6a:	2200      	movs	r2, #0
        return false;

    for (int i = 0; i < registeredTopicAliasLen; i++) {
   d4f6c:	42a2      	cmp	r2, r4
   d4f6e:	da05      	bge.n	d4f7c <_ZN5MQTT520topicAliasRegisteredEt+0x1e>
        if (registeredTopicAlias[i] == alias) 
   d4f70:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
   d4f74:	4288      	cmp	r0, r1
   d4f76:	d003      	beq.n	d4f80 <_ZN5MQTT520topicAliasRegisteredEt+0x22>

bool MQTT5::topicAliasRegistered(uint16_t alias) {
    if (registeredTopicAliasLen <= 0 || !registeredTopicAlias)
        return false;

    for (int i = 0; i < registeredTopicAliasLen; i++) {
   d4f78:	3201      	adds	r2, #1
   d4f7a:	e7f7      	b.n	d4f6c <_ZN5MQTT520topicAliasRegisteredEt+0xe>
    return true;
}

bool MQTT5::topicAliasRegistered(uint16_t alias) {
    if (registeredTopicAliasLen <= 0 || !registeredTopicAlias)
        return false;
   d4f7c:	2000      	movs	r0, #0
   d4f7e:	bd10      	pop	{r4, pc}

    for (int i = 0; i < registeredTopicAliasLen; i++) {
        if (registeredTopicAlias[i] == alias) 
            return true;
   d4f80:	2001      	movs	r0, #1
    }
    return false;
}
   d4f82:	bd10      	pop	{r4, pc}

000d4f84 <_ZN5MQTT518topicAliasRegisterEt>:
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
    return writeToSocket(index);
}

bool MQTT5::topicAliasRegister(uint16_t alias) {
   d4f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (registeredTopicAliasLen >= maxTopicAlias || !registeredTopicAlias)
   d4f86:	f890 6034 	ldrb.w	r6, [r0, #52]	; 0x34
   d4f8a:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
   d4f8e:	42b3      	cmp	r3, r6
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
    return writeToSocket(index);
}

bool MQTT5::topicAliasRegister(uint16_t alias) {
   d4f90:	4604      	mov	r4, r0
    if (registeredTopicAliasLen >= maxTopicAlias || !registeredTopicAlias)
   d4f92:	d90d      	bls.n	d4fb0 <_ZN5MQTT518topicAliasRegisterEt+0x2c>
   d4f94:	6b05      	ldr	r5, [r0, #48]	; 0x30
   d4f96:	b16d      	cbz	r5, d4fb4 <_ZN5MQTT518topicAliasRegisterEt+0x30>
        return false;
    if (topicAliasRegistered(alias))
   d4f98:	f7ff ffe1 	bl	d4f5e <_ZN5MQTT520topicAliasRegisteredEt>
   d4f9c:	b958      	cbnz	r0, d4fb6 <_ZN5MQTT518topicAliasRegisterEt+0x32>
        return true;
    
    registeredTopicAlias[registeredTopicAliasLen] = alias;
   d4f9e:	f825 1016 	strh.w	r1, [r5, r6, lsl #1]
    registeredTopicAliasLen++;
   d4fa2:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   d4fa6:	3301      	adds	r3, #1
   d4fa8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return true;
   d4fac:	2001      	movs	r0, #1
   d4fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return writeToSocket(index);
}

bool MQTT5::topicAliasRegister(uint16_t alias) {
    if (registeredTopicAliasLen >= maxTopicAlias || !registeredTopicAlias)
        return false;
   d4fb0:	2000      	movs	r0, #0
   d4fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4fb4:	4628      	mov	r0, r5
        return true;
    
    registeredTopicAlias[registeredTopicAliasLen] = alias;
    registeredTopicAliasLen++;
    return true;
}
   d4fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fb8 <_ZN5MQTT523readVariableByteIntegerEPtS0_>:
    logger.info("Sending disconnect with reason %d", (uint8_t) reason);
    return writeToSocket(index);
}

bool MQTT5::readVariableByteInteger(uint16_t *position, uint16_t *value) {
    *value = 0;
   d4fb8:	2300      	movs	r3, #0

    logger.info("Sending disconnect with reason %d", (uint8_t) reason);
    return writeToSocket(index);
}

bool MQTT5::readVariableByteInteger(uint16_t *position, uint16_t *value) {
   d4fba:	b570      	push	{r4, r5, r6, lr}
    *value = 0;
   d4fbc:	8013      	strh	r3, [r2, #0]
   d4fbe:	2405      	movs	r4, #5
    uint32_t multiplier = 1;
   d4fc0:	2501      	movs	r5, #1
    do {
        if (multiplier != 1)
            (*position)++;
        *value += (buffer[*position] & 127) * multiplier;    
   d4fc2:	6886      	ldr	r6, [r0, #8]
   d4fc4:	880b      	ldrh	r3, [r1, #0]
   d4fc6:	5cf3      	ldrb	r3, [r6, r3]
   d4fc8:	8816      	ldrh	r6, [r2, #0]
   d4fca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d4fce:	fb13 f305 	smulbb	r3, r3, r5
   d4fd2:	4433      	add	r3, r6
        if (multiplier > 128*128*128) {
   d4fd4:	3c01      	subs	r4, #1
    *value = 0;
    uint32_t multiplier = 1;
    do {
        if (multiplier != 1)
            (*position)++;
        *value += (buffer[*position] & 127) * multiplier;    
   d4fd6:	8013      	strh	r3, [r2, #0]
        if (multiplier > 128*128*128) {
   d4fd8:	d107      	bne.n	d4fea <_ZN5MQTT523readVariableByteIntegerEPtS0_+0x32>
            (*position)++;
   d4fda:	880b      	ldrh	r3, [r1, #0]
   d4fdc:	3301      	adds	r3, #1
   d4fde:	800b      	strh	r3, [r1, #0]
            logger.warn("Malformed Variable Byte Integer");
   d4fe0:	4907      	ldr	r1, [pc, #28]	; (d5000 <_ZN5MQTT523readVariableByteIntegerEPtS0_+0x48>)
   d4fe2:	f7ff ff7f 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
            return false;
   d4fe6:	4620      	mov	r0, r4
   d4fe8:	bd70      	pop	{r4, r5, r6, pc}
        }
        multiplier *= 128;
    } while ((buffer[*position] & 128) != 0);
   d4fea:	880b      	ldrh	r3, [r1, #0]
   d4fec:	6886      	ldr	r6, [r0, #8]
   d4fee:	56f6      	ldrsb	r6, [r6, r3]
   d4ff0:	3301      	adds	r3, #1
   d4ff2:	2e00      	cmp	r6, #0
        if (multiplier > 128*128*128) {
            (*position)++;
            logger.warn("Malformed Variable Byte Integer");
            return false;
        }
        multiplier *= 128;
   d4ff4:	ea4f 15c5 	mov.w	r5, r5, lsl #7
    } while ((buffer[*position] & 128) != 0);
    (*position)++;
   d4ff8:	800b      	strh	r3, [r1, #0]
            (*position)++;
            logger.warn("Malformed Variable Byte Integer");
            return false;
        }
        multiplier *= 128;
    } while ((buffer[*position] & 128) != 0);
   d4ffa:	dbe2      	blt.n	d4fc2 <_ZN5MQTT523readVariableByteIntegerEPtS0_+0xa>
    (*position)++;
    return true;
   d4ffc:	2001      	movs	r0, #1
}
   d4ffe:	bd70      	pop	{r4, r5, r6, pc}
   d5000:	000db8f1 	.word	0x000db8f1

000d5004 <_ZN5MQTT514readUTF8StringEPtPct>:

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
}

void MQTT5::readUTF8String(uint16_t *position, char *arr, uint16_t len) {
   d5004:	b570      	push	{r4, r5, r6, lr}
   d5006:	461d      	mov	r5, r3
   d5008:	460c      	mov	r4, r1
    memcpy(arr, buffer + (*position), len);
   d500a:	880b      	ldrh	r3, [r1, #0]
   d500c:	6881      	ldr	r1, [r0, #8]

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
}

void MQTT5::readUTF8String(uint16_t *position, char *arr, uint16_t len) {
   d500e:	4616      	mov	r6, r2
    memcpy(arr, buffer + (*position), len);
   d5010:	4419      	add	r1, r3
   d5012:	462a      	mov	r2, r5
   d5014:	4630      	mov	r0, r6
   d5016:	f005 ffa8 	bl	daf6a <memcpy>
    arr[len] = 0;
   d501a:	2300      	movs	r3, #0
   d501c:	5573      	strb	r3, [r6, r5]
    *position += len;
   d501e:	8822      	ldrh	r2, [r4, #0]
   d5020:	18ab      	adds	r3, r5, r2
   d5022:	8023      	strh	r3, [r4, #0]
   d5024:	bd70      	pop	{r4, r5, r6, pc}

000d5026 <_ZN5MQTT57readIntEPt>:
}

uint16_t MQTT5::readInt(uint16_t *position) {
    uint16_t result = buffer[*position] << 8 | buffer[*position + 1];
   d5026:	880b      	ldrh	r3, [r1, #0]
   d5028:	6882      	ldr	r2, [r0, #8]
   d502a:	5cd0      	ldrb	r0, [r2, r3]
   d502c:	441a      	add	r2, r3
    (*position) += 2;
   d502e:	3302      	adds	r3, #2
    arr[len] = 0;
    *position += len;
}

uint16_t MQTT5::readInt(uint16_t *position) {
    uint16_t result = buffer[*position] << 8 | buffer[*position + 1];
   d5030:	7852      	ldrb	r2, [r2, #1]
    (*position) += 2;
   d5032:	800b      	strh	r3, [r1, #0]
    return result;
}
   d5034:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   d5038:	4770      	bx	lr
	...

000d503c <_ZN5MQTT522processPacketPubAckRecEhttb>:
            logger.warn("Unknown publish property");
            break;
    }
}

void MQTT5::processPacketPubAckRec(uint8_t flags, uint16_t startIndex, uint16_t contentLength, bool isAck) {
   d503c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d503e:	b085      	sub	sp, #20
   d5040:	a904      	add	r1, sp, #16
   d5042:	461d      	mov	r5, r3
   d5044:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d5048:	4604      	mov	r4, r0
   d504a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    uint16_t packetId = readInt(&startIndex);
   d504e:	f7ff ffea 	bl	d5026 <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d5052:	2d02      	cmp	r5, #2
   d5054:	bf1f      	itttt	ne
   d5056:	f8bd 300e 	ldrhne.w	r3, [sp, #14]
   d505a:	68a2      	ldrne	r2, [r4, #8]
   d505c:	1c59      	addne	r1, r3, #1
   d505e:	f8ad 100e 	strhne.w	r1, [sp, #14]
   d5062:	bf18      	it	ne
   d5064:	5cd5      	ldrbne	r5, [r2, r3]
    logger.info("Received publish %s for packet %d and response %d", isAck ? "ack" : "rec", packetId, (uint8_t) reason);
   d5066:	490e      	ldr	r1, [pc, #56]	; (d50a0 <_ZN5MQTT522processPacketPubAckRecEhttb+0x64>)
   d5068:	4a0e      	ldr	r2, [pc, #56]	; (d50a4 <_ZN5MQTT522processPacketPubAckRecEhttb+0x68>)
    }
}

void MQTT5::processPacketPubAckRec(uint8_t flags, uint16_t startIndex, uint16_t contentLength, bool isAck) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d506a:	bf08      	it	eq
   d506c:	2500      	moveq	r5, #0
            break;
    }
}

void MQTT5::processPacketPubAckRec(uint8_t flags, uint16_t startIndex, uint16_t contentLength, bool isAck) {
    uint16_t packetId = readInt(&startIndex);
   d506e:	4606      	mov	r6, r0
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received publish %s for packet %d and response %d", isAck ? "ack" : "rec", packetId, (uint8_t) reason);
   d5070:	4603      	mov	r3, r0
   d5072:	2f00      	cmp	r7, #0
   d5074:	bf18      	it	ne
   d5076:	460a      	movne	r2, r1
   d5078:	9500      	str	r5, [sp, #0]
   d507a:	490b      	ldr	r1, [pc, #44]	; (d50a8 <_ZN5MQTT522processPacketPubAckRecEhttb+0x6c>)
   d507c:	4620      	mov	r0, r4
   d507e:	f7ff f891 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>

    if (reason != MQTT5_REASON_CODE::SUCCESS) {
   d5082:	b125      	cbz	r5, d508e <_ZN5MQTT522processPacketPubAckRecEhttb+0x52>
        if (callbackPublishFailed)
   d5084:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d5086:	b143      	cbz	r3, d509a <_ZN5MQTT522processPacketPubAckRecEhttb+0x5e>
            callbackPublishFailed(reason);
   d5088:	4628      	mov	r0, r5
   d508a:	4798      	blx	r3
   d508c:	e005      	b.n	d509a <_ZN5MQTT522processPacketPubAckRecEhttb+0x5e>
    } else if (callbackQOS) {
   d508e:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d5090:	b11b      	cbz	r3, d509a <_ZN5MQTT522processPacketPubAckRecEhttb+0x5e>
        callbackQOS(packetId, !isAck);
   d5092:	f087 0101 	eor.w	r1, r7, #1
   d5096:	4630      	mov	r0, r6
   d5098:	4798      	blx	r3
    }
}
   d509a:	b005      	add	sp, #20
   d509c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d509e:	bf00      	nop
   d50a0:	000db911 	.word	0x000db911
   d50a4:	000db915 	.word	0x000db915
   d50a8:	000db919 	.word	0x000db919

000d50ac <_ZN5MQTT520processPacketPubCompEhtt>:
    if (reason == MQTT5_REASON_CODE::SUCCESS) {
        pubComp(packetId);
    }
}

void MQTT5::processPacketPubComp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d50ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d50ae:	a902      	add	r1, sp, #8
   d50b0:	461d      	mov	r5, r3
   d50b2:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d50b6:	4604      	mov	r4, r0
    uint16_t packetId = readInt(&startIndex);
   d50b8:	f7ff ffb5 	bl	d5026 <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d50bc:	2d02      	cmp	r5, #2
   d50be:	bf1c      	itt	ne
   d50c0:	f8bd 3006 	ldrhne.w	r3, [sp, #6]
   d50c4:	68a1      	ldrne	r1, [r4, #8]
        pubComp(packetId);
    }
}

void MQTT5::processPacketPubComp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d50c6:	4602      	mov	r2, r0
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d50c8:	bf1e      	ittt	ne
   d50ca:	1c58      	addne	r0, r3, #1
   d50cc:	f8ad 0006 	strhne.w	r0, [sp, #6]
   d50d0:	5ccb      	ldrbne	r3, [r1, r3]
    logger.info("Received publish complete for packet %d and response %d", packetId, (uint8_t) reason);
   d50d2:	4904      	ldr	r1, [pc, #16]	; (d50e4 <_ZN5MQTT520processPacketPubCompEhtt+0x38>)
    }
}

void MQTT5::processPacketPubComp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d50d4:	bf08      	it	eq
   d50d6:	2300      	moveq	r3, #0
    logger.info("Received publish complete for packet %d and response %d", packetId, (uint8_t) reason);
   d50d8:	4620      	mov	r0, r4
   d50da:	f7ff f863 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
}
   d50de:	b003      	add	sp, #12
   d50e0:	bd30      	pop	{r4, r5, pc}
   d50e2:	bf00      	nop
   d50e4:	000db94b 	.word	0x000db94b

000d50e8 <_ZN5MQTT519processPacketSubAckEhtt>:

void MQTT5::processPacketSubAck(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d50e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d50ec:	a904      	add	r1, sp, #16
   d50ee:	4604      	mov	r4, r0
   d50f0:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d50f4:	461e      	mov	r6, r3
    uint16_t packetId = readInt(&startIndex);
   d50f6:	f7ff ff96 	bl	d5026 <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d50fa:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   d50fe:	68a3      	ldr	r3, [r4, #8]
   d5100:	1c51      	adds	r1, r2, #1
   d5102:	f8ad 100e 	strh.w	r1, [sp, #14]
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received publish complete for packet %d and response %d", packetId, (uint8_t) reason);
}

void MQTT5::processPacketSubAck(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d5106:	4680      	mov	r8, r0
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d5108:	5c98      	ldrb	r0, [r3, r2]
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
   d510a:	b910      	cbnz	r0, d5112 <_ZN5MQTT519processPacketSubAckEhtt+0x2a>
   d510c:	2501      	movs	r5, #1
        if (callbackSubscribeFailed)
            callbackSubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d510e:	3e02      	subs	r6, #2
   d5110:	e014      	b.n	d513c <_ZN5MQTT519processPacketSubAckEhtt+0x54>

void MQTT5::processPacketSubAck(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackSubscribeFailed)
   d5112:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d5114:	b1db      	cbz	r3, d514e <_ZN5MQTT519processPacketSubAckEhtt+0x66>
            callbackSubscribeFailed(reason);
   d5116:	4798      	blx	r3
   d5118:	e019      	b.n	d514e <_ZN5MQTT519processPacketSubAckEhtt+0x66>
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d511a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d511e:	68a2      	ldr	r2, [r4, #8]
   d5120:	1c59      	adds	r1, r3, #1
   d5122:	f8ad 100e 	strh.w	r1, [sp, #14]
   d5126:	5cd7      	ldrb	r7, [r2, r3]
            logger.info("Received subscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
   d5128:	9700      	str	r7, [sp, #0]
   d512a:	462b      	mov	r3, r5
   d512c:	4642      	mov	r2, r8
   d512e:	4909      	ldr	r1, [pc, #36]	; (d5154 <_ZN5MQTT519processPacketSubAckEhtt+0x6c>)
   d5130:	4620      	mov	r0, r4
   d5132:	f7ff f837 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
   d5136:	2f02      	cmp	r7, #2
   d5138:	d803      	bhi.n	d5142 <_ZN5MQTT519processPacketSubAckEhtt+0x5a>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackSubscribeFailed)
            callbackSubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d513a:	3501      	adds	r5, #1
   d513c:	42b5      	cmp	r5, r6
   d513e:	dbec      	blt.n	d511a <_ZN5MQTT519processPacketSubAckEhtt+0x32>
   d5140:	e005      	b.n	d514e <_ZN5MQTT519processPacketSubAckEhtt+0x66>
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
            logger.info("Received subscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_1 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_2)
                if (callbackSubscribeFailed)
   d5142:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   d5144:	2b00      	cmp	r3, #0
   d5146:	d0f8      	beq.n	d513a <_ZN5MQTT519processPacketSubAckEhtt+0x52>
                    callbackSubscribeFailed(reason);
   d5148:	4638      	mov	r0, r7
   d514a:	4798      	blx	r3
   d514c:	e7f5      	b.n	d513a <_ZN5MQTT519processPacketSubAckEhtt+0x52>
        }
    }
}
   d514e:	b004      	add	sp, #16
   d5150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5154:	000db983 	.word	0x000db983

000d5158 <_ZN5MQTT518processPacketUnsubEhtt>:

void MQTT5::processPacketUnsub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d5158:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d515c:	a904      	add	r1, sp, #16
   d515e:	4604      	mov	r4, r0
   d5160:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d5164:	461e      	mov	r6, r3
    uint16_t packetId = readInt(&startIndex);
   d5166:	f7ff ff5e 	bl	d5026 <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d516a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   d516e:	68a3      	ldr	r3, [r4, #8]
   d5170:	1c51      	adds	r1, r2, #1
   d5172:	f8ad 100e 	strh.w	r1, [sp, #14]
        }
    }
}

void MQTT5::processPacketUnsub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d5176:	4680      	mov	r8, r0
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d5178:	5c98      	ldrb	r0, [r3, r2]
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
   d517a:	b910      	cbnz	r0, d5182 <_ZN5MQTT518processPacketUnsubEhtt+0x2a>
   d517c:	2501      	movs	r5, #1
        if (callbackUnsubscribeFailed)
            callbackUnsubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d517e:	3e02      	subs	r6, #2
   d5180:	e014      	b.n	d51ac <_ZN5MQTT518processPacketUnsubEhtt+0x54>

void MQTT5::processPacketUnsub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackUnsubscribeFailed)
   d5182:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d5184:	b1db      	cbz	r3, d51be <_ZN5MQTT518processPacketUnsubEhtt+0x66>
            callbackUnsubscribeFailed(reason);
   d5186:	4798      	blx	r3
   d5188:	e019      	b.n	d51be <_ZN5MQTT518processPacketUnsubEhtt+0x66>
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
   d518a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d518e:	68a2      	ldr	r2, [r4, #8]
   d5190:	1c59      	adds	r1, r3, #1
   d5192:	f8ad 100e 	strh.w	r1, [sp, #14]
   d5196:	5cd7      	ldrb	r7, [r2, r3]
            logger.info("Received unsubscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
   d5198:	9700      	str	r7, [sp, #0]
   d519a:	462b      	mov	r3, r5
   d519c:	4642      	mov	r2, r8
   d519e:	4909      	ldr	r1, [pc, #36]	; (d51c4 <_ZN5MQTT518processPacketUnsubEhtt+0x6c>)
   d51a0:	4620      	mov	r0, r4
   d51a2:	f7fe ffff 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
   d51a6:	2f02      	cmp	r7, #2
   d51a8:	d803      	bhi.n	d51b2 <_ZN5MQTT518processPacketUnsubEhtt+0x5a>
    MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
    if (reason != MQTT5_REASON_CODE::SUCCESS) {
        if (callbackUnsubscribeFailed)
            callbackUnsubscribeFailed(reason);
    } else {
        for (int i = 1; i < contentLength - 2; i++) { // skip first packet 
   d51aa:	3501      	adds	r5, #1
   d51ac:	42b5      	cmp	r5, r6
   d51ae:	dbec      	blt.n	d518a <_ZN5MQTT518processPacketUnsubEhtt+0x32>
   d51b0:	e005      	b.n	d51be <_ZN5MQTT518processPacketUnsubEhtt+0x66>
            MQTT5_REASON_CODE reason = (MQTT5_REASON_CODE) buffer[startIndex++];
            logger.info("Received unsubscription ack for packet %d and subscription index %d and response %d", packetId, i, (uint8_t) reason);
            if (reason != MQTT5_REASON_CODE::GRANTED_QOS_0 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_1 &&
                reason != MQTT5_REASON_CODE::GRANTED_QOS_2)
                if (callbackUnsubscribeFailed)
   d51b2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d51b4:	2b00      	cmp	r3, #0
   d51b6:	d0f8      	beq.n	d51aa <_ZN5MQTT518processPacketUnsubEhtt+0x52>
                    callbackUnsubscribeFailed(reason);
   d51b8:	4638      	mov	r0, r7
   d51ba:	4798      	blx	r3
   d51bc:	e7f5      	b.n	d51aa <_ZN5MQTT518processPacketUnsubEhtt+0x52>
        }
    }
}
   d51be:	b004      	add	sp, #16
   d51c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d51c4:	000db9d5 	.word	0x000db9d5

000d51c8 <_ZN5MQTT58readLongEPt>:
    uint16_t result = buffer[*position] << 8 | buffer[*position + 1];
    (*position) += 2;
    return result;
}

uint32_t MQTT5::readLong(uint16_t *position) {
   d51c8:	b510      	push	{r4, lr}
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
   d51ca:	880c      	ldrh	r4, [r1, #0]
   d51cc:	6883      	ldr	r3, [r0, #8]
   d51ce:	5d18      	ldrb	r0, [r3, r4]
   d51d0:	4423      	add	r3, r4
    (*position) += 4;
   d51d2:	3404      	adds	r4, #4
    (*position) += 2;
    return result;
}

uint32_t MQTT5::readLong(uint16_t *position) {
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
   d51d4:	78da      	ldrb	r2, [r3, #3]
   d51d6:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
   d51da:	7858      	ldrb	r0, [r3, #1]
   d51dc:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   d51e0:	7898      	ldrb	r0, [r3, #2]
    (*position) += 4;
   d51e2:	800c      	strh	r4, [r1, #0]
    return result;
}
   d51e4:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
   d51e8:	bd10      	pop	{r4, pc}
	...

000d51ec <_ZN5MQTT530processPacketConnAckPropertiesEhPt>:
        if (callbackConnectFailed)
            callbackConnectFailed(reasonCode);
    }
}

void MQTT5::processPacketConnAckProperties(uint8_t identifier, uint16_t *index) {
   d51ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (identifier) {
   d51ee:	3911      	subs	r1, #17
        if (callbackConnectFailed)
            callbackConnectFailed(reasonCode);
    }
}

void MQTT5::processPacketConnAckProperties(uint8_t identifier, uint16_t *index) {
   d51f0:	af00      	add	r7, sp, #0
   d51f2:	4604      	mov	r4, r0
   d51f4:	4615      	mov	r5, r2
    switch (identifier) {
   d51f6:	2919      	cmp	r1, #25
   d51f8:	f200 80c5 	bhi.w	d5386 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x19a>
   d51fc:	e8df f001 	tbb	[pc, r1]
   d5200:	c37a300d 	.word	0xc37a300d
   d5204:	c3c3bea7 	.word	0xc3c3bea7
   d5208:	94c381c3 	.word	0x94c381c3
   d520c:	c350c3c3 	.word	0xc350c3c3
   d5210:	1cc34313 	.word	0x1cc34313
   d5214:	652a6323 	.word	0x652a6323
   d5218:	736c      	.short	0x736c
        case PROP_SESSION_EXPIRY_INTERVAL:
            logger.trace("Session Expiry Interval: %ld", readLong(index));
   d521a:	4611      	mov	r1, r2
   d521c:	f7ff ffd4 	bl	d51c8 <_ZN5MQTT58readLongEPt>
   d5220:	495b      	ldr	r1, [pc, #364]	; (d5390 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a4>)
   d5222:	4602      	mov	r2, r0
   d5224:	e004      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_RECEIVE_MAXIMUM:
            logger.trace("Receive Maximum: %d", readInt(index));
   d5226:	4611      	mov	r1, r2
   d5228:	f7ff fefd 	bl	d5026 <_ZN5MQTT57readIntEPt>
   d522c:	4959      	ldr	r1, [pc, #356]	; (d5394 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a8>)
   d522e:	4602      	mov	r2, r0
   d5230:	4620      	mov	r0, r4
   d5232:	f7ff fe49 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
            break;
   d5236:	e0a9      	b.n	d538c <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a0>
        case PROP_MAXIMUM_QOS:
            logger.trace("Maximum QoS: %d", buffer[(*index)++]);
   d5238:	882b      	ldrh	r3, [r5, #0]
   d523a:	6882      	ldr	r2, [r0, #8]
   d523c:	1c59      	adds	r1, r3, #1
   d523e:	8029      	strh	r1, [r5, #0]
   d5240:	5cd2      	ldrb	r2, [r2, r3]
   d5242:	4955      	ldr	r1, [pc, #340]	; (d5398 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1ac>)
   d5244:	e7f4      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_RETAIN_AVAILABLE:
            logger.trace("Retain Available: %d", buffer[(*index)++]);
   d5246:	882b      	ldrh	r3, [r5, #0]
   d5248:	6882      	ldr	r2, [r0, #8]
   d524a:	1c59      	adds	r1, r3, #1
   d524c:	8029      	strh	r1, [r5, #0]
   d524e:	5cd2      	ldrb	r2, [r2, r3]
   d5250:	4952      	ldr	r1, [pc, #328]	; (d539c <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1b0>)
   d5252:	e7ed      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_MAXIMUM_PACKET_SIZE:
            logger.trace("Maximum Packet Size: %ld", readLong(index));
   d5254:	4611      	mov	r1, r2
   d5256:	f7ff ffb7 	bl	d51c8 <_ZN5MQTT58readLongEPt>
   d525a:	4951      	ldr	r1, [pc, #324]	; (d53a0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1b4>)
   d525c:	4602      	mov	r2, r0
   d525e:	e7e7      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5260:	4611      	mov	r1, r2
   d5262:	f7ff fee0 	bl	d5026 <_ZN5MQTT57readIntEPt>
        case PROP_MAXIMUM_PACKET_SIZE:
            logger.trace("Maximum Packet Size: %ld", readLong(index));
            break;
        case PROP_ASSIGNED_CLIENT_IDENTIFIER: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5266:	f100 0208 	add.w	r2, r0, #8
   d526a:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Assigned Client Identifier: %s", str);
            break;
   d526e:	466e      	mov	r6, sp
        case PROP_MAXIMUM_PACKET_SIZE:
            logger.trace("Maximum Packet Size: %ld", readLong(index));
            break;
        case PROP_ASSIGNED_CLIENT_IDENTIFIER: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5270:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5274:	4603      	mov	r3, r0
            logger.trace("Maximum Packet Size: %ld", readLong(index));
            break;
        case PROP_ASSIGNED_CLIENT_IDENTIFIER: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d5276:	466a      	mov	r2, sp
   d5278:	4629      	mov	r1, r5
   d527a:	4620      	mov	r0, r4
   d527c:	f7ff fec2 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Assigned Client Identifier: %s", str);
   d5280:	466a      	mov	r2, sp
   d5282:	4948      	ldr	r1, [pc, #288]	; (d53a4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1b8>)
   d5284:	e075      	b.n	d5372 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
            break;
        }
        case PROP_TOPIC_ALIAS_MAXIMUM:
            maxTopicAlias = min(maxTopicAlias , readInt(index));
   d5286:	4611      	mov	r1, r2
   d5288:	f890 602e 	ldrb.w	r6, [r0, #46]	; 0x2e
   d528c:	f7ff fecb 	bl	d5026 <_ZN5MQTT57readIntEPt>
max (T a, U b) { return ((a)>(b)?(a):(b)); }

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
min (T a, U b) { return static_cast<typename std::common_type<T, U>::type>((a)<(b)?(a):(b)); }
   d5290:	4286      	cmp	r6, r0
   d5292:	4632      	mov	r2, r6
   d5294:	bf28      	it	cs
   d5296:	4602      	movcs	r2, r0
   d5298:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
   d529c:	4942      	ldr	r1, [pc, #264]	; (d53a8 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1bc>)
   d529e:	e7c7      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d52a0:	4611      	mov	r1, r2
   d52a2:	f7ff fec0 	bl	d5026 <_ZN5MQTT57readIntEPt>
            maxTopicAlias = min(maxTopicAlias , readInt(index));
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
            break;
        case PROP_REASON_STRING: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d52a6:	f100 0208 	add.w	r2, r0, #8
   d52aa:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Reason String: %s", str);
            break;
   d52ae:	466e      	mov	r6, sp
            maxTopicAlias = min(maxTopicAlias , readInt(index));
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
            break;
        case PROP_REASON_STRING: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d52b0:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d52b4:	4603      	mov	r3, r0
            logger.trace("Topic Alias Maximum: %d", maxTopicAlias);
            break;
        case PROP_REASON_STRING: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d52b6:	466a      	mov	r2, sp
   d52b8:	4629      	mov	r1, r5
   d52ba:	4620      	mov	r0, r4
   d52bc:	f7ff fea2 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Reason String: %s", str);
   d52c0:	466a      	mov	r2, sp
   d52c2:	493a      	ldr	r1, [pc, #232]	; (d53ac <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1c0>)
   d52c4:	e055      	b.n	d5372 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
            break;
        }
        case PROP_USER_PROPERTY:
            logger.trace("User Property");
   d52c6:	493a      	ldr	r1, [pc, #232]	; (d53b0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1c4>)
   d52c8:	e059      	b.n	d537e <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x192>
            break;
        case PROP_WILDCARD_SUBSCRIPTION_AVAILABLE:
            logger.trace("Wildcard Subscription Available: %d", buffer[(*index)++]);
   d52ca:	882b      	ldrh	r3, [r5, #0]
   d52cc:	6882      	ldr	r2, [r0, #8]
   d52ce:	1c59      	adds	r1, r3, #1
   d52d0:	8029      	strh	r1, [r5, #0]
   d52d2:	5cd2      	ldrb	r2, [r2, r3]
   d52d4:	4937      	ldr	r1, [pc, #220]	; (d53b4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1c8>)
   d52d6:	e7ab      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE:
            logger.trace("Subscription Identifiers Available: %d", buffer[(*index)++]);
   d52d8:	882b      	ldrh	r3, [r5, #0]
   d52da:	6882      	ldr	r2, [r0, #8]
   d52dc:	1c59      	adds	r1, r3, #1
   d52de:	8029      	strh	r1, [r5, #0]
   d52e0:	5cd2      	ldrb	r2, [r2, r3]
   d52e2:	4935      	ldr	r1, [pc, #212]	; (d53b8 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1cc>)
   d52e4:	e7a4      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_SHARED_SUBSCRIPTION_AVAILABLE:
            logger.trace("Shared Subscription Available: %d", buffer[(*index)++]);
   d52e6:	882b      	ldrh	r3, [r5, #0]
   d52e8:	6882      	ldr	r2, [r0, #8]
   d52ea:	1c59      	adds	r1, r3, #1
   d52ec:	8029      	strh	r1, [r5, #0]
   d52ee:	5cd2      	ldrb	r2, [r2, r3]
   d52f0:	4932      	ldr	r1, [pc, #200]	; (d53bc <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1d0>)
   d52f2:	e79d      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
            break;
        case PROP_SERVER_KEEP_ALIVE:
            keepAlive = readInt(index);
   d52f4:	4611      	mov	r1, r2
   d52f6:	f7ff fe96 	bl	d5026 <_ZN5MQTT57readIntEPt>
            logger.trace("Server Keep Alive: %d", keepAlive);
   d52fa:	4931      	ldr	r1, [pc, #196]	; (d53c0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1d4>)
            break;
        case PROP_SHARED_SUBSCRIPTION_AVAILABLE:
            logger.trace("Shared Subscription Available: %d", buffer[(*index)++]);
            break;
        case PROP_SERVER_KEEP_ALIVE:
            keepAlive = readInt(index);
   d52fc:	84e0      	strh	r0, [r4, #38]	; 0x26
   d52fe:	4602      	mov	r2, r0
   d5300:	e796      	b.n	d5230 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x44>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5302:	4611      	mov	r1, r2
   d5304:	f7ff fe8f 	bl	d5026 <_ZN5MQTT57readIntEPt>
            keepAlive = readInt(index);
            logger.trace("Server Keep Alive: %d", keepAlive);
            break;
        case PROP_RESPONSE_INFORMATION: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5308:	f100 0208 	add.w	r2, r0, #8
   d530c:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Response Information: %s", str);
            break;
   d5310:	466e      	mov	r6, sp
            keepAlive = readInt(index);
            logger.trace("Server Keep Alive: %d", keepAlive);
            break;
        case PROP_RESPONSE_INFORMATION: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5312:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5316:	4603      	mov	r3, r0
            logger.trace("Server Keep Alive: %d", keepAlive);
            break;
        case PROP_RESPONSE_INFORMATION: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d5318:	466a      	mov	r2, sp
   d531a:	4629      	mov	r1, r5
   d531c:	4620      	mov	r0, r4
   d531e:	f7ff fe71 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Response Information: %s", str);
   d5322:	466a      	mov	r2, sp
   d5324:	4927      	ldr	r1, [pc, #156]	; (d53c4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1d8>)
   d5326:	e024      	b.n	d5372 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5328:	4611      	mov	r1, r2
   d532a:	f7ff fe7c 	bl	d5026 <_ZN5MQTT57readIntEPt>
            logger.trace("Response Information: %s", str);
            break;
        }
        case PROP_SERVER_REFERENCE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d532e:	f100 0208 	add.w	r2, r0, #8
   d5332:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Server Reference: %s", str);
            break;
   d5336:	466e      	mov	r6, sp
            logger.trace("Response Information: %s", str);
            break;
        }
        case PROP_SERVER_REFERENCE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5338:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d533c:	4603      	mov	r3, r0
            break;
        }
        case PROP_SERVER_REFERENCE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d533e:	466a      	mov	r2, sp
   d5340:	4629      	mov	r1, r5
   d5342:	4620      	mov	r0, r4
   d5344:	f7ff fe5e 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Server Reference: %s", str);
   d5348:	466a      	mov	r2, sp
   d534a:	491f      	ldr	r1, [pc, #124]	; (d53c8 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1dc>)
   d534c:	e011      	b.n	d5372 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x186>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d534e:	4611      	mov	r1, r2
   d5350:	f7ff fe69 	bl	d5026 <_ZN5MQTT57readIntEPt>
            logger.trace("Server Reference: %s", str);
            break;
        }
        case PROP_AUTHENTICATION_METHOD: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5354:	f100 0208 	add.w	r2, r0, #8
   d5358:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Authentication Method: %s", str);
            break;
   d535c:	466e      	mov	r6, sp
            logger.trace("Server Reference: %s", str);
            break;
        }
        case PROP_AUTHENTICATION_METHOD: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d535e:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5362:	4603      	mov	r3, r0
            break;
        }
        case PROP_AUTHENTICATION_METHOD: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d5364:	466a      	mov	r2, sp
   d5366:	4629      	mov	r1, r5
   d5368:	4620      	mov	r0, r4
   d536a:	f7ff fe4b 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Authentication Method: %s", str);
   d536e:	4917      	ldr	r1, [pc, #92]	; (d53cc <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1e0>)
   d5370:	466a      	mov	r2, sp
   d5372:	4620      	mov	r0, r4
   d5374:	f7ff fda8 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
   d5378:	46b5      	mov	sp, r6
   d537a:	e007      	b.n	d538c <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a0>
            break;
        }
        case PROP_AUTHENTICATION_DATA:
            logger.trace("Authentication Data");
   d537c:	4914      	ldr	r1, [pc, #80]	; (d53d0 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1e4>)
   d537e:	4620      	mov	r0, r4
   d5380:	f7ff fda2 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
            break;
   d5384:	e002      	b.n	d538c <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1a0>
        default:
            logger.warn("Unknown connect property");
   d5386:	4913      	ldr	r1, [pc, #76]	; (d53d4 <_ZN5MQTT530processPacketConnAckPropertiesEhPt+0x1e8>)
   d5388:	f7ff fdac 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
            break;
    }
}
   d538c:	46bd      	mov	sp, r7
   d538e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5390:	000dba29 	.word	0x000dba29
   d5394:	000dba46 	.word	0x000dba46
   d5398:	000dba5a 	.word	0x000dba5a
   d539c:	000dba6a 	.word	0x000dba6a
   d53a0:	000dba7f 	.word	0x000dba7f
   d53a4:	000dba98 	.word	0x000dba98
   d53a8:	000dbab7 	.word	0x000dbab7
   d53ac:	000dbacf 	.word	0x000dbacf
   d53b0:	000dbae1 	.word	0x000dbae1
   d53b4:	000dbaef 	.word	0x000dbaef
   d53b8:	000dbb13 	.word	0x000dbb13
   d53bc:	000dbb3a 	.word	0x000dbb3a
   d53c0:	000dbb5c 	.word	0x000dbb5c
   d53c4:	000dbb72 	.word	0x000dbb72
   d53c8:	000dbb8b 	.word	0x000dbb8b
   d53cc:	000dbba0 	.word	0x000dbba0
   d53d0:	000dbbba 	.word	0x000dbbba
   d53d4:	000dbbce 	.word	0x000dbbce

000d53d8 <_ZN5MQTT526processPacketPubPropertiesEhPt>:
        pubAck(packetId);
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
   d53d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (identifier) {
   d53da:	2908      	cmp	r1, #8
        pubAck(packetId);
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
   d53dc:	af00      	add	r7, sp, #0
   d53de:	4604      	mov	r4, r0
   d53e0:	4615      	mov	r5, r2
    switch (identifier) {
   d53e2:	d029      	beq.n	d5438 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x60>
   d53e4:	d80c      	bhi.n	d5400 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x28>
   d53e6:	2902      	cmp	r1, #2
   d53e8:	d017      	beq.n	d541a <_ZN5MQTT526processPacketPubPropertiesEhPt+0x42>
   d53ea:	2903      	cmp	r1, #3
   d53ec:	d03b      	beq.n	d5466 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x8e>
   d53ee:	2901      	cmp	r1, #1
   d53f0:	d150      	bne.n	d5494 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xbc>
        case PROP_PAYLOAD_FORMAT_INDICATOR:
            logger.trace("Payload Format Indicator: %d", buffer[(*index)++]);
   d53f2:	882b      	ldrh	r3, [r5, #0]
   d53f4:	6882      	ldr	r2, [r0, #8]
   d53f6:	1c59      	adds	r1, r3, #1
   d53f8:	8029      	strh	r1, [r5, #0]
   d53fa:	5cd2      	ldrb	r2, [r2, r3]
   d53fc:	4928      	ldr	r1, [pc, #160]	; (d54a0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc8>)
   d53fe:	e012      	b.n	d5426 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x4e>
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
    switch (identifier) {
   d5400:	290b      	cmp	r1, #11
   d5402:	d02c      	beq.n	d545e <_ZN5MQTT526processPacketPubPropertiesEhPt+0x86>
   d5404:	d803      	bhi.n	d540e <_ZN5MQTT526processPacketPubPropertiesEhPt+0x36>
   d5406:	2909      	cmp	r1, #9
   d5408:	d144      	bne.n	d5494 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xbc>
            readUTF8String(index, str, len);
            logger.trace("Response Topic: %s", str);
            break;
        }
        case PROP_CORRELATION_DATA:
            logger.trace("Correlation Data");
   d540a:	4926      	ldr	r1, [pc, #152]	; (d54a4 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xcc>)
   d540c:	e028      	b.n	d5460 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x88>
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}

void MQTT5::processPacketPubProperties(uint8_t identifier, uint16_t *index) {
    switch (identifier) {
   d540e:	2923      	cmp	r1, #35	; 0x23
   d5410:	d00c      	beq.n	d542c <_ZN5MQTT526processPacketPubPropertiesEhPt+0x54>
   d5412:	2926      	cmp	r1, #38	; 0x26
   d5414:	d13e      	bne.n	d5494 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xbc>
        }
        case PROP_CORRELATION_DATA:
            logger.trace("Correlation Data");
            break;
        case PROP_USER_PROPERTY:
            logger.trace("User Property");
   d5416:	4924      	ldr	r1, [pc, #144]	; (d54a8 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xd0>)
   d5418:	e022      	b.n	d5460 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x88>
    switch (identifier) {
        case PROP_PAYLOAD_FORMAT_INDICATOR:
            logger.trace("Payload Format Indicator: %d", buffer[(*index)++]);
            break;
        case PROP_MESSAGE_EXPIRY_INTERVAL:
            logger.trace("Message Expiry Interval: %ld", readLong(index));
   d541a:	4611      	mov	r1, r2
   d541c:	f7ff fed4 	bl	d51c8 <_ZN5MQTT58readLongEPt>
   d5420:	4922      	ldr	r1, [pc, #136]	; (d54ac <_ZN5MQTT526processPacketPubPropertiesEhPt+0xd4>)
   d5422:	4602      	mov	r2, r0
   d5424:	4620      	mov	r0, r4
   d5426:	f7ff fd4f 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
            break;
   d542a:	e037      	b.n	d549c <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc4>
        case PROP_TOPIC_ALIAS:
            logger.trace("Topic Alias: %d", readInt(index));
   d542c:	4611      	mov	r1, r2
   d542e:	f7ff fdfa 	bl	d5026 <_ZN5MQTT57readIntEPt>
   d5432:	491f      	ldr	r1, [pc, #124]	; (d54b0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xd8>)
   d5434:	4602      	mov	r2, r0
   d5436:	e7f5      	b.n	d5424 <_ZN5MQTT526processPacketPubPropertiesEhPt+0x4c>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5438:	4611      	mov	r1, r2
   d543a:	f7ff fdf4 	bl	d5026 <_ZN5MQTT57readIntEPt>
        case PROP_TOPIC_ALIAS:
            logger.trace("Topic Alias: %d", readInt(index));
            break;
        case PROP_RESPONSE_TOPIC: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d543e:	f100 0208 	add.w	r2, r0, #8
   d5442:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Response Topic: %s", str);
            break;
   d5446:	466e      	mov	r6, sp
        case PROP_TOPIC_ALIAS:
            logger.trace("Topic Alias: %d", readInt(index));
            break;
        case PROP_RESPONSE_TOPIC: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5448:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d544c:	4603      	mov	r3, r0
            logger.trace("Topic Alias: %d", readInt(index));
            break;
        case PROP_RESPONSE_TOPIC: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d544e:	466a      	mov	r2, sp
   d5450:	4629      	mov	r1, r5
   d5452:	4620      	mov	r0, r4
   d5454:	f7ff fdd6 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Response Topic: %s", str);
   d5458:	466a      	mov	r2, sp
   d545a:	4916      	ldr	r1, [pc, #88]	; (d54b4 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xdc>)
   d545c:	e015      	b.n	d548a <_ZN5MQTT526processPacketPubPropertiesEhPt+0xb2>
            break;
        case PROP_USER_PROPERTY:
            logger.trace("User Property");
            break;
        case PROP_SUBSCRIPTION_IDENTIFIER:
            logger.trace("Subscription Identifier");
   d545e:	4916      	ldr	r1, [pc, #88]	; (d54b8 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xe0>)
   d5460:	f7ff fd32 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
            break;
   d5464:	e01a      	b.n	d549c <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc4>
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d5466:	4611      	mov	r1, r2
   d5468:	f7ff fddd 	bl	d5026 <_ZN5MQTT57readIntEPt>
        case PROP_SUBSCRIPTION_IDENTIFIER:
            logger.trace("Subscription Identifier");
            break;
        case PROP_CONTENT_TYPE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d546c:	f100 0208 	add.w	r2, r0, #8
   d5470:	f022 0207 	bic.w	r2, r2, #7
            readUTF8String(index, str, len);
            logger.trace("Content Type: %s", str);
            break;
   d5474:	466e      	mov	r6, sp
        case PROP_SUBSCRIPTION_IDENTIFIER:
            logger.trace("Subscription Identifier");
            break;
        case PROP_CONTENT_TYPE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
   d5476:	ebad 0d02 	sub.w	sp, sp, r2
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d547a:	4603      	mov	r3, r0
            logger.trace("Subscription Identifier");
            break;
        case PROP_CONTENT_TYPE: {
            uint16_t len = readUTF8StringLength(index);
            char str[len + 1];
            readUTF8String(index, str, len);
   d547c:	466a      	mov	r2, sp
   d547e:	4629      	mov	r1, r5
   d5480:	4620      	mov	r0, r4
   d5482:	f7ff fdbf 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
            logger.trace("Content Type: %s", str);
   d5486:	490d      	ldr	r1, [pc, #52]	; (d54bc <_ZN5MQTT526processPacketPubPropertiesEhPt+0xe4>)
   d5488:	466a      	mov	r2, sp
   d548a:	4620      	mov	r0, r4
   d548c:	f7ff fd1c 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
   d5490:	46b5      	mov	sp, r6
   d5492:	e003      	b.n	d549c <_ZN5MQTT526processPacketPubPropertiesEhPt+0xc4>
            break;
        }
        default:
            logger.warn("Unknown publish property");
   d5494:	490a      	ldr	r1, [pc, #40]	; (d54c0 <_ZN5MQTT526processPacketPubPropertiesEhPt+0xe8>)
   d5496:	4620      	mov	r0, r4
   d5498:	f7ff fd24 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
            break;
    }
}
   d549c:	46bd      	mov	sp, r7
   d549e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d54a0:	000dbbe7 	.word	0x000dbbe7
   d54a4:	000dbc44 	.word	0x000dbc44
   d54a8:	000dbae1 	.word	0x000dbae1
   d54ac:	000dbc04 	.word	0x000dbc04
   d54b0:	000dbc21 	.word	0x000dbc21
   d54b4:	000dbc31 	.word	0x000dbc31
   d54b8:	000dbc55 	.word	0x000dbc55
   d54bc:	000dbc6d 	.word	0x000dbc6d
   d54c0:	000dbc7e 	.word	0x000dbc7e

000d54c4 <_ZN5MQTT513writeToSocketEtb>:
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
    (*position) += 4;
    return result;
}

bool MQTT5::writeToSocket(uint16_t length, bool increasePacketsInFlight) {
   d54c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54c6:	4604      	mov	r4, r0
#ifdef MQTT5_DEBUG
    logger.trace("Write %d bytes:", length);
    logger.dump(buffer, length);
    logger.print("\n");
#endif
    uint16_t bytesWritten = socket->write(buffer, length);
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	6803      	ldr	r3, [r0, #0]
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
    (*position) += 4;
    return result;
}

bool MQTT5::writeToSocket(uint16_t length, bool increasePacketsInFlight) {
   d54cc:	460d      	mov	r5, r1
#ifdef MQTT5_DEBUG
    logger.trace("Write %d bytes:", length);
    logger.dump(buffer, length);
    logger.print("\n");
#endif
    uint16_t bytesWritten = socket->write(buffer, length);
   d54ce:	68db      	ldr	r3, [r3, #12]
    uint32_t result = buffer[*position] << 24 | buffer[*position + 1] << 16 | buffer[*position + 2] << 8 | buffer[*position + 3];
    (*position) += 4;
    return result;
}

bool MQTT5::writeToSocket(uint16_t length, bool increasePacketsInFlight) {
   d54d0:	4617      	mov	r7, r2
#ifdef MQTT5_DEBUG
    logger.trace("Write %d bytes:", length);
    logger.dump(buffer, length);
    logger.print("\n");
#endif
    uint16_t bytesWritten = socket->write(buffer, length);
   d54d2:	460a      	mov	r2, r1
   d54d4:	68a1      	ldr	r1, [r4, #8]
   d54d6:	4798      	blx	r3
   d54d8:	b286      	uxth	r6, r0
    socket->flush();
   d54da:	6860      	ldr	r0, [r4, #4]
   d54dc:	6803      	ldr	r3, [r0, #0]
   d54de:	69db      	ldr	r3, [r3, #28]
   d54e0:	4798      	blx	r3
   d54e2:	f000 ff63 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
    lastOutbound = millis();
   d54e6:	61a0      	str	r0, [r4, #24]
    if (increasePacketsInFlight)
   d54e8:	b127      	cbz	r7, d54f4 <_ZN5MQTT513writeToSocketEtb+0x30>
        packetsInFlight++;
   d54ea:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   d54ee:	3301      	adds	r3, #1
   d54f0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    return (bytesWritten == length);
}
   d54f4:	1bab      	subs	r3, r5, r6
   d54f6:	4258      	negs	r0, r3
   d54f8:	4158      	adcs	r0, r3
   d54fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>:

bool MQTT5::writeVariableByteInteger(uint16_t *position, uint16_t length) {
   d54fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t lenBuf[4] = {0};
   d54fe:	2300      	movs	r3, #0
    if (increasePacketsInFlight)
        packetsInFlight++;
    return (bytesWritten == length);
}

bool MQTT5::writeVariableByteInteger(uint16_t *position, uint16_t length) {
   d5500:	4607      	mov	r7, r0
   d5502:	460d      	mov	r5, r1
   d5504:	4616      	mov	r6, r2
    uint8_t lenBuf[4] = {0};
   d5506:	9301      	str	r3, [sp, #4]
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t len = length;
   d5508:	4614      	mov	r4, r2
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d550a:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t len = length;
    // Calculate variable byte integer (see 1.5.5)
    do {
        digit = len % 128;
   d550c:	f004 027f 	and.w	r2, r4, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5510:	fa51 f183 	uxtab	r1, r1, r3
    uint16_t len = length;
    // Calculate variable byte integer (see 1.5.5)
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d5514:	09e4      	lsrs	r4, r4, #7
            digit |= 0x80;
   d5516:	bf18      	it	ne
   d5518:	f042 0280 	orrne.w	r2, r2, #128	; 0x80
        }
        lenBuf[pos++] = digit;
   d551c:	f801 2c04 	strb.w	r2, [r1, #-4]
   d5520:	3301      	adds	r3, #1
        llen++;
    } while(len > 0);
   d5522:	2c00      	cmp	r4, #0
   d5524:	d1f1      	bne.n	d550a <_ZN5MQTT524writeVariableByteIntegerEPtt+0xe>
    // Add integer with zero
    if (len == 0) 
        llen = 1;

    // Check if content fits in buffer
    if ((*position) + llen + length > maxPacketSize) {
   d5526:	8829      	ldrh	r1, [r5, #0]
   d5528:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
   d552a:	1c4b      	adds	r3, r1, #1
   d552c:	1998      	adds	r0, r3, r6
   d552e:	4290      	cmp	r0, r2
   d5530:	dd05      	ble.n	d553e <_ZN5MQTT524writeVariableByteIntegerEPtt+0x42>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d5532:	4638      	mov	r0, r7
   d5534:	490b      	ldr	r1, [pc, #44]	; (d5564 <_ZN5MQTT524writeVariableByteIntegerEPtt+0x68>)
   d5536:	f7ff fcd5 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d553a:	4620      	mov	r0, r4
   d553c:	e00f      	b.n	d555e <_ZN5MQTT524writeVariableByteIntegerEPtt+0x62>
    }

    // Move current contents of the buffer to make space for the integer
    memmove(buffer + (*position) + llen, buffer + (*position), length);
   d553e:	68b8      	ldr	r0, [r7, #8]
   d5540:	4632      	mov	r2, r6
   d5542:	4401      	add	r1, r0
   d5544:	4418      	add	r0, r3
   d5546:	f005 fd1b 	bl	daf80 <memmove>
    memcpy(buffer + (*position), lenBuf, llen); // set remaining length
   d554a:	68ba      	ldr	r2, [r7, #8]
   d554c:	882b      	ldrh	r3, [r5, #0]
   d554e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   d5552:	54d1      	strb	r1, [r2, r3]
    *position += llen + length;
   d5554:	882a      	ldrh	r2, [r5, #0]
   d5556:	4432      	add	r2, r6
   d5558:	3201      	adds	r2, #1
   d555a:	802a      	strh	r2, [r5, #0]
    return true;
   d555c:	2001      	movs	r0, #1
}
   d555e:	b003      	add	sp, #12
   d5560:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5562:	bf00      	nop
   d5564:	000dbc97 	.word	0x000dbc97

000d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>:

bool MQTT5::writeUTF8String(uint16_t *position, const char* str, uint16_t length) {
   d5568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d556a:	460c      	mov	r4, r1
   d556c:	461d      	mov	r5, r3
    if ((*position) + length + 2 > maxPacketSize) {
   d556e:	8823      	ldrh	r3, [r4, #0]
    memcpy(buffer + (*position), lenBuf, llen); // set remaining length
    *position += llen + length;
    return true;
}

bool MQTT5::writeUTF8String(uint16_t *position, const char* str, uint16_t length) {
   d5570:	4611      	mov	r1, r2
    if ((*position) + length + 2 > maxPacketSize) {
   d5572:	195f      	adds	r7, r3, r5
   d5574:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   d5576:	3701      	adds	r7, #1
   d5578:	4297      	cmp	r7, r2
    memcpy(buffer + (*position), lenBuf, llen); // set remaining length
    *position += llen + length;
    return true;
}

bool MQTT5::writeUTF8String(uint16_t *position, const char* str, uint16_t length) {
   d557a:	4606      	mov	r6, r0
    if ((*position) + length + 2 > maxPacketSize) {
   d557c:	db04      	blt.n	d5588 <_ZN5MQTT515writeUTF8StringEPtPKct+0x20>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d557e:	490d      	ldr	r1, [pc, #52]	; (d55b4 <_ZN5MQTT515writeUTF8StringEPtPKct+0x4c>)
   d5580:	f7ff fcb0 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d5584:	2000      	movs	r0, #0
   d5586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }

    buffer[(*position)++] = length >> 8;
   d5588:	6882      	ldr	r2, [r0, #8]
   d558a:	1c58      	adds	r0, r3, #1
   d558c:	8020      	strh	r0, [r4, #0]
   d558e:	1228      	asrs	r0, r5, #8
   d5590:	54d0      	strb	r0, [r2, r3]
    buffer[(*position)++] = length & 0xFF;
   d5592:	8823      	ldrh	r3, [r4, #0]
   d5594:	68b2      	ldr	r2, [r6, #8]
   d5596:	1c58      	adds	r0, r3, #1
   d5598:	8020      	strh	r0, [r4, #0]
   d559a:	54d5      	strb	r5, [r2, r3]
    memcpy(buffer + (*position), str, length);
   d559c:	8823      	ldrh	r3, [r4, #0]
   d559e:	68b0      	ldr	r0, [r6, #8]
   d55a0:	462a      	mov	r2, r5
   d55a2:	4418      	add	r0, r3
   d55a4:	f005 fce1 	bl	daf6a <memcpy>
    *position += length;
   d55a8:	8823      	ldrh	r3, [r4, #0]
   d55aa:	441d      	add	r5, r3
   d55ac:	8025      	strh	r5, [r4, #0]
    return true;
   d55ae:	2001      	movs	r0, #1
}
   d55b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d55b2:	bf00      	nop
   d55b4:	000dbc97 	.word	0x000dbc97

000d55b8 <_ZN5MQTT59writeByteEPth>:

bool MQTT5::writeByte(uint16_t *position, uint8_t content) {
   d55b8:	b538      	push	{r3, r4, r5, lr}
   d55ba:	4615      	mov	r5, r2
    if ((*position) + 1 > maxPacketSize) {
   d55bc:	880b      	ldrh	r3, [r1, #0]
   d55be:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   d55c0:	4293      	cmp	r3, r2
   d55c2:	db04      	blt.n	d55ce <_ZN5MQTT59writeByteEPth+0x16>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d55c4:	4905      	ldr	r1, [pc, #20]	; (d55dc <_ZN5MQTT59writeByteEPth+0x24>)
   d55c6:	f7ff fc8d 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d55ca:	2000      	movs	r0, #0
   d55cc:	bd38      	pop	{r3, r4, r5, pc}
    }
    buffer[(*position)++] = content;
   d55ce:	6880      	ldr	r0, [r0, #8]
   d55d0:	1c5a      	adds	r2, r3, #1
   d55d2:	800a      	strh	r2, [r1, #0]
   d55d4:	54c5      	strb	r5, [r0, r3]
    return true;
   d55d6:	2001      	movs	r0, #1
}
   d55d8:	bd38      	pop	{r3, r4, r5, pc}
   d55da:	bf00      	nop
   d55dc:	000dbc97 	.word	0x000dbc97

000d55e0 <_ZN5MQTT54pingEv>:

    logger.info("Unsubscribe was issued for %d topics with packet id %d", topicLength, nextPacketId - 1);
    return writeToSocket(index);
}

bool MQTT5::ping() {
   d55e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d55e2:	ad02      	add	r5, sp, #8
   d55e4:	2600      	movs	r6, #0
   d55e6:	f825 6d02 	strh.w	r6, [r5, #-2]!
    // 3.12.1 PINGREQ Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PINGREQ << 4)))
   d55ea:	22c0      	movs	r2, #192	; 0xc0
   d55ec:	4629      	mov	r1, r5

    logger.info("Unsubscribe was issued for %d topics with packet id %d", topicLength, nextPacketId - 1);
    return writeToSocket(index);
}

bool MQTT5::ping() {
   d55ee:	4604      	mov	r4, r0
    uint16_t index = 0;
    // 3.12.1 PINGREQ Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PINGREQ << 4)))
   d55f0:	f7ff ffe2 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d55f4:	b908      	cbnz	r0, d55fa <_ZN5MQTT54pingEv+0x1a>
        return false;
   d55f6:	2000      	movs	r0, #0
   d55f8:	e013      	b.n	d5622 <_ZN5MQTT54pingEv+0x42>

    if (!writeByte(&index, 0))
   d55fa:	4632      	mov	r2, r6
   d55fc:	4629      	mov	r1, r5
   d55fe:	4620      	mov	r0, r4
   d5600:	f7ff ffda 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5604:	2800      	cmp	r0, #0
   d5606:	d0f6      	beq.n	d55f6 <_ZN5MQTT54pingEv+0x16>
        return false;

    logger.info("Sending ping request");
   d5608:	4907      	ldr	r1, [pc, #28]	; (d5628 <_ZN5MQTT54pingEv+0x48>)
   d560a:	4620      	mov	r0, r4
   d560c:	f7fe fdca 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5610:	f000 fecc 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
    lastPingSent = millis();
    return writeToSocket(index, false);
   d5614:	4632      	mov	r2, r6

    if (!writeByte(&index, 0))
        return false;

    logger.info("Sending ping request");
    lastPingSent = millis();
   d5616:	6220      	str	r0, [r4, #32]
    return writeToSocket(index, false);
   d5618:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d561c:	4620      	mov	r0, r4
   d561e:	f7ff ff51 	bl	d54c4 <_ZN5MQTT513writeToSocketEtb>
}
   d5622:	b002      	add	sp, #8
   d5624:	bd70      	pop	{r4, r5, r6, pc}
   d5626:	bf00      	nop
   d5628:	000dbcb9 	.word	0x000dbcb9

000d562c <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE>:
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
}

bool MQTT5::disconnectWithReason(MQTT5_REASON_CODE reason) {
   d562c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint16_t index = 0;
   d562e:	ac02      	add	r4, sp, #8
   d5630:	2600      	movs	r6, #0
   d5632:	f824 6d02 	strh.w	r6, [r4, #-2]!
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
}

bool MQTT5::disconnectWithReason(MQTT5_REASON_CODE reason) {
   d5636:	460f      	mov	r7, r1
    uint16_t index = 0;
    // 3.14.1 DISCONNECT Fixed Header
    if (!writeByte(&index, CTRL_DISCONNECT << 4))
   d5638:	22e0      	movs	r2, #224	; 0xe0
   d563a:	4621      	mov	r1, r4
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
}

bool MQTT5::disconnectWithReason(MQTT5_REASON_CODE reason) {
   d563c:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.14.1 DISCONNECT Fixed Header
    if (!writeByte(&index, CTRL_DISCONNECT << 4))
   d563e:	f7ff ffbb 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5642:	b908      	cbnz	r0, d5648 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x1c>
        return false;
   d5644:	2000      	movs	r0, #0
   d5646:	e025      	b.n	d5694 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x68>

    // 3.14.2.1 Disconnect Reason Code
    if (!writeByte(&index, (uint8_t) reason))
   d5648:	463a      	mov	r2, r7
   d564a:	4621      	mov	r1, r4
   d564c:	4628      	mov	r0, r5
   d564e:	f7ff ffb3 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5652:	2800      	cmp	r0, #0
   d5654:	d0f6      	beq.n	d5644 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x18>
        return false;
        
    // 3.14.2.2 DISCONNECT Properties
    if (!writeVariableByteInteger(&index, 0))
   d5656:	4632      	mov	r2, r6
   d5658:	4621      	mov	r1, r4
   d565a:	4628      	mov	r0, r5
   d565c:	f7ff ff4e 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5660:	2800      	cmp	r0, #0
   d5662:	d0ef      	beq.n	d5644 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x18>
        return false;

    // 3.14.1 DISCONNECT Fixed Header Remaining Length
    uint16_t len = index - 1;
   d5664:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d5668:	3a01      	subs	r2, #1
    index = 1;
   d566a:	2601      	movs	r6, #1
    if (!writeVariableByteInteger(&index, len))
   d566c:	b292      	uxth	r2, r2
   d566e:	4621      	mov	r1, r4
   d5670:	4628      	mov	r0, r5
    if (!writeVariableByteInteger(&index, 0))
        return false;

    // 3.14.1 DISCONNECT Fixed Header Remaining Length
    uint16_t len = index - 1;
    index = 1;
   d5672:	f8ad 6006 	strh.w	r6, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d5676:	f7ff ff41 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d567a:	2800      	cmp	r0, #0
   d567c:	d0e2      	beq.n	d5644 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x18>
        return false;

    logger.info("Sending disconnect with reason %d", (uint8_t) reason);
   d567e:	463a      	mov	r2, r7
   d5680:	4905      	ldr	r1, [pc, #20]	; (d5698 <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE+0x6c>)
   d5682:	4628      	mov	r0, r5
   d5684:	f7fe fd8e 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index);
   d5688:	4632      	mov	r2, r6
   d568a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d568e:	4628      	mov	r0, r5
   d5690:	f7ff ff18 	bl	d54c4 <_ZN5MQTT513writeToSocketEtb>
}
   d5694:	b003      	add	sp, #12
   d5696:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5698:	000dbcce 	.word	0x000dbcce

000d569c <_ZN5MQTT510writeBytesEPtPKht>:
    }
    buffer[(*position)++] = content;
    return true;
}

bool MQTT5::writeBytes(uint16_t *position, const uint8_t *payload, uint16_t payloadLength) {
   d569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d569e:	460c      	mov	r4, r1
   d56a0:	461d      	mov	r5, r3
    if ((*position) + payloadLength > maxPacketSize) {
   d56a2:	8823      	ldrh	r3, [r4, #0]
    }
    buffer[(*position)++] = content;
    return true;
}

bool MQTT5::writeBytes(uint16_t *position, const uint8_t *payload, uint16_t payloadLength) {
   d56a4:	4611      	mov	r1, r2
    if ((*position) + payloadLength > maxPacketSize) {
   d56a6:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   d56a8:	195f      	adds	r7, r3, r5
   d56aa:	4297      	cmp	r7, r2
   d56ac:	dd04      	ble.n	d56b8 <_ZN5MQTT510writeBytesEPtPKht+0x1c>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d56ae:	4907      	ldr	r1, [pc, #28]	; (d56cc <_ZN5MQTT510writeBytesEPtPKht+0x30>)
   d56b0:	f7ff fc18 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d56b4:	2000      	movs	r0, #0
   d56b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    memcpy(buffer + (*position), payload, payloadLength);
   d56b8:	6880      	ldr	r0, [r0, #8]
   d56ba:	462a      	mov	r2, r5
   d56bc:	4418      	add	r0, r3
   d56be:	f005 fc54 	bl	daf6a <memcpy>
    *position += payloadLength;
   d56c2:	8822      	ldrh	r2, [r4, #0]
   d56c4:	18ab      	adds	r3, r5, r2
   d56c6:	8023      	strh	r3, [r4, #0]
    return true;
   d56c8:	2001      	movs	r0, #1
}
   d56ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d56cc:	000dbc97 	.word	0x000dbc97

000d56d0 <_ZN5MQTT58writeIntEPtt>:

bool MQTT5::writeInt(uint16_t *position, uint16_t content) {
   d56d0:	b570      	push	{r4, r5, r6, lr}
    if ((*position) + 2 > maxPacketSize) {
   d56d2:	880c      	ldrh	r4, [r1, #0]
   d56d4:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
   d56d6:	1c65      	adds	r5, r4, #1
   d56d8:	42b5      	cmp	r5, r6
    memcpy(buffer + (*position), payload, payloadLength);
    *position += payloadLength;
    return true;
}

bool MQTT5::writeInt(uint16_t *position, uint16_t content) {
   d56da:	4603      	mov	r3, r0
    if ((*position) + 2 > maxPacketSize) {
   d56dc:	db05      	blt.n	d56ea <_ZN5MQTT58writeIntEPtt+0x1a>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d56de:	4632      	mov	r2, r6
   d56e0:	4907      	ldr	r1, [pc, #28]	; (d5700 <_ZN5MQTT58writeIntEPtt+0x30>)
   d56e2:	f7ff fbff 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d56e6:	2000      	movs	r0, #0
   d56e8:	bd70      	pop	{r4, r5, r6, pc}
    }
    buffer[(*position)++] = content >> 8;
   d56ea:	6880      	ldr	r0, [r0, #8]
   d56ec:	800d      	strh	r5, [r1, #0]
   d56ee:	1215      	asrs	r5, r2, #8
   d56f0:	5505      	strb	r5, [r0, r4]
    buffer[(*position)++] = content & 0xFF;
   d56f2:	6898      	ldr	r0, [r3, #8]
   d56f4:	880b      	ldrh	r3, [r1, #0]
   d56f6:	1c5c      	adds	r4, r3, #1
   d56f8:	800c      	strh	r4, [r1, #0]
   d56fa:	54c2      	strb	r2, [r0, r3]
    return position;
   d56fc:	2001      	movs	r0, #1
}
   d56fe:	bd70      	pop	{r4, r5, r6, pc}
   d5700:	000dbc97 	.word	0x000dbc97

000d5704 <_ZN5MQTT56pubAckEt>:
        logger.info("Already connected to server");
        return false;
    }
}

bool MQTT5::pubAck(uint16_t packetId) {
   d5704:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d5706:	ac02      	add	r4, sp, #8
   d5708:	2300      	movs	r3, #0
   d570a:	f824 3d02 	strh.w	r3, [r4, #-2]!
        logger.info("Already connected to server");
        return false;
    }
}

bool MQTT5::pubAck(uint16_t packetId) {
   d570e:	460e      	mov	r6, r1
    uint16_t index = 0;
    // 3.4.1 PUBACK Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBACK << 4)))
   d5710:	2240      	movs	r2, #64	; 0x40
   d5712:	4621      	mov	r1, r4
        logger.info("Already connected to server");
        return false;
    }
}

bool MQTT5::pubAck(uint16_t packetId) {
   d5714:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.4.1 PUBACK Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBACK << 4)))
   d5716:	f7ff ff4f 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d571a:	b908      	cbnz	r0, d5720 <_ZN5MQTT56pubAckEt+0x1c>
        return false;
   d571c:	2000      	movs	r0, #0
   d571e:	e01d      	b.n	d575c <_ZN5MQTT56pubAckEt+0x58>

    // 3.4.2 PUBACK Variable Header
    if (!writeInt(&index, packetId))
   d5720:	4632      	mov	r2, r6
   d5722:	4621      	mov	r1, r4
   d5724:	4628      	mov	r0, r5
   d5726:	f7ff ffd3 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d572a:	2800      	cmp	r0, #0
   d572c:	d0f6      	beq.n	d571c <_ZN5MQTT56pubAckEt+0x18>
        return false;

    // 3.4.1 PUBACK Fixed Header remaining length
    uint16_t len = index - 1;
   d572e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d5732:	3a01      	subs	r2, #1
    index = 1;
   d5734:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d5736:	b292      	uxth	r2, r2
   d5738:	4621      	mov	r1, r4
   d573a:	4628      	mov	r0, r5
    if (!writeInt(&index, packetId))
        return false;

    // 3.4.1 PUBACK Fixed Header remaining length
    uint16_t len = index - 1;
    index = 1;
   d573c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d5740:	f7ff fedc 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5744:	b920      	cbnz	r0, d5750 <_ZN5MQTT56pubAckEt+0x4c>

    logger.info("Sending publish ack for packet %d", packetId);
   d5746:	4632      	mov	r2, r6
   d5748:	4905      	ldr	r1, [pc, #20]	; (d5760 <_ZN5MQTT56pubAckEt+0x5c>)
   d574a:	4628      	mov	r0, r5
   d574c:	f7fe fd2a 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index, false);
   d5750:	2200      	movs	r2, #0
   d5752:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d5756:	4628      	mov	r0, r5
   d5758:	f7ff feb4 	bl	d54c4 <_ZN5MQTT513writeToSocketEtb>
}
   d575c:	b002      	add	sp, #8
   d575e:	bd70      	pop	{r4, r5, r6, pc}
   d5760:	000dbcf0 	.word	0x000dbcf0

000d5764 <_ZN5MQTT56pubRecEt>:
bool MQTT5::pubRec(uint16_t packetId) {
   d5764:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d5766:	ac02      	add	r4, sp, #8
   d5768:	2300      	movs	r3, #0
   d576a:	f824 3d02 	strh.w	r3, [r4, #-2]!
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish ack for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubRec(uint16_t packetId) {
   d576e:	460e      	mov	r6, r1
    uint16_t index = 0;
    // 3.5.1 PUBREC Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBREC << 4)))
   d5770:	2250      	movs	r2, #80	; 0x50
   d5772:	4621      	mov	r1, r4
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish ack for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubRec(uint16_t packetId) {
   d5774:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.5.1 PUBREC Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBREC << 4)))
   d5776:	f7ff ff1f 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d577a:	b908      	cbnz	r0, d5780 <_ZN5MQTT56pubRecEt+0x1c>
        return false;
   d577c:	2000      	movs	r0, #0
   d577e:	e01d      	b.n	d57bc <_ZN5MQTT56pubRecEt+0x58>

    // 3.5.2 PUBREC Variable Header
    if (!writeInt(&index, packetId))
   d5780:	4632      	mov	r2, r6
   d5782:	4621      	mov	r1, r4
   d5784:	4628      	mov	r0, r5
   d5786:	f7ff ffa3 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d578a:	2800      	cmp	r0, #0
   d578c:	d0f6      	beq.n	d577c <_ZN5MQTT56pubRecEt+0x18>
        return false;

    // 3.5.1 PUBREC Fixed Header remaining length
    uint16_t len = index - 1;
   d578e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d5792:	3a01      	subs	r2, #1
    index = 1;
   d5794:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d5796:	b292      	uxth	r2, r2
   d5798:	4621      	mov	r1, r4
   d579a:	4628      	mov	r0, r5
    if (!writeInt(&index, packetId))
        return false;

    // 3.5.1 PUBREC Fixed Header remaining length
    uint16_t len = index - 1;
    index = 1;
   d579c:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d57a0:	f7ff feac 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d57a4:	b920      	cbnz	r0, d57b0 <_ZN5MQTT56pubRecEt+0x4c>

    logger.info("Sending publish rec for packet %d", packetId);
   d57a6:	4632      	mov	r2, r6
   d57a8:	4905      	ldr	r1, [pc, #20]	; (d57c0 <_ZN5MQTT56pubRecEt+0x5c>)
   d57aa:	4628      	mov	r0, r5
   d57ac:	f7fe fcfa 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index, false);
   d57b0:	2200      	movs	r2, #0
   d57b2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d57b6:	4628      	mov	r0, r5
   d57b8:	f7ff fe84 	bl	d54c4 <_ZN5MQTT513writeToSocketEtb>
}
   d57bc:	b002      	add	sp, #8
   d57be:	bd70      	pop	{r4, r5, r6, pc}
   d57c0:	000dbd12 	.word	0x000dbd12

000d57c4 <_ZN5MQTT516processPacketPubEhtt>:
            logger.warn("Unknown connect property");
            break;
    }
}

void MQTT5::processPacketPub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d57c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d57c8:	b089      	sub	sp, #36	; 0x24
   d57ca:	af02      	add	r7, sp, #8
   d57cc:	f107 0518 	add.w	r5, r7, #24
    // 3.3.1 PUBLISH Fixed Header
    bool dup = (flags & 0x8) > 0;
    MQTT5_QOS qos = (MQTT5_QOS) ((flags & 0x6) >> 1);
   d57d0:	f3c1 0641 	ubfx	r6, r1, #1, #2
            logger.warn("Unknown connect property");
            break;
    }
}

void MQTT5::processPacketPub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d57d4:	f825 2d0a 	strh.w	r2, [r5, #-10]!
   d57d8:	468a      	mov	sl, r1
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d57da:	4629      	mov	r1, r5
            logger.warn("Unknown connect property");
            break;
    }
}

void MQTT5::processPacketPub(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d57dc:	4604      	mov	r4, r0
   d57de:	469b      	mov	fp, r3
    // 3.3.1 PUBLISH Fixed Header
    bool dup = (flags & 0x8) > 0;
    MQTT5_QOS qos = (MQTT5_QOS) ((flags & 0x6) >> 1);
    bool retain = (flags & 0x1) > 0;
    uint16_t indexContentStart = startIndex;
   d57e0:	60ba      	str	r2, [r7, #8]
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d57e2:	f7ff fc20 	bl	d5026 <_ZN5MQTT57readIntEPt>
    bool retain = (flags & 0x1) > 0;
    uint16_t indexContentStart = startIndex;

    // 3.3.2.1 Topic Name
    uint16_t len = readUTF8StringLength(&startIndex);
    char topic[len + 1];
   d57e6:	f100 0208 	add.w	r2, r0, #8
   d57ea:	f022 0207 	bic.w	r2, r2, #7
   d57ee:	ebad 0d02 	sub.w	sp, sp, r2
   d57f2:	f10d 0908 	add.w	r9, sp, #8
    (*position)++;
    return true;
}

uint16_t MQTT5::readUTF8StringLength(uint16_t *position) {
    return readInt(position);
   d57f6:	4603      	mov	r3, r0
    uint16_t indexContentStart = startIndex;

    // 3.3.2.1 Topic Name
    uint16_t len = readUTF8StringLength(&startIndex);
    char topic[len + 1];
    readUTF8String(&startIndex, topic, len);
   d57f8:	464a      	mov	r2, r9
   d57fa:	4629      	mov	r1, r5
   d57fc:	4620      	mov	r0, r4
   d57fe:	f7ff fc01 	bl	d5004 <_ZN5MQTT514readUTF8StringEPtPct>
    
    // 3.3.2.2 Packet Identifier
    uint16_t packetId = 0;
    if (qos != MQTT5_QOS::QOS0)
   d5802:	b12e      	cbz	r6, d5810 <_ZN5MQTT516processPacketPubEhtt+0x4c>
        packetId = readInt(&startIndex);
   d5804:	4629      	mov	r1, r5
   d5806:	4620      	mov	r0, r4
   d5808:	f7ff fc0d 	bl	d5026 <_ZN5MQTT57readIntEPt>
   d580c:	4680      	mov	r8, r0
   d580e:	e000      	b.n	d5812 <_ZN5MQTT516processPacketPubEhtt+0x4e>
    uint16_t len = readUTF8StringLength(&startIndex);
    char topic[len + 1];
    readUTF8String(&startIndex, topic, len);
    
    // 3.3.2.2 Packet Identifier
    uint16_t packetId = 0;
   d5810:	46b0      	mov	r8, r6
    if (qos != MQTT5_QOS::QOS0)
        packetId = readInt(&startIndex);

    // 3.3.2.3.1 Property Length
    uint16_t propertiesLength;
    if (readVariableByteInteger(&startIndex, &propertiesLength) && propertiesLength > 0) {
   d5812:	f107 0216 	add.w	r2, r7, #22
   d5816:	4629      	mov	r1, r5
   d5818:	4620      	mov	r0, r4
   d581a:	f7ff fbcd 	bl	d4fb8 <_ZN5MQTT523readVariableByteIntegerEPtS0_>
   d581e:	b108      	cbz	r0, d5824 <_ZN5MQTT516processPacketPubEhtt+0x60>
   d5820:	8afb      	ldrh	r3, [r7, #22]
   d5822:	bb83      	cbnz	r3, d5886 <_ZN5MQTT516processPacketPubEhtt+0xc2>
   d5824:	68bb      	ldr	r3, [r7, #8]
   d5826:	89fa      	ldrh	r2, [r7, #14]
   d5828:	445b      	add	r3, fp
            processPacketPubProperties(buffer[startIndex++], &startIndex);
        }
    }

    if (qos != MQTT5_QOS::QOS0)
        logger.info("Received packet for topic %s with id %d and length %d", topic, packetId, (contentLength + indexContentStart) - startIndex);
   d582a:	1a9b      	subs	r3, r3, r2
        while (startIndex - propertiesStartIndex < propertiesLength) {
            processPacketPubProperties(buffer[startIndex++], &startIndex);
        }
    }

    if (qos != MQTT5_QOS::QOS0)
   d582c:	b13e      	cbz	r6, d583e <_ZN5MQTT516processPacketPubEhtt+0x7a>
        logger.info("Received packet for topic %s with id %d and length %d", topic, packetId, (contentLength + indexContentStart) - startIndex);
   d582e:	9300      	str	r3, [sp, #0]
   d5830:	464a      	mov	r2, r9
   d5832:	4643      	mov	r3, r8
   d5834:	491e      	ldr	r1, [pc, #120]	; (d58b0 <_ZN5MQTT516processPacketPubEhtt+0xec>)
   d5836:	4620      	mov	r0, r4
   d5838:	f7fe fcb4 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d583c:	e004      	b.n	d5848 <_ZN5MQTT516processPacketPubEhtt+0x84>
    else
        logger.info("Received packet for topic %s with length %d", topic, (contentLength + indexContentStart) - startIndex);
   d583e:	464a      	mov	r2, r9
   d5840:	491c      	ldr	r1, [pc, #112]	; (d58b4 <_ZN5MQTT516processPacketPubEhtt+0xf0>)
   d5842:	4620      	mov	r0, r4
   d5844:	f7fe fcae 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    
    if (callbackPacketReceived)
   d5848:	6d25      	ldr	r5, [r4, #80]	; 0x50
   d584a:	b175      	cbz	r5, d586a <_ZN5MQTT516processPacketPubEhtt+0xa6>
        callbackPacketReceived(topic, buffer + startIndex, (contentLength + indexContentStart) - startIndex, dup, qos, retain);
   d584c:	89f8      	ldrh	r0, [r7, #14]
   d584e:	68bb      	ldr	r3, [r7, #8]
   d5850:	68a1      	ldr	r1, [r4, #8]
   d5852:	9600      	str	r6, [sp, #0]
   d5854:	1a1a      	subs	r2, r3, r0
   d5856:	445a      	add	r2, fp
   d5858:	f00a 0301 	and.w	r3, sl, #1
   d585c:	9301      	str	r3, [sp, #4]
   d585e:	4401      	add	r1, r0
   d5860:	f3ca 03c0 	ubfx	r3, sl, #3, #1
   d5864:	b292      	uxth	r2, r2
   d5866:	4648      	mov	r0, r9
   d5868:	47a8      	blx	r5

    // Send acknowledge
    if (qos == MQTT5_QOS::QOS1)
   d586a:	2e01      	cmp	r6, #1
   d586c:	d104      	bne.n	d5878 <_ZN5MQTT516processPacketPubEhtt+0xb4>
        pubAck(packetId);
   d586e:	4641      	mov	r1, r8
   d5870:	4620      	mov	r0, r4
   d5872:	f7ff ff47 	bl	d5704 <_ZN5MQTT56pubAckEt>
   d5876:	e017      	b.n	d58a8 <_ZN5MQTT516processPacketPubEhtt+0xe4>
    else if (qos == MQTT5_QOS::QOS2)
   d5878:	2e02      	cmp	r6, #2
   d587a:	d115      	bne.n	d58a8 <_ZN5MQTT516processPacketPubEhtt+0xe4>
        pubRec(packetId);
   d587c:	4641      	mov	r1, r8
   d587e:	4620      	mov	r0, r4
   d5880:	f7ff ff70 	bl	d5764 <_ZN5MQTT56pubRecEt>
}
   d5884:	e010      	b.n	d58a8 <_ZN5MQTT516processPacketPubEhtt+0xe4>
        packetId = readInt(&startIndex);

    // 3.3.2.3.1 Property Length
    uint16_t propertiesLength;
    if (readVariableByteInteger(&startIndex, &propertiesLength) && propertiesLength > 0) {
        uint16_t propertiesStartIndex = startIndex;
   d5886:	89fb      	ldrh	r3, [r7, #14]
        while (startIndex - propertiesStartIndex < propertiesLength) {
   d5888:	89f9      	ldrh	r1, [r7, #14]
   d588a:	8afa      	ldrh	r2, [r7, #22]
   d588c:	607b      	str	r3, [r7, #4]
   d588e:	1ac8      	subs	r0, r1, r3
   d5890:	4290      	cmp	r0, r2
   d5892:	dac7      	bge.n	d5824 <_ZN5MQTT516processPacketPubEhtt+0x60>
            processPacketPubProperties(buffer[startIndex++], &startIndex);
   d5894:	68a0      	ldr	r0, [r4, #8]
   d5896:	1c4a      	adds	r2, r1, #1
   d5898:	81fa      	strh	r2, [r7, #14]
   d589a:	5c41      	ldrb	r1, [r0, r1]
   d589c:	462a      	mov	r2, r5
   d589e:	4620      	mov	r0, r4
   d58a0:	f7ff fd9a 	bl	d53d8 <_ZN5MQTT526processPacketPubPropertiesEhPt>

    // 3.3.2.3.1 Property Length
    uint16_t propertiesLength;
    if (readVariableByteInteger(&startIndex, &propertiesLength) && propertiesLength > 0) {
        uint16_t propertiesStartIndex = startIndex;
        while (startIndex - propertiesStartIndex < propertiesLength) {
   d58a4:	687b      	ldr	r3, [r7, #4]
   d58a6:	e7ef      	b.n	d5888 <_ZN5MQTT516processPacketPubEhtt+0xc4>
    // Send acknowledge
    if (qos == MQTT5_QOS::QOS1)
        pubAck(packetId);
    else if (qos == MQTT5_QOS::QOS2)
        pubRec(packetId);
}
   d58a8:	371c      	adds	r7, #28
   d58aa:	46bd      	mov	sp, r7
   d58ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58b0:	000dbd34 	.word	0x000dbd34
   d58b4:	000dbd6a 	.word	0x000dbd6a

000d58b8 <_ZN5MQTT57pubCompEt>:
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish rec for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubComp(uint16_t packetId) {
   d58b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint16_t index = 0;
   d58ba:	ac02      	add	r4, sp, #8
   d58bc:	2300      	movs	r3, #0
   d58be:	f824 3d02 	strh.w	r3, [r4, #-2]!
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish rec for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubComp(uint16_t packetId) {
   d58c2:	460e      	mov	r6, r1
    uint16_t index = 0;
    // 3.7.1 PUBCOMP Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBCOMP << 4)))
   d58c4:	2270      	movs	r2, #112	; 0x70
   d58c6:	4621      	mov	r1, r4
    if (!writeVariableByteInteger(&index, len))

    logger.info("Sending publish rec for packet %d", packetId);
    return writeToSocket(index, false);
}
bool MQTT5::pubComp(uint16_t packetId) {
   d58c8:	4605      	mov	r5, r0
    uint16_t index = 0;
    // 3.7.1 PUBCOMP Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBCOMP << 4)))
   d58ca:	f7ff fe75 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d58ce:	b908      	cbnz	r0, d58d4 <_ZN5MQTT57pubCompEt+0x1c>
        return false;
   d58d0:	2000      	movs	r0, #0
   d58d2:	e01d      	b.n	d5910 <_ZN5MQTT57pubCompEt+0x58>

    // 3.7.2 PUBCOMP Variable Header
    if (!writeInt(&index, packetId))
   d58d4:	4632      	mov	r2, r6
   d58d6:	4621      	mov	r1, r4
   d58d8:	4628      	mov	r0, r5
   d58da:	f7ff fef9 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d58de:	2800      	cmp	r0, #0
   d58e0:	d0f6      	beq.n	d58d0 <_ZN5MQTT57pubCompEt+0x18>
        return false;

    // 3.7.1 PUBCOMP Fixed Header remaining length
    uint16_t len = index - 1;
   d58e2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d58e6:	3a01      	subs	r2, #1
    index = 1;
   d58e8:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d58ea:	b292      	uxth	r2, r2
   d58ec:	4621      	mov	r1, r4
   d58ee:	4628      	mov	r0, r5
    if (!writeInt(&index, packetId))
        return false;

    // 3.7.1 PUBCOMP Fixed Header remaining length
    uint16_t len = index - 1;
    index = 1;
   d58f0:	f8ad 3006 	strh.w	r3, [sp, #6]
    if (!writeVariableByteInteger(&index, len))
   d58f4:	f7ff fe02 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d58f8:	b920      	cbnz	r0, d5904 <_ZN5MQTT57pubCompEt+0x4c>

    logger.info("Sending publish comp for packet %d", packetId);
   d58fa:	4632      	mov	r2, r6
   d58fc:	4905      	ldr	r1, [pc, #20]	; (d5914 <_ZN5MQTT57pubCompEt+0x5c>)
   d58fe:	4628      	mov	r0, r5
   d5900:	f7fe fc50 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    return writeToSocket(index, false);
   d5904:	2200      	movs	r2, #0
   d5906:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   d590a:	4628      	mov	r0, r5
   d590c:	f7ff fdda 	bl	d54c4 <_ZN5MQTT513writeToSocketEtb>
}
   d5910:	b002      	add	sp, #8
   d5912:	bd70      	pop	{r4, r5, r6, pc}
   d5914:	000dbd96 	.word	0x000dbd96

000d5918 <_ZN5MQTT519processPacketPubRelEhtt>:
    } else if (callbackQOS) {
        callbackQOS(packetId, !isAck);
    }
}

void MQTT5::processPacketPubRel(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d5918:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d591a:	a902      	add	r1, sp, #8
   d591c:	461d      	mov	r5, r3
   d591e:	f821 2d02 	strh.w	r2, [r1, #-2]!
   d5922:	4604      	mov	r4, r0
    uint16_t packetId = readInt(&startIndex);
   d5924:	f7ff fb7f 	bl	d5026 <_ZN5MQTT57readIntEPt>
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d5928:	2d02      	cmp	r5, #2
   d592a:	bf1f      	itttt	ne
   d592c:	f8bd 3006 	ldrhne.w	r3, [sp, #6]
   d5930:	68a2      	ldrne	r2, [r4, #8]
   d5932:	1c59      	addne	r1, r3, #1
   d5934:	f8ad 1006 	strhne.w	r1, [sp, #6]
   d5938:	bf18      	it	ne
   d593a:	5cd5      	ldrbne	r5, [r2, r3]
    logger.info("Received publish rel for packet %d and response %d", packetId, (uint8_t) reason);
   d593c:	4907      	ldr	r1, [pc, #28]	; (d595c <_ZN5MQTT519processPacketPubRelEhtt+0x44>)
    }
}

void MQTT5::processPacketPubRel(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d593e:	bf08      	it	eq
   d5940:	2500      	moveq	r5, #0
        callbackQOS(packetId, !isAck);
    }
}

void MQTT5::processPacketPubRel(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    uint16_t packetId = readInt(&startIndex);
   d5942:	4606      	mov	r6, r0
    MQTT5_REASON_CODE reason = contentLength == 2 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received publish rel for packet %d and response %d", packetId, (uint8_t) reason);
   d5944:	4602      	mov	r2, r0
   d5946:	462b      	mov	r3, r5
   d5948:	4620      	mov	r0, r4
   d594a:	f7fe fc2b 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    if (reason == MQTT5_REASON_CODE::SUCCESS) {
   d594e:	b91d      	cbnz	r5, d5958 <_ZN5MQTT519processPacketPubRelEhtt+0x40>
        pubComp(packetId);
   d5950:	4631      	mov	r1, r6
   d5952:	4620      	mov	r0, r4
   d5954:	f7ff ffb0 	bl	d58b8 <_ZN5MQTT57pubCompEt>
    }
}
   d5958:	b002      	add	sp, #8
   d595a:	bd70      	pop	{r4, r5, r6, pc}
   d595c:	000dbdb9 	.word	0x000dbdb9

000d5960 <_ZN5MQTT58writeIntEPtm>:
    buffer[(*position)++] = content >> 8;
    buffer[(*position)++] = content & 0xFF;
    return position;
}

bool MQTT5::writeInt(uint16_t *position, uint32_t content) {
   d5960:	b570      	push	{r4, r5, r6, lr}
    if ((*position) + 4 > maxPacketSize) {
   d5962:	880c      	ldrh	r4, [r1, #0]
   d5964:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   d5966:	1ce6      	adds	r6, r4, #3
   d5968:	42ae      	cmp	r6, r5
    buffer[(*position)++] = content >> 8;
    buffer[(*position)++] = content & 0xFF;
    return position;
}

bool MQTT5::writeInt(uint16_t *position, uint32_t content) {
   d596a:	4603      	mov	r3, r0
    if ((*position) + 4 > maxPacketSize) {
   d596c:	db05      	blt.n	d597a <_ZN5MQTT58writeIntEPtm+0x1a>
        logger.warn("Packet exceeds max packet size %d", maxPacketSize);
   d596e:	462a      	mov	r2, r5
   d5970:	490e      	ldr	r1, [pc, #56]	; (d59ac <_ZN5MQTT58writeIntEPtm+0x4c>)
   d5972:	f7ff fab7 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
        return false;
   d5976:	2000      	movs	r0, #0
   d5978:	bd70      	pop	{r4, r5, r6, pc}
    }
    buffer[(*position)++] = content >> 24;
   d597a:	6880      	ldr	r0, [r0, #8]
   d597c:	1c65      	adds	r5, r4, #1
   d597e:	800d      	strh	r5, [r1, #0]
   d5980:	0e15      	lsrs	r5, r2, #24
   d5982:	5505      	strb	r5, [r0, r4]
    buffer[(*position)++] = content >> 16;
   d5984:	8808      	ldrh	r0, [r1, #0]
   d5986:	689c      	ldr	r4, [r3, #8]
   d5988:	1c45      	adds	r5, r0, #1
   d598a:	800d      	strh	r5, [r1, #0]
   d598c:	0c15      	lsrs	r5, r2, #16
   d598e:	5425      	strb	r5, [r4, r0]
    buffer[(*position)++] = content >> 8;
   d5990:	8808      	ldrh	r0, [r1, #0]
   d5992:	689c      	ldr	r4, [r3, #8]
   d5994:	1c45      	adds	r5, r0, #1
   d5996:	800d      	strh	r5, [r1, #0]
   d5998:	0a15      	lsrs	r5, r2, #8
   d599a:	5425      	strb	r5, [r4, r0]
    buffer[(*position)++] = content & 0xFF;
   d599c:	6898      	ldr	r0, [r3, #8]
   d599e:	880b      	ldrh	r3, [r1, #0]
   d59a0:	1c5c      	adds	r4, r3, #1
   d59a2:	800c      	strh	r4, [r1, #0]
   d59a4:	54c2      	strb	r2, [r0, r3]
    return true;
   d59a6:	2001      	movs	r0, #1
}
   d59a8:	bd70      	pop	{r4, r5, r6, pc}
   d59aa:	bf00      	nop
   d59ac:	000dbc97 	.word	0x000dbc97

000d59b0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties>:

bool MQTT5::publish(const char *topic, const char *payload, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
    return publish(topic, (const uint8_t*) payload, strlen(payload), retain, qos, dup, packetId, properties);
}

bool MQTT5::publish(const char *topic, const uint8_t *payload, uint16_t payloadLength, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
   d59b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d59b4:	b089      	sub	sp, #36	; 0x24
   d59b6:	4699      	mov	r9, r3
   d59b8:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   d59bc:	9304      	str	r3, [sp, #16]
   d59be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   d59c0:	9205      	str	r2, [sp, #20]
   d59c2:	4604      	mov	r4, r0
   d59c4:	460e      	mov	r6, r1
   d59c6:	f89d a04c 	ldrb.w	sl, [sp, #76]	; 0x4c
   d59ca:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
   d59ce:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   d59d2:	9303      	str	r3, [sp, #12]
    if (!connected())
   d59d4:	f7ff fab7 	bl	d4f46 <_ZN5MQTT59connectedEv>
   d59d8:	b908      	cbnz	r0, d59de <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2e>
        return false;
   d59da:	2000      	movs	r0, #0
   d59dc:	e0f6      	b.n	d5bcc <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x21c>

    uint16_t index = 0;
    // 3.3.1 PUBLISH Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBLISH << 4) |
   d59de:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
   d59e2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50

bool MQTT5::publish(const char *topic, const uint8_t *payload, uint16_t payloadLength, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
    if (!connected())
        return false;

    uint16_t index = 0;
   d59e6:	af08      	add	r7, sp, #32
   d59e8:	f04f 0b00 	mov.w	fp, #0
    // 3.3.1 PUBLISH Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBLISH << 4) |
   d59ec:	f042 0230 	orr.w	r2, r2, #48	; 0x30

bool MQTT5::publish(const char *topic, const uint8_t *payload, uint16_t payloadLength, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
    if (!connected())
        return false;

    uint16_t index = 0;
   d59f0:	f827 bd04 	strh.w	fp, [r7, #-4]!
    // 3.3.1 PUBLISH Fixed Header
    if (!writeByte(&index, (uint8_t) (CTRL_PUBLISH << 4) |
   d59f4:	ea42 024a 	orr.w	r2, r2, sl, lsl #1
   d59f8:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
   d59fc:	b2d2      	uxtb	r2, r2
   d59fe:	4639      	mov	r1, r7
   d5a00:	4620      	mov	r0, r4
   d5a02:	f7ff fdd9 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5a06:	2800      	cmp	r0, #0
   d5a08:	d0e7      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
                             (((uint8_t) qos) << 1) |
                             retain))
        return false;

    // 3.3.2.1 Topic Name
    if (properties.topicAlias > 0 && topicAliasRegistered(properties.topicAlias)) {
   d5a0a:	b17d      	cbz	r5, d5a2c <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x7c>
   d5a0c:	4629      	mov	r1, r5
   d5a0e:	4620      	mov	r0, r4
   d5a10:	f7ff faa5 	bl	d4f5e <_ZN5MQTT520topicAliasRegisteredEt>
   d5a14:	b150      	cbz	r0, d5a2c <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x7c>
        logger.info("Using topic alias %d", properties.topicAlias);
   d5a16:	462a      	mov	r2, r5
   d5a18:	4620      	mov	r0, r4
   d5a1a:	496e      	ldr	r1, [pc, #440]	; (d5bd4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x224>)
   d5a1c:	f7fe fbc2 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (!writeInt(&index, (uint16_t) 0))
   d5a20:	465a      	mov	r2, fp
   d5a22:	4639      	mov	r1, r7
   d5a24:	4620      	mov	r0, r4
   d5a26:	f7ff fe53 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d5a2a:	e008      	b.n	d5a3e <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x8e>
            return false;
    } else {
        if (!writeUTF8String(&index, topic, strlen(topic)))
   d5a2c:	4630      	mov	r0, r6
   d5a2e:	f005 fb38 	bl	db0a2 <strlen>
   d5a32:	4632      	mov	r2, r6
   d5a34:	b283      	uxth	r3, r0
   d5a36:	a907      	add	r1, sp, #28
   d5a38:	4620      	mov	r0, r4
   d5a3a:	f7ff fd95 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d5a3e:	2800      	cmp	r0, #0
   d5a40:	d0cb      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }
    
    if ((uint8_t) qos > 0) {
   d5a42:	f1ba 0f00 	cmp.w	sl, #0
   d5a46:	d106      	bne.n	d5a56 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0xa6>
        if (!writeInt(&index, nextPacketId++))
            return false;
    }

    // 3.3.2.3 PUBLISH Properties
    uint16_t indexProp = index;
   d5a48:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d5a4c:	f8ad 301e 	strh.w	r3, [sp, #30]

    // 3.3.2.3.2 Payload Format Indicator
    if (properties.payloadFormatIndicator > 0) {
   d5a50:	9b04      	ldr	r3, [sp, #16]
   d5a52:	b97b      	cbnz	r3, d5a74 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0xc4>
   d5a54:	e02e      	b.n	d5ab4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x104>
            return false;
    }
    
    if ((uint8_t) qos > 0) {
        // 3.3.2.2 Packet Identifier
        if (packetId)
   d5a56:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d5a58:	b113      	cbz	r3, d5a60 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0xb0>
            *packetId = nextPacketId;
   d5a5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   d5a5c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   d5a5e:	8013      	strh	r3, [r2, #0]
        if (!writeInt(&index, nextPacketId++))
   d5a60:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   d5a62:	1c53      	adds	r3, r2, #1
   d5a64:	8563      	strh	r3, [r4, #42]	; 0x2a
   d5a66:	a907      	add	r1, sp, #28
   d5a68:	4620      	mov	r0, r4
   d5a6a:	f7ff fe31 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d5a6e:	2800      	cmp	r0, #0
   d5a70:	d1ea      	bne.n	d5a48 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x98>
   d5a72:	e7b2      	b.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
    // 3.3.2.3 PUBLISH Properties
    uint16_t indexProp = index;

    // 3.3.2.3.2 Payload Format Indicator
    if (properties.payloadFormatIndicator > 0) {
        if (!writeByte(&indexProp, PROP_PAYLOAD_FORMAT_INDICATOR))
   d5a74:	2201      	movs	r2, #1
   d5a76:	f10d 011e 	add.w	r1, sp, #30
   d5a7a:	4620      	mov	r0, r4
   d5a7c:	f7ff fd9c 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5a80:	2800      	cmp	r0, #0
   d5a82:	d0aa      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeByte(&indexProp, properties.payloadFormatIndicator))
   d5a84:	2201      	movs	r2, #1
   d5a86:	f10d 011e 	add.w	r1, sp, #30
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f7ff fd94 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5a90:	2800      	cmp	r0, #0
   d5a92:	d0a2      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.3 Message Expiry Interval
    if (properties.payloadFormatIndicator > 0) {
        if (!writeByte(&indexProp, PROP_MESSAGE_EXPIRY_INTERVAL))
   d5a94:	2202      	movs	r2, #2
   d5a96:	f10d 011e 	add.w	r1, sp, #30
   d5a9a:	4620      	mov	r0, r4
   d5a9c:	f7ff fd8c 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5aa0:	2800      	cmp	r0, #0
   d5aa2:	d09a      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeInt(&indexProp, properties.messsageExpiryInterval))
   d5aa4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   d5aa6:	f10d 011e 	add.w	r1, sp, #30
   d5aaa:	4620      	mov	r0, r4
   d5aac:	f7ff ff58 	bl	d5960 <_ZN5MQTT58writeIntEPtm>
   d5ab0:	2800      	cmp	r0, #0
   d5ab2:	d092      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.4 Topic Alias
    if (properties.topicAlias > 0) {
   d5ab4:	b17d      	cbz	r5, d5ad6 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x126>
        if (!writeByte(&indexProp, PROP_TOPIC_ALIAS))
   d5ab6:	2223      	movs	r2, #35	; 0x23
   d5ab8:	f10d 011e 	add.w	r1, sp, #30
   d5abc:	4620      	mov	r0, r4
   d5abe:	f7ff fd7b 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5ac2:	2800      	cmp	r0, #0
   d5ac4:	d089      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeInt(&indexProp, properties.topicAlias))
   d5ac6:	462a      	mov	r2, r5
   d5ac8:	f10d 011e 	add.w	r1, sp, #30
   d5acc:	4620      	mov	r0, r4
   d5ace:	f7ff fdff 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d5ad2:	2800      	cmp	r0, #0
   d5ad4:	d081      	beq.n	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.5 Response Topic
    if (properties.responseTopic) {
   d5ad6:	f1b8 0f00 	cmp.w	r8, #0
   d5ada:	d015      	beq.n	d5b08 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x158>
        if (!writeByte(&indexProp, PROP_RESPONSE_TOPIC))
   d5adc:	2208      	movs	r2, #8
   d5ade:	f10d 011e 	add.w	r1, sp, #30
   d5ae2:	4620      	mov	r0, r4
   d5ae4:	f7ff fd68 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5ae8:	2800      	cmp	r0, #0
   d5aea:	f43f af76 	beq.w	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeUTF8String(&indexProp, properties.responseTopic, strlen(properties.responseTopic)))
   d5aee:	4640      	mov	r0, r8
   d5af0:	f005 fad7 	bl	db0a2 <strlen>
   d5af4:	4642      	mov	r2, r8
   d5af6:	b283      	uxth	r3, r0
   d5af8:	f10d 011e 	add.w	r1, sp, #30
   d5afc:	4620      	mov	r0, r4
   d5afe:	f7ff fd33 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d5b02:	2800      	cmp	r0, #0
   d5b04:	f43f af69 	beq.w	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.6 Correlation Data
    if (properties.correlationData) {
   d5b08:	9b03      	ldr	r3, [sp, #12]
   d5b0a:	b19b      	cbz	r3, d5b34 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x184>
        if (!writeByte(&indexProp, PROP_CORRELATION_DATA))
   d5b0c:	2209      	movs	r2, #9
   d5b0e:	f10d 011e 	add.w	r1, sp, #30
   d5b12:	4620      	mov	r0, r4
   d5b14:	f7ff fd50 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d5b18:	2800      	cmp	r0, #0
   d5b1a:	f43f af5e 	beq.w	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;

        if (!writeBytes(&indexProp, properties.correlationData, properties.correlationDataLength))
   d5b1e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
   d5b22:	9a03      	ldr	r2, [sp, #12]
   d5b24:	f10d 011e 	add.w	r1, sp, #30
   d5b28:	4620      	mov	r0, r4
   d5b2a:	f7ff fdb7 	bl	d569c <_ZN5MQTT510writeBytesEPtPKht>
   d5b2e:	2800      	cmp	r0, #0
   d5b30:	f43f af53 	beq.w	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
            return false;
    }

    // 3.3.2.3.1 Property Length
    if (!writeVariableByteInteger(&index, indexProp - index))
   d5b34:	af08      	add	r7, sp, #32
   d5b36:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d5b3a:	f837 2d04 	ldrh.w	r2, [r7, #-4]!
   d5b3e:	1a9a      	subs	r2, r3, r2
   d5b40:	b292      	uxth	r2, r2
   d5b42:	4639      	mov	r1, r7
   d5b44:	4620      	mov	r0, r4
   d5b46:	f7ff fcd9 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5b4a:	2800      	cmp	r0, #0
   d5b4c:	f43f af45 	beq.w	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
        return false;

    // 3.3.3 PUBLISH Payload
    if (!writeBytes(&index, payload, payloadLength))
   d5b50:	464b      	mov	r3, r9
   d5b52:	9a05      	ldr	r2, [sp, #20]
   d5b54:	4639      	mov	r1, r7
   d5b56:	4620      	mov	r0, r4
   d5b58:	f7ff fda0 	bl	d569c <_ZN5MQTT510writeBytesEPtPKht>
   d5b5c:	2800      	cmp	r0, #0
   d5b5e:	f43f af3c 	beq.w	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
        return false;

    // 3.3.1.4 Remaining Length
    uint16_t len = index - 1;
   d5b62:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d5b66:	3a01      	subs	r2, #1
    index = 1;
   d5b68:	2301      	movs	r3, #1
    if (!writeVariableByteInteger(&index, len))
   d5b6a:	b292      	uxth	r2, r2
   d5b6c:	4639      	mov	r1, r7
   d5b6e:	4620      	mov	r0, r4
    if (!writeBytes(&index, payload, payloadLength))
        return false;

    // 3.3.1.4 Remaining Length
    uint16_t len = index - 1;
    index = 1;
   d5b70:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (!writeVariableByteInteger(&index, len))
   d5b74:	f7ff fcc2 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d5b78:	2800      	cmp	r0, #0
   d5b7a:	f43f af2e 	beq.w	d59da <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x2a>
        return false;

    if ((uint8_t) qos > 0)
   d5b7e:	f1ba 0f00 	cmp.w	sl, #0
   d5b82:	d009      	beq.n	d5b98 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x1e8>
        logger.info("Publishing packet with id %d in topic %s with length %d", nextPacketId - 1, topic, payloadLength);
   d5b84:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
   d5b86:	f8cd 9000 	str.w	r9, [sp]
   d5b8a:	4633      	mov	r3, r6
   d5b8c:	3a01      	subs	r2, #1
   d5b8e:	4912      	ldr	r1, [pc, #72]	; (d5bd8 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x228>)
   d5b90:	4620      	mov	r0, r4
   d5b92:	f7fe fb07 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5b96:	e005      	b.n	d5ba4 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x1f4>
    else
        logger.info("Publishing packet in topic %s with length %d", topic, payloadLength); 
   d5b98:	464b      	mov	r3, r9
   d5b9a:	4632      	mov	r2, r6
   d5b9c:	490f      	ldr	r1, [pc, #60]	; (d5bdc <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x22c>)
   d5b9e:	4620      	mov	r0, r4
   d5ba0:	f7fe fb00 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    
    // Save topic alias
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
   d5ba4:	b125      	cbz	r5, d5bb0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x200>
   d5ba6:	4629      	mov	r1, r5
   d5ba8:	4620      	mov	r0, r4
   d5baa:	f7ff f9eb 	bl	d4f84 <_ZN5MQTT518topicAliasRegisterEt>
   d5bae:	b930      	cbnz	r0, d5bbe <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x20e>
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
    return writeToSocket(index);
   d5bb0:	2201      	movs	r2, #1
   d5bb2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d5bb6:	4620      	mov	r0, r4
   d5bb8:	f7ff fc84 	bl	d54c4 <_ZN5MQTT513writeToSocketEtb>
   d5bbc:	e006      	b.n	d5bcc <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x21c>
    else
        logger.info("Publishing packet in topic %s with length %d", topic, payloadLength); 
    
    // Save topic alias
    if (properties.topicAlias > 0 && topicAliasRegister(properties.topicAlias))
        logger.info("Topic %s was assigned to alias %d", topic, properties.topicAlias);
   d5bbe:	462b      	mov	r3, r5
   d5bc0:	4632      	mov	r2, r6
   d5bc2:	4907      	ldr	r1, [pc, #28]	; (d5be0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x230>)
   d5bc4:	4620      	mov	r0, r4
   d5bc6:	f7fe faed 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5bca:	e7f1      	b.n	d5bb0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties+0x200>
    return writeToSocket(index);
}
   d5bcc:	b009      	add	sp, #36	; 0x24
   d5bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5bd2:	bf00      	nop
   d5bd4:	000dbedb 	.word	0x000dbedb
   d5bd8:	000dbe76 	.word	0x000dbe76
   d5bdc:	000dbeae 	.word	0x000dbeae
   d5be0:	000dbef0 	.word	0x000dbef0

000d5be4 <_ZN5MQTT57publishEPKcS1_b9MQTT5_QOSbPt22MQTT5PublishProperties>:

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
    return publish(topic, payload, false, qos, false, packetId);
}

bool MQTT5::publish(const char *topic, const char *payload, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
   d5be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5be8:	4607      	mov	r7, r0
   d5bea:	b08b      	sub	sp, #44	; 0x2c
    return publish(topic, (const uint8_t*) payload, strlen(payload), retain, qos, dup, packetId, properties);
   d5bec:	4610      	mov	r0, r2

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
    return publish(topic, payload, false, qos, false, packetId);
}

bool MQTT5::publish(const char *topic, const char *payload, bool retain, MQTT5_QOS qos, bool dup, uint16_t *packetId, MQTT5PublishProperties properties) {
   d5bee:	4688      	mov	r8, r1
   d5bf0:	4616      	mov	r6, r2
   d5bf2:	4699      	mov	r9, r3
    return publish(topic, (const uint8_t*) payload, strlen(payload), retain, qos, dup, packetId, properties);
   d5bf4:	f005 fa55 	bl	db0a2 <strlen>
   d5bf8:	ad15      	add	r5, sp, #84	; 0x54
   d5bfa:	fa1f fe80 	uxth.w	lr, r0
   d5bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5c00:	ac04      	add	r4, sp, #16
   d5c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c04:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5c08:	e884 0003 	stmia.w	r4, {r0, r1}
   d5c0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d5c0e:	9303      	str	r3, [sp, #12]
   d5c10:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d5c14:	9302      	str	r3, [sp, #8]
   d5c16:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
   d5c1a:	9301      	str	r3, [sp, #4]
   d5c1c:	f8cd 9000 	str.w	r9, [sp]
   d5c20:	4673      	mov	r3, lr
   d5c22:	4632      	mov	r2, r6
   d5c24:	4641      	mov	r1, r8
   d5c26:	4638      	mov	r0, r7
   d5c28:	f7ff fec2 	bl	d59b0 <_ZN5MQTT57publishEPKcPKhtb9MQTT5_QOSbPt22MQTT5PublishProperties>
}
   d5c2c:	b00b      	add	sp, #44	; 0x2c
   d5c2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5c34 <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt>:

    logger.info("Sending publish comp for packet %d", packetId);
    return writeToSocket(index, false);
}

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
   d5c34:	b5f0      	push	{r4, r5, r6, r7, lr}
    return publish(topic, payload, false, qos, false, packetId);
   d5c36:	4d0d      	ldr	r5, [pc, #52]	; (d5c6c <_ZN5MQTT57publishEPKcS1_9MQTT5_QOSPt+0x38>)

    logger.info("Sending publish comp for packet %d", packetId);
    return writeToSocket(index, false);
}

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
   d5c38:	4696      	mov	lr, r2
   d5c3a:	469c      	mov	ip, r3
   d5c3c:	4606      	mov	r6, r0
   d5c3e:	460f      	mov	r7, r1
    return publish(topic, payload, false, qos, false, packetId);
   d5c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}

    logger.info("Sending publish comp for packet %d", packetId);
    return writeToSocket(index, false);
}

bool MQTT5::publish(const char *topic, const char *payload, MQTT5_QOS qos, uint16_t *packetId) {
   d5c42:	b08b      	sub	sp, #44	; 0x2c
    return publish(topic, payload, false, qos, false, packetId);
   d5c44:	ac03      	add	r4, sp, #12
   d5c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5c48:	e895 0003 	ldmia.w	r5, {r0, r1}
   d5c4c:	e884 0003 	stmia.w	r4, {r0, r1}
   d5c50:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5c52:	9302      	str	r3, [sp, #8]
   d5c54:	2300      	movs	r3, #0
   d5c56:	9301      	str	r3, [sp, #4]
   d5c58:	f8cd c000 	str.w	ip, [sp]
   d5c5c:	4672      	mov	r2, lr
   d5c5e:	4639      	mov	r1, r7
   d5c60:	4630      	mov	r0, r6
   d5c62:	f7ff ffbf 	bl	d5be4 <_ZN5MQTT57publishEPKcS1_b9MQTT5_QOSbPt22MQTT5PublishProperties>
}
   d5c66:	b00b      	add	sp, #44	; 0x2c
   d5c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5c6a:	bf00      	nop
   d5c6c:	000dc110 	.word	0x000dc110

000d5c70 <_ZN5MQTT55closeEv>:
    buffer[(*position)++] = content >> 8;
    buffer[(*position)++] = content & 0xFF;
    return true;
}

void MQTT5::close() {
   d5c70:	b510      	push	{r4, lr}
   d5c72:	4604      	mov	r4, r0
    free(registeredTopicAlias);
   d5c74:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d5c76:	f000 fe3f 	bl	d68f8 <free>
    registeredTopicAlias = NULL;
   d5c7a:	2300      	movs	r3, #0
    registeredTopicAliasLen = 0;
    isConnecting = false;
    packetsInFlight = 0;
    socket->stop();
   d5c7c:	6860      	ldr	r0, [r4, #4]
    return true;
}

void MQTT5::close() {
    free(registeredTopicAlias);
    registeredTopicAlias = NULL;
   d5c7e:	6323      	str	r3, [r4, #48]	; 0x30
    registeredTopicAliasLen = 0;
   d5c80:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    isConnecting = false;
   d5c84:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    packetsInFlight = 0;
   d5c88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    socket->stop();
   d5c8c:	6803      	ldr	r3, [r0, #0]
}
   d5c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    free(registeredTopicAlias);
    registeredTopicAlias = NULL;
    registeredTopicAliasLen = 0;
    isConnecting = false;
    packetsInFlight = 0;
    socket->stop();
   d5c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5c94:	4718      	bx	r3
	...

000d5c98 <_ZN5MQTT520processPacketConnAckEhtt>:
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}

void MQTT5::processPacketConnAck(uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    isConnecting = false;
   d5c9a:	2300      	movs	r3, #0
   d5c9c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    bool sessionPresent = buffer[index++] & 0x1;
   d5ca0:	1c53      	adds	r3, r2, #1
   d5ca2:	6881      	ldr	r1, [r0, #8]
   d5ca4:	b29b      	uxth	r3, r3
   d5ca6:	f8ad 3006 	strh.w	r3, [sp, #6]
   d5caa:	5c8e      	ldrb	r6, [r1, r2]
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
   d5cac:	3202      	adds	r2, #2
   d5cae:	f8ad 2006 	strh.w	r2, [sp, #6]
   d5cb2:	5ccd      	ldrb	r5, [r1, r3]
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}

void MQTT5::processPacketConnAck(uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5cb4:	4604      	mov	r4, r0
    isConnecting = false;
    bool sessionPresent = buffer[index++] & 0x1;
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
    if (reasonCode == MQTT5_REASON_CODE::SUCCESS) {
   d5cb6:	bb05      	cbnz	r5, d5cfa <_ZN5MQTT520processPacketConnAckEhtt+0x62>
        uint16_t propertiesLength;
        if (readVariableByteInteger(&index, &propertiesLength) && propertiesLength > 0) {
   d5cb8:	f10d 020e 	add.w	r2, sp, #14
   d5cbc:	f10d 0106 	add.w	r1, sp, #6
   d5cc0:	f7ff f97a 	bl	d4fb8 <_ZN5MQTT523readVariableByteIntegerEPtS0_>
   d5cc4:	b110      	cbz	r0, d5ccc <_ZN5MQTT520processPacketConnAckEhtt+0x34>
   d5cc6:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d5cca:	bb13      	cbnz	r3, d5d12 <_ZN5MQTT520processPacketConnAckEhtt+0x7a>
        }
        lastPingSent = 0;
        pingRetries = 0;
        nextPacketId = 1;
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5ccc:	f894 002e 	ldrb.w	r0, [r4, #46]	; 0x2e
                processPacketConnAckProperties(buffer[index++], &index);
            }
        }
        lastPingSent = 0;
        pingRetries = 0;
        nextPacketId = 1;
   d5cd0:	2301      	movs	r3, #1
            uint16_t propertiesStartIndex = index;
            while (index - propertiesStartIndex < propertiesLength) {
                processPacketConnAckProperties(buffer[index++], &index);
            }
        }
        lastPingSent = 0;
   d5cd2:	2500      	movs	r5, #0
        pingRetries = 0;
        nextPacketId = 1;
   d5cd4:	8563      	strh	r3, [r4, #42]	; 0x2a
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5cd6:	4098      	lsls	r0, r3
            uint16_t propertiesStartIndex = index;
            while (index - propertiesStartIndex < propertiesLength) {
                processPacketConnAckProperties(buffer[index++], &index);
            }
        }
        lastPingSent = 0;
   d5cd8:	6225      	str	r5, [r4, #32]
        pingRetries = 0;
   d5cda:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        nextPacketId = 1;
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5cde:	f000 fe03 	bl	d68e8 <malloc>
        registeredTopicAliasLen = 0;
   d5ce2:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
        }
        lastPingSent = 0;
        pingRetries = 0;
        nextPacketId = 1;
        // init topic alias array
        registeredTopicAlias = (uint16_t*) malloc(maxTopicAlias * sizeof(uint16_t));
   d5ce6:	6320      	str	r0, [r4, #48]	; 0x30
        registeredTopicAliasLen = 0;
        logger.info("Successfully connected");
   d5ce8:	4915      	ldr	r1, [pc, #84]	; (d5d40 <_ZN5MQTT520processPacketConnAckEhtt+0xa8>)
   d5cea:	4620      	mov	r0, r4
   d5cec:	f7fe fa5a 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (callbackConnectSuccess)
   d5cf0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5cf2:	b313      	cbz	r3, d5d3a <_ZN5MQTT520processPacketConnAckEhtt+0xa2>
            callbackConnectSuccess(sessionPresent);
   d5cf4:	f006 0001 	and.w	r0, r6, #1
   d5cf8:	e009      	b.n	d5d0e <_ZN5MQTT520processPacketConnAckEhtt+0x76>
    } else {
        close();
   d5cfa:	f7ff ffb9 	bl	d5c70 <_ZN5MQTT55closeEv>
        logger.info("Failed to connect. Reason: %d", (uint8_t) reasonCode);   
   d5cfe:	462a      	mov	r2, r5
   d5d00:	4910      	ldr	r1, [pc, #64]	; (d5d44 <_ZN5MQTT520processPacketConnAckEhtt+0xac>)
   d5d02:	4620      	mov	r0, r4
   d5d04:	f7fe fa4e 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (callbackConnectFailed)
   d5d08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5d0a:	b1b3      	cbz	r3, d5d3a <_ZN5MQTT520processPacketConnAckEhtt+0xa2>
            callbackConnectFailed(reasonCode);
   d5d0c:	4628      	mov	r0, r5
   d5d0e:	4798      	blx	r3
    }
}
   d5d10:	e013      	b.n	d5d3a <_ZN5MQTT520processPacketConnAckEhtt+0xa2>
    bool sessionPresent = buffer[index++] & 0x1;
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
    if (reasonCode == MQTT5_REASON_CODE::SUCCESS) {
        uint16_t propertiesLength;
        if (readVariableByteInteger(&index, &propertiesLength) && propertiesLength > 0) {
            uint16_t propertiesStartIndex = index;
   d5d12:	f8bd 5006 	ldrh.w	r5, [sp, #6]
            while (index - propertiesStartIndex < propertiesLength) {
   d5d16:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d5d1a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   d5d1e:	1b59      	subs	r1, r3, r5
   d5d20:	4291      	cmp	r1, r2
   d5d22:	dad3      	bge.n	d5ccc <_ZN5MQTT520processPacketConnAckEhtt+0x34>
                processPacketConnAckProperties(buffer[index++], &index);
   d5d24:	1c5a      	adds	r2, r3, #1
   d5d26:	68a1      	ldr	r1, [r4, #8]
   d5d28:	f8ad 2006 	strh.w	r2, [sp, #6]
   d5d2c:	5cc9      	ldrb	r1, [r1, r3]
   d5d2e:	f10d 0206 	add.w	r2, sp, #6
   d5d32:	4620      	mov	r0, r4
   d5d34:	f7ff fa5a 	bl	d51ec <_ZN5MQTT530processPacketConnAckPropertiesEhPt>
    MQTT5_REASON_CODE reasonCode = (MQTT5_REASON_CODE) buffer[index++];
    if (reasonCode == MQTT5_REASON_CODE::SUCCESS) {
        uint16_t propertiesLength;
        if (readVariableByteInteger(&index, &propertiesLength) && propertiesLength > 0) {
            uint16_t propertiesStartIndex = index;
            while (index - propertiesStartIndex < propertiesLength) {
   d5d38:	e7ed      	b.n	d5d16 <_ZN5MQTT520processPacketConnAckEhtt+0x7e>
        close();
        logger.info("Failed to connect. Reason: %d", (uint8_t) reasonCode);   
        if (callbackConnectFailed)
            callbackConnectFailed(reasonCode);
    }
}
   d5d3a:	b004      	add	sp, #16
   d5d3c:	bd70      	pop	{r4, r5, r6, pc}
   d5d3e:	bf00      	nop
   d5d40:	000dbf12 	.word	0x000dbf12
   d5d44:	000dbf29 	.word	0x000dbf29

000d5d48 <_ZN5MQTT523processPacketDisconnectEhtt>:
void MQTT5::processPacketPingResp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    lastPingSent = 0;
    pingRetries = 0;
}

void MQTT5::processPacketDisconnect(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
   d5d48:	b510      	push	{r4, lr}
   d5d4a:	4604      	mov	r4, r0
    MQTT5_REASON_CODE reason = contentLength == 0 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
   d5d4c:	b113      	cbz	r3, d5d54 <_ZN5MQTT523processPacketDisconnectEhtt+0xc>
   d5d4e:	6883      	ldr	r3, [r0, #8]
   d5d50:	5c9a      	ldrb	r2, [r3, r2]
   d5d52:	e000      	b.n	d5d56 <_ZN5MQTT523processPacketDisconnectEhtt+0xe>
   d5d54:	461a      	mov	r2, r3
    logger.info("Received disconnect from server due to reason %d", (uint8_t) reason);
   d5d56:	4620      	mov	r0, r4
   d5d58:	4903      	ldr	r1, [pc, #12]	; (d5d68 <_ZN5MQTT523processPacketDisconnectEhtt+0x20>)
   d5d5a:	f7fe fa23 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
    close();
   d5d5e:	4620      	mov	r0, r4
}
   d5d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void MQTT5::processPacketDisconnect(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    MQTT5_REASON_CODE reason = contentLength == 0 ? MQTT5_REASON_CODE::SUCCESS : (MQTT5_REASON_CODE) buffer[startIndex++];
    logger.info("Received disconnect from server due to reason %d", (uint8_t) reason);
    close();
   d5d64:	f7ff bf84 	b.w	d5c70 <_ZN5MQTT55closeEv>
   d5d68:	000dbf47 	.word	0x000dbf47

000d5d6c <_ZN5MQTT513processPacketEhhtt>:
        }
    }
    return 0;
}

void MQTT5::processPacket(uint8_t packetType, uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5d6c:	b570      	push	{r4, r5, r6, lr}
   d5d6e:	460c      	mov	r4, r1
    switch (packetType) {
   d5d70:	1ea5      	subs	r5, r4, #2
        }
    }
    return 0;
}

void MQTT5::processPacket(uint8_t packetType, uint8_t flags, uint16_t index, uint16_t contentLength) {
   d5d72:	4611      	mov	r1, r2
   d5d74:	461a      	mov	r2, r3
   d5d76:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    switch (packetType) {
   d5d7a:	2d0c      	cmp	r5, #12
   d5d7c:	d831      	bhi.n	d5de2 <_ZN5MQTT513processPacketEhhtt+0x76>
   d5d7e:	e8df f005 	tbb	[pc, r5]
   d5d82:	0b07      	.short	0x0b07
   d5d84:	1b170f0f 	.word	0x1b170f0f
   d5d88:	23301f30 	.word	0x23301f30
   d5d8c:	2730      	.short	0x2730
   d5d8e:	2c          	.byte	0x2c
   d5d8f:	00          	.byte	0x00
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5d90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
}

void MQTT5::processPacket(uint8_t packetType, uint8_t flags, uint16_t index, uint16_t contentLength) {
    switch (packetType) {
        case CTRL_CONNACK:
            processPacketConnAck(flags, index, contentLength);
   d5d94:	f7ff bf80 	b.w	d5c98 <_ZN5MQTT520processPacketConnAckEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    switch (packetType) {
        case CTRL_CONNACK:
            processPacketConnAck(flags, index, contentLength);
            break;
        case CTRL_PUBLISH:
            processPacketPub(flags, index, contentLength);
   d5d9c:	f7ff bd12 	b.w	d57c4 <_ZN5MQTT516processPacketPubEhtt>
            break;
        case CTRL_PUBACK:
        case CTRL_PUBREC:
            processPacketPubAckRec(flags, index, contentLength, packetType == CTRL_PUBACK);
   d5da0:	1f25      	subs	r5, r4, #4
   d5da2:	426c      	negs	r4, r5
   d5da4:	416c      	adcs	r4, r5
   d5da6:	9404      	str	r4, [sp, #16]
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5da8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case CTRL_PUBLISH:
            processPacketPub(flags, index, contentLength);
            break;
        case CTRL_PUBACK:
        case CTRL_PUBREC:
            processPacketPubAckRec(flags, index, contentLength, packetType == CTRL_PUBACK);
   d5dac:	f7ff b946 	b.w	d503c <_ZN5MQTT522processPacketPubAckRecEhttb>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5db0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        case CTRL_PUBACK:
        case CTRL_PUBREC:
            processPacketPubAckRec(flags, index, contentLength, packetType == CTRL_PUBACK);
            break;
        case CTRL_PUBREL:
            processPacketPubRel(flags, index, contentLength);
   d5db4:	f7ff bdb0 	b.w	d5918 <_ZN5MQTT519processPacketPubRelEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_PUBREL:
            processPacketPubRel(flags, index, contentLength);
            break;
        case CTRL_PUBCOMP:
            processPacketPubComp(flags, index, contentLength);
   d5dbc:	f7ff b976 	b.w	d50ac <_ZN5MQTT520processPacketPubCompEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5dc0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_PUBCOMP:
            processPacketPubComp(flags, index, contentLength);
            break;
        case CTRL_SUBACK:
            processPacketSubAck(flags, index, contentLength);
   d5dc4:	f7ff b990 	b.w	d50e8 <_ZN5MQTT519processPacketSubAckEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5dc8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_SUBACK:
            processPacketSubAck(flags, index, contentLength);
            break;
        case CTRL_UNSUBACK:
            processPacketUnsub(flags, index, contentLength);
   d5dcc:	f7ff b9c4 	b.w	d5158 <_ZN5MQTT518processPacketUnsubEhtt>
        }
    }
}

void MQTT5::processPacketPingResp(uint8_t flags, uint16_t startIndex, uint16_t contentLength) {
    lastPingSent = 0;
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	6203      	str	r3, [r0, #32]
    pingRetries = 0;
   d5dd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   d5dd8:	bd70      	pop	{r4, r5, r6, pc}
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
            break;
    }
}
   d5dda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            break;
        case CTRL_PINGRESP:
            processPacketPingResp(flags, index, contentLength);
            break;
        case CTRL_DISCONNECT:
            processPacketDisconnect(flags, index, contentLength);
   d5dde:	f7ff bfb3 	b.w	d5d48 <_ZN5MQTT523processPacketDisconnectEhtt>
            break;
        default: 
            logger.info("Unkown control packet type %d", packetType);   
   d5de2:	4622      	mov	r2, r4
   d5de4:	4901      	ldr	r1, [pc, #4]	; (d5dec <_ZN5MQTT513processPacketEhhtt+0x80>)
   d5de6:	f7fe f9dd 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d5dea:	bd70      	pop	{r4, r5, r6, pc}
   d5dec:	000dbf78 	.word	0x000dbf78

000d5df0 <_ZN5MQTT54loopEv>:
    }
    logger.trace("Await timed out");
    return false;
}

uint8_t MQTT5::loop() {
   d5df0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5df2:	4604      	mov	r4, r0
    // Check if connecting takes too long
    if (connecting()) {
   d5df4:	f7ff f8a0 	bl	d4f38 <_ZN5MQTT510connectingEv>
   d5df8:	b328      	cbz	r0, d5e46 <_ZN5MQTT54loopEv+0x56>
        if (!socket->connected()) {
   d5dfa:	6860      	ldr	r0, [r4, #4]
   d5dfc:	6803      	ldr	r3, [r0, #0]
   d5dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5e00:	4798      	blx	r3
   d5e02:	4605      	mov	r5, r0
   d5e04:	b938      	cbnz	r0, d5e16 <_ZN5MQTT54loopEv+0x26>
            close();
   d5e06:	4620      	mov	r0, r4
   d5e08:	f7ff ff32 	bl	d5c70 <_ZN5MQTT55closeEv>
            logger.info("Socked closed");
   d5e0c:	4955      	ldr	r1, [pc, #340]	; (d5f64 <_ZN5MQTT54loopEv+0x174>)
   d5e0e:	4620      	mov	r0, r4
   d5e10:	f7fe f9c8 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            return 0;
   d5e14:	e0a2      	b.n	d5f5c <_ZN5MQTT54loopEv+0x16c>
   d5e16:	f000 fac9 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
        } else if (millis() - lastOutbound > keepAlive*1000UL) {
   d5e1a:	69a3      	ldr	r3, [r4, #24]
   d5e1c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d5e1e:	1ac0      	subs	r0, r0, r3
   d5e20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e24:	4353      	muls	r3, r2
   d5e26:	4298      	cmp	r0, r3
   d5e28:	d90d      	bls.n	d5e46 <_ZN5MQTT54loopEv+0x56>
            close();
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f7ff ff20 	bl	d5c70 <_ZN5MQTT55closeEv>
            logger.info("Connect timed out");
   d5e30:	494d      	ldr	r1, [pc, #308]	; (d5f68 <_ZN5MQTT54loopEv+0x178>)
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7fe f9b6 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            if (callbackConnectFailed)
   d5e38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d5e3a:	2b00      	cmp	r3, #0
   d5e3c:	f000 808d 	beq.w	d5f5a <_ZN5MQTT54loopEv+0x16a>
                callbackConnectFailed(MQTT5_REASON_CODE::UNSPECIFIED_ERROR);
   d5e40:	2080      	movs	r0, #128	; 0x80
   d5e42:	4798      	blx	r3
   d5e44:	e089      	b.n	d5f5a <_ZN5MQTT54loopEv+0x16a>
            return 0;
        }
    }

    // Read data from socket
    if (socket->available()) {
   d5e46:	6860      	ldr	r0, [r4, #4]
   d5e48:	6803      	ldr	r3, [r0, #0]
   d5e4a:	691b      	ldr	r3, [r3, #16]
   d5e4c:	4798      	blx	r3
   d5e4e:	2800      	cmp	r0, #0
   d5e50:	d043      	beq.n	d5eda <_ZN5MQTT54loopEv+0xea>
   d5e52:	f000 faab 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
        lastInbound = millis();
   d5e56:	61e0      	str	r0, [r4, #28]
        uint16_t readLength = socket->read(buffer, maxPacketSize);
   d5e58:	6860      	ldr	r0, [r4, #4]
   d5e5a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   d5e5c:	6803      	ldr	r3, [r0, #0]
   d5e5e:	68a1      	ldr	r1, [r4, #8]
   d5e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5e62:	4798      	blx	r3
        logger.dump(buffer, readLength);
        logger.print("\n");
#endif

        uint16_t index = 1;
        uint16_t contentLength = 0;
   d5e64:	aa04      	add	r2, sp, #16
   d5e66:	2500      	movs	r5, #0
    }

    // Read data from socket
    if (socket->available()) {
        lastInbound = millis();
        uint16_t readLength = socket->read(buffer, maxPacketSize);
   d5e68:	4606      	mov	r6, r0
        logger.trace("Read %d bytes:", readLength);
        logger.dump(buffer, readLength);
        logger.print("\n");
#endif

        uint16_t index = 1;
   d5e6a:	2301      	movs	r3, #1
        uint16_t contentLength = 0;
   d5e6c:	f822 5d02 	strh.w	r5, [r2, #-2]!
        
        if (!readVariableByteInteger(&index, &contentLength)) {
   d5e70:	a903      	add	r1, sp, #12
   d5e72:	4620      	mov	r0, r4
        logger.trace("Read %d bytes:", readLength);
        logger.dump(buffer, readLength);
        logger.print("\n");
#endif

        uint16_t index = 1;
   d5e74:	f8ad 300c 	strh.w	r3, [sp, #12]
        uint16_t contentLength = 0;
        
        if (!readVariableByteInteger(&index, &contentLength)) {
   d5e78:	f7ff f89e 	bl	d4fb8 <_ZN5MQTT523readVariableByteIntegerEPtS0_>
   d5e7c:	b358      	cbz	r0, d5ed6 <_ZN5MQTT54loopEv+0xe6>
            return 0;
        } else if (readLength != contentLength + index) {
   d5e7e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   d5e82:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   d5e86:	b2b6      	uxth	r6, r6
   d5e88:	441a      	add	r2, r3
   d5e8a:	4296      	cmp	r6, r2
   d5e8c:	d001      	beq.n	d5e92 <_ZN5MQTT54loopEv+0xa2>
            logger.warn("Packet not complete");
   d5e8e:	4937      	ldr	r1, [pc, #220]	; (d5f6c <_ZN5MQTT54loopEv+0x17c>)
   d5e90:	e05f      	b.n	d5f52 <_ZN5MQTT54loopEv+0x162>
            return 0;
        }

        uint8_t packetType = (buffer[0] >> 4);
   d5e92:	68a2      	ldr	r2, [r4, #8]
   d5e94:	7812      	ldrb	r2, [r2, #0]
   d5e96:	1112      	asrs	r2, r2, #4
        if (packetType != CTRL_PINGRESP && 
   d5e98:	2a0d      	cmp	r2, #13
        } else if (readLength != contentLength + index) {
            logger.warn("Packet not complete");
            return 0;
        }

        uint8_t packetType = (buffer[0] >> 4);
   d5e9a:	b2d5      	uxtb	r5, r2
        if (packetType != CTRL_PINGRESP && 
   d5e9c:	d009      	beq.n	d5eb2 <_ZN5MQTT54loopEv+0xc2>
   d5e9e:	2a03      	cmp	r2, #3
   d5ea0:	d007      	beq.n	d5eb2 <_ZN5MQTT54loopEv+0xc2>
            packetType != CTRL_PUBLISH && 
   d5ea2:	2d0e      	cmp	r5, #14
            packetType != CTRL_DISCONNECT)
            packetsInFlight--;
   d5ea4:	bf1e      	ittt	ne
   d5ea6:	f894 1035 	ldrbne.w	r1, [r4, #53]	; 0x35
   d5eaa:	f101 31ff 	addne.w	r1, r1, #4294967295
   d5eae:	f884 1035 	strbne.w	r1, [r4, #53]	; 0x35
            
        logger.trace("Received packet type %d with length %d", packetType, contentLength);
   d5eb2:	4620      	mov	r0, r4
   d5eb4:	492e      	ldr	r1, [pc, #184]	; (d5f70 <_ZN5MQTT54loopEv+0x180>)
   d5eb6:	f7ff f807 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
        processPacket(packetType, buffer[0] & 0xF, index, contentLength);
   d5eba:	68a2      	ldr	r2, [r4, #8]
   d5ebc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d5ec0:	7812      	ldrb	r2, [r2, #0]
   d5ec2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   d5ec6:	9100      	str	r1, [sp, #0]
   d5ec8:	f002 020f 	and.w	r2, r2, #15
   d5ecc:	4629      	mov	r1, r5
   d5ece:	4620      	mov	r0, r4
   d5ed0:	f7ff ff4c 	bl	d5d6c <_ZN5MQTT513processPacketEhhtt>
        return packetType;
   d5ed4:	e042      	b.n	d5f5c <_ZN5MQTT54loopEv+0x16c>

        uint16_t index = 1;
        uint16_t contentLength = 0;
        
        if (!readVariableByteInteger(&index, &contentLength)) {
            return 0;
   d5ed6:	4605      	mov	r5, r0
   d5ed8:	e040      	b.n	d5f5c <_ZN5MQTT54loopEv+0x16c>
        logger.trace("Received packet type %d with length %d", packetType, contentLength);
        processPacket(packetType, buffer[0] & 0xF, index, contentLength);
        return packetType;
    }
    
    if (!connected())
   d5eda:	4620      	mov	r0, r4
   d5edc:	f7ff f833 	bl	d4f46 <_ZN5MQTT59connectedEv>
   d5ee0:	2800      	cmp	r0, #0
   d5ee2:	d03a      	beq.n	d5f5a <_ZN5MQTT54loopEv+0x16a>
   d5ee4:	f000 fa62 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
        return 0;

    // Check keep alive interval
    if ((millis() - lastInbound >= keepAlive*1000UL) || (millis() - lastOutbound >= keepAlive*1000UL)) {
   d5ee8:	69e3      	ldr	r3, [r4, #28]
   d5eea:	1ac0      	subs	r0, r0, r3
   d5eec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d5eee:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   d5ef2:	436b      	muls	r3, r5
   d5ef4:	4298      	cmp	r0, r3
   d5ef6:	d207      	bcs.n	d5f08 <_ZN5MQTT54loopEv+0x118>
   d5ef8:	f000 fa58 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
   d5efc:	69a3      	ldr	r3, [r4, #24]
   d5efe:	1ac0      	subs	r0, r0, r3
   d5f00:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   d5f02:	435d      	muls	r5, r3
   d5f04:	42a8      	cmp	r0, r5
   d5f06:	d309      	bcc.n	d5f1c <_ZN5MQTT54loopEv+0x12c>
        if (lastPingSent == 0 && !ping()) {
   d5f08:	6a23      	ldr	r3, [r4, #32]
   d5f0a:	b94b      	cbnz	r3, d5f20 <_ZN5MQTT54loopEv+0x130>
   d5f0c:	4620      	mov	r0, r4
   d5f0e:	f7ff fb67 	bl	d55e0 <_ZN5MQTT54pingEv>
   d5f12:	b918      	cbnz	r0, d5f1c <_ZN5MQTT54loopEv+0x12c>
            logger.warn("Ping could not be sent");
   d5f14:	4917      	ldr	r1, [pc, #92]	; (d5f74 <_ZN5MQTT54loopEv+0x184>)
   d5f16:	4620      	mov	r0, r4
   d5f18:	f7fe ffe4 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
        }
    }

    // Check if ping needs retry
    if (lastPingSent != 0 && millis() - lastPingSent >= PING_TIMEOUT && pingRetries < 2) {
   d5f1c:	6a23      	ldr	r3, [r4, #32]
   d5f1e:	b1e3      	cbz	r3, d5f5a <_ZN5MQTT54loopEv+0x16a>
   d5f20:	f000 fa44 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
   d5f24:	6a23      	ldr	r3, [r4, #32]
   d5f26:	1ac0      	subs	r0, r0, r3
   d5f28:	f640 33b7 	movw	r3, #2999	; 0xbb7
   d5f2c:	4298      	cmp	r0, r3
   d5f2e:	d914      	bls.n	d5f5a <_ZN5MQTT54loopEv+0x16a>
   d5f30:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   d5f34:	2b01      	cmp	r3, #1
   d5f36:	d810      	bhi.n	d5f5a <_ZN5MQTT54loopEv+0x16a>
        pingRetries++;
   d5f38:	3301      	adds	r3, #1
   d5f3a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        logger.info("Ping response not received yet. Resending ping request");
   d5f3e:	490e      	ldr	r1, [pc, #56]	; (d5f78 <_ZN5MQTT54loopEv+0x188>)
   d5f40:	4620      	mov	r0, r4
   d5f42:	f7fe f92f 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        if (!ping()) {
   d5f46:	4620      	mov	r0, r4
   d5f48:	f7ff fb4a 	bl	d55e0 <_ZN5MQTT54pingEv>
   d5f4c:	4605      	mov	r5, r0
   d5f4e:	b920      	cbnz	r0, d5f5a <_ZN5MQTT54loopEv+0x16a>
            logger.warn("Ping could not be sent");
   d5f50:	4908      	ldr	r1, [pc, #32]	; (d5f74 <_ZN5MQTT54loopEv+0x184>)
   d5f52:	4620      	mov	r0, r4
   d5f54:	f7fe ffc6 	bl	d4ee4 <_ZNK5spark6Logger4warnEPKcz>
   d5f58:	e000      	b.n	d5f5c <_ZN5MQTT54loopEv+0x16c>
        }
    }
    return 0;
   d5f5a:	2500      	movs	r5, #0
}
   d5f5c:	4628      	mov	r0, r5
   d5f5e:	b004      	add	sp, #16
   d5f60:	bd70      	pop	{r4, r5, r6, pc}
   d5f62:	bf00      	nop
   d5f64:	000dbf96 	.word	0x000dbf96
   d5f68:	000dbfa4 	.word	0x000dbfa4
   d5f6c:	000dbfb6 	.word	0x000dbfb6
   d5f70:	000dbfca 	.word	0x000dbfca
   d5f74:	000dbff1 	.word	0x000dbff1
   d5f78:	000dc008 	.word	0x000dc008

000d5f7c <_ZN5MQTT512awaitPacketsEm>:

uint8_t MQTT5::packetsAwaitingAck() {
    return packetsInFlight;
}

bool MQTT5::awaitPackets(unsigned long timeout) {
   d5f7c:	b570      	push	{r4, r5, r6, lr}
   d5f7e:	4604      	mov	r4, r0
   d5f80:	460e      	mov	r6, r1
   d5f82:	f000 fa13 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
    unsigned long t = millis();
    logger.trace("Await packet acks");
   d5f86:	490e      	ldr	r1, [pc, #56]	; (d5fc0 <_ZN5MQTT512awaitPacketsEm+0x44>)
   d5f88:	4605      	mov	r5, r0
   d5f8a:	4620      	mov	r0, r4
   d5f8c:	f7fe ff9c 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
   d5f90:	f000 fa0c 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
    while (millis() - t < timeout) {
   d5f94:	1b40      	subs	r0, r0, r5
   d5f96:	42b0      	cmp	r0, r6
   d5f98:	d20c      	bcs.n	d5fb4 <_ZN5MQTT512awaitPacketsEm+0x38>
        loop();
   d5f9a:	4620      	mov	r0, r4
   d5f9c:	f7ff ff28 	bl	d5df0 <_ZN5MQTT54loopEv>
        if (packetsAwaitingAck() == 0) {
   d5fa0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
   d5fa4:	2b00      	cmp	r3, #0
   d5fa6:	d1f3      	bne.n	d5f90 <_ZN5MQTT512awaitPacketsEm+0x14>
            logger.trace("All packets acknowledged");
   d5fa8:	4620      	mov	r0, r4
   d5faa:	4906      	ldr	r1, [pc, #24]	; (d5fc4 <_ZN5MQTT512awaitPacketsEm+0x48>)
   d5fac:	f7fe ff8c 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
            return true;
   d5fb0:	2001      	movs	r0, #1
   d5fb2:	bd70      	pop	{r4, r5, r6, pc}
        }
    }
    logger.trace("Await timed out");
   d5fb4:	4620      	mov	r0, r4
   d5fb6:	4904      	ldr	r1, [pc, #16]	; (d5fc8 <_ZN5MQTT512awaitPacketsEm+0x4c>)
   d5fb8:	f7fe ff86 	bl	d4ec8 <_ZNK5spark6Logger5traceEPKcz>
    return false;
   d5fbc:	2000      	movs	r0, #0
}
   d5fbe:	bd70      	pop	{r4, r5, r6, pc}
   d5fc0:	000dc03f 	.word	0x000dc03f
   d5fc4:	000dc051 	.word	0x000dc051
   d5fc8:	000dc06a 	.word	0x000dc06a

000d5fcc <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions>:
    hostDomain = domain;
    hostPort = port;
    return connect(clientId, options);
}

bool MQTT5::connect(const char *clientId, MQTT5ConnectOptions options) {
   d5fcc:	b082      	sub	sp, #8
   d5fce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fd2:	b08f      	sub	sp, #60	; 0x3c
   d5fd4:	4604      	mov	r4, r0
   d5fd6:	9105      	str	r1, [sp, #20]
   d5fd8:	a918      	add	r1, sp, #96	; 0x60
   d5fda:	e881 000c 	stmia.w	r1, {r2, r3}
   d5fde:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   d5fe0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
   d5fe2:	9304      	str	r3, [sp, #16]
   d5fe4:	f8dd 9074 	ldr.w	r9, [sp, #116]	; 0x74
   d5fe8:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
   d5fec:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
    if (connecting())
   d5fee:	f7fe ffa3 	bl	d4f38 <_ZN5MQTT510connectingEv>
   d5ff2:	4682      	mov	sl, r0
   d5ff4:	2800      	cmp	r0, #0
   d5ff6:	f040 815b 	bne.w	d62b0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2e4>
        return true;
    
    keepAlive = options.keepAlive;
   d5ffa:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
   d5ffe:	84e3      	strh	r3, [r4, #38]	; 0x26
    if (!connected()) {
   d6000:	4620      	mov	r0, r4
   d6002:	f7fe ffa0 	bl	d4f46 <_ZN5MQTT59connectedEv>
   d6006:	4606      	mov	r6, r0
   d6008:	2800      	cmp	r0, #0
   d600a:	f040 814d 	bne.w	d62a8 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2dc>
        isConnecting = true;
        bool success = true;
        if (hostIp == NULL) { // Use domain to connect
   d600e:	6921      	ldr	r1, [r4, #16]
    if (connecting())
        return true;
    
    keepAlive = options.keepAlive;
    if (!connected()) {
        isConnecting = true;
   d6010:	2301      	movs	r3, #1
   d6012:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6016:	8aa3      	ldrh	r3, [r4, #20]
        bool success = true;
        if (hostIp == NULL) { // Use domain to connect
   d6018:	b969      	cbnz	r1, d6036 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x6a>
            logger.info("Connecting to server %s on port %d", hostDomain, hostPort);
   d601a:	68e2      	ldr	r2, [r4, #12]
   d601c:	49a7      	ldr	r1, [pc, #668]	; (d62bc <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2f0>)
   d601e:	4620      	mov	r0, r4
   d6020:	f7fe f8c0 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            success = socket->connect(hostDomain, hostPort);
   d6024:	6860      	ldr	r0, [r4, #4]
   d6026:	8aa2      	ldrh	r2, [r4, #20]
   d6028:	6803      	ldr	r3, [r0, #0]
   d602a:	68e1      	ldr	r1, [r4, #12]
   d602c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   d6030:	4633      	mov	r3, r6
   d6032:	47d0      	blx	sl
   d6034:	e01a      	b.n	d606c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xa0>
        } else { // Use ip address to connect
            logger.info("Connecting to server %d.%d.%d.%d on port %d", hostIp[0], hostIp[1], hostIp[2], hostIp[3], hostPort);
   d6036:	7848      	ldrb	r0, [r1, #1]
   d6038:	780a      	ldrb	r2, [r1, #0]
   d603a:	9302      	str	r3, [sp, #8]
   d603c:	78cb      	ldrb	r3, [r1, #3]
   d603e:	9301      	str	r3, [sp, #4]
   d6040:	788b      	ldrb	r3, [r1, #2]
   d6042:	9300      	str	r3, [sp, #0]
   d6044:	499e      	ldr	r1, [pc, #632]	; (d62c0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2f4>)
   d6046:	4603      	mov	r3, r0
   d6048:	4620      	mov	r0, r4
   d604a:	f7fe f8ab 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
            success = socket->connect(hostIp, hostPort);
   d604e:	f8d4 a004 	ldr.w	sl, [r4, #4]
   d6052:	6921      	ldr	r1, [r4, #16]
   d6054:	f8da 3000 	ldr.w	r3, [sl]
   d6058:	a808      	add	r0, sp, #32
   d605a:	f8d3 b020 	ldr.w	fp, [r3, #32]
   d605e:	f003 fe9b 	bl	d9d98 <_ZN9IPAddressC1EPKh>
   d6062:	4633      	mov	r3, r6
   d6064:	8aa2      	ldrh	r2, [r4, #20]
   d6066:	a908      	add	r1, sp, #32
   d6068:	4650      	mov	r0, sl
   d606a:	47d8      	blx	fp
   d606c:	3000      	adds	r0, #0
   d606e:	bf18      	it	ne
   d6070:	2001      	movne	r0, #1
        }

        // Check if TCP connection was open successfully
        if (!success) {
   d6072:	b920      	cbnz	r0, d607e <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xb2>
            logger.info("Could not open TCP connection to server");
   d6074:	4993      	ldr	r1, [pc, #588]	; (d62c4 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2f8>)
   d6076:	4620      	mov	r0, r4
   d6078:	f7fe f894 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
   d607c:	e00c      	b.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }
        
        packetsInFlight = 0;
        uint16_t index = 0;
   d607e:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
            logger.info("Could not open TCP connection to server");
            close();
            return false;
        }
        
        packetsInFlight = 0;
   d6082:	2300      	movs	r3, #0
        uint16_t index = 0;
   d6084:	f82a 3d1a 	strh.w	r3, [sl, #-26]!
            logger.info("Could not open TCP connection to server");
            close();
            return false;
        }
        
        packetsInFlight = 0;
   d6088:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        uint16_t index = 0;
        // 3.1.1 CONNECT Fixed Header
        if (!writeByte(&index, (uint8_t) (CTRL_CONNECT << 4))) {
   d608c:	2210      	movs	r2, #16
   d608e:	4651      	mov	r1, sl
   d6090:	4620      	mov	r0, r4
   d6092:	f7ff fa91 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d6096:	b918      	cbnz	r0, d60a0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xd4>
            close();
   d6098:	4620      	mov	r0, r4
   d609a:	f7ff fde9 	bl	d5c70 <_ZN5MQTT55closeEv>
            return false;
   d609e:	e101      	b.n	d62a4 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2d8>
        }

        // 3.1.2 CONNECT Variable Header
        if (!writeUTF8String(&index, (const char[]) {'M','Q','T','T'}, 4)) {
   d60a0:	2304      	movs	r3, #4
   d60a2:	4a89      	ldr	r2, [pc, #548]	; (d62c8 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2fc>)
   d60a4:	4651      	mov	r1, sl
   d60a6:	4620      	mov	r0, r4
   d60a8:	f7ff fa5e 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d60ac:	2800      	cmp	r0, #0
   d60ae:	d0f3      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.2.2 Protocol Version
        if (!writeByte(&index, 5)) {
   d60b0:	2205      	movs	r2, #5
   d60b2:	4651      	mov	r1, sl
   d60b4:	4620      	mov	r0, r4
   d60b6:	f7ff fa7f 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d60ba:	2800      	cmp	r0, #0
   d60bc:	d0ec      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
   d60be:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
   d60c2:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
            close();
            return false;
        }
        
        // 3.1.2.3 Connect Flags
        if (!writeByte(&index, 
   d60c6:	f1b9 0f00 	cmp.w	r9, #0
   d60ca:	ea4f 01c1 	mov.w	r1, r1, lsl #3
   d60ce:	bf14      	ite	ne
   d60d0:	f06f 027f 	mvnne.w	r2, #127	; 0x7f
   d60d4:	2200      	moveq	r2, #0
   d60d6:	ea41 1143 	orr.w	r1, r1, r3, lsl #5
   d60da:	f1b8 0f00 	cmp.w	r8, #0
   d60de:	bf14      	ite	ne
   d60e0:	f04f 0e40 	movne.w	lr, #64	; 0x40
   d60e4:	f04f 0e00 	moveq.w	lr, #0
   d60e8:	b249      	sxtb	r1, r1
            ((options.username != NULL) << 7) | 
            ((options.password != NULL) << 6) | 
            (options.willRetain << 5) | 
            (((uint8_t) options.willQos) << 3) | 
            ((options.willTopic && options.willPayload) << 2) | 
   d60ea:	b127      	cbz	r7, d60f6 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x12a>
   d60ec:	9b04      	ldr	r3, [sp, #16]
   d60ee:	1c18      	adds	r0, r3, #0
   d60f0:	bf18      	it	ne
   d60f2:	2001      	movne	r0, #1
   d60f4:	e000      	b.n	d60f8 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x12c>
   d60f6:	4638      	mov	r0, r7
            close();
            return false;
        }
        
        // 3.1.2.3 Connect Flags
        if (!writeByte(&index, 
   d60f8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
   d60fc:	ea41 0343 	orr.w	r3, r1, r3, lsl #1
   d6100:	4313      	orrs	r3, r2
   d6102:	ea4e 0203 	orr.w	r2, lr, r3
   d6106:	ea42 0280 	orr.w	r2, r2, r0, lsl #2
   d610a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   d610e:	4651      	mov	r1, sl
   d6110:	4620      	mov	r0, r4
   d6112:	f7ff fa51 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d6116:	2800      	cmp	r0, #0
   d6118:	d0be      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.2.10 Keep Alive
        if (!writeInt(&index, keepAlive)) {
   d611a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d611c:	4651      	mov	r1, sl
   d611e:	4620      	mov	r0, r4
   d6120:	f7ff fad6 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d6124:	2800      	cmp	r0, #0
   d6126:	d0b7      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.2.11 CONNECT Properties
        uint16_t indexProp = index;
   d6128:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d612c:	f8ad 3020 	strh.w	r3, [sp, #32]
        if (options.properties) {
   d6130:	2d00      	cmp	r5, #0
   d6132:	d04a      	beq.n	d61ca <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1fe>
            // 3.1.2.11.2 Session Expiry Interval
            if ((*options.properties).sessionExpiryInterval > 0) {
   d6134:	682b      	ldr	r3, [r5, #0]
   d6136:	b16b      	cbz	r3, d6154 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x188>
                if (!writeByte(&indexProp, PROP_SESSION_EXPIRY_INTERVAL)) {
   d6138:	2211      	movs	r2, #17
   d613a:	a908      	add	r1, sp, #32
   d613c:	4620      	mov	r0, r4
   d613e:	f7ff fa3b 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d6142:	2800      	cmp	r0, #0
   d6144:	d0a8      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, (*options.properties).sessionExpiryInterval)) {
   d6146:	682a      	ldr	r2, [r5, #0]
   d6148:	a908      	add	r1, sp, #32
   d614a:	4620      	mov	r0, r4
   d614c:	f7ff fc08 	bl	d5960 <_ZN5MQTT58writeIntEPtm>
   d6150:	2800      	cmp	r0, #0
   d6152:	d0a1      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    return false;
                }
            }

            // 3.1.2.11.3 Receive Maximum
            if ((*options.properties).receiveMaximum > 0) {
   d6154:	88ab      	ldrh	r3, [r5, #4]
   d6156:	b16b      	cbz	r3, d6174 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1a8>
                if (!writeByte(&indexProp, PROP_RECEIVE_MAXIMUM)) {
   d6158:	2221      	movs	r2, #33	; 0x21
   d615a:	a908      	add	r1, sp, #32
   d615c:	4620      	mov	r0, r4
   d615e:	f7ff fa2b 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d6162:	2800      	cmp	r0, #0
   d6164:	d098      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, (*options.properties).receiveMaximum)) {
   d6166:	88aa      	ldrh	r2, [r5, #4]
   d6168:	a908      	add	r1, sp, #32
   d616a:	4620      	mov	r0, r4
   d616c:	f7ff fab0 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d6170:	2800      	cmp	r0, #0
   d6172:	d091      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                }
            }

            // 3.1.2.11.4 Maximum Packet Size
            uint32_t usedMaxPacketSize = (uint32_t) (
                (*options.properties).maximumPacketSize > 0 ?
   d6174:	f8d5 b008 	ldr.w	fp, [r5, #8]
                (*options.properties).maximumPacketSize : maxPacketSize);
   d6178:	f1bb 0f00 	cmp.w	fp, #0
   d617c:	d104      	bne.n	d6188 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1bc>
   d617e:	f8b4 b02c 	ldrh.w	fp, [r4, #44]	; 0x2c
            if (usedMaxPacketSize > 0) {
   d6182:	f1bb 0f00 	cmp.w	fp, #0
   d6186:	d00e      	beq.n	d61a6 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1da>
                if (!writeByte(&indexProp, PROP_MAXIMUM_PACKET_SIZE)) {
   d6188:	2227      	movs	r2, #39	; 0x27
   d618a:	a908      	add	r1, sp, #32
   d618c:	4620      	mov	r0, r4
   d618e:	f7ff fa13 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d6192:	2800      	cmp	r0, #0
   d6194:	d080      	beq.n	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, usedMaxPacketSize)) {
   d6196:	465a      	mov	r2, fp
   d6198:	a908      	add	r1, sp, #32
   d619a:	4620      	mov	r0, r4
   d619c:	f7ff fbe0 	bl	d5960 <_ZN5MQTT58writeIntEPtm>
   d61a0:	2800      	cmp	r0, #0
   d61a2:	f43f af79 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    return false;
                }
            }

            // 3.1.2.11.5 Topic Alias Maximum
            if ((*options.properties).topicAliasMaximum > 0) {
   d61a6:	89ab      	ldrh	r3, [r5, #12]
   d61a8:	b17b      	cbz	r3, d61ca <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x1fe>
                if (!writeByte(&indexProp, PROP_TOPIC_ALIAS_MAXIMUM)) {
   d61aa:	2222      	movs	r2, #34	; 0x22
   d61ac:	a908      	add	r1, sp, #32
   d61ae:	4620      	mov	r0, r4
   d61b0:	f7ff fa02 	bl	d55b8 <_ZN5MQTT59writeByteEPth>
   d61b4:	2800      	cmp	r0, #0
   d61b6:	f43f af6f 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                    close();
                    return false;
                }
                if (!writeInt(&indexProp, (*options.properties).topicAliasMaximum)) {
   d61ba:	89aa      	ldrh	r2, [r5, #12]
   d61bc:	a908      	add	r1, sp, #32
   d61be:	4620      	mov	r0, r4
   d61c0:	f7ff fa86 	bl	d56d0 <_ZN5MQTT58writeIntEPtt>
   d61c4:	2800      	cmp	r0, #0
   d61c6:	f43f af67 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                }
            }
        }

        // 3.1.2.11 CONNECT Properties length
        if (!writeVariableByteInteger(&index, indexProp - index)) {
   d61ca:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d61ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d61d2:	1a9a      	subs	r2, r3, r2
   d61d4:	b292      	uxth	r2, r2
   d61d6:	4651      	mov	r1, sl
   d61d8:	4620      	mov	r0, r4
   d61da:	f7ff f98f 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d61de:	2800      	cmp	r0, #0
   d61e0:	f43f af5a 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.3.1 Client Identifier
        if (!writeUTF8String(&index, clientId, strlen(clientId))) {
   d61e4:	9805      	ldr	r0, [sp, #20]
   d61e6:	f004 ff5c 	bl	db0a2 <strlen>
   d61ea:	9a05      	ldr	r2, [sp, #20]
   d61ec:	b283      	uxth	r3, r0
   d61ee:	4651      	mov	r1, sl
   d61f0:	4620      	mov	r0, r4
   d61f2:	f7ff f9b9 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d61f6:	2800      	cmp	r0, #0
   d61f8:	f43f af4e 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        if (options.willTopic && options.willPayload) {
   d61fc:	b1ff      	cbz	r7, d623e <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x272>
   d61fe:	9b04      	ldr	r3, [sp, #16]
   d6200:	b1eb      	cbz	r3, d623e <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x272>
            // 3.1.3.2 Will Properties
            if (!writeVariableByteInteger(&index, 0)) {
   d6202:	2200      	movs	r2, #0
   d6204:	4651      	mov	r1, sl
   d6206:	4620      	mov	r0, r4
   d6208:	f7ff f978 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d620c:	2800      	cmp	r0, #0
   d620e:	f43f af43 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                close();
                return false;
            }
            
            // 3.1.3.3 Will Topic
            if (!writeUTF8String(&index, options.willTopic, strlen(options.willTopic))) {
   d6212:	4638      	mov	r0, r7
   d6214:	f004 ff45 	bl	db0a2 <strlen>
   d6218:	463a      	mov	r2, r7
   d621a:	b283      	uxth	r3, r0
   d621c:	4651      	mov	r1, sl
   d621e:	4620      	mov	r0, r4
   d6220:	f7ff f9a2 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d6224:	2800      	cmp	r0, #0
   d6226:	f43f af37 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                close();
                return false;
            }

            // 3.1.3.4 Will Payload
            if (!writeUTF8String(&index, (const char*) options.willPayload, options.willPayloadLength)) {
   d622a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   d622e:	9a04      	ldr	r2, [sp, #16]
   d6230:	4651      	mov	r1, sl
   d6232:	4620      	mov	r0, r4
   d6234:	f7ff f998 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d6238:	2800      	cmp	r0, #0
   d623a:	f43f af2d 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
                return false;
            }
        }

        // 3.1.3.5 User Name
        if (options.username && !writeUTF8String(&index, options.username, strlen(options.username))) {
   d623e:	f1b9 0f00 	cmp.w	r9, #0
   d6242:	d00b      	beq.n	d625c <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x290>
   d6244:	4648      	mov	r0, r9
   d6246:	f004 ff2c 	bl	db0a2 <strlen>
   d624a:	464a      	mov	r2, r9
   d624c:	b283      	uxth	r3, r0
   d624e:	4651      	mov	r1, sl
   d6250:	4620      	mov	r0, r4
   d6252:	f7ff f989 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d6256:	2800      	cmp	r0, #0
   d6258:	f43f af1e 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.3.6 Password
        if (options.password && !writeUTF8String(&index, options.password, strlen(options.password))) {
   d625c:	f1b8 0f00 	cmp.w	r8, #0
   d6260:	d00b      	beq.n	d627a <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2ae>
   d6262:	4640      	mov	r0, r8
   d6264:	f004 ff1d 	bl	db0a2 <strlen>
   d6268:	4642      	mov	r2, r8
   d626a:	b283      	uxth	r3, r0
   d626c:	4651      	mov	r1, sl
   d626e:	4620      	mov	r0, r4
   d6270:	f7ff f97a 	bl	d5568 <_ZN5MQTT515writeUTF8StringEPtPKct>
   d6274:	2800      	cmp	r0, #0
   d6276:	f43f af0f 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        // 3.1.1 CONNECT Fixed Header remaining length
        uint16_t len = index - 1;
   d627a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d627e:	3a01      	subs	r2, #1
        index = 1;
   d6280:	2501      	movs	r5, #1
        if (!writeVariableByteInteger(&index, len)) {
   d6282:	b292      	uxth	r2, r2
   d6284:	4651      	mov	r1, sl
   d6286:	4620      	mov	r0, r4
            return false;
        }

        // 3.1.1 CONNECT Fixed Header remaining length
        uint16_t len = index - 1;
        index = 1;
   d6288:	f8ad 501e 	strh.w	r5, [sp, #30]
        if (!writeVariableByteInteger(&index, len)) {
   d628c:	f7ff f936 	bl	d54fc <_ZN5MQTT524writeVariableByteIntegerEPtt>
   d6290:	2800      	cmp	r0, #0
   d6292:	f43f af01 	beq.w	d6098 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0xcc>
            close();
            return false;
        }

        return writeToSocket(index);
   d6296:	462a      	mov	r2, r5
   d6298:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d629c:	4620      	mov	r0, r4
   d629e:	f7ff f911 	bl	d54c4 <_ZN5MQTT513writeToSocketEtb>
   d62a2:	4606      	mov	r6, r0
   d62a4:	46b2      	mov	sl, r6
   d62a6:	e003      	b.n	d62b0 <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x2e4>
    } else { // Deny second connect packet as connection will be closed by the server
        logger.info("Already connected to server");
   d62a8:	4908      	ldr	r1, [pc, #32]	; (d62cc <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions+0x300>)
   d62aa:	4620      	mov	r0, r4
   d62ac:	f7fd ff7a 	bl	d41a4 <_ZNK5spark6Logger4infoEPKcz>
        return false;
    }
}
   d62b0:	4650      	mov	r0, sl
   d62b2:	b00f      	add	sp, #60	; 0x3c
   d62b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62b8:	b002      	add	sp, #8
   d62ba:	4770      	bx	lr
   d62bc:	000dc07a 	.word	0x000dc07a
   d62c0:	000dc09d 	.word	0x000dc09d
   d62c4:	000dc0c9 	.word	0x000dc0c9
   d62c8:	000db8e4 	.word	0x000db8e4
   d62cc:	000dc0f1 	.word	0x000dc0f1

000d62d0 <_ZN5MQTT57connectEPKctS1_19MQTT5ConnectOptions>:
    hostIp = ip;
    hostDomain = NULL;
    hostPort = port;
    return connect(clientId, options);
}
bool MQTT5::connect(const char *domain, uint16_t port, const char *clientId, MQTT5ConnectOptions options) {
   d62d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62d2:	b087      	sub	sp, #28
   d62d4:	461f      	mov	r7, r3
    hostIp = NULL;
    hostDomain = domain;
    hostPort = port;
    return connect(clientId, options);
   d62d6:	ad0e      	add	r5, sp, #56	; 0x38
    hostDomain = NULL;
    hostPort = port;
    return connect(clientId, options);
}
bool MQTT5::connect(const char *domain, uint16_t port, const char *clientId, MQTT5ConnectOptions options) {
    hostIp = NULL;
   d62d8:	2300      	movs	r3, #0
   d62da:	6103      	str	r3, [r0, #16]
    hostDomain = domain;
   d62dc:	60c1      	str	r1, [r0, #12]
    hostPort = port;
   d62de:	8282      	strh	r2, [r0, #20]
    hostIp = ip;
    hostDomain = NULL;
    hostPort = port;
    return connect(clientId, options);
}
bool MQTT5::connect(const char *domain, uint16_t port, const char *clientId, MQTT5ConnectOptions options) {
   d62e0:	4606      	mov	r6, r0
    hostIp = NULL;
    hostDomain = domain;
    hostPort = port;
    return connect(clientId, options);
   d62e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d62e4:	466c      	mov	r4, sp
   d62e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d62e8:	e895 0003 	ldmia.w	r5, {r0, r1}
   d62ec:	e884 0003 	stmia.w	r4, {r0, r1}
   d62f0:	ab0c      	add	r3, sp, #48	; 0x30
   d62f2:	cb0c      	ldmia	r3, {r2, r3}
   d62f4:	4639      	mov	r1, r7
   d62f6:	4630      	mov	r0, r6
   d62f8:	f7ff fe68 	bl	d5fcc <_ZN5MQTT57connectEPKc19MQTT5ConnectOptions>
}
   d62fc:	b007      	add	sp, #28
   d62fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6300 <_ZN5MQTT510disconnectEv>:

    logger.info("Publish release for packet %d", packetId);
    return writeToSocket(index);
}

void MQTT5::disconnect() {
   d6300:	b510      	push	{r4, lr}
   d6302:	4604      	mov	r4, r0
    if (connected()) {
   d6304:	f7fe fe1f 	bl	d4f46 <_ZN5MQTT59connectedEv>
   d6308:	b118      	cbz	r0, d6312 <_ZN5MQTT510disconnectEv+0x12>
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
   d630a:	2100      	movs	r1, #0
   d630c:	4620      	mov	r0, r4
   d630e:	f7ff f98d 	bl	d562c <_ZN5MQTT520disconnectWithReasonE17MQTT5_REASON_CODE>
    }
    close();
   d6312:	4620      	mov	r0, r4
}
   d6314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void MQTT5::disconnect() {
    if (connected()) {
        disconnectWithReason(MQTT5_REASON_CODE::NORMAL_DISCONNECTION); 
    }
    close();
   d6318:	f7ff bcaa 	b.w	d5c70 <_ZN5MQTT55closeEv>

000d631c <_ZN5MQTT515onConnectFailedEPFv17MQTT5_REASON_CODEE>:
void MQTT5::onConnectSuccess(void (*callback)(bool)) {
    callbackConnectSuccess = callback;
}

void MQTT5::onConnectFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackConnectFailed = callback;
   d631c:	63c1      	str	r1, [r0, #60]	; 0x3c
   d631e:	4770      	bx	lr

000d6320 <_ZN5MQTT515onPublishFailedEPFv17MQTT5_REASON_CODEE>:
void MQTT5::onDelivery(void (*callback)(unsigned int, bool)) {
    callbackQOS = callback;
}

void MQTT5::onPublishFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackPublishFailed = callback;
   d6320:	6441      	str	r1, [r0, #68]	; 0x44
   d6322:	4770      	bx	lr

000d6324 <_ZN5MQTT517onSubscribeFailedEPFv17MQTT5_REASON_CODEE>:
}

void MQTT5::onSubscribeFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackSubscribeFailed = callback;
   d6324:	6481      	str	r1, [r0, #72]	; 0x48
   d6326:	4770      	bx	lr

000d6328 <_ZN5MQTT516onPacketReceivedEPFvPcPhtb9MQTT5_QOSbE>:
void MQTT5::onUnsubscribeFailed(void (*callback)(MQTT5_REASON_CODE)) {
    callbackUnsubscribeFailed = callback;
}

void MQTT5::onPacketReceived(void (*callback)(char*, uint8_t*, uint16_t, bool, MQTT5_QOS, bool)) {
    callbackPacketReceived = callback;
   d6328:	6501      	str	r1, [r0, #80]	; 0x50
   d632a:	4770      	bx	lr

000d632c <_ZN5MQTT5D1Ev>:
}

MQTT5::~MQTT5() {
   d632c:	b510      	push	{r4, lr}
   d632e:	4604      	mov	r4, r0
    if (connected()) {
   d6330:	f7fe fe09 	bl	d4f46 <_ZN5MQTT59connectedEv>
   d6334:	b128      	cbz	r0, d6342 <_ZN5MQTT5D1Ev+0x16>
        disconnect();
   d6336:	4620      	mov	r0, r4
   d6338:	f7ff ffe2 	bl	d6300 <_ZN5MQTT510disconnectEv>
        free(buffer);
   d633c:	68a0      	ldr	r0, [r4, #8]
   d633e:	f000 fadb 	bl	d68f8 <free>
    }
   d6342:	4620      	mov	r0, r4
   d6344:	bd10      	pop	{r4, pc}

000d6346 <_GLOBAL__sub_I__ZN5MQTT5C2Et>:
   d6346:	f000 b811 	b.w	d636c <HAL_Pin_Map>
	...

000d634c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <netdb_freeaddrinfo+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	689b      	ldr	r3, [r3, #8]
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	00030268 	.word	0x00030268

000d635c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <netdb_getaddrinfo+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	68db      	ldr	r3, [r3, #12]
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	00030268 	.word	0x00030268

000d636c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b02      	ldr	r3, [pc, #8]	; (d6378 <HAL_Pin_Map+0xc>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	681b      	ldr	r3, [r3, #0]
   d6374:	9301      	str	r3, [sp, #4]
   d6376:	bd08      	pop	{r3, pc}
   d6378:	0003022c 	.word	0x0003022c

000d637c <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d637c:	b508      	push	{r3, lr}
   d637e:	4b02      	ldr	r3, [pc, #8]	; (d6388 <if_index_to_name+0xc>)
   d6380:	681b      	ldr	r3, [r3, #0]
   d6382:	695b      	ldr	r3, [r3, #20]
   d6384:	9301      	str	r3, [sp, #4]
   d6386:	bd08      	pop	{r3, pc}
   d6388:	0003026c 	.word	0x0003026c

000d638c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b02      	ldr	r3, [pc, #8]	; (d6398 <HAL_RNG_GetRandomNumber+0xc>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	685b      	ldr	r3, [r3, #4]
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	bd08      	pop	{r3, pc}
   d6398:	00030218 	.word	0x00030218

000d639c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d639c:	b508      	push	{r3, lr}
   d639e:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <HAL_Delay_Microseconds+0xc>)
   d63a0:	681b      	ldr	r3, [r3, #0]
   d63a2:	68db      	ldr	r3, [r3, #12]
   d63a4:	9301      	str	r3, [sp, #4]
   d63a6:	bd08      	pop	{r3, pc}
   d63a8:	00030218 	.word	0x00030218

000d63ac <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d63ac:	b508      	push	{r3, lr}
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d63b0:	681b      	ldr	r3, [r3, #0]
   d63b2:	695b      	ldr	r3, [r3, #20]
   d63b4:	9301      	str	r3, [sp, #4]
   d63b6:	bd08      	pop	{r3, pc}
   d63b8:	00030218 	.word	0x00030218

000d63bc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <HAL_RTC_Get_UnixTime+0xc>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	69db      	ldr	r3, [r3, #28]
   d63c4:	9301      	str	r3, [sp, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	00030218 	.word	0x00030218

000d63cc <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d63cc:	b508      	push	{r3, lr}
   d63ce:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <HAL_RTC_Time_Is_Valid+0xc>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d63d4:	9301      	str	r3, [sp, #4]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	00030218 	.word	0x00030218

000d63dc <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <hal_ble_stack_init+0xc>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	689b      	ldr	r3, [r3, #8]
   d63e4:	9301      	str	r3, [sp, #4]
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	00030278 	.word	0x00030278

000d63ec <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d63ec:	b508      	push	{r3, lr}
   d63ee:	4b02      	ldr	r3, [pc, #8]	; (d63f8 <hal_ble_gap_start_scan+0xc>)
   d63f0:	681b      	ldr	r3, [r3, #0]
   d63f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d63f4:	9301      	str	r3, [sp, #4]
   d63f6:	bd08      	pop	{r3, pc}
   d63f8:	00030278 	.word	0x00030278

000d63fc <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d63fc:	b508      	push	{r3, lr}
   d63fe:	4b03      	ldr	r3, [pc, #12]	; (d640c <hal_ble_gap_stop_scan+0x10>)
   d6400:	681b      	ldr	r3, [r3, #0]
   d6402:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d6406:	9301      	str	r3, [sp, #4]
   d6408:	bd08      	pop	{r3, pc}
   d640a:	0000      	.short	0x0000
   d640c:	00030278 	.word	0x00030278

000d6410 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d6410:	b508      	push	{r3, lr}
   d6412:	4b03      	ldr	r3, [pc, #12]	; (d6420 <hal_ble_gap_disconnect+0x10>)
   d6414:	681b      	ldr	r3, [r3, #0]
   d6416:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d641a:	9301      	str	r3, [sp, #4]
   d641c:	bd08      	pop	{r3, pc}
   d641e:	0000      	.short	0x0000
   d6420:	00030278 	.word	0x00030278

000d6424 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b03      	ldr	r3, [pc, #12]	; (d6434 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d642e:	9301      	str	r3, [sp, #4]
   d6430:	bd08      	pop	{r3, pc}
   d6432:	0000      	.short	0x0000
   d6434:	00030278 	.word	0x00030278

000d6438 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d6438:	b508      	push	{r3, lr}
   d643a:	4b03      	ldr	r3, [pc, #12]	; (d6448 <hal_ble_gatt_client_discover_all_services+0x10>)
   d643c:	681b      	ldr	r3, [r3, #0]
   d643e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d6442:	9301      	str	r3, [sp, #4]
   d6444:	bd08      	pop	{r3, pc}
   d6446:	0000      	.short	0x0000
   d6448:	00030278 	.word	0x00030278

000d644c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d644c:	b508      	push	{r3, lr}
   d644e:	4b03      	ldr	r3, [pc, #12]	; (d645c <hal_ble_gatt_client_discover_characteristics+0x10>)
   d6450:	681b      	ldr	r3, [r3, #0]
   d6452:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d6456:	9301      	str	r3, [sp, #4]
   d6458:	bd08      	pop	{r3, pc}
   d645a:	0000      	.short	0x0000
   d645c:	00030278 	.word	0x00030278

000d6460 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b03      	ldr	r3, [pc, #12]	; (d6470 <hal_ble_gatt_client_write_with_response+0x10>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d646a:	9301      	str	r3, [sp, #4]
   d646c:	bd08      	pop	{r3, pc}
   d646e:	0000      	.short	0x0000
   d6470:	00030278 	.word	0x00030278

000d6474 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d6474:	b508      	push	{r3, lr}
   d6476:	4b03      	ldr	r3, [pc, #12]	; (d6484 <hal_ble_gatt_client_write_without_response+0x10>)
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d647e:	9301      	str	r3, [sp, #4]
   d6480:	bd08      	pop	{r3, pc}
   d6482:	0000      	.short	0x0000
   d6484:	00030278 	.word	0x00030278

000d6488 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d6488:	b508      	push	{r3, lr}
   d648a:	4b03      	ldr	r3, [pc, #12]	; (d6498 <hal_ble_gatt_client_read+0x10>)
   d648c:	681b      	ldr	r3, [r3, #0]
   d648e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d6492:	9301      	str	r3, [sp, #4]
   d6494:	bd08      	pop	{r3, pc}
   d6496:	0000      	.short	0x0000
   d6498:	00030278 	.word	0x00030278

000d649c <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b03      	ldr	r3, [pc, #12]	; (d64ac <hal_ble_gap_connect+0x10>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d64a6:	9301      	str	r3, [sp, #4]
   d64a8:	bd08      	pop	{r3, pc}
   d64aa:	0000      	.short	0x0000
   d64ac:	00030278 	.word	0x00030278

000d64b0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b03      	ldr	r3, [pc, #12]	; (d64c0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d64ba:	9301      	str	r3, [sp, #4]
   d64bc:	bd08      	pop	{r3, pc}
   d64be:	0000      	.short	0x0000
   d64c0:	00030278 	.word	0x00030278

000d64c4 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d64c4:	b508      	push	{r3, lr}
   d64c6:	4b03      	ldr	r3, [pc, #12]	; (d64d4 <hal_ble_gatt_client_configure_cccd+0x10>)
   d64c8:	681b      	ldr	r3, [r3, #0]
   d64ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d64ce:	9301      	str	r3, [sp, #4]
   d64d0:	bd08      	pop	{r3, pc}
   d64d2:	0000      	.short	0x0000
   d64d4:	00030278 	.word	0x00030278

000d64d8 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d64d8:	b508      	push	{r3, lr}
   d64da:	4b03      	ldr	r3, [pc, #12]	; (d64e8 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d64dc:	681b      	ldr	r3, [r3, #0]
   d64de:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d64e2:	9301      	str	r3, [sp, #4]
   d64e4:	bd08      	pop	{r3, pc}
   d64e6:	0000      	.short	0x0000
   d64e8:	00030278 	.word	0x00030278

000d64ec <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b03      	ldr	r3, [pc, #12]	; (d64fc <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d64f6:	9301      	str	r3, [sp, #4]
   d64f8:	bd08      	pop	{r3, pc}
   d64fa:	0000      	.short	0x0000
   d64fc:	00030278 	.word	0x00030278

000d6500 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <os_thread_is_current+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	689b      	ldr	r3, [r3, #8]
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	00030248 	.word	0x00030248

000d6510 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <os_thread_join+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	691b      	ldr	r3, [r3, #16]
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	00030248 	.word	0x00030248

000d6520 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <os_thread_cleanup+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	695b      	ldr	r3, [r3, #20]
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	00030248 	.word	0x00030248

000d6530 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <os_mutex_recursive_create+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	00030248 	.word	0x00030248

000d6540 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <os_mutex_recursive_destroy+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030248 	.word	0x00030248

000d6550 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <os_mutex_recursive_lock+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030248 	.word	0x00030248

000d6560 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <os_mutex_recursive_unlock+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	00030248 	.word	0x00030248

000d6570 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b02      	ldr	r3, [pc, #8]	; (d657c <inet_inet_ntop+0xc>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	695b      	ldr	r3, [r3, #20]
   d6578:	9301      	str	r3, [sp, #4]
   d657a:	bd08      	pop	{r3, pc}
   d657c:	00030264 	.word	0x00030264

000d6580 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6580:	b508      	push	{r3, lr}
   d6582:	4b02      	ldr	r3, [pc, #8]	; (d658c <inet_htonl+0xc>)
   d6584:	681b      	ldr	r3, [r3, #0]
   d6586:	6a1b      	ldr	r3, [r3, #32]
   d6588:	9301      	str	r3, [sp, #4]
   d658a:	bd08      	pop	{r3, pc}
   d658c:	00030264 	.word	0x00030264

000d6590 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b02      	ldr	r3, [pc, #8]	; (d659c <inet_htons+0xc>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6598:	9301      	str	r3, [sp, #4]
   d659a:	bd08      	pop	{r3, pc}
   d659c:	00030264 	.word	0x00030264

000d65a0 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d65a0:	b508      	push	{r3, lr}
   d65a2:	4b02      	ldr	r3, [pc, #8]	; (d65ac <HAL_USART_Init+0xc>)
   d65a4:	681b      	ldr	r3, [r3, #0]
   d65a6:	681b      	ldr	r3, [r3, #0]
   d65a8:	9301      	str	r3, [sp, #4]
   d65aa:	bd08      	pop	{r3, pc}
   d65ac:	0003023c 	.word	0x0003023c

000d65b0 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <HAL_USART_End+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	689b      	ldr	r3, [r3, #8]
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	0003023c 	.word	0x0003023c

000d65c0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <HAL_USART_Write_Data+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	68db      	ldr	r3, [r3, #12]
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	0003023c 	.word	0x0003023c

000d65d0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <HAL_USART_Available_Data+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	691b      	ldr	r3, [r3, #16]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	0003023c 	.word	0x0003023c

000d65e0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <HAL_USART_Read_Data+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	695b      	ldr	r3, [r3, #20]
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	0003023c 	.word	0x0003023c

000d65f0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <HAL_USART_Peek_Data+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	699b      	ldr	r3, [r3, #24]
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	0003023c 	.word	0x0003023c

000d6600 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <HAL_USART_Flush_Data+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	69db      	ldr	r3, [r3, #28]
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	0003023c 	.word	0x0003023c

000d6610 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <HAL_USART_Available_Data_For_Write+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	0003023c 	.word	0x0003023c

000d6620 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <HAL_USART_BeginConfig+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	0003023c 	.word	0x0003023c

000d6630 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <sock_setsockopt+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	699b      	ldr	r3, [r3, #24]
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	00030238 	.word	0x00030238

000d6640 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <sock_close+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	69db      	ldr	r3, [r3, #28]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	00030238 	.word	0x00030238

000d6650 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <sock_connect+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	6a1b      	ldr	r3, [r3, #32]
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	00030238 	.word	0x00030238

000d6660 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <sock_recv+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	00030238 	.word	0x00030238

000d6670 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d6670:	b508      	push	{r3, lr}
   d6672:	4b02      	ldr	r3, [pc, #8]	; (d667c <sock_send+0xc>)
   d6674:	681b      	ldr	r3, [r3, #0]
   d6676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6678:	9301      	str	r3, [sp, #4]
   d667a:	bd08      	pop	{r3, pc}
   d667c:	00030238 	.word	0x00030238

000d6680 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b02      	ldr	r3, [pc, #8]	; (d668c <sock_socket+0xc>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6688:	9301      	str	r3, [sp, #4]
   d668a:	bd08      	pop	{r3, pc}
   d668c:	00030238 	.word	0x00030238

000d6690 <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d6690:	b508      	push	{r3, lr}
   d6692:	4b02      	ldr	r3, [pc, #8]	; (d669c <dct_write_app_data+0xc>)
   d6694:	681b      	ldr	r3, [r3, #0]
   d6696:	685b      	ldr	r3, [r3, #4]
   d6698:	9301      	str	r3, [sp, #4]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	00030258 	.word	0x00030258

000d66a0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d66a0:	b508      	push	{r3, lr}
   d66a2:	4b02      	ldr	r3, [pc, #8]	; (d66ac <HAL_USB_USART_Init+0xc>)
   d66a4:	681b      	ldr	r3, [r3, #0]
   d66a6:	681b      	ldr	r3, [r3, #0]
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	bd08      	pop	{r3, pc}
   d66ac:	0003024c 	.word	0x0003024c

000d66b0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d66b0:	b508      	push	{r3, lr}
   d66b2:	4b02      	ldr	r3, [pc, #8]	; (d66bc <HAL_USB_USART_Begin+0xc>)
   d66b4:	681b      	ldr	r3, [r3, #0]
   d66b6:	685b      	ldr	r3, [r3, #4]
   d66b8:	9301      	str	r3, [sp, #4]
   d66ba:	bd08      	pop	{r3, pc}
   d66bc:	0003024c 	.word	0x0003024c

000d66c0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d66c0:	b508      	push	{r3, lr}
   d66c2:	4b02      	ldr	r3, [pc, #8]	; (d66cc <HAL_USB_USART_End+0xc>)
   d66c4:	681b      	ldr	r3, [r3, #0]
   d66c6:	689b      	ldr	r3, [r3, #8]
   d66c8:	9301      	str	r3, [sp, #4]
   d66ca:	bd08      	pop	{r3, pc}
   d66cc:	0003024c 	.word	0x0003024c

000d66d0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d66d0:	b508      	push	{r3, lr}
   d66d2:	4b02      	ldr	r3, [pc, #8]	; (d66dc <HAL_USB_USART_Available_Data+0xc>)
   d66d4:	681b      	ldr	r3, [r3, #0]
   d66d6:	691b      	ldr	r3, [r3, #16]
   d66d8:	9301      	str	r3, [sp, #4]
   d66da:	bd08      	pop	{r3, pc}
   d66dc:	0003024c 	.word	0x0003024c

000d66e0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d66e0:	b508      	push	{r3, lr}
   d66e2:	4b02      	ldr	r3, [pc, #8]	; (d66ec <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d66e4:	681b      	ldr	r3, [r3, #0]
   d66e6:	695b      	ldr	r3, [r3, #20]
   d66e8:	9301      	str	r3, [sp, #4]
   d66ea:	bd08      	pop	{r3, pc}
   d66ec:	0003024c 	.word	0x0003024c

000d66f0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d66f0:	b508      	push	{r3, lr}
   d66f2:	4b02      	ldr	r3, [pc, #8]	; (d66fc <HAL_USB_USART_Receive_Data+0xc>)
   d66f4:	681b      	ldr	r3, [r3, #0]
   d66f6:	699b      	ldr	r3, [r3, #24]
   d66f8:	9301      	str	r3, [sp, #4]
   d66fa:	bd08      	pop	{r3, pc}
   d66fc:	0003024c 	.word	0x0003024c

000d6700 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6700:	b508      	push	{r3, lr}
   d6702:	4b02      	ldr	r3, [pc, #8]	; (d670c <HAL_USB_USART_Send_Data+0xc>)
   d6704:	681b      	ldr	r3, [r3, #0]
   d6706:	69db      	ldr	r3, [r3, #28]
   d6708:	9301      	str	r3, [sp, #4]
   d670a:	bd08      	pop	{r3, pc}
   d670c:	0003024c 	.word	0x0003024c

000d6710 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <HAL_USB_USART_Flush_Data+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	6a1b      	ldr	r3, [r3, #32]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	0003024c 	.word	0x0003024c

000d6720 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <panic_+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	00030260 	.word	0x00030260

000d6730 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <log_message+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	00030260 	.word	0x00030260

000d6740 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <log_message_v+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	00030260 	.word	0x00030260

000d6750 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <log_level_name+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030260 	.word	0x00030260

000d6760 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <log_set_callbacks+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	00030260 	.word	0x00030260

000d6770 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <system_mode+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	681b      	ldr	r3, [r3, #0]
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	00030220 	.word	0x00030220

000d6780 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <set_system_mode+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	685b      	ldr	r3, [r3, #4]
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	00030220 	.word	0x00030220

000d6790 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <application_thread_current+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	00030220 	.word	0x00030220

000d67a0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <application_thread_invoke+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	00030220 	.word	0x00030220

000d67b0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <system_thread_get_state+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	00030220 	.word	0x00030220

000d67c0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b03      	ldr	r3, [pc, #12]	; (d67d0 <system_ctrl_set_app_request_handler+0x10>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d67ca:	9301      	str	r3, [sp, #4]
   d67cc:	bd08      	pop	{r3, pc}
   d67ce:	0000      	.short	0x0000
   d67d0:	00030220 	.word	0x00030220

000d67d4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d67d4:	b508      	push	{r3, lr}
   d67d6:	4b03      	ldr	r3, [pc, #12]	; (d67e4 <system_ctrl_set_result+0x10>)
   d67d8:	681b      	ldr	r3, [r3, #0]
   d67da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d67de:	9301      	str	r3, [sp, #4]
   d67e0:	bd08      	pop	{r3, pc}
   d67e2:	0000      	.short	0x0000
   d67e4:	00030220 	.word	0x00030220

000d67e8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d67e8:	b508      	push	{r3, lr}
   d67ea:	4b02      	ldr	r3, [pc, #8]	; (d67f4 <network_connect+0xc>)
   d67ec:	681b      	ldr	r3, [r3, #0]
   d67ee:	685b      	ldr	r3, [r3, #4]
   d67f0:	9301      	str	r3, [sp, #4]
   d67f2:	bd08      	pop	{r3, pc}
   d67f4:	00030240 	.word	0x00030240

000d67f8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d67f8:	b508      	push	{r3, lr}
   d67fa:	4b02      	ldr	r3, [pc, #8]	; (d6804 <network_connecting+0xc>)
   d67fc:	681b      	ldr	r3, [r3, #0]
   d67fe:	689b      	ldr	r3, [r3, #8]
   d6800:	9301      	str	r3, [sp, #4]
   d6802:	bd08      	pop	{r3, pc}
   d6804:	00030240 	.word	0x00030240

000d6808 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6808:	b508      	push	{r3, lr}
   d680a:	4b02      	ldr	r3, [pc, #8]	; (d6814 <network_disconnect+0xc>)
   d680c:	681b      	ldr	r3, [r3, #0]
   d680e:	68db      	ldr	r3, [r3, #12]
   d6810:	9301      	str	r3, [sp, #4]
   d6812:	bd08      	pop	{r3, pc}
   d6814:	00030240 	.word	0x00030240

000d6818 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6818:	b508      	push	{r3, lr}
   d681a:	4b02      	ldr	r3, [pc, #8]	; (d6824 <network_ready+0xc>)
   d681c:	681b      	ldr	r3, [r3, #0]
   d681e:	691b      	ldr	r3, [r3, #16]
   d6820:	9301      	str	r3, [sp, #4]
   d6822:	bd08      	pop	{r3, pc}
   d6824:	00030240 	.word	0x00030240

000d6828 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6828:	b508      	push	{r3, lr}
   d682a:	4b02      	ldr	r3, [pc, #8]	; (d6834 <network_on+0xc>)
   d682c:	681b      	ldr	r3, [r3, #0]
   d682e:	695b      	ldr	r3, [r3, #20]
   d6830:	9301      	str	r3, [sp, #4]
   d6832:	bd08      	pop	{r3, pc}
   d6834:	00030240 	.word	0x00030240

000d6838 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6838:	b508      	push	{r3, lr}
   d683a:	4b02      	ldr	r3, [pc, #8]	; (d6844 <network_off+0xc>)
   d683c:	681b      	ldr	r3, [r3, #0]
   d683e:	699b      	ldr	r3, [r3, #24]
   d6840:	9301      	str	r3, [sp, #4]
   d6842:	bd08      	pop	{r3, pc}
   d6844:	00030240 	.word	0x00030240

000d6848 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6848:	b508      	push	{r3, lr}
   d684a:	4b02      	ldr	r3, [pc, #8]	; (d6854 <network_listen+0xc>)
   d684c:	681b      	ldr	r3, [r3, #0]
   d684e:	69db      	ldr	r3, [r3, #28]
   d6850:	9301      	str	r3, [sp, #4]
   d6852:	bd08      	pop	{r3, pc}
   d6854:	00030240 	.word	0x00030240

000d6858 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6858:	b508      	push	{r3, lr}
   d685a:	4b02      	ldr	r3, [pc, #8]	; (d6864 <network_listening+0xc>)
   d685c:	681b      	ldr	r3, [r3, #0]
   d685e:	6a1b      	ldr	r3, [r3, #32]
   d6860:	9301      	str	r3, [sp, #4]
   d6862:	bd08      	pop	{r3, pc}
   d6864:	00030240 	.word	0x00030240

000d6868 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6868:	b508      	push	{r3, lr}
   d686a:	4b02      	ldr	r3, [pc, #8]	; (d6874 <network_set_listen_timeout+0xc>)
   d686c:	681b      	ldr	r3, [r3, #0]
   d686e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6870:	9301      	str	r3, [sp, #4]
   d6872:	bd08      	pop	{r3, pc}
   d6874:	00030240 	.word	0x00030240

000d6878 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6878:	b508      	push	{r3, lr}
   d687a:	4b02      	ldr	r3, [pc, #8]	; (d6884 <network_get_listen_timeout+0xc>)
   d687c:	681b      	ldr	r3, [r3, #0]
   d687e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6880:	9301      	str	r3, [sp, #4]
   d6882:	bd08      	pop	{r3, pc}
   d6884:	00030240 	.word	0x00030240

000d6888 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6888:	b508      	push	{r3, lr}
   d688a:	4b02      	ldr	r3, [pc, #8]	; (d6894 <spark_function+0xc>)
   d688c:	681b      	ldr	r3, [r3, #0]
   d688e:	685b      	ldr	r3, [r3, #4]
   d6890:	9301      	str	r3, [sp, #4]
   d6892:	bd08      	pop	{r3, pc}
   d6894:	00030244 	.word	0x00030244

000d6898 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6898:	b508      	push	{r3, lr}
   d689a:	4b02      	ldr	r3, [pc, #8]	; (d68a4 <spark_process+0xc>)
   d689c:	681b      	ldr	r3, [r3, #0]
   d689e:	689b      	ldr	r3, [r3, #8]
   d68a0:	9301      	str	r3, [sp, #4]
   d68a2:	bd08      	pop	{r3, pc}
   d68a4:	00030244 	.word	0x00030244

000d68a8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d68a8:	b508      	push	{r3, lr}
   d68aa:	4b02      	ldr	r3, [pc, #8]	; (d68b4 <spark_cloud_flag_connected+0xc>)
   d68ac:	681b      	ldr	r3, [r3, #0]
   d68ae:	695b      	ldr	r3, [r3, #20]
   d68b0:	9301      	str	r3, [sp, #4]
   d68b2:	bd08      	pop	{r3, pc}
   d68b4:	00030244 	.word	0x00030244

000d68b8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d68b8:	b508      	push	{r3, lr}
   d68ba:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <spark_send_event+0xc>)
   d68bc:	681b      	ldr	r3, [r3, #0]
   d68be:	6a1b      	ldr	r3, [r3, #32]
   d68c0:	9301      	str	r3, [sp, #4]
   d68c2:	bd08      	pop	{r3, pc}
   d68c4:	00030244 	.word	0x00030244

000d68c8 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d68c8:	b508      	push	{r3, lr}
   d68ca:	4b02      	ldr	r3, [pc, #8]	; (d68d4 <spark_sync_time_pending+0xc>)
   d68cc:	681b      	ldr	r3, [r3, #0]
   d68ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68d0:	9301      	str	r3, [sp, #4]
   d68d2:	bd08      	pop	{r3, pc}
   d68d4:	00030244 	.word	0x00030244

000d68d8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d68d8:	b508      	push	{r3, lr}
   d68da:	4b02      	ldr	r3, [pc, #8]	; (d68e4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d68dc:	681b      	ldr	r3, [r3, #0]
   d68de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d68e0:	9301      	str	r3, [sp, #4]
   d68e2:	bd08      	pop	{r3, pc}
   d68e4:	00030244 	.word	0x00030244

000d68e8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d68e8:	b508      	push	{r3, lr}
   d68ea:	4b02      	ldr	r3, [pc, #8]	; (d68f4 <malloc+0xc>)
   d68ec:	681b      	ldr	r3, [r3, #0]
   d68ee:	681b      	ldr	r3, [r3, #0]
   d68f0:	9301      	str	r3, [sp, #4]
   d68f2:	bd08      	pop	{r3, pc}
   d68f4:	0003021c 	.word	0x0003021c

000d68f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d68f8:	b508      	push	{r3, lr}
   d68fa:	4b02      	ldr	r3, [pc, #8]	; (d6904 <free+0xc>)
   d68fc:	681b      	ldr	r3, [r3, #0]
   d68fe:	685b      	ldr	r3, [r3, #4]
   d6900:	9301      	str	r3, [sp, #4]
   d6902:	bd08      	pop	{r3, pc}
   d6904:	0003021c 	.word	0x0003021c

000d6908 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6908:	b508      	push	{r3, lr}
   d690a:	4b02      	ldr	r3, [pc, #8]	; (d6914 <realloc+0xc>)
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	689b      	ldr	r3, [r3, #8]
   d6910:	9301      	str	r3, [sp, #4]
   d6912:	bd08      	pop	{r3, pc}
   d6914:	0003021c 	.word	0x0003021c

000d6918 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6918:	b508      	push	{r3, lr}
   d691a:	4b02      	ldr	r3, [pc, #8]	; (d6924 <snprintf+0xc>)
   d691c:	681b      	ldr	r3, [r3, #0]
   d691e:	69db      	ldr	r3, [r3, #28]
   d6920:	9301      	str	r3, [sp, #4]
   d6922:	bd08      	pop	{r3, pc}
   d6924:	0003021c 	.word	0x0003021c

000d6928 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6928:	b508      	push	{r3, lr}
   d692a:	4b02      	ldr	r3, [pc, #8]	; (d6934 <vsnprintf+0xc>)
   d692c:	681b      	ldr	r3, [r3, #0]
   d692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6930:	9301      	str	r3, [sp, #4]
   d6932:	bd08      	pop	{r3, pc}
   d6934:	0003021c 	.word	0x0003021c

000d6938 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6938:	b508      	push	{r3, lr}
   d693a:	4b02      	ldr	r3, [pc, #8]	; (d6944 <abort+0xc>)
   d693c:	681b      	ldr	r3, [r3, #0]
   d693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6940:	9301      	str	r3, [sp, #4]
   d6942:	bd08      	pop	{r3, pc}
   d6944:	0003021c 	.word	0x0003021c

000d6948 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6948:	b508      	push	{r3, lr}
   d694a:	4b02      	ldr	r3, [pc, #8]	; (d6954 <_malloc_r+0xc>)
   d694c:	681b      	ldr	r3, [r3, #0]
   d694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6950:	9301      	str	r3, [sp, #4]
   d6952:	bd08      	pop	{r3, pc}
   d6954:	0003021c 	.word	0x0003021c

000d6958 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6958:	b508      	push	{r3, lr}
   d695a:	4b02      	ldr	r3, [pc, #8]	; (d6964 <__errno+0xc>)
   d695c:	681b      	ldr	r3, [r3, #0]
   d695e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	bd08      	pop	{r3, pc}
   d6964:	0003021c 	.word	0x0003021c

000d6968 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6968:	2200      	movs	r2, #0
   d696a:	4611      	mov	r1, r2
   d696c:	6840      	ldr	r0, [r0, #4]
   d696e:	f7ff bf73 	b.w	d6858 <network_listening>

000d6972 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6972:	2200      	movs	r2, #0
   d6974:	4611      	mov	r1, r2
   d6976:	6840      	ldr	r0, [r0, #4]
   d6978:	f7ff bf7e 	b.w	d6878 <network_get_listen_timeout>

000d697c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d697c:	2200      	movs	r2, #0
   d697e:	6840      	ldr	r0, [r0, #4]
   d6980:	f7ff bf72 	b.w	d6868 <network_set_listen_timeout>

000d6984 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6984:	2200      	movs	r2, #0
   d6986:	f081 0101 	eor.w	r1, r1, #1
   d698a:	6840      	ldr	r0, [r0, #4]
   d698c:	f7ff bf5c 	b.w	d6848 <network_listen>

000d6990 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6990:	2300      	movs	r3, #0
   d6992:	461a      	mov	r2, r3
   d6994:	4619      	mov	r1, r3
   d6996:	6840      	ldr	r0, [r0, #4]
   d6998:	f7ff bf4e 	b.w	d6838 <network_off>

000d699c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d699c:	2300      	movs	r3, #0
   d699e:	461a      	mov	r2, r3
   d69a0:	4619      	mov	r1, r3
   d69a2:	6840      	ldr	r0, [r0, #4]
   d69a4:	f7ff bf40 	b.w	d6828 <network_on>

000d69a8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d69a8:	2200      	movs	r2, #0
   d69aa:	4611      	mov	r1, r2
   d69ac:	6840      	ldr	r0, [r0, #4]
   d69ae:	f7ff bf33 	b.w	d6818 <network_ready>

000d69b2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d69b2:	2200      	movs	r2, #0
   d69b4:	4611      	mov	r1, r2
   d69b6:	6840      	ldr	r0, [r0, #4]
   d69b8:	f7ff bf1e 	b.w	d67f8 <network_connecting>

000d69bc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d69bc:	2200      	movs	r2, #0
   d69be:	2102      	movs	r1, #2
   d69c0:	6840      	ldr	r0, [r0, #4]
   d69c2:	f7ff bf21 	b.w	d6808 <network_disconnect>

000d69c6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d69c6:	2300      	movs	r3, #0
   d69c8:	461a      	mov	r2, r3
   d69ca:	6840      	ldr	r0, [r0, #4]
   d69cc:	f7ff bf0c 	b.w	d67e8 <network_connect>

000d69d0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d69d0:	4b02      	ldr	r3, [pc, #8]	; (d69dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d69d2:	2203      	movs	r2, #3
   d69d4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d69d6:	4a02      	ldr	r2, [pc, #8]	; (d69e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d69d8:	601a      	str	r2, [r3, #0]
   d69da:	4770      	bx	lr
   d69dc:	2003e3b8 	.word	0x2003e3b8
   d69e0:	000dc130 	.word	0x000dc130

000d69e4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d69e4:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d69e6:	4c09      	ldr	r4, [pc, #36]	; (d6a0c <_GLOBAL__sub_I_System+0x28>)
   d69e8:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d69ea:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d69ee:	6020      	str	r0, [r4, #0]
   d69f0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d69f2:	71a0      	strb	r0, [r4, #6]
   d69f4:	8120      	strh	r0, [r4, #8]
   d69f6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d69f8:	f7ff fec2 	bl	d6780 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d69fc:	4620      	mov	r0, r4
   d69fe:	4a04      	ldr	r2, [pc, #16]	; (d6a10 <_GLOBAL__sub_I_System+0x2c>)
   d6a00:	4904      	ldr	r1, [pc, #16]	; (d6a14 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6a02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d6a06:	f004 b926 	b.w	dac56 <__aeabi_atexit>
   d6a0a:	bf00      	nop
   d6a0c:	2003e3c0 	.word	0x2003e3c0
   d6a10:	2003d8c4 	.word	0x2003d8c4
   d6a14:	000d413d 	.word	0x000d413d

000d6a18 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6a18:	2300      	movs	r3, #0
   d6a1a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6a1c:	6043      	str	r3, [r0, #4]
	len = 0;
   d6a1e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6a20:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6a22:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6a24:	680c      	ldr	r4, [r1, #0]
   d6a26:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6a28:	684c      	ldr	r4, [r1, #4]
   d6a2a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6a2c:	688c      	ldr	r4, [r1, #8]
   d6a2e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6a30:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6a32:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6a34:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6a36:	bd10      	pop	{r4, pc}

000d6a38 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6a38:	b510      	push	{r4, lr}
   d6a3a:	4604      	mov	r4, r0
{
	free(buffer);
   d6a3c:	6800      	ldr	r0, [r0, #0]
   d6a3e:	f7ff ff5b 	bl	d68f8 <free>
}
   d6a42:	4620      	mov	r0, r4
   d6a44:	bd10      	pop	{r4, pc}

000d6a46 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6a46:	b510      	push	{r4, lr}
   d6a48:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6a4a:	6800      	ldr	r0, [r0, #0]
   d6a4c:	b108      	cbz	r0, d6a52 <_ZN6String10invalidateEv+0xc>
   d6a4e:	f7ff ff53 	bl	d68f8 <free>
	buffer = NULL;
   d6a52:	2300      	movs	r3, #0
   d6a54:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6a56:	60a3      	str	r3, [r4, #8]
   d6a58:	6063      	str	r3, [r4, #4]
   d6a5a:	bd10      	pop	{r4, pc}

000d6a5c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6a5c:	b538      	push	{r3, r4, r5, lr}
   d6a5e:	4604      	mov	r4, r0
   d6a60:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6a62:	6800      	ldr	r0, [r0, #0]
   d6a64:	3101      	adds	r1, #1
   d6a66:	f7ff ff4f 	bl	d6908 <realloc>
	if (newbuffer) {
   d6a6a:	b110      	cbz	r0, d6a72 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6a6c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6a70:	2001      	movs	r0, #1
	}
	return 0;
}
   d6a72:	bd38      	pop	{r3, r4, r5, pc}

000d6a74 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6a74:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6a76:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6a78:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6a7a:	b113      	cbz	r3, d6a82 <_ZN6String7reserveEj+0xe>
   d6a7c:	6843      	ldr	r3, [r0, #4]
   d6a7e:	428b      	cmp	r3, r1
   d6a80:	d207      	bcs.n	d6a92 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6a82:	4620      	mov	r0, r4
   d6a84:	f7ff ffea 	bl	d6a5c <_ZN6String12changeBufferEj>
   d6a88:	b120      	cbz	r0, d6a94 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6a8a:	68a3      	ldr	r3, [r4, #8]
   d6a8c:	b90b      	cbnz	r3, d6a92 <_ZN6String7reserveEj+0x1e>
   d6a8e:	6822      	ldr	r2, [r4, #0]
   d6a90:	7013      	strb	r3, [r2, #0]
   d6a92:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6a94:	bd10      	pop	{r4, pc}

000d6a96 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6a96:	b570      	push	{r4, r5, r6, lr}
   d6a98:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6a9a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6a9c:	4604      	mov	r4, r0
   d6a9e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6aa0:	f7ff ffe8 	bl	d6a74 <_ZN6String7reserveEj>
   d6aa4:	b918      	cbnz	r0, d6aae <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6aa6:	4620      	mov	r0, r4
   d6aa8:	f7ff ffcd 	bl	d6a46 <_ZN6String10invalidateEv>
		return *this;
   d6aac:	e009      	b.n	d6ac2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d6aae:	462a      	mov	r2, r5
   d6ab0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d6ab2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d6ab4:	6820      	ldr	r0, [r4, #0]
   d6ab6:	f004 fa58 	bl	daf6a <memcpy>
	buffer[len] = 0;
   d6aba:	6822      	ldr	r2, [r4, #0]
   d6abc:	68a3      	ldr	r3, [r4, #8]
   d6abe:	2100      	movs	r1, #0
   d6ac0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d6ac2:	4620      	mov	r0, r4
   d6ac4:	bd70      	pop	{r4, r5, r6, pc}

000d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6ac6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6ac8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d6aca:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6acc:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6ace:	6043      	str	r3, [r0, #4]
	len = 0;
   d6ad0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6ad2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d6ad4:	460d      	mov	r5, r1
   d6ad6:	b139      	cbz	r1, d6ae8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d6ad8:	4608      	mov	r0, r1
   d6ada:	f004 fae2 	bl	db0a2 <strlen>
   d6ade:	4629      	mov	r1, r5
   d6ae0:	4602      	mov	r2, r0
   d6ae2:	4620      	mov	r0, r4
   d6ae4:	f7ff ffd7 	bl	d6a96 <_ZN6String4copyEPKcj>
}
   d6ae8:	4620      	mov	r0, r4
   d6aea:	bd38      	pop	{r3, r4, r5, pc}

000d6aec <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6aec:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d6aee:	b510      	push	{r4, lr}
   d6af0:	460b      	mov	r3, r1
   d6af2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6af4:	d007      	beq.n	d6b06 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6af6:	6809      	ldr	r1, [r1, #0]
   d6af8:	b119      	cbz	r1, d6b02 <_ZN6StringaSERKS_+0x16>
   d6afa:	689a      	ldr	r2, [r3, #8]
   d6afc:	f7ff ffcb 	bl	d6a96 <_ZN6String4copyEPKcj>
   d6b00:	e001      	b.n	d6b06 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d6b02:	f7ff ffa0 	bl	d6a46 <_ZN6String10invalidateEv>

	return *this;
}
   d6b06:	4620      	mov	r0, r4
   d6b08:	bd10      	pop	{r4, pc}

000d6b0a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6b0a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6b0c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d6b0e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6b10:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6b12:	6043      	str	r3, [r0, #4]
	len = 0;
   d6b14:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6b16:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d6b18:	f7ff ffe8 	bl	d6aec <_ZN6StringaSERKS_>
}
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	bd10      	pop	{r4, pc}

000d6b20 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6b20:	b538      	push	{r3, r4, r5, lr}
   d6b22:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6b24:	460c      	mov	r4, r1
   d6b26:	b141      	cbz	r1, d6b3a <_ZN6StringaSEPKc+0x1a>
   d6b28:	4608      	mov	r0, r1
   d6b2a:	f004 faba 	bl	db0a2 <strlen>
   d6b2e:	4621      	mov	r1, r4
   d6b30:	4602      	mov	r2, r0
   d6b32:	4628      	mov	r0, r5
   d6b34:	f7ff ffaf 	bl	d6a96 <_ZN6String4copyEPKcj>
   d6b38:	e001      	b.n	d6b3e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d6b3a:	f7ff ff84 	bl	d6a46 <_ZN6String10invalidateEv>

	return *this;
}
   d6b3e:	4628      	mov	r0, r5
   d6b40:	bd38      	pop	{r3, r4, r5, pc}

000d6b42 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6b42:	b570      	push	{r4, r5, r6, lr}
   d6b44:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6b46:	460e      	mov	r6, r1
   d6b48:	b909      	cbnz	r1, d6b4e <_ZN6String6concatEPKcj+0xc>
   d6b4a:	2000      	movs	r0, #0
   d6b4c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d6b4e:	b16a      	cbz	r2, d6b6c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d6b50:	6883      	ldr	r3, [r0, #8]
   d6b52:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d6b54:	4629      	mov	r1, r5
   d6b56:	f7ff ff8d 	bl	d6a74 <_ZN6String7reserveEj>
   d6b5a:	2800      	cmp	r0, #0
   d6b5c:	d0f5      	beq.n	d6b4a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d6b5e:	6820      	ldr	r0, [r4, #0]
   d6b60:	68a3      	ldr	r3, [r4, #8]
   d6b62:	4631      	mov	r1, r6
   d6b64:	4418      	add	r0, r3
   d6b66:	f004 fa79 	bl	db05c <strcpy>
	len = newlen;
   d6b6a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d6b6c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d6b6e:	bd70      	pop	{r4, r5, r6, pc}

000d6b70 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6b70:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6b72:	688a      	ldr	r2, [r1, #8]
   d6b74:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6b76:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6b78:	f7ff ffe3 	bl	d6b42 <_ZN6String6concatEPKcj>
   d6b7c:	b910      	cbnz	r0, d6b84 <_ZplRK15StringSumHelperRK6String+0x14>
   d6b7e:	4620      	mov	r0, r4
   d6b80:	f7ff ff61 	bl	d6a46 <_ZN6String10invalidateEv>
	return a;
}
   d6b84:	4620      	mov	r0, r4
   d6b86:	bd10      	pop	{r4, pc}

000d6b88 <_ZNK6String16equalsIgnoreCaseERKS_>:
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d6b88:	4288      	cmp	r0, r1
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
   d6b8a:	b570      	push	{r4, r5, r6, lr}
	if (this == &s2) return 1;
   d6b8c:	d015      	beq.n	d6bba <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
	if (len != s2.len) return 0;
   d6b8e:	6883      	ldr	r3, [r0, #8]
   d6b90:	688a      	ldr	r2, [r1, #8]
   d6b92:	4293      	cmp	r3, r2
   d6b94:	d10f      	bne.n	d6bb6 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
	if (len == 0) return 1;
   d6b96:	b183      	cbz	r3, d6bba <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
   d6b98:	6804      	ldr	r4, [r0, #0]
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
   d6b9a:	680d      	ldr	r5, [r1, #0]
   d6b9c:	3c01      	subs	r4, #1
	while (*p1) {
   d6b9e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   d6ba2:	b150      	cbz	r0, d6bba <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
   d6ba4:	f004 fb4a 	bl	db23c <tolower>
   d6ba8:	4606      	mov	r6, r0
   d6baa:	f815 0b01 	ldrb.w	r0, [r5], #1
   d6bae:	f004 fb45 	bl	db23c <tolower>
   d6bb2:	4286      	cmp	r6, r0
   d6bb4:	d0f3      	beq.n	d6b9e <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
   d6bb6:	2000      	movs	r0, #0
   d6bb8:	bd70      	pop	{r4, r5, r6, pc}
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
   d6bba:	2001      	movs	r0, #1
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	}
	return 1;
}
   d6bbc:	bd70      	pop	{r4, r5, r6, pc}

000d6bbe <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d6bbe:	6800      	ldr	r0, [r0, #0]
   d6bc0:	b108      	cbz	r0, d6bc6 <_ZNK6String5toIntEv+0x8>
   d6bc2:	f004 b9b1 	b.w	daf28 <atol>
	return 0;
}
   d6bc6:	4770      	bx	lr

000d6bc8 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6bc8:	4770      	bx	lr

000d6bca <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6bca:	2000      	movs	r0, #0
   d6bcc:	4770      	bx	lr

000d6bce <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6bce:	4770      	bx	lr

000d6bd0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6bd0:	2000      	movs	r0, #0
   d6bd2:	4770      	bx	lr

000d6bd4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6bd4:	4770      	bx	lr

000d6bd6 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d6bd6:	2000      	movs	r0, #0
   d6bd8:	4770      	bx	lr

000d6bda <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d6bda:	b510      	push	{r4, lr}
   d6bdc:	2114      	movs	r1, #20
   d6bde:	4604      	mov	r4, r0
   d6be0:	f004 f846 	bl	dac70 <_ZdlPvj>
   d6be4:	4620      	mov	r0, r4
   d6be6:	bd10      	pop	{r4, pc}

000d6be8 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6be8:	b510      	push	{r4, lr}
   d6bea:	2114      	movs	r1, #20
   d6bec:	4604      	mov	r4, r0
   d6bee:	f004 f83f 	bl	dac70 <_ZdlPvj>
   d6bf2:	4620      	mov	r0, r4
   d6bf4:	bd10      	pop	{r4, pc}

000d6bf6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d6bf6:	b510      	push	{r4, lr}
   d6bf8:	2114      	movs	r1, #20
   d6bfa:	4604      	mov	r4, r0
   d6bfc:	f004 f838 	bl	dac70 <_ZdlPvj>
   d6c00:	4620      	mov	r0, r4
   d6c02:	bd10      	pop	{r4, pc}

000d6c04 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6c04:	f7fd ba4b 	b.w	d409e <_ZdlPv>

000d6c08 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6c08:	f7fd ba49 	b.w	d409e <_ZdlPv>

000d6c0c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d6c0c:	f7fd ba47 	b.w	d409e <_ZdlPv>

000d6c10 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6c10:	b510      	push	{r4, lr}
   d6c12:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6c14:	6800      	ldr	r0, [r0, #0]
   d6c16:	b108      	cbz	r0, d6c1c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6c18:	f7ff fc92 	bl	d6540 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d6c1c:	4620      	mov	r0, r4
   d6c1e:	bd10      	pop	{r4, pc}

000d6c20 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6c20:	b530      	push	{r4, r5, lr}
   d6c22:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d6c24:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d6c26:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d6c28:	2400      	movs	r4, #0
   d6c2a:	9302      	str	r3, [sp, #8]
   d6c2c:	4b08      	ldr	r3, [pc, #32]	; (d6c50 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d6c2e:	9300      	str	r3, [sp, #0]
   d6c30:	aa02      	add	r2, sp, #8
   d6c32:	4623      	mov	r3, r4
   d6c34:	4907      	ldr	r1, [pc, #28]	; (d6c54 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d6c36:	9403      	str	r4, [sp, #12]
   d6c38:	2001      	movs	r0, #1
   d6c3a:	f7ff fd79 	bl	d6730 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d6c3e:	6828      	ldr	r0, [r5, #0]
   d6c40:	4905      	ldr	r1, [pc, #20]	; (d6c58 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d6c42:	8800      	ldrh	r0, [r0, #0]
   d6c44:	4623      	mov	r3, r4
   d6c46:	462a      	mov	r2, r5
   d6c48:	f7ff fbf6 	bl	d6438 <hal_ble_gatt_client_discover_all_services>
    }
   d6c4c:	b00b      	add	sp, #44	; 0x2c
   d6c4e:	bd30      	pop	{r4, r5, pc}
   d6c50:	000dc1bb 	.word	0x000dc1bb
   d6c54:	000dc1b0 	.word	0x000dc1b0
   d6c58:	000d8375 	.word	0x000d8375

000d6c5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d6c5c:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d6c5e:	200a      	movs	r0, #10
   d6c60:	4a02      	ldr	r2, [pc, #8]	; (d6c6c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d6c62:	2100      	movs	r1, #0
   d6c64:	f7ff fd5c 	bl	d6720 <panic_>
    }
}
   d6c68:	bd08      	pop	{r3, pc}
   d6c6a:	bf00      	nop
   d6c6c:	000d639d 	.word	0x000d639d

000d6c70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6c70:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6c72:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6c74:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d6c76:	689b      	ldr	r3, [r3, #8]
   d6c78:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6c7a:	68a3      	ldr	r3, [r4, #8]
   d6c7c:	3b01      	subs	r3, #1
   d6c7e:	60a3      	str	r3, [r4, #8]
   d6c80:	b92b      	cbnz	r3, d6c8e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d6c82:	6823      	ldr	r3, [r4, #0]
   d6c84:	4620      	mov	r0, r4
   d6c86:	68db      	ldr	r3, [r3, #12]
        }
    }
   d6c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d6c8c:	4718      	bx	r3
   d6c8e:	bd10      	pop	{r4, pc}

000d6c90 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d6c90:	b570      	push	{r4, r5, r6, lr}
   d6c92:	1c93      	adds	r3, r2, #2
   d6c94:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d6c96:	4288      	cmp	r0, r1
   d6c98:	d018      	beq.n	d6ccc <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d6c9a:	7804      	ldrb	r4, [r0, #0]
   d6c9c:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d6c9e:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d6ca2:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d6ca4:	bf88      	it	hi
   d6ca6:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d6caa:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d6cac:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d6cb0:	7834      	ldrb	r4, [r6, #0]
   d6cb2:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d6cb6:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d6cba:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d6cbc:	bf88      	it	hi
   d6cbe:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d6cc2:	f803 5c01 	strb.w	r5, [r3, #-1]
   d6cc6:	3001      	adds	r0, #1
   d6cc8:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d6cca:	e7e4      	b.n	d6c96 <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d6ccc:	4610      	mov	r0, r2
   d6cce:	bd70      	pop	{r4, r5, r6, pc}

000d6cd0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d6cd0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6cd4:	b2da      	uxtb	r2, r3
   d6cd6:	2a09      	cmp	r2, #9
   d6cd8:	d801      	bhi.n	d6cde <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d6cda:	4618      	mov	r0, r3
   d6cdc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d6cde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d6ce2:	2b05      	cmp	r3, #5
   d6ce4:	d801      	bhi.n	d6cea <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d6ce6:	3857      	subs	r0, #87	; 0x57
   d6ce8:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d6cea:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d6cee:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d6cf0:	bf94      	ite	ls
   d6cf2:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d6cf4:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d6cf8:	4770      	bx	lr
	...

000d6cfc <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6cfc:	b510      	push	{r4, lr}
            locked_(false) {
   d6cfe:	2300      	movs	r3, #0
   d6d00:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6d02:	4b04      	ldr	r3, [pc, #16]	; (d6d14 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d6d04:	4604      	mov	r4, r0
   d6d06:	6818      	ldr	r0, [r3, #0]
   d6d08:	f7ff fc22 	bl	d6550 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d6d0c:	2301      	movs	r3, #1
   d6d0e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d6d10:	4620      	mov	r0, r4
   d6d12:	bd10      	pop	{r4, pc}
   d6d14:	2003e3d4 	.word	0x2003e3d4

000d6d18 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d6d18:	b510      	push	{r4, lr}
        if (locked_) {
   d6d1a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d6d1c:	4604      	mov	r4, r0
        if (locked_) {
   d6d1e:	b11b      	cbz	r3, d6d28 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6d20:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d6d22:	6818      	ldr	r0, [r3, #0]
   d6d24:	f7ff fc1c 	bl	d6560 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d6d28:	4620      	mov	r0, r4
   d6d2a:	bd10      	pop	{r4, pc}
   d6d2c:	2003e3d4 	.word	0x2003e3d4

000d6d30 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d6d30:	2200      	movs	r2, #0
   d6d32:	6002      	str	r2, [r0, #0]
   d6d34:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d6d36:	4770      	bx	lr

000d6d38 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d6d38:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d6d3a:	7982      	ldrb	r2, [r0, #6]
   d6d3c:	798b      	ldrb	r3, [r1, #6]
   d6d3e:	429a      	cmp	r2, r3
   d6d40:	d106      	bne.n	d6d50 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6d42:	2206      	movs	r2, #6
   d6d44:	f004 f902 	bl	daf4c <memcmp>
   d6d48:	fab0 f080 	clz	r0, r0
   d6d4c:	0940      	lsrs	r0, r0, #5
   d6d4e:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d6d50:	2000      	movs	r0, #0
}
   d6d52:	bd08      	pop	{r3, pc}

000d6d54 <_ZNK8particle10BleAddress11toBigEndianEPh>:

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d6d54:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d6d56:	2305      	movs	r3, #5
        buf[i] = address_.addr[j];
   d6d58:	5cc2      	ldrb	r2, [r0, r3]
   d6d5a:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    return false;
}

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d6d5e:	3b01      	subs	r3, #1
   d6d60:	b2db      	uxtb	r3, r3
   d6d62:	2bff      	cmp	r3, #255	; 0xff
   d6d64:	d1f8      	bne.n	d6d58 <_ZNK8particle10BleAddress11toBigEndianEPh+0x4>
        buf[i] = address_.addr[j];
    }
}
   d6d66:	4770      	bx	lr

000d6d68 <_ZNK8particle10BleAddress8toStringEPcjb>:
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d6d68:	b570      	push	{r4, r5, r6, lr}
   d6d6a:	4614      	mov	r4, r2
   d6d6c:	b088      	sub	sp, #32
   d6d6e:	461d      	mov	r5, r3
    if (!buf || len == 0) {
   d6d70:	460e      	mov	r6, r1
   d6d72:	2900      	cmp	r1, #0
   d6d74:	d046      	beq.n	d6e04 <_ZNK8particle10BleAddress8toStringEPcjb+0x9c>
   d6d76:	2a00      	cmp	r2, #0
   d6d78:	d046      	beq.n	d6e08 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
   d6d7a:	a901      	add	r1, sp, #4
   d6d7c:	f7ff ffea 	bl	d6d54 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d6d80:	aa03      	add	r2, sp, #12
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
    if (stripped) {
   d6d82:	b115      	cbz	r5, d6d8a <_ZNK8particle10BleAddress8toStringEPcjb+0x22>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d6d84:	2106      	movs	r1, #6
   d6d86:	a801      	add	r0, sp, #4
   d6d88:	e02d      	b.n	d6de6 <_ZNK8particle10BleAddress8toStringEPcjb+0x7e>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d6d8a:	2101      	movs	r1, #1
   d6d8c:	a801      	add	r0, sp, #4
   d6d8e:	f7ff ff7f 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2] = ':';
   d6d92:	253a      	movs	r5, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d6d94:	f10d 020f 	add.w	r2, sp, #15
   d6d98:	2101      	movs	r1, #1
   d6d9a:	f10d 0005 	add.w	r0, sp, #5
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
   d6d9e:	f88d 500e 	strb.w	r5, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d6da2:	f7ff ff75 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d6da6:	f10d 0212 	add.w	r2, sp, #18
   d6daa:	2101      	movs	r1, #1
   d6dac:	f10d 0006 	add.w	r0, sp, #6
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
   d6db0:	f88d 5011 	strb.w	r5, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d6db4:	f7ff ff6c 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d6db8:	f10d 0215 	add.w	r2, sp, #21
   d6dbc:	2101      	movs	r1, #1
   d6dbe:	f10d 0007 	add.w	r0, sp, #7
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
   d6dc2:	f88d 5014 	strb.w	r5, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d6dc6:	f7ff ff63 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 3] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d6dca:	aa06      	add	r2, sp, #24
   d6dcc:	2101      	movs	r1, #1
   d6dce:	a802      	add	r0, sp, #8
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
        idx++;
        cStr[idx * 2 + 3] = ':';
   d6dd0:	f88d 5017 	strb.w	r5, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d6dd4:	f7ff ff5c 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 4] = ':';
   d6dd8:	f88d 501a 	strb.w	r5, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d6ddc:	f10d 021b 	add.w	r2, sp, #27
   d6de0:	2101      	movs	r1, #1
   d6de2:	f10d 0009 	add.w	r0, sp, #9
   d6de6:	3c01      	subs	r4, #1
   d6de8:	f7ff ff52 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
   d6dec:	2c11      	cmp	r4, #17
   d6dee:	bf28      	it	cs
   d6df0:	2411      	movcs	r4, #17
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d6df2:	4622      	mov	r2, r4
   d6df4:	a903      	add	r1, sp, #12
   d6df6:	4630      	mov	r0, r6
   d6df8:	f004 f8b7 	bl	daf6a <memcpy>
    buf[len++] = '\0';
   d6dfc:	2300      	movs	r3, #0
   d6dfe:	5533      	strb	r3, [r6, r4]
   d6e00:	1c60      	adds	r0, r4, #1
   d6e02:	e002      	b.n	d6e0a <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d6e04:	4608      	mov	r0, r1
   d6e06:	e000      	b.n	d6e0a <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
   d6e08:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d6e0a:	b008      	add	sp, #32
   d6e0c:	bd70      	pop	{r4, r5, r6, pc}

000d6e0e <_ZNK8particle10BleAddress8toStringEb>:

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d6e0e:	b510      	push	{r4, lr}
   d6e10:	b086      	sub	sp, #24
   d6e12:	4604      	mov	r4, r0
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d6e14:	4613      	mov	r3, r2

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d6e16:	4608      	mov	r0, r1
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d6e18:	2212      	movs	r2, #18
   d6e1a:	a901      	add	r1, sp, #4
   d6e1c:	f7ff ffa4 	bl	d6d68 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d6e20:	a901      	add	r1, sp, #4
   d6e22:	4620      	mov	r0, r4
   d6e24:	f7ff fe4f 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d6e28:	4620      	mov	r0, r4
   d6e2a:	b006      	add	sp, #24
   d6e2c:	bd10      	pop	{r4, pc}
	...

000d6e30 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d6e30:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d6e32:	2301      	movs	r3, #1
   d6e34:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e36:	4b05      	ldr	r3, [pc, #20]	; (d6e4c <_ZN8particle7BleUuidC1Ev+0x1c>)
   d6e38:	4602      	mov	r2, r0
   d6e3a:	f103 0110 	add.w	r1, r3, #16
   d6e3e:	f853 4b04 	ldr.w	r4, [r3], #4
   d6e42:	f842 4b04 	str.w	r4, [r2], #4
   d6e46:	428b      	cmp	r3, r1
   d6e48:	d1f9      	bne.n	d6e3e <_ZN8particle7BleUuidC1Ev+0xe>
}
   d6e4a:	bd10      	pop	{r4, pc}
   d6e4c:	000dc350 	.word	0x000dc350

000d6e50 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6e50:	7c0b      	ldrb	r3, [r1, #16]
   d6e52:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d6e56:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d6e58:	d110      	bne.n	d6e7c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d6e5a:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6e5c:	4b0d      	ldr	r3, [pc, #52]	; (d6e94 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d6e5e:	4602      	mov	r2, r0
   d6e60:	f103 0410 	add.w	r4, r3, #16
   d6e64:	f853 5b04 	ldr.w	r5, [r3], #4
   d6e68:	f842 5b04 	str.w	r5, [r2], #4
   d6e6c:	42a3      	cmp	r3, r4
   d6e6e:	d1f9      	bne.n	d6e64 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d6e70:	880b      	ldrh	r3, [r1, #0]
   d6e72:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d6e74:	880b      	ldrh	r3, [r1, #0]
   d6e76:	121b      	asrs	r3, r3, #8
   d6e78:	7343      	strb	r3, [r0, #13]
   d6e7a:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d6e7c:	2301      	movs	r3, #1
   d6e7e:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6e80:	f101 0210 	add.w	r2, r1, #16
   d6e84:	4603      	mov	r3, r0
   d6e86:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e8a:	f843 4b04 	str.w	r4, [r3], #4
   d6e8e:	4291      	cmp	r1, r2
   d6e90:	d1f9      	bne.n	d6e86 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d6e92:	bd30      	pop	{r4, r5, pc}
   d6e94:	000dc350 	.word	0x000dc350

000d6e98 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d6e98:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d6e9a:	690b      	ldr	r3, [r1, #16]
   d6e9c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6e9e:	f101 0210 	add.w	r2, r1, #16
   d6ea2:	4603      	mov	r3, r0
   d6ea4:	f851 4b04 	ldr.w	r4, [r1], #4
   d6ea8:	f843 4b04 	str.w	r4, [r3], #4
   d6eac:	4291      	cmp	r1, r2
   d6eae:	d1f9      	bne.n	d6ea4 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6eb0:	bd10      	pop	{r4, pc}

000d6eb2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6eb2:	b510      	push	{r4, lr}
    if (uuid128) {
   d6eb4:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6eb6:	4604      	mov	r4, r0
    if (uuid128) {
   d6eb8:	b1b9      	cbz	r1, d6eea <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d6eba:	2a01      	cmp	r2, #1
   d6ebc:	d109      	bne.n	d6ed2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6ebe:	4603      	mov	r3, r0
   d6ec0:	f101 0210 	add.w	r2, r1, #16
   d6ec4:	f851 0b04 	ldr.w	r0, [r1], #4
   d6ec8:	f843 0b04 	str.w	r0, [r3], #4
   d6ecc:	4291      	cmp	r1, r2
   d6ece:	d1f9      	bne.n	d6ec4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d6ed0:	e008      	b.n	d6ee4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d6ed2:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d6ed4:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d6ed6:	5c98      	ldrb	r0, [r3, r2]
   d6ed8:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d6edc:	3a01      	subs	r2, #1
   d6ede:	b2d2      	uxtb	r2, r2
   d6ee0:	2aff      	cmp	r2, #255	; 0xff
   d6ee2:	d1f8      	bne.n	d6ed6 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d6ee4:	2301      	movs	r3, #1
   d6ee6:	6123      	str	r3, [r4, #16]
   d6ee8:	e002      	b.n	d6ef0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d6eea:	2210      	movs	r2, #16
   d6eec:	f004 f863 	bl	dafb6 <memset>
    }
}
   d6ef0:	4620      	mov	r0, r4
   d6ef2:	bd10      	pop	{r4, pc}

000d6ef4 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d6ef4:	b538      	push	{r3, r4, r5, lr}
   d6ef6:	4604      	mov	r4, r0
   d6ef8:	460d      	mov	r5, r1
        : BleUuid() {
   d6efa:	f7ff ff99 	bl	d6e30 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d6efe:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d6f00:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6f02:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d6f04:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d6f06:	7365      	strb	r5, [r4, #13]
}
   d6f08:	4620      	mov	r0, r4
   d6f0a:	bd38      	pop	{r3, r4, r5, pc}

000d6f0c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d6f0c:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d6f0e:	690b      	ldr	r3, [r1, #16]
   d6f10:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6f12:	f101 0210 	add.w	r2, r1, #16
   d6f16:	4603      	mov	r3, r0
   d6f18:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f1c:	f843 4b04 	str.w	r4, [r3], #4
   d6f20:	4291      	cmp	r1, r2
   d6f22:	d1f9      	bne.n	d6f18 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d6f24:	bd10      	pop	{r4, pc}

000d6f26 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d6f26:	b510      	push	{r4, lr}
   d6f28:	b086      	sub	sp, #24
   d6f2a:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d6f2c:	2201      	movs	r2, #1
   d6f2e:	a801      	add	r0, sp, #4
   d6f30:	f7ff ffbf 	bl	d6eb2 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d6f34:	a901      	add	r1, sp, #4
   d6f36:	4620      	mov	r0, r4
   d6f38:	f7ff ffe8 	bl	d6f0c <_ZN8particle7BleUuidaSERKS0_>
}
   d6f3c:	b006      	add	sp, #24
   d6f3e:	bd10      	pop	{r4, pc}

000d6f40 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d6f40:	b510      	push	{r4, lr}
   d6f42:	b086      	sub	sp, #24
   d6f44:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d6f46:	a801      	add	r0, sp, #4
   d6f48:	f7ff ffd4 	bl	d6ef4 <_ZN8particle7BleUuidC1Et>
   d6f4c:	a901      	add	r1, sp, #4
   d6f4e:	4620      	mov	r0, r4
   d6f50:	f7ff ffdc 	bl	d6f0c <_ZN8particle7BleUuidaSERKS0_>
}
   d6f54:	b006      	add	sp, #24
   d6f56:	bd10      	pop	{r4, pc}

000d6f58 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d6f58:	b510      	push	{r4, lr}
   d6f5a:	b086      	sub	sp, #24
   d6f5c:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d6f5e:	a801      	add	r0, sp, #4
   d6f60:	f7ff ff76 	bl	d6e50 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d6f64:	a901      	add	r1, sp, #4
   d6f66:	4620      	mov	r0, r4
   d6f68:	f7ff ffd0 	bl	d6f0c <_ZN8particle7BleUuidaSERKS0_>
}
   d6f6c:	b006      	add	sp, #24
   d6f6e:	bd10      	pop	{r4, pc}

000d6f70 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d6f70:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6f72:	6902      	ldr	r2, [r0, #16]
   d6f74:	690b      	ldr	r3, [r1, #16]
   d6f76:	429a      	cmp	r2, r3
   d6f78:	d106      	bne.n	d6f88 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d6f7a:	2210      	movs	r2, #16
   d6f7c:	f003 ffe6 	bl	daf4c <memcmp>
   d6f80:	fab0 f080 	clz	r0, r0
   d6f84:	0940      	lsrs	r0, r0, #5
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	2000      	movs	r0, #0
}
   d6f8a:	bd08      	pop	{r3, pc}

000d6f8c <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d6f8c:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d6f8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d6f90:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6f92:	4b31      	ldr	r3, [pc, #196]	; (d7058 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d6f94:	460e      	mov	r6, r1
   d6f96:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6f98:	4602      	mov	r2, r0
   d6f9a:	f103 0110 	add.w	r1, r3, #16
   d6f9e:	f853 0b04 	ldr.w	r0, [r3], #4
   d6fa2:	f842 0b04 	str.w	r0, [r2], #4
   d6fa6:	428b      	cmp	r3, r1
   d6fa8:	d1f9      	bne.n	d6f9e <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d6faa:	2e00      	cmp	r6, #0
   d6fac:	d051      	beq.n	d7052 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6fae:	2124      	movs	r1, #36	; 0x24
   d6fb0:	4630      	mov	r0, r6
   d6fb2:	f004 f893 	bl	db0dc <strnlen>
   d6fb6:	2804      	cmp	r0, #4
   d6fb8:	d010      	beq.n	d6fdc <_ZN8particle7BleUuid9constructEPKc+0x50>
   d6fba:	2700      	movs	r7, #0
   d6fbc:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d6fbe:	2124      	movs	r1, #36	; 0x24
   d6fc0:	4630      	mov	r0, r6
   d6fc2:	f004 f88b 	bl	db0dc <strnlen>
   d6fc6:	42b8      	cmp	r0, r7
   d6fc8:	d901      	bls.n	d6fce <_ZN8particle7BleUuid9constructEPKc+0x42>
   d6fca:	bb44      	cbnz	r4, d701e <_ZN8particle7BleUuid9constructEPKc+0x92>
   d6fcc:	e041      	b.n	d7052 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d6fce:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d6fd0:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d6fd2:	42a5      	cmp	r5, r4
   d6fd4:	d03d      	beq.n	d7052 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d6fd6:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d6fda:	e7fa      	b.n	d6fd2 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6fdc:	7830      	ldrb	r0, [r6, #0]
   d6fde:	f7ff fe77 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6fe2:	1e04      	subs	r4, r0, #0
   d6fe4:	db18      	blt.n	d7018 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d6fe6:	7870      	ldrb	r0, [r6, #1]
   d6fe8:	f7ff fe72 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d6fec:	2800      	cmp	r0, #0
   d6fee:	db13      	blt.n	d7018 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d6ff0:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d6ff4:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d6ff8:	78b0      	ldrb	r0, [r6, #2]
   d6ffa:	f7ff fe69 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d6ffe:	1e04      	subs	r4, r0, #0
   d7000:	db0a      	blt.n	d7018 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d7002:	78f0      	ldrb	r0, [r6, #3]
   d7004:	f7ff fe64 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d7008:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d700a:	bfa1      	itttt	ge
   d700c:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d7010:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d7014:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d7016:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d7018:	2300      	movs	r3, #0
   d701a:	612b      	str	r3, [r5, #16]
   d701c:	e019      	b.n	d7052 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d701e:	5df0      	ldrb	r0, [r6, r7]
   d7020:	f7ff fe56 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d7024:	0603      	lsls	r3, r0, #24
   d7026:	d412      	bmi.n	d704e <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d7028:	3c01      	subs	r4, #1
   d702a:	0100      	lsls	r0, r0, #4
   d702c:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d702e:	2124      	movs	r1, #36	; 0x24
   d7030:	4630      	mov	r0, r6
   d7032:	f004 f853 	bl	db0dc <strnlen>
   d7036:	3701      	adds	r7, #1
   d7038:	4287      	cmp	r7, r0
   d703a:	d208      	bcs.n	d704e <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d703c:	5df0      	ldrb	r0, [r6, r7]
   d703e:	f7ff fe47 	bl	d6cd0 <_ZN8particle11hexToNibbleEc>
   d7042:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d7044:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d7046:	bfa2      	ittt	ge
   d7048:	5d2b      	ldrbge	r3, [r5, r4]
   d704a:	4318      	orrge	r0, r3
   d704c:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d704e:	3701      	adds	r7, #1
   d7050:	e7b5      	b.n	d6fbe <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d7052:	b003      	add	sp, #12
   d7054:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7056:	bf00      	nop
   d7058:	000dc350 	.word	0x000dc350

000d705c <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d705c:	b538      	push	{r3, r4, r5, lr}
   d705e:	4604      	mov	r4, r0
   d7060:	460d      	mov	r5, r1
        : BleUuid() {
   d7062:	f7ff fee5 	bl	d6e30 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d7066:	4620      	mov	r0, r4
   d7068:	4629      	mov	r1, r5
   d706a:	f7ff ff8f 	bl	d6f8c <_ZN8particle7BleUuid9constructEPKc>
}
   d706e:	4620      	mov	r0, r4
   d7070:	bd38      	pop	{r3, r4, r5, pc}

000d7072 <_ZNK8particle7BleUuid11toBigEndianEPh>:
        uuid128_[len - 1] = 0x00;
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d7072:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d7074:	230f      	movs	r3, #15
        buf[i] = uuid128_[j];
   d7076:	5cc2      	ldrb	r2, [r0, r3]
   d7078:	f801 2f01 	strb.w	r2, [r1, #1]!
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d707c:	3b01      	subs	r3, #1
   d707e:	b2db      	uxtb	r3, r3
   d7080:	2bff      	cmp	r3, #255	; 0xff
   d7082:	d1f8      	bne.n	d7076 <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid128_[j];
    }
}
   d7084:	4770      	bx	lr

000d7086 <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d7086:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d708a:	4698      	mov	r8, r3
   d708c:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d708e:	460d      	mov	r5, r1
   d7090:	2900      	cmp	r1, #0
   d7092:	d057      	beq.n	d7144 <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
   d7094:	2a00      	cmp	r2, #0
   d7096:	d057      	beq.n	d7148 <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d7098:	6906      	ldr	r6, [r0, #16]
   d709a:	1e54      	subs	r4, r2, #1
   d709c:	b9ae      	cbnz	r6, d70ca <_ZNK8particle7BleUuid8toStringEPcjb+0x44>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d709e:	7b02      	ldrb	r2, [r0, #12]
   d70a0:	7b43      	ldrb	r3, [r0, #13]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d70a2:	9605      	str	r6, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d70a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d70a8:	2102      	movs	r1, #2
   d70aa:	aa05      	add	r2, sp, #20
   d70ac:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d70ae:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d70b2:	f7ff fded 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
   d70b6:	2c04      	cmp	r4, #4
   d70b8:	bf28      	it	cs
   d70ba:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d70bc:	4622      	mov	r2, r4
   d70be:	a905      	add	r1, sp, #20
   d70c0:	4628      	mov	r0, r5
   d70c2:	f003 ff52 	bl	daf6a <memcpy>
        buf[len++] = '\0';
   d70c6:	552e      	strb	r6, [r5, r4]
   d70c8:	e03a      	b.n	d7140 <_ZNK8particle7BleUuid8toStringEPcjb+0xba>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d70ca:	a901      	add	r1, sp, #4
   d70cc:	f7ff ffd1 	bl	d7072 <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d70d0:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d70d2:	f1b8 0f00 	cmp.w	r8, #0
   d70d6:	d002      	beq.n	d70de <_ZNK8particle7BleUuid8toStringEPcjb+0x58>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d70d8:	2110      	movs	r1, #16
   d70da:	a801      	add	r0, sp, #4
   d70dc:	e024      	b.n	d7128 <_ZNK8particle7BleUuid8toStringEPcjb+0xa2>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d70de:	2104      	movs	r1, #4
   d70e0:	eb0d 0001 	add.w	r0, sp, r1
   d70e4:	f7ff fdd4 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d70e8:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d70ea:	f10d 021d 	add.w	r2, sp, #29
   d70ee:	2102      	movs	r1, #2
   d70f0:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d70f2:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d70f6:	f7ff fdcb 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d70fa:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d70fe:	2102      	movs	r1, #2
   d7100:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d7104:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d7108:	f7ff fdc2 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d710c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d7110:	2102      	movs	r1, #2
   d7112:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d7114:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d7118:	f7ff fdba 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d711c:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d7120:	aa0b      	add	r2, sp, #44	; 0x2c
   d7122:	2106      	movs	r1, #6
   d7124:	f10d 000e 	add.w	r0, sp, #14
   d7128:	f7ff fdb2 	bl	d6c90 <_ZL12bytes2hexbufPKhjPc>
   d712c:	2c24      	cmp	r4, #36	; 0x24
   d712e:	bf28      	it	cs
   d7130:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d7132:	4622      	mov	r2, r4
   d7134:	a905      	add	r1, sp, #20
   d7136:	4628      	mov	r0, r5
   d7138:	f003 ff17 	bl	daf6a <memcpy>
    buf[len++] = '\0';
   d713c:	2300      	movs	r3, #0
   d713e:	552b      	strb	r3, [r5, r4]
   d7140:	1c60      	adds	r0, r4, #1
   d7142:	e002      	b.n	d714a <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d7144:	4608      	mov	r0, r1
   d7146:	e000      	b.n	d714a <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
   d7148:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d714a:	b00e      	add	sp, #56	; 0x38
   d714c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7150 <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d7150:	b510      	push	{r4, lr}
   d7152:	b08a      	sub	sp, #40	; 0x28
   d7154:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d7156:	2300      	movs	r3, #0
   d7158:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d715a:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d715c:	4669      	mov	r1, sp
   d715e:	f7ff ff92 	bl	d7086 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d7162:	4669      	mov	r1, sp
   d7164:	4620      	mov	r0, r4
   d7166:	f7ff fcae 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d716a:	4620      	mov	r0, r4
   d716c:	b00a      	add	sp, #40	; 0x28
   d716e:	bd10      	pop	{r4, pc}

000d7170 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d7170:	b538      	push	{r3, r4, r5, lr}
   d7172:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d7174:	b101      	cbz	r1, d7178 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d7176:	b912      	cbnz	r2, d717e <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d7178:	2000      	movs	r0, #0
   d717a:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d717c:	bd38      	pop	{r3, r4, r5, pc}
   d717e:	2a1f      	cmp	r2, #31
   d7180:	bf28      	it	cs
   d7182:	221f      	movcs	r2, #31
   d7184:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d7186:	f003 fef0 	bl	daf6a <memcpy>
    selfLen_ = len;
   d718a:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d718c:	4620      	mov	r0, r4
}
   d718e:	bd38      	pop	{r3, r4, r5, pc}

000d7190 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d7190:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d7192:	b18b      	cbz	r3, d71b8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d7194:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d7196:	1ce5      	adds	r5, r4, #3
   d7198:	428d      	cmp	r5, r1
   d719a:	d80f      	bhi.n	d71bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d719c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d719e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d71a0:	5d87      	ldrb	r7, [r0, r6]
   d71a2:	4297      	cmp	r7, r2
   d71a4:	d105      	bne.n	d71b2 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d71a6:	442e      	add	r6, r5
   d71a8:	42b1      	cmp	r1, r6
   d71aa:	d307      	bcc.n	d71bc <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d71ac:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d71ae:	1c68      	adds	r0, r5, #1
                return adsLen;
   d71b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d71b2:	3501      	adds	r5, #1
   d71b4:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d71b6:	e7ee      	b.n	d7196 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d71b8:	4618      	mov	r0, r3
   d71ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d71bc:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d71be:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d71c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d71c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d71c4:	4604      	mov	r4, r0
   d71c6:	460e      	mov	r6, r1
   d71c8:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d71ca:	4617      	mov	r7, r2
   d71cc:	2a00      	cmp	r2, #0
   d71ce:	d03a      	beq.n	d7246 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d71d0:	460a      	mov	r2, r1
   d71d2:	ab01      	add	r3, sp, #4
   d71d4:	6a01      	ldr	r1, [r0, #32]
   d71d6:	f7ff ffdb 	bl	d7190 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d71da:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d71de:	6a22      	ldr	r2, [r4, #32]
   d71e0:	bb03      	cbnz	r3, d7224 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d71e2:	b1f8      	cbz	r0, d7224 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d71e4:	1c96      	adds	r6, r2, #2
   d71e6:	442e      	add	r6, r5
   d71e8:	1a36      	subs	r6, r6, r0
   d71ea:	2e1f      	cmp	r6, #31
   d71ec:	d82b      	bhi.n	d7246 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d71ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d71f2:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d71f6:	ebc8 0202 	rsb	r2, r8, r2
   d71fa:	1a12      	subs	r2, r2, r0
   d71fc:	eb00 0108 	add.w	r1, r0, r8
   d7200:	eb05 0009 	add.w	r0, r5, r9
   d7204:	b292      	uxth	r2, r2
   d7206:	4421      	add	r1, r4
   d7208:	4420      	add	r0, r4
   d720a:	f003 feb9 	bl	daf80 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d720e:	1c6b      	adds	r3, r5, #1
   d7210:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d7214:	462a      	mov	r2, r5
   d7216:	4639      	mov	r1, r7
   d7218:	eb04 0009 	add.w	r0, r4, r9
   d721c:	f003 fea5 	bl	daf6a <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d7220:	6226      	str	r6, [r4, #32]
   d7222:	e010      	b.n	d7246 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d7224:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d7226:	182b      	adds	r3, r5, r0
   d7228:	2b1f      	cmp	r3, #31
   d722a:	d80c      	bhi.n	d7246 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d722c:	1c6b      	adds	r3, r5, #1
   d722e:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7230:	4422      	add	r2, r4
   d7232:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d7234:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d7236:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d7238:	4420      	add	r0, r4
   d723a:	462a      	mov	r2, r5
   d723c:	f003 fe95 	bl	daf6a <memcpy>
        selfLen_ += len;
   d7240:	6a22      	ldr	r2, [r4, #32]
   d7242:	442a      	add	r2, r5
   d7244:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d7246:	6a20      	ldr	r0, [r4, #32]
}
   d7248:	b003      	add	sp, #12
   d724a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d724e <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d724e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7250:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d7252:	4603      	mov	r3, r0
   d7254:	f100 021f 	add.w	r2, r0, #31
   d7258:	2000      	movs	r0, #0
   d725a:	f803 0b01 	strb.w	r0, [r3], #1
   d725e:	4293      	cmp	r3, r2
   d7260:	f04f 0100 	mov.w	r1, #0
   d7264:	d1f9      	bne.n	d725a <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d7266:	aa04      	add	r2, sp, #16
   d7268:	2306      	movs	r3, #6
   d726a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d726e:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d7270:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d7272:	9100      	str	r1, [sp, #0]
   d7274:	4620      	mov	r0, r4
   d7276:	4619      	mov	r1, r3
   d7278:	f7ff ffa2 	bl	d71c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d727c:	4620      	mov	r0, r4
   d727e:	b004      	add	sp, #16
   d7280:	bd10      	pop	{r4, pc}

000d7282 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7282:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7286:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d7288:	b085      	sub	sp, #20
   d728a:	4606      	mov	r6, r0
   d728c:	4689      	mov	r9, r1
   d728e:	4617      	mov	r7, r2
   d7290:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d7292:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d7294:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d7298:	6a31      	ldr	r1, [r6, #32]
   d729a:	428d      	cmp	r5, r1
   d729c:	d22a      	bcs.n	d72f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d729e:	ab03      	add	r3, sp, #12
   d72a0:	464a      	mov	r2, r9
   d72a2:	1b49      	subs	r1, r1, r5
   d72a4:	1970      	adds	r0, r6, r5
   d72a6:	f7ff ff73 	bl	d7190 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d72aa:	4683      	mov	fp, r0
   d72ac:	b310      	cbz	r0, d72f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d72ae:	4554      	cmp	r4, sl
   d72b0:	d220      	bcs.n	d72f4 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d72b2:	2804      	cmp	r0, #4
   d72b4:	9903      	ldr	r1, [sp, #12]
   d72b6:	d10c      	bne.n	d72d2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d72b8:	4429      	add	r1, r5
   d72ba:	1872      	adds	r2, r6, r1
   d72bc:	1c63      	adds	r3, r4, #1
   d72be:	78d1      	ldrb	r1, [r2, #3]
   d72c0:	7892      	ldrb	r2, [r2, #2]
   d72c2:	9301      	str	r3, [sp, #4]
   d72c4:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d72c8:	fb08 7004 	mla	r0, r8, r4, r7
   d72cc:	f7ff fe38 	bl	d6f40 <_ZN8particle7BleUuidaSEt>
   d72d0:	e00a      	b.n	d72e8 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d72d2:	2812      	cmp	r0, #18
   d72d4:	d10a      	bne.n	d72ec <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d72d6:	3102      	adds	r1, #2
   d72d8:	4429      	add	r1, r5
   d72da:	1c63      	adds	r3, r4, #1
   d72dc:	4431      	add	r1, r6
   d72de:	fb08 7004 	mla	r0, r8, r4, r7
   d72e2:	9301      	str	r3, [sp, #4]
   d72e4:	f7ff fe1f 	bl	d6f26 <_ZN8particle7BleUuidaSEPKh>
   d72e8:	9b01      	ldr	r3, [sp, #4]
   d72ea:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d72ec:	9b03      	ldr	r3, [sp, #12]
   d72ee:	445b      	add	r3, fp
   d72f0:	441d      	add	r5, r3
   d72f2:	e7d1      	b.n	d7298 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d72f4:	4620      	mov	r0, r4
   d72f6:	b005      	add	sp, #20
   d72f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d72fc <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d72fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7300:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d7302:	460d      	mov	r5, r1
   d7304:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7306:	460a      	mov	r2, r1
   d7308:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d730a:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d730c:	f7ff ffb9 	bl	d7282 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d7310:	f04f 0814 	mov.w	r8, #20
   d7314:	1a33      	subs	r3, r6, r0
   d7316:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d731a:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d731c:	2103      	movs	r1, #3
   d731e:	4638      	mov	r0, r7
   d7320:	f7ff ffaf 	bl	d7282 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d7324:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d7326:	1b33      	subs	r3, r6, r4
   d7328:	fb08 5204 	mla	r2, r8, r4, r5
   d732c:	2106      	movs	r1, #6
   d732e:	4638      	mov	r0, r7
   d7330:	f7ff ffa7 	bl	d7282 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d7334:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d7336:	1b33      	subs	r3, r6, r4
   d7338:	fb08 5204 	mla	r2, r8, r4, r5
   d733c:	2107      	movs	r1, #7
   d733e:	4638      	mov	r0, r7
   d7340:	f7ff ff9f 	bl	d7282 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d7344:	4420      	add	r0, r4
   d7346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d734c <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d734c:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d734e:	2500      	movs	r5, #0
   d7350:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d7354:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d7356:	8043      	strh	r3, [r0, #2]
   d7358:	220e      	movs	r2, #14
   d735a:	4629      	mov	r1, r5
   d735c:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d735e:	7105      	strb	r5, [r0, #4]
   d7360:	3006      	adds	r0, #6
   d7362:	f003 fe28 	bl	dafb6 <memset>
   d7366:	f104 0014 	add.w	r0, r4, #20
   d736a:	f7ff fd61 	bl	d6e30 <_ZN8particle7BleUuidC1Ev>
   d736e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d7372:	f7ff fd5d 	bl	d6e30 <_ZN8particle7BleUuidC1Ev>
   d7376:	4904      	ldr	r1, [pc, #16]	; (d7388 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d7378:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d737c:	f7ff fba3 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
   d7380:	64e5      	str	r5, [r4, #76]	; 0x4c
   d7382:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d7384:	4620      	mov	r0, r4
   d7386:	bd38      	pop	{r3, r4, r5, pc}
   d7388:	000dc434 	.word	0x000dc434

000d738c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d738c:	b510      	push	{r4, lr}
   d738e:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7390:	69c2      	ldr	r2, [r0, #28]
   d7392:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d7396:	4293      	cmp	r3, r2
   d7398:	4618      	mov	r0, r3
   d739a:	d006      	beq.n	d73aa <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d739c:	6804      	ldr	r4, [r0, #0]
   d739e:	8824      	ldrh	r4, [r4, #0]
   d73a0:	428c      	cmp	r4, r1
   d73a2:	f103 0308 	add.w	r3, r3, #8
   d73a6:	d1f6      	bne.n	d7396 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d73a8:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d73aa:	2000      	movs	r0, #0
    }
   d73ac:	bd10      	pop	{r4, pc}
	...

000d73b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d73b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d73b4:	4680      	mov	r8, r0
   d73b6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d73b8:	460e      	mov	r6, r1
   d73ba:	b369      	cbz	r1, d7418 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d73bc:	b362      	cbz	r2, d7418 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d73be:	2af4      	cmp	r2, #244	; 0xf4
   d73c0:	6805      	ldr	r5, [r0, #0]
   d73c2:	bf28      	it	cs
   d73c4:	22f4      	movcs	r2, #244	; 0xf4
   d73c6:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d73c8:	782a      	ldrb	r2, [r5, #0]
   d73ca:	b1a2      	cbz	r2, d73f6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d73cc:	792b      	ldrb	r3, [r5, #4]
   d73ce:	0798      	lsls	r0, r3, #30
   d73d0:	d507      	bpl.n	d73e2 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d73d2:	2300      	movs	r3, #0
   d73d4:	4622      	mov	r2, r4
   d73d6:	89a8      	ldrh	r0, [r5, #12]
   d73d8:	f7ff f824 	bl	d6424 <hal_ble_gatt_server_set_characteristic_value>
   d73dc:	2800      	cmp	r0, #0
   d73de:	da02      	bge.n	d73e6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d73e0:	e043      	b.n	d746a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d73e2:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d73e6:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d73ea:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d73ec:	06da      	lsls	r2, r3, #27
   d73ee:	d518      	bpl.n	d7422 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d73f0:	2f01      	cmp	r7, #1
   d73f2:	d123      	bne.n	d743c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d73f4:	e015      	b.n	d7422 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d73f6:	8868      	ldrh	r0, [r5, #2]
   d73f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d73fc:	4298      	cmp	r0, r3
   d73fe:	d00d      	beq.n	d741c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d7400:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d7402:	0759      	lsls	r1, r3, #29
   d7404:	d523      	bpl.n	d744e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d7406:	2f01      	cmp	r7, #1
   d7408:	d021      	beq.n	d744e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d740a:	89a9      	ldrh	r1, [r5, #12]
   d740c:	9200      	str	r2, [sp, #0]
   d740e:	4623      	mov	r3, r4
   d7410:	4632      	mov	r2, r6
   d7412:	f7ff f82f 	bl	d6474 <hal_ble_gatt_client_write_without_response>
   d7416:	e028      	b.n	d746a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d7418:	4815      	ldr	r0, [pc, #84]	; (d7470 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d741a:	e026      	b.n	d746a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d741c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d7420:	e023      	b.n	d746a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d7422:	069a      	lsls	r2, r3, #26
   d7424:	d521      	bpl.n	d746a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d7426:	2f02      	cmp	r7, #2
   d7428:	d01f      	beq.n	d746a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d742a:	89a8      	ldrh	r0, [r5, #12]
   d742c:	2300      	movs	r3, #0
   d742e:	4622      	mov	r2, r4
   d7430:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7432:	b002      	add	sp, #8
   d7434:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d7438:	f7ff b858 	b.w	d64ec <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d743c:	89a8      	ldrh	r0, [r5, #12]
   d743e:	2300      	movs	r3, #0
   d7440:	4622      	mov	r2, r4
   d7442:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d7444:	b002      	add	sp, #8
   d7446:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d744a:	f7ff b845 	b.w	d64d8 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d744e:	071b      	lsls	r3, r3, #28
   d7450:	d501      	bpl.n	d7456 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d7452:	2f02      	cmp	r7, #2
   d7454:	d102      	bne.n	d745c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d7456:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d745a:	e006      	b.n	d746a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d745c:	2300      	movs	r3, #0
   d745e:	89a9      	ldrh	r1, [r5, #12]
   d7460:	9300      	str	r3, [sp, #0]
   d7462:	4632      	mov	r2, r6
   d7464:	4623      	mov	r3, r4
   d7466:	f7fe fffb 	bl	d6460 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d746a:	b002      	add	sp, #8
   d746c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7470:	fffffef2 	.word	0xfffffef2

000d7474 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d7474:	b570      	push	{r4, r5, r6, lr}
   d7476:	6804      	ldr	r4, [r0, #0]
   d7478:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d747a:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d747c:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d747e:	2900      	cmp	r1, #0
   d7480:	d12e      	bne.n	d74e0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d7482:	8862      	ldrh	r2, [r4, #2]
   d7484:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7488:	429a      	cmp	r2, r3
   d748a:	d029      	beq.n	d74e0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d748c:	8a23      	ldrh	r3, [r4, #16]
   d748e:	b353      	cbz	r3, d74e6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d7490:	2518      	movs	r5, #24
   d7492:	462a      	mov	r2, r5
   d7494:	4668      	mov	r0, sp
   d7496:	f003 fd8e 	bl	dafb6 <memset>
    config.version = BLE_API_VERSION;
   d749a:	2301      	movs	r3, #1
   d749c:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d74a0:	4b13      	ldr	r3, [pc, #76]	; (d74f0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d74a2:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d74a6:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d74a8:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d74aa:	8863      	ldrh	r3, [r4, #2]
   d74ac:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d74b0:	8a23      	ldrh	r3, [r4, #16]
   d74b2:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d74b6:	89a3      	ldrh	r3, [r4, #12]
   d74b8:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d74bc:	b15e      	cbz	r6, d74d6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d74be:	7923      	ldrb	r3, [r4, #4]
   d74c0:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d74c2:	bf44      	itt	mi
   d74c4:	2302      	movmi	r3, #2
   d74c6:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d74c8:	7923      	ldrb	r3, [r4, #4]
   d74ca:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d74cc:	bf42      	ittt	mi
   d74ce:	9b05      	ldrmi	r3, [sp, #20]
   d74d0:	f043 0301 	orrmi.w	r3, r3, #1
   d74d4:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d74d6:	2100      	movs	r1, #0
   d74d8:	4668      	mov	r0, sp
   d74da:	f7fe fff3 	bl	d64c4 <hal_ble_gatt_client_configure_cccd>
   d74de:	e004      	b.n	d74ea <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d74e0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d74e4:	e001      	b.n	d74ea <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d74e6:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d74ea:	b006      	add	sp, #24
   d74ec:	bd70      	pop	{r4, r5, r6, pc}
   d74ee:	bf00      	nop
   d74f0:	000d76cd 	.word	0x000d76cd

000d74f4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d74f4:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d74f6:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d74f8:	651a      	str	r2, [r3, #80]	; 0x50
   d74fa:	4770      	bx	lr

000d74fc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d74fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7500:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d7502:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d7504:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d7506:	9302      	str	r3, [sp, #8]
   d7508:	2500      	movs	r5, #0
   d750a:	4b2e      	ldr	r3, [pc, #184]	; (d75c4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d750c:	9300      	str	r3, [sp, #0]
   d750e:	aa02      	add	r2, sp, #8
   d7510:	462b      	mov	r3, r5
   d7512:	492d      	ldr	r1, [pc, #180]	; (d75c8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d7514:	9503      	str	r5, [sp, #12]
   d7516:	2001      	movs	r0, #1
   d7518:	f7ff f90a 	bl	d6730 <log_message>
   d751c:	6833      	ldr	r3, [r6, #0]
   d751e:	68dc      	ldr	r4, [r3, #12]
   d7520:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d7522:	f04f 081c 	mov.w	r8, #28
   d7526:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d752a:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d752c:	f1a4 0308 	sub.w	r3, r4, #8
   d7530:	429f      	cmp	r7, r3
   d7532:	6832      	ldr	r2, [r6, #0]
   d7534:	d017      	beq.n	d7566 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d7536:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d753a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d753e:	8a9b      	ldrh	r3, [r3, #20]
   d7540:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d7544:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7548:	8adb      	ldrh	r3, [r3, #22]
   d754a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d754e:	8810      	ldrh	r0, [r2, #0]
   d7550:	9500      	str	r5, [sp, #0]
   d7552:	4633      	mov	r3, r6
   d7554:	4a1d      	ldr	r2, [pc, #116]	; (d75cc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d7556:	a902      	add	r1, sp, #8
   d7558:	f7fe ff78 	bl	d644c <hal_ble_gatt_client_discover_characteristics>
   d755c:	2800      	cmp	r0, #0
   d755e:	f104 0408 	add.w	r4, r4, #8
   d7562:	dae3      	bge.n	d752c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d7564:	e02a      	b.n	d75bc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d7566:	6994      	ldr	r4, [r2, #24]
   d7568:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d756a:	2700      	movs	r7, #0
   d756c:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d7570:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d7572:	f1a4 0308 	sub.w	r3, r4, #8
   d7576:	429d      	cmp	r5, r3
   d7578:	d01f      	beq.n	d75ba <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d757a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d757e:	89db      	ldrh	r3, [r3, #14]
   d7580:	b1cb      	cbz	r3, d75b6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d7582:	2214      	movs	r2, #20
   d7584:	2100      	movs	r1, #0
   d7586:	a802      	add	r0, sp, #8
   d7588:	f003 fd15 	bl	dafb6 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d758c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d7590:	89d9      	ldrh	r1, [r3, #14]
   d7592:	6833      	ldr	r3, [r6, #0]
   d7594:	aa02      	add	r2, sp, #8
   d7596:	8818      	ldrh	r0, [r3, #0]
   d7598:	9700      	str	r7, [sp, #0]
   d759a:	2313      	movs	r3, #19
   d759c:	f7fe ff74 	bl	d6488 <hal_ble_gatt_client_read>
                if (len > 0) {
   d75a0:	b148      	cbz	r0, d75b6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d75a2:	ab0a      	add	r3, sp, #40	; 0x28
   d75a4:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d75a6:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d75a8:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d75ac:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d75b0:	303c      	adds	r0, #60	; 0x3c
   d75b2:	f7ff fab5 	bl	d6b20 <_ZN6StringaSEPKc>
   d75b6:	3408      	adds	r4, #8
   d75b8:	e7db      	b.n	d7572 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d75ba:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d75bc:	b00a      	add	sp, #40	; 0x28
   d75be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75c2:	bf00      	nop
   d75c4:	000dc1d7 	.word	0x000dc1d7
   d75c8:	000dc1b0 	.word	0x000dc1b0
   d75cc:	000d81bd 	.word	0x000d81bd

000d75d0 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d75d0:	6803      	ldr	r3, [r0, #0]
   d75d2:	8818      	ldrh	r0, [r3, #0]
}
   d75d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d75d8:	1ac0      	subs	r0, r0, r3
   d75da:	bf18      	it	ne
   d75dc:	2001      	movne	r0, #1
   d75de:	4770      	bx	lr

000d75e0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d75e0:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d75e2:	680b      	ldr	r3, [r1, #0]
   d75e4:	f8c2 3002 	str.w	r3, [r2, #2]
   d75e8:	684b      	ldr	r3, [r1, #4]
   d75ea:	f8c2 3006 	str.w	r3, [r2, #6]
   d75ee:	4770      	bx	lr

000d75f0 <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d75f0:	b510      	push	{r4, lr}
    return impl()->address();
   d75f2:	680a      	ldr	r2, [r1, #0]
   d75f4:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d75f8:	6003      	str	r3, [r0, #0]
   d75fa:	6853      	ldr	r3, [r2, #4]
   d75fc:	6043      	str	r3, [r0, #4]
}
   d75fe:	bd10      	pop	{r4, pc}

000d7600 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d7600:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d7602:	6802      	ldr	r2, [r0, #0]
   d7604:	680b      	ldr	r3, [r1, #0]
   d7606:	8812      	ldrh	r2, [r2, #0]
   d7608:	881b      	ldrh	r3, [r3, #0]
   d760a:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d760c:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d760e:	d10c      	bne.n	d762a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d7610:	4601      	mov	r1, r0
   d7612:	4668      	mov	r0, sp
   d7614:	f7ff ffec 	bl	d75f0 <_ZNK8particle13BlePeerDevice7addressEv>
   d7618:	4621      	mov	r1, r4
   d761a:	a802      	add	r0, sp, #8
   d761c:	f7ff ffe8 	bl	d75f0 <_ZNK8particle13BlePeerDevice7addressEv>
   d7620:	a902      	add	r1, sp, #8
   d7622:	4668      	mov	r0, sp
   d7624:	f7ff fb88 	bl	d6d38 <_ZNK8particle10BleAddresseqERKS0_>
   d7628:	b900      	cbnz	r0, d762c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d762a:	2000      	movs	r0, #0
}
   d762c:	b004      	add	sp, #16
   d762e:	bd10      	pop	{r4, pc}

000d7630 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d7630:	b510      	push	{r4, lr}
   d7632:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d7634:	2034      	movs	r0, #52	; 0x34
   d7636:	f7fc fd2e 	bl	d4096 <_Znwj>
   d763a:	4601      	mov	r1, r0
   d763c:	b168      	cbz	r0, d765a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d763e:	2300      	movs	r3, #0
   d7640:	6003      	str	r3, [r0, #0]
   d7642:	6043      	str	r3, [r0, #4]
   d7644:	6083      	str	r3, [r0, #8]
   d7646:	60c3      	str	r3, [r0, #12]
   d7648:	6103      	str	r3, [r0, #16]
   d764a:	6143      	str	r3, [r0, #20]
   d764c:	6183      	str	r3, [r0, #24]
   d764e:	61c3      	str	r3, [r0, #28]
   d7650:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d7652:	6243      	str	r3, [r0, #36]	; 0x24
   d7654:	6283      	str	r3, [r0, #40]	; 0x28
   d7656:	62c3      	str	r3, [r0, #44]	; 0x2c
   d7658:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d765a:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d765c:	b919      	cbnz	r1, d7666 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d765e:	4a0a      	ldr	r2, [pc, #40]	; (d7688 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7660:	200a      	movs	r0, #10
   d7662:	f7ff f85d 	bl	d6720 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d7666:	2000      	movs	r0, #0
   d7668:	f7fe feb8 	bl	d63dc <hal_ble_stack_init>
   d766c:	b120      	cbz	r0, d7678 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d766e:	4a06      	ldr	r2, [pc, #24]	; (d7688 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d7670:	2100      	movs	r1, #0
   d7672:	200a      	movs	r0, #10
   d7674:	f7ff f854 	bl	d6720 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d7678:	2200      	movs	r2, #0
   d767a:	6821      	ldr	r1, [r4, #0]
   d767c:	4803      	ldr	r0, [pc, #12]	; (d768c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d767e:	f7fe ff17 	bl	d64b0 <hal_ble_set_callback_on_periph_link_events>
}
   d7682:	4620      	mov	r0, r4
   d7684:	bd10      	pop	{r4, pc}
   d7686:	bf00      	nop
   d7688:	000d639d 	.word	0x000d639d
   d768c:	000d7ae9 	.word	0x000d7ae9

000d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d7690:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d7692:	4c0a      	ldr	r4, [pc, #40]	; (d76bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d7694:	6823      	ldr	r3, [r4, #0]
   d7696:	07db      	lsls	r3, r3, #31
   d7698:	d40e      	bmi.n	d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d769a:	4620      	mov	r0, r4
   d769c:	f7fc fd0e 	bl	d40bc <__cxa_guard_acquire>
   d76a0:	b150      	cbz	r0, d76b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d76a2:	4807      	ldr	r0, [pc, #28]	; (d76c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76a4:	f7ff ffc4 	bl	d7630 <_ZN8particle14BleLocalDeviceC1Ev>
   d76a8:	4620      	mov	r0, r4
   d76aa:	f7fc fd0c 	bl	d40c6 <__cxa_guard_release>
   d76ae:	4a05      	ldr	r2, [pc, #20]	; (d76c4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d76b0:	4905      	ldr	r1, [pc, #20]	; (d76c8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d76b2:	4803      	ldr	r0, [pc, #12]	; (d76c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76b4:	f003 facf 	bl	dac56 <__aeabi_atexit>
    return instance;
}
   d76b8:	4801      	ldr	r0, [pc, #4]	; (d76c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d76ba:	bd10      	pop	{r4, pc}
   d76bc:	2003e3d0 	.word	0x2003e3d0
   d76c0:	2003e3cc 	.word	0x2003e3cc
   d76c4:	2003d8c4 	.word	0x2003d8c4
   d76c8:	000d7851 	.word	0x000d7851

000d76cc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d76cc:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d76ce:	6803      	ldr	r3, [r0, #0]
   d76d0:	3b09      	subs	r3, #9
   d76d2:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d76d4:	b08a      	sub	sp, #40	; 0x28
   d76d6:	4604      	mov	r4, r0
   d76d8:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d76da:	d819      	bhi.n	d7710 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d76dc:	f7ff ffd8 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d76e0:	88a1      	ldrh	r1, [r4, #4]
   d76e2:	6800      	ldr	r0, [r0, #0]
   d76e4:	f7ff fe52 	bl	d738c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d76e8:	4602      	mov	r2, r0
   d76ea:	b958      	cbnz	r0, d7704 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d76ec:	2320      	movs	r3, #32
   d76ee:	9302      	str	r3, [sp, #8]
   d76f0:	4b08      	ldr	r3, [pc, #32]	; (d7714 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d76f2:	9003      	str	r0, [sp, #12]
   d76f4:	9300      	str	r3, [sp, #0]
   d76f6:	aa02      	add	r2, sp, #8
   d76f8:	4603      	mov	r3, r0
   d76fa:	4907      	ldr	r1, [pc, #28]	; (d7718 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d76fc:	2032      	movs	r0, #50	; 0x32
   d76fe:	f7ff f817 	bl	d6730 <log_message>
   d7702:	e005      	b.n	d7710 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d7704:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d7706:	b11d      	cbz	r5, d7710 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d7708:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d770a:	68e1      	ldr	r1, [r4, #12]
   d770c:	6920      	ldr	r0, [r4, #16]
   d770e:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d7710:	b00a      	add	sp, #40	; 0x28
   d7712:	bd70      	pop	{r4, r5, r6, pc}
   d7714:	000dc1fa 	.word	0x000dc1fa
   d7718:	000dc1b0 	.word	0x000dc1b0

000d771c <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d771c:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d771e:	a801      	add	r0, sp, #4
   d7720:	f7ff faec 	bl	d6cfc <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d7724:	2000      	movs	r0, #0
   d7726:	f7fe fe59 	bl	d63dc <hal_ble_stack_init>
   d772a:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d772c:	a801      	add	r0, sp, #4
   d772e:	f7ff faf3 	bl	d6d18 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d7732:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d7736:	b002      	add	sp, #8
   d7738:	bd10      	pop	{r4, pc}
	...

000d773c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d773c:	b530      	push	{r4, r5, lr}
   d773e:	b08b      	sub	sp, #44	; 0x2c
   d7740:	460d      	mov	r5, r1
    WiringBleLock lk;
   d7742:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d7744:	4614      	mov	r4, r2
    WiringBleLock lk;
   d7746:	f7ff fad9 	bl	d6cfc <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d774a:	b1b5      	cbz	r5, d777a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d774c:	b1ac      	cbz	r4, d777a <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d774e:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7750:	a902      	add	r1, sp, #8
   d7752:	480d      	ldr	r0, [pc, #52]	; (d7788 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d7754:	9406      	str	r4, [sp, #24]
   d7756:	9202      	str	r2, [sp, #8]
   d7758:	9203      	str	r2, [sp, #12]
   d775a:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d775c:	9207      	str	r2, [sp, #28]
   d775e:	9208      	str	r2, [sp, #32]
   d7760:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d7762:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d7764:	f7fe fe42 	bl	d63ec <hal_ble_gap_start_scan>
   d7768:	2800      	cmp	r0, #0
   d776a:	bfb8      	it	lt
   d776c:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d776e:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d7770:	bfa8      	it	ge
   d7772:	9c07      	ldrge	r4, [sp, #28]
   d7774:	f7ff f8c0 	bl	d68f8 <free>
   d7778:	e000      	b.n	d777c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d777a:	4c04      	ldr	r4, [pc, #16]	; (d778c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d777c:	a801      	add	r0, sp, #4
   d777e:	f7ff facb 	bl	d6d18 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d7782:	4620      	mov	r0, r4
   d7784:	b00b      	add	sp, #44	; 0x2c
   d7786:	bd30      	pop	{r4, r5, pc}
   d7788:	000d7c57 	.word	0x000d7c57
   d778c:	fffffef2 	.word	0xfffffef2

000d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7790:	680b      	ldr	r3, [r1, #0]
   d7792:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7794:	b113      	cbz	r3, d779c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d7796:	685a      	ldr	r2, [r3, #4]
   d7798:	3201      	adds	r2, #1
   d779a:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d779c:	4770      	bx	lr

000d779e <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d779e:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77a0:	f851 3b04 	ldr.w	r3, [r1], #4
   d77a4:	4604      	mov	r4, r0
   d77a6:	f840 3b04 	str.w	r3, [r0], #4
   d77aa:	f7ff fff1 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d77ae:	6823      	ldr	r3, [r4, #0]
   d77b0:	b90b      	cbnz	r3, d77b6 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d77b2:	f7ff fa53 	bl	d6c5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d77b6:	4620      	mov	r0, r4
   d77b8:	bd10      	pop	{r4, pc}

000d77ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d77ba:	b510      	push	{r4, lr}
   d77bc:	f851 3b04 	ldr.w	r3, [r1], #4
   d77c0:	4604      	mov	r4, r0
   d77c2:	f840 3b04 	str.w	r3, [r0], #4
   d77c6:	f7ff ffe3 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d77ca:	4620      	mov	r0, r4
   d77cc:	bd10      	pop	{r4, pc}

000d77ce <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d77ce:	b510      	push	{r4, lr}
   d77d0:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d77d2:	3004      	adds	r0, #4
   d77d4:	f7fc ffee 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d77d8:	4620      	mov	r0, r4
   d77da:	bd10      	pop	{r4, pc}

000d77dc <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d77dc:	b510      	push	{r4, lr}
   d77de:	4604      	mov	r4, r0
   d77e0:	3004      	adds	r0, #4
   d77e2:	f7fc ffe7 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d77e6:	4620      	mov	r0, r4
   d77e8:	bd10      	pop	{r4, pc}

000d77ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d77ea:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d77ec:	6804      	ldr	r4, [r0, #0]
   d77ee:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d77f0:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d77f2:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d77f6:	42a6      	cmp	r6, r4
   d77f8:	d004      	beq.n	d7804 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d77fa:	1d20      	adds	r0, r4, #4
   d77fc:	f7fc ffda 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7800:	3408      	adds	r4, #8
   d7802:	e7f8      	b.n	d77f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7804:	6828      	ldr	r0, [r5, #0]
   d7806:	f7ff f877 	bl	d68f8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d780a:	4628      	mov	r0, r5
   d780c:	bd70      	pop	{r4, r5, r6, pc}

000d780e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d780e:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d7810:	6804      	ldr	r4, [r0, #0]
   d7812:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7814:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d7816:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d781a:	42a6      	cmp	r6, r4
   d781c:	d004      	beq.n	d7828 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d781e:	1d20      	adds	r0, r4, #4
   d7820:	f7fc ffc8 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7824:	3408      	adds	r4, #8
   d7826:	e7f8      	b.n	d781a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7828:	6828      	ldr	r0, [r5, #0]
   d782a:	f7ff f865 	bl	d68f8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d782e:	4628      	mov	r0, r5
   d7830:	bd70      	pop	{r4, r5, r6, pc}

000d7832 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7832:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7834:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d7836:	f104 0018 	add.w	r0, r4, #24
   d783a:	f7ff ffe8 	bl	d780e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d783e:	f104 000c 	add.w	r0, r4, #12
   d7842:	f7ff ffd2 	bl	d77ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d7846:	4620      	mov	r0, r4
   d7848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d784c:	f7fc bc27 	b.w	d409e <_ZdlPv>

000d7850 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d7850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7852:	6804      	ldr	r4, [r0, #0]
   d7854:	4607      	mov	r7, r0
   d7856:	b1c4      	cbz	r4, d788a <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d7858:	69a5      	ldr	r5, [r4, #24]
   d785a:	69e3      	ldr	r3, [r4, #28]
   d785c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7860:	42ae      	cmp	r6, r5
   d7862:	d004      	beq.n	d786e <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7864:	1d28      	adds	r0, r5, #4
   d7866:	f7fc ffa5 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d786a:	3508      	adds	r5, #8
   d786c:	e7f8      	b.n	d7860 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d786e:	69a0      	ldr	r0, [r4, #24]
   d7870:	f7ff f842 	bl	d68f8 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d7874:	f104 000c 	add.w	r0, r4, #12
   d7878:	f7ff ffc9 	bl	d780e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d787c:	4620      	mov	r0, r4
   d787e:	f7ff ffb4 	bl	d77ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7882:	2134      	movs	r1, #52	; 0x34
   d7884:	4620      	mov	r0, r4
   d7886:	f003 f9f3 	bl	dac70 <_ZdlPvj>
   d788a:	4638      	mov	r0, r7
   d788c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d7890 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d7890:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7892:	2500      	movs	r5, #0
   d7894:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7896:	6045      	str	r5, [r0, #4]
   d7898:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d789a:	2024      	movs	r0, #36	; 0x24
   d789c:	f7fc fbfb 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d78a0:	4604      	mov	r4, r0
   d78a2:	b178      	cbz	r0, d78c4 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d78a4:	4603      	mov	r3, r0
   d78a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d78aa:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d78ae:	f8c0 5002 	str.w	r5, [r0, #2]
   d78b2:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d78b4:	7285      	strb	r5, [r0, #10]
   d78b6:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d78b8:	60c5      	str	r5, [r0, #12]
   d78ba:	6105      	str	r5, [r0, #16]
   d78bc:	6145      	str	r5, [r0, #20]
   d78be:	6185      	str	r5, [r0, #24]
   d78c0:	61c5      	str	r5, [r0, #28]
   d78c2:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d78c4:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d78c6:	2014      	movs	r0, #20
   d78c8:	9301      	str	r3, [sp, #4]
   d78ca:	f7fc fbe4 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d78ce:	4603      	mov	r3, r0
   d78d0:	b128      	cbz	r0, d78de <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d78d2:	2201      	movs	r2, #1
   d78d4:	6042      	str	r2, [r0, #4]
   d78d6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d78d8:	4a08      	ldr	r2, [pc, #32]	; (d78fc <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d78da:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d78dc:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d78de:	a802      	add	r0, sp, #8
   d78e0:	6872      	ldr	r2, [r6, #4]
   d78e2:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d78e6:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d78e8:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d78ea:	f7fc ff63 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d78ee:	6833      	ldr	r3, [r6, #0]
   d78f0:	b90b      	cbnz	r3, d78f6 <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d78f2:	f7ff f9b3 	bl	d6c5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d78f6:	4630      	mov	r0, r6
   d78f8:	b002      	add	sp, #8
   d78fa:	bd70      	pop	{r4, r5, r6, pc}
   d78fc:	000dc19c 	.word	0x000dc19c

000d7900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7900:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7902:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d7904:	6803      	ldr	r3, [r0, #0]
   d7906:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d7908:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d790a:	d00c      	beq.n	d7926 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d790c:	b114      	cbz	r4, d7914 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d790e:	6863      	ldr	r3, [r4, #4]
   d7910:	3301      	adds	r3, #1
   d7912:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d7914:	6828      	ldr	r0, [r5, #0]
   d7916:	b128      	cbz	r0, d7924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7918:	6843      	ldr	r3, [r0, #4]
   d791a:	3b01      	subs	r3, #1
   d791c:	6043      	str	r3, [r0, #4]
   d791e:	b90b      	cbnz	r3, d7924 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d7920:	f7ff f9a6 	bl	d6c70 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d7924:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d7926:	4628      	mov	r0, r5
   d7928:	bd38      	pop	{r3, r4, r5, pc}

000d792a <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d792a:	b510      	push	{r4, lr}
   d792c:	6802      	ldr	r2, [r0, #0]
   d792e:	680b      	ldr	r3, [r1, #0]
   d7930:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d7932:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d7934:	b110      	cbz	r0, d793c <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d7936:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d7938:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d793a:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d793c:	4620      	mov	r0, r4
   d793e:	f851 3b04 	ldr.w	r3, [r1], #4
   d7942:	f840 3b04 	str.w	r3, [r0], #4
   d7946:	f7ff ffdb 	bl	d7900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d794a:	4620      	mov	r0, r4
   d794c:	bd10      	pop	{r4, pc}

000d794e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d794e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7952:	6803      	ldr	r3, [r0, #0]
   d7954:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7956:	69de      	ldr	r6, [r3, #28]
   d7958:	b087      	sub	sp, #28
   d795a:	460f      	mov	r7, r1
   d795c:	4690      	mov	r8, r2
   d795e:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d7962:	42b4      	cmp	r4, r6
   d7964:	46a1      	mov	r9, r4
   d7966:	d011      	beq.n	d798c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d7968:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d796c:	a801      	add	r0, sp, #4
   d796e:	3114      	adds	r1, #20
   d7970:	f7ff fa92 	bl	d6e98 <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d7974:	4641      	mov	r1, r8
   d7976:	a801      	add	r0, sp, #4
   d7978:	f7ff fafa 	bl	d6f70 <_ZNK8particle7BleUuideqERKS0_>
   d797c:	4605      	mov	r5, r0
   d797e:	2800      	cmp	r0, #0
   d7980:	d0ef      	beq.n	d7962 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d7982:	4649      	mov	r1, r9
   d7984:	4638      	mov	r0, r7
   d7986:	f7ff ffd0 	bl	d792a <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d798a:	e000      	b.n	d798e <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d798c:	2500      	movs	r5, #0
}
   d798e:	4628      	mov	r0, r5
   d7990:	b007      	add	sp, #28
   d7992:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7996 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d7996:	b510      	push	{r4, lr}
   d7998:	f851 3b04 	ldr.w	r3, [r1], #4
   d799c:	4604      	mov	r4, r0
   d799e:	f840 3b04 	str.w	r3, [r0], #4
   d79a2:	f7ff ffad 	bl	d7900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d79a6:	4620      	mov	r0, r4
   d79a8:	bd10      	pop	{r4, pc}

000d79aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d79aa:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d79ac:	b570      	push	{r4, r5, r6, lr}
   d79ae:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d79b0:	d91a      	bls.n	d79e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d79b2:	4290      	cmp	r0, r2
   d79b4:	d219      	bcs.n	d79ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d79b6:	f1a1 0608 	sub.w	r6, r1, #8
   d79ba:	1a51      	subs	r1, r2, r1
   d79bc:	3904      	subs	r1, #4
   d79be:	1f15      	subs	r5, r2, #4
   d79c0:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d79c2:	1f2b      	subs	r3, r5, #4
   d79c4:	429e      	cmp	r6, r3
   d79c6:	d025      	beq.n	d7a14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d79c8:	2c04      	cmp	r4, #4
   d79ca:	d007      	beq.n	d79dc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79cc:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d79d0:	f844 3c04 	str.w	r3, [r4, #-4]
   d79d4:	4629      	mov	r1, r5
   d79d6:	4620      	mov	r0, r4
   d79d8:	f7ff feda 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d79dc:	4628      	mov	r0, r5
   d79de:	f7fc fee9 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d79e2:	3d08      	subs	r5, #8
   d79e4:	3c08      	subs	r4, #8
   d79e6:	e7ec      	b.n	d79c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d79e8:	d014      	beq.n	d7a14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d79ea:	1d0c      	adds	r4, r1, #4
   d79ec:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d79ee:	1f23      	subs	r3, r4, #4
   d79f0:	429d      	cmp	r5, r3
   d79f2:	d00f      	beq.n	d7a14 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d79f4:	2e04      	cmp	r6, #4
   d79f6:	d007      	beq.n	d7a08 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d79f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d79fc:	f846 3c04 	str.w	r3, [r6, #-4]
   d7a00:	4621      	mov	r1, r4
   d7a02:	4630      	mov	r0, r6
   d7a04:	f7ff fec4 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7a08:	4620      	mov	r0, r4
   d7a0a:	f7fc fed3 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7a0e:	3408      	adds	r4, #8
   d7a10:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7a12:	e7ec      	b.n	d79ee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d7a14:	bd70      	pop	{r4, r5, r6, pc}

000d7a16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d7a1a:	6804      	ldr	r4, [r0, #0]
   d7a1c:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a1e:	4605      	mov	r5, r0
   d7a20:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d7a22:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7a26:	42a7      	cmp	r7, r4
   d7a28:	d018      	beq.n	d7a5c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d7a2a:	4641      	mov	r1, r8
   d7a2c:	4620      	mov	r0, r4
   d7a2e:	f7ff fde7 	bl	d7600 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d7a32:	4606      	mov	r6, r0
   d7a34:	b908      	cbnz	r0, d7a3a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d7a36:	3408      	adds	r4, #8
   d7a38:	e7f5      	b.n	d7a26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d7a3a:	b18c      	cbz	r4, d7a60 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d7a3c:	1d20      	adds	r0, r4, #4
   d7a3e:	f7fc feb9 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d7a42:	682b      	ldr	r3, [r5, #0]
   d7a44:	686a      	ldr	r2, [r5, #4]
   d7a46:	f104 0108 	add.w	r1, r4, #8
   d7a4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7a4e:	4620      	mov	r0, r4
   d7a50:	f7ff ffab 	bl	d79aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d7a54:	686b      	ldr	r3, [r5, #4]
   d7a56:	3b01      	subs	r3, #1
   d7a58:	606b      	str	r3, [r5, #4]
    return true;
   d7a5a:	e002      	b.n	d7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d7a5c:	2600      	movs	r6, #0
   d7a5e:	e000      	b.n	d7a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d7a60:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d7a62:	4630      	mov	r0, r6
   d7a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7a68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7a6a:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7a6c:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d7a70:	6847      	ldr	r7, [r0, #4]
   d7a72:	9300      	str	r3, [sp, #0]
   d7a74:	a801      	add	r0, sp, #4
   d7a76:	f7ff fe8b 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7a7a:	6866      	ldr	r6, [r4, #4]
   d7a7c:	68a3      	ldr	r3, [r4, #8]
   d7a7e:	429e      	cmp	r6, r3
   d7a80:	db14      	blt.n	d7aac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d7a82:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7a84:	2e00      	cmp	r6, #0
   d7a86:	dd0b      	ble.n	d7aa0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7a88:	00f0      	lsls	r0, r6, #3
   d7a8a:	f7fe ff2d 	bl	d68e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7a8e:	4605      	mov	r5, r0
   d7a90:	b318      	cbz	r0, d7ada <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d7a92:	e894 0006 	ldmia.w	r4, {r1, r2}
   d7a96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7a9a:	f7ff ff86 	bl	d79aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7a9e:	e000      	b.n	d7aa2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7aa0:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7aa2:	6820      	ldr	r0, [r4, #0]
   d7aa4:	f7fe ff28 	bl	d68f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7aa8:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d7aaa:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7aac:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7aae:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7ab0:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d7ab4:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d7ab8:	4629      	mov	r1, r5
   d7aba:	f105 0008 	add.w	r0, r5, #8
   d7abe:	f7ff ff74 	bl	d79aa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7ac2:	b135      	cbz	r5, d7ad2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d7ac4:	9b00      	ldr	r3, [sp, #0]
   d7ac6:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d7aca:	a901      	add	r1, sp, #4
   d7acc:	1d28      	adds	r0, r5, #4
   d7ace:	f7ff fe5f 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d7ad2:	6863      	ldr	r3, [r4, #4]
   d7ad4:	3301      	adds	r3, #1
   d7ad6:	6063      	str	r3, [r4, #4]
   d7ad8:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7ada:	a801      	add	r0, sp, #4
   d7adc:	f7fc fe6a 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7ae0:	4628      	mov	r0, r5
   d7ae2:	b003      	add	sp, #12
   d7ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7ae8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7aec:	4604      	mov	r4, r0
   d7aee:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7af0:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d7af2:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7af4:	f7ff f902 	bl	d6cfc <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d7af8:	6823      	ldr	r3, [r4, #0]
   d7afa:	2b03      	cmp	r3, #3
   d7afc:	d002      	beq.n	d7b04 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d7afe:	2b04      	cmp	r3, #4
   d7b00:	d042      	beq.n	d7b88 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d7b02:	e087      	b.n	d7c14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d7b04:	a804      	add	r0, sp, #16
   d7b06:	f7ff fec3 	bl	d7890 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d7b0a:	9b04      	ldr	r3, [sp, #16]
   d7b0c:	8922      	ldrh	r2, [r4, #8]
   d7b0e:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7b10:	6862      	ldr	r2, [r4, #4]
   d7b12:	9904      	ldr	r1, [sp, #16]
   d7b14:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d7b18:	f8c1 3002 	str.w	r3, [r1, #2]
   d7b1c:	6853      	ldr	r3, [r2, #4]
   d7b1e:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7b22:	a807      	add	r0, sp, #28
   d7b24:	9b04      	ldr	r3, [sp, #16]
   d7b26:	9306      	str	r3, [sp, #24]
   d7b28:	a905      	add	r1, sp, #20
   d7b2a:	f7ff fe31 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7b2e:	a906      	add	r1, sp, #24
   d7b30:	f105 0018 	add.w	r0, r5, #24
   d7b34:	f7ff ff98 	bl	d7a68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d7b38:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7b3a:	a807      	add	r0, sp, #28
   d7b3c:	f7fc fe3a 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b40:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d7b42:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d7b44:	b974      	cbnz	r4, d7b64 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d7b46:	4b36      	ldr	r3, [pc, #216]	; (d7c20 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d7b48:	9300      	str	r3, [sp, #0]
   d7b4a:	aa06      	add	r2, sp, #24
   d7b4c:	4623      	mov	r3, r4
   d7b4e:	4935      	ldr	r1, [pc, #212]	; (d7c24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7b50:	9407      	str	r4, [sp, #28]
   d7b52:	2032      	movs	r0, #50	; 0x32
   d7b54:	f7fe fdec 	bl	d6730 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d7b58:	9b04      	ldr	r3, [sp, #16]
   d7b5a:	4621      	mov	r1, r4
   d7b5c:	8818      	ldrh	r0, [r3, #0]
   d7b5e:	f7fe fc57 	bl	d6410 <hal_ble_gap_disconnect>
   d7b62:	e00d      	b.n	d7b80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d7b64:	4a30      	ldr	r2, [pc, #192]	; (d7c28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d7b66:	9200      	str	r2, [sp, #0]
   d7b68:	2300      	movs	r3, #0
   d7b6a:	aa06      	add	r2, sp, #24
   d7b6c:	492d      	ldr	r1, [pc, #180]	; (d7c24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7b6e:	9307      	str	r3, [sp, #28]
   d7b70:	2001      	movs	r0, #1
   d7b72:	f7fe fddd 	bl	d6730 <log_message>
                if (impl->connectedCb_) {
   d7b76:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d7b78:	b113      	cbz	r3, d7b80 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d7b7a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d7b7c:	a804      	add	r0, sp, #16
   d7b7e:	4798      	blx	r3
   d7b80:	a805      	add	r0, sp, #20
   d7b82:	f7fc fe17 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7b86:	e045      	b.n	d7c14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d7b88:	8921      	ldrh	r1, [r4, #8]
   d7b8a:	4628      	mov	r0, r5
   d7b8c:	f7ff fbfe 	bl	d738c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d7b90:	4607      	mov	r7, r0
   d7b92:	2800      	cmp	r0, #0
   d7b94:	d03e      	beq.n	d7c14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d7b96:	6804      	ldr	r4, [r0, #0]
   d7b98:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d7b9a:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d7b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7ba0:	8022      	strh	r2, [r4, #0]
   d7ba2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d7ba6:	4299      	cmp	r1, r3
   d7ba8:	d003      	beq.n	d7bb2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d7baa:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7bae:	8042      	strh	r2, [r0, #2]
   d7bb0:	e7f9      	b.n	d7ba6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7bb2:	68e6      	ldr	r6, [r4, #12]
   d7bb4:	6923      	ldr	r3, [r4, #16]
   d7bb6:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7bba:	45b0      	cmp	r8, r6
   d7bbc:	d004      	beq.n	d7bc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d7bbe:	1d30      	adds	r0, r6, #4
   d7bc0:	f7fc fdf8 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7bc4:	3608      	adds	r6, #8
   d7bc6:	e7f8      	b.n	d7bba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7bc8:	2300      	movs	r3, #0
   d7bca:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d7bcc:	69a6      	ldr	r6, [r4, #24]
   d7bce:	69e3      	ldr	r3, [r4, #28]
   d7bd0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d7bd4:	45b0      	cmp	r8, r6
   d7bd6:	d004      	beq.n	d7be2 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d7bd8:	1d30      	adds	r0, r6, #4
   d7bda:	f7fc fdeb 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7bde:	3608      	adds	r6, #8
   d7be0:	e7f8      	b.n	d7bd4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d7be2:	2300      	movs	r3, #0
   d7be4:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d7be6:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d7be8:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d7bea:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d7bec:	b113      	cbz	r3, d7bf4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d7bee:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d7bf0:	4638      	mov	r0, r7
   d7bf2:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d7bf4:	2320      	movs	r3, #32
   d7bf6:	4a0d      	ldr	r2, [pc, #52]	; (d7c2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d7bf8:	9306      	str	r3, [sp, #24]
   d7bfa:	9200      	str	r2, [sp, #0]
   d7bfc:	2300      	movs	r3, #0
   d7bfe:	4909      	ldr	r1, [pc, #36]	; (d7c24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d7c00:	9307      	str	r3, [sp, #28]
   d7c02:	2001      	movs	r0, #1
   d7c04:	aa06      	add	r2, sp, #24
   d7c06:	f7fe fd93 	bl	d6730 <log_message>
                    impl->peers_.removeOne(*peer);
   d7c0a:	4639      	mov	r1, r7
   d7c0c:	f105 0018 	add.w	r0, r5, #24
   d7c10:	f7ff ff01 	bl	d7a16 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d7c14:	a803      	add	r0, sp, #12
   d7c16:	f7ff f87f 	bl	d6d18 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d7c1a:	b00e      	add	sp, #56	; 0x38
   d7c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7c20:	000dc212 	.word	0x000dc212
   d7c24:	000dc1b0 	.word	0x000dc1b0
   d7c28:	000dc238 	.word	0x000dc238
   d7c2c:	000dc255 	.word	0x000dc255

000d7c30 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7c30:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d7c32:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7c34:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d7c36:	dd06      	ble.n	d7c46 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d7c38:	2154      	movs	r1, #84	; 0x54
   d7c3a:	4369      	muls	r1, r5
   d7c3c:	6800      	ldr	r0, [r0, #0]
   d7c3e:	f7fe fe63 	bl	d6908 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7c42:	b920      	cbnz	r0, d7c4e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d7c44:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7c46:	6800      	ldr	r0, [r0, #0]
   d7c48:	f7fe fe56 	bl	d68f8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7c4c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d7c4e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7c50:	60a5      	str	r5, [r4, #8]
        return true;
   d7c52:	2001      	movs	r0, #1
    }
   d7c54:	bd38      	pop	{r3, r4, r5, pc}

000d7c56 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7c56:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7c58:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7c5a:	b0c0      	sub	sp, #256	; 0x100
   d7c5c:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7c5e:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d7c60:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d7c62:	a801      	add	r0, sp, #4
   d7c64:	2100      	movs	r1, #0
   d7c66:	f003 f9a6 	bl	dafb6 <memset>
   d7c6a:	a803      	add	r0, sp, #12
   d7c6c:	f7ff faef 	bl	d724e <_ZN8particle18BleAdvertisingDataC1Ev>
   d7c70:	a80c      	add	r0, sp, #48	; 0x30
   d7c72:	f7ff faec 	bl	d724e <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7c76:	462a      	mov	r2, r5
   d7c78:	ab01      	add	r3, sp, #4
   d7c7a:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d7c7e:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7c80:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d7c82:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7c84:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7c86:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d7c88:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d7c8c:	a80c      	add	r0, sp, #48	; 0x30
   d7c8e:	f7ff fa6f 	bl	d7170 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d7c92:	89aa      	ldrh	r2, [r5, #12]
   d7c94:	6869      	ldr	r1, [r5, #4]
   d7c96:	a803      	add	r0, sp, #12
   d7c98:	f7ff fa6a 	bl	d7170 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d7c9c:	69a5      	ldr	r5, [r4, #24]
   d7c9e:	b11d      	cbz	r5, d7ca8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d7ca0:	69e1      	ldr	r1, [r4, #28]
   d7ca2:	a801      	add	r0, sp, #4
   d7ca4:	47a8      	blx	r5
   d7ca6:	e03c      	b.n	d7d22 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d7ca8:	68e0      	ldr	r0, [r4, #12]
   d7caa:	b198      	cbz	r0, d7cd4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d7cac:	6963      	ldr	r3, [r4, #20]
   d7cae:	6922      	ldr	r2, [r4, #16]
   d7cb0:	4293      	cmp	r3, r2
   d7cb2:	d239      	bcs.n	d7d28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d7cb4:	1c5a      	adds	r2, r3, #1
   d7cb6:	6162      	str	r2, [r4, #20]
   d7cb8:	fb06 0003 	mla	r0, r6, r3, r0
   d7cbc:	2251      	movs	r2, #81	; 0x51
   d7cbe:	a901      	add	r1, sp, #4
   d7cc0:	f003 f953 	bl	daf6a <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d7cc4:	6962      	ldr	r2, [r4, #20]
   d7cc6:	6923      	ldr	r3, [r4, #16]
   d7cc8:	429a      	cmp	r2, r3
   d7cca:	d32d      	bcc.n	d7d28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d7ccc:	4628      	mov	r0, r5
   d7cce:	f7fe fb95 	bl	d63fc <hal_ble_gap_stop_scan>
   d7cd2:	e029      	b.n	d7d28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d7cd4:	4632      	mov	r2, r6
   d7cd6:	a901      	add	r1, sp, #4
   d7cd8:	a816      	add	r0, sp, #88	; 0x58
   d7cda:	f003 f946 	bl	daf6a <memcpy>
   d7cde:	4632      	mov	r2, r6
   d7ce0:	a916      	add	r1, sp, #88	; 0x58
   d7ce2:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7ce4:	6865      	ldr	r5, [r4, #4]
   d7ce6:	f003 f940 	bl	daf6a <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7cea:	68a3      	ldr	r3, [r4, #8]
   d7cec:	429d      	cmp	r5, r3
   d7cee:	db04      	blt.n	d7cfa <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d7cf0:	1c69      	adds	r1, r5, #1
   d7cf2:	4620      	mov	r0, r4
   d7cf4:	f7ff ff9c 	bl	d7c30 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7cf8:	b1b0      	cbz	r0, d7d28 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7cfa:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7cfc:	6822      	ldr	r2, [r4, #0]
   d7cfe:	2654      	movs	r6, #84	; 0x54
   d7d00:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7d04:	fb06 2203 	mla	r2, r6, r3, r2
   d7d08:	1b52      	subs	r2, r2, r5
   d7d0a:	4629      	mov	r1, r5
   d7d0c:	19a8      	adds	r0, r5, r6
   d7d0e:	f003 f937 	bl	daf80 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7d12:	4632      	mov	r2, r6
   d7d14:	a92b      	add	r1, sp, #172	; 0xac
   d7d16:	4628      	mov	r0, r5
   d7d18:	f003 f927 	bl	daf6a <memcpy>
    ++size_;
   d7d1c:	6863      	ldr	r3, [r4, #4]
   d7d1e:	3301      	adds	r3, #1
   d7d20:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d7d22:	6963      	ldr	r3, [r4, #20]
   d7d24:	3301      	adds	r3, #1
   d7d26:	6163      	str	r3, [r4, #20]
        }
    }
   d7d28:	b040      	add	sp, #256	; 0x100
   d7d2a:	bd70      	pop	{r4, r5, r6, pc}

000d7d2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7d2c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7d2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d30:	4606      	mov	r6, r0
   d7d32:	460c      	mov	r4, r1
   d7d34:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7d36:	d914      	bls.n	d7d62 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7d38:	4290      	cmp	r0, r2
   d7d3a:	d213      	bcs.n	d7d64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7d3c:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7d40:	1a6c      	subs	r4, r5, r1
   d7d42:	f1a1 0708 	sub.w	r7, r1, #8
   d7d46:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7d48:	42af      	cmp	r7, r5
   d7d4a:	d018      	beq.n	d7d7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7d4c:	b11c      	cbz	r4, d7d56 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d7d4e:	4629      	mov	r1, r5
   d7d50:	4620      	mov	r0, r4
   d7d52:	f7ff fd32 	bl	d77ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7d56:	1d28      	adds	r0, r5, #4
   d7d58:	f7fc fd2c 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7d5c:	3d08      	subs	r5, #8
   d7d5e:	3c08      	subs	r4, #8
   d7d60:	e7f2      	b.n	d7d48 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7d62:	d00c      	beq.n	d7d7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7d64:	42ac      	cmp	r4, r5
   d7d66:	d00a      	beq.n	d7d7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7d68:	b11e      	cbz	r6, d7d72 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7d6a:	4621      	mov	r1, r4
   d7d6c:	4630      	mov	r0, r6
   d7d6e:	f7ff fd24 	bl	d77ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d7d72:	1d20      	adds	r0, r4, #4
   d7d74:	f7fc fd1e 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7d78:	3408      	adds	r4, #8
   d7d7a:	3608      	adds	r6, #8
   d7d7c:	e7f2      	b.n	d7d64 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7d80:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7d82:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7d84:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7d86:	dd0b      	ble.n	d7da0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7d88:	00f0      	lsls	r0, r6, #3
   d7d8a:	f7fe fdad 	bl	d68e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7d8e:	4604      	mov	r4, r0
   d7d90:	b170      	cbz	r0, d7db0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7d92:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7d96:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7d9a:	f7ff ffc7 	bl	d7d2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7d9e:	e000      	b.n	d7da2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7da0:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7da2:	6828      	ldr	r0, [r5, #0]
   d7da4:	f7fe fda8 	bl	d68f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7da8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7daa:	60ae      	str	r6, [r5, #8]
        return true;
   d7dac:	2001      	movs	r0, #1
   d7dae:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7db0:	bd70      	pop	{r4, r5, r6, pc}

000d7db2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7db6:	2300      	movs	r3, #0
   d7db8:	6003      	str	r3, [r0, #0]
   d7dba:	6043      	str	r3, [r0, #4]
   d7dbc:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7dbe:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7dc0:	6849      	ldr	r1, [r1, #4]
   d7dc2:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7dc4:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7dc6:	dd13      	ble.n	d7df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7dc8:	f7ff ffda 	bl	d7d80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7dcc:	b180      	cbz	r0, d7df0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7dce:	6835      	ldr	r5, [r6, #0]
   d7dd0:	6873      	ldr	r3, [r6, #4]
   d7dd2:	6827      	ldr	r7, [r4, #0]
   d7dd4:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7dd8:	4545      	cmp	r5, r8
   d7dda:	d007      	beq.n	d7dec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7ddc:	b11f      	cbz	r7, d7de6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7dde:	4629      	mov	r1, r5
   d7de0:	4638      	mov	r0, r7
   d7de2:	f7ff fcea 	bl	d77ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7de6:	3508      	adds	r5, #8
   d7de8:	3708      	adds	r7, #8
   d7dea:	e7f5      	b.n	d7dd8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7dec:	6873      	ldr	r3, [r6, #4]
   d7dee:	6063      	str	r3, [r4, #4]
    }
}
   d7df0:	4620      	mov	r0, r4
   d7df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7df6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7df6:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d7df8:	680b      	ldr	r3, [r1, #0]
   d7dfa:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d7dfc:	4605      	mov	r5, r0
   d7dfe:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d7e00:	b933      	cbnz	r3, d7e10 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d7e02:	4608      	mov	r0, r1
   d7e04:	f7fe ff0c 	bl	d6c20 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d7e08:	b910      	cbnz	r0, d7e10 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d7e0a:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d7e0c:	2201      	movs	r2, #1
   d7e0e:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d7e10:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d7e12:	4628      	mov	r0, r5
   d7e14:	310c      	adds	r1, #12
   d7e16:	f7ff ffcc 	bl	d7db2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d7e1a:	4628      	mov	r0, r5
   d7e1c:	bd38      	pop	{r3, r4, r5, pc}

000d7e1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7e1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7e20:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7e22:	6845      	ldr	r5, [r0, #4]
   d7e24:	4668      	mov	r0, sp
   d7e26:	f7ff fcc8 	bl	d77ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e2a:	6861      	ldr	r1, [r4, #4]
   d7e2c:	68a3      	ldr	r3, [r4, #8]
   d7e2e:	4299      	cmp	r1, r3
   d7e30:	db05      	blt.n	d7e3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d7e32:	3101      	adds	r1, #1
   d7e34:	4620      	mov	r0, r4
   d7e36:	f7ff ffa3 	bl	d7d80 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7e3a:	4606      	mov	r6, r0
   d7e3c:	b198      	cbz	r0, d7e66 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d7e3e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7e40:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7e42:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7e46:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7e4a:	4629      	mov	r1, r5
   d7e4c:	f105 0008 	add.w	r0, r5, #8
   d7e50:	f7ff ff6c 	bl	d7d2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d7e54:	b11d      	cbz	r5, d7e5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d7e56:	4669      	mov	r1, sp
   d7e58:	4628      	mov	r0, r5
   d7e5a:	f7ff fcae 	bl	d77ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d7e5e:	6863      	ldr	r3, [r4, #4]
   d7e60:	3301      	adds	r3, #1
   d7e62:	6063      	str	r3, [r4, #4]
   d7e64:	2601      	movs	r6, #1
   d7e66:	a801      	add	r0, sp, #4
   d7e68:	f7fc fca4 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d7e6c:	4630      	mov	r0, r6
   d7e6e:	b002      	add	sp, #8
   d7e70:	bd70      	pop	{r4, r5, r6, pc}

000d7e72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d7e72:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d7e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e76:	4606      	mov	r6, r0
   d7e78:	460c      	mov	r4, r1
   d7e7a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7e7c:	d914      	bls.n	d7ea8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d7e7e:	4290      	cmp	r0, r2
   d7e80:	d213      	bcs.n	d7eaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d7e82:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d7e86:	1a6c      	subs	r4, r5, r1
   d7e88:	f1a1 0708 	sub.w	r7, r1, #8
   d7e8c:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d7e8e:	42af      	cmp	r7, r5
   d7e90:	d018      	beq.n	d7ec4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d7e92:	b11c      	cbz	r4, d7e9c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d7e94:	4629      	mov	r1, r5
   d7e96:	4620      	mov	r0, r4
   d7e98:	f7ff fc81 	bl	d779e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7e9c:	1d28      	adds	r0, r5, #4
   d7e9e:	f7fc fc89 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d7ea2:	3d08      	subs	r5, #8
   d7ea4:	3c08      	subs	r4, #8
   d7ea6:	e7f2      	b.n	d7e8e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d7ea8:	d00c      	beq.n	d7ec4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d7eaa:	42ac      	cmp	r4, r5
   d7eac:	d00a      	beq.n	d7ec4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d7eae:	b11e      	cbz	r6, d7eb8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d7eb0:	4621      	mov	r1, r4
   d7eb2:	4630      	mov	r0, r6
   d7eb4:	f7ff fc73 	bl	d779e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d7eb8:	1d20      	adds	r0, r4, #4
   d7eba:	f7fc fc7b 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d7ebe:	3408      	adds	r4, #8
   d7ec0:	3608      	adds	r6, #8
   d7ec2:	e7f2      	b.n	d7eaa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d7ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ec6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7ec6:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d7ec8:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7eca:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7ecc:	dd0b      	ble.n	d7ee6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7ece:	00f0      	lsls	r0, r6, #3
   d7ed0:	f7fe fd0a 	bl	d68e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d7ed4:	4604      	mov	r4, r0
   d7ed6:	b170      	cbz	r0, d7ef6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d7ed8:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7edc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d7ee0:	f7ff ffc7 	bl	d7e72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d7ee4:	e000      	b.n	d7ee8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d7ee6:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7ee8:	6828      	ldr	r0, [r5, #0]
   d7eea:	f7fe fd05 	bl	d68f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7eee:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7ef0:	60ae      	str	r6, [r5, #8]
        return true;
   d7ef2:	2001      	movs	r0, #1
   d7ef4:	bd70      	pop	{r4, r5, r6, pc}
    }
   d7ef6:	bd70      	pop	{r4, r5, r6, pc}

000d7ef8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7efc:	2300      	movs	r3, #0
   d7efe:	6003      	str	r3, [r0, #0]
   d7f00:	6043      	str	r3, [r0, #4]
   d7f02:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7f04:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7f06:	6849      	ldr	r1, [r1, #4]
   d7f08:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d7f0a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d7f0c:	dd13      	ble.n	d7f36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d7f0e:	f7ff ffda 	bl	d7ec6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7f12:	b180      	cbz	r0, d7f36 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d7f14:	6835      	ldr	r5, [r6, #0]
   d7f16:	6873      	ldr	r3, [r6, #4]
   d7f18:	6827      	ldr	r7, [r4, #0]
   d7f1a:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7f1e:	4545      	cmp	r5, r8
   d7f20:	d007      	beq.n	d7f32 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d7f22:	b11f      	cbz	r7, d7f2c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d7f24:	4629      	mov	r1, r5
   d7f26:	4638      	mov	r0, r7
   d7f28:	f7ff fc39 	bl	d779e <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d7f2c:	3508      	adds	r5, #8
   d7f2e:	3708      	adds	r7, #8
   d7f30:	e7f5      	b.n	d7f1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d7f32:	6873      	ldr	r3, [r6, #4]
   d7f34:	6063      	str	r3, [r4, #4]
    }
}
   d7f36:	4620      	mov	r0, r4
   d7f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7f3c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d7f3c:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d7f3e:	680b      	ldr	r3, [r1, #0]
   d7f40:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d7f42:	b085      	sub	sp, #20
   d7f44:	4605      	mov	r5, r0
   d7f46:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d7f48:	b92b      	cbnz	r3, d7f56 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d7f4a:	a801      	add	r0, sp, #4
   d7f4c:	f7ff ff53 	bl	d7df6 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d7f50:	a801      	add	r0, sp, #4
   d7f52:	f7ff fc4a 	bl	d77ea <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d7f56:	6823      	ldr	r3, [r4, #0]
   d7f58:	7adb      	ldrb	r3, [r3, #11]
   d7f5a:	b93b      	cbnz	r3, d7f6c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d7f5c:	4621      	mov	r1, r4
   d7f5e:	a801      	add	r0, sp, #4
   d7f60:	f7ff facc 	bl	d74fc <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d7f64:	b910      	cbnz	r0, d7f6c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d7f66:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d7f68:	2201      	movs	r2, #1
   d7f6a:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d7f6c:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d7f6e:	4628      	mov	r0, r5
   d7f70:	3118      	adds	r1, #24
   d7f72:	f7ff ffc1 	bl	d7ef8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d7f76:	4628      	mov	r0, r5
   d7f78:	b005      	add	sp, #20
   d7f7a:	bd30      	pop	{r4, r5, pc}

000d7f7c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d7f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7f80:	460d      	mov	r5, r1
   d7f82:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d7f84:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d7f88:	4617      	mov	r7, r2
   d7f8a:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d7f8c:	4642      	mov	r2, r8
   d7f8e:	2100      	movs	r1, #0
   d7f90:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d7f92:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d7f94:	f003 f80f 	bl	dafb6 <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d7f98:	6869      	ldr	r1, [r5, #4]
   d7f9a:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d7f9c:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d7f9e:	ab02      	add	r3, sp, #8
   d7fa0:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d7fa2:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d7fa6:	ab05      	add	r3, sp, #20
   d7fa8:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d7fac:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d7fb0:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d7fb4:	f7ff fb6c 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d7fb8:	4b34      	ldr	r3, [pc, #208]	; (d808c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d7fba:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d7fbc:	f7ff fb68 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d7fc0:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7fc2:	6803      	ldr	r3, [r0, #0]
   d7fc4:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d7fc6:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d7fc8:	a804      	add	r0, sp, #16
   d7fca:	f7fe fa67 	bl	d649c <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d7fce:	4607      	mov	r7, r0
   d7fd0:	b120      	cbz	r0, d7fdc <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d7fd2:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d7fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d7fd8:	801a      	strh	r2, [r3, #0]
        return ret;
   d7fda:	e053      	b.n	d8084 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d7fdc:	4629      	mov	r1, r5
   d7fde:	4630      	mov	r0, r6
   d7fe0:	f7ff fafe 	bl	d75e0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d7fe4:	f7ff fb54 	bl	d7690 <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7fe8:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d7fea:	6803      	ldr	r3, [r0, #0]
   d7fec:	ad12      	add	r5, sp, #72	; 0x48
   d7fee:	f103 0818 	add.w	r8, r3, #24
   d7ff2:	f851 3b04 	ldr.w	r3, [r1], #4
   d7ff6:	f845 3d20 	str.w	r3, [r5, #-32]!
   d7ffa:	a80b      	add	r0, sp, #44	; 0x2c
   d7ffc:	f7ff fbc8 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d8000:	4629      	mov	r1, r5
   d8002:	4640      	mov	r0, r8
   d8004:	f7ff fd30 	bl	d7a68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d8008:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d800a:	a80b      	add	r0, sp, #44	; 0x2c
   d800c:	f7fc fbd2 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d8010:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d8012:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d8014:	f1b8 0f00 	cmp.w	r8, #0
   d8018:	d114      	bne.n	d8044 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d801a:	4b1d      	ldr	r3, [pc, #116]	; (d8090 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d801c:	9300      	str	r3, [sp, #0]
   d801e:	462a      	mov	r2, r5
   d8020:	4643      	mov	r3, r8
   d8022:	491c      	ldr	r1, [pc, #112]	; (d8094 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d8024:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d8028:	2032      	movs	r0, #50	; 0x32
   d802a:	f7fe fb81 	bl	d6730 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d802e:	6833      	ldr	r3, [r6, #0]
   d8030:	4641      	mov	r1, r8
   d8032:	8818      	ldrh	r0, [r3, #0]
   d8034:	f7fe f9ec 	bl	d6410 <hal_ble_gap_disconnect>
   d8038:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d803a:	4817      	ldr	r0, [pc, #92]	; (d8098 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d803c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d8040:	801a      	strh	r2, [r3, #0]
   d8042:	e01f      	b.n	d8084 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d8044:	4b15      	ldr	r3, [pc, #84]	; (d809c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d8046:	9300      	str	r3, [sp, #0]
   d8048:	462a      	mov	r2, r5
   d804a:	463b      	mov	r3, r7
   d804c:	4911      	ldr	r1, [pc, #68]	; (d8094 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d804e:	970b      	str	r7, [sp, #44]	; 0x2c
   d8050:	4648      	mov	r0, r9
   d8052:	f7fe fb6d 	bl	d6730 <log_message>
    if (automatic) {
   d8056:	b1a4      	cbz	r4, d8082 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d8058:	4631      	mov	r1, r6
   d805a:	4628      	mov	r0, r5
   d805c:	f7ff ff6e 	bl	d7f3c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d8060:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8062:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d8064:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d8068:	42a6      	cmp	r6, r4
   d806a:	d005      	beq.n	d8078 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d806c:	4620      	mov	r0, r4
   d806e:	2101      	movs	r1, #1
   d8070:	f7ff fa00 	bl	d7474 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d8074:	3408      	adds	r4, #8
   d8076:	e7f7      	b.n	d8068 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d8078:	4628      	mov	r0, r5
   d807a:	f7ff fbc8 	bl	d780e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d807e:	2000      	movs	r0, #0
   d8080:	e000      	b.n	d8084 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d8082:	4620      	mov	r0, r4
}
   d8084:	b013      	add	sp, #76	; 0x4c
   d8086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d808a:	bf00      	nop
   d808c:	000d7ae9 	.word	0x000d7ae9
   d8090:	000dc274 	.word	0x000dc274
   d8094:	000dc1b0 	.word	0x000dc1b0
   d8098:	fffffefc 	.word	0xfffffefc
   d809c:	000dc290 	.word	0x000dc290

000d80a0 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d80a0:	b570      	push	{r4, r5, r6, lr}
   d80a2:	4604      	mov	r4, r0
   d80a4:	4615      	mov	r5, r2
   d80a6:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d80a8:	f7ff fbf2 	bl	d7890 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d80ac:	4633      	mov	r3, r6
   d80ae:	2200      	movs	r2, #0
   d80b0:	4629      	mov	r1, r5
   d80b2:	4620      	mov	r0, r4
   d80b4:	f7ff ff62 	bl	d7f7c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d80b8:	4620      	mov	r0, r4
   d80ba:	bd70      	pop	{r4, r5, r6, pc}

000d80bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d80bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d80be:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d80c0:	6845      	ldr	r5, [r0, #4]
   d80c2:	4668      	mov	r0, sp
   d80c4:	f7ff fb6b 	bl	d779e <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d80c8:	6861      	ldr	r1, [r4, #4]
   d80ca:	68a3      	ldr	r3, [r4, #8]
   d80cc:	4299      	cmp	r1, r3
   d80ce:	db05      	blt.n	d80dc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d80d0:	3101      	adds	r1, #1
   d80d2:	4620      	mov	r0, r4
   d80d4:	f7ff fef7 	bl	d7ec6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d80d8:	4606      	mov	r6, r0
   d80da:	b198      	cbz	r0, d8104 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d80dc:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d80de:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d80e0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d80e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d80e8:	4629      	mov	r1, r5
   d80ea:	f105 0008 	add.w	r0, r5, #8
   d80ee:	f7ff fec0 	bl	d7e72 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d80f2:	b11d      	cbz	r5, d80fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d80f4:	4669      	mov	r1, sp
   d80f6:	4628      	mov	r0, r5
   d80f8:	f7ff fb51 	bl	d779e <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d80fc:	6863      	ldr	r3, [r4, #4]
   d80fe:	3301      	adds	r3, #1
   d8100:	6063      	str	r3, [r4, #4]
   d8102:	2601      	movs	r6, #1
   d8104:	a801      	add	r0, sp, #4
   d8106:	f7fc fb55 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d810a:	4630      	mov	r0, r6
   d810c:	b002      	add	sp, #8
   d810e:	bd70      	pop	{r4, r5, r6, pc}

000d8110 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d8110:	b510      	push	{r4, lr}
   d8112:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d8114:	6840      	ldr	r0, [r0, #4]
   d8116:	b108      	cbz	r0, d811c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d8118:	f7fb ffc1 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d811c:	4620      	mov	r0, r4
   d811e:	bd10      	pop	{r4, pc}

000d8120 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d8120:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8122:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d8124:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d8126:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d812a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d812e:	f7fe fc83 	bl	d6a38 <_ZN6StringD1Ev>
   d8132:	4668      	mov	r0, sp
   d8134:	f7ff ffec 	bl	d8110 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d8138:	b003      	add	sp, #12
   d813a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d8140:	b538      	push	{r3, r4, r5, lr}
   d8142:	2300      	movs	r3, #0
   d8144:	4604      	mov	r4, r0
   d8146:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d8148:	2014      	movs	r0, #20
   d814a:	460d      	mov	r5, r1
   d814c:	f7fb ffa3 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8150:	b128      	cbz	r0, d815e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8152:	2301      	movs	r3, #1
   d8154:	6043      	str	r3, [r0, #4]
   d8156:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d8158:	4b02      	ldr	r3, [pc, #8]	; (d8164 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d815a:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d815c:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d815e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8160:	4620      	mov	r0, r4
   d8162:	bd38      	pop	{r3, r4, r5, pc}
   d8164:	000dc164 	.word	0x000dc164

000d8168 <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d8168:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d816a:	2500      	movs	r5, #0
   d816c:	b086      	sub	sp, #24
   d816e:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8170:	6045      	str	r5, [r0, #4]
   d8172:	4604      	mov	r4, r0
   d8174:	2054      	movs	r0, #84	; 0x54
   d8176:	f7fb ff8e 	bl	d4096 <_Znwj>
   d817a:	f8cd d010 	str.w	sp, [sp, #16]
   d817e:	4606      	mov	r6, r0
   d8180:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8182:	b108      	cbz	r0, d8188 <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d8184:	f7ff f8e2 	bl	d734c <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8188:	4631      	mov	r1, r6
   d818a:	ab01      	add	r3, sp, #4
   d818c:	aa02      	add	r2, sp, #8
   d818e:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8190:	9505      	str	r5, [sp, #20]
   d8192:	f7ff ffd5 	bl	d8140 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d8196:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8198:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d819a:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d819c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d819e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d81a0:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d81a2:	f7fc fb07 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d81a6:	a804      	add	r0, sp, #16
   d81a8:	f7ff ffb2 	bl	d8110 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d81ac:	6823      	ldr	r3, [r4, #0]
   d81ae:	b90b      	cbnz	r3, d81b4 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d81b0:	f7fe fd54 	bl	d6c5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d81b4:	4620      	mov	r0, r4
   d81b6:	b006      	add	sp, #24
   d81b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d81bc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d81bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d81c0:	f8df 8104 	ldr.w	r8, [pc, #260]	; d82c8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d81c4:	b08c      	sub	sp, #48	; 0x30
   d81c6:	4605      	mov	r5, r0
   d81c8:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d81ca:	2600      	movs	r6, #0
   d81cc:	682b      	ldr	r3, [r5, #0]
   d81ce:	429e      	cmp	r6, r3
   d81d0:	d275      	bcs.n	d82be <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d81d2:	a802      	add	r0, sp, #8
   d81d4:	f7ff ffc8 	bl	d8168 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d81d8:	9b02      	ldr	r3, [sp, #8]
   d81da:	892a      	ldrh	r2, [r5, #8]
   d81dc:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d81de:	686b      	ldr	r3, [r5, #4]
   d81e0:	9802      	ldr	r0, [sp, #8]
   d81e2:	242a      	movs	r4, #42	; 0x2a
   d81e4:	4374      	muls	r4, r6
   d81e6:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d81e8:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d81ea:	7e5b      	ldrb	r3, [r3, #25]
   d81ec:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d81f0:	bf1e      	ittt	ne
   d81f2:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d81f6:	f043 0302 	orrne.w	r3, r3, #2
   d81fa:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d81fe:	686b      	ldr	r3, [r5, #4]
   d8200:	4423      	add	r3, r4
   d8202:	7e5b      	ldrb	r3, [r3, #25]
   d8204:	075b      	lsls	r3, r3, #29
   d8206:	bf42      	ittt	mi
   d8208:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d820c:	f043 0304 	orrmi.w	r3, r3, #4
   d8210:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d8214:	686b      	ldr	r3, [r5, #4]
   d8216:	4423      	add	r3, r4
   d8218:	7e5b      	ldrb	r3, [r3, #25]
   d821a:	0719      	lsls	r1, r3, #28
   d821c:	bf42      	ittt	mi
   d821e:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8222:	f043 0308 	orrmi.w	r3, r3, #8
   d8226:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d822a:	686b      	ldr	r3, [r5, #4]
   d822c:	4423      	add	r3, r4
   d822e:	7e5b      	ldrb	r3, [r3, #25]
   d8230:	06da      	lsls	r2, r3, #27
   d8232:	bf42      	ittt	mi
   d8234:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d8238:	f043 0310 	orrmi.w	r3, r3, #16
   d823c:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d8240:	686b      	ldr	r3, [r5, #4]
   d8242:	4423      	add	r3, r4
   d8244:	7e5b      	ldrb	r3, [r3, #25]
   d8246:	069b      	lsls	r3, r3, #26
   d8248:	bf42      	ittt	mi
   d824a:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d824e:	f043 0320 	orrmi.w	r3, r3, #32
   d8252:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d8256:	6869      	ldr	r1, [r5, #4]
   d8258:	4421      	add	r1, r4
   d825a:	3104      	adds	r1, #4
   d825c:	f7fe fe7c 	bl	d6f58 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d8260:	686a      	ldr	r2, [r5, #4]
   d8262:	9b02      	ldr	r3, [sp, #8]
   d8264:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d8266:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d8268:	8be2      	ldrh	r2, [r4, #30]
   d826a:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d826c:	8c22      	ldrh	r2, [r4, #32]
   d826e:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d8270:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d8272:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d8274:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d8276:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d8278:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d827a:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d827c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d827e:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d8280:	6838      	ldr	r0, [r7, #0]
   d8282:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d8286:	a804      	add	r0, sp, #16
   d8288:	f7ff fa89 	bl	d779e <_ZN8particle17BleCharacteristicC1ERKS0_>
   d828c:	4620      	mov	r0, r4
   d828e:	a904      	add	r1, sp, #16
   d8290:	f7ff ff14 	bl	d80bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d8294:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8296:	a805      	add	r0, sp, #20
   d8298:	f7fc fa8c 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d829c:	b954      	cbnz	r4, d82b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d829e:	2320      	movs	r3, #32
   d82a0:	9304      	str	r3, [sp, #16]
   d82a2:	f8cd 8000 	str.w	r8, [sp]
   d82a6:	4623      	mov	r3, r4
   d82a8:	aa04      	add	r2, sp, #16
   d82aa:	4906      	ldr	r1, [pc, #24]	; (d82c4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d82ac:	9405      	str	r4, [sp, #20]
   d82ae:	2032      	movs	r0, #50	; 0x32
   d82b0:	f7fe fa3e 	bl	d6730 <log_message>
   d82b4:	a803      	add	r0, sp, #12
   d82b6:	f7fc fa7d 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d82ba:	3601      	adds	r6, #1
   d82bc:	e786      	b.n	d81cc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d82be:	b00c      	add	sp, #48	; 0x30
   d82c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d82c4:	000dc1b0 	.word	0x000dc1b0
   d82c8:	000dc2ad 	.word	0x000dc2ad

000d82cc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d82cc:	b510      	push	{r4, lr}
   d82ce:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d82d0:	6840      	ldr	r0, [r0, #4]
   d82d2:	b108      	cbz	r0, d82d8 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d82d4:	f7fb fee3 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d82d8:	4620      	mov	r0, r4
   d82da:	bd10      	pop	{r4, pc}

000d82dc <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d82dc:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d82de:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d82e0:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d82e2:	e88d 0009 	stmia.w	sp, {r0, r3}
   d82e6:	4668      	mov	r0, sp
   d82e8:	f7ff fff0 	bl	d82cc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d82ec:	b003      	add	sp, #12
   d82ee:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d82f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d82f4:	b538      	push	{r3, r4, r5, lr}
   d82f6:	2300      	movs	r3, #0
   d82f8:	4604      	mov	r4, r0
   d82fa:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d82fc:	2014      	movs	r0, #20
   d82fe:	460d      	mov	r5, r1
   d8300:	f7fb fec9 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d8304:	b128      	cbz	r0, d8312 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d8306:	2301      	movs	r3, #1
   d8308:	6043      	str	r3, [r0, #4]
   d830a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d830c:	4b02      	ldr	r3, [pc, #8]	; (d8318 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d830e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d8310:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d8312:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d8314:	4620      	mov	r0, r4
   d8316:	bd38      	pop	{r3, r4, r5, pc}
   d8318:	000dc180 	.word	0x000dc180

000d831c <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d831c:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d831e:	2500      	movs	r5, #0
   d8320:	b086      	sub	sp, #24
   d8322:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8324:	6045      	str	r5, [r0, #4]
   d8326:	4604      	mov	r4, r0
   d8328:	2018      	movs	r0, #24
   d832a:	f7fb feb4 	bl	d4096 <_Znwj>
   d832e:	f8cd d010 	str.w	sp, [sp, #16]
   d8332:	4606      	mov	r6, r0
   d8334:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d8336:	b118      	cbz	r0, d8340 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d8338:	f7fe fd7a 	bl	d6e30 <_ZN8particle7BleUuidC1Ev>
   d833c:	82b5      	strh	r5, [r6, #20]
   d833e:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8340:	4631      	mov	r1, r6
   d8342:	ab01      	add	r3, sp, #4
   d8344:	aa02      	add	r2, sp, #8
   d8346:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d8348:	9505      	str	r5, [sp, #20]
   d834a:	f7ff ffd3 	bl	d82f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d834e:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d8350:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d8352:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d8354:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d8356:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d8358:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d835a:	f7fc fa2b 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d835e:	a804      	add	r0, sp, #16
   d8360:	f7ff ffb4 	bl	d82cc <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d8364:	6823      	ldr	r3, [r4, #0]
   d8366:	b90b      	cbnz	r3, d836c <_ZN8particle10BleServiceC1Ev+0x50>
   d8368:	f7fe fc78 	bl	d6c5c <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d836c:	4620      	mov	r0, r4
   d836e:	b006      	add	sp, #24
   d8370:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8374 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d8374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d8378:	f8df 8080 	ldr.w	r8, [pc, #128]	; d83fc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d837c:	b08c      	sub	sp, #48	; 0x30
   d837e:	4606      	mov	r6, r0
   d8380:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d8382:	2500      	movs	r5, #0
   d8384:	6833      	ldr	r3, [r6, #0]
   d8386:	429d      	cmp	r5, r3
   d8388:	d233      	bcs.n	d83f2 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d838a:	a802      	add	r0, sp, #8
   d838c:	f7ff ffc6 	bl	d831c <_ZN8particle10BleServiceC1Ev>
   d8390:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d8392:	6871      	ldr	r1, [r6, #4]
   d8394:	9802      	ldr	r0, [sp, #8]
   d8396:	436c      	muls	r4, r5
   d8398:	4421      	add	r1, r4
   d839a:	3104      	adds	r1, #4
   d839c:	f7fe fddc 	bl	d6f58 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d83a0:	6873      	ldr	r3, [r6, #4]
   d83a2:	9a02      	ldr	r2, [sp, #8]
   d83a4:	4423      	add	r3, r4
   d83a6:	a902      	add	r1, sp, #8
   d83a8:	8b1b      	ldrh	r3, [r3, #24]
   d83aa:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d83ac:	6873      	ldr	r3, [r6, #4]
   d83ae:	441c      	add	r4, r3
   d83b0:	8b63      	ldrh	r3, [r4, #26]
   d83b2:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d83b4:	6838      	ldr	r0, [r7, #0]
   d83b6:	f100 040c 	add.w	r4, r0, #12
   d83ba:	a804      	add	r0, sp, #16
   d83bc:	f7ff f9fd 	bl	d77ba <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d83c0:	4620      	mov	r0, r4
   d83c2:	a904      	add	r1, sp, #16
   d83c4:	f7ff fd2b 	bl	d7e1e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d83c8:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d83ca:	a805      	add	r0, sp, #20
   d83cc:	f7fc f9f2 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d83d0:	b954      	cbnz	r4, d83e8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d83d2:	2320      	movs	r3, #32
   d83d4:	9304      	str	r3, [sp, #16]
   d83d6:	f8cd 8000 	str.w	r8, [sp]
   d83da:	4623      	mov	r3, r4
   d83dc:	aa04      	add	r2, sp, #16
   d83de:	4906      	ldr	r1, [pc, #24]	; (d83f8 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d83e0:	9405      	str	r4, [sp, #20]
   d83e2:	2032      	movs	r0, #50	; 0x32
   d83e4:	f7fe f9a4 	bl	d6730 <log_message>
   d83e8:	a803      	add	r0, sp, #12
   d83ea:	f7fc f9e3 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d83ee:	3501      	adds	r5, #1
   d83f0:	e7c8      	b.n	d8384 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d83f2:	b00c      	add	sp, #48	; 0x30
   d83f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d83f8:	000dc1b0 	.word	0x000dc1b0
   d83fc:	000dc2d9 	.word	0x000dc2d9

000d8400 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8400:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8402:	4c06      	ldr	r4, [pc, #24]	; (d841c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d8404:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d8406:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d8408:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d840a:	f7fe f891 	bl	d6530 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d840e:	4620      	mov	r0, r4
   d8410:	4a03      	ldr	r2, [pc, #12]	; (d8420 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d8412:	4904      	ldr	r1, [pc, #16]	; (d8424 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d8414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d8418:	f002 bc1d 	b.w	dac56 <__aeabi_atexit>
   d841c:	2003e3d4 	.word	0x2003e3d4
   d8420:	2003d8c4 	.word	0x2003d8c4
   d8424:	000d6c11 	.word	0x000d6c11

000d8428 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d842a:	4606      	mov	r6, r0
   d842c:	460d      	mov	r5, r1
   d842e:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d8430:	2400      	movs	r4, #0
  while (size--) {
   d8432:	42bd      	cmp	r5, r7
   d8434:	d00c      	beq.n	d8450 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d8436:	6833      	ldr	r3, [r6, #0]
   d8438:	f815 1b01 	ldrb.w	r1, [r5], #1
   d843c:	689b      	ldr	r3, [r3, #8]
   d843e:	4630      	mov	r0, r6
   d8440:	4798      	blx	r3
     if (chunk>=0)
   d8442:	2800      	cmp	r0, #0
   d8444:	db01      	blt.n	d844a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d8446:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d8448:	e7f3      	b.n	d8432 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d844a:	2c00      	cmp	r4, #0
   d844c:	bf08      	it	eq
   d844e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d8450:	4620      	mov	r0, r4
   d8452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8454 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d8454:	b570      	push	{r4, r5, r6, lr}
   d8456:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d8458:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d845a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d845c:	b149      	cbz	r1, d8472 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d845e:	f002 fe20 	bl	db0a2 <strlen>
   d8462:	682b      	ldr	r3, [r5, #0]
   d8464:	4602      	mov	r2, r0
   d8466:	4621      	mov	r1, r4
   d8468:	4628      	mov	r0, r5
   d846a:	68db      	ldr	r3, [r3, #12]
    }
   d846c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d8470:	4718      	bx	r3
    }
   d8472:	bd70      	pop	{r4, r5, r6, pc}

000d8474 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8474:	6803      	ldr	r3, [r0, #0]
   d8476:	689b      	ldr	r3, [r3, #8]
   d8478:	4718      	bx	r3

000d847a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d847a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d847c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d847e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d8480:	f7ff fff8 	bl	d8474 <_ZN5Print5printEc>
  n += print('\n');
   d8484:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d8486:	4604      	mov	r4, r0
  n += print('\n');
   d8488:	4628      	mov	r0, r5
   d848a:	f7ff fff3 	bl	d8474 <_ZN5Print5printEc>
  return n;
}
   d848e:	4420      	add	r0, r4
   d8490:	bd38      	pop	{r3, r4, r5, pc}

000d8492 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d8492:	b530      	push	{r4, r5, lr}
   d8494:	b08b      	sub	sp, #44	; 0x2c
   d8496:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8498:	2100      	movs	r1, #0
   d849a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d849e:	2a01      	cmp	r2, #1
   d84a0:	bf98      	it	ls
   d84a2:	220a      	movls	r2, #10
   d84a4:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d84a8:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d84ac:	fb05 3312 	mls	r3, r5, r2, r3
   d84b0:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d84b4:	2b09      	cmp	r3, #9
   d84b6:	bf94      	ite	ls
   d84b8:	3330      	addls	r3, #48	; 0x30
   d84ba:	3337      	addhi	r3, #55	; 0x37
   d84bc:	b2db      	uxtb	r3, r3
   d84be:	4621      	mov	r1, r4
   d84c0:	f804 3901 	strb.w	r3, [r4], #-1
   d84c4:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d84c6:	2d00      	cmp	r5, #0
   d84c8:	d1ee      	bne.n	d84a8 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d84ca:	f7ff ffc3 	bl	d8454 <_ZN5Print5writeEPKc>
}
   d84ce:	b00b      	add	sp, #44	; 0x2c
   d84d0:	bd30      	pop	{r4, r5, pc}

000d84d2 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d84d2:	b40c      	push	{r2, r3}
   d84d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d84d8:	b087      	sub	sp, #28
   d84da:	af00      	add	r7, sp, #0
   d84dc:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d84e0:	4605      	mov	r5, r0
   d84e2:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d84e6:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d84e8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d84ea:	4623      	mov	r3, r4
   d84ec:	464a      	mov	r2, r9
   d84ee:	2114      	movs	r1, #20
   d84f0:	1d38      	adds	r0, r7, #4
   d84f2:	f7fe fa19 	bl	d6928 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d84f6:	2813      	cmp	r0, #19
   d84f8:	d805      	bhi.n	d8506 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d84fa:	1d39      	adds	r1, r7, #4
   d84fc:	4628      	mov	r0, r5
   d84fe:	f7ff ffa9 	bl	d8454 <_ZN5Print5writeEPKc>
   d8502:	4604      	mov	r4, r0
   d8504:	e013      	b.n	d852e <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8506:	f100 0308 	add.w	r3, r0, #8
   d850a:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d850e:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d8510:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d8514:	1c41      	adds	r1, r0, #1
   d8516:	4623      	mov	r3, r4
   d8518:	464a      	mov	r2, r9
   d851a:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d851c:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d851e:	f7fe fa03 	bl	d6928 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d8522:	4669      	mov	r1, sp
   d8524:	4628      	mov	r0, r5
   d8526:	f7ff ff95 	bl	d8454 <_ZN5Print5writeEPKc>
   d852a:	4604      	mov	r4, r0
   d852c:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d852e:	b11e      	cbz	r6, d8538 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d8530:	4628      	mov	r0, r5
   d8532:	f7ff ffa2 	bl	d847a <_ZN5Print7printlnEv>
   d8536:	4404      	add	r4, r0
    return n;
}
   d8538:	4620      	mov	r0, r4
   d853a:	371c      	adds	r7, #28
   d853c:	46bd      	mov	sp, r7
   d853e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8542:	b002      	add	sp, #8
   d8544:	4770      	bx	lr

000d8546 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d8546:	6880      	ldr	r0, [r0, #8]
   d8548:	6803      	ldr	r3, [r0, #0]
   d854a:	68db      	ldr	r3, [r3, #12]
   d854c:	4718      	bx	r3

000d854e <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d854e:	4770      	bx	lr

000d8550 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d8550:	b119      	cbz	r1, d855a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d8552:	680b      	ldr	r3, [r1, #0]
   d8554:	4608      	mov	r0, r1
   d8556:	685b      	ldr	r3, [r3, #4]
   d8558:	4718      	bx	r3
   d855a:	4770      	bx	lr

000d855c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d855c:	b119      	cbz	r1, d8566 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d855e:	680b      	ldr	r3, [r1, #0]
   d8560:	4608      	mov	r0, r1
   d8562:	685b      	ldr	r3, [r3, #4]
   d8564:	4718      	bx	r3
   d8566:	4770      	bx	lr

000d8568 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d8568:	4770      	bx	lr

000d856a <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d856a:	4770      	bx	lr

000d856c <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d856c:	4770      	bx	lr

000d856e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d856e:	b538      	push	{r3, r4, r5, lr}
   d8570:	4604      	mov	r4, r0
   d8572:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d8574:	6800      	ldr	r0, [r0, #0]
   d8576:	212e      	movs	r1, #46	; 0x2e
   d8578:	f002 fd5c 	bl	db034 <strchrnul>
    size = s - category;
   d857c:	6823      	ldr	r3, [r4, #0]
   d857e:	1ac3      	subs	r3, r0, r3
   d8580:	602b      	str	r3, [r5, #0]
    if (size) {
   d8582:	b123      	cbz	r3, d858e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d8584:	7803      	ldrb	r3, [r0, #0]
   d8586:	b103      	cbz	r3, d858a <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d8588:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d858a:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d858c:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d858e:	4618      	mov	r0, r3
}
   d8590:	bd38      	pop	{r3, r4, r5, pc}

000d8592 <_ZN5spark16JSONStreamWriterD0Ev>:
   d8592:	b510      	push	{r4, lr}
   d8594:	210c      	movs	r1, #12
   d8596:	4604      	mov	r4, r0
   d8598:	f002 fb6a 	bl	dac70 <_ZdlPvj>
   d859c:	4620      	mov	r0, r4
   d859e:	bd10      	pop	{r4, pc}

000d85a0 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d85a0:	b510      	push	{r4, lr}
   d85a2:	2104      	movs	r1, #4
   d85a4:	4604      	mov	r4, r0
   d85a6:	f002 fb63 	bl	dac70 <_ZdlPvj>
   d85aa:	4620      	mov	r0, r4
   d85ac:	bd10      	pop	{r4, pc}

000d85ae <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d85ae:	b510      	push	{r4, lr}
   d85b0:	2104      	movs	r1, #4
   d85b2:	4604      	mov	r4, r0
   d85b4:	f002 fb5c 	bl	dac70 <_ZdlPvj>
   d85b8:	4620      	mov	r0, r4
   d85ba:	bd10      	pop	{r4, pc}

000d85bc <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d85bc:	b538      	push	{r3, r4, r5, lr}
   d85be:	460c      	mov	r4, r1
   d85c0:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d85c2:	f001 fc59 	bl	d9e78 <_Z16_fetch_usbserialv>
   d85c6:	4284      	cmp	r4, r0
   d85c8:	d00d      	beq.n	d85e6 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d85ca:	f001 fcdd 	bl	d9f88 <_Z22__fetch_global_Serial1v>
   d85ce:	4284      	cmp	r4, r0
   d85d0:	d105      	bne.n	d85de <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d85d2:	f001 fcd9 	bl	d9f88 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d85d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d85da:	f001 bcd2 	b.w	d9f82 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d85de:	4621      	mov	r1, r4
   d85e0:	4628      	mov	r0, r5
   d85e2:	f7ff ffbb 	bl	d855c <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d85e6:	bd38      	pop	{r3, r4, r5, pc}

000d85e8 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d85e8:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d85ea:	f002 fd2d 	bl	db048 <strcmp>
}
   d85ee:	fab0 f080 	clz	r0, r0
   d85f2:	0940      	lsrs	r0, r0, #5
   d85f4:	bd08      	pop	{r3, pc}

000d85f6 <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d85f6:	b538      	push	{r3, r4, r5, lr}
   d85f8:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d85fa:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d85fc:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d85fe:	f002 fd50 	bl	db0a2 <strlen>
   d8602:	4621      	mov	r1, r4
   d8604:	4602      	mov	r2, r0
   d8606:	4628      	mov	r0, r5
}
   d8608:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d860c:	f002 bac1 	b.w	dab92 <_ZN5spark10JSONWriter5valueEPKcj>

000d8610 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d8610:	6800      	ldr	r0, [r0, #0]
   d8612:	f7fd bf9d 	b.w	d6550 <os_mutex_recursive_lock>

000d8616 <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d8616:	b570      	push	{r4, r5, r6, lr}
   d8618:	4604      	mov	r4, r0
    write(str, strlen(str));
   d861a:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d861c:	460d      	mov	r5, r1
    write(str, strlen(str));
   d861e:	f002 fd40 	bl	db0a2 <strlen>
   d8622:	6823      	ldr	r3, [r4, #0]
   d8624:	4602      	mov	r2, r0
   d8626:	4629      	mov	r1, r5
   d8628:	4620      	mov	r0, r4
   d862a:	68db      	ldr	r3, [r3, #12]
}
   d862c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d8630:	4718      	bx	r3

000d8632 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d8632:	b513      	push	{r0, r1, r4, lr}
   d8634:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d8636:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d8638:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d863c:	68d4      	ldr	r4, [r2, #12]
   d863e:	4619      	mov	r1, r3
   d8640:	2201      	movs	r2, #1
   d8642:	47a0      	blx	r4
}
   d8644:	b002      	add	sp, #8
   d8646:	bd10      	pop	{r4, pc}

000d8648 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d8648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d864c:	6845      	ldr	r5, [r0, #4]
   d864e:	6807      	ldr	r7, [r0, #0]
   d8650:	b085      	sub	sp, #20
   d8652:	4691      	mov	r9, r2
   d8654:	2214      	movs	r2, #20
   d8656:	4355      	muls	r5, r2
   d8658:	9301      	str	r3, [sp, #4]
   d865a:	10ab      	asrs	r3, r5, #2
   d865c:	4d19      	ldr	r5, [pc, #100]	; (d86c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d865e:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d8660:	435d      	muls	r5, r3
   d8662:	468b      	mov	fp, r1
   d8664:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8666:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d8668:	2d00      	cmp	r5, #0
   d866a:	9303      	str	r3, [sp, #12]
   d866c:	dd23      	ble.n	d86b6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d866e:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d8670:	106e      	asrs	r6, r5, #1
   d8672:	fb03 f006 	mul.w	r0, r3, r6
   d8676:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d867a:	464a      	mov	r2, r9
   d867c:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d8680:	5820      	ldr	r0, [r4, r0]
   d8682:	45d1      	cmp	r9, sl
   d8684:	bf28      	it	cs
   d8686:	4652      	movcs	r2, sl
   d8688:	4659      	mov	r1, fp
   d868a:	f002 fd12 	bl	db0b2 <strncmp>
                if (cmp == 0) {
   d868e:	9b03      	ldr	r3, [sp, #12]
   d8690:	b948      	cbnz	r0, d86a6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d8692:	45d1      	cmp	r9, sl
   d8694:	d103      	bne.n	d869e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d8696:	9a01      	ldr	r2, [sp, #4]
   d8698:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d869a:	4635      	mov	r5, r6
   d869c:	e7e4      	b.n	d8668 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d869e:	bf8c      	ite	hi
   d86a0:	2001      	movhi	r0, #1
   d86a2:	2000      	movls	r0, #0
   d86a4:	e000      	b.n	d86a8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d86a6:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d86a8:	2800      	cmp	r0, #0
   d86aa:	d0f6      	beq.n	d869a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d86ac:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d86ae:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d86b2:	3e01      	subs	r6, #1
   d86b4:	e7f1      	b.n	d869a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d86b6:	1be4      	subs	r4, r4, r7
}
   d86b8:	4802      	ldr	r0, [pc, #8]	; (d86c4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d86ba:	10a4      	asrs	r4, r4, #2
}
   d86bc:	4360      	muls	r0, r4
   d86be:	b005      	add	sp, #20
   d86c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d86c4:	cccccccd 	.word	0xcccccccd

000d86c8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d86c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d86ca:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d86cc:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d86ce:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d86d0:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d86d2:	b313      	cbz	r3, d871a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d86d4:	b309      	cbz	r1, d871a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d86d6:	af04      	add	r7, sp, #16
   d86d8:	2300      	movs	r3, #0
   d86da:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d86de:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d86e2:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d86e4:	4639      	mov	r1, r7
   d86e6:	a801      	add	r0, sp, #4
   d86e8:	f7ff ff41 	bl	d856e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d86ec:	4601      	mov	r1, r0
   d86ee:	b1a0      	cbz	r0, d871a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d86f0:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d86f2:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d86f4:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d86f8:	4620      	mov	r0, r4
   d86fa:	f7ff ffa5 	bl	d8648 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d86fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d8702:	b153      	cbz	r3, d871a <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d8704:	6823      	ldr	r3, [r4, #0]
   d8706:	2414      	movs	r4, #20
   d8708:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d870c:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d870e:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d8712:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d8714:	bfa8      	it	ge
   d8716:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d8718:	e7e4      	b.n	d86e4 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d871a:	4630      	mov	r0, r6
   d871c:	b005      	add	sp, #20
   d871e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8720 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d8720:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d8722:	4c09      	ldr	r4, [pc, #36]	; (d8748 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d8724:	6823      	ldr	r3, [r4, #0]
   d8726:	07db      	lsls	r3, r3, #31
   d8728:	d40b      	bmi.n	d8742 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d872a:	4620      	mov	r0, r4
   d872c:	f7fb fcc6 	bl	d40bc <__cxa_guard_acquire>
   d8730:	b138      	cbz	r0, d8742 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d8732:	4620      	mov	r0, r4
   d8734:	f7fb fcc7 	bl	d40c6 <__cxa_guard_release>
   d8738:	4a04      	ldr	r2, [pc, #16]	; (d874c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d873a:	4905      	ldr	r1, [pc, #20]	; (d8750 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d873c:	4805      	ldr	r0, [pc, #20]	; (d8754 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d873e:	f002 fa8a 	bl	dac56 <__aeabi_atexit>
    return &factory;
}
   d8742:	4804      	ldr	r0, [pc, #16]	; (d8754 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d8744:	bd10      	pop	{r4, pc}
   d8746:	bf00      	nop
   d8748:	2003e3d8 	.word	0x2003e3d8
   d874c:	2003d8c4 	.word	0x2003d8c4
   d8750:	000d856b 	.word	0x000d856b
   d8754:	2003d854 	.word	0x2003d854

000d8758 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d8758:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d875a:	4c09      	ldr	r4, [pc, #36]	; (d8780 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d875c:	6823      	ldr	r3, [r4, #0]
   d875e:	07db      	lsls	r3, r3, #31
   d8760:	d40b      	bmi.n	d877a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d8762:	4620      	mov	r0, r4
   d8764:	f7fb fcaa 	bl	d40bc <__cxa_guard_acquire>
   d8768:	b138      	cbz	r0, d877a <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d876a:	4620      	mov	r0, r4
   d876c:	f7fb fcab 	bl	d40c6 <__cxa_guard_release>
   d8770:	4a04      	ldr	r2, [pc, #16]	; (d8784 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d8772:	4905      	ldr	r1, [pc, #20]	; (d8788 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d8774:	4805      	ldr	r0, [pc, #20]	; (d878c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d8776:	f002 fa6e 	bl	dac56 <__aeabi_atexit>
    return &factory;
}
   d877a:	4804      	ldr	r0, [pc, #16]	; (d878c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d877c:	bd10      	pop	{r4, pc}
   d877e:	bf00      	nop
   d8780:	2003e408 	.word	0x2003e408
   d8784:	2003d8c4 	.word	0x2003d8c4
   d8788:	000d8569 	.word	0x000d8569
   d878c:	2003d850 	.word	0x2003d850

000d8790 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d8790:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8792:	2500      	movs	r5, #0
   d8794:	4604      	mov	r4, r0
   d8796:	6005      	str	r5, [r0, #0]
   d8798:	6045      	str	r5, [r0, #4]
   d879a:	6085      	str	r5, [r0, #8]
   d879c:	6105      	str	r5, [r0, #16]
   d879e:	6145      	str	r5, [r0, #20]
   d87a0:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d87a2:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d87a6:	f7fd fec3 	bl	d6530 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d87aa:	f7ff ffb9 	bl	d8720 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d87ae:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d87b0:	f7ff ffd2 	bl	d8758 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d87b4:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d87b6:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d87b8:	4620      	mov	r0, r4
   d87ba:	bd38      	pop	{r3, r4, r5, pc}

000d87bc <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d87bc:	b510      	push	{r4, lr}
    static LogManager mgr;
   d87be:	4c0a      	ldr	r4, [pc, #40]	; (d87e8 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d87c0:	6823      	ldr	r3, [r4, #0]
   d87c2:	07db      	lsls	r3, r3, #31
   d87c4:	d40e      	bmi.n	d87e4 <_ZN5spark10LogManager8instanceEv+0x28>
   d87c6:	4620      	mov	r0, r4
   d87c8:	f7fb fc78 	bl	d40bc <__cxa_guard_acquire>
   d87cc:	b150      	cbz	r0, d87e4 <_ZN5spark10LogManager8instanceEv+0x28>
   d87ce:	4807      	ldr	r0, [pc, #28]	; (d87ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d87d0:	f7ff ffde 	bl	d8790 <_ZN5spark10LogManagerC1Ev>
   d87d4:	4620      	mov	r0, r4
   d87d6:	f7fb fc76 	bl	d40c6 <__cxa_guard_release>
   d87da:	4a05      	ldr	r2, [pc, #20]	; (d87f0 <_ZN5spark10LogManager8instanceEv+0x34>)
   d87dc:	4905      	ldr	r1, [pc, #20]	; (d87f4 <_ZN5spark10LogManager8instanceEv+0x38>)
   d87de:	4803      	ldr	r0, [pc, #12]	; (d87ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d87e0:	f002 fa39 	bl	dac56 <__aeabi_atexit>
    return &mgr;
}
   d87e4:	4801      	ldr	r0, [pc, #4]	; (d87ec <_ZN5spark10LogManager8instanceEv+0x30>)
   d87e6:	bd10      	pop	{r4, pc}
   d87e8:	2003e3dc 	.word	0x2003e3dc
   d87ec:	2003e3e0 	.word	0x2003e3e0
   d87f0:	2003d8c4 	.word	0x2003d8c4
   d87f4:	000d8c27 	.word	0x000d8c27

000d87f8 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d87f8:	2300      	movs	r3, #0
   d87fa:	4a02      	ldr	r2, [pc, #8]	; (d8804 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d87fc:	4902      	ldr	r1, [pc, #8]	; (d8808 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d87fe:	4803      	ldr	r0, [pc, #12]	; (d880c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d8800:	f7fd bfae 	b.w	d6760 <log_set_callbacks>
   d8804:	000d8b09 	.word	0x000d8b09
   d8808:	000d8a99 	.word	0x000d8a99
   d880c:	000d8a21 	.word	0x000d8a21

000d8810 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d8810:	2300      	movs	r3, #0
   d8812:	461a      	mov	r2, r3
   d8814:	4619      	mov	r1, r3
   d8816:	4618      	mov	r0, r3
   d8818:	f7fd bfa2 	b.w	d6760 <log_set_callbacks>

000d881c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d881c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d881e:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d8820:	688e      	ldr	r6, [r1, #8]
   d8822:	f851 3b04 	ldr.w	r3, [r1], #4
   d8826:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d882a:	4605      	mov	r5, r0
   d882c:	a801      	add	r0, sp, #4
   d882e:	f7fe ffaf 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d8832:	4622      	mov	r2, r4
   d8834:	4631      	mov	r1, r6
   d8836:	4628      	mov	r0, r5
   d8838:	f002 f9e2 	bl	dac00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d883c:	a801      	add	r0, sp, #4
   d883e:	f7fb ffb9 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d8842:	4628      	mov	r0, r5
   d8844:	b002      	add	sp, #8
   d8846:	bd70      	pop	{r4, r5, r6, pc}

000d8848 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8848:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d884a:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d884c:	690e      	ldr	r6, [r1, #16]
   d884e:	f851 3b04 	ldr.w	r3, [r1], #4
   d8852:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d8856:	4605      	mov	r5, r0
   d8858:	a801      	add	r0, sp, #4
   d885a:	f7fe ff99 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d885e:	4622      	mov	r2, r4
   d8860:	4631      	mov	r1, r6
   d8862:	4628      	mov	r0, r5
   d8864:	f002 f9e7 	bl	dac36 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8868:	a801      	add	r0, sp, #4
   d886a:	f7fb ffa3 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d886e:	4628      	mov	r0, r5
   d8870:	b002      	add	sp, #8
   d8872:	bd70      	pop	{r4, r5, r6, pc}

000d8874 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8874:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d8876:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d8878:	68ce      	ldr	r6, [r1, #12]
   d887a:	f851 3b04 	ldr.w	r3, [r1], #4
   d887e:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d8882:	4605      	mov	r5, r0
   d8884:	a801      	add	r0, sp, #4
   d8886:	f7fe ff83 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d888a:	4622      	mov	r2, r4
   d888c:	4631      	mov	r1, r6
   d888e:	4628      	mov	r0, r5
   d8890:	f002 f98e 	bl	dabb0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d8894:	a801      	add	r0, sp, #4
   d8896:	f7fb ff8d 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d889a:	4628      	mov	r0, r5
   d889c:	b002      	add	sp, #8
   d889e:	bd70      	pop	{r4, r5, r6, pc}

000d88a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d88a0:	b530      	push	{r4, r5, lr}
   d88a2:	b08b      	sub	sp, #44	; 0x2c
   d88a4:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d88a6:	4601      	mov	r1, r0
   d88a8:	a804      	add	r0, sp, #16
   d88aa:	f7ff ffb7 	bl	d881c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d88ae:	a804      	add	r0, sp, #16
   d88b0:	f002 f8b1 	bl	daa16 <_ZN5spark18JSONObjectIterator4nextEv>
   d88b4:	b1e8      	cbz	r0, d88f2 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d88b6:	a904      	add	r1, sp, #16
   d88b8:	4668      	mov	r0, sp
   d88ba:	f7ff ffdb 	bl	d8874 <_ZNK5spark18JSONObjectIterator4nameEv>
   d88be:	490f      	ldr	r1, [pc, #60]	; (d88fc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d88c0:	9802      	ldr	r0, [sp, #8]
   d88c2:	f7ff fe91 	bl	d85e8 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d88c6:	4604      	mov	r4, r0
   d88c8:	b110      	cbz	r0, d88d0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d88ca:	1c2c      	adds	r4, r5, #0
   d88cc:	bf18      	it	ne
   d88ce:	2401      	movne	r4, #1
   d88d0:	a801      	add	r0, sp, #4
   d88d2:	f7fb ff6f 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88d6:	2c00      	cmp	r4, #0
   d88d8:	d0e9      	beq.n	d88ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d88da:	a904      	add	r1, sp, #16
   d88dc:	4668      	mov	r0, sp
   d88de:	f7ff ffb3 	bl	d8848 <_ZNK5spark18JSONObjectIterator5valueEv>
   d88e2:	4668      	mov	r0, sp
   d88e4:	f002 f877 	bl	da9d6 <_ZNK5spark9JSONValue5toIntEv>
   d88e8:	6028      	str	r0, [r5, #0]
   d88ea:	a801      	add	r0, sp, #4
   d88ec:	f7fb ff62 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d88f0:	e7dd      	b.n	d88ae <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d88f2:	a805      	add	r0, sp, #20
   d88f4:	f7fb ff5e 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d88f8:	b00b      	add	sp, #44	; 0x2c
   d88fa:	bd30      	pop	{r4, r5, pc}
   d88fc:	000dc390 	.word	0x000dc390

000d8900 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8900:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8902:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d8904:	4620      	mov	r0, r4
   d8906:	4913      	ldr	r1, [pc, #76]	; (d8954 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d8908:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d890a:	f002 fb9d 	bl	db048 <strcmp>
   d890e:	b940      	cbnz	r0, d8922 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d8910:	f001 fab2 	bl	d9e78 <_Z16_fetch_usbserialv>
   d8914:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d8918:	f001 fa9e 	bl	d9e58 <_ZN9USBSerial5beginEl>
        return &Serial;
   d891c:	f001 faac 	bl	d9e78 <_Z16_fetch_usbserialv>
   d8920:	e015      	b.n	d894e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d8922:	490d      	ldr	r1, [pc, #52]	; (d8958 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d8924:	4620      	mov	r0, r4
   d8926:	f002 fb8f 	bl	db048 <strcmp>
   d892a:	b978      	cbnz	r0, d894c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d892c:	a902      	add	r1, sp, #8
   d892e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d8932:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d8936:	4628      	mov	r0, r5
   d8938:	f7ff ffb2 	bl	d88a0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d893c:	f001 fb24 	bl	d9f88 <_Z22__fetch_global_Serial1v>
   d8940:	9901      	ldr	r1, [sp, #4]
   d8942:	f001 fb1b 	bl	d9f7c <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d8946:	f001 fb1f 	bl	d9f88 <_Z22__fetch_global_Serial1v>
   d894a:	e000      	b.n	d894e <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d894c:	2000      	movs	r0, #0
}
   d894e:	b003      	add	sp, #12
   d8950:	bd30      	pop	{r4, r5, pc}
   d8952:	bf00      	nop
   d8954:	000dc395 	.word	0x000dc395
   d8958:	000dc39c 	.word	0x000dc39c

000d895c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d895c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d895e:	6804      	ldr	r4, [r0, #0]
   d8960:	6843      	ldr	r3, [r0, #4]
   d8962:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8964:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d8966:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d896a:	42a6      	cmp	r6, r4
   d896c:	d005      	beq.n	d897a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d896e:	f104 0008 	add.w	r0, r4, #8
   d8972:	f7ff fff3 	bl	d895c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8976:	3414      	adds	r4, #20
   d8978:	e7f7      	b.n	d896a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d897a:	6828      	ldr	r0, [r5, #0]
   d897c:	f7fd ffbc 	bl	d68f8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d8980:	4628      	mov	r0, r5
   d8982:	bd70      	pop	{r4, r5, r6, pc}

000d8984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d8984:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d8986:	6804      	ldr	r4, [r0, #0]
   d8988:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d898a:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d898c:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8990:	42a6      	cmp	r6, r4
   d8992:	d004      	beq.n	d899e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d8994:	4620      	mov	r0, r4
   d8996:	f7fe f84f 	bl	d6a38 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d899a:	3410      	adds	r4, #16
   d899c:	e7f8      	b.n	d8990 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d899e:	6828      	ldr	r0, [r5, #0]
   d89a0:	f7fd ffaa 	bl	d68f8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d89a4:	4628      	mov	r0, r5
   d89a6:	bd70      	pop	{r4, r5, r6, pc}

000d89a8 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d89a8:	b510      	push	{r4, lr}
   d89aa:	4604      	mov	r4, r0
   d89ac:	300c      	adds	r0, #12
   d89ae:	f7ff ffd5 	bl	d895c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d89b2:	4620      	mov	r0, r4
   d89b4:	f7ff ffe6 	bl	d8984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d89b8:	4620      	mov	r0, r4
   d89ba:	bd10      	pop	{r4, pc}

000d89bc <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d89bc:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d89be:	4b04      	ldr	r3, [pc, #16]	; (d89d0 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d89c0:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d89c2:	f840 3b04 	str.w	r3, [r0], #4
   d89c6:	f7ff ffef 	bl	d89a8 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d89ca:	4620      	mov	r0, r4
   d89cc:	bd10      	pop	{r4, pc}
   d89ce:	bf00      	nop
   d89d0:	000db270 	.word	0x000db270

000d89d4 <_ZN5spark16StreamLogHandlerD0Ev>:
   d89d4:	b510      	push	{r4, lr}
   d89d6:	4604      	mov	r4, r0
   d89d8:	f7ff fff0 	bl	d89bc <_ZN5spark16StreamLogHandlerD1Ev>
   d89dc:	4620      	mov	r0, r4
   d89de:	2124      	movs	r1, #36	; 0x24
   d89e0:	f002 f946 	bl	dac70 <_ZdlPvj>
   d89e4:	4620      	mov	r0, r4
   d89e6:	bd10      	pop	{r4, pc}

000d89e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d89e8:	b510      	push	{r4, lr}
   d89ea:	4b03      	ldr	r3, [pc, #12]	; (d89f8 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d89ec:	6003      	str	r3, [r0, #0]
   d89ee:	4604      	mov	r4, r0
   d89f0:	f7ff ffe4 	bl	d89bc <_ZN5spark16StreamLogHandlerD1Ev>
   d89f4:	4620      	mov	r0, r4
   d89f6:	bd10      	pop	{r4, pc}
   d89f8:	000dc380 	.word	0x000dc380

000d89fc <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d89fc:	b510      	push	{r4, lr}
   d89fe:	4604      	mov	r4, r0
   d8a00:	f7ff fff2 	bl	d89e8 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d8a04:	4620      	mov	r0, r4
   d8a06:	2124      	movs	r1, #36	; 0x24
   d8a08:	f002 f932 	bl	dac70 <_ZdlPvj>
   d8a0c:	4620      	mov	r0, r4
   d8a0e:	bd10      	pop	{r4, pc}

000d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d8a10:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d8a12:	6803      	ldr	r3, [r0, #0]
   d8a14:	4604      	mov	r4, r0
   d8a16:	6818      	ldr	r0, [r3, #0]
   d8a18:	f7fd fda2 	bl	d6560 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d8a1c:	4620      	mov	r0, r4
   d8a1e:	bd10      	pop	{r4, pc}

000d8a20 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a24:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d8a26:	4b1b      	ldr	r3, [pc, #108]	; (d8a94 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d8a28:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d8a2e:	b085      	sub	sp, #20
   d8a30:	4682      	mov	sl, r0
   d8a32:	460e      	mov	r6, r1
   d8a34:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8a36:	bb53      	cbnz	r3, d8a8e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d8a38:	f7ff fec0 	bl	d87bc <_ZN5spark10LogManager8instanceEv>
   d8a3c:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8a3e:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8a40:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d8a42:	f7ff fde5 	bl	d8610 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d8a46:	7b23      	ldrb	r3, [r4, #12]
   d8a48:	b9f3      	cbnz	r3, d8a88 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8a4a:	2301      	movs	r3, #1
   d8a4c:	7323      	strb	r3, [r4, #12]
   d8a4e:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8a50:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d8a52:	b2f6      	uxtb	r6, r6
   d8a54:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d8a58:	454d      	cmp	r5, r9
   d8a5a:	d013      	beq.n	d8a84 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d8a5c:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d8a60:	4641      	mov	r1, r8
   d8a62:	1d38      	adds	r0, r7, #4
   d8a64:	f7ff fe30 	bl	d86c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8a68:	4286      	cmp	r6, r0
   d8a6a:	d3f5      	bcc.n	d8a58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d8a6c:	683b      	ldr	r3, [r7, #0]
   d8a6e:	f8cd b000 	str.w	fp, [sp]
   d8a72:	689b      	ldr	r3, [r3, #8]
   d8a74:	469e      	mov	lr, r3
   d8a76:	4638      	mov	r0, r7
   d8a78:	4643      	mov	r3, r8
   d8a7a:	4632      	mov	r2, r6
   d8a7c:	4651      	mov	r1, sl
   d8a7e:	4677      	mov	r7, lr
   d8a80:	47b8      	blx	r7
   d8a82:	e7e9      	b.n	d8a58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8a84:	2300      	movs	r3, #0
   d8a86:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d8a88:	a803      	add	r0, sp, #12
   d8a8a:	f7ff ffc1 	bl	d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d8a8e:	b005      	add	sp, #20
   d8a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8a94:	e000ed00 	.word	0xe000ed00

000d8a98 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d8a98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8a9c:	4699      	mov	r9, r3
   d8a9e:	4b19      	ldr	r3, [pc, #100]	; (d8b04 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d8aa0:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d8aa6:	4607      	mov	r7, r0
   d8aa8:	4688      	mov	r8, r1
   d8aaa:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8aac:	bb33      	cbnz	r3, d8afc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d8aae:	f7ff fe85 	bl	d87bc <_ZN5spark10LogManager8instanceEv>
   d8ab2:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d8ab4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8ab6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8ab8:	f7ff fdaa 	bl	d8610 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d8abc:	7b23      	ldrb	r3, [r4, #12]
   d8abe:	b9d3      	cbnz	r3, d8af6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8ac0:	2301      	movs	r3, #1
   d8ac2:	7323      	strb	r3, [r4, #12]
   d8ac4:	6825      	ldr	r5, [r4, #0]
   d8ac6:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d8ac8:	fa5f fb86 	uxtb.w	fp, r6
   d8acc:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d8ad0:	4555      	cmp	r5, sl
   d8ad2:	d00e      	beq.n	d8af2 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d8ad4:	f855 6b04 	ldr.w	r6, [r5], #4
   d8ad8:	4649      	mov	r1, r9
   d8ada:	1d30      	adds	r0, r6, #4
   d8adc:	f7ff fdf4 	bl	d86c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8ae0:	4583      	cmp	fp, r0
   d8ae2:	d3f5      	bcc.n	d8ad0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d8ae4:	6833      	ldr	r3, [r6, #0]
   d8ae6:	4642      	mov	r2, r8
   d8ae8:	68db      	ldr	r3, [r3, #12]
   d8aea:	4639      	mov	r1, r7
   d8aec:	4630      	mov	r0, r6
   d8aee:	4798      	blx	r3
   d8af0:	e7ee      	b.n	d8ad0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d8af2:	2300      	movs	r3, #0
   d8af4:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d8af6:	a801      	add	r0, sp, #4
   d8af8:	f7ff ff8a 	bl	d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d8afc:	b003      	add	sp, #12
   d8afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8b02:	bf00      	nop
   d8b04:	e000ed00 	.word	0xe000ed00

000d8b08 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8b08:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d8b0c:	4b15      	ldr	r3, [pc, #84]	; (d8b64 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d8b0e:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d8b14:	4604      	mov	r4, r0
   d8b16:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d8b18:	b9fb      	cbnz	r3, d8b5a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d8b1a:	f7ff fe4f 	bl	d87bc <_ZN5spark10LogManager8instanceEv>
   d8b1e:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d8b20:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8b22:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8b24:	f7ff fd74 	bl	d8610 <_ZN14RecursiveMutex4lockEv>
   d8b28:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d8b2c:	2646      	movs	r6, #70	; 0x46
   d8b2e:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d8b32:	42af      	cmp	r7, r5
   d8b34:	d107      	bne.n	d8b46 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d8b36:	a801      	add	r0, sp, #4
   d8b38:	f7ff ff6a 	bl	d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d8b3c:	42b4      	cmp	r4, r6
   d8b3e:	bfb4      	ite	lt
   d8b40:	2000      	movlt	r0, #0
   d8b42:	2001      	movge	r0, #1
   d8b44:	e00a      	b.n	d8b5c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d8b46:	f855 0b04 	ldr.w	r0, [r5], #4
   d8b4a:	4641      	mov	r1, r8
   d8b4c:	3004      	adds	r0, #4
   d8b4e:	f7ff fdbb 	bl	d86c8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d8b52:	4286      	cmp	r6, r0
   d8b54:	bfa8      	it	ge
   d8b56:	4606      	movge	r6, r0
   d8b58:	e7eb      	b.n	d8b32 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d8b5a:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d8b5c:	b002      	add	sp, #8
   d8b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8b62:	bf00      	nop
   d8b64:	e000ed00 	.word	0xe000ed00

000d8b68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8b68:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d8b6a:	6803      	ldr	r3, [r0, #0]
   d8b6c:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d8b6e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d8b70:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8b74:	429a      	cmp	r2, r3
   d8b76:	4618      	mov	r0, r3
   d8b78:	d00e      	beq.n	d8b98 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d8b7a:	6806      	ldr	r6, [r0, #0]
   d8b7c:	680d      	ldr	r5, [r1, #0]
   d8b7e:	42ae      	cmp	r6, r5
   d8b80:	f103 0304 	add.w	r3, r3, #4
   d8b84:	d1f6      	bne.n	d8b74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d8b86:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8b88:	1a52      	subs	r2, r2, r1
   d8b8a:	f002 f9f9 	bl	daf80 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d8b8e:	6863      	ldr	r3, [r4, #4]
   d8b90:	3b01      	subs	r3, #1
   d8b92:	6063      	str	r3, [r4, #4]
    return true;
   d8b94:	2001      	movs	r0, #1
}
   d8b96:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d8b98:	2000      	movs	r0, #0
   d8b9a:	bd70      	pop	{r4, r5, r6, pc}

000d8b9c <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d8b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8b9e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d8ba0:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d8ba2:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8ba4:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d8ba6:	f7ff fd33 	bl	d8610 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d8baa:	a901      	add	r1, sp, #4
   d8bac:	4620      	mov	r0, r4
   d8bae:	f7ff ffdb 	bl	d8b68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d8bb2:	b920      	cbnz	r0, d8bbe <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d8bb4:	a803      	add	r0, sp, #12
   d8bb6:	f7ff ff2b 	bl	d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d8bba:	b004      	add	sp, #16
   d8bbc:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d8bbe:	6863      	ldr	r3, [r4, #4]
   d8bc0:	2b00      	cmp	r3, #0
   d8bc2:	d1f7      	bne.n	d8bb4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d8bc4:	f7ff fe24 	bl	d8810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d8bc8:	e7f4      	b.n	d8bb4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d8bca <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d8bca:	b570      	push	{r4, r5, r6, lr}
   d8bcc:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8bce:	6943      	ldr	r3, [r0, #20]
   d8bd0:	2618      	movs	r6, #24
   d8bd2:	4604      	mov	r4, r0
   d8bd4:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d8bd8:	42ae      	cmp	r6, r5
   d8bda:	d015      	beq.n	d8c08 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d8bdc:	f105 0110 	add.w	r1, r5, #16
   d8be0:	4620      	mov	r0, r4
   d8be2:	f7ff ffc1 	bl	d8b68 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d8be6:	6863      	ldr	r3, [r4, #4]
   d8be8:	b90b      	cbnz	r3, d8bee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d8bea:	f7ff fe11 	bl	d8810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d8bee:	69e0      	ldr	r0, [r4, #28]
   d8bf0:	6929      	ldr	r1, [r5, #16]
   d8bf2:	6803      	ldr	r3, [r0, #0]
   d8bf4:	68db      	ldr	r3, [r3, #12]
   d8bf6:	4798      	blx	r3
        if (h.stream) {
   d8bf8:	6969      	ldr	r1, [r5, #20]
   d8bfa:	b119      	cbz	r1, d8c04 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d8bfc:	6a20      	ldr	r0, [r4, #32]
   d8bfe:	6803      	ldr	r3, [r0, #0]
   d8c00:	68db      	ldr	r3, [r3, #12]
   d8c02:	4798      	blx	r3
   d8c04:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d8c06:	e7e7      	b.n	d8bd8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d8c08:	6925      	ldr	r5, [r4, #16]
   d8c0a:	6963      	ldr	r3, [r4, #20]
   d8c0c:	2618      	movs	r6, #24
   d8c0e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8c12:	42b5      	cmp	r5, r6
   d8c14:	d004      	beq.n	d8c20 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d8c16:	4628      	mov	r0, r5
   d8c18:	f7fd ff0e 	bl	d6a38 <_ZN6StringD1Ev>
   d8c1c:	3518      	adds	r5, #24
   d8c1e:	e7f8      	b.n	d8c12 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d8c20:	2300      	movs	r3, #0
   d8c22:	6163      	str	r3, [r4, #20]
   d8c24:	bd70      	pop	{r4, r5, r6, pc}

000d8c26 <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d8c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8c28:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8c2a:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d8c2c:	f7ff fdf0 	bl	d8810 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d8c30:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d8c34:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d8c38:	f7ff fcea 	bl	d8610 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d8c3c:	4620      	mov	r0, r4
   d8c3e:	f7ff ffc4 	bl	d8bca <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d8c42:	4628      	mov	r0, r5
   d8c44:	f7ff fee4 	bl	d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d8c48:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d8c4a:	b108      	cbz	r0, d8c50 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d8c4c:	f7fd fc78 	bl	d6540 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d8c50:	6925      	ldr	r5, [r4, #16]
   d8c52:	6963      	ldr	r3, [r4, #20]
   d8c54:	2618      	movs	r6, #24
   d8c56:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d8c5a:	42b5      	cmp	r5, r6
   d8c5c:	d004      	beq.n	d8c68 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d8c5e:	4628      	mov	r0, r5
   d8c60:	f7fd feea 	bl	d6a38 <_ZN6StringD1Ev>
   d8c64:	3518      	adds	r5, #24
   d8c66:	e7f8      	b.n	d8c5a <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8c68:	6920      	ldr	r0, [r4, #16]
   d8c6a:	f7fd fe45 	bl	d68f8 <free>
   d8c6e:	6820      	ldr	r0, [r4, #0]
   d8c70:	f7fd fe42 	bl	d68f8 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d8c74:	4620      	mov	r0, r4
   d8c76:	b002      	add	sp, #8
   d8c78:	bd70      	pop	{r4, r5, r6, pc}

000d8c7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c7a:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d8c7c:	680a      	ldr	r2, [r1, #0]
   d8c7e:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c80:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c82:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d8c84:	684a      	ldr	r2, [r1, #4]
   d8c86:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c88:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d8c8a:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d8c8c:	688a      	ldr	r2, [r1, #8]
   d8c8e:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d8c90:	608b      	str	r3, [r1, #8]
   d8c92:	4770      	bx	lr

000d8c94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8c94:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8c96:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d8c98:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8c9a:	6003      	str	r3, [r0, #0]
   d8c9c:	6043      	str	r3, [r0, #4]
   d8c9e:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8ca0:	f7ff ffeb 	bl	d8c7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d8ca4:	4620      	mov	r0, r4
   d8ca6:	bd10      	pop	{r4, pc}

000d8ca8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8ca8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8cac:	4604      	mov	r4, r0
   d8cae:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d8cb0:	d925      	bls.n	d8cfe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d8cb2:	4290      	cmp	r0, r2
   d8cb4:	d224      	bcs.n	d8d00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d8cb6:	1a55      	subs	r5, r2, r1
   d8cb8:	3d14      	subs	r5, #20
   d8cba:	442c      	add	r4, r5
   d8cbc:	f1a1 0714 	sub.w	r7, r1, #20
   d8cc0:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8cc4:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8cc6:	f1a5 0308 	sub.w	r3, r5, #8
   d8cca:	429f      	cmp	r7, r3
   d8ccc:	d037      	beq.n	d8d3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d8cce:	b184      	cbz	r4, d8cf2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d8cd0:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d8cd4:	6023      	str	r3, [r4, #0]
   d8cd6:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d8cda:	80a3      	strh	r3, [r4, #4]
   d8cdc:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d8ce0:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8ce2:	60a6      	str	r6, [r4, #8]
   d8ce4:	60e6      	str	r6, [r4, #12]
   d8ce6:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8ce8:	4629      	mov	r1, r5
   d8cea:	f104 0008 	add.w	r0, r4, #8
   d8cee:	f7ff ffc4 	bl	d8c7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d8cf2:	4628      	mov	r0, r5
   d8cf4:	f7ff fe32 	bl	d895c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8cf8:	3c14      	subs	r4, #20
   d8cfa:	3d14      	subs	r5, #20
   d8cfc:	e7e3      	b.n	d8cc6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8cfe:	d01e      	beq.n	d8d3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d8d00:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8d04:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8d06:	f1a5 0308 	sub.w	r3, r5, #8
   d8d0a:	429e      	cmp	r6, r3
   d8d0c:	d017      	beq.n	d8d3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d8d0e:	b184      	cbz	r4, d8d32 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d8d10:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d8d14:	6023      	str	r3, [r4, #0]
   d8d16:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d8d1a:	80a3      	strh	r3, [r4, #4]
   d8d1c:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d8d20:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8d22:	60a7      	str	r7, [r4, #8]
   d8d24:	60e7      	str	r7, [r4, #12]
   d8d26:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8d28:	4629      	mov	r1, r5
   d8d2a:	f104 0008 	add.w	r0, r4, #8
   d8d2e:	f7ff ffa4 	bl	d8c7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d8d32:	4628      	mov	r0, r5
   d8d34:	f7ff fe12 	bl	d895c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8d38:	3414      	adds	r4, #20
   d8d3a:	3514      	adds	r5, #20
   d8d3c:	e7e3      	b.n	d8d06 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d8d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8d40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d8d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8d42:	6845      	ldr	r5, [r0, #4]
   d8d44:	6883      	ldr	r3, [r0, #8]
   d8d46:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d8d48:	4604      	mov	r4, r0
   d8d4a:	460e      	mov	r6, r1
   d8d4c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8d4e:	db0e      	blt.n	d8d6e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d8d50:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d8d52:	2d00      	cmp	r5, #0
   d8d54:	dd05      	ble.n	d8d62 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d8d56:	00a9      	lsls	r1, r5, #2
   d8d58:	6800      	ldr	r0, [r0, #0]
   d8d5a:	f7fd fdd5 	bl	d6908 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d8d5e:	b920      	cbnz	r0, d8d6a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d8d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8d62:	6800      	ldr	r0, [r0, #0]
   d8d64:	f7fd fdc8 	bl	d68f8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8d68:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d8d6a:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d8d6c:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8d6e:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8d70:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8d72:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d8d76:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d8d7a:	1a52      	subs	r2, r2, r1
   d8d7c:	1d08      	adds	r0, r1, #4
   d8d7e:	f002 f8ff 	bl	daf80 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d8d82:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d8d86:	6863      	ldr	r3, [r4, #4]
   d8d88:	3301      	adds	r3, #1
   d8d8a:	6063      	str	r3, [r4, #4]
   d8d8c:	2001      	movs	r0, #1
    return true;
}
   d8d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8d90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d8d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8d92:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d8d94:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d8d96:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d8d98:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d8d9a:	f7ff fc39 	bl	d8610 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d8d9e:	6823      	ldr	r3, [r4, #0]
   d8da0:	6861      	ldr	r1, [r4, #4]
   d8da2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d8da6:	4283      	cmp	r3, r0
   d8da8:	461a      	mov	r2, r3
   d8daa:	d009      	beq.n	d8dc0 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d8dac:	6812      	ldr	r2, [r2, #0]
   d8dae:	42aa      	cmp	r2, r5
   d8db0:	f103 0304 	add.w	r3, r3, #4
   d8db4:	d1f7      	bne.n	d8da6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d8db6:	a801      	add	r0, sp, #4
   d8db8:	f7ff fe2a 	bl	d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d8dbc:	2500      	movs	r5, #0
   d8dbe:	e00e      	b.n	d8dde <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8dc0:	462a      	mov	r2, r5
   d8dc2:	4620      	mov	r0, r4
   d8dc4:	f7ff ffbc 	bl	d8d40 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d8dc8:	4605      	mov	r5, r0
   d8dca:	2800      	cmp	r0, #0
   d8dcc:	d0f3      	beq.n	d8db6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d8dce:	6863      	ldr	r3, [r4, #4]
   d8dd0:	2b01      	cmp	r3, #1
   d8dd2:	d101      	bne.n	d8dd8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d8dd4:	f7ff fd10 	bl	d87f8 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d8dd8:	a801      	add	r0, sp, #4
   d8dda:	f7ff fe19 	bl	d8a10 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d8dde:	4628      	mov	r0, r5
   d8de0:	b003      	add	sp, #12
   d8de2:	bd30      	pop	{r4, r5, pc}

000d8de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d8de4:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d8de6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8de8:	4606      	mov	r6, r0
   d8dea:	460c      	mov	r4, r1
   d8dec:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d8dee:	d914      	bls.n	d8e1a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d8df0:	4290      	cmp	r0, r2
   d8df2:	d213      	bcs.n	d8e1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d8df4:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d8df8:	1a6c      	subs	r4, r5, r1
   d8dfa:	f1a1 0710 	sub.w	r7, r1, #16
   d8dfe:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d8e00:	42af      	cmp	r7, r5
   d8e02:	d018      	beq.n	d8e36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d8e04:	b11c      	cbz	r4, d8e0e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d8e06:	4629      	mov	r1, r5
   d8e08:	4620      	mov	r0, r4
   d8e0a:	f7fd fe05 	bl	d6a18 <_ZN6StringC1EOS_>
                end->~T();
   d8e0e:	4628      	mov	r0, r5
   d8e10:	f7fd fe12 	bl	d6a38 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d8e14:	3d10      	subs	r5, #16
   d8e16:	3c10      	subs	r4, #16
   d8e18:	e7f2      	b.n	d8e00 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d8e1a:	d00c      	beq.n	d8e36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d8e1c:	42ac      	cmp	r4, r5
   d8e1e:	d00a      	beq.n	d8e36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d8e20:	b11e      	cbz	r6, d8e2a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d8e22:	4621      	mov	r1, r4
   d8e24:	4630      	mov	r0, r6
   d8e26:	f7fd fdf7 	bl	d6a18 <_ZN6StringC1EOS_>
                p->~T();
   d8e2a:	4620      	mov	r0, r4
   d8e2c:	f7fd fe04 	bl	d6a38 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d8e30:	3410      	adds	r4, #16
   d8e32:	3610      	adds	r6, #16
   d8e34:	e7f2      	b.n	d8e1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d8e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8e38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8e38:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d8e3a:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d8e3c:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d8e3e:	dd0b      	ble.n	d8e58 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d8e40:	0130      	lsls	r0, r6, #4
   d8e42:	f7fd fd51 	bl	d68e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d8e46:	4604      	mov	r4, r0
   d8e48:	b170      	cbz	r0, d8e68 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d8e4a:	e895 0006 	ldmia.w	r5, {r1, r2}
   d8e4e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d8e52:	f7ff ffc7 	bl	d8de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d8e56:	e000      	b.n	d8e5a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d8e58:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d8e5a:	6828      	ldr	r0, [r5, #0]
   d8e5c:	f7fd fd4c 	bl	d68f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d8e60:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d8e62:	60ae      	str	r6, [r5, #8]
        return true;
   d8e64:	2001      	movs	r0, #1
   d8e66:	bd70      	pop	{r4, r5, r6, pc}
    }
   d8e68:	bd70      	pop	{r4, r5, r6, pc}

000d8e6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d8e6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8e6e:	2300      	movs	r3, #0
   d8e70:	b095      	sub	sp, #84	; 0x54
   d8e72:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d8e74:	2246      	movs	r2, #70	; 0x46
   d8e76:	6003      	str	r3, [r0, #0]
   d8e78:	6043      	str	r3, [r0, #4]
   d8e7a:	6083      	str	r3, [r0, #8]
   d8e7c:	60c3      	str	r3, [r0, #12]
   d8e7e:	6103      	str	r3, [r0, #16]
   d8e80:	6143      	str	r3, [r0, #20]
   d8e82:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d8e84:	9102      	str	r1, [sp, #8]
   d8e86:	f8da 1004 	ldr.w	r1, [sl, #4]
   d8e8a:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d8e8c:	4299      	cmp	r1, r3
   d8e8e:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8e90:	9309      	str	r3, [sp, #36]	; 0x24
   d8e92:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d8e94:	f340 809d 	ble.w	d8fd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d8e98:	a808      	add	r0, sp, #32
   d8e9a:	f7ff ffcd 	bl	d8e38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d8e9e:	2800      	cmp	r0, #0
   d8ea0:	f040 8097 	bne.w	d8fd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d8ea4:	e08e      	b.n	d8fc4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d8ea6:	4621      	mov	r1, r4
   d8ea8:	a80b      	add	r0, sp, #44	; 0x2c
   d8eaa:	f7fd fdb5 	bl	d6a18 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8eae:	a90b      	add	r1, sp, #44	; 0x2c
   d8eb0:	a80f      	add	r0, sp, #60	; 0x3c
   d8eb2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d8eb4:	f7fd fdb0 	bl	d6a18 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8eb8:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8ebc:	4299      	cmp	r1, r3
   d8ebe:	f2c0 80ce 	blt.w	d905e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d8ec2:	3101      	adds	r1, #1
   d8ec4:	a808      	add	r0, sp, #32
   d8ec6:	f7ff ffb7 	bl	d8e38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d8eca:	2800      	cmp	r0, #0
   d8ecc:	f040 80c7 	bne.w	d905e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d8ed0:	a80f      	add	r0, sp, #60	; 0x3c
   d8ed2:	f7fd fdb1 	bl	d6a38 <_ZN6StringD1Ev>
   d8ed6:	a80b      	add	r0, sp, #44	; 0x2c
   d8ed8:	f7fd fdae 	bl	d6a38 <_ZN6StringD1Ev>
   d8edc:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d8ede:	42a7      	cmp	r7, r4
   d8ee0:	d1e1      	bne.n	d8ea6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8ee2:	2600      	movs	r6, #0
   d8ee4:	960b      	str	r6, [sp, #44]	; 0x2c
   d8ee6:	960c      	str	r6, [sp, #48]	; 0x30
   d8ee8:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d8eea:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d8eec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8eee:	429e      	cmp	r6, r3
   d8ef0:	f280 80a8 	bge.w	d9044 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d8ef4:	0133      	lsls	r3, r6, #4
   d8ef6:	9a08      	ldr	r2, [sp, #32]
   d8ef8:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d8efa:	9306      	str	r3, [sp, #24]
        if (!category) {
   d8efc:	2b00      	cmp	r3, #0
   d8efe:	f000 809f 	beq.w	d9040 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d8f02:	2314      	movs	r3, #20
   d8f04:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d8f06:	f8cd 901c 	str.w	r9, [sp, #28]
   d8f0a:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d8f0c:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d8f0e:	a907      	add	r1, sp, #28
   d8f10:	a806      	add	r0, sp, #24
   d8f12:	f7ff fb2c 	bl	d856e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d8f16:	4607      	mov	r7, r0
   d8f18:	2800      	cmp	r0, #0
   d8f1a:	f000 8091 	beq.w	d9040 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d8f1e:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d8f20:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d8f22:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d8f26:	9a07      	ldr	r2, [sp, #28]
   d8f28:	4620      	mov	r0, r4
   d8f2a:	f7ff fb8d 	bl	d8648 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8f2e:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d8f32:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8f34:	f1b8 0f00 	cmp.w	r8, #0
   d8f38:	d153      	bne.n	d8fe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d8f3a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d8f3e:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d8f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8f46:	970f      	str	r7, [sp, #60]	; 0x3c
   d8f48:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d8f4c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d8f50:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d8f54:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d8f58:	6867      	ldr	r7, [r4, #4]
   d8f5a:	68a3      	ldr	r3, [r4, #8]
   d8f5c:	429f      	cmp	r7, r3
   d8f5e:	da4f      	bge.n	d9000 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d8f60:	9b00      	ldr	r3, [sp, #0]
   d8f62:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d8f66:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8f68:	2214      	movs	r2, #20
   d8f6a:	4353      	muls	r3, r2
   d8f6c:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d8f70:	fb02 b201 	mla	r2, r2, r1, fp
   d8f74:	f107 0014 	add.w	r0, r7, #20
   d8f78:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d8f7a:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d8f7c:	f7ff fe94 	bl	d8ca8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d8f80:	b1a7      	cbz	r7, d8fac <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d8f82:	9b03      	ldr	r3, [sp, #12]
   d8f84:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8f86:	f84b 2003 	str.w	r2, [fp, r3]
   d8f8a:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d8f8e:	80bb      	strh	r3, [r7, #4]
   d8f90:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d8f94:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d8f96:	f8c7 9008 	str.w	r9, [r7, #8]
   d8f9a:	f8c7 900c 	str.w	r9, [r7, #12]
   d8f9e:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d8fa2:	a911      	add	r1, sp, #68	; 0x44
   d8fa4:	f107 0008 	add.w	r0, r7, #8
   d8fa8:	f7ff fe67 	bl	d8c7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d8fac:	6863      	ldr	r3, [r4, #4]
   d8fae:	3301      	adds	r3, #1
   d8fb0:	6063      	str	r3, [r4, #4]
   d8fb2:	a811      	add	r0, sp, #68	; 0x44
   d8fb4:	f7ff fcd2 	bl	d895c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d8fb8:	f1b8 0f00 	cmp.w	r8, #0
   d8fbc:	d011      	beq.n	d8fe2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d8fbe:	a80b      	add	r0, sp, #44	; 0x2c
   d8fc0:	f7ff fccc 	bl	d895c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d8fc4:	a808      	add	r0, sp, #32
   d8fc6:	f7ff fcdd 	bl	d8984 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d8fca:	4628      	mov	r0, r5
   d8fcc:	b015      	add	sp, #84	; 0x54
   d8fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8fd2:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d8fd6:	f8da 3004 	ldr.w	r3, [sl, #4]
   d8fda:	2714      	movs	r7, #20
   d8fdc:	fb07 4703 	mla	r7, r7, r3, r4
   d8fe0:	e77d      	b.n	d8ede <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d8fe2:	6823      	ldr	r3, [r4, #0]
   d8fe4:	9a00      	ldr	r2, [sp, #0]
   d8fe6:	2414      	movs	r4, #20
   d8fe8:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d8fec:	9b06      	ldr	r3, [sp, #24]
   d8fee:	781b      	ldrb	r3, [r3, #0]
   d8ff0:	bb23      	cbnz	r3, d903c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d8ff2:	f8da 3000 	ldr.w	r3, [sl]
   d8ff6:	9a01      	ldr	r2, [sp, #4]
   d8ff8:	4413      	add	r3, r2
   d8ffa:	7c1b      	ldrb	r3, [r3, #16]
   d8ffc:	80e3      	strh	r3, [r4, #6]
   d8ffe:	e01d      	b.n	d903c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d9000:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d9002:	2f00      	cmp	r7, #0
   d9004:	dd0f      	ble.n	d9026 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d9006:	2314      	movs	r3, #20
   d9008:	fb03 f007 	mul.w	r0, r3, r7
   d900c:	9303      	str	r3, [sp, #12]
   d900e:	f7fd fc6b 	bl	d68e8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d9012:	4683      	mov	fp, r0
   d9014:	b178      	cbz	r0, d9036 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d9016:	e894 0006 	ldmia.w	r4, {r1, r2}
   d901a:	9b03      	ldr	r3, [sp, #12]
   d901c:	fb03 1202 	mla	r2, r3, r2, r1
   d9020:	f7ff fe42 	bl	d8ca8 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d9024:	e000      	b.n	d9028 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d9026:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d9028:	6820      	ldr	r0, [r4, #0]
   d902a:	f7fd fc65 	bl	d68f8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d902e:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d9032:	60a7      	str	r7, [r4, #8]
   d9034:	e794      	b.n	d8f60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d9036:	f04f 0801 	mov.w	r8, #1
   d903a:	e7ba      	b.n	d8fb2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d903c:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d903e:	e766      	b.n	d8f0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d9040:	3601      	adds	r6, #1
   d9042:	e753      	b.n	d8eec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d9044:	a908      	add	r1, sp, #32
   d9046:	4628      	mov	r0, r5
   d9048:	f7ff fe17 	bl	d8c7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d904c:	a90b      	add	r1, sp, #44	; 0x2c
   d904e:	f105 000c 	add.w	r0, r5, #12
   d9052:	f7ff fe12 	bl	d8c7a <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d9056:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d905a:	762b      	strb	r3, [r5, #24]
   d905c:	e7af      	b.n	d8fbe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d905e:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d9060:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d9062:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d9066:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d906a:	4631      	mov	r1, r6
   d906c:	f106 0010 	add.w	r0, r6, #16
   d9070:	f7ff feb8 	bl	d8de4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d9074:	b11e      	cbz	r6, d907e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d9076:	a90f      	add	r1, sp, #60	; 0x3c
   d9078:	4630      	mov	r0, r6
   d907a:	f7fd fccd 	bl	d6a18 <_ZN6StringC1EOS_>
    ++size_;
   d907e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9080:	3301      	adds	r3, #1
   d9082:	9309      	str	r3, [sp, #36]	; 0x24
   d9084:	e724      	b.n	d8ed0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d9088 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9088:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d908a:	4604      	mov	r4, r0
   d908c:	4b09      	ldr	r3, [pc, #36]	; (d90b4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d908e:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d9092:	4605      	mov	r5, r0
   d9094:	460e      	mov	r6, r1
        filter_(level, filters) {
   d9096:	a801      	add	r0, sp, #4
   d9098:	4611      	mov	r1, r2
   d909a:	f7fb fcf1 	bl	d4a80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d909e:	aa01      	add	r2, sp, #4
   d90a0:	4631      	mov	r1, r6
   d90a2:	4620      	mov	r0, r4
   d90a4:	f7ff fee1 	bl	d8e6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d90a8:	a801      	add	r0, sp, #4
   d90aa:	f7fb fbc1 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d90ae:	4628      	mov	r0, r5
   d90b0:	b004      	add	sp, #16
   d90b2:	bd70      	pop	{r4, r5, r6, pc}
   d90b4:	000db270 	.word	0x000db270

000d90b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d90b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d90ba:	460f      	mov	r7, r1
   d90bc:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d90be:	492b      	ldr	r1, [pc, #172]	; (d916c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d90c0:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d90c2:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d90c4:	4616      	mov	r6, r2
   d90c6:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d90c8:	f001 ffbe 	bl	db048 <strcmp>
   d90cc:	bb28      	cbnz	r0, d911a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d90ce:	2c00      	cmp	r4, #0
   d90d0:	d049      	beq.n	d9166 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d90d2:	4629      	mov	r1, r5
   d90d4:	a801      	add	r0, sp, #4
   d90d6:	f7ff fddd 	bl	d8c94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d90da:	4925      	ldr	r1, [pc, #148]	; (d9170 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d90dc:	2024      	movs	r0, #36	; 0x24
   d90de:	f001 fdc9 	bl	dac74 <_ZnwjRKSt9nothrow_t>
   d90e2:	4605      	mov	r5, r0
   d90e4:	b1b8      	cbz	r0, d9116 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d90e6:	a901      	add	r1, sp, #4
   d90e8:	a804      	add	r0, sp, #16
   d90ea:	f7ff fdd3 	bl	d8c94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d90ee:	a904      	add	r1, sp, #16
   d90f0:	a807      	add	r0, sp, #28
   d90f2:	f7fb fcc5 	bl	d4a80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d90f6:	aa07      	add	r2, sp, #28
   d90f8:	4631      	mov	r1, r6
   d90fa:	4628      	mov	r0, r5
   d90fc:	f7ff ffc4 	bl	d9088 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d9100:	a807      	add	r0, sp, #28
   d9102:	f7fb fb95 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9106:	4b1b      	ldr	r3, [pc, #108]	; (d9174 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d9108:	602b      	str	r3, [r5, #0]
   d910a:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d910c:	a804      	add	r0, sp, #16
   d910e:	f7fb fb8f 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9112:	4b19      	ldr	r3, [pc, #100]	; (d9178 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d9114:	602b      	str	r3, [r5, #0]
   d9116:	a801      	add	r0, sp, #4
   d9118:	e01f      	b.n	d915a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d911a:	4918      	ldr	r1, [pc, #96]	; (d917c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d911c:	4638      	mov	r0, r7
   d911e:	f001 ff93 	bl	db048 <strcmp>
   d9122:	b9f0      	cbnz	r0, d9162 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d9124:	b1fc      	cbz	r4, d9166 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d9126:	4629      	mov	r1, r5
   d9128:	a804      	add	r0, sp, #16
   d912a:	f7ff fdb3 	bl	d8c94 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d912e:	4910      	ldr	r1, [pc, #64]	; (d9170 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d9130:	2024      	movs	r0, #36	; 0x24
   d9132:	f001 fd9f 	bl	dac74 <_ZnwjRKSt9nothrow_t>
   d9136:	4605      	mov	r5, r0
   d9138:	b170      	cbz	r0, d9158 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d913a:	a904      	add	r1, sp, #16
   d913c:	a807      	add	r0, sp, #28
   d913e:	f7fb fc9f 	bl	d4a80 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d9142:	aa07      	add	r2, sp, #28
   d9144:	4631      	mov	r1, r6
   d9146:	4628      	mov	r0, r5
   d9148:	f7ff ff9e 	bl	d9088 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d914c:	a807      	add	r0, sp, #28
   d914e:	f7fb fb6f 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d9152:	4b08      	ldr	r3, [pc, #32]	; (d9174 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d9154:	602b      	str	r3, [r5, #0]
   d9156:	622c      	str	r4, [r5, #32]
   d9158:	a804      	add	r0, sp, #16
   d915a:	f7fb fb69 	bl	d4830 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d915e:	4628      	mov	r0, r5
   d9160:	e002      	b.n	d9168 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d9162:	2000      	movs	r0, #0
   d9164:	e000      	b.n	d9168 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d9166:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d9168:	b00b      	add	sp, #44	; 0x2c
   d916a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d916c:	000dc3ee 	.word	0x000dc3ee
   d9170:	000dc6af 	.word	0x000dc6af
   d9174:	000dc474 	.word	0x000dc474
   d9178:	000dc380 	.word	0x000dc380
   d917c:	000dc3f2 	.word	0x000dc3f2

000d9180 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d9180:	4b01      	ldr	r3, [pc, #4]	; (d9188 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d9182:	4a02      	ldr	r2, [pc, #8]	; (d918c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d9184:	601a      	str	r2, [r3, #0]
   d9186:	4770      	bx	lr
   d9188:	2003e40c 	.word	0x2003e40c
   d918c:	000dc403 	.word	0x000dc403

000d9190 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9194:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d9196:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d919a:	4604      	mov	r4, r0
   d919c:	460e      	mov	r6, r1
   d919e:	4617      	mov	r7, r2
   d91a0:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d91a2:	f000 fe69 	bl	d9e78 <_Z16_fetch_usbserialv>
   d91a6:	4581      	cmp	r9, r0
   d91a8:	d105      	bne.n	d91b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d91aa:	485a      	ldr	r0, [pc, #360]	; (d9314 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d91ac:	f001 fb19 	bl	da7e2 <_ZN5spark12NetworkClass9listeningEv>
   d91b0:	2800      	cmp	r0, #0
   d91b2:	f040 80ac 	bne.w	d930e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d91b6:	792b      	ldrb	r3, [r5, #4]
   d91b8:	071b      	lsls	r3, r3, #28
   d91ba:	d505      	bpl.n	d91c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d91bc:	696b      	ldr	r3, [r5, #20]
   d91be:	4a56      	ldr	r2, [pc, #344]	; (d9318 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d91c0:	6a20      	ldr	r0, [r4, #32]
   d91c2:	2100      	movs	r1, #0
   d91c4:	f7ff f985 	bl	d84d2 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d91c8:	f1b8 0f00 	cmp.w	r8, #0
   d91cc:	d00d      	beq.n	d91ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d91ce:	215b      	movs	r1, #91	; 0x5b
   d91d0:	4620      	mov	r0, r4
   d91d2:	f7ff fa2e 	bl	d8632 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d91d6:	4641      	mov	r1, r8
   d91d8:	4620      	mov	r0, r4
   d91da:	f7ff fa1c 	bl	d8616 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d91de:	6823      	ldr	r3, [r4, #0]
   d91e0:	494e      	ldr	r1, [pc, #312]	; (d931c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d91e2:	68db      	ldr	r3, [r3, #12]
   d91e4:	2202      	movs	r2, #2
   d91e6:	4620      	mov	r0, r4
   d91e8:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d91ea:	792b      	ldrb	r3, [r5, #4]
   d91ec:	07d9      	lsls	r1, r3, #31
   d91ee:	d525      	bpl.n	d923c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d91f0:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d91f4:	212f      	movs	r1, #47	; 0x2f
   d91f6:	4640      	mov	r0, r8
   d91f8:	f001 ff7c 	bl	db0f4 <strrchr>
    if (s1) {
   d91fc:	b108      	cbz	r0, d9202 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d91fe:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d9202:	4641      	mov	r1, r8
   d9204:	4620      	mov	r0, r4
   d9206:	f7ff fa06 	bl	d8616 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d920a:	792b      	ldrb	r3, [r5, #4]
   d920c:	079a      	lsls	r2, r3, #30
   d920e:	d509      	bpl.n	d9224 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d9210:	213a      	movs	r1, #58	; 0x3a
   d9212:	4620      	mov	r0, r4
   d9214:	f7ff fa0d 	bl	d8632 <_ZN5spark16StreamLogHandler5writeEc>
   d9218:	68eb      	ldr	r3, [r5, #12]
   d921a:	4a41      	ldr	r2, [pc, #260]	; (d9320 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d921c:	6a20      	ldr	r0, [r4, #32]
   d921e:	2100      	movs	r1, #0
   d9220:	f7ff f957 	bl	d84d2 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d9224:	792b      	ldrb	r3, [r5, #4]
   d9226:	f013 0f04 	tst.w	r3, #4
   d922a:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d922c:	bf18      	it	ne
   d922e:	493d      	ldrne	r1, [pc, #244]	; (d9324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d9230:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d9232:	bf08      	it	eq
   d9234:	493c      	ldreq	r1, [pc, #240]	; (d9328 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d9236:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d9238:	4620      	mov	r0, r4
   d923a:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d923c:	792b      	ldrb	r3, [r5, #4]
   d923e:	075b      	lsls	r3, r3, #29
   d9240:	d518      	bpl.n	d9274 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9242:	6929      	ldr	r1, [r5, #16]
   d9244:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d9246:	4613      	mov	r3, r2
   d9248:	f813 0b01 	ldrb.w	r0, [r3], #1
   d924c:	b138      	cbz	r0, d925e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d924e:	2820      	cmp	r0, #32
   d9250:	d101      	bne.n	d9256 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d9252:	4619      	mov	r1, r3
   d9254:	e001      	b.n	d925a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d9256:	2828      	cmp	r0, #40	; 0x28
   d9258:	d001      	beq.n	d925e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d925a:	461a      	mov	r2, r3
   d925c:	e7f3      	b.n	d9246 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d925e:	6823      	ldr	r3, [r4, #0]
   d9260:	1a52      	subs	r2, r2, r1
   d9262:	68db      	ldr	r3, [r3, #12]
   d9264:	4620      	mov	r0, r4
   d9266:	4798      	blx	r3
        write("(): ", 4);
   d9268:	6823      	ldr	r3, [r4, #0]
   d926a:	4930      	ldr	r1, [pc, #192]	; (d932c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d926c:	68db      	ldr	r3, [r3, #12]
   d926e:	2204      	movs	r2, #4
   d9270:	4620      	mov	r0, r4
   d9272:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d9274:	2100      	movs	r1, #0
   d9276:	4638      	mov	r0, r7
   d9278:	f7fd fa6a 	bl	d6750 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d927c:	4601      	mov	r1, r0
   d927e:	4620      	mov	r0, r4
   d9280:	f7ff f9c9 	bl	d8616 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d9284:	6823      	ldr	r3, [r4, #0]
   d9286:	4928      	ldr	r1, [pc, #160]	; (d9328 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d9288:	68db      	ldr	r3, [r3, #12]
   d928a:	2202      	movs	r2, #2
   d928c:	4620      	mov	r0, r4
   d928e:	4798      	blx	r3
    // Message
    if (msg) {
   d9290:	b11e      	cbz	r6, d929a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d9292:	4631      	mov	r1, r6
   d9294:	4620      	mov	r0, r4
   d9296:	f7ff f9be 	bl	d8616 <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d929a:	792b      	ldrb	r3, [r5, #4]
   d929c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d92a0:	d02d      	beq.n	d92fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d92a2:	6823      	ldr	r3, [r4, #0]
   d92a4:	4922      	ldr	r1, [pc, #136]	; (d9330 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d92a6:	68db      	ldr	r3, [r3, #12]
   d92a8:	4620      	mov	r0, r4
   d92aa:	2202      	movs	r2, #2
   d92ac:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d92ae:	792b      	ldrb	r3, [r5, #4]
   d92b0:	06d8      	lsls	r0, r3, #27
   d92b2:	d50b      	bpl.n	d92cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d92b4:	6823      	ldr	r3, [r4, #0]
   d92b6:	491f      	ldr	r1, [pc, #124]	; (d9334 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d92b8:	68db      	ldr	r3, [r3, #12]
   d92ba:	2207      	movs	r2, #7
   d92bc:	4620      	mov	r0, r4
   d92be:	4798      	blx	r3
   d92c0:	69ab      	ldr	r3, [r5, #24]
   d92c2:	4a1d      	ldr	r2, [pc, #116]	; (d9338 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d92c4:	6a20      	ldr	r0, [r4, #32]
   d92c6:	2100      	movs	r1, #0
   d92c8:	f7ff f903 	bl	d84d2 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d92cc:	792b      	ldrb	r3, [r5, #4]
   d92ce:	0699      	lsls	r1, r3, #26
   d92d0:	d511      	bpl.n	d92f6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d92d2:	06da      	lsls	r2, r3, #27
   d92d4:	d505      	bpl.n	d92e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d92d6:	6823      	ldr	r3, [r4, #0]
   d92d8:	4912      	ldr	r1, [pc, #72]	; (d9324 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d92da:	68db      	ldr	r3, [r3, #12]
   d92dc:	2202      	movs	r2, #2
   d92de:	4620      	mov	r0, r4
   d92e0:	4798      	blx	r3
            }
            write("details = ", 10);
   d92e2:	6823      	ldr	r3, [r4, #0]
   d92e4:	4915      	ldr	r1, [pc, #84]	; (d933c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d92e6:	68db      	ldr	r3, [r3, #12]
   d92e8:	4620      	mov	r0, r4
   d92ea:	220a      	movs	r2, #10
   d92ec:	4798      	blx	r3
            write(attr.details);
   d92ee:	69e9      	ldr	r1, [r5, #28]
   d92f0:	4620      	mov	r0, r4
   d92f2:	f7ff f990 	bl	d8616 <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d92f6:	215d      	movs	r1, #93	; 0x5d
   d92f8:	4620      	mov	r0, r4
   d92fa:	f7ff f99a 	bl	d8632 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d92fe:	6823      	ldr	r3, [r4, #0]
   d9300:	490f      	ldr	r1, [pc, #60]	; (d9340 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d9302:	68db      	ldr	r3, [r3, #12]
   d9304:	4620      	mov	r0, r4
   d9306:	2202      	movs	r2, #2
}
   d9308:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d930c:	4718      	bx	r3
   d930e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9312:	bf00      	nop
   d9314:	2003e740 	.word	0x2003e740
   d9318:	000dc407 	.word	0x000dc407
   d931c:	000dc40e 	.word	0x000dc40e
   d9320:	000dba67 	.word	0x000dba67
   d9324:	000dc411 	.word	0x000dc411
   d9328:	000dc416 	.word	0x000dc416
   d932c:	000dc414 	.word	0x000dc414
   d9330:	000dc419 	.word	0x000dc419
   d9334:	000dc41c 	.word	0x000dc41c
   d9338:	000dc424 	.word	0x000dc424
   d933c:	000dc427 	.word	0x000dc427
   d9340:	000dc432 	.word	0x000dc432

000d9344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9348:	b085      	sub	sp, #20
   d934a:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d934e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d9350:	4606      	mov	r6, r0
   d9352:	460f      	mov	r7, r1
   d9354:	4691      	mov	r9, r2
   d9356:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d9358:	f000 fd8e 	bl	d9e78 <_Z16_fetch_usbserialv>
   d935c:	4580      	cmp	r8, r0
   d935e:	d105      	bne.n	d936c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d9360:	484a      	ldr	r0, [pc, #296]	; (d948c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d9362:	f001 fa3e 	bl	da7e2 <_ZN5spark12NetworkClass9listeningEv>
   d9366:	2800      	cmp	r0, #0
   d9368:	f040 808c 	bne.w	d9484 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d936c:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d936e:	4a48      	ldr	r2, [pc, #288]	; (d9490 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d9370:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d9372:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d9376:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d9378:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d937a:	f88d 8008 	strb.w	r8, [sp, #8]
   d937e:	f001 fb74 	bl	daa6a <_ZN5spark10JSONWriter11beginObjectEv>
   d9382:	4641      	mov	r1, r8
   d9384:	4648      	mov	r0, r9
   d9386:	f7fd f9e3 	bl	d6750 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d938a:	4942      	ldr	r1, [pc, #264]	; (d9494 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d938c:	4680      	mov	r8, r0
   d938e:	2201      	movs	r2, #1
   d9390:	a801      	add	r0, sp, #4
   d9392:	f001 fbef 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d9396:	4641      	mov	r1, r8
   d9398:	f7ff f92d 	bl	d85f6 <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d939c:	b13f      	cbz	r7, d93ae <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d939e:	493e      	ldr	r1, [pc, #248]	; (d9498 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d93a0:	2201      	movs	r2, #1
   d93a2:	a801      	add	r0, sp, #4
   d93a4:	f001 fbe6 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d93a8:	4639      	mov	r1, r7
   d93aa:	f7ff f924 	bl	d85f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d93ae:	b13d      	cbz	r5, d93c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d93b0:	493a      	ldr	r1, [pc, #232]	; (d949c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d93b2:	2201      	movs	r2, #1
   d93b4:	a801      	add	r0, sp, #4
   d93b6:	f001 fbdd 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d93ba:	4629      	mov	r1, r5
   d93bc:	f7ff f91b 	bl	d85f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d93c0:	7923      	ldrb	r3, [r4, #4]
   d93c2:	07df      	lsls	r7, r3, #31
   d93c4:	d50e      	bpl.n	d93e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d93c6:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d93c8:	212f      	movs	r1, #47	; 0x2f
   d93ca:	4628      	mov	r0, r5
   d93cc:	f001 fe92 	bl	db0f4 <strrchr>
    if (s1) {
   d93d0:	b100      	cbz	r0, d93d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d93d2:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d93d4:	4932      	ldr	r1, [pc, #200]	; (d94a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d93d6:	2201      	movs	r2, #1
   d93d8:	a801      	add	r0, sp, #4
   d93da:	f001 fbcb 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d93de:	4629      	mov	r1, r5
   d93e0:	f7ff f909 	bl	d85f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d93e4:	7923      	ldrb	r3, [r4, #4]
   d93e6:	079d      	lsls	r5, r3, #30
   d93e8:	d507      	bpl.n	d93fa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d93ea:	492e      	ldr	r1, [pc, #184]	; (d94a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d93ec:	2202      	movs	r2, #2
   d93ee:	a801      	add	r0, sp, #4
   d93f0:	f001 fbc0 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d93f4:	68e1      	ldr	r1, [r4, #12]
   d93f6:	f001 fb45 	bl	daa84 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d93fa:	7923      	ldrb	r3, [r4, #4]
   d93fc:	0758      	lsls	r0, r3, #29
   d93fe:	d516      	bpl.n	d942e <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d9400:	6925      	ldr	r5, [r4, #16]
   d9402:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d9404:	463b      	mov	r3, r7
   d9406:	f813 2b01 	ldrb.w	r2, [r3], #1
   d940a:	b13a      	cbz	r2, d941c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d940c:	2a20      	cmp	r2, #32
   d940e:	d101      	bne.n	d9414 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d9410:	461d      	mov	r5, r3
   d9412:	e001      	b.n	d9418 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d9414:	2a28      	cmp	r2, #40	; 0x28
   d9416:	d001      	beq.n	d941c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d9418:	461f      	mov	r7, r3
   d941a:	e7f3      	b.n	d9404 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d941c:	2202      	movs	r2, #2
   d941e:	4922      	ldr	r1, [pc, #136]	; (d94a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d9420:	a801      	add	r0, sp, #4
   d9422:	f001 fba7 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d9426:	1b7a      	subs	r2, r7, r5
   d9428:	4629      	mov	r1, r5
   d942a:	f001 fbb2 	bl	dab92 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d942e:	7923      	ldrb	r3, [r4, #4]
   d9430:	0719      	lsls	r1, r3, #28
   d9432:	d507      	bpl.n	d9444 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d9434:	491d      	ldr	r1, [pc, #116]	; (d94ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d9436:	2201      	movs	r2, #1
   d9438:	a801      	add	r0, sp, #4
   d943a:	f001 fb9b 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d943e:	6961      	ldr	r1, [r4, #20]
   d9440:	f001 fb32 	bl	daaa8 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d9444:	7923      	ldrb	r3, [r4, #4]
   d9446:	06da      	lsls	r2, r3, #27
   d9448:	d508      	bpl.n	d945c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d944a:	2204      	movs	r2, #4
   d944c:	4918      	ldr	r1, [pc, #96]	; (d94b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d944e:	eb0d 0002 	add.w	r0, sp, r2
   d9452:	f001 fb8f 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d9456:	69a1      	ldr	r1, [r4, #24]
   d9458:	f001 fb14 	bl	daa84 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d945c:	7923      	ldrb	r3, [r4, #4]
   d945e:	069b      	lsls	r3, r3, #26
   d9460:	d507      	bpl.n	d9472 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d9462:	4914      	ldr	r1, [pc, #80]	; (d94b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d9464:	2206      	movs	r2, #6
   d9466:	a801      	add	r0, sp, #4
   d9468:	f001 fb84 	bl	dab74 <_ZN5spark10JSONWriter4nameEPKcj>
   d946c:	69e1      	ldr	r1, [r4, #28]
   d946e:	f7ff f8c2 	bl	d85f6 <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d9472:	a801      	add	r0, sp, #4
   d9474:	f001 fae3 	bl	daa3e <_ZN5spark10JSONWriter9endObjectEv>
   d9478:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d947a:	490f      	ldr	r1, [pc, #60]	; (d94b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d947c:	6803      	ldr	r3, [r0, #0]
   d947e:	2202      	movs	r2, #2
   d9480:	68db      	ldr	r3, [r3, #12]
   d9482:	4798      	blx	r3
}
   d9484:	b005      	add	sp, #20
   d9486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d948a:	bf00      	nop
   d948c:	2003e740 	.word	0x2003e740
   d9490:	000dc368 	.word	0x000dc368
   d9494:	000dc39a 	.word	0x000dc39a
   d9498:	000dc3ad 	.word	0x000dc3ad
   d949c:	000db57d 	.word	0x000db57d
   d94a0:	000db558 	.word	0x000db558
   d94a4:	000dc435 	.word	0x000dc435
   d94a8:	000dc438 	.word	0x000dc438
   d94ac:	000dc3c2 	.word	0x000dc3c2
   d94b0:	000dc43b 	.word	0x000dc43b
   d94b4:	000dc440 	.word	0x000dc440
   d94b8:	000dc432 	.word	0x000dc432

000d94bc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d94bc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d94be:	2000      	movs	r0, #0
   d94c0:	f7fd fa02 	bl	d68c8 <spark_sync_time_pending>
   d94c4:	b128      	cbz	r0, d94d2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d94c6:	f7fd f9ef 	bl	d68a8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d94ca:	f080 0001 	eor.w	r0, r0, #1
   d94ce:	b2c0      	uxtb	r0, r0
   d94d0:	bd08      	pop	{r3, pc}
   d94d2:	2001      	movs	r0, #1
    }
   d94d4:	bd08      	pop	{r3, pc}

000d94d6 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d94d6:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d94d8:	2000      	movs	r0, #0
   d94da:	f7fc ff77 	bl	d63cc <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d94de:	4604      	mov	r4, r0
   d94e0:	b968      	cbnz	r0, d94fe <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d94e2:	f7fd f945 	bl	d6770 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d94e6:	2801      	cmp	r0, #1
   d94e8:	d10b      	bne.n	d9502 <_ZN9TimeClass7isValidEv+0x2c>
   d94ea:	4620      	mov	r0, r4
   d94ec:	f7fd f960 	bl	d67b0 <system_thread_get_state>
   d94f0:	b938      	cbnz	r0, d9502 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d94f2:	f7ff ffe3 	bl	d94bc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d94f6:	b930      	cbnz	r0, d9506 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d94f8:	f7fd f9ce 	bl	d6898 <spark_process>
   d94fc:	e7f9      	b.n	d94f2 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d94fe:	2001      	movs	r0, #1
   d9500:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d9502:	2000      	movs	r0, #0
   d9504:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d9506:	f7ff ffd9 	bl	d94bc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d950a:	2000      	movs	r0, #0
   d950c:	f7fc ff5e 	bl	d63cc <HAL_RTC_Time_Is_Valid>
   d9510:	3000      	adds	r0, #0
   d9512:	bf18      	it	ne
   d9514:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d9516:	bd10      	pop	{r4, pc}

000d9518 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d9518:	b508      	push	{r3, lr}
    (void)isValid();
   d951a:	f7ff ffdc 	bl	d94d6 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d951e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d9522:	f7fc bf4b 	b.w	d63bc <HAL_RTC_Get_UnixTime>
	...

000d9528 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d9528:	4b02      	ldr	r3, [pc, #8]	; (d9534 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d952a:	681a      	ldr	r2, [r3, #0]
   d952c:	4b02      	ldr	r3, [pc, #8]	; (d9538 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d952e:	601a      	str	r2, [r3, #0]
   d9530:	4770      	bx	lr
   d9532:	bf00      	nop
   d9534:	2003d858 	.word	0x2003d858
   d9538:	2003e410 	.word	0x2003e410

000d953c <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d953c:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d953e:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d9540:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d9542:	b113      	cbz	r3, d954a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9544:	2203      	movs	r2, #3
   d9546:	4601      	mov	r1, r0
   d9548:	4798      	blx	r3
    }
   d954a:	4620      	mov	r0, r4
   d954c:	bd10      	pop	{r4, pc}

000d954e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d954e:	b510      	push	{r4, lr}
   d9550:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9552:	f7ff fff3 	bl	d953c <_ZNSt14_Function_baseD1Ev>
   d9556:	4620      	mov	r0, r4
   d9558:	bd10      	pop	{r4, pc}

000d955a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d955a:	b513      	push	{r0, r1, r4, lr}
   d955c:	460b      	mov	r3, r1
   d955e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9560:	c803      	ldmia	r0, {r0, r1}
   d9562:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d9566:	e893 0003 	ldmia.w	r3, {r0, r1}
   d956a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d956e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d9572:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d9576:	b002      	add	sp, #8
   d9578:	bd10      	pop	{r4, pc}
	...

000d957c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d957c:	4803      	ldr	r0, [pc, #12]	; (d958c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d957e:	4a04      	ldr	r2, [pc, #16]	; (d9590 <_GLOBAL__sub_I_RGB+0x14>)
   d9580:	4904      	ldr	r1, [pc, #16]	; (d9594 <_GLOBAL__sub_I_RGB+0x18>)
   d9582:	2300      	movs	r3, #0
   d9584:	6083      	str	r3, [r0, #8]
   d9586:	f001 bb66 	b.w	dac56 <__aeabi_atexit>
   d958a:	bf00      	nop
   d958c:	2003e414 	.word	0x2003e414
   d9590:	2003d8c4 	.word	0x2003d8c4
   d9594:	000d954f 	.word	0x000d954f

000d9598 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d9598:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d959a:	4b0c      	ldr	r3, [pc, #48]	; (d95cc <serialEventRun+0x34>)
   d959c:	b133      	cbz	r3, d95ac <serialEventRun+0x14>
   d959e:	f000 fc6b 	bl	d9e78 <_Z16_fetch_usbserialv>
   d95a2:	6803      	ldr	r3, [r0, #0]
   d95a4:	691b      	ldr	r3, [r3, #16]
   d95a6:	4798      	blx	r3
   d95a8:	2800      	cmp	r0, #0
   d95aa:	dc09      	bgt.n	d95c0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d95ac:	4b08      	ldr	r3, [pc, #32]	; (d95d0 <serialEventRun+0x38>)
   d95ae:	b163      	cbz	r3, d95ca <serialEventRun+0x32>
   d95b0:	f000 fcea 	bl	d9f88 <_Z22__fetch_global_Serial1v>
   d95b4:	6803      	ldr	r3, [r0, #0]
   d95b6:	691b      	ldr	r3, [r3, #16]
   d95b8:	4798      	blx	r3
   d95ba:	2800      	cmp	r0, #0
   d95bc:	dc03      	bgt.n	d95c6 <serialEventRun+0x2e>
   d95be:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d95c0:	f3af 8000 	nop.w
   d95c4:	e7f2      	b.n	d95ac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d95c6:	f3af 8000 	nop.w
   d95ca:	bd08      	pop	{r3, pc}
	...

000d95d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d95d4:	b508      	push	{r3, lr}
	serialEventRun();
   d95d6:	f7ff ffdf 	bl	d9598 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d95da:	f7fc fee7 	bl	d63ac <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d95de:	4b01      	ldr	r3, [pc, #4]	; (d95e4 <_post_loop+0x10>)
   d95e0:	6018      	str	r0, [r3, #0]
   d95e2:	bd08      	pop	{r3, pc}
   d95e4:	2003e748 	.word	0x2003e748

000d95e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d95e8:	4802      	ldr	r0, [pc, #8]	; (d95f4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d95ea:	4a03      	ldr	r2, [pc, #12]	; (d95f8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d95ec:	4903      	ldr	r1, [pc, #12]	; (d95fc <_Z33system_initialize_user_backup_ramv+0x14>)
   d95ee:	1a12      	subs	r2, r2, r0
   d95f0:	f001 bcbb 	b.w	daf6a <memcpy>
   d95f4:	2003f400 	.word	0x2003f400
   d95f8:	2003f404 	.word	0x2003f404
   d95fc:	000dc860 	.word	0x000dc860

000d9600 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d9600:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9602:	2300      	movs	r3, #0
   d9604:	9300      	str	r3, [sp, #0]
   d9606:	461a      	mov	r2, r3
   d9608:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d960c:	f7fd f8e2 	bl	d67d4 <system_ctrl_set_result>
}
   d9610:	b003      	add	sp, #12
   d9612:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9618 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d9618:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d961a:	8843      	ldrh	r3, [r0, #2]
   d961c:	2b0a      	cmp	r3, #10
   d961e:	d008      	beq.n	d9632 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d9620:	2b50      	cmp	r3, #80	; 0x50
   d9622:	d109      	bne.n	d9638 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d9624:	4b09      	ldr	r3, [pc, #36]	; (d964c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d9626:	681b      	ldr	r3, [r3, #0]
   d9628:	b13b      	cbz	r3, d963a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d962a:	b003      	add	sp, #12
   d962c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d9630:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d9632:	f7ff ffe5 	bl	d9600 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d9636:	e006      	b.n	d9646 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d9638:	2300      	movs	r3, #0
   d963a:	9300      	str	r3, [sp, #0]
   d963c:	461a      	mov	r2, r3
   d963e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d9642:	f7fd f8c7 	bl	d67d4 <system_ctrl_set_result>
        break;
    }
}
   d9646:	b003      	add	sp, #12
   d9648:	f85d fb04 	ldr.w	pc, [sp], #4
   d964c:	2003e424 	.word	0x2003e424

000d9650 <module_user_init_hook>:

void module_user_init_hook()
{
   d9650:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d9652:	4c10      	ldr	r4, [pc, #64]	; (d9694 <module_user_init_hook+0x44>)
   d9654:	4d10      	ldr	r5, [pc, #64]	; (d9698 <module_user_init_hook+0x48>)
   d9656:	6823      	ldr	r3, [r4, #0]
   d9658:	42ab      	cmp	r3, r5
   d965a:	4b10      	ldr	r3, [pc, #64]	; (d969c <module_user_init_hook+0x4c>)
   d965c:	bf0c      	ite	eq
   d965e:	2201      	moveq	r2, #1
   d9660:	2200      	movne	r2, #0
   d9662:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d9664:	d002      	beq.n	d966c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d9666:	f7ff ffbf 	bl	d95e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d966a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d966c:	f7fc fe8e 	bl	d638c <HAL_RNG_GetRandomNumber>
   d9670:	4604      	mov	r4, r0
    srand(seed);
   d9672:	f001 fca9 	bl	dafc8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d9676:	4b0a      	ldr	r3, [pc, #40]	; (d96a0 <module_user_init_hook+0x50>)
   d9678:	b113      	cbz	r3, d9680 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d967a:	4620      	mov	r0, r4
   d967c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d9680:	2100      	movs	r1, #0
   d9682:	4807      	ldr	r0, [pc, #28]	; (d96a0 <module_user_init_hook+0x50>)
   d9684:	f7fd f928 	bl	d68d8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9688:	2100      	movs	r1, #0
   d968a:	4806      	ldr	r0, [pc, #24]	; (d96a4 <module_user_init_hook+0x54>)
}
   d968c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d9690:	f7fd b896 	b.w	d67c0 <system_ctrl_set_app_request_handler>
   d9694:	2003f400 	.word	0x2003f400
   d9698:	9a271c1e 	.word	0x9a271c1e
   d969c:	2003e428 	.word	0x2003e428
   d96a0:	00000000 	.word	0x00000000
   d96a4:	000d9619 	.word	0x000d9619

000d96a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d96a8:	4770      	bx	lr

000d96aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d96aa:	2000      	movs	r0, #0
   d96ac:	4770      	bx	lr

000d96ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d96ae:	b510      	push	{r4, lr}
   d96b0:	2110      	movs	r1, #16
   d96b2:	4604      	mov	r4, r0
   d96b4:	f001 fadc 	bl	dac70 <_ZdlPvj>
   d96b8:	4620      	mov	r0, r4
   d96ba:	bd10      	pop	{r4, pc}

000d96bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d96bc:	b508      	push	{r3, lr}
      { delete this; }
   d96be:	b108      	cbz	r0, d96c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d96c0:	f7ff fff5 	bl	d96ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d96c4:	bd08      	pop	{r3, pc}

000d96c6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d96c6:	2200      	movs	r2, #0
   d96c8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d96ca:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d96cc:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d96d0:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d96d2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d96d6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d96d8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d96da:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d96dc:	680c      	ldr	r4, [r1, #0]
   d96de:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d96e0:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d96e2:	bd10      	pop	{r4, pc}

000d96e4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d96e4:	b510      	push	{r4, lr}
   d96e6:	4604      	mov	r4, r0
    free((void*)msg_);
   d96e8:	6800      	ldr	r0, [r0, #0]
   d96ea:	f7fd f905 	bl	d68f8 <free>
}
   d96ee:	4620      	mov	r0, r4
   d96f0:	bd10      	pop	{r4, pc}

000d96f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d96f2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d96f4:	68c4      	ldr	r4, [r0, #12]
   d96f6:	b1f4      	cbz	r4, d9736 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d96f8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d96fa:	2b02      	cmp	r3, #2
   d96fc:	d103      	bne.n	d9706 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d96fe:	f104 000c 	add.w	r0, r4, #12
   d9702:	f7ff ffef 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d9706:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d9708:	b135      	cbz	r5, d9718 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d970a:	4628      	mov	r0, r5
   d970c:	f7ff ff16 	bl	d953c <_ZNSt14_Function_baseD1Ev>
   d9710:	2110      	movs	r1, #16
   d9712:	4628      	mov	r0, r5
   d9714:	f001 faac 	bl	dac70 <_ZdlPvj>
   d9718:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d971a:	b135      	cbz	r5, d972a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d971c:	4628      	mov	r0, r5
   d971e:	f7ff ff0d 	bl	d953c <_ZNSt14_Function_baseD1Ev>
   d9722:	2110      	movs	r1, #16
   d9724:	4628      	mov	r0, r5
   d9726:	f001 faa3 	bl	dac70 <_ZdlPvj>
   d972a:	4620      	mov	r0, r4
   d972c:	2114      	movs	r1, #20
   d972e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9732:	f001 ba9d 	b.w	dac70 <_ZdlPvj>
   d9736:	bd38      	pop	{r3, r4, r5, pc}

000d9738 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d9738:	b510      	push	{r4, lr}
   d973a:	b088      	sub	sp, #32
   d973c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d973e:	4668      	mov	r0, sp
   d9740:	f7fd f9c1 	bl	d6ac6 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
   d9744:	4669      	mov	r1, sp
   d9746:	a804      	add	r0, sp, #16
   d9748:	f7fd f9df 	bl	d6b0a <_ZN6StringC1ERKS_>
   d974c:	a804      	add	r0, sp, #16
   d974e:	47a0      	blx	r4
   d9750:	4604      	mov	r4, r0
   d9752:	a804      	add	r0, sp, #16
   d9754:	f7fd f970 	bl	d6a38 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d9758:	4668      	mov	r0, sp
   d975a:	f7fd f96d 	bl	d6a38 <_ZN6StringD1Ev>
    return (*fn)(p);
}
   d975e:	4620      	mov	r0, r4
   d9760:	b008      	add	sp, #32
   d9762:	bd10      	pop	{r4, pc}

000d9764 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d9764:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d9766:	2410      	movs	r4, #16
   d9768:	b085      	sub	sp, #20
   d976a:	4607      	mov	r7, r0
   d976c:	460e      	mov	r6, r1
   d976e:	4615      	mov	r5, r2
   d9770:	2100      	movs	r1, #0
   d9772:	4622      	mov	r2, r4
   d9774:	4668      	mov	r0, sp
   d9776:	f001 fc1e 	bl	dafb6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d977a:	2200      	movs	r2, #0
   d977c:	4669      	mov	r1, sp
   d977e:	4610      	mov	r0, r2
         size = sizeof(*this);
   d9780:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
   d9784:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
   d9786:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
   d9788:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d978a:	f7fd f87d 	bl	d6888 <spark_function>
}
   d978e:	b005      	add	sp, #20
   d9790:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9792 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d9792:	b513      	push	{r0, r1, r4, lr}
   d9794:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d9796:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d979a:	2300      	movs	r3, #0
   d979c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d979e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d97a0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d97a2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d97a4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d97a6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d97a8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d97aa:	f7fb f803 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d97ae:	4620      	mov	r0, r4
   d97b0:	b002      	add	sp, #8
   d97b2:	bd10      	pop	{r4, pc}

000d97b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d97b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d97b6:	460c      	mov	r4, r1
   d97b8:	ad02      	add	r5, sp, #8
   d97ba:	f854 3b04 	ldr.w	r3, [r4], #4
   d97be:	f845 3d08 	str.w	r3, [r5, #-8]!
   d97c2:	4606      	mov	r6, r0
   d97c4:	460f      	mov	r7, r1
   d97c6:	a801      	add	r0, sp, #4
   d97c8:	4621      	mov	r1, r4
   d97ca:	f7fd ffe1 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d97ce:	4629      	mov	r1, r5
   d97d0:	4630      	mov	r0, r6
   d97d2:	f7ff ffde 	bl	d9792 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d97d6:	a801      	add	r0, sp, #4
   d97d8:	f7fa ffec 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d97dc:	4620      	mov	r0, r4
   d97de:	f7fa ffe9 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d97e2:	4638      	mov	r0, r7
   d97e4:	2108      	movs	r1, #8
   d97e6:	f001 fa43 	bl	dac70 <_ZdlPvj>
        return p;
    }
   d97ea:	4630      	mov	r0, r6
   d97ec:	b003      	add	sp, #12
   d97ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d97f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d97f0:	b538      	push	{r3, r4, r5, lr}
   d97f2:	2300      	movs	r3, #0
   d97f4:	4604      	mov	r4, r0
   d97f6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d97f8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d97fa:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d97fc:	f7fa fc4b 	bl	d4096 <_Znwj>
   d9800:	b128      	cbz	r0, d980e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d9802:	2301      	movs	r3, #1
   d9804:	6043      	str	r3, [r0, #4]
   d9806:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d9808:	4b02      	ldr	r3, [pc, #8]	; (d9814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d980a:	6003      	str	r3, [r0, #0]
   d980c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d980e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d9810:	4620      	mov	r0, r4
   d9812:	bd38      	pop	{r3, r4, r5, pc}
   d9814:	000dc4e8 	.word	0x000dc4e8

000d9818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9818:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d981a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d981c:	b90a      	cbnz	r2, d9822 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d981e:	f001 fa38 	bl	dac92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9822:	68c3      	ldr	r3, [r0, #12]
    }
   d9824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9828:	4718      	bx	r3

000d982a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d982a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d982c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d982e:	f100 0110 	add.w	r1, r0, #16
   d9832:	f7ff fff1 	bl	d9818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d9836:	bd08      	pop	{r3, pc}

000d9838 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9838:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d983a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d983c:	b90a      	cbnz	r2, d9842 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d983e:	f001 fa28 	bl	dac92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9842:	68c3      	ldr	r3, [r0, #12]
    }
   d9844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9848:	4718      	bx	r3

000d984a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d984a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d984c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d984e:	f100 0110 	add.w	r1, r0, #16
   d9852:	f7ff fff1 	bl	d9838 <_ZNKSt8functionIFvRKbEEclES1_>
   d9856:	bd08      	pop	{r3, pc}

000d9858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9858:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d985a:	2300      	movs	r3, #0
   d985c:	6083      	str	r3, [r0, #8]
   d985e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9860:	4604      	mov	r4, r0
   d9862:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d9864:	b12b      	cbz	r3, d9872 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9866:	2202      	movs	r2, #2
   d9868:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d986a:	68eb      	ldr	r3, [r5, #12]
   d986c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d986e:	68ab      	ldr	r3, [r5, #8]
   d9870:	60a3      	str	r3, [r4, #8]
	}
    }
   d9872:	4620      	mov	r0, r4
   d9874:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d9878:	b5f0      	push	{r4, r5, r6, r7, lr}
   d987a:	b089      	sub	sp, #36	; 0x24
   d987c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d987e:	4668      	mov	r0, sp
   d9880:	f7ff ff21 	bl	d96c6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d9884:	2300      	movs	r3, #0
   d9886:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d988a:	f04f 0202 	mov.w	r2, #2
   d988e:	e8d4 3f4f 	ldrexb	r3, [r4]
   d9892:	2b00      	cmp	r3, #0
   d9894:	d103      	bne.n	d989e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d9896:	e8c4 2f41 	strexb	r1, r2, [r4]
   d989a:	2900      	cmp	r1, #0
   d989c:	d1f7      	bne.n	d988e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d989e:	d002      	beq.n	d98a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d98a0:	f88d 3008 	strb.w	r3, [sp, #8]
   d98a4:	e063      	b.n	d996e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d98a6:	f114 050c 	adds.w	r5, r4, #12
   d98aa:	d003      	beq.n	d98b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d98ac:	4669      	mov	r1, sp
   d98ae:	4628      	mov	r0, r5
   d98b0:	f7ff ff09 	bl	d96c6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d98b4:	f3bf 8f5f 	dmb	sy
   d98b8:	2301      	movs	r3, #1
   d98ba:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d98bc:	2000      	movs	r0, #0
   d98be:	f104 0308 	add.w	r3, r4, #8
   d98c2:	f3bf 8f5f 	dmb	sy
   d98c6:	e853 6f00 	ldrex	r6, [r3]
   d98ca:	e843 0200 	strex	r2, r0, [r3]
   d98ce:	2a00      	cmp	r2, #0
   d98d0:	d1f9      	bne.n	d98c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d98d2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d98d6:	2e00      	cmp	r6, #0
   d98d8:	d049      	beq.n	d996e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d98da:	f7fc ff59 	bl	d6790 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d98de:	b120      	cbz	r0, d98ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d98e0:	4629      	mov	r1, r5
   d98e2:	4630      	mov	r0, r6
   d98e4:	f7ff ff98 	bl	d9818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d98e8:	e03a      	b.n	d9960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d98ea:	4631      	mov	r1, r6
   d98ec:	a802      	add	r0, sp, #8
   d98ee:	f7ff ffb3 	bl	d9858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d98f2:	68e0      	ldr	r0, [r4, #12]
   d98f4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d98f8:	b108      	cbz	r0, d98fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d98fa:	f001 fbb7 	bl	db06c <strdup>
   d98fe:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9900:	2010      	movs	r0, #16
   d9902:	f8ad 501c 	strh.w	r5, [sp, #28]
   d9906:	f7fa fbc6 	bl	d4096 <_Znwj>
   d990a:	4605      	mov	r5, r0
   d990c:	b1e8      	cbz	r0, d994a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d990e:	2700      	movs	r7, #0
   d9910:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9912:	2018      	movs	r0, #24
   d9914:	f7fa fbbf 	bl	d4096 <_Znwj>
   d9918:	4604      	mov	r4, r0
   d991a:	b188      	cbz	r0, d9940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d991c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d991e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9920:	a802      	add	r0, sp, #8
   d9922:	f7ff fe1a 	bl	d955a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9926:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9928:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d992a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d992c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d992e:	9204      	str	r2, [sp, #16]
   d9930:	a906      	add	r1, sp, #24
   d9932:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9934:	60e3      	str	r3, [r4, #12]
   d9936:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d993a:	9205      	str	r2, [sp, #20]
   d993c:	f7ff fec3 	bl	d96c6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9940:	4b0d      	ldr	r3, [pc, #52]	; (d9978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d9942:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9944:	4b0d      	ldr	r3, [pc, #52]	; (d997c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9946:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d9948:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d994a:	a806      	add	r0, sp, #24
   d994c:	f7ff feca 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9950:	a802      	add	r0, sp, #8
   d9952:	f7ff fdf3 	bl	d953c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9956:	2200      	movs	r2, #0
   d9958:	4629      	mov	r1, r5
   d995a:	4809      	ldr	r0, [pc, #36]	; (d9980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d995c:	f7fc ff20 	bl	d67a0 <application_thread_invoke>
   d9960:	4630      	mov	r0, r6
   d9962:	f7ff fdeb 	bl	d953c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d9966:	2110      	movs	r1, #16
   d9968:	4630      	mov	r0, r6
   d996a:	f001 f981 	bl	dac70 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d996e:	4668      	mov	r0, sp
   d9970:	f7ff feb8 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
    }
   d9974:	b009      	add	sp, #36	; 0x24
   d9976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9978:	000d982b 	.word	0x000d982b
   d997c:	000d9aa1 	.word	0x000d9aa1
   d9980:	000d9fd5 	.word	0x000d9fd5

000d9984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d9984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9988:	b08b      	sub	sp, #44	; 0x2c
   d998a:	4606      	mov	r6, r0
   d998c:	460f      	mov	r7, r1
   d998e:	4690      	mov	r8, r2
   d9990:	4699      	mov	r9, r3
   d9992:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d9996:	f7fc ff87 	bl	d68a8 <spark_cloud_flag_connected>
   d999a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d999c:	4683      	mov	fp, r0
   d999e:	bb30      	cbnz	r0, d99ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d99a0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d99a4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d99a6:	a905      	add	r1, sp, #20
   d99a8:	4628      	mov	r0, r5
   d99aa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d99ae:	f7ff fe8a 	bl	d96c6 <_ZN8particle5ErrorC1EOS0_>
   d99b2:	2014      	movs	r0, #20
   d99b4:	f7fa fb6f 	bl	d4096 <_Znwj>
   d99b8:	4604      	mov	r4, r0
   d99ba:	b158      	cbz	r0, d99d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d99bc:	2302      	movs	r3, #2
   d99be:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d99c0:	2301      	movs	r3, #1
   d99c2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d99c4:	f8c0 b004 	str.w	fp, [r0, #4]
   d99c8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d99cc:	4629      	mov	r1, r5
   d99ce:	300c      	adds	r0, #12
   d99d0:	f7ff fe79 	bl	d96c6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d99d4:	4630      	mov	r0, r6
   d99d6:	4621      	mov	r1, r4
   d99d8:	f840 4b04 	str.w	r4, [r0], #4
   d99dc:	f7ff ff08 	bl	d97f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d99e0:	4628      	mov	r0, r5
   d99e2:	f7ff fe7f 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d99e6:	a805      	add	r0, sp, #20
   d99e8:	f7ff fe7c 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
   d99ec:	e052      	b.n	d9a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d99ee:	2400      	movs	r4, #0
   d99f0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d99f2:	2014      	movs	r0, #20
   d99f4:	606c      	str	r4, [r5, #4]
   d99f6:	60ac      	str	r4, [r5, #8]
   d99f8:	9307      	str	r3, [sp, #28]
   d99fa:	f7fa fb4c 	bl	d4096 <_Znwj>
   d99fe:	4601      	mov	r1, r0
   d9a00:	b118      	cbz	r0, d9a0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d9a02:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d9a04:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d9a06:	6044      	str	r4, [r0, #4]
   d9a08:	6084      	str	r4, [r0, #8]
   d9a0a:	a804      	add	r0, sp, #16
   d9a0c:	9103      	str	r1, [sp, #12]
   d9a0e:	f7ff feef 	bl	d97f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d9a12:	4b22      	ldr	r3, [pc, #136]	; (d9a9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d9a14:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d9a16:	2008      	movs	r0, #8
   d9a18:	f7fa fb3d 	bl	d4096 <_Znwj>
   d9a1c:	4604      	mov	r4, r0
   d9a1e:	b128      	cbz	r0, d9a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d9a20:	9b03      	ldr	r3, [sp, #12]
   d9a22:	f840 3b04 	str.w	r3, [r0], #4
   d9a26:	a904      	add	r1, sp, #16
   d9a28:	f7fd feb2 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9a2c:	9500      	str	r5, [sp, #0]
   d9a2e:	fa5f f38a 	uxtb.w	r3, sl
   d9a32:	464a      	mov	r2, r9
   d9a34:	4641      	mov	r1, r8
   d9a36:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d9a38:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d9a3a:	f7fc ff3d 	bl	d68b8 <spark_send_event>
   d9a3e:	b920      	cbnz	r0, d9a4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d9a40:	9b03      	ldr	r3, [sp, #12]
   d9a42:	785b      	ldrb	r3, [r3, #1]
   d9a44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d9a48:	b183      	cbz	r3, d9a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d9a4a:	9b03      	ldr	r3, [sp, #12]
   d9a4c:	9305      	str	r3, [sp, #20]
   d9a4e:	a904      	add	r1, sp, #16
   d9a50:	a806      	add	r0, sp, #24
   d9a52:	f7fd fe9d 	bl	d7790 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d9a56:	a905      	add	r1, sp, #20
   d9a58:	4630      	mov	r0, r6
   d9a5a:	f7ff fe9a 	bl	d9792 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d9a5e:	a806      	add	r0, sp, #24
   d9a60:	f7fa fea8 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9a64:	a804      	add	r0, sp, #16
   d9a66:	f7fa fea5 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9a6a:	e013      	b.n	d9a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d9a6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d9a70:	a905      	add	r1, sp, #20
   d9a72:	a803      	add	r0, sp, #12
   d9a74:	9205      	str	r2, [sp, #20]
   d9a76:	f8ad 3018 	strh.w	r3, [sp, #24]
   d9a7a:	f7ff fefd 	bl	d9878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9a7e:	a805      	add	r0, sp, #20
   d9a80:	f7ff fe30 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d9a84:	a805      	add	r0, sp, #20
   d9a86:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9a88:	f7ff fe94 	bl	d97b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d9a8c:	a806      	add	r0, sp, #24
   d9a8e:	f7fa fe91 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d9a92:	e7da      	b.n	d9a4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d9a94:	4630      	mov	r0, r6
   d9a96:	b00b      	add	sp, #44	; 0x2c
   d9a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9a9c:	000d9c11 	.word	0x000d9c11

000d9aa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9aa0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d9aa4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9aa6:	d006      	beq.n	d9ab6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d9aa8:	2a03      	cmp	r2, #3
   d9aaa:	d017      	beq.n	d9adc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d9aac:	2a01      	cmp	r2, #1
   d9aae:	d122      	bne.n	d9af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9ab0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9ab2:	6003      	str	r3, [r0, #0]
	      break;
   d9ab4:	e01f      	b.n	d9af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9ab6:	2018      	movs	r0, #24
   d9ab8:	680e      	ldr	r6, [r1, #0]
   d9aba:	f7fa faec 	bl	d4096 <_Znwj>
   d9abe:	4605      	mov	r5, r0
   d9ac0:	b150      	cbz	r0, d9ad8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9ac2:	4631      	mov	r1, r6
   d9ac4:	f7ff fec8 	bl	d9858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d9ac8:	6930      	ldr	r0, [r6, #16]
   d9aca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d9ace:	b108      	cbz	r0, d9ad4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d9ad0:	f001 facc 	bl	db06c <strdup>
   d9ad4:	6128      	str	r0, [r5, #16]
   d9ad6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9ad8:	6025      	str	r5, [r4, #0]
   d9ada:	e00c      	b.n	d9af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9adc:	6804      	ldr	r4, [r0, #0]
   d9ade:	b154      	cbz	r4, d9af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d9ae0:	f104 0010 	add.w	r0, r4, #16
   d9ae4:	f7ff fdfe 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9ae8:	4620      	mov	r0, r4
   d9aea:	f7ff fd27 	bl	d953c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9aee:	2118      	movs	r1, #24
   d9af0:	4620      	mov	r0, r4
   d9af2:	f001 f8bd 	bl	dac70 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9af6:	2000      	movs	r0, #0
   d9af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d9afa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9afa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9afc:	2300      	movs	r3, #0
   d9afe:	6083      	str	r3, [r0, #8]
   d9b00:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d9b02:	4604      	mov	r4, r0
   d9b04:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d9b06:	b12b      	cbz	r3, d9b14 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d9b08:	2202      	movs	r2, #2
   d9b0a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d9b0c:	68eb      	ldr	r3, [r5, #12]
   d9b0e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d9b10:	68ab      	ldr	r3, [r5, #8]
   d9b12:	60a3      	str	r3, [r4, #8]
	}
    }
   d9b14:	4620      	mov	r0, r4
   d9b16:	bd38      	pop	{r3, r4, r5, pc}

000d9b18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d9b18:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d9b1a:	b570      	push	{r4, r5, r6, lr}
   d9b1c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d9b1e:	d006      	beq.n	d9b2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d9b20:	2a03      	cmp	r2, #3
   d9b22:	d011      	beq.n	d9b48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d9b24:	2a01      	cmp	r2, #1
   d9b26:	d118      	bne.n	d9b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d9b28:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d9b2a:	6003      	str	r3, [r0, #0]
	      break;
   d9b2c:	e015      	b.n	d9b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9b2e:	2014      	movs	r0, #20
   d9b30:	680e      	ldr	r6, [r1, #0]
   d9b32:	f7fa fab0 	bl	d4096 <_Znwj>
   d9b36:	4605      	mov	r5, r0
   d9b38:	b120      	cbz	r0, d9b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d9b3a:	4631      	mov	r1, r6
   d9b3c:	f7ff ffdd 	bl	d9afa <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d9b40:	7c33      	ldrb	r3, [r6, #16]
   d9b42:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d9b44:	6025      	str	r5, [r4, #0]
   d9b46:	e008      	b.n	d9b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9b48:	6804      	ldr	r4, [r0, #0]
   d9b4a:	b134      	cbz	r4, d9b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9b4c:	4620      	mov	r0, r4
   d9b4e:	f7ff fcf5 	bl	d953c <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d9b52:	2114      	movs	r1, #20
   d9b54:	4620      	mov	r0, r4
   d9b56:	f001 f88b 	bl	dac70 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d9b5a:	2000      	movs	r0, #0
   d9b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d9b60:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d9b62:	2300      	movs	r3, #0
   d9b64:	b087      	sub	sp, #28
   d9b66:	460c      	mov	r4, r1
   d9b68:	f3bf 8f5f 	dmb	sy
   d9b6c:	e850 6f00 	ldrex	r6, [r0]
   d9b70:	e840 3200 	strex	r2, r3, [r0]
   d9b74:	2a00      	cmp	r2, #0
   d9b76:	d1f9      	bne.n	d9b6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d9b78:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d9b7c:	2e00      	cmp	r6, #0
   d9b7e:	d03f      	beq.n	d9c00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d9b80:	4618      	mov	r0, r3
   d9b82:	f7fc fe05 	bl	d6790 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d9b86:	4607      	mov	r7, r0
   d9b88:	b120      	cbz	r0, d9b94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d9b8a:	4621      	mov	r1, r4
   d9b8c:	4630      	mov	r0, r6
   d9b8e:	f7ff fe53 	bl	d9838 <_ZNKSt8functionIFvRKbEEclES1_>
   d9b92:	e02e      	b.n	d9bf2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d9b94:	4631      	mov	r1, r6
   d9b96:	a801      	add	r0, sp, #4
   d9b98:	f7ff ffaf 	bl	d9afa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d9b9c:	7823      	ldrb	r3, [r4, #0]
   d9b9e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d9ba2:	2010      	movs	r0, #16
   d9ba4:	f7fa fa77 	bl	d4096 <_Znwj>
   d9ba8:	4605      	mov	r5, r0
   d9baa:	b1d0      	cbz	r0, d9be2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9bac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9bae:	2014      	movs	r0, #20
   d9bb0:	f7fa fa71 	bl	d4096 <_Znwj>
   d9bb4:	4604      	mov	r4, r0
   d9bb6:	b178      	cbz	r0, d9bd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d9bb8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d9bba:	4601      	mov	r1, r0
   d9bbc:	a801      	add	r0, sp, #4
   d9bbe:	f7ff fccc 	bl	d955a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9bc2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d9bc4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d9bc6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d9bc8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d9bca:	9203      	str	r2, [sp, #12]
   d9bcc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d9bce:	60e3      	str	r3, [r4, #12]
   d9bd0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d9bd4:	9204      	str	r2, [sp, #16]
   d9bd6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d9bd8:	4b0a      	ldr	r3, [pc, #40]	; (d9c04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d9bda:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d9bdc:	4b0a      	ldr	r3, [pc, #40]	; (d9c08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d9bde:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d9be0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d9be2:	a801      	add	r0, sp, #4
   d9be4:	f7ff fcaa 	bl	d953c <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d9be8:	2200      	movs	r2, #0
   d9bea:	4629      	mov	r1, r5
   d9bec:	4807      	ldr	r0, [pc, #28]	; (d9c0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d9bee:	f7fc fdd7 	bl	d67a0 <application_thread_invoke>
   d9bf2:	4630      	mov	r0, r6
   d9bf4:	f7ff fca2 	bl	d953c <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d9bf8:	2110      	movs	r1, #16
   d9bfa:	4630      	mov	r0, r6
   d9bfc:	f001 f838 	bl	dac70 <_ZdlPvj>
        }
    }
   d9c00:	b007      	add	sp, #28
   d9c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9c04:	000d984b 	.word	0x000d984b
   d9c08:	000d9b19 	.word	0x000d9b19
   d9c0c:	000d9fd5 	.word	0x000d9fd5

000d9c10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d9c10:	b530      	push	{r4, r5, lr}
   d9c12:	b085      	sub	sp, #20
   d9c14:	4604      	mov	r4, r0
   d9c16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d9c18:	4668      	mov	r0, sp
   d9c1a:	4611      	mov	r1, r2
   d9c1c:	f7ff fdca 	bl	d97b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d9c20:	b17c      	cbz	r4, d9c42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d9c22:	b224      	sxth	r4, r4
   d9c24:	4628      	mov	r0, r5
   d9c26:	b10d      	cbz	r5, d9c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d9c28:	f001 fa20 	bl	db06c <strdup>
   d9c2c:	9002      	str	r0, [sp, #8]
   d9c2e:	a902      	add	r1, sp, #8
   d9c30:	4668      	mov	r0, sp
   d9c32:	f8ad 400c 	strh.w	r4, [sp, #12]
   d9c36:	f7ff fe1f 	bl	d9878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d9c3a:	a802      	add	r0, sp, #8
   d9c3c:	f7ff fd52 	bl	d96e4 <_ZN8particle5ErrorD1Ev>
   d9c40:	e01d      	b.n	d9c7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d9c42:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d9c44:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d9c48:	f04f 0201 	mov.w	r2, #1
   d9c4c:	e8d0 3f4f 	ldrexb	r3, [r0]
   d9c50:	42a3      	cmp	r3, r4
   d9c52:	d103      	bne.n	d9c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d9c54:	e8c0 2f41 	strexb	r1, r2, [r0]
   d9c58:	2900      	cmp	r1, #0
   d9c5a:	d1f7      	bne.n	d9c4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d9c5c:	d002      	beq.n	d9c64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d9c5e:	f88d 3008 	strb.w	r3, [sp, #8]
   d9c62:	e00c      	b.n	d9c7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d9c64:	f110 010c 	adds.w	r1, r0, #12
   d9c68:	f04f 0301 	mov.w	r3, #1
   d9c6c:	bf18      	it	ne
   d9c6e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d9c70:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d9c74:	3004      	adds	r0, #4
   d9c76:	f800 3c03 	strb.w	r3, [r0, #-3]
   d9c7a:	f7ff ff71 	bl	d9b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d9c7e:	a801      	add	r0, sp, #4
   d9c80:	f7fa fd98 	bl	d47b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d9c84:	b005      	add	sp, #20
   d9c86:	bd30      	pop	{r4, r5, pc}

000d9c88 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d9c88:	4770      	bx	lr

000d9c8a <_ZN9IPAddressD0Ev>:
   d9c8a:	b510      	push	{r4, lr}
   d9c8c:	2118      	movs	r1, #24
   d9c8e:	4604      	mov	r4, r0
   d9c90:	f000 ffee 	bl	dac70 <_ZdlPvj>
   d9c94:	4620      	mov	r0, r4
   d9c96:	bd10      	pop	{r4, pc}

000d9c98 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9c98:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9c9a:	7d03      	ldrb	r3, [r0, #20]
   d9c9c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d9c9e:	b08d      	sub	sp, #52	; 0x34
   d9ca0:	460e      	mov	r6, r1
   d9ca2:	f100 0704 	add.w	r7, r0, #4
   d9ca6:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d9caa:	d002      	beq.n	d9cb2 <_ZNK9IPAddress7printToER5Print+0x1a>
   d9cac:	f100 0508 	add.w	r5, r0, #8
   d9cb0:	e018      	b.n	d9ce4 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9cb2:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9cb4:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d9cb6:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d9cba:	232f      	movs	r3, #47	; 0x2f
   d9cbc:	462a      	mov	r2, r5
   d9cbe:	200a      	movs	r0, #10
   d9cc0:	f7fc fc56 	bl	d6570 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d9cc4:	4628      	mov	r0, r5
   d9cc6:	f001 f9ec 	bl	db0a2 <strlen>
   d9cca:	6833      	ldr	r3, [r6, #0]
   d9ccc:	4602      	mov	r2, r0
   d9cce:	68db      	ldr	r3, [r3, #12]
   d9cd0:	4629      	mov	r1, r5
   d9cd2:	4630      	mov	r0, r6
   d9cd4:	4798      	blx	r3
   d9cd6:	e00f      	b.n	d9cf8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d9cd8:	b124      	cbz	r4, d9ce4 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d9cda:	212e      	movs	r1, #46	; 0x2e
   d9cdc:	4630      	mov	r0, r6
   d9cde:	f7fe fbc9 	bl	d8474 <_ZN5Print5printEc>
   d9ce2:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d9ce4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d9ce8:	220a      	movs	r2, #10
   d9cea:	4630      	mov	r0, r6
   d9cec:	f7fe fbd1 	bl	d8492 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9cf0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9cf2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d9cf4:	d1f0      	bne.n	d9cd8 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d9cf6:	4620      	mov	r0, r4
    }
    return n;
}
   d9cf8:	b00d      	add	sp, #52	; 0x34
   d9cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d9cfc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d9cfc:	b510      	push	{r4, lr}
   d9cfe:	4b05      	ldr	r3, [pc, #20]	; (d9d14 <_ZN9IPAddressC1Ev+0x18>)
   d9d00:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d9d02:	2211      	movs	r2, #17
   d9d04:	f840 3b04 	str.w	r3, [r0], #4
   d9d08:	2100      	movs	r1, #0
   d9d0a:	f001 f954 	bl	dafb6 <memset>
{
    clear();
}
   d9d0e:	4620      	mov	r0, r4
   d9d10:	bd10      	pop	{r4, pc}
   d9d12:	bf00      	nop
   d9d14:	000dc504 	.word	0x000dc504

000d9d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d9d18:	4603      	mov	r3, r0
   d9d1a:	4a07      	ldr	r2, [pc, #28]	; (d9d38 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d9d1c:	b510      	push	{r4, lr}
   d9d1e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d9d22:	f101 0210 	add.w	r2, r1, #16
   d9d26:	f851 4b04 	ldr.w	r4, [r1], #4
   d9d2a:	f843 4b04 	str.w	r4, [r3], #4
   d9d2e:	4291      	cmp	r1, r2
   d9d30:	d1f9      	bne.n	d9d26 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d9d32:	780a      	ldrb	r2, [r1, #0]
   d9d34:	701a      	strb	r2, [r3, #0]
}
   d9d36:	bd10      	pop	{r4, pc}
   d9d38:	000dc504 	.word	0x000dc504

000d9d3c <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d9d3c:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d9d3e:	2b04      	cmp	r3, #4
   d9d40:	d101      	bne.n	d9d46 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d9d42:	6840      	ldr	r0, [r0, #4]
   d9d44:	e008      	b.n	d9d58 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d9d46:	2b06      	cmp	r3, #6
   d9d48:	d10a      	bne.n	d9d60 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9d4a:	6843      	ldr	r3, [r0, #4]
   d9d4c:	b953      	cbnz	r3, d9d64 <_ZNK9IPAddresscvbEv+0x28>
   d9d4e:	6883      	ldr	r3, [r0, #8]
   d9d50:	b943      	cbnz	r3, d9d64 <_ZNK9IPAddresscvbEv+0x28>
   d9d52:	68c3      	ldr	r3, [r0, #12]
   d9d54:	b933      	cbnz	r3, d9d64 <_ZNK9IPAddresscvbEv+0x28>
   d9d56:	6900      	ldr	r0, [r0, #16]
   d9d58:	3000      	adds	r0, #0
   d9d5a:	bf18      	it	ne
   d9d5c:	2001      	movne	r0, #1
   d9d5e:	4770      	bx	lr
    } else {
        return false;
   d9d60:	2000      	movs	r0, #0
   d9d62:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d9d64:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d9d66:	4770      	bx	lr

000d9d68 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d9d68:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d9d6a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d9d6e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d9d72:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d9d76:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d9d7a:	2304      	movs	r3, #4
   d9d7c:	6041      	str	r1, [r0, #4]
   d9d7e:	7503      	strb	r3, [r0, #20]
   d9d80:	bd10      	pop	{r4, pc}

000d9d82 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d9d82:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d9d84:	780d      	ldrb	r5, [r1, #0]
   d9d86:	788b      	ldrb	r3, [r1, #2]
   d9d88:	784a      	ldrb	r2, [r1, #1]
   d9d8a:	78c9      	ldrb	r1, [r1, #3]
   d9d8c:	9100      	str	r1, [sp, #0]
   d9d8e:	4629      	mov	r1, r5
   d9d90:	f7ff ffea 	bl	d9d68 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d9d94:	b003      	add	sp, #12
   d9d96:	bd30      	pop	{r4, r5, pc}

000d9d98 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d9d98:	b510      	push	{r4, lr}
   d9d9a:	4b03      	ldr	r3, [pc, #12]	; (d9da8 <_ZN9IPAddressC1EPKh+0x10>)
   d9d9c:	6003      	str	r3, [r0, #0]
   d9d9e:	4604      	mov	r4, r0
{
    *this = address;
   d9da0:	f7ff ffef 	bl	d9d82 <_ZN9IPAddressaSEPKh>
}
   d9da4:	4620      	mov	r0, r4
   d9da6:	bd10      	pop	{r4, pc}
   d9da8:	000dc504 	.word	0x000dc504

000d9dac <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9dac:	7441      	strb	r1, [r0, #17]
   d9dae:	4770      	bx	lr

000d9db0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d9db0:	4770      	bx	lr

000d9db2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d9db2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d9db4:	2100      	movs	r1, #0
   d9db6:	7c00      	ldrb	r0, [r0, #16]
   d9db8:	f7fc fc9a 	bl	d66f0 <HAL_USB_USART_Receive_Data>
}
   d9dbc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9dc0:	bf28      	it	cs
   d9dc2:	f04f 30ff 	movcs.w	r0, #4294967295
   d9dc6:	bd08      	pop	{r3, pc}

000d9dc8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d9dc8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d9dca:	2101      	movs	r1, #1
   d9dcc:	7c00      	ldrb	r0, [r0, #16]
   d9dce:	f7fc fc8f 	bl	d66f0 <HAL_USB_USART_Receive_Data>
}
   d9dd2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9dd6:	bf28      	it	cs
   d9dd8:	f04f 30ff 	movcs.w	r0, #4294967295
   d9ddc:	bd08      	pop	{r3, pc}

000d9dde <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d9dde:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d9de0:	7c00      	ldrb	r0, [r0, #16]
   d9de2:	f7fc fc7d 	bl	d66e0 <HAL_USB_USART_Available_Data_For_Write>
}
   d9de6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9dea:	bd08      	pop	{r3, pc}

000d9dec <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d9dec:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d9dee:	7c00      	ldrb	r0, [r0, #16]
   d9df0:	f7fc fc6e 	bl	d66d0 <HAL_USB_USART_Available_Data>
}
   d9df4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9df8:	bd08      	pop	{r3, pc}

000d9dfa <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d9dfa:	7c00      	ldrb	r0, [r0, #16]
   d9dfc:	f7fc bc88 	b.w	d6710 <HAL_USB_USART_Flush_Data>

000d9e00 <_ZN9USBSerialD0Ev>:
   d9e00:	b510      	push	{r4, lr}
   d9e02:	2114      	movs	r1, #20
   d9e04:	4604      	mov	r4, r0
   d9e06:	f000 ff33 	bl	dac70 <_ZdlPvj>
   d9e0a:	4620      	mov	r0, r4
   d9e0c:	bd10      	pop	{r4, pc}

000d9e0e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9e0e:	b538      	push	{r3, r4, r5, lr}
   d9e10:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9e12:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d9e14:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d9e16:	f7fc fc63 	bl	d66e0 <HAL_USB_USART_Available_Data_For_Write>
   d9e1a:	2800      	cmp	r0, #0
   d9e1c:	dc01      	bgt.n	d9e22 <_ZN9USBSerial5writeEh+0x14>
   d9e1e:	7c60      	ldrb	r0, [r4, #17]
   d9e20:	b128      	cbz	r0, d9e2e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d9e22:	4629      	mov	r1, r5
   d9e24:	7c20      	ldrb	r0, [r4, #16]
   d9e26:	f7fc fc6b 	bl	d6700 <HAL_USB_USART_Send_Data>
   d9e2a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d9e2e:	bd38      	pop	{r3, r4, r5, pc}

000d9e30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9e30:	b510      	push	{r4, lr}
   d9e32:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d9e34:	2300      	movs	r3, #0
   d9e36:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d9e38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d9e3c:	60a3      	str	r3, [r4, #8]
   d9e3e:	4b05      	ldr	r3, [pc, #20]	; (d9e54 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d9e40:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d9e42:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d9e44:	4608      	mov	r0, r1
{
  _serial = serial;
   d9e46:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d9e48:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d9e4a:	4611      	mov	r1, r2
   d9e4c:	f7fc fc28 	bl	d66a0 <HAL_USB_USART_Init>
}
   d9e50:	4620      	mov	r0, r4
   d9e52:	bd10      	pop	{r4, pc}
   d9e54:	000dc518 	.word	0x000dc518

000d9e58 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d9e58:	2200      	movs	r2, #0
   d9e5a:	7c00      	ldrb	r0, [r0, #16]
   d9e5c:	f7fc bc28 	b.w	d66b0 <HAL_USB_USART_Begin>

000d9e60 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d9e60:	7c00      	ldrb	r0, [r0, #16]
   d9e62:	f7fc bc2d 	b.w	d66c0 <HAL_USB_USART_End>

000d9e66 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9e66:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d9e68:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d9e6a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d9e6c:	2100      	movs	r1, #0
   d9e6e:	f001 f8a2 	bl	dafb6 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d9e72:	4620      	mov	r0, r4
   d9e74:	bd10      	pop	{r4, pc}
	...

000d9e78 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d9e78:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9e7a:	4d0e      	ldr	r5, [pc, #56]	; (d9eb4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d9e7c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d9e7e:	a801      	add	r0, sp, #4
   d9e80:	f7ff fff1 	bl	d9e66 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d9e84:	6829      	ldr	r1, [r5, #0]
   d9e86:	f011 0401 	ands.w	r4, r1, #1
   d9e8a:	d110      	bne.n	d9eae <_Z16_fetch_usbserialv+0x36>
   d9e8c:	4628      	mov	r0, r5
   d9e8e:	f7fa f915 	bl	d40bc <__cxa_guard_acquire>
   d9e92:	b160      	cbz	r0, d9eae <_Z16_fetch_usbserialv+0x36>
   d9e94:	aa01      	add	r2, sp, #4
   d9e96:	4621      	mov	r1, r4
   d9e98:	4807      	ldr	r0, [pc, #28]	; (d9eb8 <_Z16_fetch_usbserialv+0x40>)
   d9e9a:	f7ff ffc9 	bl	d9e30 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d9e9e:	4628      	mov	r0, r5
   d9ea0:	f7fa f911 	bl	d40c6 <__cxa_guard_release>
   d9ea4:	4a05      	ldr	r2, [pc, #20]	; (d9ebc <_Z16_fetch_usbserialv+0x44>)
   d9ea6:	4906      	ldr	r1, [pc, #24]	; (d9ec0 <_Z16_fetch_usbserialv+0x48>)
   d9ea8:	4803      	ldr	r0, [pc, #12]	; (d9eb8 <_Z16_fetch_usbserialv+0x40>)
   d9eaa:	f000 fed4 	bl	dac56 <__aeabi_atexit>
	return _usbserial;
}
   d9eae:	4802      	ldr	r0, [pc, #8]	; (d9eb8 <_Z16_fetch_usbserialv+0x40>)
   d9eb0:	b007      	add	sp, #28
   d9eb2:	bd30      	pop	{r4, r5, pc}
   d9eb4:	2003e42c 	.word	0x2003e42c
   d9eb8:	2003e430 	.word	0x2003e430
   d9ebc:	2003d8c4 	.word	0x2003d8c4
   d9ec0:	000d9db1 	.word	0x000d9db1

000d9ec4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d9ec4:	4770      	bx	lr

000d9ec6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d9ec6:	7441      	strb	r1, [r0, #17]
   d9ec8:	4770      	bx	lr

000d9eca <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d9eca:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d9ecc:	7c00      	ldrb	r0, [r0, #16]
   d9ece:	f7fc fb9f 	bl	d6610 <HAL_USART_Available_Data_For_Write>
}
   d9ed2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ed6:	bd08      	pop	{r3, pc}

000d9ed8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d9ed8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d9eda:	7c00      	ldrb	r0, [r0, #16]
   d9edc:	f7fc fb78 	bl	d65d0 <HAL_USART_Available_Data>
}
   d9ee0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d9ee4:	bd08      	pop	{r3, pc}

000d9ee6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d9ee6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d9ee8:	7c00      	ldrb	r0, [r0, #16]
   d9eea:	f7fc fb81 	bl	d65f0 <HAL_USART_Peek_Data>
}
   d9eee:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9ef2:	bf28      	it	cs
   d9ef4:	f04f 30ff 	movcs.w	r0, #4294967295
   d9ef8:	bd08      	pop	{r3, pc}

000d9efa <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d9efa:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d9efc:	7c00      	ldrb	r0, [r0, #16]
   d9efe:	f7fc fb6f 	bl	d65e0 <HAL_USART_Read_Data>
}
   d9f02:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d9f06:	bf28      	it	cs
   d9f08:	f04f 30ff 	movcs.w	r0, #4294967295
   d9f0c:	bd08      	pop	{r3, pc}

000d9f0e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d9f0e:	7c00      	ldrb	r0, [r0, #16]
   d9f10:	f7fc bb76 	b.w	d6600 <HAL_USART_Flush_Data>

000d9f14 <_ZN11USARTSerialD0Ev>:
   d9f14:	b510      	push	{r4, lr}
   d9f16:	2114      	movs	r1, #20
   d9f18:	4604      	mov	r4, r0
   d9f1a:	f000 fea9 	bl	dac70 <_ZdlPvj>
   d9f1e:	4620      	mov	r0, r4
   d9f20:	bd10      	pop	{r4, pc}

000d9f22 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d9f22:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f24:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d9f26:	4604      	mov	r4, r0
   d9f28:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d9f2a:	b925      	cbnz	r5, d9f36 <_ZN11USARTSerial5writeEh+0x14>
   d9f2c:	7c00      	ldrb	r0, [r0, #16]
   d9f2e:	f7fc fb6f 	bl	d6610 <HAL_USART_Available_Data_For_Write>
   d9f32:	2800      	cmp	r0, #0
   d9f34:	dd05      	ble.n	d9f42 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f36:	4631      	mov	r1, r6
   d9f38:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d9f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d9f3e:	f7fc bb3f 	b.w	d65c0 <HAL_USART_Write_Data>
  }
  return 0;
}
   d9f42:	4628      	mov	r0, r5
   d9f44:	bd70      	pop	{r4, r5, r6, pc}
	...

000d9f48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d9f48:	b510      	push	{r4, lr}
   d9f4a:	4604      	mov	r4, r0
   d9f4c:	4608      	mov	r0, r1
   d9f4e:	4611      	mov	r1, r2
   d9f50:	2200      	movs	r2, #0
   d9f52:	6062      	str	r2, [r4, #4]
   d9f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d9f58:	60a2      	str	r2, [r4, #8]
   d9f5a:	4a05      	ldr	r2, [pc, #20]	; (d9f70 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d9f5c:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d9f5e:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d9f60:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d9f62:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d9f64:	461a      	mov	r2, r3
   d9f66:	f7fc fb1b 	bl	d65a0 <HAL_USART_Init>
}
   d9f6a:	4620      	mov	r0, r4
   d9f6c:	bd10      	pop	{r4, pc}
   d9f6e:	bf00      	nop
   d9f70:	000dc548 	.word	0x000dc548

000d9f74 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d9f74:	2300      	movs	r3, #0
   d9f76:	7c00      	ldrb	r0, [r0, #16]
   d9f78:	f7fc bb52 	b.w	d6620 <HAL_USART_BeginConfig>

000d9f7c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d9f7c:	2200      	movs	r2, #0
   d9f7e:	f7ff bff9 	b.w	d9f74 <_ZN11USARTSerial5beginEmm>

000d9f82 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d9f82:	7c00      	ldrb	r0, [r0, #16]
   d9f84:	f7fc bb14 	b.w	d65b0 <HAL_USART_End>

000d9f88 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d9f88:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d9f8a:	4d0c      	ldr	r5, [pc, #48]	; (d9fbc <_Z22__fetch_global_Serial1v+0x34>)
   d9f8c:	6829      	ldr	r1, [r5, #0]
   d9f8e:	f011 0401 	ands.w	r4, r1, #1
   d9f92:	d111      	bne.n	d9fb8 <_Z22__fetch_global_Serial1v+0x30>
   d9f94:	4628      	mov	r0, r5
   d9f96:	f7fa f891 	bl	d40bc <__cxa_guard_acquire>
   d9f9a:	b168      	cbz	r0, d9fb8 <_Z22__fetch_global_Serial1v+0x30>
   d9f9c:	4a08      	ldr	r2, [pc, #32]	; (d9fc0 <_Z22__fetch_global_Serial1v+0x38>)
   d9f9e:	4b09      	ldr	r3, [pc, #36]	; (d9fc4 <_Z22__fetch_global_Serial1v+0x3c>)
   d9fa0:	4809      	ldr	r0, [pc, #36]	; (d9fc8 <_Z22__fetch_global_Serial1v+0x40>)
   d9fa2:	4621      	mov	r1, r4
   d9fa4:	f7ff ffd0 	bl	d9f48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d9fa8:	4628      	mov	r0, r5
   d9faa:	f7fa f88c 	bl	d40c6 <__cxa_guard_release>
   d9fae:	4a07      	ldr	r2, [pc, #28]	; (d9fcc <_Z22__fetch_global_Serial1v+0x44>)
   d9fb0:	4907      	ldr	r1, [pc, #28]	; (d9fd0 <_Z22__fetch_global_Serial1v+0x48>)
   d9fb2:	4805      	ldr	r0, [pc, #20]	; (d9fc8 <_Z22__fetch_global_Serial1v+0x40>)
   d9fb4:	f000 fe4f 	bl	dac56 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d9fb8:	4803      	ldr	r0, [pc, #12]	; (d9fc8 <_Z22__fetch_global_Serial1v+0x40>)
   d9fba:	bd38      	pop	{r3, r4, r5, pc}
   d9fbc:	2003e4dc 	.word	0x2003e4dc
   d9fc0:	2003e4e0 	.word	0x2003e4e0
   d9fc4:	2003e458 	.word	0x2003e458
   d9fc8:	2003e444 	.word	0x2003e444
   d9fcc:	2003d8c4 	.word	0x2003d8c4
   d9fd0:	000d9ec5 	.word	0x000d9ec5

000d9fd4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d9fd4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d9fd6:	6883      	ldr	r3, [r0, #8]
   d9fd8:	4604      	mov	r4, r0
   d9fda:	b90b      	cbnz	r3, d9fe0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d9fdc:	f000 fe59 	bl	dac92 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d9fe0:	68c3      	ldr	r3, [r0, #12]
   d9fe2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d9fe4:	68a3      	ldr	r3, [r4, #8]
   d9fe6:	b11b      	cbz	r3, d9ff0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d9fe8:	2203      	movs	r2, #3
   d9fea:	4621      	mov	r1, r4
   d9fec:	4620      	mov	r0, r4
   d9fee:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9ff0:	4620      	mov	r0, r4
   d9ff2:	2110      	movs	r1, #16
}
   d9ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d9ff8:	f000 be3a 	b.w	dac70 <_ZdlPvj>

000d9ffc <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d9ffc:	2200      	movs	r2, #0
   d9ffe:	4611      	mov	r1, r2
   da000:	6840      	ldr	r0, [r0, #4]
   da002:	f7fc bc29 	b.w	d6858 <network_listening>

000da006 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da006:	2200      	movs	r2, #0
   da008:	4611      	mov	r1, r2
   da00a:	6840      	ldr	r0, [r0, #4]
   da00c:	f7fc bc34 	b.w	d6878 <network_get_listen_timeout>

000da010 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da010:	2200      	movs	r2, #0
   da012:	6840      	ldr	r0, [r0, #4]
   da014:	f7fc bc28 	b.w	d6868 <network_set_listen_timeout>

000da018 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da018:	2200      	movs	r2, #0
   da01a:	f081 0101 	eor.w	r1, r1, #1
   da01e:	6840      	ldr	r0, [r0, #4]
   da020:	f7fc bc12 	b.w	d6848 <network_listen>

000da024 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   da024:	2300      	movs	r3, #0
   da026:	461a      	mov	r2, r3
   da028:	2101      	movs	r1, #1
   da02a:	6840      	ldr	r0, [r0, #4]
   da02c:	f7fc bc04 	b.w	d6838 <network_off>

000da030 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   da030:	2300      	movs	r3, #0
   da032:	461a      	mov	r2, r3
   da034:	4619      	mov	r1, r3
   da036:	6840      	ldr	r0, [r0, #4]
   da038:	f7fc bbf6 	b.w	d6828 <network_on>

000da03c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   da03c:	2200      	movs	r2, #0
   da03e:	4611      	mov	r1, r2
   da040:	6840      	ldr	r0, [r0, #4]
   da042:	f7fc bbe9 	b.w	d6818 <network_ready>

000da046 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da046:	2200      	movs	r2, #0
   da048:	4611      	mov	r1, r2
   da04a:	6840      	ldr	r0, [r0, #4]
   da04c:	f7fc bbd4 	b.w	d67f8 <network_connecting>

000da050 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da050:	2200      	movs	r2, #0
   da052:	2102      	movs	r1, #2
   da054:	6840      	ldr	r0, [r0, #4]
   da056:	f7fc bbd7 	b.w	d6808 <network_disconnect>

000da05a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da05a:	2300      	movs	r3, #0
   da05c:	461a      	mov	r2, r3
   da05e:	6840      	ldr	r0, [r0, #4]
   da060:	f7fc bbc2 	b.w	d67e8 <network_connect>

000da064 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   da064:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da066:	4605      	mov	r5, r0
   da068:	b188      	cbz	r0, da08e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da06a:	6804      	ldr	r4, [r0, #0]
   da06c:	b14c      	cbz	r4, da082 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   da06e:	68a3      	ldr	r3, [r4, #8]
   da070:	b11b      	cbz	r3, da07a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   da072:	2203      	movs	r2, #3
   da074:	4621      	mov	r1, r4
   da076:	4620      	mov	r0, r4
   da078:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da07a:	2110      	movs	r1, #16
   da07c:	4620      	mov	r0, r4
   da07e:	f000 fdf7 	bl	dac70 <_ZdlPvj>
   da082:	4628      	mov	r0, r5
   da084:	2114      	movs	r1, #20
      }
   da086:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da08a:	f000 bdf1 	b.w	dac70 <_ZdlPvj>
   da08e:	bd38      	pop	{r3, r4, r5, pc}

000da090 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   da090:	b110      	cbz	r0, da098 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   da092:	6803      	ldr	r3, [r0, #0]
   da094:	685b      	ldr	r3, [r3, #4]
   da096:	4718      	bx	r3
   da098:	4770      	bx	lr

000da09a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   da09a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   da09c:	6803      	ldr	r3, [r0, #0]
   da09e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   da0a0:	b1bb      	cbz	r3, da0d2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   da0a2:	6858      	ldr	r0, [r3, #4]
   da0a4:	f7fc fa2c 	bl	d6500 <os_thread_is_current>
   da0a8:	b978      	cbnz	r0, da0ca <_ZN6ThreadD1Ev+0x30>
   da0aa:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   da0ac:	7c5a      	ldrb	r2, [r3, #17]
   da0ae:	b912      	cbnz	r2, da0b6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   da0b0:	6858      	ldr	r0, [r3, #4]
   da0b2:	f7fc fa2d 	bl	d6510 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   da0b6:	6823      	ldr	r3, [r4, #0]
   da0b8:	6858      	ldr	r0, [r3, #4]
   da0ba:	f7fc fa31 	bl	d6520 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   da0be:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   da0c0:	2300      	movs	r3, #0
   da0c2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   da0c4:	b128      	cbz	r0, da0d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   da0c6:	f7ff ffcd 	bl	da064 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da0ca:	6820      	ldr	r0, [r4, #0]
   da0cc:	b108      	cbz	r0, da0d2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   da0ce:	f7ff ffc9 	bl	da064 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   da0d2:	4620      	mov	r0, r4
   da0d4:	bd10      	pop	{r4, pc}

000da0d6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   da0d6:	b538      	push	{r3, r4, r5, lr}
   da0d8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da0da:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   da0de:	b108      	cbz	r0, da0e4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   da0e0:	f7f9 ffdf 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   da0e4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   da0e8:	b108      	cbz	r0, da0ee <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   da0ea:	f7fc fa29 	bl	d6540 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da0ee:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   da0f2:	b135      	cbz	r5, da102 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   da0f4:	4628      	mov	r0, r5
   da0f6:	f7ff ffd0 	bl	da09a <_ZN6ThreadD1Ev>
   da0fa:	2104      	movs	r1, #4
   da0fc:	4628      	mov	r0, r5
   da0fe:	f000 fdb7 	bl	dac70 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   da102:	6820      	ldr	r0, [r4, #0]
   da104:	b108      	cbz	r0, da10a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   da106:	f7ff ffc3 	bl	da090 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   da10a:	4620      	mov	r0, r4
   da10c:	bd38      	pop	{r3, r4, r5, pc}
	...

000da110 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   da110:	b510      	push	{r4, lr}
   da112:	4b04      	ldr	r3, [pc, #16]	; (da124 <_ZN5spark9MeshClassD1Ev+0x14>)
   da114:	4604      	mov	r4, r0
   da116:	f840 3b08 	str.w	r3, [r0], #8
   da11a:	f7ff ffdc 	bl	da0d6 <_ZN5spark11MeshPublishD1Ev>
   da11e:	4620      	mov	r0, r4
   da120:	bd10      	pop	{r4, pc}
   da122:	bf00      	nop
   da124:	000dc578 	.word	0x000dc578

000da128 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   da128:	b538      	push	{r3, r4, r5, lr}
   da12a:	4c0e      	ldr	r4, [pc, #56]	; (da164 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   da12c:	4b0e      	ldr	r3, [pc, #56]	; (da168 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   da12e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   da130:	2500      	movs	r5, #0
   da132:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   da134:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   da138:	6063      	str	r3, [r4, #4]
   da13a:	60a5      	str	r5, [r4, #8]
   da13c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   da140:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   da144:	f7fc f9f4 	bl	d6530 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   da148:	4b08      	ldr	r3, [pc, #32]	; (da16c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   da14a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   da14e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   da152:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   da154:	4620      	mov	r0, r4
   da156:	4a06      	ldr	r2, [pc, #24]	; (da170 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   da158:	4906      	ldr	r1, [pc, #24]	; (da174 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   da15a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   da15e:	f000 bd7a 	b.w	dac56 <__aeabi_atexit>
   da162:	bf00      	nop
   da164:	2003e564 	.word	0x2003e564
   da168:	000dc660 	.word	0x000dc660
   da16c:	000dc578 	.word	0x000dc578
   da170:	2003d8c4 	.word	0x2003d8c4
   da174:	000da111 	.word	0x000da111

000da178 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da178:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da17a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da17c:	6803      	ldr	r3, [r0, #0]
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   da17e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   da182:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da184:	2201      	movs	r2, #1
   da186:	f04f 33ff 	mov.w	r3, #4294967295
   da18a:	4621      	mov	r1, r4
   da18c:	47a8      	blx	r5
}
   da18e:	b003      	add	sp, #12
   da190:	bd30      	pop	{r4, r5, pc}

000da192 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   da192:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da194:	6803      	ldr	r3, [r0, #0]
   da196:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   da198:	f04f 33ff 	mov.w	r3, #4294967295
   da19c:	46a4      	mov	ip, r4
}
   da19e:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   da1a2:	4760      	bx	ip

000da1a4 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da1a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   da1a6:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   da1a8:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   da1aa:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   da1ae:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   da1b0:	4621      	mov	r1, r4
   da1b2:	4613      	mov	r3, r2
   da1b4:	2201      	movs	r2, #1
   da1b6:	47a8      	blx	r5
}
   da1b8:	b003      	add	sp, #12
   da1ba:	bd30      	pop	{r4, r5, pc}

000da1bc <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   da1bc:	4770      	bx	lr

000da1be <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da1be:	b538      	push	{r3, r4, r5, lr}
   da1c0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   da1c2:	681a      	ldr	r2, [r3, #0]
   da1c4:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   da1c6:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   da1c8:	da05      	bge.n	da1d6 <_ZN9TCPClient9connectedEv+0x18>
   da1ca:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da1ce:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da1d2:	429a      	cmp	r2, r3
   da1d4:	d001      	beq.n	da1da <_ZN9TCPClient9connectedEv+0x1c>
   da1d6:	2501      	movs	r5, #1
   da1d8:	e00b      	b.n	da1f2 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   da1da:	6803      	ldr	r3, [r0, #0]
   da1dc:	691b      	ldr	r3, [r3, #16]
   da1de:	4798      	blx	r3
   da1e0:	2800      	cmp	r0, #0
   da1e2:	bf14      	ite	ne
   da1e4:	2501      	movne	r5, #1
   da1e6:	2500      	moveq	r5, #0
        if (!rv) {
   da1e8:	d103      	bne.n	da1f2 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   da1ea:	6823      	ldr	r3, [r4, #0]
   da1ec:	4620      	mov	r0, r4
   da1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   da1f0:	4798      	blx	r3
        }
    }
    return rv;
}
   da1f2:	4628      	mov	r0, r5
   da1f4:	bd38      	pop	{r3, r4, r5, pc}

000da1f6 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   da1f6:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   da1f8:	6818      	ldr	r0, [r3, #0]
}
   da1fa:	43c0      	mvns	r0, r0
   da1fc:	0fc0      	lsrs	r0, r0, #31
   da1fe:	4770      	bx	lr

000da200 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da200:	4770      	bx	lr

000da202 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   da202:	2000      	movs	r0, #0
   da204:	4770      	bx	lr

000da206 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   da206:	b510      	push	{r4, lr}
   da208:	2114      	movs	r1, #20
   da20a:	4604      	mov	r4, r0
   da20c:	f000 fd30 	bl	dac70 <_ZdlPvj>
   da210:	4620      	mov	r0, r4
   da212:	bd10      	pop	{r4, pc}

000da214 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da214:	f7f9 bf43 	b.w	d409e <_ZdlPv>

000da218 <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da218:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   da21a:	4616      	mov	r6, r2

    size_t printNumber(unsigned long, uint8_t);
    size_t printNumber(unsigned long long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   da21c:	2200      	movs	r2, #0
   da21e:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   da220:	9202      	str	r2, [sp, #8]
   da222:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   da224:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   da226:	4604      	mov	r4, r0
   da228:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   da22a:	d008      	beq.n	da23e <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   da22c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   da230:	fbb3 f1f2 	udiv	r1, r3, r2
   da234:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   da236:	fb02 3111 	mls	r1, r2, r1, r3
   da23a:	434a      	muls	r2, r1
   da23c:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   da23e:	6960      	ldr	r0, [r4, #20]
   da240:	2308      	movs	r3, #8
   da242:	9300      	str	r3, [sp, #0]
   da244:	f241 0205 	movw	r2, #4101	; 0x1005
   da248:	446b      	add	r3, sp
   da24a:	f640 71ff 	movw	r1, #4095	; 0xfff
   da24e:	6800      	ldr	r0, [r0, #0]
   da250:	f7fc f9ee 	bl	d6630 <sock_setsockopt>
    if (ret < 0) {
   da254:	2800      	cmp	r0, #0
   da256:	db08      	blt.n	da26a <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   da258:	6960      	ldr	r0, [r4, #20]
   da25a:	2300      	movs	r3, #0
   da25c:	4632      	mov	r2, r6
   da25e:	4629      	mov	r1, r5
   da260:	6800      	ldr	r0, [r0, #0]
   da262:	f7fc fa05 	bl	d6670 <sock_send>
    if (ret < 0) {
   da266:	2800      	cmp	r0, #0
   da268:	da04      	bge.n	da274 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   da26a:	f7fc fb75 	bl	d6958 <__errno>
   da26e:	6803      	ldr	r3, [r0, #0]
   da270:	6063      	str	r3, [r4, #4]
   da272:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   da274:	b004      	add	sp, #16
   da276:	bd70      	pop	{r4, r5, r6, pc}

000da278 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da278:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da27a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   da27c:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   da27e:	689b      	ldr	r3, [r3, #8]
   da280:	4798      	blx	r3
          if (--_M_weak_count == 0)
   da282:	68a3      	ldr	r3, [r4, #8]
   da284:	3b01      	subs	r3, #1
   da286:	60a3      	str	r3, [r4, #8]
   da288:	b92b      	cbnz	r3, da296 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   da28a:	6823      	ldr	r3, [r4, #0]
   da28c:	4620      	mov	r0, r4
   da28e:	68db      	ldr	r3, [r3, #12]
        }
    }
   da290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   da294:	4718      	bx	r3
   da296:	bd10      	pop	{r4, pc}

000da298 <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   da298:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da29a:	4604      	mov	r4, r0
   da29c:	694d      	ldr	r5, [r1, #20]
   da29e:	4b05      	ldr	r3, [pc, #20]	; (da2b4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   da2a0:	f844 3b04 	str.w	r3, [r4], #4
   da2a4:	358c      	adds	r5, #140	; 0x8c
   da2a6:	4606      	mov	r6, r0
   da2a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da2aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da2ac:	682b      	ldr	r3, [r5, #0]
   da2ae:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   da2b0:	4630      	mov	r0, r6
   da2b2:	bd70      	pop	{r4, r5, r6, pc}
   da2b4:	000dc504 	.word	0x000dc504

000da2b8 <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da2b8:	b510      	push	{r4, lr}
   da2ba:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da2bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da2c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da2c4:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   da2c6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   da2c8:	d005      	beq.n	da2d6 <_ZN9TCPClient4peekEv+0x1e>
   da2ca:	6962      	ldr	r2, [r4, #20]
   da2cc:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da2d0:	4413      	add	r3, r2
   da2d2:	7918      	ldrb	r0, [r3, #4]
   da2d4:	bd10      	pop	{r4, pc}
   da2d6:	6803      	ldr	r3, [r0, #0]
   da2d8:	691b      	ldr	r3, [r3, #16]
   da2da:	4798      	blx	r3
   da2dc:	2800      	cmp	r0, #0
   da2de:	d1f4      	bne.n	da2ca <_ZN9TCPClient4peekEv+0x12>
   da2e0:	f04f 30ff 	mov.w	r0, #4294967295
}
   da2e4:	bd10      	pop	{r4, pc}

000da2e6 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da2e6:	b510      	push	{r4, lr}
   da2e8:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da2ea:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da2ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da2f2:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   da2f4:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   da2f6:	d008      	beq.n	da30a <_ZN9TCPClient4readEv+0x24>
   da2f8:	6962      	ldr	r2, [r4, #20]
   da2fa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da2fe:	1c59      	adds	r1, r3, #1
   da300:	4413      	add	r3, r2
   da302:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   da306:	7918      	ldrb	r0, [r3, #4]
   da308:	bd10      	pop	{r4, pc}
   da30a:	6803      	ldr	r3, [r0, #0]
   da30c:	691b      	ldr	r3, [r3, #16]
   da30e:	4798      	blx	r3
   da310:	2800      	cmp	r0, #0
   da312:	d1f1      	bne.n	da2f8 <_ZN9TCPClient4readEv+0x12>
   da314:	f04f 30ff 	mov.w	r0, #4294967295
}
   da318:	bd10      	pop	{r4, pc}

000da31a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   da31a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da31c:	6943      	ldr	r3, [r0, #20]
   da31e:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   da320:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da324:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   da328:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   da32a:	4605      	mov	r5, r0
   da32c:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   da32e:	d106      	bne.n	da33e <_ZN9TCPClient4readEPhj+0x24>
   da330:	6803      	ldr	r3, [r0, #0]
   da332:	691b      	ldr	r3, [r3, #16]
   da334:	4798      	blx	r3
   da336:	b910      	cbnz	r0, da33e <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   da338:	f04f 34ff 	mov.w	r4, #4294967295
   da33c:	e014      	b.n	da368 <_ZN9TCPClient4readEPhj+0x4e>
   da33e:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   da340:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   da344:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   da348:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   da34a:	42bc      	cmp	r4, r7
   da34c:	bf28      	it	cs
   da34e:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   da350:	4419      	add	r1, r3
   da352:	4622      	mov	r2, r4
   da354:	3104      	adds	r1, #4
   da356:	4630      	mov	r0, r6
   da358:	f000 fe07 	bl	daf6a <memcpy>
   da35c:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   da35e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   da362:	4423      	add	r3, r4
   da364:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   da368:	4620      	mov	r0, r4
   da36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000da36c <_ZN9TCPClient7connectEPKctm>:
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da36c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da370:	4698      	mov	r8, r3
    stop();
   da372:	6803      	ldr	r3, [r0, #0]
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da374:	b093      	sub	sp, #76	; 0x4c
    stop();
   da376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   da378:	460d      	mov	r5, r1
   da37a:	4606      	mov	r6, r0
   da37c:	4617      	mov	r7, r2
    stop();
   da37e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   da380:	ab12      	add	r3, sp, #72	; 0x48
   da382:	2400      	movs	r4, #0
   da384:	f843 4d48 	str.w	r4, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da388:	4622      	mov	r2, r4
   da38a:	4621      	mov	r1, r4
   da38c:	4628      	mov	r0, r5
   da38e:	f7fb ffe5 	bl	d635c <netdb_getaddrinfo>
   da392:	4681      	mov	r9, r0
   da394:	2800      	cmp	r0, #0
   da396:	d13d      	bne.n	da414 <_ZN9TCPClient7connectEPKctm+0xa8>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   da398:	9b00      	ldr	r3, [sp, #0]
   da39a:	2b00      	cmp	r3, #0
   da39c:	d056      	beq.n	da44c <_ZN9TCPClient7connectEPKctm+0xe0>
   da39e:	695b      	ldr	r3, [r3, #20]
   da3a0:	2b00      	cmp	r3, #0
   da3a2:	d053      	beq.n	da44c <_ZN9TCPClient7connectEPKctm+0xe0>
        IPAddress addr;
   da3a4:	a806      	add	r0, sp, #24
   da3a6:	f7ff fca9 	bl	d9cfc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   da3aa:	9b00      	ldr	r3, [sp, #0]
   da3ac:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   da3ae:	7863      	ldrb	r3, [r4, #1]
   da3b0:	2b02      	cmp	r3, #2
   da3b2:	d101      	bne.n	da3b8 <_ZN9TCPClient7connectEPKctm+0x4c>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   da3b4:	1d21      	adds	r1, r4, #4
   da3b6:	e013      	b.n	da3e0 <_ZN9TCPClient7connectEPKctm+0x74>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   da3b8:	2b0a      	cmp	r3, #10
   da3ba:	d114      	bne.n	da3e6 <_ZN9TCPClient7connectEPKctm+0x7a>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   da3bc:	2211      	movs	r2, #17
   da3be:	4649      	mov	r1, r9
   da3c0:	a801      	add	r0, sp, #4
   da3c2:	f000 fdf8 	bl	dafb6 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   da3c6:	68a3      	ldr	r3, [r4, #8]
   da3c8:	bb33      	cbnz	r3, da418 <_ZN9TCPClient7connectEPKctm+0xac>
   da3ca:	68e3      	ldr	r3, [r4, #12]
   da3cc:	bb23      	cbnz	r3, da418 <_ZN9TCPClient7connectEPKctm+0xac>
   da3ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
   da3d2:	6925      	ldr	r5, [r4, #16]
   da3d4:	f7fc f8d4 	bl	d6580 <inet_htonl>
   da3d8:	4285      	cmp	r5, r0
   da3da:	d11d      	bne.n	da418 <_ZN9TCPClient7connectEPKctm+0xac>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   da3dc:	f104 0114 	add.w	r1, r4, #20
   da3e0:	a806      	add	r0, sp, #24
   da3e2:	f7ff fcce 	bl	d9d82 <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   da3e6:	a806      	add	r0, sp, #24
   da3e8:	f7ff fca8 	bl	d9d3c <_ZNK9IPAddresscvbEv>
        if (addr) {
   da3ec:	2800      	cmp	r0, #0
   da3ee:	d02d      	beq.n	da44c <_ZN9TCPClient7connectEPKctm+0xe0>
            return connect(addr, port, nif);
   da3f0:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da3f2:	ad07      	add	r5, sp, #28
   da3f4:	f8d3 9020 	ldr.w	r9, [r3, #32]
   da3f8:	4b18      	ldr	r3, [pc, #96]	; (da45c <_ZN9TCPClient7connectEPKctm+0xf0>)
   da3fa:	930c      	str	r3, [sp, #48]	; 0x30
   da3fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da3fe:	ac0d      	add	r4, sp, #52	; 0x34
   da400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da402:	682b      	ldr	r3, [r5, #0]
   da404:	7023      	strb	r3, [r4, #0]
   da406:	463a      	mov	r2, r7
   da408:	4643      	mov	r3, r8
   da40a:	a90c      	add	r1, sp, #48	; 0x30
   da40c:	4630      	mov	r0, r6
   da40e:	47c8      	blx	r9
   da410:	4681      	mov	r9, r0
   da412:	e01b      	b.n	da44c <_ZN9TCPClient7connectEPKctm+0xe0>

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   da414:	46a1      	mov	r9, r4
   da416:	e019      	b.n	da44c <_ZN9TCPClient7connectEPKctm+0xe0>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   da418:	f104 0308 	add.w	r3, r4, #8
   da41c:	ad01      	add	r5, sp, #4
   da41e:	3418      	adds	r4, #24
   da420:	6818      	ldr	r0, [r3, #0]
   da422:	6859      	ldr	r1, [r3, #4]
   da424:	462a      	mov	r2, r5
   da426:	c203      	stmia	r2!, {r0, r1}
   da428:	3308      	adds	r3, #8
   da42a:	42a3      	cmp	r3, r4
   da42c:	4615      	mov	r5, r2
   da42e:	d1f7      	bne.n	da420 <_ZN9TCPClient7connectEPKctm+0xb4>
            a.v = 6;
   da430:	2306      	movs	r3, #6
            addr = IPAddress(a);
   da432:	a901      	add	r1, sp, #4
   da434:	a80c      	add	r0, sp, #48	; 0x30
   da436:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   da438:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   da43c:	f7ff fc6c 	bl	d9d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da442:	ac07      	add	r4, sp, #28
   da444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da446:	682b      	ldr	r3, [r5, #0]
   da448:	7023      	strb	r3, [r4, #0]
   da44a:	e7cc      	b.n	da3e6 <_ZN9TCPClient7connectEPKctm+0x7a>
// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   da44c:	9800      	ldr	r0, [sp, #0]
   da44e:	f7fb ff7d 	bl	d634c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return 0; // error, could not connect
}
   da452:	4648      	mov	r0, r9
   da454:	b013      	add	sp, #76	; 0x4c
   da456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da45a:	bf00      	nop
   da45c:	000dc504 	.word	0x000dc504

000da460 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   da460:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   da462:	2300      	movs	r3, #0
   da464:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   da468:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   da46a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   da46e:	4770      	bx	lr

000da470 <_ZN9TCPClient7connectE9IPAddresstm>:

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da474:	461e      	mov	r6, r3
    stop();
   da476:	6803      	ldr	r3, [r0, #0]

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da478:	460c      	mov	r4, r1
   da47a:	b08a      	sub	sp, #40	; 0x28
    stop();
   da47c:	6adb      	ldr	r3, [r3, #44]	; 0x2c

    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   da47e:	4605      	mov	r5, r0
   da480:	4617      	mov	r7, r2
    stop();
   da482:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   da484:	7d23      	ldrb	r3, [r4, #20]
   da486:	f8d5 8014 	ldr.w	r8, [r5, #20]
   da48a:	2b04      	cmp	r3, #4
   da48c:	bf0c      	ite	eq
   da48e:	2002      	moveq	r0, #2
   da490:	200a      	movne	r0, #10
   da492:	2206      	movs	r2, #6
   da494:	2101      	movs	r1, #1
   da496:	f7fc f8f3 	bl	d6680 <sock_socket>
   da49a:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   da49e:	696b      	ldr	r3, [r5, #20]
   da4a0:	681b      	ldr	r3, [r3, #0]
   da4a2:	2b00      	cmp	r3, #0
   da4a4:	db18      	blt.n	da4d8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>

    flush_buffer();
   da4a6:	4628      	mov	r0, r5
   da4a8:	f7ff ffda 	bl	da460 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   da4ac:	b1d6      	cbz	r6, da4e4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>
        struct ifreq ifr = {};
   da4ae:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da4b0:	a903      	add	r1, sp, #12
   da4b2:	b2f0      	uxtb	r0, r6
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   da4b4:	9303      	str	r3, [sp, #12]
   da4b6:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da4ba:	f7fb ff5f 	bl	d637c <if_index_to_name>
   da4be:	b958      	cbnz	r0, da4d8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   da4c0:	6968      	ldr	r0, [r5, #20]
   da4c2:	2306      	movs	r3, #6
   da4c4:	9300      	str	r3, [sp, #0]
   da4c6:	f241 020b 	movw	r2, #4107	; 0x100b
   da4ca:	ab03      	add	r3, sp, #12
   da4cc:	f640 71ff 	movw	r1, #4095	; 0xfff
   da4d0:	6800      	ldr	r0, [r0, #0]
   da4d2:	f7fc f8ad 	bl	d6630 <sock_setsockopt>
   da4d6:	b128      	cbz	r0, da4e4 <_ZN9TCPClient7connectE9IPAddresstm+0x74>

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da4d8:	682b      	ldr	r3, [r5, #0]
   da4da:	4628      	mov	r0, r5
   da4dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   da4de:	2400      	movs	r4, #0

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   da4e0:	4798      	blx	r3
   da4e2:	e03b      	b.n	da55c <_ZN9TCPClient7connectE9IPAddresstm+0xec>
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   da4e4:	261c      	movs	r6, #28
   da4e6:	4632      	mov	r2, r6
   da4e8:	2100      	movs	r1, #0
   da4ea:	a803      	add	r0, sp, #12
   da4ec:	f000 fd63 	bl	dafb6 <memset>
    if (ip.version() == 4) {
   da4f0:	7d23      	ldrb	r3, [r4, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   da4f2:	f88d 600c 	strb.w	r6, [sp, #12]
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   da4f6:	2b04      	cmp	r3, #4
   da4f8:	d10c      	bne.n	da514 <_ZN9TCPClient7connectE9IPAddresstm+0xa4>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da4fa:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   da4fc:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   da4fe:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   da502:	f7fc f845 	bl	d6590 <inet_htons>
   da506:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   da50a:	6860      	ldr	r0, [r4, #4]
   da50c:	f7fc f838 	bl	d6580 <inet_htonl>
   da510:	9004      	str	r0, [sp, #16]
   da512:	e013      	b.n	da53c <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da514:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   da516:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   da518:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   da51c:	f7fc f838 	bl	d6590 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da520:	ae05      	add	r6, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   da522:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   da526:	1d23      	adds	r3, r4, #4
   da528:	f104 0714 	add.w	r7, r4, #20
   da52c:	6818      	ldr	r0, [r3, #0]
   da52e:	6859      	ldr	r1, [r3, #4]
   da530:	4632      	mov	r2, r6
   da532:	c203      	stmia	r2!, {r0, r1}
   da534:	3308      	adds	r3, #8
   da536:	42bb      	cmp	r3, r7
   da538:	4616      	mov	r6, r2
   da53a:	d1f7      	bne.n	da52c <_ZN9TCPClient7connectE9IPAddresstm+0xbc>
    }

    // FIXME: timeout?
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   da53c:	696b      	ldr	r3, [r5, #20]
   da53e:	221c      	movs	r2, #28
   da540:	a903      	add	r1, sp, #12
   da542:	6818      	ldr	r0, [r3, #0]
   da544:	f7fc f884 	bl	d6650 <sock_connect>
   da548:	2800      	cmp	r0, #0
   da54a:	d1c5      	bne.n	da4d8 <_ZN9TCPClient7connectE9IPAddresstm+0x68>
   da54c:	3404      	adds	r4, #4
   da54e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   da550:	696d      	ldr	r5, [r5, #20]
   da552:	358c      	adds	r5, #140	; 0x8c
   da554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   da556:	6823      	ldr	r3, [r4, #0]
   da558:	702b      	strb	r3, [r5, #0]

    d_->remoteIP = ip;

    done.dismiss();

    return 1; // success
   da55a:	2401      	movs	r4, #1
}
   da55c:	4620      	mov	r0, r4
   da55e:	b00a      	add	sp, #40	; 0x28
   da560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da564 <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da564:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   da566:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   da568:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   da56a:	6818      	ldr	r0, [r3, #0]
   da56c:	2800      	cmp	r0, #0
   da56e:	db01      	blt.n	da574 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   da570:	f7fc f866 	bl	d6640 <sock_close>
   da574:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   da576:	f04f 32ff 	mov.w	r2, #4294967295
   da57a:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   da57c:	6960      	ldr	r0, [r4, #20]
   da57e:	2211      	movs	r2, #17
   da580:	2100      	movs	r1, #0
   da582:	308c      	adds	r0, #140	; 0x8c
   da584:	f000 fd17 	bl	dafb6 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   da588:	4620      	mov	r0, r4
}
   da58a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   da58e:	f7ff bf67 	b.w	da460 <_ZN9TCPClient12flush_bufferEv>
	...

000da594 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da594:	b530      	push	{r4, r5, lr}
   da596:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da598:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   da59c:	b08b      	sub	sp, #44	; 0x2c
   da59e:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   da5a0:	b11b      	cbz	r3, da5aa <_ZN9TCPClient9availableEv+0x16>
   da5a2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   da5a6:	429a      	cmp	r2, r3
   da5a8:	d040      	beq.n	da62c <_ZN9TCPClient9availableEv+0x98>
   da5aa:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   da5ac:	6818      	ldr	r0, [r3, #0]
   da5ae:	2800      	cmp	r0, #0
   da5b0:	db3f      	blt.n	da632 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   da5b2:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   da5b6:	2d7f      	cmp	r5, #127	; 0x7f
   da5b8:	d83b      	bhi.n	da632 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   da5ba:	1d19      	adds	r1, r3, #4
   da5bc:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   da5c0:	2308      	movs	r3, #8
   da5c2:	4429      	add	r1, r5
   da5c4:	f7fc f84c 	bl	d6660 <sock_recv>
            if (ret > 0) {
   da5c8:	2800      	cmp	r0, #0
   da5ca:	dd0c      	ble.n	da5e6 <_ZN9TCPClient9availableEv+0x52>
   da5cc:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   da5ce:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   da5d2:	b90a      	cbnz	r2, da5d8 <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   da5d4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   da5d8:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   da5da:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da5de:	4418      	add	r0, r3
   da5e0:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   da5e4:	e025      	b.n	da632 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   da5e6:	f7fc f9b7 	bl	d6958 <__errno>
   da5ea:	6803      	ldr	r3, [r0, #0]
   da5ec:	2b0b      	cmp	r3, #11
   da5ee:	d020      	beq.n	da632 <_ZN9TCPClient9availableEv+0x9e>
   da5f0:	f7fc f9b2 	bl	d6958 <__errno>
   da5f4:	6803      	ldr	r3, [r0, #0]
   da5f6:	2b0b      	cmp	r3, #11
   da5f8:	d01b      	beq.n	da632 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   da5fa:	2320      	movs	r3, #32
   da5fc:	2500      	movs	r5, #0
   da5fe:	9302      	str	r3, [sp, #8]
   da600:	9503      	str	r5, [sp, #12]
   da602:	f7fc f9a9 	bl	d6958 <__errno>
   da606:	6803      	ldr	r3, [r0, #0]
   da608:	9301      	str	r3, [sp, #4]
   da60a:	4b0e      	ldr	r3, [pc, #56]	; (da644 <_ZN9TCPClient9availableEv+0xb0>)
   da60c:	9300      	str	r3, [sp, #0]
   da60e:	aa02      	add	r2, sp, #8
   da610:	462b      	mov	r3, r5
   da612:	490d      	ldr	r1, [pc, #52]	; (da648 <_ZN9TCPClient9availableEv+0xb4>)
   da614:	2032      	movs	r0, #50	; 0x32
   da616:	f7fc f88b 	bl	d6730 <log_message>
                    sock_close(d_->sock);
   da61a:	6963      	ldr	r3, [r4, #20]
   da61c:	6818      	ldr	r0, [r3, #0]
   da61e:	f7fc f80f 	bl	d6640 <sock_close>
   da622:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   da624:	f04f 32ff 	mov.w	r2, #4294967295
   da628:	601a      	str	r2, [r3, #0]
   da62a:	e002      	b.n	da632 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   da62c:	f7ff ff18 	bl	da460 <_ZN9TCPClient12flush_bufferEv>
   da630:	e7bb      	b.n	da5aa <_ZN9TCPClient9availableEv+0x16>
   da632:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   da634:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   da638:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   da63c:	1a18      	subs	r0, r3, r0
}
   da63e:	b00b      	add	sp, #44	; 0x2c
   da640:	bd30      	pop	{r4, r5, pc}
   da642:	bf00      	nop
   da644:	000dc613 	.word	0x000dc613
   da648:	000dc60c 	.word	0x000dc60c

000da64c <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da64c:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   da64e:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   da650:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   da652:	6001      	str	r1, [r0, #0]
   da654:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   da658:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   da65c:	3088      	adds	r0, #136	; 0x88
   da65e:	f7ff fb4d 	bl	d9cfc <_ZN9IPAddressC1Ev>
}
   da662:	4620      	mov	r0, r4
   da664:	bd10      	pop	{r4, pc}
	...

000da668 <_ZN9TCPClientC1Ei>:
   da668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da66c:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   da66e:	2300      	movs	r3, #0
   da670:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   da672:	4a14      	ldr	r2, [pc, #80]	; (da6c4 <_ZN9TCPClientC1Ei+0x5c>)
   da674:	6043      	str	r3, [r0, #4]
   da676:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   da678:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   da67a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   da67c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da67e:	20a0      	movs	r0, #160	; 0xa0
   da680:	460e      	mov	r6, r1
   da682:	f7f9 fd08 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   da686:	4605      	mov	r5, r0
   da688:	b110      	cbz	r0, da690 <_ZN9TCPClientC1Ei+0x28>
   da68a:	4631      	mov	r1, r6
   da68c:	f7ff ffde 	bl	da64c <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   da690:	2014      	movs	r0, #20
   da692:	f7f9 fd00 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   da696:	4603      	mov	r3, r0
   da698:	b128      	cbz	r0, da6a6 <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   da69a:	2201      	movs	r2, #1
   da69c:	6042      	str	r2, [r0, #4]
   da69e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   da6a0:	4a09      	ldr	r2, [pc, #36]	; (da6c8 <_ZN9TCPClientC1Ei+0x60>)
   da6a2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   da6a4:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   da6a6:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   da6a8:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   da6aa:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   da6ac:	b128      	cbz	r0, da6ba <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   da6ae:	6843      	ldr	r3, [r0, #4]
   da6b0:	3b01      	subs	r3, #1
   da6b2:	6043      	str	r3, [r0, #4]
   da6b4:	b90b      	cbnz	r3, da6ba <_ZN9TCPClientC1Ei+0x52>
   da6b6:	f7ff fddf 	bl	da278 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   da6ba:	4620      	mov	r0, r4
   da6bc:	f7ff fed0 	bl	da460 <_ZN9TCPClient12flush_bufferEv>
}
   da6c0:	4620      	mov	r0, r4
   da6c2:	bd70      	pop	{r4, r5, r6, pc}
   da6c4:	000dc5c8 	.word	0x000dc5c8
   da6c8:	000dc5ac 	.word	0x000dc5ac

000da6cc <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da6cc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   da6ce:	f04f 31ff 	mov.w	r1, #4294967295

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   da6d2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   da6d4:	f7ff ffc8 	bl	da668 <_ZN9TCPClientC1Ei>
}
   da6d8:	4620      	mov	r0, r4
   da6da:	bd10      	pop	{r4, pc}

000da6dc <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   da6dc:	b510      	push	{r4, lr}
   da6de:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   da6e0:	6800      	ldr	r0, [r0, #0]
   da6e2:	2800      	cmp	r0, #0
   da6e4:	db01      	blt.n	da6ea <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   da6e6:	f7fb ffab 	bl	d6640 <sock_close>
    }
}
   da6ea:	4620      	mov	r0, r4
   da6ec:	bd10      	pop	{r4, pc}

000da6ee <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   da6ee:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   da6f0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   da6f2:	4620      	mov	r0, r4
   da6f4:	f7ff fff2 	bl	da6dc <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   da6f8:	b124      	cbz	r4, da704 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   da6fa:	4620      	mov	r0, r4
   da6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   da700:	f7f9 bccd 	b.w	d409e <_ZdlPv>
   da704:	bd10      	pop	{r4, pc}

000da706 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   da706:	2200      	movs	r2, #0
   da708:	4611      	mov	r1, r2
   da70a:	6840      	ldr	r0, [r0, #4]
   da70c:	f7fc b884 	b.w	d6818 <network_ready>

000da710 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   da710:	2200      	movs	r2, #0
   da712:	4611      	mov	r1, r2
   da714:	6840      	ldr	r0, [r0, #4]
   da716:	f7fc b89f 	b.w	d6858 <network_listening>

000da71a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   da71a:	2200      	movs	r2, #0
   da71c:	4611      	mov	r1, r2
   da71e:	6840      	ldr	r0, [r0, #4]
   da720:	f7fc b8aa 	b.w	d6878 <network_get_listen_timeout>

000da724 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   da724:	2200      	movs	r2, #0
   da726:	6840      	ldr	r0, [r0, #4]
   da728:	f7fc b89e 	b.w	d6868 <network_set_listen_timeout>

000da72c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   da72c:	2200      	movs	r2, #0
   da72e:	f081 0101 	eor.w	r1, r1, #1
   da732:	6840      	ldr	r0, [r0, #4]
   da734:	f7fc b888 	b.w	d6848 <network_listen>

000da738 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   da738:	2300      	movs	r3, #0
   da73a:	461a      	mov	r2, r3
   da73c:	4619      	mov	r1, r3
   da73e:	6840      	ldr	r0, [r0, #4]
   da740:	f7fc b87a 	b.w	d6838 <network_off>

000da744 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   da744:	2300      	movs	r3, #0
   da746:	461a      	mov	r2, r3
   da748:	4619      	mov	r1, r3
   da74a:	6840      	ldr	r0, [r0, #4]
   da74c:	f7fc b86c 	b.w	d6828 <network_on>

000da750 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   da750:	2200      	movs	r2, #0
   da752:	4611      	mov	r1, r2
   da754:	6840      	ldr	r0, [r0, #4]
   da756:	f7fc b84f 	b.w	d67f8 <network_connecting>

000da75a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   da75a:	2200      	movs	r2, #0
   da75c:	2102      	movs	r1, #2
   da75e:	6840      	ldr	r0, [r0, #4]
   da760:	f7fc b852 	b.w	d6808 <network_disconnect>

000da764 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   da764:	2300      	movs	r3, #0
   da766:	461a      	mov	r2, r3
   da768:	6840      	ldr	r0, [r0, #4]
   da76a:	f7fc b83d 	b.w	d67e8 <network_connect>
	...

000da770 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   da770:	4b02      	ldr	r3, [pc, #8]	; (da77c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   da772:	2204      	movs	r2, #4
   da774:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   da776:	4a02      	ldr	r2, [pc, #8]	; (da780 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   da778:	601a      	str	r2, [r3, #0]
   da77a:	4770      	bx	lr
   da77c:	2003e738 	.word	0x2003e738
   da780:	000dc62c 	.word	0x000dc62c

000da784 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   da784:	2300      	movs	r3, #0
   da786:	461a      	mov	r2, r3
   da788:	6840      	ldr	r0, [r0, #4]
   da78a:	f7fc b82d 	b.w	d67e8 <network_connect>

000da78e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   da78e:	2200      	movs	r2, #0
   da790:	2102      	movs	r1, #2
   da792:	6840      	ldr	r0, [r0, #4]
   da794:	f7fc b838 	b.w	d6808 <network_disconnect>

000da798 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   da798:	2200      	movs	r2, #0
   da79a:	4611      	mov	r1, r2
   da79c:	6840      	ldr	r0, [r0, #4]
   da79e:	f7fc b82b 	b.w	d67f8 <network_connecting>

000da7a2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   da7a2:	2200      	movs	r2, #0
   da7a4:	4611      	mov	r1, r2
   da7a6:	6840      	ldr	r0, [r0, #4]
   da7a8:	f7fc b836 	b.w	d6818 <network_ready>

000da7ac <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   da7ac:	2300      	movs	r3, #0
   da7ae:	461a      	mov	r2, r3
   da7b0:	4619      	mov	r1, r3
   da7b2:	6840      	ldr	r0, [r0, #4]
   da7b4:	f7fc b838 	b.w	d6828 <network_on>

000da7b8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   da7b8:	2300      	movs	r3, #0
   da7ba:	461a      	mov	r2, r3
   da7bc:	4619      	mov	r1, r3
   da7be:	6840      	ldr	r0, [r0, #4]
   da7c0:	f7fc b83a 	b.w	d6838 <network_off>

000da7c4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   da7c4:	2200      	movs	r2, #0
   da7c6:	f081 0101 	eor.w	r1, r1, #1
   da7ca:	6840      	ldr	r0, [r0, #4]
   da7cc:	f7fc b83c 	b.w	d6848 <network_listen>

000da7d0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   da7d0:	2200      	movs	r2, #0
   da7d2:	6840      	ldr	r0, [r0, #4]
   da7d4:	f7fc b848 	b.w	d6868 <network_set_listen_timeout>

000da7d8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   da7d8:	2200      	movs	r2, #0
   da7da:	4611      	mov	r1, r2
   da7dc:	6840      	ldr	r0, [r0, #4]
   da7de:	f7fc b84b 	b.w	d6878 <network_get_listen_timeout>

000da7e2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   da7e2:	2200      	movs	r2, #0
   da7e4:	4611      	mov	r1, r2
   da7e6:	6840      	ldr	r0, [r0, #4]
   da7e8:	f7fc b836 	b.w	d6858 <network_listening>

000da7ec <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   da7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da7f0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   da7f2:	b095      	sub	sp, #84	; 0x54
   da7f4:	4616      	mov	r6, r2
   da7f6:	460d      	mov	r5, r1
   da7f8:	4607      	mov	r7, r0
    IPAddress addr;
   da7fa:	f7ff fa7f 	bl	d9cfc <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   da7fe:	4621      	mov	r1, r4
   da800:	2220      	movs	r2, #32
   da802:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   da804:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   da806:	f000 fbd6 	bl	dafb6 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   da80a:	2340      	movs	r3, #64	; 0x40
   da80c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   da80e:	4621      	mov	r1, r4
   da810:	466b      	mov	r3, sp
   da812:	aa0c      	add	r2, sp, #48	; 0x30
   da814:	4630      	mov	r0, r6
   da816:	f7fb fda1 	bl	d635c <netdb_getaddrinfo>
    if (!r) {
   da81a:	4604      	mov	r4, r0
   da81c:	2800      	cmp	r0, #0
   da81e:	d144      	bne.n	da8aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da820:	4602      	mov	r2, r0
   da822:	2101      	movs	r1, #1
   da824:	6868      	ldr	r0, [r5, #4]
   da826:	f7fb fff7 	bl	d6818 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da82a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   da82c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da82e:	4622      	mov	r2, r4
   da830:	6868      	ldr	r0, [r5, #4]
   da832:	f7fb fff1 	bl	d6818 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da836:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   da838:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   da83a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da83c:	2e00      	cmp	r6, #0
   da83e:	d034      	beq.n	da8aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   da840:	2900      	cmp	r1, #0
   da842:	d132      	bne.n	da8aa <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   da844:	6873      	ldr	r3, [r6, #4]
   da846:	2b02      	cmp	r3, #2
   da848:	d002      	beq.n	da850 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   da84a:	2b0a      	cmp	r3, #10
   da84c:	d009      	beq.n	da862 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   da84e:	e02a      	b.n	da8a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   da850:	f1b8 0f00 	cmp.w	r8, #0
   da854:	d027      	beq.n	da8a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   da856:	6971      	ldr	r1, [r6, #20]
   da858:	4638      	mov	r0, r7
   da85a:	3104      	adds	r1, #4
   da85c:	f7ff fa91 	bl	d9d82 <_ZN9IPAddressaSEPKh>
   da860:	e020      	b.n	da8a4 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   da862:	f1b9 0f00 	cmp.w	r9, #0
   da866:	d01e      	beq.n	da8a6 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   da868:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   da86a:	2211      	movs	r2, #17
   da86c:	a801      	add	r0, sp, #4
   da86e:	f000 fba2 	bl	dafb6 <memset>
                    a.v = 6;
   da872:	2306      	movs	r3, #6
   da874:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   da878:	ad01      	add	r5, sp, #4
   da87a:	f104 0308 	add.w	r3, r4, #8
   da87e:	3418      	adds	r4, #24
   da880:	6818      	ldr	r0, [r3, #0]
   da882:	6859      	ldr	r1, [r3, #4]
   da884:	462a      	mov	r2, r5
   da886:	c203      	stmia	r2!, {r0, r1}
   da888:	3308      	adds	r3, #8
   da88a:	42a3      	cmp	r3, r4
   da88c:	4615      	mov	r5, r2
   da88e:	d1f7      	bne.n	da880 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   da890:	a901      	add	r1, sp, #4
   da892:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   da894:	ad07      	add	r5, sp, #28
   da896:	f7ff fa3f 	bl	d9d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   da89a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   da89c:	1d3c      	adds	r4, r7, #4
   da89e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   da8a0:	682b      	ldr	r3, [r5, #0]
   da8a2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   da8a4:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   da8a6:	69f6      	ldr	r6, [r6, #28]
   da8a8:	e7c8      	b.n	da83c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   da8aa:	9800      	ldr	r0, [sp, #0]
   da8ac:	f7fb fd4e 	bl	d634c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   da8b0:	4638      	mov	r0, r7
   da8b2:	b015      	add	sp, #84	; 0x54
   da8b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000da8b8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   da8b8:	4b02      	ldr	r3, [pc, #8]	; (da8c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   da8ba:	4a03      	ldr	r2, [pc, #12]	; (da8c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   da8bc:	601a      	str	r2, [r3, #0]
   da8be:	2200      	movs	r2, #0
   da8c0:	605a      	str	r2, [r3, #4]
   da8c2:	4770      	bx	lr
   da8c4:	2003e740 	.word	0x2003e740
   da8c8:	000dc660 	.word	0x000dc660

000da8cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   da8cc:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   da8d0:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   da8d2:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   da8d6:	2901      	cmp	r1, #1
   da8d8:	4610      	mov	r0, r2
   da8da:	d104      	bne.n	da8e6 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   da8dc:	f852 1c04 	ldr.w	r1, [r2, #-4]
   da8e0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   da8e4:	e004      	b.n	da8f0 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   da8e6:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   da8e8:	bf04      	itt	eq
   da8ea:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   da8ee:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   da8f0:	3b01      	subs	r3, #1
   da8f2:	f102 0210 	add.w	r2, r2, #16
   da8f6:	d1ec      	bne.n	da8d2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   da8f8:	4770      	bx	lr

000da8fa <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   da8fa:	b40e      	push	{r1, r2, r3}
   da8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da900:	b087      	sub	sp, #28
   da902:	af00      	add	r7, sp, #0
   da904:	f107 0434 	add.w	r4, r7, #52	; 0x34
   da908:	4605      	mov	r5, r0
   da90a:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   da90e:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   da910:	4623      	mov	r3, r4
   da912:	4632      	mov	r2, r6
   da914:	2110      	movs	r1, #16
   da916:	f107 0008 	add.w	r0, r7, #8
   da91a:	f7fc f805 	bl	d6928 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   da91e:	280f      	cmp	r0, #15
   da920:	d916      	bls.n	da950 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   da922:	f100 0308 	add.w	r3, r0, #8
   da926:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   da92a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   da92c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   da930:	4632      	mov	r2, r6
   da932:	1c41      	adds	r1, r0, #1
   da934:	4623      	mov	r3, r4
   da936:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   da938:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   da93a:	f7fb fff5 	bl	d6928 <vsnprintf>
        va_end(args);
        if (n > 0) {
   da93e:	1e02      	subs	r2, r0, #0
   da940:	dd04      	ble.n	da94c <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   da942:	682b      	ldr	r3, [r5, #0]
   da944:	4669      	mov	r1, sp
   da946:	689b      	ldr	r3, [r3, #8]
   da948:	4628      	mov	r0, r5
   da94a:	4798      	blx	r3
   da94c:	46c5      	mov	sp, r8
   da94e:	e007      	b.n	da960 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   da950:	b130      	cbz	r0, da960 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   da952:	682b      	ldr	r3, [r5, #0]
   da954:	4602      	mov	r2, r0
   da956:	689b      	ldr	r3, [r3, #8]
   da958:	f107 0108 	add.w	r1, r7, #8
   da95c:	4628      	mov	r0, r5
   da95e:	4798      	blx	r3
    }
}
   da960:	371c      	adds	r7, #28
   da962:	46bd      	mov	sp, r7
   da964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   da968:	b003      	add	sp, #12
   da96a:	4770      	bx	lr

000da96c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   da96c:	b513      	push	{r0, r1, r4, lr}
   da96e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   da970:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   da972:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   da976:	6894      	ldr	r4, [r2, #8]
   da978:	4619      	mov	r1, r3
   da97a:	2201      	movs	r2, #1
   da97c:	47a0      	blx	r4
}
   da97e:	b002      	add	sp, #8
   da980:	bd10      	pop	{r4, pc}

000da982 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   da982:	6883      	ldr	r3, [r0, #8]
   da984:	b1fb      	cbz	r3, da9c6 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   da986:	781a      	ldrb	r2, [r3, #0]
   da988:	2a03      	cmp	r2, #3
   da98a:	d81a      	bhi.n	da9c2 <_ZNK5spark9JSONValue4typeEv+0x40>
   da98c:	e8df f002 	tbb	[pc, r2]
   da990:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   da994:	2005      	movs	r0, #5
   da996:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   da998:	6802      	ldr	r2, [r0, #0]
   da99a:	685b      	ldr	r3, [r3, #4]
   da99c:	6852      	ldr	r2, [r2, #4]
   da99e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   da9a0:	282d      	cmp	r0, #45	; 0x2d
   da9a2:	d014      	beq.n	da9ce <_ZNK5spark9JSONValue4typeEv+0x4c>
   da9a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da9a8:	2b09      	cmp	r3, #9
   da9aa:	d910      	bls.n	da9ce <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   da9ac:	2874      	cmp	r0, #116	; 0x74
   da9ae:	d010      	beq.n	da9d2 <_ZNK5spark9JSONValue4typeEv+0x50>
   da9b0:	2866      	cmp	r0, #102	; 0x66
   da9b2:	d00e      	beq.n	da9d2 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   da9b4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   da9b8:	4258      	negs	r0, r3
   da9ba:	4158      	adcs	r0, r3
   da9bc:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   da9be:	2006      	movs	r0, #6
   da9c0:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   da9c2:	2000      	movs	r0, #0
   da9c4:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   da9c6:	4618      	mov	r0, r3
   da9c8:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   da9ca:	2004      	movs	r0, #4
   da9cc:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   da9ce:	2003      	movs	r0, #3
   da9d0:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   da9d2:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   da9d4:	4770      	bx	lr

000da9d6 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   da9d6:	b510      	push	{r4, lr}
   da9d8:	4604      	mov	r4, r0
    switch (type()) {
   da9da:	f7ff ffd2 	bl	da982 <_ZNK5spark9JSONValue4typeEv>
   da9de:	2802      	cmp	r0, #2
   da9e0:	d00d      	beq.n	da9fe <_ZNK5spark9JSONValue5toIntEv+0x28>
   da9e2:	d316      	bcc.n	daa12 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   da9e4:	2804      	cmp	r0, #4
   da9e6:	d814      	bhi.n	daa12 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   da9e8:	6822      	ldr	r2, [r4, #0]
   da9ea:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   da9ec:	6850      	ldr	r0, [r2, #4]
   da9ee:	685b      	ldr	r3, [r3, #4]
   da9f0:	220a      	movs	r2, #10
   da9f2:	2100      	movs	r1, #0
   da9f4:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   da9f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   da9fa:	f000 bc15 	b.w	db228 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   da9fe:	6822      	ldr	r2, [r4, #0]
   daa00:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   daa02:	6852      	ldr	r2, [r2, #4]
   daa04:	685b      	ldr	r3, [r3, #4]
   daa06:	5cd0      	ldrb	r0, [r2, r3]
   daa08:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   daa0c:	4258      	negs	r0, r3
   daa0e:	4158      	adcs	r0, r3
   daa10:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   daa12:	2000      	movs	r0, #0
    }
}
   daa14:	bd10      	pop	{r4, pc}

000daa16 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   daa16:	b510      	push	{r4, lr}
    if (!n_) {
   daa18:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   daa1a:	4604      	mov	r4, r0
    if (!n_) {
   daa1c:	b15b      	cbz	r3, daa36 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   daa1e:	6880      	ldr	r0, [r0, #8]
   daa20:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   daa22:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   daa24:	3010      	adds	r0, #16
   daa26:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   daa28:	6120      	str	r0, [r4, #16]
    --n_;
   daa2a:	6163      	str	r3, [r4, #20]
    if (n_) {
   daa2c:	b12b      	cbz	r3, daa3a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   daa2e:	f7ff ff4d 	bl	da8cc <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   daa32:	60a0      	str	r0, [r4, #8]
   daa34:	e001      	b.n	daa3a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   daa36:	4618      	mov	r0, r3
   daa38:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   daa3a:	2001      	movs	r0, #1
}
   daa3c:	bd10      	pop	{r4, pc}

000daa3e <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   daa3e:	b510      	push	{r4, lr}
    write('}');
   daa40:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   daa42:	4604      	mov	r4, r0
    write('}');
   daa44:	f7ff ff92 	bl	da96c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   daa48:	2301      	movs	r3, #1
   daa4a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   daa4c:	4620      	mov	r0, r4
   daa4e:	bd10      	pop	{r4, pc}

000daa50 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   daa50:	b508      	push	{r3, lr}
    switch (state_) {
   daa52:	7903      	ldrb	r3, [r0, #4]
   daa54:	2b01      	cmp	r3, #1
   daa56:	d002      	beq.n	daa5e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   daa58:	2b02      	cmp	r3, #2
   daa5a:	d002      	beq.n	daa62 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   daa5c:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   daa5e:	212c      	movs	r1, #44	; 0x2c
   daa60:	e000      	b.n	daa64 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   daa62:	213a      	movs	r1, #58	; 0x3a
   daa64:	f7ff ff82 	bl	da96c <_ZN5spark10JSONWriter5writeEc>
   daa68:	bd08      	pop	{r3, pc}

000daa6a <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   daa6a:	b510      	push	{r4, lr}
   daa6c:	4604      	mov	r4, r0
    writeSeparator();
   daa6e:	f7ff ffef 	bl	daa50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   daa72:	4620      	mov	r0, r4
   daa74:	217b      	movs	r1, #123	; 0x7b
   daa76:	f7ff ff79 	bl	da96c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   daa7a:	2300      	movs	r3, #0
   daa7c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   daa7e:	4620      	mov	r0, r4
   daa80:	bd10      	pop	{r4, pc}
	...

000daa84 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   daa84:	b538      	push	{r3, r4, r5, lr}
   daa86:	4604      	mov	r4, r0
   daa88:	460d      	mov	r5, r1
    writeSeparator();
   daa8a:	f7ff ffe1 	bl	daa50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   daa8e:	6823      	ldr	r3, [r4, #0]
   daa90:	4904      	ldr	r1, [pc, #16]	; (daaa4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   daa92:	68db      	ldr	r3, [r3, #12]
   daa94:	4620      	mov	r0, r4
   daa96:	462a      	mov	r2, r5
   daa98:	4798      	blx	r3
    state_ = NEXT;
   daa9a:	2301      	movs	r3, #1
   daa9c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   daa9e:	4620      	mov	r0, r4
   daaa0:	bd38      	pop	{r3, r4, r5, pc}
   daaa2:	bf00      	nop
   daaa4:	000dba67 	.word	0x000dba67

000daaa8 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   daaa8:	b538      	push	{r3, r4, r5, lr}
   daaaa:	4604      	mov	r4, r0
   daaac:	460d      	mov	r5, r1
    writeSeparator();
   daaae:	f7ff ffcf 	bl	daa50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   daab2:	6823      	ldr	r3, [r4, #0]
   daab4:	4904      	ldr	r1, [pc, #16]	; (daac8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   daab6:	68db      	ldr	r3, [r3, #12]
   daab8:	4620      	mov	r0, r4
   daaba:	462a      	mov	r2, r5
   daabc:	4798      	blx	r3
    state_ = NEXT;
   daabe:	2301      	movs	r3, #1
   daac0:	7123      	strb	r3, [r4, #4]
    return *this;
}
   daac2:	4620      	mov	r0, r4
   daac4:	bd38      	pop	{r3, r4, r5, pc}
   daac6:	bf00      	nop
   daac8:	000db46d 	.word	0x000db46d

000daacc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   daacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daace:	460d      	mov	r5, r1
   daad0:	4617      	mov	r7, r2
    write('"');
   daad2:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   daad4:	4604      	mov	r4, r0
   daad6:	442f      	add	r7, r5
    write('"');
   daad8:	f7ff ff48 	bl	da96c <_ZN5spark10JSONWriter5writeEc>
   daadc:	462a      	mov	r2, r5
    const char* const end = str + size;
   daade:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   daae0:	42ba      	cmp	r2, r7
   daae2:	d038      	beq.n	dab56 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   daae4:	4616      	mov	r6, r2
   daae6:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   daaea:	2d22      	cmp	r5, #34	; 0x22
   daaec:	d003      	beq.n	daaf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   daaee:	2d5c      	cmp	r5, #92	; 0x5c
   daaf0:	d001      	beq.n	daaf6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   daaf2:	2d1f      	cmp	r5, #31
   daaf4:	d82d      	bhi.n	dab52 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   daaf6:	6823      	ldr	r3, [r4, #0]
   daaf8:	1a52      	subs	r2, r2, r1
   daafa:	689b      	ldr	r3, [r3, #8]
   daafc:	4620      	mov	r0, r4
   daafe:	4798      	blx	r3
            write('\\');
   dab00:	215c      	movs	r1, #92	; 0x5c
   dab02:	4620      	mov	r0, r4
   dab04:	f7ff ff32 	bl	da96c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   dab08:	2d0c      	cmp	r5, #12
   dab0a:	d019      	beq.n	dab40 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   dab0c:	d807      	bhi.n	dab1e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   dab0e:	2d09      	cmp	r5, #9
   dab10:	d00f      	beq.n	dab32 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   dab12:	2d0a      	cmp	r5, #10
   dab14:	d012      	beq.n	dab3c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   dab16:	2d08      	cmp	r5, #8
   dab18:	d114      	bne.n	dab44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   dab1a:	2162      	movs	r1, #98	; 0x62
   dab1c:	e00a      	b.n	dab34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   dab1e:	2d22      	cmp	r5, #34	; 0x22
   dab20:	d005      	beq.n	dab2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dab22:	2d5c      	cmp	r5, #92	; 0x5c
   dab24:	d003      	beq.n	dab2e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   dab26:	2d0d      	cmp	r5, #13
   dab28:	d10c      	bne.n	dab44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   dab2a:	2172      	movs	r1, #114	; 0x72
   dab2c:	e002      	b.n	dab34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   dab2e:	4629      	mov	r1, r5
   dab30:	e000      	b.n	dab34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   dab32:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   dab34:	4620      	mov	r0, r4
   dab36:	f7ff ff19 	bl	da96c <_ZN5spark10JSONWriter5writeEc>
                break;
   dab3a:	e009      	b.n	dab50 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   dab3c:	216e      	movs	r1, #110	; 0x6e
   dab3e:	e7f9      	b.n	dab34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   dab40:	2166      	movs	r1, #102	; 0x66
   dab42:	e7f7      	b.n	dab34 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   dab44:	6823      	ldr	r3, [r4, #0]
   dab46:	490a      	ldr	r1, [pc, #40]	; (dab70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   dab48:	68db      	ldr	r3, [r3, #12]
   dab4a:	462a      	mov	r2, r5
   dab4c:	4620      	mov	r0, r4
   dab4e:	4798      	blx	r3
                break;
            }
            str = s + 1;
   dab50:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   dab52:	4632      	mov	r2, r6
   dab54:	e7c4      	b.n	daae0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   dab56:	4291      	cmp	r1, r2
   dab58:	d004      	beq.n	dab64 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   dab5a:	6823      	ldr	r3, [r4, #0]
   dab5c:	1a52      	subs	r2, r2, r1
   dab5e:	689d      	ldr	r5, [r3, #8]
   dab60:	4620      	mov	r0, r4
   dab62:	47a8      	blx	r5
    }
    write('"');
   dab64:	2122      	movs	r1, #34	; 0x22
   dab66:	4620      	mov	r0, r4
   dab68:	f7ff ff00 	bl	da96c <_ZN5spark10JSONWriter5writeEc>
   dab6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dab6e:	bf00      	nop
   dab70:	000dc6a9 	.word	0x000dc6a9

000dab74 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   dab74:	b570      	push	{r4, r5, r6, lr}
   dab76:	4604      	mov	r4, r0
   dab78:	460d      	mov	r5, r1
   dab7a:	4616      	mov	r6, r2
    writeSeparator();
   dab7c:	f7ff ff68 	bl	daa50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   dab80:	4620      	mov	r0, r4
   dab82:	4632      	mov	r2, r6
   dab84:	4629      	mov	r1, r5
   dab86:	f7ff ffa1 	bl	daacc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   dab8a:	2302      	movs	r3, #2
   dab8c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dab8e:	4620      	mov	r0, r4
   dab90:	bd70      	pop	{r4, r5, r6, pc}

000dab92 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   dab92:	b570      	push	{r4, r5, r6, lr}
   dab94:	4604      	mov	r4, r0
   dab96:	460d      	mov	r5, r1
   dab98:	4616      	mov	r6, r2
    writeSeparator();
   dab9a:	f7ff ff59 	bl	daa50 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   dab9e:	4620      	mov	r0, r4
   daba0:	4632      	mov	r2, r6
   daba2:	4629      	mov	r1, r5
   daba4:	f7ff ff92 	bl	daacc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   daba8:	2301      	movs	r3, #1
   dabaa:	7123      	strb	r3, [r4, #4]
    return *this;
}
   dabac:	4620      	mov	r0, r4
   dabae:	bd70      	pop	{r4, r5, r6, pc}

000dabb0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   dabb0:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dabb2:	2300      	movs	r3, #0
   dabb4:	4604      	mov	r4, r0
   dabb6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dabb8:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   dabba:	4810      	ldr	r0, [pc, #64]	; (dabfc <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   dabbc:	60a0      	str	r0, [r4, #8]
   dabbe:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   dabc0:	b1d1      	cbz	r1, dabf8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   dabc2:	780b      	ldrb	r3, [r1, #0]
   dabc4:	2b03      	cmp	r3, #3
   dabc6:	d006      	beq.n	dabd6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   dabc8:	b9b3      	cbnz	r3, dabf8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   dabca:	6813      	ldr	r3, [r2, #0]
   dabcc:	6858      	ldr	r0, [r3, #4]
   dabce:	684b      	ldr	r3, [r1, #4]
   dabd0:	5cc3      	ldrb	r3, [r0, r3]
   dabd2:	2b6e      	cmp	r3, #110	; 0x6e
   dabd4:	d008      	beq.n	dabe8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   dabd6:	6813      	ldr	r3, [r2, #0]
   dabd8:	6858      	ldr	r0, [r3, #4]
   dabda:	684b      	ldr	r3, [r1, #4]
   dabdc:	4403      	add	r3, r0
   dabde:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   dabe0:	688b      	ldr	r3, [r1, #8]
   dabe2:	6849      	ldr	r1, [r1, #4]
   dabe4:	1a5b      	subs	r3, r3, r1
   dabe6:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dabe8:	4611      	mov	r1, r2
   dabea:	4620      	mov	r0, r4
   dabec:	f851 3b04 	ldr.w	r3, [r1], #4
   dabf0:	f840 3b04 	str.w	r3, [r0], #4
   dabf4:	f7fc fe84 	bl	d7900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   dabf8:	4620      	mov	r0, r4
   dabfa:	bd10      	pop	{r4, pc}
   dabfc:	000dc434 	.word	0x000dc434

000dac00 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dac00:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   dac02:	b510      	push	{r4, lr}
   dac04:	4604      	mov	r4, r0
   dac06:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dac08:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   dac0a:	6083      	str	r3, [r0, #8]
   dac0c:	60c3      	str	r3, [r0, #12]
   dac0e:	6103      	str	r3, [r0, #16]
   dac10:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   dac12:	b171      	cbz	r1, dac32 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   dac14:	780b      	ldrb	r3, [r1, #0]
   dac16:	2b01      	cmp	r3, #1
   dac18:	d10b      	bne.n	dac32 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   dac1a:	f101 0310 	add.w	r3, r1, #16
   dac1e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   dac20:	68cb      	ldr	r3, [r1, #12]
   dac22:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dac24:	4611      	mov	r1, r2
   dac26:	f851 3b04 	ldr.w	r3, [r1], #4
   dac2a:	f840 3b04 	str.w	r3, [r0], #4
   dac2e:	f7fc fe67 	bl	d7900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   dac32:	4620      	mov	r0, r4
   dac34:	bd10      	pop	{r4, pc}

000dac36 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   dac36:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   dac38:	b510      	push	{r4, lr}
   dac3a:	4604      	mov	r4, r0
   dac3c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   dac3e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   dac40:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   dac42:	b131      	cbz	r1, dac52 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   dac44:	4611      	mov	r1, r2
   dac46:	f851 3b04 	ldr.w	r3, [r1], #4
   dac4a:	f840 3b04 	str.w	r3, [r0], #4
   dac4e:	f7fc fe57 	bl	d7900 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   dac52:	4620      	mov	r0, r4
   dac54:	bd10      	pop	{r4, pc}

000dac56 <__aeabi_atexit>:
   dac56:	460b      	mov	r3, r1
   dac58:	4601      	mov	r1, r0
   dac5a:	4618      	mov	r0, r3
   dac5c:	f000 b968 	b.w	daf30 <__cxa_atexit>

000dac60 <_ZSt15get_new_handlerv>:
   dac60:	4b02      	ldr	r3, [pc, #8]	; (dac6c <_ZSt15get_new_handlerv+0xc>)
   dac62:	6818      	ldr	r0, [r3, #0]
   dac64:	f3bf 8f5f 	dmb	sy
   dac68:	4770      	bx	lr
   dac6a:	bf00      	nop
   dac6c:	2003e74c 	.word	0x2003e74c

000dac70 <_ZdlPvj>:
   dac70:	f7f9 ba15 	b.w	d409e <_ZdlPv>

000dac74 <_ZnwjRKSt9nothrow_t>:
   dac74:	b510      	push	{r4, lr}
   dac76:	2800      	cmp	r0, #0
   dac78:	bf14      	ite	ne
   dac7a:	4604      	movne	r4, r0
   dac7c:	2401      	moveq	r4, #1
   dac7e:	4620      	mov	r0, r4
   dac80:	f7fb fe32 	bl	d68e8 <malloc>
   dac84:	b920      	cbnz	r0, dac90 <_ZnwjRKSt9nothrow_t+0x1c>
   dac86:	f7ff ffeb 	bl	dac60 <_ZSt15get_new_handlerv>
   dac8a:	b108      	cbz	r0, dac90 <_ZnwjRKSt9nothrow_t+0x1c>
   dac8c:	4780      	blx	r0
   dac8e:	e7f6      	b.n	dac7e <_ZnwjRKSt9nothrow_t+0xa>
   dac90:	bd10      	pop	{r4, pc}

000dac92 <_ZSt25__throw_bad_function_callv>:
   dac92:	b508      	push	{r3, lr}
   dac94:	f7fb fe50 	bl	d6938 <abort>

000dac98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   dac98:	4b18      	ldr	r3, [pc, #96]	; (dacfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   dac9a:	681a      	ldr	r2, [r3, #0]
   dac9c:	07d1      	lsls	r1, r2, #31
   dac9e:	bf5c      	itt	pl
   daca0:	2201      	movpl	r2, #1
   daca2:	601a      	strpl	r2, [r3, #0]
   daca4:	4b16      	ldr	r3, [pc, #88]	; (dad00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   daca6:	681a      	ldr	r2, [r3, #0]
   daca8:	07d2      	lsls	r2, r2, #31
   dacaa:	bf5c      	itt	pl
   dacac:	2201      	movpl	r2, #1
   dacae:	601a      	strpl	r2, [r3, #0]
   dacb0:	4b14      	ldr	r3, [pc, #80]	; (dad04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   dacb2:	681a      	ldr	r2, [r3, #0]
   dacb4:	07d0      	lsls	r0, r2, #31
   dacb6:	bf5c      	itt	pl
   dacb8:	2201      	movpl	r2, #1
   dacba:	601a      	strpl	r2, [r3, #0]
   dacbc:	4b12      	ldr	r3, [pc, #72]	; (dad08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   dacbe:	681a      	ldr	r2, [r3, #0]
   dacc0:	07d1      	lsls	r1, r2, #31
   dacc2:	bf5c      	itt	pl
   dacc4:	2201      	movpl	r2, #1
   dacc6:	601a      	strpl	r2, [r3, #0]
   dacc8:	4b10      	ldr	r3, [pc, #64]	; (dad0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   dacca:	681a      	ldr	r2, [r3, #0]
   daccc:	07d2      	lsls	r2, r2, #31
   dacce:	bf5c      	itt	pl
   dacd0:	2201      	movpl	r2, #1
   dacd2:	601a      	strpl	r2, [r3, #0]
   dacd4:	4b0e      	ldr	r3, [pc, #56]	; (dad10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   dacd6:	681a      	ldr	r2, [r3, #0]
   dacd8:	07d0      	lsls	r0, r2, #31
   dacda:	bf5c      	itt	pl
   dacdc:	2201      	movpl	r2, #1
   dacde:	601a      	strpl	r2, [r3, #0]
   dace0:	4b0c      	ldr	r3, [pc, #48]	; (dad14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   dace2:	681a      	ldr	r2, [r3, #0]
   dace4:	07d1      	lsls	r1, r2, #31
   dace6:	bf5c      	itt	pl
   dace8:	2201      	movpl	r2, #1
   dacea:	601a      	strpl	r2, [r3, #0]
   dacec:	4b0a      	ldr	r3, [pc, #40]	; (dad18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   dacee:	681a      	ldr	r2, [r3, #0]
   dacf0:	07d2      	lsls	r2, r2, #31
   dacf2:	bf5c      	itt	pl
   dacf4:	2201      	movpl	r2, #1
   dacf6:	601a      	strpl	r2, [r3, #0]
   dacf8:	4770      	bx	lr
   dacfa:	bf00      	nop
   dacfc:	2003e76c 	.word	0x2003e76c
   dad00:	2003e768 	.word	0x2003e768
   dad04:	2003e764 	.word	0x2003e764
   dad08:	2003e760 	.word	0x2003e760
   dad0c:	2003e75c 	.word	0x2003e75c
   dad10:	2003e758 	.word	0x2003e758
   dad14:	2003e754 	.word	0x2003e754
   dad18:	2003e750 	.word	0x2003e750

000dad1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   dad1c:	4b24      	ldr	r3, [pc, #144]	; (dadb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   dad1e:	681a      	ldr	r2, [r3, #0]
   dad20:	07d0      	lsls	r0, r2, #31
   dad22:	bf5c      	itt	pl
   dad24:	2201      	movpl	r2, #1
   dad26:	601a      	strpl	r2, [r3, #0]
   dad28:	4b22      	ldr	r3, [pc, #136]	; (dadb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   dad2a:	681a      	ldr	r2, [r3, #0]
   dad2c:	07d1      	lsls	r1, r2, #31
   dad2e:	bf5c      	itt	pl
   dad30:	2201      	movpl	r2, #1
   dad32:	601a      	strpl	r2, [r3, #0]
   dad34:	4b20      	ldr	r3, [pc, #128]	; (dadb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   dad36:	681a      	ldr	r2, [r3, #0]
   dad38:	07d2      	lsls	r2, r2, #31
   dad3a:	bf5c      	itt	pl
   dad3c:	2201      	movpl	r2, #1
   dad3e:	601a      	strpl	r2, [r3, #0]
   dad40:	4b1e      	ldr	r3, [pc, #120]	; (dadbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   dad42:	681a      	ldr	r2, [r3, #0]
   dad44:	07d0      	lsls	r0, r2, #31
   dad46:	bf5c      	itt	pl
   dad48:	2201      	movpl	r2, #1
   dad4a:	601a      	strpl	r2, [r3, #0]
   dad4c:	4b1c      	ldr	r3, [pc, #112]	; (dadc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   dad4e:	681a      	ldr	r2, [r3, #0]
   dad50:	07d1      	lsls	r1, r2, #31
   dad52:	bf5c      	itt	pl
   dad54:	2201      	movpl	r2, #1
   dad56:	601a      	strpl	r2, [r3, #0]
   dad58:	4b1a      	ldr	r3, [pc, #104]	; (dadc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   dad5a:	681a      	ldr	r2, [r3, #0]
   dad5c:	07d2      	lsls	r2, r2, #31
   dad5e:	bf5c      	itt	pl
   dad60:	2201      	movpl	r2, #1
   dad62:	601a      	strpl	r2, [r3, #0]
   dad64:	4b18      	ldr	r3, [pc, #96]	; (dadc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   dad66:	681a      	ldr	r2, [r3, #0]
   dad68:	07d0      	lsls	r0, r2, #31
   dad6a:	bf5c      	itt	pl
   dad6c:	2201      	movpl	r2, #1
   dad6e:	601a      	strpl	r2, [r3, #0]
   dad70:	4b16      	ldr	r3, [pc, #88]	; (dadcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   dad72:	681a      	ldr	r2, [r3, #0]
   dad74:	07d1      	lsls	r1, r2, #31
   dad76:	bf5c      	itt	pl
   dad78:	2201      	movpl	r2, #1
   dad7a:	601a      	strpl	r2, [r3, #0]
   dad7c:	4b14      	ldr	r3, [pc, #80]	; (dadd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   dad7e:	681a      	ldr	r2, [r3, #0]
   dad80:	07d2      	lsls	r2, r2, #31
   dad82:	bf5c      	itt	pl
   dad84:	2201      	movpl	r2, #1
   dad86:	601a      	strpl	r2, [r3, #0]
   dad88:	4b12      	ldr	r3, [pc, #72]	; (dadd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   dad8a:	681a      	ldr	r2, [r3, #0]
   dad8c:	07d0      	lsls	r0, r2, #31
   dad8e:	bf5c      	itt	pl
   dad90:	2201      	movpl	r2, #1
   dad92:	601a      	strpl	r2, [r3, #0]
   dad94:	4b10      	ldr	r3, [pc, #64]	; (dadd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   dad96:	681a      	ldr	r2, [r3, #0]
   dad98:	07d1      	lsls	r1, r2, #31
   dad9a:	bf5c      	itt	pl
   dad9c:	2201      	movpl	r2, #1
   dad9e:	601a      	strpl	r2, [r3, #0]
   dada0:	4b0e      	ldr	r3, [pc, #56]	; (daddc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   dada2:	681a      	ldr	r2, [r3, #0]
   dada4:	07d2      	lsls	r2, r2, #31
   dada6:	bf5c      	itt	pl
   dada8:	2201      	movpl	r2, #1
   dadaa:	601a      	strpl	r2, [r3, #0]
   dadac:	4770      	bx	lr
   dadae:	bf00      	nop
   dadb0:	2003e79c 	.word	0x2003e79c
   dadb4:	2003e798 	.word	0x2003e798
   dadb8:	2003e794 	.word	0x2003e794
   dadbc:	2003e790 	.word	0x2003e790
   dadc0:	2003e78c 	.word	0x2003e78c
   dadc4:	2003e788 	.word	0x2003e788
   dadc8:	2003e784 	.word	0x2003e784
   dadcc:	2003e780 	.word	0x2003e780
   dadd0:	2003e77c 	.word	0x2003e77c
   dadd4:	2003e778 	.word	0x2003e778
   dadd8:	2003e774 	.word	0x2003e774
   daddc:	2003e770 	.word	0x2003e770

000dade0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   dade0:	4b24      	ldr	r3, [pc, #144]	; (dae74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   dade2:	681a      	ldr	r2, [r3, #0]
   dade4:	07d0      	lsls	r0, r2, #31
   dade6:	bf5c      	itt	pl
   dade8:	2201      	movpl	r2, #1
   dadea:	601a      	strpl	r2, [r3, #0]
   dadec:	4b22      	ldr	r3, [pc, #136]	; (dae78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   dadee:	681a      	ldr	r2, [r3, #0]
   dadf0:	07d1      	lsls	r1, r2, #31
   dadf2:	bf5c      	itt	pl
   dadf4:	2201      	movpl	r2, #1
   dadf6:	601a      	strpl	r2, [r3, #0]
   dadf8:	4b20      	ldr	r3, [pc, #128]	; (dae7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   dadfa:	681a      	ldr	r2, [r3, #0]
   dadfc:	07d2      	lsls	r2, r2, #31
   dadfe:	bf5c      	itt	pl
   dae00:	2201      	movpl	r2, #1
   dae02:	601a      	strpl	r2, [r3, #0]
   dae04:	4b1e      	ldr	r3, [pc, #120]	; (dae80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   dae06:	681a      	ldr	r2, [r3, #0]
   dae08:	07d0      	lsls	r0, r2, #31
   dae0a:	bf5c      	itt	pl
   dae0c:	2201      	movpl	r2, #1
   dae0e:	601a      	strpl	r2, [r3, #0]
   dae10:	4b1c      	ldr	r3, [pc, #112]	; (dae84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   dae12:	681a      	ldr	r2, [r3, #0]
   dae14:	07d1      	lsls	r1, r2, #31
   dae16:	bf5c      	itt	pl
   dae18:	2201      	movpl	r2, #1
   dae1a:	601a      	strpl	r2, [r3, #0]
   dae1c:	4b1a      	ldr	r3, [pc, #104]	; (dae88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   dae1e:	681a      	ldr	r2, [r3, #0]
   dae20:	07d2      	lsls	r2, r2, #31
   dae22:	bf5c      	itt	pl
   dae24:	2201      	movpl	r2, #1
   dae26:	601a      	strpl	r2, [r3, #0]
   dae28:	4b18      	ldr	r3, [pc, #96]	; (dae8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   dae2a:	681a      	ldr	r2, [r3, #0]
   dae2c:	07d0      	lsls	r0, r2, #31
   dae2e:	bf5c      	itt	pl
   dae30:	2201      	movpl	r2, #1
   dae32:	601a      	strpl	r2, [r3, #0]
   dae34:	4b16      	ldr	r3, [pc, #88]	; (dae90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   dae36:	681a      	ldr	r2, [r3, #0]
   dae38:	07d1      	lsls	r1, r2, #31
   dae3a:	bf5c      	itt	pl
   dae3c:	2201      	movpl	r2, #1
   dae3e:	601a      	strpl	r2, [r3, #0]
   dae40:	4b14      	ldr	r3, [pc, #80]	; (dae94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   dae42:	681a      	ldr	r2, [r3, #0]
   dae44:	07d2      	lsls	r2, r2, #31
   dae46:	bf5c      	itt	pl
   dae48:	2201      	movpl	r2, #1
   dae4a:	601a      	strpl	r2, [r3, #0]
   dae4c:	4b12      	ldr	r3, [pc, #72]	; (dae98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   dae4e:	681a      	ldr	r2, [r3, #0]
   dae50:	07d0      	lsls	r0, r2, #31
   dae52:	bf5c      	itt	pl
   dae54:	2201      	movpl	r2, #1
   dae56:	601a      	strpl	r2, [r3, #0]
   dae58:	4b10      	ldr	r3, [pc, #64]	; (dae9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   dae5a:	681a      	ldr	r2, [r3, #0]
   dae5c:	07d1      	lsls	r1, r2, #31
   dae5e:	bf5c      	itt	pl
   dae60:	2201      	movpl	r2, #1
   dae62:	601a      	strpl	r2, [r3, #0]
   dae64:	4b0e      	ldr	r3, [pc, #56]	; (daea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   dae66:	681a      	ldr	r2, [r3, #0]
   dae68:	07d2      	lsls	r2, r2, #31
   dae6a:	bf5c      	itt	pl
   dae6c:	2201      	movpl	r2, #1
   dae6e:	601a      	strpl	r2, [r3, #0]
   dae70:	4770      	bx	lr
   dae72:	bf00      	nop
   dae74:	2003e7cc 	.word	0x2003e7cc
   dae78:	2003e7c8 	.word	0x2003e7c8
   dae7c:	2003e7c4 	.word	0x2003e7c4
   dae80:	2003e7c0 	.word	0x2003e7c0
   dae84:	2003e7bc 	.word	0x2003e7bc
   dae88:	2003e7b8 	.word	0x2003e7b8
   dae8c:	2003e7b4 	.word	0x2003e7b4
   dae90:	2003e7b0 	.word	0x2003e7b0
   dae94:	2003e7ac 	.word	0x2003e7ac
   dae98:	2003e7a8 	.word	0x2003e7a8
   dae9c:	2003e7a4 	.word	0x2003e7a4
   daea0:	2003e7a0 	.word	0x2003e7a0

000daea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   daea4:	4b18      	ldr	r3, [pc, #96]	; (daf08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   daea6:	681a      	ldr	r2, [r3, #0]
   daea8:	07d1      	lsls	r1, r2, #31
   daeaa:	bf5c      	itt	pl
   daeac:	2201      	movpl	r2, #1
   daeae:	601a      	strpl	r2, [r3, #0]
   daeb0:	4b16      	ldr	r3, [pc, #88]	; (daf0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   daeb2:	681a      	ldr	r2, [r3, #0]
   daeb4:	07d2      	lsls	r2, r2, #31
   daeb6:	bf5c      	itt	pl
   daeb8:	2201      	movpl	r2, #1
   daeba:	601a      	strpl	r2, [r3, #0]
   daebc:	4b14      	ldr	r3, [pc, #80]	; (daf10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   daebe:	681a      	ldr	r2, [r3, #0]
   daec0:	07d0      	lsls	r0, r2, #31
   daec2:	bf5c      	itt	pl
   daec4:	2201      	movpl	r2, #1
   daec6:	601a      	strpl	r2, [r3, #0]
   daec8:	4b12      	ldr	r3, [pc, #72]	; (daf14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   daeca:	681a      	ldr	r2, [r3, #0]
   daecc:	07d1      	lsls	r1, r2, #31
   daece:	bf5c      	itt	pl
   daed0:	2201      	movpl	r2, #1
   daed2:	601a      	strpl	r2, [r3, #0]
   daed4:	4b10      	ldr	r3, [pc, #64]	; (daf18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   daed6:	681a      	ldr	r2, [r3, #0]
   daed8:	07d2      	lsls	r2, r2, #31
   daeda:	bf5c      	itt	pl
   daedc:	2201      	movpl	r2, #1
   daede:	601a      	strpl	r2, [r3, #0]
   daee0:	4b0e      	ldr	r3, [pc, #56]	; (daf1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   daee2:	681a      	ldr	r2, [r3, #0]
   daee4:	07d0      	lsls	r0, r2, #31
   daee6:	bf5c      	itt	pl
   daee8:	2201      	movpl	r2, #1
   daeea:	601a      	strpl	r2, [r3, #0]
   daeec:	4b0c      	ldr	r3, [pc, #48]	; (daf20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   daeee:	681a      	ldr	r2, [r3, #0]
   daef0:	07d1      	lsls	r1, r2, #31
   daef2:	bf5c      	itt	pl
   daef4:	2201      	movpl	r2, #1
   daef6:	601a      	strpl	r2, [r3, #0]
   daef8:	4b0a      	ldr	r3, [pc, #40]	; (daf24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   daefa:	681a      	ldr	r2, [r3, #0]
   daefc:	07d2      	lsls	r2, r2, #31
   daefe:	bf5c      	itt	pl
   daf00:	2201      	movpl	r2, #1
   daf02:	601a      	strpl	r2, [r3, #0]
   daf04:	4770      	bx	lr
   daf06:	bf00      	nop
   daf08:	2003e7ec 	.word	0x2003e7ec
   daf0c:	2003e7e8 	.word	0x2003e7e8
   daf10:	2003e7e4 	.word	0x2003e7e4
   daf14:	2003e7e0 	.word	0x2003e7e0
   daf18:	2003e7dc 	.word	0x2003e7dc
   daf1c:	2003e7d8 	.word	0x2003e7d8
   daf20:	2003e7d4 	.word	0x2003e7d4
   daf24:	2003e7d0 	.word	0x2003e7d0

000daf28 <atol>:
   daf28:	220a      	movs	r2, #10
   daf2a:	2100      	movs	r1, #0
   daf2c:	f000 b97c 	b.w	db228 <strtol>

000daf30 <__cxa_atexit>:
   daf30:	b510      	push	{r4, lr}
   daf32:	4c05      	ldr	r4, [pc, #20]	; (daf48 <__cxa_atexit+0x18>)
   daf34:	4613      	mov	r3, r2
   daf36:	b12c      	cbz	r4, daf44 <__cxa_atexit+0x14>
   daf38:	460a      	mov	r2, r1
   daf3a:	4601      	mov	r1, r0
   daf3c:	2002      	movs	r0, #2
   daf3e:	f3af 8000 	nop.w
   daf42:	bd10      	pop	{r4, pc}
   daf44:	4620      	mov	r0, r4
   daf46:	bd10      	pop	{r4, pc}
   daf48:	00000000 	.word	0x00000000

000daf4c <memcmp>:
   daf4c:	b510      	push	{r4, lr}
   daf4e:	3901      	subs	r1, #1
   daf50:	4402      	add	r2, r0
   daf52:	4290      	cmp	r0, r2
   daf54:	d007      	beq.n	daf66 <memcmp+0x1a>
   daf56:	f810 3b01 	ldrb.w	r3, [r0], #1
   daf5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   daf5e:	42a3      	cmp	r3, r4
   daf60:	d0f7      	beq.n	daf52 <memcmp+0x6>
   daf62:	1b18      	subs	r0, r3, r4
   daf64:	bd10      	pop	{r4, pc}
   daf66:	2000      	movs	r0, #0
   daf68:	bd10      	pop	{r4, pc}

000daf6a <memcpy>:
   daf6a:	b510      	push	{r4, lr}
   daf6c:	1e43      	subs	r3, r0, #1
   daf6e:	440a      	add	r2, r1
   daf70:	4291      	cmp	r1, r2
   daf72:	d004      	beq.n	daf7e <memcpy+0x14>
   daf74:	f811 4b01 	ldrb.w	r4, [r1], #1
   daf78:	f803 4f01 	strb.w	r4, [r3, #1]!
   daf7c:	e7f8      	b.n	daf70 <memcpy+0x6>
   daf7e:	bd10      	pop	{r4, pc}

000daf80 <memmove>:
   daf80:	4288      	cmp	r0, r1
   daf82:	b510      	push	{r4, lr}
   daf84:	eb01 0302 	add.w	r3, r1, r2
   daf88:	d801      	bhi.n	daf8e <memmove+0xe>
   daf8a:	1e42      	subs	r2, r0, #1
   daf8c:	e00b      	b.n	dafa6 <memmove+0x26>
   daf8e:	4298      	cmp	r0, r3
   daf90:	d2fb      	bcs.n	daf8a <memmove+0xa>
   daf92:	1881      	adds	r1, r0, r2
   daf94:	1ad2      	subs	r2, r2, r3
   daf96:	42d3      	cmn	r3, r2
   daf98:	d004      	beq.n	dafa4 <memmove+0x24>
   daf9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   daf9e:	f801 4d01 	strb.w	r4, [r1, #-1]!
   dafa2:	e7f8      	b.n	daf96 <memmove+0x16>
   dafa4:	bd10      	pop	{r4, pc}
   dafa6:	4299      	cmp	r1, r3
   dafa8:	d004      	beq.n	dafb4 <memmove+0x34>
   dafaa:	f811 4b01 	ldrb.w	r4, [r1], #1
   dafae:	f802 4f01 	strb.w	r4, [r2, #1]!
   dafb2:	e7f8      	b.n	dafa6 <memmove+0x26>
   dafb4:	bd10      	pop	{r4, pc}

000dafb6 <memset>:
   dafb6:	4402      	add	r2, r0
   dafb8:	4603      	mov	r3, r0
   dafba:	4293      	cmp	r3, r2
   dafbc:	d002      	beq.n	dafc4 <memset+0xe>
   dafbe:	f803 1b01 	strb.w	r1, [r3], #1
   dafc2:	e7fa      	b.n	dafba <memset+0x4>
   dafc4:	4770      	bx	lr
	...

000dafc8 <srand>:
   dafc8:	b538      	push	{r3, r4, r5, lr}
   dafca:	4b12      	ldr	r3, [pc, #72]	; (db014 <srand+0x4c>)
   dafcc:	681c      	ldr	r4, [r3, #0]
   dafce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   dafd0:	4605      	mov	r5, r0
   dafd2:	b9d3      	cbnz	r3, db00a <srand+0x42>
   dafd4:	2018      	movs	r0, #24
   dafd6:	f7fb fc87 	bl	d68e8 <malloc>
   dafda:	f243 330e 	movw	r3, #13070	; 0x330e
   dafde:	63a0      	str	r0, [r4, #56]	; 0x38
   dafe0:	8003      	strh	r3, [r0, #0]
   dafe2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   dafe6:	8043      	strh	r3, [r0, #2]
   dafe8:	f241 2334 	movw	r3, #4660	; 0x1234
   dafec:	8083      	strh	r3, [r0, #4]
   dafee:	f24e 636d 	movw	r3, #58989	; 0xe66d
   daff2:	80c3      	strh	r3, [r0, #6]
   daff4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   daff8:	8103      	strh	r3, [r0, #8]
   daffa:	2305      	movs	r3, #5
   daffc:	8143      	strh	r3, [r0, #10]
   daffe:	230b      	movs	r3, #11
   db000:	8183      	strh	r3, [r0, #12]
   db002:	2201      	movs	r2, #1
   db004:	2300      	movs	r3, #0
   db006:	e9c0 2304 	strd	r2, r3, [r0, #16]
   db00a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   db00c:	2200      	movs	r2, #0
   db00e:	611d      	str	r5, [r3, #16]
   db010:	615a      	str	r2, [r3, #20]
   db012:	bd38      	pop	{r3, r4, r5, pc}
   db014:	2003d8c0 	.word	0x2003d8c0

000db018 <strchr>:
   db018:	b2c9      	uxtb	r1, r1
   db01a:	4603      	mov	r3, r0
   db01c:	f810 2b01 	ldrb.w	r2, [r0], #1
   db020:	b11a      	cbz	r2, db02a <strchr+0x12>
   db022:	4291      	cmp	r1, r2
   db024:	d1f9      	bne.n	db01a <strchr+0x2>
   db026:	4618      	mov	r0, r3
   db028:	4770      	bx	lr
   db02a:	2900      	cmp	r1, #0
   db02c:	bf0c      	ite	eq
   db02e:	4618      	moveq	r0, r3
   db030:	2000      	movne	r0, #0
   db032:	4770      	bx	lr

000db034 <strchrnul>:
   db034:	b510      	push	{r4, lr}
   db036:	4604      	mov	r4, r0
   db038:	f7ff ffee 	bl	db018 <strchr>
   db03c:	b918      	cbnz	r0, db046 <strchrnul+0x12>
   db03e:	4620      	mov	r0, r4
   db040:	f000 f82f 	bl	db0a2 <strlen>
   db044:	4420      	add	r0, r4
   db046:	bd10      	pop	{r4, pc}

000db048 <strcmp>:
   db048:	f810 2b01 	ldrb.w	r2, [r0], #1
   db04c:	f811 3b01 	ldrb.w	r3, [r1], #1
   db050:	2a01      	cmp	r2, #1
   db052:	bf28      	it	cs
   db054:	429a      	cmpcs	r2, r3
   db056:	d0f7      	beq.n	db048 <strcmp>
   db058:	1ad0      	subs	r0, r2, r3
   db05a:	4770      	bx	lr

000db05c <strcpy>:
   db05c:	4603      	mov	r3, r0
   db05e:	f811 2b01 	ldrb.w	r2, [r1], #1
   db062:	f803 2b01 	strb.w	r2, [r3], #1
   db066:	2a00      	cmp	r2, #0
   db068:	d1f9      	bne.n	db05e <strcpy+0x2>
   db06a:	4770      	bx	lr

000db06c <strdup>:
   db06c:	4b02      	ldr	r3, [pc, #8]	; (db078 <strdup+0xc>)
   db06e:	4601      	mov	r1, r0
   db070:	6818      	ldr	r0, [r3, #0]
   db072:	f000 b803 	b.w	db07c <_strdup_r>
   db076:	bf00      	nop
   db078:	2003d8c0 	.word	0x2003d8c0

000db07c <_strdup_r>:
   db07c:	b570      	push	{r4, r5, r6, lr}
   db07e:	4606      	mov	r6, r0
   db080:	4608      	mov	r0, r1
   db082:	460c      	mov	r4, r1
   db084:	f000 f80d 	bl	db0a2 <strlen>
   db088:	1c45      	adds	r5, r0, #1
   db08a:	4629      	mov	r1, r5
   db08c:	4630      	mov	r0, r6
   db08e:	f7fb fc5b 	bl	d6948 <_malloc_r>
   db092:	4606      	mov	r6, r0
   db094:	b118      	cbz	r0, db09e <_strdup_r+0x22>
   db096:	462a      	mov	r2, r5
   db098:	4621      	mov	r1, r4
   db09a:	f7ff ff66 	bl	daf6a <memcpy>
   db09e:	4630      	mov	r0, r6
   db0a0:	bd70      	pop	{r4, r5, r6, pc}

000db0a2 <strlen>:
   db0a2:	4603      	mov	r3, r0
   db0a4:	f813 2b01 	ldrb.w	r2, [r3], #1
   db0a8:	2a00      	cmp	r2, #0
   db0aa:	d1fb      	bne.n	db0a4 <strlen+0x2>
   db0ac:	1a18      	subs	r0, r3, r0
   db0ae:	3801      	subs	r0, #1
   db0b0:	4770      	bx	lr

000db0b2 <strncmp>:
   db0b2:	b530      	push	{r4, r5, lr}
   db0b4:	b182      	cbz	r2, db0d8 <strncmp+0x26>
   db0b6:	1e45      	subs	r5, r0, #1
   db0b8:	3901      	subs	r1, #1
   db0ba:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   db0be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   db0c2:	42a3      	cmp	r3, r4
   db0c4:	d106      	bne.n	db0d4 <strncmp+0x22>
   db0c6:	43ec      	mvns	r4, r5
   db0c8:	4414      	add	r4, r2
   db0ca:	42e0      	cmn	r0, r4
   db0cc:	d001      	beq.n	db0d2 <strncmp+0x20>
   db0ce:	2b00      	cmp	r3, #0
   db0d0:	d1f3      	bne.n	db0ba <strncmp+0x8>
   db0d2:	461c      	mov	r4, r3
   db0d4:	1b18      	subs	r0, r3, r4
   db0d6:	bd30      	pop	{r4, r5, pc}
   db0d8:	4610      	mov	r0, r2
   db0da:	bd30      	pop	{r4, r5, pc}

000db0dc <strnlen>:
   db0dc:	b510      	push	{r4, lr}
   db0de:	4603      	mov	r3, r0
   db0e0:	4401      	add	r1, r0
   db0e2:	428b      	cmp	r3, r1
   db0e4:	d004      	beq.n	db0f0 <strnlen+0x14>
   db0e6:	781a      	ldrb	r2, [r3, #0]
   db0e8:	1c5c      	adds	r4, r3, #1
   db0ea:	b10a      	cbz	r2, db0f0 <strnlen+0x14>
   db0ec:	4623      	mov	r3, r4
   db0ee:	e7f8      	b.n	db0e2 <strnlen+0x6>
   db0f0:	1a18      	subs	r0, r3, r0
   db0f2:	bd10      	pop	{r4, pc}

000db0f4 <strrchr>:
   db0f4:	b538      	push	{r3, r4, r5, lr}
   db0f6:	4603      	mov	r3, r0
   db0f8:	460d      	mov	r5, r1
   db0fa:	b141      	cbz	r1, db10e <strrchr+0x1a>
   db0fc:	2400      	movs	r4, #0
   db0fe:	4629      	mov	r1, r5
   db100:	4618      	mov	r0, r3
   db102:	f7ff ff89 	bl	db018 <strchr>
   db106:	b130      	cbz	r0, db116 <strrchr+0x22>
   db108:	1c43      	adds	r3, r0, #1
   db10a:	4604      	mov	r4, r0
   db10c:	e7f7      	b.n	db0fe <strrchr+0xa>
   db10e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db112:	f7ff bf81 	b.w	db018 <strchr>
   db116:	4620      	mov	r0, r4
   db118:	bd38      	pop	{r3, r4, r5, pc}
	...

000db11c <_strtol_r>:
   db11c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   db120:	4680      	mov	r8, r0
   db122:	4840      	ldr	r0, [pc, #256]	; (db224 <_strtol_r+0x108>)
   db124:	f8d0 9000 	ldr.w	r9, [r0]
   db128:	460f      	mov	r7, r1
   db12a:	463d      	mov	r5, r7
   db12c:	f815 4b01 	ldrb.w	r4, [r5], #1
   db130:	eb09 0004 	add.w	r0, r9, r4
   db134:	7840      	ldrb	r0, [r0, #1]
   db136:	f000 0008 	and.w	r0, r0, #8
   db13a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   db13e:	b108      	cbz	r0, db144 <_strtol_r+0x28>
   db140:	462f      	mov	r7, r5
   db142:	e7f2      	b.n	db12a <_strtol_r+0xe>
   db144:	2c2d      	cmp	r4, #45	; 0x2d
   db146:	d103      	bne.n	db150 <_strtol_r+0x34>
   db148:	1cbd      	adds	r5, r7, #2
   db14a:	787c      	ldrb	r4, [r7, #1]
   db14c:	2601      	movs	r6, #1
   db14e:	e003      	b.n	db158 <_strtol_r+0x3c>
   db150:	2c2b      	cmp	r4, #43	; 0x2b
   db152:	bf04      	itt	eq
   db154:	787c      	ldrbeq	r4, [r7, #1]
   db156:	1cbd      	addeq	r5, r7, #2
   db158:	b113      	cbz	r3, db160 <_strtol_r+0x44>
   db15a:	2b10      	cmp	r3, #16
   db15c:	d10a      	bne.n	db174 <_strtol_r+0x58>
   db15e:	e05b      	b.n	db218 <_strtol_r+0xfc>
   db160:	2c30      	cmp	r4, #48	; 0x30
   db162:	d157      	bne.n	db214 <_strtol_r+0xf8>
   db164:	7828      	ldrb	r0, [r5, #0]
   db166:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   db16a:	2858      	cmp	r0, #88	; 0x58
   db16c:	d14d      	bne.n	db20a <_strtol_r+0xee>
   db16e:	786c      	ldrb	r4, [r5, #1]
   db170:	2310      	movs	r3, #16
   db172:	3502      	adds	r5, #2
   db174:	2e00      	cmp	r6, #0
   db176:	bf14      	ite	ne
   db178:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   db17c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   db180:	2700      	movs	r7, #0
   db182:	fbbc faf3 	udiv	sl, ip, r3
   db186:	4638      	mov	r0, r7
   db188:	fb03 cc1a 	mls	ip, r3, sl, ip
   db18c:	eb09 0e04 	add.w	lr, r9, r4
   db190:	f89e e001 	ldrb.w	lr, [lr, #1]
   db194:	f01e 0f04 	tst.w	lr, #4
   db198:	d001      	beq.n	db19e <_strtol_r+0x82>
   db19a:	3c30      	subs	r4, #48	; 0x30
   db19c:	e00b      	b.n	db1b6 <_strtol_r+0x9a>
   db19e:	f01e 0e03 	ands.w	lr, lr, #3
   db1a2:	d01b      	beq.n	db1dc <_strtol_r+0xc0>
   db1a4:	f1be 0f01 	cmp.w	lr, #1
   db1a8:	bf0c      	ite	eq
   db1aa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   db1ae:	f04f 0e57 	movne.w	lr, #87	; 0x57
   db1b2:	ebce 0404 	rsb	r4, lr, r4
   db1b6:	42a3      	cmp	r3, r4
   db1b8:	dd10      	ble.n	db1dc <_strtol_r+0xc0>
   db1ba:	f1b7 3fff 	cmp.w	r7, #4294967295
   db1be:	d00a      	beq.n	db1d6 <_strtol_r+0xba>
   db1c0:	4550      	cmp	r0, sl
   db1c2:	d806      	bhi.n	db1d2 <_strtol_r+0xb6>
   db1c4:	d101      	bne.n	db1ca <_strtol_r+0xae>
   db1c6:	4564      	cmp	r4, ip
   db1c8:	dc03      	bgt.n	db1d2 <_strtol_r+0xb6>
   db1ca:	fb03 4000 	mla	r0, r3, r0, r4
   db1ce:	2701      	movs	r7, #1
   db1d0:	e001      	b.n	db1d6 <_strtol_r+0xba>
   db1d2:	f04f 37ff 	mov.w	r7, #4294967295
   db1d6:	f815 4b01 	ldrb.w	r4, [r5], #1
   db1da:	e7d7      	b.n	db18c <_strtol_r+0x70>
   db1dc:	1c7b      	adds	r3, r7, #1
   db1de:	d10c      	bne.n	db1fa <_strtol_r+0xde>
   db1e0:	2e00      	cmp	r6, #0
   db1e2:	f04f 0322 	mov.w	r3, #34	; 0x22
   db1e6:	bf14      	ite	ne
   db1e8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   db1ec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   db1f0:	f8c8 3000 	str.w	r3, [r8]
   db1f4:	b92a      	cbnz	r2, db202 <_strtol_r+0xe6>
   db1f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db1fa:	b106      	cbz	r6, db1fe <_strtol_r+0xe2>
   db1fc:	4240      	negs	r0, r0
   db1fe:	b172      	cbz	r2, db21e <_strtol_r+0x102>
   db200:	b107      	cbz	r7, db204 <_strtol_r+0xe8>
   db202:	1e69      	subs	r1, r5, #1
   db204:	6011      	str	r1, [r2, #0]
   db206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db20a:	2430      	movs	r4, #48	; 0x30
   db20c:	2b00      	cmp	r3, #0
   db20e:	d1b1      	bne.n	db174 <_strtol_r+0x58>
   db210:	2308      	movs	r3, #8
   db212:	e7af      	b.n	db174 <_strtol_r+0x58>
   db214:	230a      	movs	r3, #10
   db216:	e7ad      	b.n	db174 <_strtol_r+0x58>
   db218:	2c30      	cmp	r4, #48	; 0x30
   db21a:	d0a3      	beq.n	db164 <_strtol_r+0x48>
   db21c:	e7aa      	b.n	db174 <_strtol_r+0x58>
   db21e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db222:	bf00      	nop
   db224:	2003d85c 	.word	0x2003d85c

000db228 <strtol>:
   db228:	4613      	mov	r3, r2
   db22a:	460a      	mov	r2, r1
   db22c:	4601      	mov	r1, r0
   db22e:	4802      	ldr	r0, [pc, #8]	; (db238 <strtol+0x10>)
   db230:	6800      	ldr	r0, [r0, #0]
   db232:	f7ff bf73 	b.w	db11c <_strtol_r>
   db236:	bf00      	nop
   db238:	2003d8c0 	.word	0x2003d8c0

000db23c <tolower>:
   db23c:	4b04      	ldr	r3, [pc, #16]	; (db250 <tolower+0x14>)
   db23e:	681b      	ldr	r3, [r3, #0]
   db240:	4403      	add	r3, r0
   db242:	785b      	ldrb	r3, [r3, #1]
   db244:	f003 0303 	and.w	r3, r3, #3
   db248:	2b01      	cmp	r3, #1
   db24a:	bf08      	it	eq
   db24c:	3020      	addeq	r0, #32
   db24e:	4770      	bx	lr
   db250:	2003d85c 	.word	0x2003d85c

000db254 <dynalib_user>:
   db254:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   db264:	00000000                                ....

000db268 <_ZTVN5spark10LogHandlerE>:
	...
   db278:	000d40a9 000d40cd                       .@...@..

000db280 <_ZTVN5spark16SerialLogHandlerE>:
	...
   db288:	000d415d 000d4191 000d9191 000d40cf     ]A...A.......@..
   db298:	69706f54 25203a63 4d202e73 61737365     Topic: %s. Messa
   db2a8:	203a6567 53007325 6f736e65 20312072     ge: %s.Sensor 1 
   db2b8:	6554202d 7265706d 72757461 25203a65     - Temperature: %
   db2c8:	65642075 65657267 65432073 7569736c     u degrees Celsiu
   db2d8:	65530073 726f736e 2d203120 6d754820     s.Sensor 1 - Hum
   db2e8:	74696469 25203a79 00252575 736e6553     idity: %u%%.Sens
   db2f8:	3120726f 53202d20 206c696f 73696f6d     or 1 - Soil mois
   db308:	65727574 7525203a 53002525 6f736e65     ture: %u%%.Senso
   db318:	20312072 694c202d 3a746867 20752520     r 1 - Light: %u 
   db328:	0078754c 736e6553 3220726f 52202d20     Lux.Sensor 2 - R
   db338:	736e6961 6d616574 6425203a 65530020     ainsteam: %d .Se
   db348:	726f736e 2d203220 71694c20 20646975     nsor 2 - Liquid 
   db358:	6576656c 25203a6c 53002075 6f736e65     level: %u .Senso
   db368:	20322072 7548202d 206e616d 65746564     r 2 - Human dete
   db378:	726f7463 7525203a 6e655300 20726f73     ctor: %u.Sensor 
   db388:	202d2032 616d7548 6f6c206e 2e2e7473     2 - Human lost..
   db398:	6553002e 726f736e 2d203220 6d754820     ..Sensor 2 - Hum
   db3a8:	64206e61 63657465 21646574 6e655300     an detected!.Sen
   db3b8:	20726f73 202d2032 61766e49 2064696c     sor 2 - Invalid 
   db3c8:	616d7568 6564206e 74636574 6d20726f     human detector m
   db3d8:	61737365 202e6567 65707845 64657463     essage. Expected
   db3e8:	6f203020 2c312072 63657220 65766965      0 or 1, receive
   db3f8:	75252064 72756300 746e6572 73696f4d     d %u.currentMois
   db408:	65727574 6425203a 72756300 746e6572     ture: %d.current
   db418:	6867694c 25203a74 75630064 6e657272     Light: %d.curren
   db428:	6d655474 61726570 65727574 6425203a     tTemperature: %d
   db438:	72756300 746e6572 696d7548 79746964     .currentHumidity
   db448:	6425203a 696e6900 74615774 6e697265     : %d.initWaterin
   db458:	61745367 3a737574 00642520 65747942     gStatus: %d.Byte
   db468:	3a642520 00752520 66667562 73207265      %d: %u.buffer s
   db478:	3a657a69 00642520 63656c65 30343734     ize: %d.elec4740
   db488:	642f3667 00617461 6e756f46 20612064     g6/data.Found a 
   db498:	65756c62 746f6f74 65642068 65636976     bluetooth device
   db4a8:	6441002e 73657264 00203a73 6e756f46     ..Address: .Foun
   db4b8:	55552064 203a4449 6e655300 4e726f73     d UUID: .SensorN
   db4c8:	3165646f 49555520 00203a44 736e6553     ode1 UUID: .Sens
   db4d8:	6f4e726f 20326564 44495555 5300203a     orNode2 UUID: .S
   db4e8:	65636375 75667373 20796c6c 6e6e6f63     uccessfully conn
   db4f8:	65746365 6f742064 6e657320 20726f73     ected to sensor 
   db508:	65646f6e 00213120 62663932 35663361     node 1!.29fba3f5
   db518:	6563342d 36342d38 382d6362 2d353764     -4ce8-46bc-8d75-
   db528:	30383737 32626436 31336332 61393900     77806db22c31.99a
   db538:	66326430 63312d39 342d6166 2d336232     0d2f9-1cfa-42b3-
   db548:	61623562 3462312d 34333464 32393331     b5ba-1b4d4341392
   db558:	35340066 61346562 342d3635 2d356638     f.45be4a56-48f5-
   db568:	63333834 6262382d 33642d31 34656566     483c-8bb1-d3fee4
   db578:	32633333 65006333 34323561 2d346138     33c23c.ea5248a4-
   db588:	63633334 3931342d 34612d38 372d6161     43cc-4198-a4aa-7
   db598:	30303239 30353761 00353338 6c696146     9200a750835.Fail
   db5a8:	74206465 6f63206f 63656e6e 6f742074     ed to connect to
   db5b8:	6e657320 20726f73 65646f6e 002e3120      sensor node 1..
   db5c8:	736e6553 6e20726f 2065646f 6c612031     Sensor node 1 al
   db5d8:	64616572 6f632079 63656e6e 2e646574     ready connected.
   db5e8:	63755300 73736563 6c6c7566 6f632079     .Successfully co
   db5f8:	63656e6e 20646574 73206f74 6f736e65     nnected to senso
   db608:	6f6e2072 32206564 63620021 38316637     r node 2!.bc7f18
   db618:	322d3964 2d333463 65383034 3265622d     d9-2c43-408e-be2
   db628:	32362d35 36303466 38393534 38006337     5-62f40645987c.8
   db638:	32616238 2d643566 38396531 6139342d     8ba2f5d-1e98-49a
   db648:	36382d66 642d3739 36313530 33306664     f-8697-d0516df03
   db658:	00396562 32383462 31353564 6133632d     be9.b482d551-c3a
   db668:	64342d65 622d6564 2d353231 34326563     e-4dde-b125-ce24
   db678:	38376434 30623639 30373900 37363731     4d7896b0.9701767
   db688:	36392d34 342d3531 2d616266 32313739     4-9615-4fba-9712
   db698:	3238362d 30326639 33383534 61460036     -6829f2045836.Fa
   db6a8:	64656c69 206f7420 6e6e6f63 20746365     iled to connect 
   db6b8:	73206f74 6f736e65 6f6e2072 32206564     to sensor node 2
   db6c8:	6553002e 726f736e 646f6e20 20322065     ..Sensor node 2 
   db6d8:	65726c61 20796461 6e6e6f63 65746365     already connecte
   db6e8:	25002e64 65642064 65636976 6f662073     d..%d devices fo
   db6f8:	00646e75 756f6241 6f742074 61637320     und.About to sca
   db708:	2e2e2e6e 756f4600 7320646e 6f736e65     n....Found senso
   db718:	6f6e2072 31206564 6f46002e 20646e75     r node 1..Found 
   db728:	736e6573 6e20726f 2065646f 46002e32     sensor node 2..F
   db738:	756c6961 64206572 74206575 6572206f     ailure due to re
   db748:	6e6f7361 00642520 65696c63 3231746e     ason %d.client12
   db758:	65740033 6d2e7473 7571736f 6f747469     3.test.mosquitto
   db768:	67726f2e 72707300 6c6b6e69 77537265     .org.sprinklerSw
   db778:	68637469 726f6600 714d6563 75507474     itch.forceMqttPu
   db788:	73696c62 65730068 776f4c74 6c696f53     blish.setLowSoil
   db798:	73696f4d 65727574 65726854 6c6f6873     MoistureThreshol
   db7a8:	65730064 67694874 696f5368 696f4d6c     d.setHighSoilMoi
   db7b8:	72757473 72685465 6f687365 7300646c     stureThreshold.s
   db7c8:	65547465 7265706d 72757461 72685465     etTemperatureThr
   db7d8:	6f687365 7300646c 69417465 6d754872     eshold.setAirHum
   db7e8:	74696469 72685479 6f687365 7300646c     idityThreshold.s
   db7f8:	75537465 4c796e6e 74686769 65726854     etSunnyLightThre
   db808:	6c6f6873 514d0064 63205454 656e6e6f     shold.MQTT conne
   db818:	6f697463 6166206e 72756c69 283a2065     ction failure :(
   db828:	6c654800 77206f6c 646c726f 656c6500     .Hello world.ele
   db838:	34373463 2f366730 74736574 54514d00     c4740g6/test.MQT
   db848:	6f632054 63656e6e 64657463 63757320     T conneccted suc
   db858:	73736563 6c6c7566 6f002179 666f006e     cessfully!.on.of
   db868:	35370066 66626534 632d6535 2d313365     f.754ebf5e-ce31-
   db878:	30303334 6466392d 38612d35 65346266     4300-9fd5-a8fb4e
   db888:	38613465 39003131 38323737 2d396461     e4a811.97728ad9-
   db898:	38393961 3236342d 38622d39 652d3535     a998-4629-b855-e
   db8a8:	35363265 30616338 00376631              e2658ca01f7.

000db8b4 <_ZL29MQTT5_DEFAULT_CONNECT_OPTIONS>:
   db8b4:	00000001 0000003c 00000000 00000000     ....<...........
	...
   db8d0:	000db8d4                                ....

000db8d4 <_ZL32MQTT5_DEFAULT_CONNECT_PROPERTIES>:
   db8d4:	00000000 0000ffff 00000000 0000000a     ................

000db8e4 <._379>:
   db8e4:	5454514d 2e707061 5454514d 6c614d00     MQTTapp.MQTT.Mal
   db8f4:	6d726f66 56206465 61697261 20656c62     formed Variable 
   db904:	65747942 746e4920 72656765 6b636100     Byte Integer.ack
   db914:	63657200 63655200 65766965 75702064     .rec.Received pu
   db924:	73696c62 73252068 726f6620 63617020     blish %s for pac
   db934:	2074656b 61206425 7220646e 6f707365     ket %d and respo
   db944:	2065736e 52006425 69656365 20646576     nse %d.Received 
   db954:	6c627570 20687369 706d6f63 6574656c     publish complete
   db964:	726f6620 63617020 2074656b 61206425      for packet %d a
   db974:	7220646e 6f707365 2065736e 52006425     nd response %d.R
   db984:	69656365 20646576 73627573 70697263     eceived subscrip
   db994:	6e6f6974 6b636120 726f6620 63617020     tion ack for pac
   db9a4:	2074656b 61206425 7320646e 63736275     ket %d and subsc
   db9b4:	74706972 206e6f69 65646e69 64252078     ription index %d
   db9c4:	646e6120 73657220 736e6f70 64252065      and response %d
   db9d4:	63655200 65766965 6e752064 73627573     .Received unsubs
   db9e4:	70697263 6e6f6974 6b636120 726f6620     cription ack for
   db9f4:	63617020 2074656b 61206425 7320646e      packet %d and s
   dba04:	63736275 74706972 206e6f69 65646e69     ubscription inde
   dba14:	64252078 646e6120 73657220 736e6f70     x %d and respons
   dba24:	64252065 73655300 6e6f6973 70784520     e %d.Session Exp
   dba34:	20797269 65746e49 6c617672 6c25203a     iry Interval: %l
   dba44:	65520064 76696563 614d2065 756d6978     d.Receive Maximu
   dba54:	25203a6d 614d0064 756d6978 6f51206d     m: %d.Maximum Qo
   dba64:	25203a53 65520064 6e696174 61764120     S: %d.Retain Ava
   dba74:	62616c69 203a656c 4d006425 6d697861     ilable: %d.Maxim
   dba84:	50206d75 656b6361 69532074 203a657a     um Packet Size: 
   dba94:	00646c25 69737341 64656e67 696c4320     %ld.Assigned Cli
   dbaa4:	20746e65 6e656449 69666974 203a7265     ent Identifier: 
   dbab4:	54007325 6369706f 696c4120 4d207361     %s.Topic Alias M
   dbac4:	6d697861 203a6d75 52006425 6f736165     aximum: %d.Reaso
   dbad4:	7453206e 676e6972 7325203a 65735500     n String: %s.Use
   dbae4:	72502072 7265706f 57007974 63646c69     r Property.Wildc
   dbaf4:	20647261 73627553 70697263 6e6f6974     ard Subscription
   dbb04:	61764120 62616c69 203a656c 53006425      Available: %d.S
   dbb14:	63736275 74706972 206e6f69 6e656449     ubscription Iden
   dbb24:	69666974 20737265 69617641 6c62616c     tifiers Availabl
   dbb34:	25203a65 68530064 64657261 62755320     e: %d.Shared Sub
   dbb44:	69726373 6f697470 7641206e 616c6961     scription Availa
   dbb54:	3a656c62 00642520 76726553 4b207265     ble: %d.Server K
   dbb64:	20706565 76696c41 25203a65 65520064     eep Alive: %d.Re
   dbb74:	6e6f7073 49206573 726f666e 6974616d     sponse Informati
   dbb84:	203a6e6f 53007325 65767265 65522072     on: %s.Server Re
   dbb94:	65726566 3a65636e 00732520 68747541     ference: %s.Auth
   dbba4:	69746e65 69746163 4d206e6f 6f687465     entication Metho
   dbbb4:	25203a64 75410073 6e656874 61636974     d: %s.Authentica
   dbbc4:	6e6f6974 74614420 6e550061 776f6e6b     tion Data.Unknow
   dbbd4:	6f63206e 63656e6e 72702074 7265706f     n connect proper
   dbbe4:	50007974 6f6c7961 46206461 616d726f     ty.Payload Forma
   dbbf4:	6e492074 61636964 3a726f74 00642520     t Indicator: %d.
   dbc04:	7373654d 20656761 69707845 49207972     Message Expiry I
   dbc14:	7265746e 3a6c6176 646c2520 706f5400     nterval: %ld.Top
   dbc24:	41206369 7361696c 6425203a 73655200     ic Alias: %d.Res
   dbc34:	736e6f70 6f542065 3a636970 00732520     ponse Topic: %s.
   dbc44:	72726f43 74616c65 206e6f69 61746144     Correlation Data
   dbc54:	62755300 69726373 6f697470 6449206e     .Subscription Id
   dbc64:	69746e65 72656966 6e6f4300 746e6574     entifier.Content
   dbc74:	70795420 25203a65 6e550073 776f6e6b      Type: %s.Unknow
   dbc84:	7570206e 73696c62 72702068 7265706f     n publish proper
   dbc94:	50007974 656b6361 78652074 64656563     ty.Packet exceed
   dbca4:	616d2073 61702078 74656b63 7a697320     s max packet siz
   dbcb4:	64252065 6e655300 676e6964 6e697020     e %d.Sending pin
   dbcc4:	65722067 73657571 65530074 6e69646e     g request.Sendin
   dbcd4:	69642067 6e6f6373 7463656e 74697720     g disconnect wit
   dbce4:	65722068 6e6f7361 00642520 646e6553     h reason %d.Send
   dbcf4:	20676e69 6c627570 20687369 206b6361     ing publish ack 
   dbd04:	20726f66 6b636170 25207465 65530064     for packet %d.Se
   dbd14:	6e69646e 75702067 73696c62 65722068     nding publish re
   dbd24:	6f662063 61702072 74656b63 00642520     c for packet %d.
   dbd34:	65636552 64657669 63617020 2074656b     Received packet 
   dbd44:	20726f66 69706f74 73252063 74697720     for topic %s wit
   dbd54:	64692068 20642520 20646e61 676e656c     h id %d and leng
   dbd64:	25206874 65520064 76696563 70206465     th %d.Received p
   dbd74:	656b6361 6f662074 6f742072 20636970     acket for topic 
   dbd84:	77207325 20687469 676e656c 25206874     %s with length %
   dbd94:	65530064 6e69646e 75702067 73696c62     d.Sending publis
   dbda4:	6f632068 6620706d 7020726f 656b6361     h comp for packe
   dbdb4:	64252074 63655200 65766965 75702064     t %d.Received pu
   dbdc4:	73696c62 65722068 6f66206c 61702072     blish rel for pa
   dbdd4:	74656b63 20642520 20646e61 70736572     cket %d and resp
   dbde4:	65736e6f 00642520 73627553 62697263     onse %d.Subscrib
   dbdf4:	61772065 73692073 64657573 726f6620     e was issued for
   dbe04:	20642520 69706f74 77207363 20687469      %d topics with 
   dbe14:	6b636170 69207465 64252064 736e5500     packet id %d.Uns
   dbe24:	63736275 65626972 73617720 73736920     ubscribe was iss
   dbe34:	20646575 20726f66 74206425 6369706f     ued for %d topic
   dbe44:	69772073 70206874 656b6361 64692074     s with packet id
   dbe54:	00642520 6c627550 20687369 656c6572      %d.Publish rele
   dbe64:	20657361 20726f66 6b636170 25207465     ase for packet %
   dbe74:	75500064 73696c62 676e6968 63617020     d.Publishing pac
   dbe84:	2074656b 68746977 20646920 69206425     ket with id %d i
   dbe94:	6f74206e 20636970 77207325 20687469     n topic %s with 
   dbea4:	676e656c 25206874 75500064 73696c62     length %d.Publis
   dbeb4:	676e6968 63617020 2074656b 74206e69     hing packet in t
   dbec4:	6369706f 20732520 68746977 6e656c20     opic %s with len
   dbed4:	20687467 55006425 676e6973 706f7420     gth %d.Using top
   dbee4:	61206369 7361696c 00642520 69706f54     ic alias %d.Topi
   dbef4:	73252063 73617720 73736120 656e6769     c %s was assigne
   dbf04:	6f742064 696c6120 25207361 75530064     d to alias %d.Su
   dbf14:	73656363 6c756673 6320796c 656e6e6f     ccessfully conne
   dbf24:	64657463 69614600 2064656c 63206f74     cted.Failed to c
   dbf34:	656e6e6f 202e7463 73616552 203a6e6f     onnect. Reason: 
   dbf44:	52006425 69656365 20646576 63736964     %d.Received disc
   dbf54:	656e6e6f 66207463 206d6f72 76726573     onnect from serv
   dbf64:	64207265 74206575 6572206f 6e6f7361     er due to reason
   dbf74:	00642520 6f6b6e55 63206e77 72746e6f      %d.Unkown contr
   dbf84:	70206c6f 656b6361 79742074 25206570     ol packet type %
   dbf94:	6f530064 64656b63 6f6c6320 00646573     d.Socked closed.
   dbfa4:	6e6e6f43 20746365 656d6974 756f2064     Connect timed ou
   dbfb4:	61500074 74656b63 746f6e20 6d6f6320     t.Packet not com
   dbfc4:	74656c70 65520065 76696563 70206465     plete.Received p
   dbfd4:	656b6361 79742074 25206570 69772064     acket type %d wi
   dbfe4:	6c206874 74676e65 64252068 6e695000     th length %d.Pin
   dbff4:	6f632067 20646c75 20746f6e 73206562     g could not be s
   dc004:	00746e65 676e6950 73657220 736e6f70     ent.Ping respons
   dc014:	6f6e2065 65722074 76696563 79206465     e not received y
   dc024:	202e7465 65736552 6e69646e 69702067     et. Resending pi
   dc034:	7220676e 65757165 41007473 74696177     ng request.Await
   dc044:	63617020 2074656b 736b6361 6c6c4100      packet acks.All
   dc054:	63617020 7374656b 6b636120 6c776f6e      packets acknowl
   dc064:	65676465 77410064 20746961 656d6974     edged.Await time
   dc074:	756f2064 6f430074 63656e6e 676e6974     d out.Connecting
   dc084:	206f7420 76726573 25207265 6e6f2073      to server %s on
   dc094:	726f7020 64252074 6e6f4300 7463656e      port %d.Connect
   dc0a4:	20676e69 73206f74 65767265 64252072     ing to server %d
   dc0b4:	2e64252e 252e6425 6e6f2064 726f7020     .%d.%d.%d on por
   dc0c4:	64252074 756f4300 6e20646c 6f20746f     t %d.Could not o
   dc0d4:	206e6570 20504354 6e6e6f63 69746365     pen TCP connecti
   dc0e4:	74206e6f 6573206f 72657672 726c4100     on to server.Alr
   dc0f4:	79646165 6e6f6320 7463656e 74206465     eady connected t
   dc104:	6573206f 72657672 00000000              o server....

000dc110 <_ZL32MQTT5_DEFAULT_PUBLISH_PROPERTIES>:
	...

000dc128 <_ZTVN5spark13EthernetClassE>:
	...
   dc130:	000d69c7 000d69bd 000d69b3 000d69a9     .i...i...i...i..
   dc140:	000d699d 000d6991 000d6985 000d697d     .i...i...i..}i..
   dc150:	000d6973 000d6969 000da7ed              si..ii......

000dc15c <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc164:	000d6bd5 000d6bdb 000d8121 000d6c05     .k...k..!....l..
   dc174:	000d6bd7                                .k..

000dc178 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc180:	000d6bcf 000d6be9 000d82dd 000d6c09     .k...k.......l..
   dc190:	000d6bd1                                .k..

000dc194 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc19c:	000d6bc9 000d6bf7 000d7833 000d6c0d     .k...k..3x...l..
   dc1ac:	000d6bcb 69726977 622e676e 5300656c     .k..wiring.ble.S
   dc1bc:	74726174 73696420 65766f63 676e6972     tart discovering
   dc1cc:	72657320 65636976 53002e73 74726174      services..Start
   dc1dc:	73696420 65766f63 676e6972 61686320      discovering cha
   dc1ec:	74636172 73697265 73636974 6550002e     racteristics..Pe
   dc1fc:	64207265 63697665 73692065 73696d20     er device is mis
   dc20c:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   dc21c:	65707061 7020646e 20726565 746e6543     append peer Cent
   dc22c:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   dc23c:	65746365 79622064 6e654320 6c617274     ected by Central
   dc24c:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   dc25c:	65746365 79622064 6d657220 2065746f     ected by remote 
   dc26c:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   dc27c:	6e206464 70207765 20726565 69766564     dd new peer devi
   dc28c:	002e6563 2077654e 69726570 72656870     ce..New peripher
   dc29c:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   dc2ac:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   dc2bc:	69642064 766f6373 64657265 61686320     d discovered cha
   dc2cc:	74636172 73697265 2e636974 69614600     racteristic..Fai
   dc2dc:	2064656c 61206f74 6e657070 69642064     led to append di
   dc2ec:	766f6373 64657265 72657320 65636976     scovered service
   dc2fc:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   dc30c:	6c20646e 6c61636f 61686320 74636172     nd local charact
   dc31c:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   dc32c:	20646574 72616863 65746361 74736972     ted characterist
   dc33c:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   dc34c:	002e6465                                ed..

000dc350 <_ZN8particle7BleUuid9BASE_UUIDE>:
   dc350:	5f9b34fb 80000080 00001000 00000000     .4._............

000dc360 <_ZTVN5spark16JSONStreamWriterE>:
	...
   dc368:	000d856d 000d8593 000d8547 000da8fb     m.......G.......

000dc378 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   dc380:	000d89e9 000d89fd 000d9345 000d854f     ........E...O...
   dc390:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   dc3a0:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   dc3b0:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   dc3c0:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   dc3d0:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   dc3e0:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   dc3f0:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   dc400:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   dc410:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   dc420:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   dc430:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   dc440:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   dc450:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   dc460:	61700072 0063696e 006c6c61              r.panic.all.

000dc46c <_ZTVN5spark16StreamLogHandlerE>:
	...
   dc474:	000d89bd 000d89d5 000d9191 000d40cf     .............@..

000dc484 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   dc48c:	000d856b 000d85a1 000d90b9 000d8551     k...........Q...

000dc49c <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   dc4a4:	000d8569 000d85af 000d8901 000d85bd     i...............
   dc4b4:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   dc4c4:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   dc4d4:	63736100 656d6974 00000000              .asctime....

000dc4e0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dc4e8:	000d96a9 000d96af 000d96f3 000d96bd     ................
   dc4f8:	000d96ab                                ....

000dc4fc <_ZTV9IPAddress>:
	...
   dc504:	000d9c99 000d9c89 000d9c8b              ............

000dc510 <_ZTV9USBSerial>:
	...
   dc518:	000d9db1 000d9e01 000d9e0f 000d8429     ............)...
   dc528:	000d9ded 000d9db3 000d9dc9 000d9dfb     ................
   dc538:	000d9ddf 000d9dad                       ........

000dc540 <_ZTV11USARTSerial>:
	...
   dc548:	000d9ec5 000d9f15 000d9f23 000d8429     ........#...)...
   dc558:	000d9ed9 000d9efb 000d9ee7 000d9f0f     ................
   dc568:	000d9ec7 000d9ecb                       ........

000dc570 <_ZTVN5spark9MeshClassE>:
	...
   dc578:	000da05b 000da051 000da047 000da03d     [...Q...G...=...
   dc588:	000da031 000da025 000da019 000da011     1...%...........
   dc598:	000da007 000d9ffd 000da7ed              ............

000dc5a4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   dc5ac:	000da201 000da207 000da6ef 000da215     ................
   dc5bc:	000da203                                ....

000dc5c0 <_ZTV9TCPClient>:
	...
   dc5c8:	000d4e45 000d4e79 000da179 000da193     EN..yN..y.......
   dc5d8:	000da595 000da2e7 000da2b9 000da1bd     ................
   dc5e8:	000da471 000da36d 000da31b 000da565     q...m.......e...
   dc5f8:	000da1bf 000da1f7 000da1a5 000da219     ................
   dc608:	000da299 69726977 7200676e 20766365     ....wiring.recv 
   dc618:	6f727265 203d2072 00006425              error = %d..

000dc624 <_ZTVN5spark9WiFiClassE>:
	...
   dc62c:	000da765 000da75b 000da751 000da707     e...[...Q.......
   dc63c:	000da745 000da739 000da72d 000da725     E...9...-...%...
   dc64c:	000da71b 000da711 000da7ed              ............

000dc658 <_ZTVN5spark12NetworkClassE>:
	...
   dc660:	000da785 000da78f 000da799 000da7a3     ................
   dc670:	000da7ad 000da7b9 000da7c5 000da7d1     ................
   dc680:	000da7d9 000da7e3 000da7ed 00302e30     ............0.0.
   dc690:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   dc6a0:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000dc6af <_ZSt7nothrow>:
	...

000dc6b0 <_ctype_>:
   dc6b0:	20202000 20202020 28282020 20282828     .         ((((( 
   dc6c0:	20202020 20202020 20202020 20202020                     
   dc6d0:	10108820 10101010 10101010 10101010      ...............
   dc6e0:	04040410 04040404 10040404 10101010     ................
   dc6f0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   dc700:	01010101 01010101 01010101 10101010     ................
   dc710:	42421010 42424242 02020202 02020202     ..BBBBBB........
   dc720:	02020202 02020202 02020202 10101010     ................
   dc730:	00000020 00000000 00000000 00000000      ...............
	...

000dc7b4 <__sf_fake_stdin>:
	...

000dc7d4 <__sf_fake_stdout>:
	...

000dc7f4 <__sf_fake_stderr>:
	...
   dc814:	00000043                                         C.

000dc816 <link_const_variable_data_end>:
	...

000dc818 <link_constructors_location>:
   dc818:	000d4c1d 	.word	0x000d4c1d
   dc81c:	000d4e8d 	.word	0x000d4e8d
   dc820:	000d4e91 	.word	0x000d4e91
   dc824:	000d6347 	.word	0x000d6347
   dc828:	000d69d1 	.word	0x000d69d1
   dc82c:	000d69e5 	.word	0x000d69e5
   dc830:	000d8401 	.word	0x000d8401
   dc834:	000d9181 	.word	0x000d9181
   dc838:	000d9529 	.word	0x000d9529
   dc83c:	000d957d 	.word	0x000d957d
   dc840:	000da129 	.word	0x000da129
   dc844:	000da771 	.word	0x000da771
   dc848:	000da8b9 	.word	0x000da8b9
   dc84c:	000dac99 	.word	0x000dac99
   dc850:	000dad1d 	.word	0x000dad1d
   dc854:	000dade1 	.word	0x000dade1
   dc858:	000daea5 	.word	0x000daea5

000dc85c <link_constructors_end>:
   dc85c:	00000000 	.word	0x00000000
