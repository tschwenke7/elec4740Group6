
c:/Users/tschw/repos/elec4740Group6/clusterhead/target/1.5.0/argon/clusterhead.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005304  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9320  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000074  2003d8cc  000d9324  0001d8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000eb0  2003d940  2003d940  0002d940  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9398  000d9398  00029398  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d93c0  000d93c0  000293c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000bd32d  00000000  00000000  000293c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000daeb  00000000  00000000  000e66f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001d296  00000000  00000000  000f41dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002528  00000000  00000000  00111472  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000045c8  00000000  00000000  0011399a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002f471  00000000  00000000  00117f62  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001f25a  00000000  00000000  001473d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00101928  00000000  00000000  0016662d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ce4c  00000000  00000000  00267f58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fac6 	bl	d85be <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 fae6 	bl	d860a <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003d8cc 	.word	0x2003d8cc
   d4048:	000d9324 	.word	0x000d9324
   d404c:	2003d940 	.word	0x2003d940
   d4050:	2003d940 	.word	0x2003d940
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fc15 	bl	d7888 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9314 	.word	0x000d9314
   d4080:	000d92dc 	.word	0x000d92dc

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b906 	b.w	d4294 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f953 	bl	d4334 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 bbbb 	b.w	d780c <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 be0f 	b.w	d4cb8 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 be15 	b.w	d4cc8 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 be13 	b.w	d4cc8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f000 fd68 	bl	d4b80 <panic_>
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4911 	.word	0x000d4911

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40d4:	4b0a      	ldr	r3, [pc, #40]	; (d4100 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
   d40da:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40dc:	f002 fcd0 	bl	d6a80 <_ZN5spark10LogManager8instanceEv>
   d40e0:	4621      	mov	r1, r4
   d40e2:	f002 febd 	bl	d6e60 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40e6:	f003 fcd3 	bl	d7a90 <_Z16_fetch_usbserialv>
   d40ea:	f003 fcc5 	bl	d7a78 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40ee:	4620      	mov	r0, r4
   d40f0:	4b04      	ldr	r3, [pc, #16]	; (d4104 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d40f2:	f840 3b04 	str.w	r3, [r0], #4
   d40f6:	f002 fdb9 	bl	d6c6c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40fa:	4620      	mov	r0, r4
   d40fc:	bd10      	pop	{r4, pc}
   d40fe:	bf00      	nop
   d4100:	000d888c 	.word	0x000d888c
   d4104:	000d8874 	.word	0x000d8874

000d4108 <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4108:	b510      	push	{r4, lr}
   d410a:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d410c:	f7ff ffe2 	bl	d40d4 <_ZN5spark16SerialLogHandlerD1Ev>
   d4110:	4620      	mov	r0, r4
   d4112:	2124      	movs	r1, #36	; 0x24
   d4114:	f004 f8dc 	bl	d82d0 <_ZdlPvj>
   d4118:	4620      	mov	r0, r4
   d411a:	bd10      	pop	{r4, pc}

000d411c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d411c:	b40e      	push	{r1, r2, r3}
   d411e:	b500      	push	{lr}
   d4120:	b08c      	sub	sp, #48	; 0x30
   d4122:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4124:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4126:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d412a:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d412c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4130:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4132:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4134:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4136:	aa04      	add	r2, sp, #16
   d4138:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d413a:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d413c:	f000 fd30 	bl	d4ba0 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4140:	b00c      	add	sp, #48	; 0x30
   d4142:	f85d eb04 	ldr.w	lr, [sp], #4
   d4146:	b003      	add	sp, #12
   d4148:	4770      	bx	lr
	...

000d414c <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
        }
    }
}

/* These functions are where we do something with the data (in bytes) we've received via bluetooth */
void onTemperatureReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d414c:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d414e:	8803      	ldrh	r3, [r0, #0]
   d4150:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 1 - Temperature: %u", twoByteValue);
   d4154:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4158:	4903      	ldr	r1, [pc, #12]	; (d4168 <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d415a:	4804      	ldr	r0, [pc, #16]	; (d416c <_Z22onTemperatureReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d415c:	f7ff ffde 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
}
   d4160:	b003      	add	sp, #12
   d4162:	f85d fb04 	ldr.w	pc, [sp], #4
   d4166:	bf00      	nop
   d4168:	000d889c 	.word	0x000d889c
   d416c:	2003e40c 	.word	0x2003e40c

000d4170 <_Z16onLightReceived1PKhjRKN8particle13BlePeerDeviceEPv>:
void onLightReceived1(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4170:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4172:	8803      	ldrh	r3, [r0, #0]
   d4174:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 1 - Light: %u", twoByteValue);
   d4178:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d417c:	4903      	ldr	r1, [pc, #12]	; (d418c <_Z16onLightReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d417e:	4804      	ldr	r0, [pc, #16]	; (d4190 <_Z16onLightReceived1PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4180:	f7ff ffcc 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
}
   d4184:	b003      	add	sp, #12
   d4186:	f85d fb04 	ldr.w	pc, [sp], #4
   d418a:	bf00      	nop
   d418c:	000d88b7 	.word	0x000d88b7
   d4190:	2003e40c 	.word	0x2003e40c

000d4194 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onHumidityReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4194:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4196:	8803      	ldrh	r3, [r0, #0]
   d4198:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 1 - Humidity: %u", twoByteValue);
   d419c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d41a0:	4903      	ldr	r1, [pc, #12]	; (d41b0 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41a2:	4804      	ldr	r0, [pc, #16]	; (d41b4 <_Z18onHumidityReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41a4:	f7ff ffba 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
}
   d41a8:	b003      	add	sp, #12
   d41aa:	f85d fb04 	ldr.w	pc, [sp], #4
   d41ae:	bf00      	nop
   d41b0:	000d88cc 	.word	0x000d88cc
   d41b4:	2003e40c 	.word	0x2003e40c

000d41b8 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDistanceReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41b8:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d41ba:	8803      	ldrh	r3, [r0, #0]
   d41bc:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 1 - Distance: %u", twoByteValue);
   d41c0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d41c4:	4903      	ldr	r1, [pc, #12]	; (d41d4 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41c6:	4804      	ldr	r0, [pc, #16]	; (d41d8 <_Z18onDistanceReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41c8:	f7ff ffa8 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
}
   d41cc:	b003      	add	sp, #12
   d41ce:	f85d fb04 	ldr.w	pc, [sp], #4
   d41d2:	bf00      	nop
   d41d4:	000d88e4 	.word	0x000d88e4
   d41d8:	2003e40c 	.word	0x2003e40c

000d41dc <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
void onTemperatureReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d41dc:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d41de:	8803      	ldrh	r3, [r0, #0]
   d41e0:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Temperature: %u", twoByteValue);
   d41e4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d41e8:	4903      	ldr	r1, [pc, #12]	; (d41f8 <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d41ea:	4804      	ldr	r0, [pc, #16]	; (d41fc <_Z22onTemperatureReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d41ec:	f7ff ff96 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
}
   d41f0:	b003      	add	sp, #12
   d41f2:	f85d fb04 	ldr.w	pc, [sp], #4
   d41f6:	bf00      	nop
   d41f8:	000d88fc 	.word	0x000d88fc
   d41fc:	2003e40c 	.word	0x2003e40c

000d4200 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv>:
void onLightReceived2(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4200:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4202:	8803      	ldrh	r3, [r0, #0]
   d4204:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Light: %u", twoByteValue);
   d4208:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d420c:	4903      	ldr	r1, [pc, #12]	; (d421c <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d420e:	4804      	ldr	r0, [pc, #16]	; (d4220 <_Z16onLightReceived2PKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4210:	f7ff ff84 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
}
   d4214:	b003      	add	sp, #12
   d4216:	f85d fb04 	ldr.w	pc, [sp], #4
   d421a:	bf00      	nop
   d421c:	000d8917 	.word	0x000d8917
   d4220:	2003e40c 	.word	0x2003e40c

000d4224 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onSoundReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4224:	b507      	push	{r0, r1, r2, lr}
    uint16_t twoByteValue;
    memcpy(&twoByteValue, &data[0], sizeof(uint16_t));
   d4226:	8803      	ldrh	r3, [r0, #0]
   d4228:	f8ad 3006 	strh.w	r3, [sp, #6]
    Log.info("Sensor 2 - Sound: %u", twoByteValue);
   d422c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   d4230:	4903      	ldr	r1, [pc, #12]	; (d4240 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>)
   d4232:	4804      	ldr	r0, [pc, #16]	; (d4244 <_Z15onSoundReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x20>)
   d4234:	f7ff ff72 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
}
   d4238:	b003      	add	sp, #12
   d423a:	f85d fb04 	ldr.w	pc, [sp], #4
   d423e:	bf00      	nop
   d4240:	000d892c 	.word	0x000d892c
   d4244:	2003e40c 	.word	0x2003e40c

000d4248 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onHumanDetectorReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4248:	b513      	push	{r0, r1, r4, lr}
    uint16_t humanSeen;
    memcpy(&humanSeen, &data[0], sizeof(uint8_t));
   d424a:	7803      	ldrb	r3, [r0, #0]
   d424c:	f88d 3006 	strb.w	r3, [sp, #6]
    Log.info("Sensor 2 - Human detector: %u", humanSeen);
   d4250:	f8bd 4006 	ldrh.w	r4, [sp, #6]
   d4254:	490a      	ldr	r1, [pc, #40]	; (d4280 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x38>)
   d4256:	480b      	ldr	r0, [pc, #44]	; (d4284 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d4258:	4622      	mov	r2, r4
   d425a:	f7ff ff5f 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
    if(humanSeen == 0x00){
   d425e:	b90c      	cbnz	r4, d4264 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x1c>
        Log.info("Sensor 2 - Human lost...");
   d4260:	4909      	ldr	r1, [pc, #36]	; (d4288 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x40>)
   d4262:	e002      	b.n	d426a <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x22>
    }
    else if (humanSeen == 0x01){
   d4264:	2c01      	cmp	r4, #1
   d4266:	d104      	bne.n	d4272 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2a>
        Log.info("Sensor 2 - Human detected!");
   d4268:	4908      	ldr	r1, [pc, #32]	; (d428c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>)
   d426a:	4806      	ldr	r0, [pc, #24]	; (d4284 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d426c:	f7ff ff56 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d4270:	e004      	b.n	d427c <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x34>
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
   d4272:	4622      	mov	r2, r4
   d4274:	4906      	ldr	r1, [pc, #24]	; (d4290 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x48>)
   d4276:	4803      	ldr	r0, [pc, #12]	; (d4284 <_Z23onHumanDetectorReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x3c>)
   d4278:	f7ff ff50 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
    }
   d427c:	b002      	add	sp, #8
   d427e:	bd10      	pop	{r4, pc}
   d4280:	000d8941 	.word	0x000d8941
   d4284:	2003e40c 	.word	0x2003e40c
   d4288:	000d895f 	.word	0x000d895f
   d428c:	000d8978 	.word	0x000d8978
   d4290:	000d8993 	.word	0x000d8993

000d4294 <setup>:

// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];

void setup() {
   d4294:	b508      	push	{r3, lr}
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning

    BLE.on();
   d4296:	f001 fb51 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d429a:	f001 fb95 	bl	d59c8 <_ZNK8particle14BleLocalDevice2onEv>
    
    //map functions to be called whenever new data is received for a characteristic
    temperatureSensorCharacteristic1.onDataReceived(onTemperatureReceived1, NULL);
   d429e:	2200      	movs	r2, #0
   d42a0:	4914      	ldr	r1, [pc, #80]	; (d42f4 <setup+0x60>)
   d42a2:	4815      	ldr	r0, [pc, #84]	; (d42f8 <setup+0x64>)
   d42a4:	f001 fa7c 	bl	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    lightSensorCharacteristic1.onDataReceived(onLightReceived1, NULL);
   d42a8:	2200      	movs	r2, #0
   d42aa:	4914      	ldr	r1, [pc, #80]	; (d42fc <setup+0x68>)
   d42ac:	4814      	ldr	r0, [pc, #80]	; (d4300 <setup+0x6c>)
   d42ae:	f001 fa77 	bl	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humiditySensorCharacteristic.onDataReceived(onHumidityReceived, NULL);
   d42b2:	2200      	movs	r2, #0
   d42b4:	4913      	ldr	r1, [pc, #76]	; (d4304 <setup+0x70>)
   d42b6:	4814      	ldr	r0, [pc, #80]	; (d4308 <setup+0x74>)
   d42b8:	f001 fa72 	bl	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    distanceSensorCharacteristic.onDataReceived(onDistanceReceived, NULL);
   d42bc:	2200      	movs	r2, #0
   d42be:	4913      	ldr	r1, [pc, #76]	; (d430c <setup+0x78>)
   d42c0:	4813      	ldr	r0, [pc, #76]	; (d4310 <setup+0x7c>)
   d42c2:	f001 fa6d 	bl	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    temperatureSensorCharacteristic2.onDataReceived(onTemperatureReceived2, NULL);
   d42c6:	2200      	movs	r2, #0
   d42c8:	4912      	ldr	r1, [pc, #72]	; (d4314 <setup+0x80>)
   d42ca:	4813      	ldr	r0, [pc, #76]	; (d4318 <setup+0x84>)
   d42cc:	f001 fa68 	bl	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    lightSensorCharacteristic2.onDataReceived(onLightReceived2, NULL);
   d42d0:	2200      	movs	r2, #0
   d42d2:	4912      	ldr	r1, [pc, #72]	; (d431c <setup+0x88>)
   d42d4:	4812      	ldr	r0, [pc, #72]	; (d4320 <setup+0x8c>)
   d42d6:	f001 fa63 	bl	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
   d42da:	2200      	movs	r2, #0
   d42dc:	4911      	ldr	r1, [pc, #68]	; (d4324 <setup+0x90>)
   d42de:	4812      	ldr	r0, [pc, #72]	; (d4328 <setup+0x94>)
   d42e0:	f001 fa5e 	bl	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
   d42e4:	2200      	movs	r2, #0
   d42e6:	4911      	ldr	r1, [pc, #68]	; (d432c <setup+0x98>)
   d42e8:	4811      	ldr	r0, [pc, #68]	; (d4330 <setup+0x9c>)
}
   d42ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    humiditySensorCharacteristic.onDataReceived(onHumidityReceived, NULL);
    distanceSensorCharacteristic.onDataReceived(onDistanceReceived, NULL);
    temperatureSensorCharacteristic2.onDataReceived(onTemperatureReceived2, NULL);
    lightSensorCharacteristic2.onDataReceived(onLightReceived2, NULL);
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
   d42ee:	f001 ba57 	b.w	d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>
   d42f2:	bf00      	nop
   d42f4:	000d414d 	.word	0x000d414d
   d42f8:	2003d9c0 	.word	0x2003d9c0
   d42fc:	000d4171 	.word	0x000d4171
   d4300:	2003d9b0 	.word	0x2003d9b0
   d4304:	000d4195 	.word	0x000d4195
   d4308:	2003d9a8 	.word	0x2003d9a8
   d430c:	000d41b9 	.word	0x000d41b9
   d4310:	2003d944 	.word	0x2003d944
   d4314:	000d41dd 	.word	0x000d41dd
   d4318:	2003d9c8 	.word	0x2003d9c8
   d431c:	000d4201 	.word	0x000d4201
   d4320:	2003d9b8 	.word	0x2003d9b8
   d4324:	000d4225 	.word	0x000d4225
   d4328:	2003d9d8 	.word	0x2003d9d8
   d432c:	000d4249 	.word	0x000d4249
   d4330:	2003d9d0 	.word	0x2003d9d0

000d4334 <loop>:
}

void loop() { 
   d4334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    //do stuff if both sensors have been connected
    if (sensorNode2.connected() /*&& sensorNode2.connected()*/) {
   d4338:	489a      	ldr	r0, [pc, #616]	; (d45a4 <loop+0x270>)
    lightSensorCharacteristic2.onDataReceived(onLightReceived2, NULL);
    soundSensorCharacteristic.onDataReceived(onSoundReceived, NULL);
    humanDetectorCharacteristic.onDataReceived(onHumanDetectorReceived, NULL);
}

void loop() { 
   d433a:	b08e      	sub	sp, #56	; 0x38
    //do stuff if both sensors have been connected
    if (sensorNode2.connected() /*&& sensorNode2.connected()*/) {
   d433c:	f001 fa9e 	bl	d587c <_ZNK8particle13BlePeerDevice9connectedEv>
   d4340:	4605      	mov	r5, r0
   d4342:	2800      	cmp	r0, #0
   d4344:	f040 812a 	bne.w	d459c <loop+0x268>
        //do stuff here
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d4348:	4997      	ldr	r1, [pc, #604]	; (d45a8 <loop+0x274>)
   d434a:	4898      	ldr	r0, [pc, #608]	; (d45ac <loop+0x278>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d434c:	4f98      	ldr	r7, [pc, #608]	; (d45b0 <loop+0x27c>)
    if (sensorNode2.connected() /*&& sensorNode2.connected()*/) {
        //do stuff here
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
   d434e:	f7ff fee5 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
   d4352:	f001 faf3 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4356:	221e      	movs	r2, #30
   d4358:	4995      	ldr	r1, [pc, #596]	; (d45b0 <loop+0x27c>)
   d435a:	f001 fb45 	bl	d59e8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
   d435e:	4606      	mov	r6, r0
        for (int i = 0; i < count; i++) {
   d4360:	42b5      	cmp	r5, r6
   d4362:	f280 80be 	bge.w	d44e2 <loop+0x1ae>
   d4366:	2454      	movs	r4, #84	; 0x54
   d4368:	436c      	muls	r4, r5
            BleUuid foundService;
   d436a:	a804      	add	r0, sp, #16
   d436c:	f000 ff18 	bl	d51a0 <_ZN8particle7BleUuidC1Ev>
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4370:	f104 0008 	add.w	r0, r4, #8
   d4374:	2201      	movs	r2, #1
   d4376:	a904      	add	r1, sp, #16
   d4378:	4438      	add	r0, r7
   d437a:	f001 f977 	bl	d566c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>

            Log.info("Found a bluetooth device.");
   d437e:	498d      	ldr	r1, [pc, #564]	; (d45b4 <loop+0x280>)
        for (int i = 0; i < count; i++) {
            BleUuid foundService;
            size_t len;

            //Read the service UUID of this BT device
            len = scanResults[i].advertisingData.serviceUUID(&foundService, 1);
   d4380:	4680      	mov	r8, r0

            Log.info("Found a bluetooth device.");
   d4382:	488a      	ldr	r0, [pc, #552]	; (d45ac <loop+0x278>)
   d4384:	f7ff feca 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d4388:	443c      	add	r4, r7

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d438a:	498b      	ldr	r1, [pc, #556]	; (d45b8 <loop+0x284>)
   d438c:	a809      	add	r0, sp, #36	; 0x24
   d438e:	f000 fd72 	bl	d4e76 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Address: " + scanResults[i].address.toString());
   d4392:	2200      	movs	r2, #0
   d4394:	4621      	mov	r1, r4
   d4396:	4668      	mov	r0, sp
   d4398:	f000 fef1 	bl	d517e <_ZNK8particle10BleAddress8toStringEb>
   d439c:	4669      	mov	r1, sp
   d439e:	a809      	add	r0, sp, #36	; 0x24
   d43a0:	f000 fdbe 	bl	d4f20 <_ZplRK15StringSumHelperRK6String>
   d43a4:	6801      	ldr	r1, [r0, #0]
   d43a6:	4881      	ldr	r0, [pc, #516]	; (d45ac <loop+0x278>)
   d43a8:	f7ff feb8 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d43ac:	4668      	mov	r0, sp
   d43ae:	f000 fd1b 	bl	d4de8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d43b2:	a809      	add	r0, sp, #36	; 0x24
   d43b4:	f000 fd18 	bl	d4de8 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d43b8:	4980      	ldr	r1, [pc, #512]	; (d45bc <loop+0x288>)
   d43ba:	a809      	add	r0, sp, #36	; 0x24
   d43bc:	f000 fd5b 	bl	d4e76 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("Found UUID: " + foundService.toString());
   d43c0:	2200      	movs	r2, #0
   d43c2:	a904      	add	r1, sp, #16
   d43c4:	4668      	mov	r0, sp
   d43c6:	f001 f87b 	bl	d54c0 <_ZNK8particle7BleUuid8toStringEb>
   d43ca:	4669      	mov	r1, sp
   d43cc:	a809      	add	r0, sp, #36	; 0x24
   d43ce:	f000 fda7 	bl	d4f20 <_ZplRK15StringSumHelperRK6String>
   d43d2:	6801      	ldr	r1, [r0, #0]
   d43d4:	4875      	ldr	r0, [pc, #468]	; (d45ac <loop+0x278>)
   d43d6:	f7ff fea1 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d43da:	4668      	mov	r0, sp
   d43dc:	f000 fd04 	bl	d4de8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d43e0:	a809      	add	r0, sp, #36	; 0x24
   d43e2:	f000 fd01 	bl	d4de8 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d43e6:	4976      	ldr	r1, [pc, #472]	; (d45c0 <loop+0x28c>)
   d43e8:	a809      	add	r0, sp, #36	; 0x24
   d43ea:	f000 fd44 	bl	d4e76 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode1 UUID: " + sensorNode1ServiceUuid.toString());
   d43ee:	2200      	movs	r2, #0
   d43f0:	4974      	ldr	r1, [pc, #464]	; (d45c4 <loop+0x290>)
   d43f2:	4668      	mov	r0, sp
   d43f4:	f001 f864 	bl	d54c0 <_ZNK8particle7BleUuid8toStringEb>
   d43f8:	4669      	mov	r1, sp
   d43fa:	a809      	add	r0, sp, #36	; 0x24
   d43fc:	f000 fd90 	bl	d4f20 <_ZplRK15StringSumHelperRK6String>
   d4400:	6801      	ldr	r1, [r0, #0]
   d4402:	486a      	ldr	r0, [pc, #424]	; (d45ac <loop+0x278>)
   d4404:	f7ff fe8a 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d4408:	4668      	mov	r0, sp
   d440a:	f000 fced 	bl	d4de8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d440e:	a809      	add	r0, sp, #36	; 0x24
   d4410:	f000 fcea 	bl	d4de8 <_ZN6StringD1Ev>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   d4414:	496c      	ldr	r1, [pc, #432]	; (d45c8 <loop+0x294>)
   d4416:	a809      	add	r0, sp, #36	; 0x24
   d4418:	f000 fd2d 	bl	d4e76 <_ZN6StringC1EPK19__FlashStringHelper>
            Log.info("SensorNode2 UUID: " + sensorNode2ServiceUuid.toString());
   d441c:	2200      	movs	r2, #0
   d441e:	496b      	ldr	r1, [pc, #428]	; (d45cc <loop+0x298>)
   d4420:	4668      	mov	r0, sp
   d4422:	f001 f84d 	bl	d54c0 <_ZNK8particle7BleUuid8toStringEb>
   d4426:	4669      	mov	r1, sp
   d4428:	a809      	add	r0, sp, #36	; 0x24
   d442a:	f000 fd79 	bl	d4f20 <_ZplRK15StringSumHelperRK6String>
   d442e:	6801      	ldr	r1, [r0, #0]
   d4430:	485e      	ldr	r0, [pc, #376]	; (d45ac <loop+0x278>)
   d4432:	f7ff fe73 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d4436:	4668      	mov	r0, sp
   d4438:	f000 fcd6 	bl	d4de8 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
   d443c:	a809      	add	r0, sp, #36	; 0x24
   d443e:	f000 fcd3 	bl	d4de8 <_ZN6StringD1Ev>

            //Check if it matches UUID for sensor node 1
            if (len > 0 && foundService == sensorNode1ServiceUuid){
   d4442:	f1b8 0f00 	cmp.w	r8, #0
   d4446:	d04a      	beq.n	d44de <loop+0x1aa>
   d4448:	495e      	ldr	r1, [pc, #376]	; (d45c4 <loop+0x290>)
   d444a:	a804      	add	r0, sp, #16
   d444c:	f000 ff48 	bl	d52e0 <_ZNK8particle7BleUuideqERKS0_>
   d4450:	2800      	cmp	r0, #0
   d4452:	d057      	beq.n	d4504 <loop+0x1d0>
                Log.info("Found sensor node 1.");
   d4454:	4855      	ldr	r0, [pc, #340]	; (d45ac <loop+0x278>)
   d4456:	495e      	ldr	r1, [pc, #376]	; (d45d0 <loop+0x29c>)
   d4458:	f7ff fe60 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode1.connected() == false){
   d445c:	485d      	ldr	r0, [pc, #372]	; (d45d4 <loop+0x2a0>)
   d445e:	f001 fa0d 	bl	d587c <_ZNK8particle13BlePeerDevice9connectedEv>
   d4462:	2800      	cmp	r0, #0
   d4464:	d147      	bne.n	d44f6 <loop+0x1c2>
                    sensorNode1 = BLE.connect(scanResults[i].address);
   d4466:	f001 fa69 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d446a:	2301      	movs	r3, #1
   d446c:	4622      	mov	r2, r4
   d446e:	4601      	mov	r1, r0
   d4470:	a809      	add	r0, sp, #36	; 0x24
   d4472:	f001 ff77 	bl	d6364 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4476:	a909      	add	r1, sp, #36	; 0x24
   d4478:	4856      	ldr	r0, [pc, #344]	; (d45d4 <loop+0x2a0>)
   d447a:	f001 fbee 	bl	d5c5a <_ZN8particle13BlePeerDeviceaSERKS0_>
   d447e:	a809      	add	r0, sp, #36	; 0x24
   d4480:	f001 fb0e 	bl	d5aa0 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode1.connected()){
   d4484:	4853      	ldr	r0, [pc, #332]	; (d45d4 <loop+0x2a0>)
   d4486:	f001 f9f9 	bl	d587c <_ZNK8particle13BlePeerDevice9connectedEv>
   d448a:	2800      	cmp	r0, #0
   d448c:	d031      	beq.n	d44f2 <loop+0x1be>
                        Log.info("Successfully connected to sensor node 1!");
   d448e:	4952      	ldr	r1, [pc, #328]	; (d45d8 <loop+0x2a4>)
   d4490:	4846      	ldr	r0, [pc, #280]	; (d45ac <loop+0x278>)
   d4492:	f7ff fe43 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode1.getCharacteristicByUUID(temperatureSensorCharacteristic1, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d4496:	4951      	ldr	r1, [pc, #324]	; (d45dc <loop+0x2a8>)
   d4498:	a809      	add	r0, sp, #36	; 0x24
   d449a:	f000 ff97 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d449e:	aa09      	add	r2, sp, #36	; 0x24
   d44a0:	494f      	ldr	r1, [pc, #316]	; (d45e0 <loop+0x2ac>)
   d44a2:	484c      	ldr	r0, [pc, #304]	; (d45d4 <loop+0x2a0>)
   d44a4:	f001 fbb5 	bl	d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic1, "ea5248a4-43cc-4198-a4aa-79200a750835");
   d44a8:	494e      	ldr	r1, [pc, #312]	; (d45e4 <loop+0x2b0>)
   d44aa:	a809      	add	r0, sp, #36	; 0x24
   d44ac:	f000 ff8e 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d44b0:	aa09      	add	r2, sp, #36	; 0x24
   d44b2:	494d      	ldr	r1, [pc, #308]	; (d45e8 <loop+0x2b4>)
   d44b4:	4847      	ldr	r0, [pc, #284]	; (d45d4 <loop+0x2a0>)
   d44b6:	f001 fbac 	bl	d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
   d44ba:	494c      	ldr	r1, [pc, #304]	; (d45ec <loop+0x2b8>)
   d44bc:	a809      	add	r0, sp, #36	; 0x24
   d44be:	f000 ff85 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d44c2:	aa09      	add	r2, sp, #36	; 0x24
   d44c4:	494a      	ldr	r1, [pc, #296]	; (d45f0 <loop+0x2bc>)
   d44c6:	4843      	ldr	r0, [pc, #268]	; (d45d4 <loop+0x2a0>)
   d44c8:	f001 fba3 	bl	d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode1.getCharacteristicByUUID(distanceSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
   d44cc:	4949      	ldr	r1, [pc, #292]	; (d45f4 <loop+0x2c0>)
   d44ce:	a809      	add	r0, sp, #36	; 0x24
   d44d0:	f000 ff7c 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d44d4:	4948      	ldr	r1, [pc, #288]	; (d45f8 <loop+0x2c4>)
   d44d6:	483f      	ldr	r0, [pc, #252]	; (d45d4 <loop+0x2a0>)
   d44d8:	aa09      	add	r2, sp, #36	; 0x24
                        Log.info("Successfully connected to sensor node 2!");
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(temperatureSensorCharacteristic2, "bc7f18d9-2c43-408e-be25-62f40645987c");
                        sensorNode2.getCharacteristicByUUID(lightSensorCharacteristic2, "ea5248a4-43cc-4198-a4aa-79200a750835");
                        sensorNode2.getCharacteristicByUUID(soundSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
   d44da:	f001 fb9a 	bl	d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
    }
    //if we haven't connected both, then scan for them
    else {
        Log.info("About to scan...");
        int count = BLE.scan(scanResults, SCAN_RESULT_MAX);
        for (int i = 0; i < count; i++) {
   d44de:	3501      	adds	r5, #1
   d44e0:	e73e      	b.n	d4360 <loop+0x2c>
                    Log.info("Sensor node 2 already connected.");
                }
            }
        }

        if (count > 0) {
   d44e2:	2e00      	cmp	r6, #0
   d44e4:	dd5a      	ble.n	d459c <loop+0x268>
            Log.info("%d devices found", count);
   d44e6:	4632      	mov	r2, r6
   d44e8:	4944      	ldr	r1, [pc, #272]	; (d45fc <loop+0x2c8>)
   d44ea:	4830      	ldr	r0, [pc, #192]	; (d45ac <loop+0x278>)
   d44ec:	f7ff fe16 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
        }
    }
}
   d44f0:	e054      	b.n	d459c <loop+0x268>
                        sensorNode1.getCharacteristicByUUID(lightSensorCharacteristic1, "ea5248a4-43cc-4198-a4aa-79200a750835");
                        sensorNode1.getCharacteristicByUUID(humiditySensorCharacteristic, "99a0d2f9-1cfa-42b3-b5ba-1b4d4341392f");
                        sensorNode1.getCharacteristicByUUID(distanceSensorCharacteristic, "45be4a56-48f5-483c-8bb1-d3fee433c23c");
                    }
                    else{
                        Log.info("Failed to connect to sensor node 1.");
   d44f2:	4943      	ldr	r1, [pc, #268]	; (d4600 <loop+0x2cc>)
   d44f4:	e002      	b.n	d44fc <loop+0x1c8>
                    }
                }
                else{
                    Log.info("Sensor node 1 already connected.");
   d44f6:	4943      	ldr	r1, [pc, #268]	; (d4604 <loop+0x2d0>)
   d44f8:	e000      	b.n	d44fc <loop+0x1c8>
                        sensorNode2.getCharacteristicByUUID(lightSensorCharacteristic2, "ea5248a4-43cc-4198-a4aa-79200a750835");
                        sensorNode2.getCharacteristicByUUID(soundSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
                    }
                    else{
                        Log.info("Failed to connect to sensor node 2.");
   d44fa:	4943      	ldr	r1, [pc, #268]	; (d4608 <loop+0x2d4>)
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d44fc:	482b      	ldr	r0, [pc, #172]	; (d45ac <loop+0x278>)
   d44fe:	f7ff fe0d 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
   d4502:	e7ec      	b.n	d44de <loop+0x1aa>
                    Log.info("Sensor node 1 already connected.");
                }
            }

            //Check if it matches UUID for sensor node 2
            else if (len > 0 && foundService == sensorNode2ServiceUuid){
   d4504:	4931      	ldr	r1, [pc, #196]	; (d45cc <loop+0x298>)
   d4506:	a804      	add	r0, sp, #16
   d4508:	f000 feea 	bl	d52e0 <_ZNK8particle7BleUuideqERKS0_>
   d450c:	2800      	cmp	r0, #0
   d450e:	d0e6      	beq.n	d44de <loop+0x1aa>
                Log.info("Found sensor node 2.");
   d4510:	4826      	ldr	r0, [pc, #152]	; (d45ac <loop+0x278>)
   d4512:	493e      	ldr	r1, [pc, #248]	; (d460c <loop+0x2d8>)
   d4514:	f7ff fe02 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
                if(sensorNode2.connected() == false){
   d4518:	4822      	ldr	r0, [pc, #136]	; (d45a4 <loop+0x270>)
   d451a:	f001 f9af 	bl	d587c <_ZNK8particle13BlePeerDevice9connectedEv>
   d451e:	2800      	cmp	r0, #0
   d4520:	d13a      	bne.n	d4598 <loop+0x264>
                    sensorNode2 = BLE.connect(scanResults[i].address);
   d4522:	f001 fa0b 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4526:	2301      	movs	r3, #1
   d4528:	4622      	mov	r2, r4
   d452a:	4601      	mov	r1, r0
   d452c:	a809      	add	r0, sp, #36	; 0x24
   d452e:	f001 ff19 	bl	d6364 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4532:	a909      	add	r1, sp, #36	; 0x24
   d4534:	481b      	ldr	r0, [pc, #108]	; (d45a4 <loop+0x270>)
   d4536:	f001 fb90 	bl	d5c5a <_ZN8particle13BlePeerDeviceaSERKS0_>
   d453a:	a809      	add	r0, sp, #36	; 0x24
   d453c:	f001 fab0 	bl	d5aa0 <_ZN8particle13BlePeerDeviceD1Ev>
                    if(sensorNode2.connected()){
   d4540:	4818      	ldr	r0, [pc, #96]	; (d45a4 <loop+0x270>)
   d4542:	f001 f99b 	bl	d587c <_ZNK8particle13BlePeerDevice9connectedEv>
   d4546:	2800      	cmp	r0, #0
   d4548:	d0d7      	beq.n	d44fa <loop+0x1c6>
                        Log.info("Successfully connected to sensor node 2!");
   d454a:	4931      	ldr	r1, [pc, #196]	; (d4610 <loop+0x2dc>)
   d454c:	4817      	ldr	r0, [pc, #92]	; (d45ac <loop+0x278>)
   d454e:	f7ff fde5 	bl	d411c <_ZNK5spark6Logger4infoEPKcz>
                        //map characteristics from this service to the variables in this program, so they're handled by our "on<X>Received" functions
                        sensorNode2.getCharacteristicByUUID(temperatureSensorCharacteristic2, "bc7f18d9-2c43-408e-be25-62f40645987c");
   d4552:	4922      	ldr	r1, [pc, #136]	; (d45dc <loop+0x2a8>)
   d4554:	a809      	add	r0, sp, #36	; 0x24
   d4556:	f000 ff39 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d455a:	aa09      	add	r2, sp, #36	; 0x24
   d455c:	492d      	ldr	r1, [pc, #180]	; (d4614 <loop+0x2e0>)
   d455e:	4811      	ldr	r0, [pc, #68]	; (d45a4 <loop+0x270>)
   d4560:	f001 fb57 	bl	d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(lightSensorCharacteristic2, "ea5248a4-43cc-4198-a4aa-79200a750835");
   d4564:	491f      	ldr	r1, [pc, #124]	; (d45e4 <loop+0x2b0>)
   d4566:	a809      	add	r0, sp, #36	; 0x24
   d4568:	f000 ff30 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d456c:	aa09      	add	r2, sp, #36	; 0x24
   d456e:	492a      	ldr	r1, [pc, #168]	; (d4618 <loop+0x2e4>)
   d4570:	480c      	ldr	r0, [pc, #48]	; (d45a4 <loop+0x270>)
   d4572:	f001 fb4e 	bl	d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(soundSensorCharacteristic, "88ba2f5d-1e98-49af-8697-d0516df03be9");
   d4576:	4929      	ldr	r1, [pc, #164]	; (d461c <loop+0x2e8>)
   d4578:	a809      	add	r0, sp, #36	; 0x24
   d457a:	f000 ff27 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d457e:	aa09      	add	r2, sp, #36	; 0x24
   d4580:	4927      	ldr	r1, [pc, #156]	; (d4620 <loop+0x2ec>)
   d4582:	4808      	ldr	r0, [pc, #32]	; (d45a4 <loop+0x270>)
   d4584:	f001 fb45 	bl	d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                        sensorNode2.getCharacteristicByUUID(humanDetectorCharacteristic, "b482d551-c3ae-4dde-b125-ce244d7896b0");
   d4588:	4926      	ldr	r1, [pc, #152]	; (d4624 <loop+0x2f0>)
   d458a:	a809      	add	r0, sp, #36	; 0x24
   d458c:	f000 ff1e 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
   d4590:	aa09      	add	r2, sp, #36	; 0x24
   d4592:	4925      	ldr	r1, [pc, #148]	; (d4628 <loop+0x2f4>)
   d4594:	4803      	ldr	r0, [pc, #12]	; (d45a4 <loop+0x270>)
   d4596:	e7a0      	b.n	d44da <loop+0x1a6>
                    else{
                        Log.info("Failed to connect to sensor node 2.");
                    }
                }
                else{
                    Log.info("Sensor node 2 already connected.");
   d4598:	4924      	ldr	r1, [pc, #144]	; (d462c <loop+0x2f8>)
   d459a:	e7af      	b.n	d44fc <loop+0x1c8>

        if (count > 0) {
            Log.info("%d devices found", count);
        }
    }
}
   d459c:	b00e      	add	sp, #56	; 0x38
   d459e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d45a2:	bf00      	nop
   d45a4:	2003d98c 	.word	0x2003d98c
   d45a8:	000d89db 	.word	0x000d89db
   d45ac:	2003e40c 	.word	0x2003e40c
   d45b0:	2003d9e0 	.word	0x2003d9e0
   d45b4:	000d89ec 	.word	0x000d89ec
   d45b8:	000d8a06 	.word	0x000d8a06
   d45bc:	000d8a10 	.word	0x000d8a10
   d45c0:	000d8a1d 	.word	0x000d8a1d
   d45c4:	2003d94c 	.word	0x2003d94c
   d45c8:	000d8a30 	.word	0x000d8a30
   d45cc:	2003d994 	.word	0x2003d994
   d45d0:	000d8c0e 	.word	0x000d8c0e
   d45d4:	2003d984 	.word	0x2003d984
   d45d8:	000d8a43 	.word	0x000d8a43
   d45dc:	000d8a6c 	.word	0x000d8a6c
   d45e0:	2003d9c0 	.word	0x2003d9c0
   d45e4:	000d8a91 	.word	0x000d8a91
   d45e8:	2003d9b0 	.word	0x2003d9b0
   d45ec:	000d8ab6 	.word	0x000d8ab6
   d45f0:	2003d9a8 	.word	0x2003d9a8
   d45f4:	000d8adb 	.word	0x000d8adb
   d45f8:	2003d944 	.word	0x2003d944
   d45fc:	000d8bfd 	.word	0x000d8bfd
   d4600:	000d8b00 	.word	0x000d8b00
   d4604:	000d8b24 	.word	0x000d8b24
   d4608:	000d8bb8 	.word	0x000d8bb8
   d460c:	000d8c23 	.word	0x000d8c23
   d4610:	000d8b45 	.word	0x000d8b45
   d4614:	2003d9c8 	.word	0x2003d9c8
   d4618:	2003d9b8 	.word	0x2003d9b8
   d461c:	000d8b6e 	.word	0x000d8b6e
   d4620:	2003d9d8 	.word	0x2003d9d8
   d4624:	000d8b93 	.word	0x000d8b93
   d4628:	2003d9d0 	.word	0x2003d9d0
   d462c:	000d8bdc 	.word	0x000d8bdc

000d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4630:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4632:	6804      	ldr	r4, [r0, #0]
   d4634:	6843      	ldr	r3, [r0, #4]
   d4636:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4638:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d463a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d463e:	42a6      	cmp	r6, r4
   d4640:	d004      	beq.n	d464c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d4642:	4620      	mov	r0, r4
   d4644:	f000 fbd0 	bl	d4de8 <_ZN6StringD1Ev>
   d4648:	3414      	adds	r4, #20
   d464a:	e7f8      	b.n	d463e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d464c:	6828      	ldr	r0, [r5, #0]
   d464e:	f000 fb3b 	bl	d4cc8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d4652:	4628      	mov	r0, r5
   d4654:	bd70      	pop	{r4, r5, r6, pc}

000d4656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d4656:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d4658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d465a:	4606      	mov	r6, r0
   d465c:	460c      	mov	r4, r1
   d465e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d4660:	d916      	bls.n	d4690 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4662:	4290      	cmp	r0, r2
   d4664:	d215      	bcs.n	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d4666:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d466a:	1a6c      	subs	r4, r5, r1
   d466c:	f1a1 0714 	sub.w	r7, r1, #20
   d4670:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d4672:	42af      	cmp	r7, r5
   d4674:	d01c      	beq.n	d46b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d4676:	b12c      	cbz	r4, d4684 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d4678:	4629      	mov	r1, r5
   d467a:	4620      	mov	r0, r4
   d467c:	f000 fba4 	bl	d4dc8 <_ZN6StringC1EOS_>
   d4680:	7c2b      	ldrb	r3, [r5, #16]
   d4682:	7423      	strb	r3, [r4, #16]
   d4684:	4628      	mov	r0, r5
   d4686:	f000 fbaf 	bl	d4de8 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d468a:	3d14      	subs	r5, #20
   d468c:	3c14      	subs	r4, #20
   d468e:	e7f0      	b.n	d4672 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d4690:	d00e      	beq.n	d46b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4692:	42ac      	cmp	r4, r5
   d4694:	d00c      	beq.n	d46b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4696:	b12e      	cbz	r6, d46a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4698:	4621      	mov	r1, r4
   d469a:	4630      	mov	r0, r6
   d469c:	f000 fb94 	bl	d4dc8 <_ZN6StringC1EOS_>
   d46a0:	7c23      	ldrb	r3, [r4, #16]
   d46a2:	7433      	strb	r3, [r6, #16]
   d46a4:	4620      	mov	r0, r4
   d46a6:	f000 fb9f 	bl	d4de8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d46aa:	3414      	adds	r4, #20
   d46ac:	3614      	adds	r6, #20
   d46ae:	e7f0      	b.n	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d46b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d46b6:	2300      	movs	r3, #0
   d46b8:	6003      	str	r3, [r0, #0]
   d46ba:	6043      	str	r3, [r0, #4]
   d46bc:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d46be:	684e      	ldr	r6, [r1, #4]
   d46c0:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46c2:	4604      	mov	r4, r0
   d46c4:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d46c6:	dd24      	ble.n	d4712 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d46c8:	f04f 0814 	mov.w	r8, #20
   d46cc:	fb08 f006 	mul.w	r0, r8, r6
   d46d0:	f000 faf2 	bl	d4cb8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d46d4:	4605      	mov	r5, r0
   d46d6:	b1e0      	cbz	r0, d4712 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d46d8:	e894 0006 	ldmia.w	r4, {r1, r2}
   d46dc:	fb08 1202 	mla	r2, r8, r2, r1
   d46e0:	f7ff ffb9 	bl	d4656 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d46e4:	6820      	ldr	r0, [r4, #0]
   d46e6:	f000 faef 	bl	d4cc8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d46ea:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d46ec:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d46ee:	683e      	ldr	r6, [r7, #0]
   d46f0:	687b      	ldr	r3, [r7, #4]
   d46f2:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d46f6:	4546      	cmp	r6, r8
   d46f8:	d009      	beq.n	d470e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d46fa:	b12d      	cbz	r5, d4708 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d46fc:	4631      	mov	r1, r6
   d46fe:	4628      	mov	r0, r5
   d4700:	f000 fbdb 	bl	d4eba <_ZN6StringC1ERKS_>
   d4704:	7c33      	ldrb	r3, [r6, #16]
   d4706:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4708:	3614      	adds	r6, #20
   d470a:	3514      	adds	r5, #20
   d470c:	e7f3      	b.n	d46f6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d470e:	687b      	ldr	r3, [r7, #4]
   d4710:	6063      	str	r3, [r4, #4]
    }
}
   d4712:	4620      	mov	r0, r4
   d4714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4718 <_GLOBAL__sub_I_logHandler>:
        Log.info("Sensor 2 - Human detected!");
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
   d4718:	b570      	push	{r4, r5, r6, lr}
   d471a:	b08c      	sub	sp, #48	; 0x30
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d471c:	2400      	movs	r4, #0

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d471e:	f000 f8e7 	bl	d48f0 <HAL_Pin_Map>
   d4722:	9400      	str	r4, [sp, #0]
   d4724:	9401      	str	r4, [sp, #4]
   d4726:	9402      	str	r4, [sp, #8]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d4728:	f003 f9b2 	bl	d7a90 <_Z16_fetch_usbserialv>
   d472c:	4669      	mov	r1, sp
   d472e:	4606      	mov	r6, r0
   d4730:	a803      	add	r0, sp, #12
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4732:	4d50      	ldr	r5, [pc, #320]	; (d4874 <_GLOBAL__sub_I_logHandler+0x15c>)
   d4734:	f7ff ffbd 	bl	d46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d4738:	a903      	add	r1, sp, #12
   d473a:	a806      	add	r0, sp, #24
   d473c:	f7ff ffb9 	bl	d46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d4740:	4b4d      	ldr	r3, [pc, #308]	; (d4878 <_GLOBAL__sub_I_logHandler+0x160>)
   d4742:	602b      	str	r3, [r5, #0]
   d4744:	a906      	add	r1, sp, #24
   d4746:	a809      	add	r0, sp, #36	; 0x24
   d4748:	f7ff ffb3 	bl	d46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d474c:	aa09      	add	r2, sp, #36	; 0x24
   d474e:	2101      	movs	r1, #1
   d4750:	1d28      	adds	r0, r5, #4
   d4752:	f002 fcec 	bl	d712e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4756:	a809      	add	r0, sp, #36	; 0x24
   d4758:	f7ff ff6a 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d475c:	a806      	add	r0, sp, #24
   d475e:	f7ff ff67 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4762:	4b46      	ldr	r3, [pc, #280]	; (d487c <_GLOBAL__sub_I_logHandler+0x164>)
   d4764:	602b      	str	r3, [r5, #0]
   d4766:	622e      	str	r6, [r5, #32]
   d4768:	a803      	add	r0, sp, #12
   d476a:	f7ff ff61 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d476e:	4b44      	ldr	r3, [pc, #272]	; (d4880 <_GLOBAL__sub_I_logHandler+0x168>)
   d4770:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4772:	f003 f98d 	bl	d7a90 <_Z16_fetch_usbserialv>
   d4776:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d477a:	f003 f979 	bl	d7a70 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d477e:	f002 f97f 	bl	d6a80 <_ZN5spark10LogManager8instanceEv>
   d4782:	4629      	mov	r1, r5
   d4784:	f002 fc66 	bl	d7054 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

// This example does not require the cloud so you can run it in manual mode or
// normal cloud-connected mode
// SYSTEM_MODE(MANUAL);

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4788:	4668      	mov	r0, sp
   d478a:	f7ff ff51 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d478e:	4a3d      	ldr	r2, [pc, #244]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d4790:	493d      	ldr	r1, [pc, #244]	; (d4888 <_GLOBAL__sub_I_logHandler+0x170>)
   d4792:	4628      	mov	r0, r5
   d4794:	f003 fd8f 	bl	d82b6 <__aeabi_atexit>

//bluetooth devices we want to connect to and their service ids
BlePeerDevice sensorNode1; //"754ebf5e-ce31-4300-9fd5-a8fb4ee4a811"
   d4798:	483c      	ldr	r0, [pc, #240]	; (d488c <_GLOBAL__sub_I_logHandler+0x174>)
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d479a:	4d3d      	ldr	r5, [pc, #244]	; (d4890 <_GLOBAL__sub_I_logHandler+0x178>)
   d479c:	f001 f9da 	bl	d5b54 <_ZN8particle13BlePeerDeviceC1Ev>
   d47a0:	4a38      	ldr	r2, [pc, #224]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d47a2:	493c      	ldr	r1, [pc, #240]	; (d4894 <_GLOBAL__sub_I_logHandler+0x17c>)
   d47a4:	4839      	ldr	r0, [pc, #228]	; (d488c <_GLOBAL__sub_I_logHandler+0x174>)
   d47a6:	f003 fd86 	bl	d82b6 <__aeabi_atexit>
BlePeerDevice sensorNode2;
   d47aa:	483b      	ldr	r0, [pc, #236]	; (d4898 <_GLOBAL__sub_I_logHandler+0x180>)
   d47ac:	f001 f9d2 	bl	d5b54 <_ZN8particle13BlePeerDeviceC1Ev>
   d47b0:	4a34      	ldr	r2, [pc, #208]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d47b2:	4938      	ldr	r1, [pc, #224]	; (d4894 <_GLOBAL__sub_I_logHandler+0x17c>)
   d47b4:	4838      	ldr	r0, [pc, #224]	; (d4898 <_GLOBAL__sub_I_logHandler+0x180>)
   d47b6:	f003 fd7e 	bl	d82b6 <__aeabi_atexit>
BleUuid sensorNode1ServiceUuid("754ebf5e-ce31-4300-9fd5-a8fb4ee4a811");
   d47ba:	4938      	ldr	r1, [pc, #224]	; (d489c <_GLOBAL__sub_I_logHandler+0x184>)
   d47bc:	4838      	ldr	r0, [pc, #224]	; (d48a0 <_GLOBAL__sub_I_logHandler+0x188>)
   d47be:	f000 fe05 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>
BleUuid sensorNode2ServiceUuid("97728ad9-a998-4629-b855-ee2658ca01f7");
   d47c2:	4938      	ldr	r1, [pc, #224]	; (d48a4 <_GLOBAL__sub_I_logHandler+0x18c>)
   d47c4:	4838      	ldr	r0, [pc, #224]	; (d48a8 <_GLOBAL__sub_I_logHandler+0x190>)
   d47c6:	f000 fe01 	bl	d53cc <_ZN8particle7BleUuidC1EPKc>

//characteristics we want to track
//for sensor node 1
BleCharacteristic temperatureSensorCharacteristic1;
   d47ca:	4838      	ldr	r0, [pc, #224]	; (d48ac <_GLOBAL__sub_I_logHandler+0x194>)
   d47cc:	f001 fe2e 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d47d0:	4a2c      	ldr	r2, [pc, #176]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d47d2:	4937      	ldr	r1, [pc, #220]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d47d4:	4835      	ldr	r0, [pc, #212]	; (d48ac <_GLOBAL__sub_I_logHandler+0x194>)
   d47d6:	f003 fd6e 	bl	d82b6 <__aeabi_atexit>
BleCharacteristic lightSensorCharacteristic1;
   d47da:	4836      	ldr	r0, [pc, #216]	; (d48b4 <_GLOBAL__sub_I_logHandler+0x19c>)
   d47dc:	f001 fe26 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d47e0:	4a28      	ldr	r2, [pc, #160]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d47e2:	4933      	ldr	r1, [pc, #204]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d47e4:	4833      	ldr	r0, [pc, #204]	; (d48b4 <_GLOBAL__sub_I_logHandler+0x19c>)
   d47e6:	f003 fd66 	bl	d82b6 <__aeabi_atexit>
BleCharacteristic humiditySensorCharacteristic;
   d47ea:	4833      	ldr	r0, [pc, #204]	; (d48b8 <_GLOBAL__sub_I_logHandler+0x1a0>)
   d47ec:	f001 fe1e 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d47f0:	4a24      	ldr	r2, [pc, #144]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d47f2:	492f      	ldr	r1, [pc, #188]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d47f4:	4830      	ldr	r0, [pc, #192]	; (d48b8 <_GLOBAL__sub_I_logHandler+0x1a0>)
   d47f6:	f003 fd5e 	bl	d82b6 <__aeabi_atexit>
BleCharacteristic distanceSensorCharacteristic;
   d47fa:	4830      	ldr	r0, [pc, #192]	; (d48bc <_GLOBAL__sub_I_logHandler+0x1a4>)
   d47fc:	f001 fe16 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d4800:	4a20      	ldr	r2, [pc, #128]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d4802:	492b      	ldr	r1, [pc, #172]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4804:	482d      	ldr	r0, [pc, #180]	; (d48bc <_GLOBAL__sub_I_logHandler+0x1a4>)
   d4806:	f003 fd56 	bl	d82b6 <__aeabi_atexit>

//for sensor node 2
BleCharacteristic temperatureSensorCharacteristic2;
   d480a:	482d      	ldr	r0, [pc, #180]	; (d48c0 <_GLOBAL__sub_I_logHandler+0x1a8>)
   d480c:	f001 fe0e 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d4810:	4a1c      	ldr	r2, [pc, #112]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d4812:	4927      	ldr	r1, [pc, #156]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4814:	482a      	ldr	r0, [pc, #168]	; (d48c0 <_GLOBAL__sub_I_logHandler+0x1a8>)
   d4816:	f003 fd4e 	bl	d82b6 <__aeabi_atexit>
BleCharacteristic lightSensorCharacteristic2;
   d481a:	482a      	ldr	r0, [pc, #168]	; (d48c4 <_GLOBAL__sub_I_logHandler+0x1ac>)
   d481c:	f001 fe06 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d4820:	4a18      	ldr	r2, [pc, #96]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d4822:	4923      	ldr	r1, [pc, #140]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4824:	4827      	ldr	r0, [pc, #156]	; (d48c4 <_GLOBAL__sub_I_logHandler+0x1ac>)
   d4826:	f003 fd46 	bl	d82b6 <__aeabi_atexit>
BleCharacteristic soundSensorCharacteristic;
   d482a:	4827      	ldr	r0, [pc, #156]	; (d48c8 <_GLOBAL__sub_I_logHandler+0x1b0>)
   d482c:	f001 fdfe 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d4830:	4a14      	ldr	r2, [pc, #80]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d4832:	491f      	ldr	r1, [pc, #124]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4834:	4824      	ldr	r0, [pc, #144]	; (d48c8 <_GLOBAL__sub_I_logHandler+0x1b0>)
   d4836:	f003 fd3e 	bl	d82b6 <__aeabi_atexit>
BleCharacteristic humanDetectorCharacteristic;
   d483a:	4824      	ldr	r0, [pc, #144]	; (d48cc <_GLOBAL__sub_I_logHandler+0x1b4>)
   d483c:	f001 fdf6 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
   d4840:	4a10      	ldr	r2, [pc, #64]	; (d4884 <_GLOBAL__sub_I_logHandler+0x16c>)
   d4842:	491b      	ldr	r1, [pc, #108]	; (d48b0 <_GLOBAL__sub_I_logHandler+0x198>)
   d4844:	4821      	ldr	r0, [pc, #132]	; (d48cc <_GLOBAL__sub_I_logHandler+0x1b4>)
   d4846:	f003 fd36 	bl	d82b6 <__aeabi_atexit>

// void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context);
const size_t SCAN_RESULT_MAX = 30;
BleScanResult scanResults[SCAN_RESULT_MAX];
   d484a:	f640 16d8 	movw	r6, #2520	; 0x9d8
   d484e:	1928      	adds	r0, r5, r4
   d4850:	f000 fc26 	bl	d50a0 <_ZN8particle10BleAddressC1Ev>
   d4854:	f104 0008 	add.w	r0, r4, #8
   d4858:	4428      	add	r0, r5
   d485a:	f000 feb0 	bl	d55be <_ZN8particle18BleAdvertisingDataC1Ev>
   d485e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   d4862:	4428      	add	r0, r5
   d4864:	3454      	adds	r4, #84	; 0x54
   d4866:	f000 feaa 	bl	d55be <_ZN8particle18BleAdvertisingDataC1Ev>
   d486a:	42b4      	cmp	r4, r6
   d486c:	d1ef      	bne.n	d484e <_GLOBAL__sub_I_logHandler+0x136>
        Log.info("Sensor 2 - Human detected!");
    }
    else{
        Log.info("Sensor 2 - Invalid human detector message. Expected 0 or 1, received %u", humanSeen);
    }
   d486e:	b00c      	add	sp, #48	; 0x30
   d4870:	bd70      	pop	{r4, r5, r6, pc}
   d4872:	bf00      	nop
   d4874:	2003d960 	.word	0x2003d960
   d4878:	000d8874 	.word	0x000d8874
   d487c:	000d8fd4 	.word	0x000d8fd4
   d4880:	000d888c 	.word	0x000d888c
   d4884:	2003d940 	.word	0x2003d940
   d4888:	000d40d5 	.word	0x000d40d5
   d488c:	2003d984 	.word	0x2003d984
   d4890:	2003d9e0 	.word	0x2003d9e0
   d4894:	000d5aa1 	.word	0x000d5aa1
   d4898:	2003d98c 	.word	0x2003d98c
   d489c:	000d8c38 	.word	0x000d8c38
   d48a0:	2003d94c 	.word	0x2003d94c
   d48a4:	000d8c5d 	.word	0x000d8c5d
   d48a8:	2003d994 	.word	0x2003d994
   d48ac:	2003d9c0 	.word	0x2003d9c0
   d48b0:	000d5a93 	.word	0x000d5a93
   d48b4:	2003d9b0 	.word	0x2003d9b0
   d48b8:	2003d9a8 	.word	0x2003d9a8
   d48bc:	2003d944 	.word	0x2003d944
   d48c0:	2003d9c8 	.word	0x2003d9c8
   d48c4:	2003d9b8 	.word	0x2003d9b8
   d48c8:	2003d9d8 	.word	0x2003d9d8
   d48cc:	2003d9d0 	.word	0x2003d9d0

000d48d0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d48d0:	b508      	push	{r3, lr}
   d48d2:	4b02      	ldr	r3, [pc, #8]	; (d48dc <netdb_freeaddrinfo+0xc>)
   d48d4:	681b      	ldr	r3, [r3, #0]
   d48d6:	689b      	ldr	r3, [r3, #8]
   d48d8:	9301      	str	r3, [sp, #4]
   d48da:	bd08      	pop	{r3, pc}
   d48dc:	00030268 	.word	0x00030268

000d48e0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d48e0:	b508      	push	{r3, lr}
   d48e2:	4b02      	ldr	r3, [pc, #8]	; (d48ec <netdb_getaddrinfo+0xc>)
   d48e4:	681b      	ldr	r3, [r3, #0]
   d48e6:	68db      	ldr	r3, [r3, #12]
   d48e8:	9301      	str	r3, [sp, #4]
   d48ea:	bd08      	pop	{r3, pc}
   d48ec:	00030268 	.word	0x00030268

000d48f0 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d48f0:	b508      	push	{r3, lr}
   d48f2:	4b02      	ldr	r3, [pc, #8]	; (d48fc <HAL_Pin_Map+0xc>)
   d48f4:	681b      	ldr	r3, [r3, #0]
   d48f6:	681b      	ldr	r3, [r3, #0]
   d48f8:	9301      	str	r3, [sp, #4]
   d48fa:	bd08      	pop	{r3, pc}
   d48fc:	0003022c 	.word	0x0003022c

000d4900 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4900:	b508      	push	{r3, lr}
   d4902:	4b02      	ldr	r3, [pc, #8]	; (d490c <HAL_RNG_GetRandomNumber+0xc>)
   d4904:	681b      	ldr	r3, [r3, #0]
   d4906:	685b      	ldr	r3, [r3, #4]
   d4908:	9301      	str	r3, [sp, #4]
   d490a:	bd08      	pop	{r3, pc}
   d490c:	00030218 	.word	0x00030218

000d4910 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <HAL_Delay_Microseconds+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	68db      	ldr	r3, [r3, #12]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030218 	.word	0x00030218

000d4920 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	695b      	ldr	r3, [r3, #20]
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030218 	.word	0x00030218

000d4930 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <hal_ble_stack_init+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	689b      	ldr	r3, [r3, #8]
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030278 	.word	0x00030278

000d4940 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <hal_ble_gap_start_scan+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030278 	.word	0x00030278

000d4950 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b03      	ldr	r3, [pc, #12]	; (d4960 <hal_ble_gap_stop_scan+0x10>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d495a:	9301      	str	r3, [sp, #4]
   d495c:	bd08      	pop	{r3, pc}
   d495e:	0000      	.short	0x0000
   d4960:	00030278 	.word	0x00030278

000d4964 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b03      	ldr	r3, [pc, #12]	; (d4974 <hal_ble_gap_disconnect+0x10>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d496e:	9301      	str	r3, [sp, #4]
   d4970:	bd08      	pop	{r3, pc}
   d4972:	0000      	.short	0x0000
   d4974:	00030278 	.word	0x00030278

000d4978 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b03      	ldr	r3, [pc, #12]	; (d4988 <hal_ble_gatt_client_discover_all_services+0x10>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d4982:	9301      	str	r3, [sp, #4]
   d4984:	bd08      	pop	{r3, pc}
   d4986:	0000      	.short	0x0000
   d4988:	00030278 	.word	0x00030278

000d498c <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d498c:	b508      	push	{r3, lr}
   d498e:	4b03      	ldr	r3, [pc, #12]	; (d499c <hal_ble_gatt_client_discover_characteristics+0x10>)
   d4990:	681b      	ldr	r3, [r3, #0]
   d4992:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d4996:	9301      	str	r3, [sp, #4]
   d4998:	bd08      	pop	{r3, pc}
   d499a:	0000      	.short	0x0000
   d499c:	00030278 	.word	0x00030278

000d49a0 <hal_ble_gatt_client_read>:
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d49a0:	b508      	push	{r3, lr}
   d49a2:	4b03      	ldr	r3, [pc, #12]	; (d49b0 <hal_ble_gatt_client_read+0x10>)
   d49a4:	681b      	ldr	r3, [r3, #0]
   d49a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d49aa:	9301      	str	r3, [sp, #4]
   d49ac:	bd08      	pop	{r3, pc}
   d49ae:	0000      	.short	0x0000
   d49b0:	00030278 	.word	0x00030278

000d49b4 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b03      	ldr	r3, [pc, #12]	; (d49c4 <hal_ble_gap_connect+0x10>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d49be:	9301      	str	r3, [sp, #4]
   d49c0:	bd08      	pop	{r3, pc}
   d49c2:	0000      	.short	0x0000
   d49c4:	00030278 	.word	0x00030278

000d49c8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d49c8:	b508      	push	{r3, lr}
   d49ca:	4b03      	ldr	r3, [pc, #12]	; (d49d8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d49cc:	681b      	ldr	r3, [r3, #0]
   d49ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d49d2:	9301      	str	r3, [sp, #4]
   d49d4:	bd08      	pop	{r3, pc}
   d49d6:	0000      	.short	0x0000
   d49d8:	00030278 	.word	0x00030278

000d49dc <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d49dc:	b508      	push	{r3, lr}
   d49de:	4b03      	ldr	r3, [pc, #12]	; (d49ec <hal_ble_gatt_client_configure_cccd+0x10>)
   d49e0:	681b      	ldr	r3, [r3, #0]
   d49e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d49e6:	9301      	str	r3, [sp, #4]
   d49e8:	bd08      	pop	{r3, pc}
   d49ea:	0000      	.short	0x0000
   d49ec:	00030278 	.word	0x00030278

000d49f0 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <os_thread_is_current+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	689b      	ldr	r3, [r3, #8]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030248 	.word	0x00030248

000d4a00 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <os_thread_join+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	691b      	ldr	r3, [r3, #16]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030248 	.word	0x00030248

000d4a10 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <os_thread_cleanup+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	695b      	ldr	r3, [r3, #20]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030248 	.word	0x00030248

000d4a20 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <os_mutex_recursive_create+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030248 	.word	0x00030248

000d4a30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <os_mutex_recursive_destroy+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030248 	.word	0x00030248

000d4a40 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <os_mutex_recursive_lock+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030248 	.word	0x00030248

000d4a50 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <os_mutex_recursive_unlock+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030248 	.word	0x00030248

000d4a60 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <inet_inet_ntop+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	695b      	ldr	r3, [r3, #20]
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030264 	.word	0x00030264

000d4a70 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <HAL_USART_Init+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	681b      	ldr	r3, [r3, #0]
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	0003023c 	.word	0x0003023c

000d4a80 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <HAL_USART_End+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	689b      	ldr	r3, [r3, #8]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003023c 	.word	0x0003023c

000d4a90 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <HAL_USART_Write_Data+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	68db      	ldr	r3, [r3, #12]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003023c 	.word	0x0003023c

000d4aa0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <HAL_USART_Available_Data+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	691b      	ldr	r3, [r3, #16]
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003023c 	.word	0x0003023c

000d4ab0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <HAL_USART_Read_Data+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	695b      	ldr	r3, [r3, #20]
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	0003023c 	.word	0x0003023c

000d4ac0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <HAL_USART_Peek_Data+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	699b      	ldr	r3, [r3, #24]
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	0003023c 	.word	0x0003023c

000d4ad0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <HAL_USART_Flush_Data+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	69db      	ldr	r3, [r3, #28]
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	0003023c 	.word	0x0003023c

000d4ae0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_USART_Available_Data_For_Write+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	0003023c 	.word	0x0003023c

000d4af0 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_USART_BeginConfig+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	0003023c 	.word	0x0003023c

000d4b00 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_USB_USART_Init+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	681b      	ldr	r3, [r3, #0]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	0003024c 	.word	0x0003024c

000d4b10 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <HAL_USB_USART_Begin+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	685b      	ldr	r3, [r3, #4]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	0003024c 	.word	0x0003024c

000d4b20 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <HAL_USB_USART_End+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	689b      	ldr	r3, [r3, #8]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	0003024c 	.word	0x0003024c

000d4b30 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <HAL_USB_USART_Available_Data+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	691b      	ldr	r3, [r3, #16]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	0003024c 	.word	0x0003024c

000d4b40 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	695b      	ldr	r3, [r3, #20]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003024c 	.word	0x0003024c

000d4b50 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <HAL_USB_USART_Receive_Data+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	699b      	ldr	r3, [r3, #24]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003024c 	.word	0x0003024c

000d4b60 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <HAL_USB_USART_Send_Data+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	69db      	ldr	r3, [r3, #28]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003024c 	.word	0x0003024c

000d4b70 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <HAL_USB_USART_Flush_Data+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	6a1b      	ldr	r3, [r3, #32]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003024c 	.word	0x0003024c

000d4b80 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <panic_+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	00030260 	.word	0x00030260

000d4b90 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <log_message+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	00030260 	.word	0x00030260

000d4ba0 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <log_message_v+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	00030260 	.word	0x00030260

000d4bb0 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <log_level_name+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	00030260 	.word	0x00030260

000d4bc0 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <log_set_callbacks+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	00030260 	.word	0x00030260

000d4bd0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <set_system_mode+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	685b      	ldr	r3, [r3, #4]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	00030220 	.word	0x00030220

000d4be0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b03      	ldr	r3, [pc, #12]	; (d4bf0 <system_ctrl_set_app_request_handler+0x10>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4bea:	9301      	str	r3, [sp, #4]
   d4bec:	bd08      	pop	{r3, pc}
   d4bee:	0000      	.short	0x0000
   d4bf0:	00030220 	.word	0x00030220

000d4bf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b03      	ldr	r3, [pc, #12]	; (d4c04 <system_ctrl_set_result+0x10>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4bfe:	9301      	str	r3, [sp, #4]
   d4c00:	bd08      	pop	{r3, pc}
   d4c02:	0000      	.short	0x0000
   d4c04:	00030220 	.word	0x00030220

000d4c08 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c08:	b508      	push	{r3, lr}
   d4c0a:	4b02      	ldr	r3, [pc, #8]	; (d4c14 <network_connect+0xc>)
   d4c0c:	681b      	ldr	r3, [r3, #0]
   d4c0e:	685b      	ldr	r3, [r3, #4]
   d4c10:	9301      	str	r3, [sp, #4]
   d4c12:	bd08      	pop	{r3, pc}
   d4c14:	00030240 	.word	0x00030240

000d4c18 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c18:	b508      	push	{r3, lr}
   d4c1a:	4b02      	ldr	r3, [pc, #8]	; (d4c24 <network_connecting+0xc>)
   d4c1c:	681b      	ldr	r3, [r3, #0]
   d4c1e:	689b      	ldr	r3, [r3, #8]
   d4c20:	9301      	str	r3, [sp, #4]
   d4c22:	bd08      	pop	{r3, pc}
   d4c24:	00030240 	.word	0x00030240

000d4c28 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c28:	b508      	push	{r3, lr}
   d4c2a:	4b02      	ldr	r3, [pc, #8]	; (d4c34 <network_disconnect+0xc>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	68db      	ldr	r3, [r3, #12]
   d4c30:	9301      	str	r3, [sp, #4]
   d4c32:	bd08      	pop	{r3, pc}
   d4c34:	00030240 	.word	0x00030240

000d4c38 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c38:	b508      	push	{r3, lr}
   d4c3a:	4b02      	ldr	r3, [pc, #8]	; (d4c44 <network_ready+0xc>)
   d4c3c:	681b      	ldr	r3, [r3, #0]
   d4c3e:	691b      	ldr	r3, [r3, #16]
   d4c40:	9301      	str	r3, [sp, #4]
   d4c42:	bd08      	pop	{r3, pc}
   d4c44:	00030240 	.word	0x00030240

000d4c48 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b02      	ldr	r3, [pc, #8]	; (d4c54 <network_on+0xc>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	695b      	ldr	r3, [r3, #20]
   d4c50:	9301      	str	r3, [sp, #4]
   d4c52:	bd08      	pop	{r3, pc}
   d4c54:	00030240 	.word	0x00030240

000d4c58 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c58:	b508      	push	{r3, lr}
   d4c5a:	4b02      	ldr	r3, [pc, #8]	; (d4c64 <network_off+0xc>)
   d4c5c:	681b      	ldr	r3, [r3, #0]
   d4c5e:	699b      	ldr	r3, [r3, #24]
   d4c60:	9301      	str	r3, [sp, #4]
   d4c62:	bd08      	pop	{r3, pc}
   d4c64:	00030240 	.word	0x00030240

000d4c68 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4c68:	b508      	push	{r3, lr}
   d4c6a:	4b02      	ldr	r3, [pc, #8]	; (d4c74 <network_listen+0xc>)
   d4c6c:	681b      	ldr	r3, [r3, #0]
   d4c6e:	69db      	ldr	r3, [r3, #28]
   d4c70:	9301      	str	r3, [sp, #4]
   d4c72:	bd08      	pop	{r3, pc}
   d4c74:	00030240 	.word	0x00030240

000d4c78 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4c78:	b508      	push	{r3, lr}
   d4c7a:	4b02      	ldr	r3, [pc, #8]	; (d4c84 <network_listening+0xc>)
   d4c7c:	681b      	ldr	r3, [r3, #0]
   d4c7e:	6a1b      	ldr	r3, [r3, #32]
   d4c80:	9301      	str	r3, [sp, #4]
   d4c82:	bd08      	pop	{r3, pc}
   d4c84:	00030240 	.word	0x00030240

000d4c88 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4c88:	b508      	push	{r3, lr}
   d4c8a:	4b02      	ldr	r3, [pc, #8]	; (d4c94 <network_set_listen_timeout+0xc>)
   d4c8c:	681b      	ldr	r3, [r3, #0]
   d4c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c90:	9301      	str	r3, [sp, #4]
   d4c92:	bd08      	pop	{r3, pc}
   d4c94:	00030240 	.word	0x00030240

000d4c98 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4c98:	b508      	push	{r3, lr}
   d4c9a:	4b02      	ldr	r3, [pc, #8]	; (d4ca4 <network_get_listen_timeout+0xc>)
   d4c9c:	681b      	ldr	r3, [r3, #0]
   d4c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4ca0:	9301      	str	r3, [sp, #4]
   d4ca2:	bd08      	pop	{r3, pc}
   d4ca4:	00030240 	.word	0x00030240

000d4ca8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4ca8:	b508      	push	{r3, lr}
   d4caa:	4b02      	ldr	r3, [pc, #8]	; (d4cb4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4cac:	681b      	ldr	r3, [r3, #0]
   d4cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4cb0:	9301      	str	r3, [sp, #4]
   d4cb2:	bd08      	pop	{r3, pc}
   d4cb4:	00030244 	.word	0x00030244

000d4cb8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4cb8:	b508      	push	{r3, lr}
   d4cba:	4b02      	ldr	r3, [pc, #8]	; (d4cc4 <malloc+0xc>)
   d4cbc:	681b      	ldr	r3, [r3, #0]
   d4cbe:	681b      	ldr	r3, [r3, #0]
   d4cc0:	9301      	str	r3, [sp, #4]
   d4cc2:	bd08      	pop	{r3, pc}
   d4cc4:	0003021c 	.word	0x0003021c

000d4cc8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4cc8:	b508      	push	{r3, lr}
   d4cca:	4b02      	ldr	r3, [pc, #8]	; (d4cd4 <free+0xc>)
   d4ccc:	681b      	ldr	r3, [r3, #0]
   d4cce:	685b      	ldr	r3, [r3, #4]
   d4cd0:	9301      	str	r3, [sp, #4]
   d4cd2:	bd08      	pop	{r3, pc}
   d4cd4:	0003021c 	.word	0x0003021c

000d4cd8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4cd8:	b508      	push	{r3, lr}
   d4cda:	4b02      	ldr	r3, [pc, #8]	; (d4ce4 <realloc+0xc>)
   d4cdc:	681b      	ldr	r3, [r3, #0]
   d4cde:	689b      	ldr	r3, [r3, #8]
   d4ce0:	9301      	str	r3, [sp, #4]
   d4ce2:	bd08      	pop	{r3, pc}
   d4ce4:	0003021c 	.word	0x0003021c

000d4ce8 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4ce8:	b508      	push	{r3, lr}
   d4cea:	4b02      	ldr	r3, [pc, #8]	; (d4cf4 <vsnprintf+0xc>)
   d4cec:	681b      	ldr	r3, [r3, #0]
   d4cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cf0:	9301      	str	r3, [sp, #4]
   d4cf2:	bd08      	pop	{r3, pc}
   d4cf4:	0003021c 	.word	0x0003021c

000d4cf8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cf8:	2200      	movs	r2, #0
   d4cfa:	4611      	mov	r1, r2
   d4cfc:	6840      	ldr	r0, [r0, #4]
   d4cfe:	f7ff bfbb 	b.w	d4c78 <network_listening>

000d4d02 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d02:	2200      	movs	r2, #0
   d4d04:	4611      	mov	r1, r2
   d4d06:	6840      	ldr	r0, [r0, #4]
   d4d08:	f7ff bfc6 	b.w	d4c98 <network_get_listen_timeout>

000d4d0c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d0c:	2200      	movs	r2, #0
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	f7ff bfba 	b.w	d4c88 <network_set_listen_timeout>

000d4d14 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d14:	2200      	movs	r2, #0
   d4d16:	f081 0101 	eor.w	r1, r1, #1
   d4d1a:	6840      	ldr	r0, [r0, #4]
   d4d1c:	f7ff bfa4 	b.w	d4c68 <network_listen>

000d4d20 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4d20:	2300      	movs	r3, #0
   d4d22:	461a      	mov	r2, r3
   d4d24:	4619      	mov	r1, r3
   d4d26:	6840      	ldr	r0, [r0, #4]
   d4d28:	f7ff bf96 	b.w	d4c58 <network_off>

000d4d2c <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4d2c:	2300      	movs	r3, #0
   d4d2e:	461a      	mov	r2, r3
   d4d30:	4619      	mov	r1, r3
   d4d32:	6840      	ldr	r0, [r0, #4]
   d4d34:	f7ff bf88 	b.w	d4c48 <network_on>

000d4d38 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d38:	2200      	movs	r2, #0
   d4d3a:	4611      	mov	r1, r2
   d4d3c:	6840      	ldr	r0, [r0, #4]
   d4d3e:	f7ff bf7b 	b.w	d4c38 <network_ready>

000d4d42 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d42:	2200      	movs	r2, #0
   d4d44:	4611      	mov	r1, r2
   d4d46:	6840      	ldr	r0, [r0, #4]
   d4d48:	f7ff bf66 	b.w	d4c18 <network_connecting>

000d4d4c <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d4c:	2200      	movs	r2, #0
   d4d4e:	2102      	movs	r1, #2
   d4d50:	6840      	ldr	r0, [r0, #4]
   d4d52:	f7ff bf69 	b.w	d4c28 <network_disconnect>

000d4d56 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d56:	2300      	movs	r3, #0
   d4d58:	461a      	mov	r2, r3
   d4d5a:	6840      	ldr	r0, [r0, #4]
   d4d5c:	f7ff bf54 	b.w	d4c08 <network_connect>

000d4d60 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4d60:	4b02      	ldr	r3, [pc, #8]	; (d4d6c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d62:	2203      	movs	r2, #3
   d4d64:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d66:	4a02      	ldr	r2, [pc, #8]	; (d4d70 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d68:	601a      	str	r2, [r3, #0]
   d4d6a:	4770      	bx	lr
   d4d6c:	2003e3b8 	.word	0x2003e3b8
   d4d70:	000d8c8c 	.word	0x000d8c8c

000d4d74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4d74:	b510      	push	{r4, lr}
   d4d76:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4d78:	6800      	ldr	r0, [r0, #0]
   d4d7a:	b118      	cbz	r0, d4d84 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d4d7c:	f7ff ffa4 	bl	d4cc8 <free>
            wakeupSource_ = nullptr;
   d4d80:	2300      	movs	r3, #0
   d4d82:	6023      	str	r3, [r4, #0]
   d4d84:	bd10      	pop	{r4, pc}

000d4d86 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4d86:	b510      	push	{r4, lr}
   d4d88:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d4d8a:	f7ff fff3 	bl	d4d74 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4d8e:	4620      	mov	r0, r4
   d4d90:	bd10      	pop	{r4, pc}
	...

000d4d94 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4d94:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d96:	4c09      	ldr	r4, [pc, #36]	; (d4dbc <_GLOBAL__sub_I_System+0x28>)
   d4d98:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4d9e:	6020      	str	r0, [r4, #0]
   d4da0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4da2:	71a0      	strb	r0, [r4, #6]
   d4da4:	8120      	strh	r0, [r4, #8]
   d4da6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4da8:	f7ff ff12 	bl	d4bd0 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4dac:	4620      	mov	r0, r4
   d4dae:	4a04      	ldr	r2, [pc, #16]	; (d4dc0 <_GLOBAL__sub_I_System+0x2c>)
   d4db0:	4904      	ldr	r1, [pc, #16]	; (d4dc4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4db2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4db6:	f003 ba7e 	b.w	d82b6 <__aeabi_atexit>
   d4dba:	bf00      	nop
   d4dbc:	2003e3c0 	.word	0x2003e3c0
   d4dc0:	2003d940 	.word	0x2003d940
   d4dc4:	000d4d87 	.word	0x000d4d87

000d4dc8 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4dc8:	2300      	movs	r3, #0
   d4dca:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4dcc:	6043      	str	r3, [r0, #4]
	len = 0;
   d4dce:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4dd0:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d4dd2:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d4dd4:	680c      	ldr	r4, [r1, #0]
   d4dd6:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d4dd8:	684c      	ldr	r4, [r1, #4]
   d4dda:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d4ddc:	688c      	ldr	r4, [r1, #8]
   d4dde:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d4de0:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d4de2:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d4de4:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d4de6:	bd10      	pop	{r4, pc}

000d4de8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4de8:	b510      	push	{r4, lr}
   d4dea:	4604      	mov	r4, r0
{
	free(buffer);
   d4dec:	6800      	ldr	r0, [r0, #0]
   d4dee:	f7ff ff6b 	bl	d4cc8 <free>
}
   d4df2:	4620      	mov	r0, r4
   d4df4:	bd10      	pop	{r4, pc}

000d4df6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4df6:	b510      	push	{r4, lr}
   d4df8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4dfa:	6800      	ldr	r0, [r0, #0]
   d4dfc:	b108      	cbz	r0, d4e02 <_ZN6String10invalidateEv+0xc>
   d4dfe:	f7ff ff63 	bl	d4cc8 <free>
	buffer = NULL;
   d4e02:	2300      	movs	r3, #0
   d4e04:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4e06:	60a3      	str	r3, [r4, #8]
   d4e08:	6063      	str	r3, [r4, #4]
   d4e0a:	bd10      	pop	{r4, pc}

000d4e0c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4e0c:	b538      	push	{r3, r4, r5, lr}
   d4e0e:	4604      	mov	r4, r0
   d4e10:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4e12:	6800      	ldr	r0, [r0, #0]
   d4e14:	3101      	adds	r1, #1
   d4e16:	f7ff ff5f 	bl	d4cd8 <realloc>
	if (newbuffer) {
   d4e1a:	b110      	cbz	r0, d4e22 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4e1c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4e20:	2001      	movs	r0, #1
	}
	return 0;
}
   d4e22:	bd38      	pop	{r3, r4, r5, pc}

000d4e24 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4e24:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4e26:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4e28:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4e2a:	b113      	cbz	r3, d4e32 <_ZN6String7reserveEj+0xe>
   d4e2c:	6843      	ldr	r3, [r0, #4]
   d4e2e:	428b      	cmp	r3, r1
   d4e30:	d207      	bcs.n	d4e42 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4e32:	4620      	mov	r0, r4
   d4e34:	f7ff ffea 	bl	d4e0c <_ZN6String12changeBufferEj>
   d4e38:	b120      	cbz	r0, d4e44 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4e3a:	68a3      	ldr	r3, [r4, #8]
   d4e3c:	b90b      	cbnz	r3, d4e42 <_ZN6String7reserveEj+0x1e>
   d4e3e:	6822      	ldr	r2, [r4, #0]
   d4e40:	7013      	strb	r3, [r2, #0]
   d4e42:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4e44:	bd10      	pop	{r4, pc}

000d4e46 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e46:	b570      	push	{r4, r5, r6, lr}
   d4e48:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4e4a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4e4c:	4604      	mov	r4, r0
   d4e4e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4e50:	f7ff ffe8 	bl	d4e24 <_ZN6String7reserveEj>
   d4e54:	b918      	cbnz	r0, d4e5e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4e56:	4620      	mov	r0, r4
   d4e58:	f7ff ffcd 	bl	d4df6 <_ZN6String10invalidateEv>
		return *this;
   d4e5c:	e009      	b.n	d4e72 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4e5e:	462a      	mov	r2, r5
   d4e60:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4e62:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4e64:	6820      	ldr	r0, [r4, #0]
   d4e66:	f003 fbaa 	bl	d85be <memcpy>
	buffer[len] = 0;
   d4e6a:	6822      	ldr	r2, [r4, #0]
   d4e6c:	68a3      	ldr	r3, [r4, #8]
   d4e6e:	2100      	movs	r1, #0
   d4e70:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4e72:	4620      	mov	r0, r4
   d4e74:	bd70      	pop	{r4, r5, r6, pc}

000d4e76 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4e76:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e78:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4e7a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4e7c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4e7e:	6043      	str	r3, [r0, #4]
	len = 0;
   d4e80:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4e82:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4e84:	460d      	mov	r5, r1
   d4e86:	b139      	cbz	r1, d4e98 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4e88:	4608      	mov	r0, r1
   d4e8a:	f003 fc19 	bl	d86c0 <strlen>
   d4e8e:	4629      	mov	r1, r5
   d4e90:	4602      	mov	r2, r0
   d4e92:	4620      	mov	r0, r4
   d4e94:	f7ff ffd7 	bl	d4e46 <_ZN6String4copyEPKcj>
}
   d4e98:	4620      	mov	r0, r4
   d4e9a:	bd38      	pop	{r3, r4, r5, pc}

000d4e9c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d4e9c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d4e9e:	b510      	push	{r4, lr}
   d4ea0:	460b      	mov	r3, r1
   d4ea2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d4ea4:	d007      	beq.n	d4eb6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d4ea6:	6809      	ldr	r1, [r1, #0]
   d4ea8:	b119      	cbz	r1, d4eb2 <_ZN6StringaSERKS_+0x16>
   d4eaa:	689a      	ldr	r2, [r3, #8]
   d4eac:	f7ff ffcb 	bl	d4e46 <_ZN6String4copyEPKcj>
   d4eb0:	e001      	b.n	d4eb6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d4eb2:	f7ff ffa0 	bl	d4df6 <_ZN6String10invalidateEv>

	return *this;
}
   d4eb6:	4620      	mov	r0, r4
   d4eb8:	bd10      	pop	{r4, pc}

000d4eba <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4eba:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ebc:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d4ebe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4ec0:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4ec2:	6043      	str	r3, [r0, #4]
	len = 0;
   d4ec4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ec6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d4ec8:	f7ff ffe8 	bl	d4e9c <_ZN6StringaSERKS_>
}
   d4ecc:	4620      	mov	r0, r4
   d4ece:	bd10      	pop	{r4, pc}

000d4ed0 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d4ed0:	b538      	push	{r3, r4, r5, lr}
   d4ed2:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d4ed4:	460c      	mov	r4, r1
   d4ed6:	b141      	cbz	r1, d4eea <_ZN6StringaSEPKc+0x1a>
   d4ed8:	4608      	mov	r0, r1
   d4eda:	f003 fbf1 	bl	d86c0 <strlen>
   d4ede:	4621      	mov	r1, r4
   d4ee0:	4602      	mov	r2, r0
   d4ee2:	4628      	mov	r0, r5
   d4ee4:	f7ff ffaf 	bl	d4e46 <_ZN6String4copyEPKcj>
   d4ee8:	e001      	b.n	d4eee <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d4eea:	f7ff ff84 	bl	d4df6 <_ZN6String10invalidateEv>

	return *this;
}
   d4eee:	4628      	mov	r0, r5
   d4ef0:	bd38      	pop	{r3, r4, r5, pc}

000d4ef2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d4ef2:	b570      	push	{r4, r5, r6, lr}
   d4ef4:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d4ef6:	460e      	mov	r6, r1
   d4ef8:	b909      	cbnz	r1, d4efe <_ZN6String6concatEPKcj+0xc>
   d4efa:	2000      	movs	r0, #0
   d4efc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d4efe:	b16a      	cbz	r2, d4f1c <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
   d4f00:	6883      	ldr	r3, [r0, #8]
   d4f02:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
   d4f04:	4629      	mov	r1, r5
   d4f06:	f7ff ff8d 	bl	d4e24 <_ZN6String7reserveEj>
   d4f0a:	2800      	cmp	r0, #0
   d4f0c:	d0f5      	beq.n	d4efa <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d4f0e:	6820      	ldr	r0, [r4, #0]
   d4f10:	68a3      	ldr	r3, [r4, #8]
   d4f12:	4631      	mov	r1, r6
   d4f14:	4418      	add	r0, r3
   d4f16:	f003 fbcb 	bl	d86b0 <strcpy>
	len = newlen;
   d4f1a:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
   d4f1c:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d4f1e:	bd70      	pop	{r4, r5, r6, pc}

000d4f20 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4f20:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4f22:	688a      	ldr	r2, [r1, #8]
   d4f24:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d4f26:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d4f28:	f7ff ffe3 	bl	d4ef2 <_ZN6String6concatEPKcj>
   d4f2c:	b910      	cbnz	r0, d4f34 <_ZplRK15StringSumHelperRK6String+0x14>
   d4f2e:	4620      	mov	r0, r4
   d4f30:	f7ff ff61 	bl	d4df6 <_ZN6String10invalidateEv>
	return a;
}
   d4f34:	4620      	mov	r0, r4
   d4f36:	bd10      	pop	{r4, pc}

000d4f38 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4f38:	4770      	bx	lr

000d4f3a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4f3a:	2000      	movs	r0, #0
   d4f3c:	4770      	bx	lr

000d4f3e <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4f3e:	4770      	bx	lr

000d4f40 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4f40:	2000      	movs	r0, #0
   d4f42:	4770      	bx	lr

000d4f44 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4f44:	4770      	bx	lr

000d4f46 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d4f46:	2000      	movs	r0, #0
   d4f48:	4770      	bx	lr

000d4f4a <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d4f4a:	b510      	push	{r4, lr}
   d4f4c:	2114      	movs	r1, #20
   d4f4e:	4604      	mov	r4, r0
   d4f50:	f003 f9be 	bl	d82d0 <_ZdlPvj>
   d4f54:	4620      	mov	r0, r4
   d4f56:	bd10      	pop	{r4, pc}

000d4f58 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4f58:	b510      	push	{r4, lr}
   d4f5a:	2114      	movs	r1, #20
   d4f5c:	4604      	mov	r4, r0
   d4f5e:	f003 f9b7 	bl	d82d0 <_ZdlPvj>
   d4f62:	4620      	mov	r0, r4
   d4f64:	bd10      	pop	{r4, pc}

000d4f66 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d4f66:	b510      	push	{r4, lr}
   d4f68:	2114      	movs	r1, #20
   d4f6a:	4604      	mov	r4, r0
   d4f6c:	f003 f9b0 	bl	d82d0 <_ZdlPvj>
   d4f70:	4620      	mov	r0, r4
   d4f72:	bd10      	pop	{r4, pc}

000d4f74 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d4f74:	f7ff b891 	b.w	d409a <_ZdlPv>

000d4f78 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4f78:	f7ff b88f 	b.w	d409a <_ZdlPv>

000d4f7c <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d4f7c:	f7ff b88d 	b.w	d409a <_ZdlPv>

000d4f80 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f80:	b510      	push	{r4, lr}
   d4f82:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f84:	6800      	ldr	r0, [r0, #0]
   d4f86:	b108      	cbz	r0, d4f8c <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f88:	f7ff fd52 	bl	d4a30 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	bd10      	pop	{r4, pc}

000d4f90 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d4f90:	b530      	push	{r4, r5, lr}
   d4f92:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering services.");
   d4f94:	2320      	movs	r3, #32
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d4f96:	4605      	mov	r5, r0
        LOG(TRACE, "Start discovering services.");
   d4f98:	2400      	movs	r4, #0
   d4f9a:	9302      	str	r3, [sp, #8]
   d4f9c:	4b08      	ldr	r3, [pc, #32]	; (d4fc0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x30>)
   d4f9e:	9300      	str	r3, [sp, #0]
   d4fa0:	aa02      	add	r2, sp, #8
   d4fa2:	4623      	mov	r3, r4
   d4fa4:	4907      	ldr	r1, [pc, #28]	; (d4fc4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x34>)
   d4fa6:	9403      	str	r4, [sp, #12]
   d4fa8:	2001      	movs	r0, #1
   d4faa:	f7ff fdf1 	bl	d4b90 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d4fae:	6828      	ldr	r0, [r5, #0]
   d4fb0:	4905      	ldr	r1, [pc, #20]	; (d4fc8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20+0x38>)
   d4fb2:	8800      	ldrh	r0, [r0, #0]
   d4fb4:	4623      	mov	r3, r4
   d4fb6:	462a      	mov	r2, r5
   d4fb8:	f7ff fcde 	bl	d4978 <hal_ble_gatt_client_discover_all_services>
    }
   d4fbc:	b00b      	add	sp, #44	; 0x2c
   d4fbe:	bd30      	pop	{r4, r5, pc}
   d4fc0:	000d8d17 	.word	0x000d8d17
   d4fc4:	000d8d0c 	.word	0x000d8d0c
   d4fc8:	000d6639 	.word	0x000d6639

000d4fcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d4fcc:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d4fce:	200a      	movs	r0, #10
   d4fd0:	4a02      	ldr	r2, [pc, #8]	; (d4fdc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d4fd2:	2100      	movs	r1, #0
   d4fd4:	f7ff fdd4 	bl	d4b80 <panic_>
    }
}
   d4fd8:	bd08      	pop	{r3, pc}
   d4fda:	bf00      	nop
   d4fdc:	000d4911 	.word	0x000d4911

000d4fe0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4fe0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4fe2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4fe4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4fe6:	689b      	ldr	r3, [r3, #8]
   d4fe8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4fea:	68a3      	ldr	r3, [r4, #8]
   d4fec:	3b01      	subs	r3, #1
   d4fee:	60a3      	str	r3, [r4, #8]
   d4ff0:	b92b      	cbnz	r3, d4ffe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d4ff2:	6823      	ldr	r3, [r4, #0]
   d4ff4:	4620      	mov	r0, r4
   d4ff6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4ffc:	4718      	bx	r3
   d4ffe:	bd10      	pop	{r4, pc}

000d5000 <_ZL12bytes2hexbufPKhjPc>:
    *p++ = ascii_nibble_lower_case(nibble);
    return p;
}

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
   d5000:	b570      	push	{r4, r5, r6, lr}
   d5002:	1c93      	adds	r3, r2, #2
   d5004:	4401      	add	r1, r0
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d5006:	4288      	cmp	r0, r1
   d5008:	d018      	beq.n	d503c <_ZL12bytes2hexbufPKhjPc+0x3c>
    {
        out = concat_nibble(out, (buf[i] >> 4));
   d500a:	7804      	ldrb	r4, [r0, #0]
   d500c:	0924      	lsrs	r4, r4, #4
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d500e:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d5012:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d5014:	bf88      	it	hi
   d5016:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
   d501a:	4606      	mov	r6, r0
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d501c:	f803 5c02 	strb.w	r5, [r3, #-2]
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
   d5020:	7834      	ldrb	r4, [r6, #0]
   d5022:	f004 040f 	and.w	r4, r4, #15
 */

#pragma once

static inline char ascii_nibble(uint8_t nibble) {
    char hex_digit = nibble + 48;
   d5026:	f104 0530 	add.w	r5, r4, #48	; 0x30
    if (57 < hex_digit) {
   d502a:	2d39      	cmp	r5, #57	; 0x39
        hex_digit += 7;
   d502c:	bf88      	it	hi
   d502e:	f104 0537 	addhi.w	r5, r4, #55	; 0x37
    return hex_digit;
}

static inline char* concat_nibble(char* p, uint8_t nibble)
{
    *p++ = ascii_nibble(nibble);
   d5032:	f803 5c01 	strb.w	r5, [r3, #-1]
   d5036:	3001      	adds	r0, #1
   d5038:	3302      	adds	r3, #2

static inline char* bytes2hexbuf(const uint8_t* buf, unsigned len, char* out)
{
    unsigned i;
    char* result = out;
    for (i = 0; i < len; ++i)
   d503a:	e7e4      	b.n	d5006 <_ZL12bytes2hexbufPKhjPc+0x6>
    {
        out = concat_nibble(out, (buf[i] >> 4));
        out = concat_nibble(out, (buf[i] & 0xF));
    }
    return result;
}
   d503c:	4610      	mov	r0, r2
   d503e:	bd70      	pop	{r4, r5, r6, pc}

000d5040 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d5040:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d5044:	b2da      	uxtb	r2, r3
   d5046:	2a09      	cmp	r2, #9
   d5048:	d801      	bhi.n	d504e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d504a:	4618      	mov	r0, r3
   d504c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d504e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5052:	2b05      	cmp	r3, #5
   d5054:	d801      	bhi.n	d505a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5056:	3857      	subs	r0, #87	; 0x57
   d5058:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d505a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d505e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5060:	bf94      	ite	ls
   d5062:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5064:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d5068:	4770      	bx	lr
	...

000d506c <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d506c:	b510      	push	{r4, lr}
            locked_(false) {
   d506e:	2300      	movs	r3, #0
   d5070:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5072:	4b04      	ldr	r3, [pc, #16]	; (d5084 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5074:	4604      	mov	r4, r0
   d5076:	6818      	ldr	r0, [r3, #0]
   d5078:	f7ff fce2 	bl	d4a40 <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d507c:	2301      	movs	r3, #1
   d507e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5080:	4620      	mov	r0, r4
   d5082:	bd10      	pop	{r4, pc}
   d5084:	2003e3d4 	.word	0x2003e3d4

000d5088 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5088:	b510      	push	{r4, lr}
        if (locked_) {
   d508a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d508c:	4604      	mov	r4, r0
        if (locked_) {
   d508e:	b11b      	cbz	r3, d5098 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5090:	4b02      	ldr	r3, [pc, #8]	; (d509c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5092:	6818      	ldr	r0, [r3, #0]
   d5094:	f7ff fcdc 	bl	d4a50 <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5098:	4620      	mov	r0, r4
   d509a:	bd10      	pop	{r4, pc}
   d509c:	2003e3d4 	.word	0x2003e3d4

000d50a0 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d50a0:	2200      	movs	r2, #0
   d50a2:	6002      	str	r2, [r0, #0]
   d50a4:	6042      	str	r2, [r0, #4]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
}
   d50a6:	4770      	bx	lr

000d50a8 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d50a8:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d50aa:	7982      	ldrb	r2, [r0, #6]
   d50ac:	798b      	ldrb	r3, [r1, #6]
   d50ae:	429a      	cmp	r2, r3
   d50b0:	d106      	bne.n	d50c0 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d50b2:	2206      	movs	r2, #6
   d50b4:	f003 fa74 	bl	d85a0 <memcmp>
   d50b8:	fab0 f080 	clz	r0, r0
   d50bc:	0940      	lsrs	r0, r0, #5
   d50be:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d50c0:	2000      	movs	r0, #0
}
   d50c2:	bd08      	pop	{r3, pc}

000d50c4 <_ZNK8particle10BleAddress11toBigEndianEPh>:

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
   d50c4:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d50c6:	2305      	movs	r3, #5
        buf[i] = address_.addr[j];
   d50c8:	5cc2      	ldrb	r2, [r0, r3]
   d50ca:	f801 2f01 	strb.w	r2, [r1, #1]!
    }
    return false;
}

void BleAddress::toBigEndian(uint8_t buf[BLE_SIG_ADDR_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_ADDR_LEN - 1; i < BLE_SIG_ADDR_LEN; i++, j--) {
   d50ce:	3b01      	subs	r3, #1
   d50d0:	b2db      	uxtb	r3, r3
   d50d2:	2bff      	cmp	r3, #255	; 0xff
   d50d4:	d1f8      	bne.n	d50c8 <_ZNK8particle10BleAddress11toBigEndianEPh+0x4>
        buf[i] = address_.addr[j];
    }
}
   d50d6:	4770      	bx	lr

000d50d8 <_ZNK8particle10BleAddress8toStringEPcjb>:
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
   d50d8:	b570      	push	{r4, r5, r6, lr}
   d50da:	4614      	mov	r4, r2
   d50dc:	b088      	sub	sp, #32
   d50de:	461d      	mov	r5, r3
    if (!buf || len == 0) {
   d50e0:	460e      	mov	r6, r1
   d50e2:	2900      	cmp	r1, #0
   d50e4:	d046      	beq.n	d5174 <_ZNK8particle10BleAddress8toStringEPcjb+0x9c>
   d50e6:	2a00      	cmp	r2, #0
   d50e8:	d046      	beq.n	d5178 <_ZNK8particle10BleAddress8toStringEPcjb+0xa0>
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
   d50ea:	a901      	add	r1, sp, #4
   d50ec:	f7ff ffea 	bl	d50c4 <_ZNK8particle10BleAddress11toBigEndianEPh>
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d50f0:	aa03      	add	r2, sp, #12
        return 0;
    }
    uint8_t temp[BLE_SIG_ADDR_LEN];
    char cStr[BLE_SIG_ADDR_LEN * 2 + 5];
    toBigEndian(temp);
    if (stripped) {
   d50f2:	b115      	cbz	r5, d50fa <_ZNK8particle10BleAddress8toStringEPcjb+0x22>
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
   d50f4:	2106      	movs	r1, #6
   d50f6:	a801      	add	r0, sp, #4
   d50f8:	e02d      	b.n	d5156 <_ZNK8particle10BleAddress8toStringEPcjb+0x7e>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
   d50fa:	2101      	movs	r1, #1
   d50fc:	a801      	add	r0, sp, #4
   d50fe:	f7ff ff7f 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2] = ':';
   d5102:	253a      	movs	r5, #58	; 0x3a
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d5104:	f10d 020f 	add.w	r2, sp, #15
   d5108:	2101      	movs	r1, #1
   d510a:	f10d 0005 	add.w	r0, sp, #5
        bytes2hexbuf(temp, BLE_SIG_ADDR_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
   d510e:	f88d 500e 	strb.w	r5, [sp, #14]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
   d5112:	f7ff ff75 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d5116:	f10d 0212 	add.w	r2, sp, #18
   d511a:	2101      	movs	r1, #1
   d511c:	f10d 0006 	add.w	r0, sp, #6
        bytes2hexbuf(&temp[idx], 1, &cStr[idx]);
        idx++;
        cStr[idx * 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
   d5120:	f88d 5011 	strb.w	r5, [sp, #17]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
   d5124:	f7ff ff6c 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d5128:	f10d 0215 	add.w	r2, sp, #21
   d512c:	2101      	movs	r1, #1
   d512e:	f10d 0007 	add.w	r0, sp, #7
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 1]);
        idx++;
        cStr[idx * 2 + 1] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
   d5132:	f88d 5014 	strb.w	r5, [sp, #20]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
   d5136:	f7ff ff63 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 3] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d513a:	aa06      	add	r2, sp, #24
   d513c:	2101      	movs	r1, #1
   d513e:	a802      	add	r0, sp, #8
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 2]);
        idx++;
        cStr[idx * 2 + 2] = ':';
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 3]);
        idx++;
        cStr[idx * 2 + 3] = ':';
   d5140:	f88d 5017 	strb.w	r5, [sp, #23]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 4]);
   d5144:	f7ff ff5c 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx++;
        cStr[idx * 2 + 4] = ':';
   d5148:	f88d 501a 	strb.w	r5, [sp, #26]
        bytes2hexbuf(&temp[idx], 1, &cStr[idx * 2 + 5]);
   d514c:	f10d 021b 	add.w	r2, sp, #27
   d5150:	2101      	movs	r1, #1
   d5152:	f10d 0009 	add.w	r0, sp, #9
   d5156:	3c01      	subs	r4, #1
   d5158:	f7ff ff52 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
   d515c:	2c11      	cmp	r4, #17
   d515e:	bf28      	it	cs
   d5160:	2411      	movcs	r4, #17
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d5162:	4622      	mov	r2, r4
   d5164:	a903      	add	r1, sp, #12
   d5166:	4630      	mov	r0, r6
   d5168:	f003 fa29 	bl	d85be <memcpy>
    buf[len++] = '\0';
   d516c:	2300      	movs	r3, #0
   d516e:	5533      	strb	r3, [r6, r4]
   d5170:	1c60      	adds	r0, r4, #1
   d5172:	e002      	b.n	d517a <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
    return String(cStr);
}

size_t BleAddress::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d5174:	4608      	mov	r0, r1
   d5176:	e000      	b.n	d517a <_ZNK8particle10BleAddress8toStringEPcjb+0xa2>
   d5178:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d517a:	b008      	add	sp, #32
   d517c:	bd70      	pop	{r4, r5, r6, pc}

000d517e <_ZNK8particle10BleAddress8toStringEb>:

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d517e:	b510      	push	{r4, lr}
   d5180:	b086      	sub	sp, #24
   d5182:	4604      	mov	r4, r0
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d5184:	4613      	mov	r3, r2

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
}

String BleAddress::toString(bool stripped) const {
   d5186:	4608      	mov	r0, r1
    char cStr[BLE_SIG_ADDR_LEN * 2 + 6];
    toString(cStr, sizeof(cStr), stripped);
   d5188:	2212      	movs	r2, #18
   d518a:	a901      	add	r1, sp, #4
   d518c:	f7ff ffa4 	bl	d50d8 <_ZNK8particle10BleAddress8toStringEPcjb>
    return String(cStr);
   d5190:	a901      	add	r1, sp, #4
   d5192:	4620      	mov	r0, r4
   d5194:	f7ff fe6f 	bl	d4e76 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d5198:	4620      	mov	r0, r4
   d519a:	b006      	add	sp, #24
   d519c:	bd10      	pop	{r4, pc}
	...

000d51a0 <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d51a0:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d51a2:	2301      	movs	r3, #1
   d51a4:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d51a6:	4b05      	ldr	r3, [pc, #20]	; (d51bc <_ZN8particle7BleUuidC1Ev+0x1c>)
   d51a8:	4602      	mov	r2, r0
   d51aa:	f103 0110 	add.w	r1, r3, #16
   d51ae:	f853 4b04 	ldr.w	r4, [r3], #4
   d51b2:	f842 4b04 	str.w	r4, [r2], #4
   d51b6:	428b      	cmp	r3, r1
   d51b8:	d1f9      	bne.n	d51ae <_ZN8particle7BleUuidC1Ev+0xe>
}
   d51ba:	bd10      	pop	{r4, pc}
   d51bc:	000d8eac 	.word	0x000d8eac

000d51c0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d51c0:	7c0b      	ldrb	r3, [r1, #16]
   d51c2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid()
        : type_(BleUuidType::LONG) {
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d51c6:	b530      	push	{r4, r5, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d51c8:	d110      	bne.n	d51ec <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2c>
        type_ = BleUuidType::SHORT;
   d51ca:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d51cc:	4b0d      	ldr	r3, [pc, #52]	; (d5204 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d51ce:	4602      	mov	r2, r0
   d51d0:	f103 0410 	add.w	r4, r3, #16
   d51d4:	f853 5b04 	ldr.w	r5, [r3], #4
   d51d8:	f842 5b04 	str.w	r5, [r2], #4
   d51dc:	42a3      	cmp	r3, r4
   d51de:	d1f9      	bne.n	d51d4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x14>
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d51e0:	880b      	ldrh	r3, [r1, #0]
   d51e2:	7303      	strb	r3, [r0, #12]
        uuid128_[UUID16_HI] = (uint8_t)(uuid.uuid16 >> 8);
   d51e4:	880b      	ldrh	r3, [r1, #0]
   d51e6:	121b      	asrs	r3, r3, #8
   d51e8:	7343      	strb	r3, [r0, #13]
   d51ea:	bd30      	pop	{r4, r5, pc}
    } else {
        type_ = BleUuidType::LONG;
   d51ec:	2301      	movs	r3, #1
   d51ee:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d51f0:	f101 0210 	add.w	r2, r1, #16
   d51f4:	4603      	mov	r3, r0
   d51f6:	f851 4b04 	ldr.w	r4, [r1], #4
   d51fa:	f843 4b04 	str.w	r4, [r3], #4
   d51fe:	4291      	cmp	r1, r2
   d5200:	d1f9      	bne.n	d51f6 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x36>
    }
}
   d5202:	bd30      	pop	{r4, r5, pc}
   d5204:	000d8eac 	.word	0x000d8eac

000d5208 <_ZN8particle7BleUuidC1ERKS0_>:

BleUuid::BleUuid(const BleUuid& uuid)
   d5208:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d520a:	690b      	ldr	r3, [r1, #16]
   d520c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d520e:	f101 0210 	add.w	r2, r1, #16
   d5212:	4603      	mov	r3, r0
   d5214:	f851 4b04 	ldr.w	r4, [r1], #4
   d5218:	f843 4b04 	str.w	r4, [r3], #4
   d521c:	4291      	cmp	r1, r2
   d521e:	d1f9      	bne.n	d5214 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5220:	bd10      	pop	{r4, pc}

000d5222 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5222:	b510      	push	{r4, lr}
    if (uuid128) {
   d5224:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5226:	4604      	mov	r4, r0
    if (uuid128) {
   d5228:	b1b9      	cbz	r1, d525a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d522a:	2a01      	cmp	r2, #1
   d522c:	d109      	bne.n	d5242 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d522e:	4603      	mov	r3, r0
   d5230:	f101 0210 	add.w	r2, r1, #16
   d5234:	f851 0b04 	ldr.w	r0, [r1], #4
   d5238:	f843 0b04 	str.w	r0, [r3], #4
   d523c:	4291      	cmp	r1, r2
   d523e:	d1f9      	bne.n	d5234 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d5240:	e008      	b.n	d5254 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d5242:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d5244:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d5246:	5c98      	ldrb	r0, [r3, r2]
   d5248:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d524c:	3a01      	subs	r2, #1
   d524e:	b2d2      	uxtb	r2, r2
   d5250:	2aff      	cmp	r2, #255	; 0xff
   d5252:	d1f8      	bne.n	d5246 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d5254:	2301      	movs	r3, #1
   d5256:	6123      	str	r3, [r4, #16]
   d5258:	e002      	b.n	d5260 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d525a:	2210      	movs	r2, #16
   d525c:	f003 f9d5 	bl	d860a <memset>
    }
}
   d5260:	4620      	mov	r0, r4
   d5262:	bd10      	pop	{r4, pc}

000d5264 <_ZN8particle7BleUuidC1Et>:

BleUuid::BleUuid(uint16_t uuid16)
   d5264:	b538      	push	{r3, r4, r5, lr}
   d5266:	4604      	mov	r4, r0
   d5268:	460d      	mov	r5, r1
        : BleUuid() {
   d526a:	f7ff ff99 	bl	d51a0 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d526e:	2300      	movs	r3, #0
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5270:	7325      	strb	r5, [r4, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5272:	0a2d      	lsrs	r5, r5, #8
    }
}

BleUuid::BleUuid(uint16_t uuid16)
        : BleUuid() {
    type_ = BleUuidType::SHORT;
   d5274:	6123      	str	r3, [r4, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d5276:	7365      	strb	r5, [r4, #13]
}
   d5278:	4620      	mov	r0, r4
   d527a:	bd38      	pop	{r3, r4, r5, pc}

000d527c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d527c:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d527e:	690b      	ldr	r3, [r1, #16]
   d5280:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5282:	f101 0210 	add.w	r2, r1, #16
   d5286:	4603      	mov	r3, r0
   d5288:	f851 4b04 	ldr.w	r4, [r1], #4
   d528c:	f843 4b04 	str.w	r4, [r3], #4
   d5290:	4291      	cmp	r1, r2
   d5292:	d1f9      	bne.n	d5288 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d5294:	bd10      	pop	{r4, pc}

000d5296 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5296:	b510      	push	{r4, lr}
   d5298:	b086      	sub	sp, #24
   d529a:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d529c:	2201      	movs	r2, #1
   d529e:	a801      	add	r0, sp, #4
   d52a0:	f7ff ffbf 	bl	d5222 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d52a4:	a901      	add	r1, sp, #4
   d52a6:	4620      	mov	r0, r4
   d52a8:	f7ff ffe8 	bl	d527c <_ZN8particle7BleUuidaSERKS0_>
}
   d52ac:	b006      	add	sp, #24
   d52ae:	bd10      	pop	{r4, pc}

000d52b0 <_ZN8particle7BleUuidaSEt>:

BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d52b0:	b510      	push	{r4, lr}
   d52b2:	b086      	sub	sp, #24
   d52b4:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d52b6:	a801      	add	r0, sp, #4
   d52b8:	f7ff ffd4 	bl	d5264 <_ZN8particle7BleUuidC1Et>
   d52bc:	a901      	add	r1, sp, #4
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff ffdc 	bl	d527c <_ZN8particle7BleUuidaSERKS0_>
}
   d52c4:	b006      	add	sp, #24
   d52c6:	bd10      	pop	{r4, pc}

000d52c8 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const char* uuid) {
    construct(uuid);
    return *this;
}

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d52c8:	b510      	push	{r4, lr}
   d52ca:	b086      	sub	sp, #24
   d52cc:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d52ce:	a801      	add	r0, sp, #4
   d52d0:	f7ff ff76 	bl	d51c0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d52d4:	a901      	add	r1, sp, #4
   d52d6:	4620      	mov	r0, r4
   d52d8:	f7ff ffd0 	bl	d527c <_ZN8particle7BleUuidaSERKS0_>
}
   d52dc:	b006      	add	sp, #24
   d52de:	bd10      	pop	{r4, pc}

000d52e0 <_ZNK8particle7BleUuideqERKS0_>:

bool BleUuid::operator==(const BleUuid& uuid) const {
   d52e0:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d52e2:	6902      	ldr	r2, [r0, #16]
   d52e4:	690b      	ldr	r3, [r1, #16]
   d52e6:	429a      	cmp	r2, r3
   d52e8:	d106      	bne.n	d52f8 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d52ea:	2210      	movs	r2, #16
   d52ec:	f003 f958 	bl	d85a0 <memcmp>
   d52f0:	fab0 f080 	clz	r0, r0
   d52f4:	0940      	lsrs	r0, r0, #5
   d52f6:	bd08      	pop	{r3, pc}
   d52f8:	2000      	movs	r0, #0
}
   d52fa:	bd08      	pop	{r3, pc}

000d52fc <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d52fc:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d52fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d5300:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5302:	4b31      	ldr	r3, [pc, #196]	; (d53c8 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d5304:	460e      	mov	r6, r1
   d5306:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5308:	4602      	mov	r2, r0
   d530a:	f103 0110 	add.w	r1, r3, #16
   d530e:	f853 0b04 	ldr.w	r0, [r3], #4
   d5312:	f842 0b04 	str.w	r0, [r2], #4
   d5316:	428b      	cmp	r3, r1
   d5318:	d1f9      	bne.n	d530e <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d531a:	2e00      	cmp	r6, #0
   d531c:	d051      	beq.n	d53c2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d531e:	2124      	movs	r1, #36	; 0x24
   d5320:	4630      	mov	r0, r6
   d5322:	f003 f9ea 	bl	d86fa <strnlen>
   d5326:	2804      	cmp	r0, #4
   d5328:	d010      	beq.n	d534c <_ZN8particle7BleUuid9constructEPKc+0x50>
   d532a:	2700      	movs	r7, #0
   d532c:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d532e:	2124      	movs	r1, #36	; 0x24
   d5330:	4630      	mov	r0, r6
   d5332:	f003 f9e2 	bl	d86fa <strnlen>
   d5336:	42b8      	cmp	r0, r7
   d5338:	d901      	bls.n	d533e <_ZN8particle7BleUuid9constructEPKc+0x42>
   d533a:	bb44      	cbnz	r4, d538e <_ZN8particle7BleUuid9constructEPKc+0x92>
   d533c:	e041      	b.n	d53c2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d533e:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d5340:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d5342:	42a5      	cmp	r5, r4
   d5344:	d03d      	beq.n	d53c2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d5346:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d534a:	e7fa      	b.n	d5342 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d534c:	7830      	ldrb	r0, [r6, #0]
   d534e:	f7ff fe77 	bl	d5040 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5352:	1e04      	subs	r4, r0, #0
   d5354:	db18      	blt.n	d5388 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5356:	7870      	ldrb	r0, [r6, #1]
   d5358:	f7ff fe72 	bl	d5040 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d535c:	2800      	cmp	r0, #0
   d535e:	db13      	blt.n	d5388 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5360:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5364:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5368:	78b0      	ldrb	r0, [r6, #2]
   d536a:	f7ff fe69 	bl	d5040 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d536e:	1e04      	subs	r4, r0, #0
   d5370:	db0a      	blt.n	d5388 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5372:	78f0      	ldrb	r0, [r6, #3]
   d5374:	f7ff fe64 	bl	d5040 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5378:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d537a:	bfa1      	itttt	ge
   d537c:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d5380:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d5384:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d5386:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d5388:	2300      	movs	r3, #0
   d538a:	612b      	str	r3, [r5, #16]
   d538c:	e019      	b.n	d53c2 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d538e:	5df0      	ldrb	r0, [r6, r7]
   d5390:	f7ff fe56 	bl	d5040 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5394:	0603      	lsls	r3, r0, #24
   d5396:	d412      	bmi.n	d53be <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d5398:	3c01      	subs	r4, #1
   d539a:	0100      	lsls	r0, r0, #4
   d539c:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d539e:	2124      	movs	r1, #36	; 0x24
   d53a0:	4630      	mov	r0, r6
   d53a2:	f003 f9aa 	bl	d86fa <strnlen>
   d53a6:	3701      	adds	r7, #1
   d53a8:	4287      	cmp	r7, r0
   d53aa:	d208      	bcs.n	d53be <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d53ac:	5df0      	ldrb	r0, [r6, r7]
   d53ae:	f7ff fe47 	bl	d5040 <_ZN8particle11hexToNibbleEc>
   d53b2:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d53b4:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d53b6:	bfa2      	ittt	ge
   d53b8:	5d2b      	ldrbge	r3, [r5, r4]
   d53ba:	4318      	orrge	r0, r3
   d53bc:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d53be:	3701      	adds	r7, #1
   d53c0:	e7b5      	b.n	d532e <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d53c2:	b003      	add	sp, #12
   d53c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53c6:	bf00      	nop
   d53c8:	000d8eac 	.word	0x000d8eac

000d53cc <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d53cc:	b538      	push	{r3, r4, r5, lr}
   d53ce:	4604      	mov	r4, r0
   d53d0:	460d      	mov	r5, r1
        : BleUuid() {
   d53d2:	f7ff fee5 	bl	d51a0 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d53d6:	4620      	mov	r0, r4
   d53d8:	4629      	mov	r1, r5
   d53da:	f7ff ff8f 	bl	d52fc <_ZN8particle7BleUuid9constructEPKc>
}
   d53de:	4620      	mov	r0, r4
   d53e0:	bd38      	pop	{r3, r4, r5, pc}

000d53e2 <_ZNK8particle7BleUuid11toBigEndianEPh>:
        uuid128_[len - 1] = 0x00;
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
   d53e2:	3901      	subs	r1, #1
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d53e4:	230f      	movs	r3, #15
        buf[i] = uuid128_[j];
   d53e6:	5cc2      	ldrb	r2, [r0, r3]
   d53e8:	f801 2f01 	strb.w	r2, [r1, #1]!
        len--;
    }
}

void BleUuid::toBigEndian(uint8_t buf[BLE_SIG_UUID_128BIT_LEN]) const {
    for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d53ec:	3b01      	subs	r3, #1
   d53ee:	b2db      	uxtb	r3, r3
   d53f0:	2bff      	cmp	r3, #255	; 0xff
   d53f2:	d1f8      	bne.n	d53e6 <_ZNK8particle7BleUuid11toBigEndianEPh+0x4>
        buf[i] = uuid128_[j];
    }
}
   d53f4:	4770      	bx	lr

000d53f6 <_ZNK8particle7BleUuid8toStringEPcjb>:
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
   d53f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d53fa:	4698      	mov	r8, r3
   d53fc:	b08e      	sub	sp, #56	; 0x38
    if (!buf || len == 0) {
   d53fe:	460d      	mov	r5, r1
   d5400:	2900      	cmp	r1, #0
   d5402:	d057      	beq.n	d54b4 <_ZNK8particle7BleUuid8toStringEPcjb+0xbe>
   d5404:	2a00      	cmp	r2, #0
   d5406:	d057      	beq.n	d54b8 <_ZNK8particle7BleUuid8toStringEPcjb+0xc2>
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
   d5408:	6906      	ldr	r6, [r0, #16]
   d540a:	1e54      	subs	r4, r2, #1
   d540c:	b9ae      	cbnz	r6, d543a <_ZNK8particle7BleUuid8toStringEPcjb+0x44>
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d540e:	7b02      	ldrb	r2, [r0, #12]
   d5410:	7b43      	ldrb	r3, [r0, #13]
size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
   d5412:	9605      	str	r6, [sp, #20]
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d5414:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5418:	2102      	movs	r1, #2
   d541a:	aa05      	add	r2, sp, #20
   d541c:	a801      	add	r0, sp, #4
    if (!buf || len == 0) {
        return 0;
    }
    if (type() == BleUuidType::SHORT) {
        char cStr[BLE_SIG_UUID_16BIT_LEN * 2] = {};
        uint16_t bigEndian = (uint16_t)uuid128_[UUID16_LO] << 8 | uuid128_[UUID16_HI];
   d541e:	f8ad 3004 	strh.w	r3, [sp, #4]
        bytes2hexbuf((uint8_t*)&bigEndian, 2, cStr);
   d5422:	f7ff fded 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
   d5426:	2c04      	cmp	r4, #4
   d5428:	bf28      	it	cs
   d542a:	2404      	movcs	r4, #4
        len = std::min(len - 1, sizeof(cStr));
        memcpy(buf, cStr, len);
   d542c:	4622      	mov	r2, r4
   d542e:	a905      	add	r1, sp, #20
   d5430:	4628      	mov	r0, r5
   d5432:	f003 f8c4 	bl	d85be <memcpy>
        buf[len++] = '\0';
   d5436:	552e      	strb	r6, [r5, r4]
   d5438:	e03a      	b.n	d54b0 <_ZNK8particle7BleUuid8toStringEPcjb+0xba>
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
   d543a:	a901      	add	r1, sp, #4
   d543c:	f7ff ffd1 	bl	d53e2 <_ZNK8particle7BleUuid11toBigEndianEPh>
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5440:	aa05      	add	r2, sp, #20
        return len;
    }
    uint8_t temp[BLE_SIG_UUID_128BIT_LEN];
    toBigEndian(temp);
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 4];
    if (stripped) {
   d5442:	f1b8 0f00 	cmp.w	r8, #0
   d5446:	d002      	beq.n	d544e <_ZNK8particle7BleUuid8toStringEPcjb+0x58>
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
   d5448:	2110      	movs	r1, #16
   d544a:	a801      	add	r0, sp, #4
   d544c:	e024      	b.n	d5498 <_ZNK8particle7BleUuid8toStringEPcjb+0xa2>
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
   d544e:	2104      	movs	r1, #4
   d5450:	eb0d 0001 	add.w	r0, sp, r1
   d5454:	f7ff fdd4 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx += 4;
        cStr[idx * 2] = '-';
   d5458:	262d      	movs	r6, #45	; 0x2d
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d545a:	f10d 021d 	add.w	r2, sp, #29
   d545e:	2102      	movs	r1, #2
   d5460:	a802      	add	r0, sp, #8
        bytes2hexbuf(temp, BLE_SIG_UUID_128BIT_LEN, cStr);
    } else {
        uint8_t idx = 0;
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
   d5462:	f88d 601c 	strb.w	r6, [sp, #28]
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
   d5466:	f7ff fdcb 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d546a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d546e:	2102      	movs	r1, #2
   d5470:	f10d 000a 	add.w	r0, sp, #10
        bytes2hexbuf(&temp[idx], 4, &cStr[0]);
        idx += 4;
        cStr[idx * 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
   d5474:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
   d5478:	f7ff fdc2 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 2] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d547c:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   d5480:	2102      	movs	r1, #2
   d5482:	a803      	add	r0, sp, #12
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 1]);
        idx += 2;
        cStr[idx * 2 + 1] = '-';
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 2]);
        idx += 2;
        cStr[idx * 2 + 2] = '-';
   d5484:	f88d 6026 	strb.w	r6, [sp, #38]	; 0x26
        bytes2hexbuf(&temp[idx], 2, &cStr[idx * 2 + 3]);
   d5488:	f7ff fdba 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
        idx += 2;
        cStr[idx * 2 + 3] = '-';
   d548c:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
        bytes2hexbuf(&temp[idx], 6, &cStr[idx * 2 + 4]);
   d5490:	aa0b      	add	r2, sp, #44	; 0x2c
   d5492:	2106      	movs	r1, #6
   d5494:	f10d 000e 	add.w	r0, sp, #14
   d5498:	f7ff fdb2 	bl	d5000 <_ZL12bytes2hexbufPKhjPc>
   d549c:	2c24      	cmp	r4, #36	; 0x24
   d549e:	bf28      	it	cs
   d54a0:	2424      	movcs	r4, #36	; 0x24
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
   d54a2:	4622      	mov	r2, r4
   d54a4:	a905      	add	r1, sp, #20
   d54a6:	4628      	mov	r0, r5
   d54a8:	f003 f889 	bl	d85be <memcpy>
    buf[len++] = '\0';
   d54ac:	2300      	movs	r3, #0
   d54ae:	552b      	strb	r3, [r5, r4]
   d54b0:	1c60      	adds	r0, r4, #1
   d54b2:	e002      	b.n	d54ba <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
    return String(cStr);
}

size_t BleUuid::toString(char* buf, size_t len, bool stripped) const {
    if (!buf || len == 0) {
        return 0;
   d54b4:	4608      	mov	r0, r1
   d54b6:	e000      	b.n	d54ba <_ZNK8particle7BleUuid8toStringEPcjb+0xc4>
   d54b8:	4610      	mov	r0, r2
    }
    len = std::min(len - 1, sizeof(cStr));
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}
   d54ba:	b00e      	add	sp, #56	; 0x38
   d54bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54c0 <_ZNK8particle7BleUuid8toStringEb>:

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d54c0:	b510      	push	{r4, lr}
   d54c2:	b08a      	sub	sp, #40	; 0x28
   d54c4:	4604      	mov	r4, r0
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d54c6:	2300      	movs	r3, #0
   d54c8:	2225      	movs	r2, #37	; 0x25

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}

String BleUuid::toString(bool stripped) const {
   d54ca:	4608      	mov	r0, r1
    char cStr[BLE_SIG_UUID_128BIT_LEN * 2 + 5];
    toString(cStr, sizeof(cStr));
   d54cc:	4669      	mov	r1, sp
   d54ce:	f7ff ff92 	bl	d53f6 <_ZNK8particle7BleUuid8toStringEPcjb>
    return String(cStr);
   d54d2:	4669      	mov	r1, sp
   d54d4:	4620      	mov	r0, r4
   d54d6:	f7ff fcce 	bl	d4e76 <_ZN6StringC1EPK19__FlashStringHelper>
}
   d54da:	4620      	mov	r0, r4
   d54dc:	b00a      	add	sp, #40	; 0x28
   d54de:	bd10      	pop	{r4, pc}

000d54e0 <_ZN8particle18BleAdvertisingData3setEPKhj>:
BleAdvertisingData::BleAdvertisingData(const iBeacon& beacon)
        : BleAdvertisingData() {
    set(beacon);
}

size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d54e0:	b538      	push	{r3, r4, r5, lr}
   d54e2:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d54e4:	b101      	cbz	r1, d54e8 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d54e6:	b912      	cbnz	r2, d54ee <_ZN8particle18BleAdvertisingData3setEPKhj+0xe>
        selfLen_ = 0;
   d54e8:	2000      	movs	r0, #0
   d54ea:	6228      	str	r0, [r5, #32]
        return selfLen_;
   d54ec:	bd38      	pop	{r3, r4, r5, pc}
   d54ee:	2a1f      	cmp	r2, #31
   d54f0:	bf28      	it	cs
   d54f2:	221f      	movcs	r2, #31
   d54f4:	4614      	mov	r4, r2
    }
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
    memcpy(selfData_, buf, len);
   d54f6:	f003 f862 	bl	d85be <memcpy>
    selfLen_ = len;
   d54fa:	622c      	str	r4, [r5, #32]
    return selfLen_;
   d54fc:	4620      	mov	r0, r4
}
   d54fe:	bd38      	pop	{r3, r4, r5, pc}

000d5500 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5500:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5502:	b18b      	cbz	r3, d5528 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5504:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5506:	1ce5      	adds	r5, r4, #3
   d5508:	428d      	cmp	r5, r1
   d550a:	d80f      	bhi.n	d552c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d550c:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d550e:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5510:	5d87      	ldrb	r7, [r0, r6]
   d5512:	4297      	cmp	r7, r2
   d5514:	d105      	bne.n	d5522 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5516:	442e      	add	r6, r5
   d5518:	42b1      	cmp	r1, r6
   d551a:	d307      	bcc.n	d552c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d551c:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d551e:	1c68      	adds	r0, r5, #1
                return adsLen;
   d5520:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d5522:	3501      	adds	r5, #1
   d5524:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5526:	e7ee      	b.n	d5506 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d5528:	4618      	mov	r0, r3
   d552a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d552c:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d552e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5530 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5530:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5534:	4604      	mov	r4, r0
   d5536:	460e      	mov	r6, r1
   d5538:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d553a:	4617      	mov	r7, r2
   d553c:	2a00      	cmp	r2, #0
   d553e:	d03a      	beq.n	d55b6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d5540:	460a      	mov	r2, r1
   d5542:	ab01      	add	r3, sp, #4
   d5544:	6a01      	ldr	r1, [r0, #32]
   d5546:	f7ff ffdb 	bl	d5500 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d554a:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d554e:	6a22      	ldr	r2, [r4, #32]
   d5550:	bb03      	cbnz	r3, d5594 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d5552:	b1f8      	cbz	r0, d5594 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5554:	1c96      	adds	r6, r2, #2
   d5556:	442e      	add	r6, r5
   d5558:	1a36      	subs	r6, r6, r0
   d555a:	2e1f      	cmp	r6, #31
   d555c:	d82b      	bhi.n	d55b6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d555e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d5562:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5566:	ebc8 0202 	rsb	r2, r8, r2
   d556a:	1a12      	subs	r2, r2, r0
   d556c:	eb00 0108 	add.w	r1, r0, r8
   d5570:	eb05 0009 	add.w	r0, r5, r9
   d5574:	b292      	uxth	r2, r2
   d5576:	4421      	add	r1, r4
   d5578:	4420      	add	r0, r4
   d557a:	f003 f82b 	bl	d85d4 <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d557e:	1c6b      	adds	r3, r5, #1
   d5580:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5584:	462a      	mov	r2, r5
   d5586:	4639      	mov	r1, r7
   d5588:	eb04 0009 	add.w	r0, r4, r9
   d558c:	f003 f817 	bl	d85be <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5590:	6226      	str	r6, [r4, #32]
   d5592:	e010      	b.n	d55b6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5594:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5596:	182b      	adds	r3, r5, r0
   d5598:	2b1f      	cmp	r3, #31
   d559a:	d80c      	bhi.n	d55b6 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d559c:	1c6b      	adds	r3, r5, #1
   d559e:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d55a0:	4422      	add	r2, r4
   d55a2:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d55a4:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d55a6:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d55a8:	4420      	add	r0, r4
   d55aa:	462a      	mov	r2, r5
   d55ac:	f003 f807 	bl	d85be <memcpy>
        selfLen_ += len;
   d55b0:	6a22      	ldr	r2, [r4, #32]
   d55b2:	442a      	add	r2, r5
   d55b4:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d55b6:	6a20      	ldr	r0, [r4, #32]
}
   d55b8:	b003      	add	sp, #12
   d55ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d55be <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d55be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d55c0:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d55c2:	4603      	mov	r3, r0
   d55c4:	f100 021f 	add.w	r2, r0, #31
   d55c8:	2000      	movs	r0, #0
   d55ca:	f803 0b01 	strb.w	r0, [r3], #1
   d55ce:	4293      	cmp	r3, r2
   d55d0:	f04f 0100 	mov.w	r1, #0
   d55d4:	d1f9      	bne.n	d55ca <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d55d6:	aa04      	add	r2, sp, #16
   d55d8:	2306      	movs	r3, #6
   d55da:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d55de:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d55e0:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d55e2:	9100      	str	r1, [sp, #0]
   d55e4:	4620      	mov	r0, r4
   d55e6:	4619      	mov	r1, r3
   d55e8:	f7ff ffa2 	bl	d5530 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d55ec:	4620      	mov	r0, r4
   d55ee:	b004      	add	sp, #16
   d55f0:	bd10      	pop	{r4, pc}

000d55f2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d55f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d55f6:	2500      	movs	r5, #0
bool BleAdvertisingData::contains(BleAdvertisingDataType type) const {
    size_t adsOffset;
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d55f8:	b085      	sub	sp, #20
   d55fa:	4606      	mov	r6, r0
   d55fc:	4689      	mov	r9, r1
   d55fe:	4617      	mov	r7, r2
   d5600:	469a      	mov	sl, r3
    size_t offset, adsLen = 0, found = 0;
   d5602:	462c      	mov	r4, r5
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
        if (adsLen > 0 && found < count) {
            if (adsLen == 4) { // length field + type field + 16-bits UUID
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
            } else if (adsLen == 18) {
                uuids[found++] = &selfData_[i + offset + 2];
   d5604:	f04f 0814 	mov.w	r8, #20
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5608:	6a31      	ldr	r1, [r6, #32]
   d560a:	428d      	cmp	r5, r1
   d560c:	d22a      	bcs.n	d5664 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
        adsLen = locate(&selfData_[i], selfLen_ - i, type, &offset);
   d560e:	ab03      	add	r3, sp, #12
   d5610:	464a      	mov	r2, r9
   d5612:	1b49      	subs	r1, r1, r5
   d5614:	1970      	adds	r0, r6, r5
   d5616:	f7ff ff73 	bl	d5500 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
        if (adsLen > 0 && found < count) {
   d561a:	4683      	mov	fp, r0
   d561c:	b310      	cbz	r0, d5664 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
   d561e:	4554      	cmp	r4, sl
   d5620:	d220      	bcs.n	d5664 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x72>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d5622:	2804      	cmp	r0, #4
   d5624:	9903      	ldr	r1, [sp, #12]
   d5626:	d10c      	bne.n	d5642 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d5628:	4429      	add	r1, r5
   d562a:	1872      	adds	r2, r6, r1
   d562c:	1c63      	adds	r3, r4, #1
   d562e:	78d1      	ldrb	r1, [r2, #3]
   d5630:	7892      	ldrb	r2, [r2, #2]
   d5632:	9301      	str	r3, [sp, #4]
   d5634:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   d5638:	fb08 7004 	mla	r0, r8, r4, r7
   d563c:	f7ff fe38 	bl	d52b0 <_ZN8particle7BleUuidaSEt>
   d5640:	e00a      	b.n	d5658 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x66>
            } else if (adsLen == 18) {
   d5642:	2812      	cmp	r0, #18
   d5644:	d10a      	bne.n	d565c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x6a>
                uuids[found++] = &selfData_[i + offset + 2];
   d5646:	3102      	adds	r1, #2
   d5648:	4429      	add	r1, r5
   d564a:	1c63      	adds	r3, r4, #1
   d564c:	4431      	add	r1, r6
   d564e:	fb08 7004 	mla	r0, r8, r4, r7
   d5652:	9301      	str	r3, [sp, #4]
   d5654:	f7ff fe1f 	bl	d5296 <_ZN8particle7BleUuidaSEPKh>
   d5658:	9b01      	ldr	r3, [sp, #4]
   d565a:	461c      	mov	r4, r3
    return locate(selfData_, selfLen_, type, &adsOffset) > 0;
}

size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
    size_t offset, adsLen = 0, found = 0;
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d565c:	9b03      	ldr	r3, [sp, #12]
   d565e:	445b      	add	r3, fp
   d5660:	441d      	add	r5, r3
   d5662:	e7d1      	b.n	d5608 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            continue;
        }
        break;
    }
    return found;
}
   d5664:	4620      	mov	r0, r4
   d5666:	b005      	add	sp, #20
   d5668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d566c <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d566c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5670:	4613      	mov	r3, r2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5672:	460d      	mov	r5, r1
   d5674:	4616      	mov	r6, r2
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5676:	460a      	mov	r2, r1
   d5678:	2102      	movs	r1, #2
        }
    }
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d567a:	4607      	mov	r7, r0
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d567c:	f7ff ffb9 	bl	d55f2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5680:	f04f 0814 	mov.w	r8, #20
   d5684:	1a33      	subs	r3, r6, r0
   d5686:	fb08 5200 	mla	r2, r8, r0, r5
    return name;
}

size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
    size_t found = 0;
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d568a:	4604      	mov	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d568c:	2103      	movs	r1, #3
   d568e:	4638      	mov	r0, r7
   d5690:	f7ff ffaf 	bl	d55f2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d5694:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5696:	1b33      	subs	r3, r6, r4
   d5698:	fb08 5204 	mla	r2, r8, r4, r5
   d569c:	2106      	movs	r1, #6
   d569e:	4638      	mov	r0, r7
   d56a0:	f7ff ffa7 	bl	d55f2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d56a4:	4404      	add	r4, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d56a6:	1b33      	subs	r3, r6, r4
   d56a8:	fb08 5204 	mla	r2, r8, r4, r5
   d56ac:	2107      	movs	r1, #7
   d56ae:	4638      	mov	r0, r7
   d56b0:	f7ff ff9f 	bl	d55f2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    return found;
}
   d56b4:	4420      	add	r0, r4
   d56b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d56bc <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d56bc:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d56be:	2500      	movs	r5, #0
   d56c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d56c4:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d56c6:	8043      	strh	r3, [r0, #2]
   d56c8:	220e      	movs	r2, #14
   d56ca:	4629      	mov	r1, r5
   d56cc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d56ce:	7105      	strb	r5, [r0, #4]
   d56d0:	3006      	adds	r0, #6
   d56d2:	f002 ff9a 	bl	d860a <memset>
   d56d6:	f104 0014 	add.w	r0, r4, #20
   d56da:	f7ff fd61 	bl	d51a0 <_ZN8particle7BleUuidC1Ev>
   d56de:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d56e2:	f7ff fd5d 	bl	d51a0 <_ZN8particle7BleUuidC1Ev>
   d56e6:	4904      	ldr	r1, [pc, #16]	; (d56f8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d56e8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d56ec:	f7ff fbc3 	bl	d4e76 <_ZN6StringC1EPK19__FlashStringHelper>
   d56f0:	64e5      	str	r5, [r4, #76]	; 0x4c
   d56f2:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d56f4:	4620      	mov	r0, r4
   d56f6:	bd38      	pop	{r3, r4, r5, pc}
   d56f8:	000d8f93 	.word	0x000d8f93

000d56fc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d56fc:	b510      	push	{r4, lr}
   d56fe:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5700:	69c2      	ldr	r2, [r0, #28]
   d5702:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5706:	4293      	cmp	r3, r2
   d5708:	4618      	mov	r0, r3
   d570a:	d006      	beq.n	d571a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d570c:	6804      	ldr	r4, [r0, #0]
   d570e:	8824      	ldrh	r4, [r4, #0]
   d5710:	428c      	cmp	r4, r1
   d5712:	f103 0308 	add.w	r3, r3, #8
   d5716:	d1f6      	bne.n	d5706 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5718:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d571a:	2000      	movs	r0, #0
    }
   d571c:	bd10      	pop	{r4, pc}
	...

000d5720 <_ZNK8particle17BleCharacteristic9subscribeEb>:
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5720:	b570      	push	{r4, r5, r6, lr}
   d5722:	6804      	ldr	r4, [r0, #0]
   d5724:	460e      	mov	r6, r1
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5726:	7821      	ldrb	r1, [r4, #0]
        return len;
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
   d5728:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d572a:	2900      	cmp	r1, #0
   d572c:	d12e      	bne.n	d578c <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d572e:	8862      	ldrh	r2, [r4, #2]
   d5730:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5734:	429a      	cmp	r2, r3
   d5736:	d029      	beq.n	d578c <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5738:	8a23      	ldrh	r3, [r4, #16]
   d573a:	b353      	cbz	r3, d5792 <_ZNK8particle17BleCharacteristic9subscribeEb+0x72>
    hal_ble_cccd_config_t config = {};
   d573c:	2518      	movs	r5, #24
   d573e:	462a      	mov	r2, r5
   d5740:	4668      	mov	r0, sp
   d5742:	f002 ff62 	bl	d860a <memset>
    config.version = BLE_API_VERSION;
   d5746:	2301      	movs	r3, #1
   d5748:	f8ad 3000 	strh.w	r3, [sp]
    config.size = sizeof(hal_ble_cccd_config_t);
    config.callback = impl()->onBleCharEvents;
   d574c:	4b13      	ldr	r3, [pc, #76]	; (d579c <_ZNK8particle17BleCharacteristic9subscribeEb+0x7c>)
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
    hal_ble_cccd_config_t config = {};
    config.version = BLE_API_VERSION;
    config.size = sizeof(hal_ble_cccd_config_t);
   d574e:	f8ad 5002 	strh.w	r5, [sp, #2]
    config.callback = impl()->onBleCharEvents;
   d5752:	9301      	str	r3, [sp, #4]
    config.context = impl();
   d5754:	9402      	str	r4, [sp, #8]
    config.conn_handle = impl()->connHandle();
   d5756:	8863      	ldrh	r3, [r4, #2]
   d5758:	f8ad 300c 	strh.w	r3, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d575c:	8a23      	ldrh	r3, [r4, #16]
   d575e:	f8ad 300e 	strh.w	r3, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d5762:	89a3      	ldrh	r3, [r4, #12]
   d5764:	f8ad 3010 	strh.w	r3, [sp, #16]
    config.cccd_value = BLE_SIG_CCCD_VAL_DISABLED;
    if (enable) {
   d5768:	b15e      	cbz	r6, d5782 <_ZNK8particle17BleCharacteristic9subscribeEb+0x62>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d576a:	7923      	ldrb	r3, [r4, #4]
   d576c:	069a      	lsls	r2, r3, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d576e:	bf44      	itt	mi
   d5770:	2302      	movmi	r3, #2
   d5772:	9305      	strmi	r3, [sp, #20]
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d5774:	7923      	ldrb	r3, [r4, #4]
   d5776:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d5778:	bf42      	ittt	mi
   d577a:	9b05      	ldrmi	r3, [sp, #20]
   d577c:	f043 0301 	orrmi.w	r3, r3, #1
   d5780:	9305      	strmi	r3, [sp, #20]
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d5782:	2100      	movs	r1, #0
   d5784:	4668      	mov	r0, sp
   d5786:	f7ff f929 	bl	d49dc <hal_ble_gatt_client_configure_cccd>
   d578a:	e004      	b.n	d5796 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    }
    return 0;
}

int BleCharacteristic::subscribe(bool enable) const {
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d578c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5790:	e001      	b.n	d5796 <_ZNK8particle17BleCharacteristic9subscribeEb+0x76>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5792:	f06f 0077 	mvn.w	r0, #119	; 0x77
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
        }
    }
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
}
   d5796:	b006      	add	sp, #24
   d5798:	bd70      	pop	{r4, r5, r6, pc}
   d579a:	bf00      	nop
   d579c:	000d5979 	.word	0x000d5979

000d57a0 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:

void BleCharacteristic::onDataReceived(BleOnDataReceivedCallback callback, void* context) {
   d57a0:	6803      	ldr	r3, [r0, #0]
    String& description() {
        return description_;
    }

    void setCallback(BleOnDataReceivedCallback callback, void* context) {
        callback_ = callback;
   d57a2:	64d9      	str	r1, [r3, #76]	; 0x4c
        context_ = context;
   d57a4:	651a      	str	r2, [r3, #80]	; 0x50
   d57a6:	4770      	bx	lr

000d57a8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d57a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d57ac:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering characteristics.");
   d57ae:	2320      	movs	r3, #32
    int discoverAllServices(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering services.");
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d57b0:	460e      	mov	r6, r1
        LOG(TRACE, "Start discovering characteristics.");
   d57b2:	9302      	str	r3, [sp, #8]
   d57b4:	2500      	movs	r5, #0
   d57b6:	4b2e      	ldr	r3, [pc, #184]	; (d5870 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>)
   d57b8:	9300      	str	r3, [sp, #0]
   d57ba:	aa02      	add	r2, sp, #8
   d57bc:	462b      	mov	r3, r5
   d57be:	492d      	ldr	r1, [pc, #180]	; (d5874 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d57c0:	9503      	str	r5, [sp, #12]
   d57c2:	2001      	movs	r0, #1
   d57c4:	f7ff f9e4 	bl	d4b90 <log_message>
   d57c8:	6833      	ldr	r3, [r6, #0]
   d57ca:	68dc      	ldr	r4, [r3, #12]
   d57cc:	691f      	ldr	r7, [r3, #16]
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d57ce:	f04f 081c 	mov.w	r8, #28
   d57d2:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d57d6:	3408      	adds	r4, #8
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
    }

    int discoverAllCharacteristics(BlePeerDevice& peer) {
        LOG(TRACE, "Start discovering characteristics.");
        for (auto& service : peer.impl()->services()) {
   d57d8:	f1a4 0308 	sub.w	r3, r4, #8
   d57dc:	429f      	cmp	r7, r3
   d57de:	6832      	ldr	r2, [r6, #0]
   d57e0:	d017      	beq.n	d5812 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6a>
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
   d57e2:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d57e6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d57ea:	8a9b      	ldrh	r3, [r3, #20]
   d57ec:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d57f0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d57f4:	8adb      	ldrh	r3, [r3, #22]
   d57f6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d57fa:	8810      	ldrh	r0, [r2, #0]
   d57fc:	9500      	str	r5, [sp, #0]
   d57fe:	4633      	mov	r3, r6
   d5800:	4a1d      	ldr	r2, [pc, #116]	; (d5878 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
   d5802:	a902      	add	r1, sp, #8
   d5804:	f7ff f8c2 	bl	d498c <hal_ble_gatt_client_discover_characteristics>
   d5808:	2800      	cmp	r0, #0
   d580a:	f104 0408 	add.w	r4, r4, #8
   d580e:	dae3      	bge.n	d57d8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x30>
   d5810:	e02a      	b.n	d5868 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc0>
   d5812:	6994      	ldr	r4, [r2, #24]
   d5814:	69d5      	ldr	r5, [r2, #28]
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
   d5816:	2700      	movs	r7, #0
   d5818:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
   d581c:	3408      	adds	r4, #8
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d581e:	f1a4 0308 	sub.w	r3, r4, #8
   d5822:	429d      	cmp	r5, r3
   d5824:	d01f      	beq.n	d5866 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xbe>
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d5826:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d582a:	89db      	ldrh	r3, [r3, #14]
   d582c:	b1cb      	cbz	r3, d5862 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                char desc[BLE_MAX_DESC_LEN] = {};
   d582e:	2214      	movs	r2, #20
   d5830:	2100      	movs	r1, #0
   d5832:	a802      	add	r0, sp, #8
   d5834:	f002 fee9 	bl	d860a <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d5838:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d583c:	89d9      	ldrh	r1, [r3, #14]
   d583e:	6833      	ldr	r3, [r6, #0]
   d5840:	aa02      	add	r2, sp, #8
   d5842:	8818      	ldrh	r0, [r3, #0]
   d5844:	9700      	str	r7, [sp, #0]
   d5846:	2313      	movs	r3, #19
   d5848:	f7ff f8aa 	bl	d49a0 <hal_ble_gatt_client_read>
                if (len > 0) {
   d584c:	b148      	cbz	r0, d5862 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xba>
                    desc[len] = '\0';
   d584e:	ab0a      	add	r3, sp, #40	; 0x28
   d5850:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d5852:	a902      	add	r1, sp, #8
            // Read the user description string if presented.
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
   d5854:	f800 7c20 	strb.w	r7, [r0, #-32]
    BleUuid& svcUUID() {
        return svcUuid_;
    }

    String& description() {
        return description_;
   d5858:	f854 0c08 	ldr.w	r0, [r4, #-8]
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
                char desc[BLE_MAX_DESC_LEN] = {};
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
                if (len > 0) {
                    desc[len] = '\0';
                    characteristic.impl()->description() = desc;
   d585c:	303c      	adds	r0, #60	; 0x3c
   d585e:	f7ff fb37 	bl	d4ed0 <_ZN6StringaSEPKc>
   d5862:	3408      	adds	r4, #8
   d5864:	e7db      	b.n	d581e <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x76>
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
        }
        for (auto& characteristic : peer.impl()->characteristics()) {
   d5866:	2000      	movs	r0, #0
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d5868:	b00a      	add	sp, #40	; 0x28
   d586a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d586e:	bf00      	nop
   d5870:	000d8d33 	.word	0x000d8d33
   d5874:	000d8d0c 	.word	0x000d8d0c
   d5878:	000d6481 	.word	0x000d6481

000d587c <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d587c:	6803      	ldr	r3, [r0, #0]
   d587e:	8818      	ldrh	r0, [r3, #0]
}
   d5880:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5884:	1ac0      	subs	r0, r0, r3
   d5886:	bf18      	it	ne
   d5888:	2001      	movne	r0, #1
   d588a:	4770      	bx	lr

000d588c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:

void BlePeerDevice::bind(const BleAddress& address) const {
   d588c:	6802      	ldr	r2, [r0, #0]
    impl()->address() = address;
   d588e:	680b      	ldr	r3, [r1, #0]
   d5890:	f8c2 3002 	str.w	r3, [r2, #2]
   d5894:	684b      	ldr	r3, [r1, #4]
   d5896:	f8c2 3006 	str.w	r3, [r2, #6]
   d589a:	4770      	bx	lr

000d589c <_ZNK8particle13BlePeerDevice7addressEv>:
}

BleAddress BlePeerDevice::address() const {
   d589c:	b510      	push	{r4, lr}
    return impl()->address();
   d589e:	680a      	ldr	r2, [r1, #0]
   d58a0:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d58a4:	6003      	str	r3, [r0, #0]
   d58a6:	6853      	ldr	r3, [r2, #4]
   d58a8:	6043      	str	r3, [r0, #4]
}
   d58aa:	bd10      	pop	{r4, pc}

000d58ac <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d58ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d58ae:	6802      	ldr	r2, [r0, #0]
   d58b0:	680b      	ldr	r3, [r1, #0]
   d58b2:	8812      	ldrh	r2, [r2, #0]
   d58b4:	881b      	ldrh	r3, [r3, #0]
   d58b6:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d58b8:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d58ba:	d10c      	bne.n	d58d6 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d58bc:	4601      	mov	r1, r0
   d58be:	4668      	mov	r0, sp
   d58c0:	f7ff ffec 	bl	d589c <_ZNK8particle13BlePeerDevice7addressEv>
   d58c4:	4621      	mov	r1, r4
   d58c6:	a802      	add	r0, sp, #8
   d58c8:	f7ff ffe8 	bl	d589c <_ZNK8particle13BlePeerDevice7addressEv>
   d58cc:	a902      	add	r1, sp, #8
   d58ce:	4668      	mov	r0, sp
   d58d0:	f7ff fbea 	bl	d50a8 <_ZNK8particle10BleAddresseqERKS0_>
   d58d4:	b900      	cbnz	r0, d58d8 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d58d6:	2000      	movs	r0, #0
}
   d58d8:	b004      	add	sp, #16
   d58da:	bd10      	pop	{r4, pc}

000d58dc <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d58dc:	b510      	push	{r4, lr}
   d58de:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d58e0:	2034      	movs	r0, #52	; 0x34
   d58e2:	f7fe fbd8 	bl	d4096 <_Znwj>
   d58e6:	4601      	mov	r1, r0
   d58e8:	b168      	cbz	r0, d5906 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d58ea:	2300      	movs	r3, #0
   d58ec:	6003      	str	r3, [r0, #0]
   d58ee:	6043      	str	r3, [r0, #4]
   d58f0:	6083      	str	r3, [r0, #8]
   d58f2:	60c3      	str	r3, [r0, #12]
   d58f4:	6103      	str	r3, [r0, #16]
   d58f6:	6143      	str	r3, [r0, #20]
   d58f8:	6183      	str	r3, [r0, #24]
   d58fa:	61c3      	str	r3, [r0, #28]
   d58fc:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d58fe:	6243      	str	r3, [r0, #36]	; 0x24
   d5900:	6283      	str	r3, [r0, #40]	; 0x28
   d5902:	62c3      	str	r3, [r0, #44]	; 0x2c
   d5904:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5906:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5908:	b919      	cbnz	r1, d5912 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d590a:	4a0a      	ldr	r2, [pc, #40]	; (d5934 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d590c:	200a      	movs	r0, #10
   d590e:	f7ff f937 	bl	d4b80 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5912:	2000      	movs	r0, #0
   d5914:	f7ff f80c 	bl	d4930 <hal_ble_stack_init>
   d5918:	b120      	cbz	r0, d5924 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d591a:	4a06      	ldr	r2, [pc, #24]	; (d5934 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d591c:	2100      	movs	r1, #0
   d591e:	200a      	movs	r0, #10
   d5920:	f7ff f92e 	bl	d4b80 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5924:	2200      	movs	r2, #0
   d5926:	6821      	ldr	r1, [r4, #0]
   d5928:	4803      	ldr	r0, [pc, #12]	; (d5938 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d592a:	f7ff f84d 	bl	d49c8 <hal_ble_set_callback_on_periph_link_events>
}
   d592e:	4620      	mov	r0, r4
   d5930:	bd10      	pop	{r4, pc}
   d5932:	bf00      	nop
   d5934:	000d4911 	.word	0x000d4911
   d5938:	000d5dad 	.word	0x000d5dad

000d593c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d593c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d593e:	4c0a      	ldr	r4, [pc, #40]	; (d5968 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5940:	6823      	ldr	r3, [r4, #0]
   d5942:	07db      	lsls	r3, r3, #31
   d5944:	d40e      	bmi.n	d5964 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5946:	4620      	mov	r0, r4
   d5948:	f7fe fbb6 	bl	d40b8 <__cxa_guard_acquire>
   d594c:	b150      	cbz	r0, d5964 <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d594e:	4807      	ldr	r0, [pc, #28]	; (d596c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5950:	f7ff ffc4 	bl	d58dc <_ZN8particle14BleLocalDeviceC1Ev>
   d5954:	4620      	mov	r0, r4
   d5956:	f7fe fbb4 	bl	d40c2 <__cxa_guard_release>
   d595a:	4a05      	ldr	r2, [pc, #20]	; (d5970 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d595c:	4905      	ldr	r1, [pc, #20]	; (d5974 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d595e:	4803      	ldr	r0, [pc, #12]	; (d596c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5960:	f002 fca9 	bl	d82b6 <__aeabi_atexit>
    return instance;
}
   d5964:	4801      	ldr	r0, [pc, #4]	; (d596c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5966:	bd10      	pop	{r4, pc}
   d5968:	2003e3d0 	.word	0x2003e3d0
   d596c:	2003e3cc 	.word	0x2003e3cc
   d5970:	2003d940 	.word	0x2003d940
   d5974:	000d5b15 	.word	0x000d5b15

000d5978 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5978:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d597a:	6803      	ldr	r3, [r0, #0]
   d597c:	3b09      	subs	r3, #9
   d597e:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5980:	b08a      	sub	sp, #40	; 0x28
   d5982:	4604      	mov	r4, r0
   d5984:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d5986:	d819      	bhi.n	d59bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5988:	f7ff ffd8 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d598c:	88a1      	ldrh	r1, [r4, #4]
   d598e:	6800      	ldr	r0, [r0, #0]
   d5990:	f7ff feb4 	bl	d56fc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5994:	4602      	mov	r2, r0
   d5996:	b958      	cbnz	r0, d59b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d5998:	2320      	movs	r3, #32
   d599a:	9302      	str	r3, [sp, #8]
   d599c:	4b08      	ldr	r3, [pc, #32]	; (d59c0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d599e:	9003      	str	r0, [sp, #12]
   d59a0:	9300      	str	r3, [sp, #0]
   d59a2:	aa02      	add	r2, sp, #8
   d59a4:	4603      	mov	r3, r0
   d59a6:	4907      	ldr	r1, [pc, #28]	; (d59c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d59a8:	2032      	movs	r0, #50	; 0x32
   d59aa:	f7ff f8f1 	bl	d4b90 <log_message>
   d59ae:	e005      	b.n	d59bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d59b0:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d59b2:	b11d      	cbz	r5, d59bc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d59b4:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d59b6:	68e1      	ldr	r1, [r4, #12]
   d59b8:	6920      	ldr	r0, [r4, #16]
   d59ba:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d59bc:	b00a      	add	sp, #40	; 0x28
   d59be:	bd70      	pop	{r4, r5, r6, pc}
   d59c0:	000d8d56 	.word	0x000d8d56
   d59c4:	000d8d0c 	.word	0x000d8d0c

000d59c8 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d59c8:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d59ca:	a801      	add	r0, sp, #4
   d59cc:	f7ff fb4e 	bl	d506c <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d59d0:	2000      	movs	r0, #0
   d59d2:	f7fe ffad 	bl	d4930 <hal_ble_stack_init>
   d59d6:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d59d8:	a801      	add	r0, sp, #4
   d59da:	f7ff fb55 	bl	d5088 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d59de:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d59e2:	b002      	add	sp, #8
   d59e4:	bd10      	pop	{r4, pc}
	...

000d59e8 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d59e8:	b530      	push	{r4, r5, lr}
   d59ea:	b08b      	sub	sp, #44	; 0x2c
   d59ec:	460d      	mov	r5, r1
    WiringBleLock lk;
   d59ee:	a801      	add	r0, sp, #4
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d59f0:	4614      	mov	r4, r2
    WiringBleLock lk;
   d59f2:	f7ff fb3b 	bl	d506c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d59f6:	b1b5      	cbz	r5, d5a26 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d59f8:	b1ac      	cbz	r4, d5a26 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x3e>
   d59fa:	2200      	movs	r2, #0
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d59fc:	a902      	add	r1, sp, #8
   d59fe:	480d      	ldr	r0, [pc, #52]	; (d5a34 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
        targetCount_ = resultCount;
   d5a00:	9406      	str	r4, [sp, #24]
   d5a02:	9202      	str	r2, [sp, #8]
   d5a04:	9203      	str	r2, [sp, #12]
   d5a06:	9204      	str	r2, [sp, #16]
    BleScanDelegator()
            : resultsPtr_(nullptr),
              targetCount_(0),
              foundCount_(0),
              callback_(nullptr),
              context_(nullptr) {
   d5a08:	9207      	str	r2, [sp, #28]
   d5a0a:	9208      	str	r2, [sp, #32]
   d5a0c:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
        return foundCount_;
    }

    int start(BleScanResult* results, size_t resultCount) {
        resultsPtr_ = results;
   d5a0e:	9505      	str	r5, [sp, #20]
        targetCount_ = resultCount;
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5a10:	f7fe ff96 	bl	d4940 <hal_ble_gap_start_scan>
   d5a14:	2800      	cmp	r0, #0
   d5a16:	bfb8      	it	lt
   d5a18:	4604      	movlt	r4, r0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5a1a:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d5a1c:	bfa8      	it	ge
   d5a1e:	9c07      	ldrge	r4, [sp, #28]
   d5a20:	f7ff f952 	bl	d4cc8 <free>
   d5a24:	e000      	b.n	d5a28 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x40>
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5a26:	4c04      	ldr	r4, [pc, #16]	; (d5a38 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x50>)
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
    WiringBleLock lk;
   d5a28:	a801      	add	r0, sp, #4
   d5a2a:	f7ff fb2d 	bl	d5088 <_ZN8particle3ble13WiringBleLockD1Ev>
    if (results == nullptr || resultCount == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d5a2e:	4620      	mov	r0, r4
   d5a30:	b00b      	add	sp, #44	; 0x2c
   d5a32:	bd30      	pop	{r4, r5, pc}
   d5a34:	000d5f1b 	.word	0x000d5f1b
   d5a38:	fffffef2 	.word	0xfffffef2

000d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5a3c:	680b      	ldr	r3, [r1, #0]
   d5a3e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5a40:	b113      	cbz	r3, d5a48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5a42:	685a      	ldr	r2, [r3, #4]
   d5a44:	3201      	adds	r2, #1
   d5a46:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5a48:	4770      	bx	lr

000d5a4a <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5a4a:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5a4c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a50:	4604      	mov	r4, r0
   d5a52:	f840 3b04 	str.w	r3, [r0], #4
   d5a56:	f7ff fff1 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d5a5a:	6823      	ldr	r3, [r4, #0]
   d5a5c:	b90b      	cbnz	r3, d5a62 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5a5e:	f7ff fab5 	bl	d4fcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d5a62:	4620      	mov	r0, r4
   d5a64:	bd10      	pop	{r4, pc}

000d5a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5a66:	b510      	push	{r4, lr}
   d5a68:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a6c:	4604      	mov	r4, r0
   d5a6e:	f840 3b04 	str.w	r3, [r0], #4
   d5a72:	f7ff ffe3 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5a76:	4620      	mov	r0, r4
   d5a78:	bd10      	pop	{r4, pc}

000d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5a7a:	b510      	push	{r4, lr}
   d5a7c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5a7e:	6800      	ldr	r0, [r0, #0]
   d5a80:	b128      	cbz	r0, d5a8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5a82:	6843      	ldr	r3, [r0, #4]
   d5a84:	3b01      	subs	r3, #1
   d5a86:	6043      	str	r3, [r0, #4]
   d5a88:	b90b      	cbnz	r3, d5a8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5a8a:	f7ff faa9 	bl	d4fe0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5a8e:	4620      	mov	r0, r4
   d5a90:	bd10      	pop	{r4, pc}

000d5a92 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d5a92:	b510      	push	{r4, lr}
   d5a94:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a96:	3004      	adds	r0, #4
   d5a98:	f7ff ffef 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5a9c:	4620      	mov	r0, r4
   d5a9e:	bd10      	pop	{r4, pc}

000d5aa0 <_ZN8particle13BlePeerDeviceD1Ev>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BlePeerDevice::~BlePeerDevice() {
   d5aa0:	b510      	push	{r4, lr}
   d5aa2:	4604      	mov	r4, r0
   d5aa4:	3004      	adds	r0, #4
   d5aa6:	f7ff ffe8 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d5aaa:	4620      	mov	r0, r4
   d5aac:	bd10      	pop	{r4, pc}

000d5aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5aae:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ab0:	6804      	ldr	r4, [r0, #0]
   d5ab2:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ab4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ab6:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5aba:	42a6      	cmp	r6, r4
   d5abc:	d004      	beq.n	d5ac8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5abe:	1d20      	adds	r0, r4, #4
   d5ac0:	f7ff ffdb 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ac4:	3408      	adds	r4, #8
   d5ac6:	e7f8      	b.n	d5aba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ac8:	6828      	ldr	r0, [r5, #0]
   d5aca:	f7ff f8fd 	bl	d4cc8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5ace:	4628      	mov	r0, r5
   d5ad0:	bd70      	pop	{r4, r5, r6, pc}

000d5ad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ad2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ad4:	6804      	ldr	r4, [r0, #0]
   d5ad6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ad8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ada:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ade:	42a6      	cmp	r6, r4
   d5ae0:	d004      	beq.n	d5aec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5ae2:	1d20      	adds	r0, r4, #4
   d5ae4:	f7ff ffc9 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ae8:	3408      	adds	r4, #8
   d5aea:	e7f8      	b.n	d5ade <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5aec:	6828      	ldr	r0, [r5, #0]
   d5aee:	f7ff f8eb 	bl	d4cc8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5af2:	4628      	mov	r0, r5
   d5af4:	bd70      	pop	{r4, r5, r6, pc}

000d5af6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5af6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5af8:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d5afa:	f104 0018 	add.w	r0, r4, #24
   d5afe:	f7ff ffe8 	bl	d5ad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5b02:	f104 000c 	add.w	r0, r4, #12
   d5b06:	f7ff ffd2 	bl	d5aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d5b0a:	4620      	mov	r0, r4
   d5b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b10:	f7fe bac3 	b.w	d409a <_ZdlPv>

000d5b14 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5b16:	6804      	ldr	r4, [r0, #0]
   d5b18:	4607      	mov	r7, r0
   d5b1a:	b1c4      	cbz	r4, d5b4e <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5b1c:	69a5      	ldr	r5, [r4, #24]
   d5b1e:	69e3      	ldr	r3, [r4, #28]
   d5b20:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b24:	42ae      	cmp	r6, r5
   d5b26:	d004      	beq.n	d5b32 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5b28:	1d28      	adds	r0, r5, #4
   d5b2a:	f7ff ffa6 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b2e:	3508      	adds	r5, #8
   d5b30:	e7f8      	b.n	d5b24 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5b32:	69a0      	ldr	r0, [r4, #24]
   d5b34:	f7ff f8c8 	bl	d4cc8 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d5b38:	f104 000c 	add.w	r0, r4, #12
   d5b3c:	f7ff ffc9 	bl	d5ad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5b40:	4620      	mov	r0, r4
   d5b42:	f7ff ffb4 	bl	d5aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5b46:	2134      	movs	r1, #52	; 0x34
   d5b48:	4620      	mov	r0, r4
   d5b4a:	f002 fbc1 	bl	d82d0 <_ZdlPvj>
   d5b4e:	4638      	mov	r0, r7
   d5b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5b54 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5b54:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5b56:	2500      	movs	r5, #0
   d5b58:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5b5a:	6045      	str	r5, [r0, #4]
   d5b5c:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5b5e:	2024      	movs	r0, #36	; 0x24
   d5b60:	f7fe fa99 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5b64:	4604      	mov	r4, r0
   d5b66:	b178      	cbz	r0, d5b88 <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5b68:	4603      	mov	r3, r0
   d5b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b6e:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5b72:	f8c0 5002 	str.w	r5, [r0, #2]
   d5b76:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d5b78:	7285      	strb	r5, [r0, #10]
   d5b7a:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5b7c:	60c5      	str	r5, [r0, #12]
   d5b7e:	6105      	str	r5, [r0, #16]
   d5b80:	6145      	str	r5, [r0, #20]
   d5b82:	6185      	str	r5, [r0, #24]
   d5b84:	61c5      	str	r5, [r0, #28]
   d5b86:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5b88:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5b8a:	2014      	movs	r0, #20
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	f7fe fa82 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5b92:	4603      	mov	r3, r0
   d5b94:	b128      	cbz	r0, d5ba2 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5b96:	2201      	movs	r2, #1
   d5b98:	6042      	str	r2, [r0, #4]
   d5b9a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5b9c:	4a08      	ldr	r2, [pc, #32]	; (d5bc0 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d5b9e:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5ba0:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5ba2:	a802      	add	r0, sp, #8
   d5ba4:	6872      	ldr	r2, [r6, #4]
   d5ba6:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d5baa:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5bac:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5bae:	f7ff ff64 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d5bb2:	6833      	ldr	r3, [r6, #0]
   d5bb4:	b90b      	cbnz	r3, d5bba <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d5bb6:	f7ff fa09 	bl	d4fcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5bba:	4630      	mov	r0, r6
   d5bbc:	b002      	add	sp, #8
   d5bbe:	bd70      	pop	{r4, r5, r6, pc}
   d5bc0:	000d8cf8 	.word	0x000d8cf8

000d5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5bc4:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5bc6:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5bc8:	6803      	ldr	r3, [r0, #0]
   d5bca:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5bcc:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5bce:	d00c      	beq.n	d5bea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5bd0:	b114      	cbz	r4, d5bd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5bd2:	6863      	ldr	r3, [r4, #4]
   d5bd4:	3301      	adds	r3, #1
   d5bd6:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5bd8:	6828      	ldr	r0, [r5, #0]
   d5bda:	b128      	cbz	r0, d5be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5bdc:	6843      	ldr	r3, [r0, #4]
   d5bde:	3b01      	subs	r3, #1
   d5be0:	6043      	str	r3, [r0, #4]
   d5be2:	b90b      	cbnz	r3, d5be8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5be4:	f7ff f9fc 	bl	d4fe0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d5be8:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d5bea:	4628      	mov	r0, r5
   d5bec:	bd38      	pop	{r3, r4, r5, pc}

000d5bee <_ZN8particle17BleCharacteristicaSERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d5bee:	b510      	push	{r4, lr}
   d5bf0:	6802      	ldr	r2, [r0, #0]
   d5bf2:	680b      	ldr	r3, [r1, #0]
   d5bf4:	4604      	mov	r4, r0
        callback_ = callback;
        context_ = context;
    }

    void inheritCallback(BleCharacteristicImpl& charImpl) {
        if (charImpl.callback_) {
   d5bf6:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d5bf8:	b110      	cbz	r0, d5c00 <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
            callback_ = charImpl.callback_;
   d5bfa:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d5bfc:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d5bfe:	651a      	str	r2, [r3, #80]	; 0x50
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5c00:	4620      	mov	r0, r4
   d5c02:	f851 3b04 	ldr.w	r3, [r1], #4
   d5c06:	f840 3b04 	str.w	r3, [r0], #4
   d5c0a:	f7ff ffdb 	bl	d5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    DEBUG("BleCharacteristic(), operator=:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    characteristic.impl()->inheritCallback(*this->impl());
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}
   d5c0e:	4620      	mov	r0, r4
   d5c10:	bd10      	pop	{r4, pc}

000d5c12 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d5c12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c16:	6803      	ldr	r3, [r0, #0]
   d5c18:	699c      	ldr	r4, [r3, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5c1a:	69de      	ldr	r6, [r3, #28]
   d5c1c:	b087      	sub	sp, #28
   d5c1e:	460f      	mov	r7, r1
   d5c20:	4690      	mov	r8, r2
   d5c22:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d5c26:	42b4      	cmp	r4, r6
   d5c28:	46a1      	mov	r9, r4
   d5c2a:	d011      	beq.n	d5c50 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3e>
    BleCharacteristicHandles& attrHandles() {
        return attrHandles_;
    }

    BleUuid& charUUID() {
        return charUuid_;
   d5c2c:	f854 1b08 	ldr.w	r1, [r4], #8
bool BleCharacteristic::valid() const {
    return (impl()->local() || impl()->connHandle() != BLE_INVALID_CONN_HANDLE);
}

BleUuid BleCharacteristic::UUID() const {
    return impl()->charUUID();
   d5c30:	a801      	add	r0, sp, #4
   d5c32:	3114      	adds	r1, #20
   d5c34:	f7ff fae8 	bl	d5208 <_ZN8particle7BleUuidC1ERKS0_>
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
    for (auto& existChar : impl()->characteristics()) {
        if (existChar.UUID() == uuid) {
   d5c38:	4641      	mov	r1, r8
   d5c3a:	a801      	add	r0, sp, #4
   d5c3c:	f7ff fb50 	bl	d52e0 <_ZNK8particle7BleUuideqERKS0_>
   d5c40:	4605      	mov	r5, r0
   d5c42:	2800      	cmp	r0, #0
   d5c44:	d0ef      	beq.n	d5c26 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d5c46:	4649      	mov	r1, r9
   d5c48:	4638      	mov	r0, r7
   d5c4a:	f7ff ffd0 	bl	d5bee <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
   d5c4e:	e000      	b.n	d5c52 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x40>
        }
    }
    return false;
   d5c50:	2500      	movs	r5, #0
}
   d5c52:	4628      	mov	r0, r5
   d5c54:	b007      	add	sp, #28
   d5c56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5c5a <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d5c5a:	b510      	push	{r4, lr}
   d5c5c:	f851 3b04 	ldr.w	r3, [r1], #4
   d5c60:	4604      	mov	r4, r0
   d5c62:	f840 3b04 	str.w	r3, [r0], #4
   d5c66:	f7ff ffad 	bl	d5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
    impl_ = peer.impl_;
    return *this;
}
   d5c6a:	4620      	mov	r0, r4
   d5c6c:	bd10      	pop	{r4, pc}

000d5c6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5c6e:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5c70:	b570      	push	{r4, r5, r6, lr}
   d5c72:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5c74:	d91a      	bls.n	d5cac <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5c76:	4290      	cmp	r0, r2
   d5c78:	d219      	bcs.n	d5cae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d5c7a:	f1a1 0608 	sub.w	r6, r1, #8
   d5c7e:	1a51      	subs	r1, r2, r1
   d5c80:	3904      	subs	r1, #4
   d5c82:	1f15      	subs	r5, r2, #4
   d5c84:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5c86:	1f2b      	subs	r3, r5, #4
   d5c88:	429e      	cmp	r6, r3
   d5c8a:	d025      	beq.n	d5cd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5c8c:	2c04      	cmp	r4, #4
   d5c8e:	d007      	beq.n	d5ca0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c90:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5c94:	f844 3c04 	str.w	r3, [r4, #-4]
   d5c98:	4629      	mov	r1, r5
   d5c9a:	4620      	mov	r0, r4
   d5c9c:	f7ff fece 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ca0:	4628      	mov	r0, r5
   d5ca2:	f7ff feea 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ca6:	3d08      	subs	r5, #8
   d5ca8:	3c08      	subs	r4, #8
   d5caa:	e7ec      	b.n	d5c86 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5cac:	d014      	beq.n	d5cd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5cae:	1d0c      	adds	r4, r1, #4
   d5cb0:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5cb2:	1f23      	subs	r3, r4, #4
   d5cb4:	429d      	cmp	r5, r3
   d5cb6:	d00f      	beq.n	d5cd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d5cb8:	2e04      	cmp	r6, #4
   d5cba:	d007      	beq.n	d5ccc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5cbc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5cc0:	f846 3c04 	str.w	r3, [r6, #-4]
   d5cc4:	4621      	mov	r1, r4
   d5cc6:	4630      	mov	r0, r6
   d5cc8:	f7ff feb8 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ccc:	4620      	mov	r0, r4
   d5cce:	f7ff fed4 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cd2:	3408      	adds	r4, #8
   d5cd4:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5cd6:	e7ec      	b.n	d5cb2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d5cd8:	bd70      	pop	{r4, r5, r6, pc}

000d5cda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5cde:	6804      	ldr	r4, [r0, #0]
   d5ce0:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5ce2:	4605      	mov	r5, r0
   d5ce4:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5ce6:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5cea:	42a7      	cmp	r7, r4
   d5cec:	d018      	beq.n	d5d20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d5cee:	4641      	mov	r1, r8
   d5cf0:	4620      	mov	r0, r4
   d5cf2:	f7ff fddb 	bl	d58ac <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5cf6:	4606      	mov	r6, r0
   d5cf8:	b908      	cbnz	r0, d5cfe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d5cfa:	3408      	adds	r4, #8
   d5cfc:	e7f5      	b.n	d5cea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d5cfe:	b18c      	cbz	r4, d5d24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d5d00:	1d20      	adds	r0, r4, #4
   d5d02:	f7ff feba 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d5d06:	682b      	ldr	r3, [r5, #0]
   d5d08:	686a      	ldr	r2, [r5, #4]
   d5d0a:	f104 0108 	add.w	r1, r4, #8
   d5d0e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5d12:	4620      	mov	r0, r4
   d5d14:	f7ff ffab 	bl	d5c6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5d18:	686b      	ldr	r3, [r5, #4]
   d5d1a:	3b01      	subs	r3, #1
   d5d1c:	606b      	str	r3, [r5, #4]
    return true;
   d5d1e:	e002      	b.n	d5d26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d5d20:	2600      	movs	r6, #0
   d5d22:	e000      	b.n	d5d26 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d5d24:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d5d26:	4630      	mov	r0, r6
   d5d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5d2e:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d30:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5d34:	6847      	ldr	r7, [r0, #4]
   d5d36:	9300      	str	r3, [sp, #0]
   d5d38:	a801      	add	r0, sp, #4
   d5d3a:	f7ff fe7f 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d3e:	6866      	ldr	r6, [r4, #4]
   d5d40:	68a3      	ldr	r3, [r4, #8]
   d5d42:	429e      	cmp	r6, r3
   d5d44:	db14      	blt.n	d5d70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5d46:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5d48:	2e00      	cmp	r6, #0
   d5d4a:	dd0b      	ble.n	d5d64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5d4c:	00f0      	lsls	r0, r6, #3
   d5d4e:	f7fe ffb3 	bl	d4cb8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5d52:	4605      	mov	r5, r0
   d5d54:	b318      	cbz	r0, d5d9e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5d56:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5d5a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5d5e:	f7ff ff86 	bl	d5c6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5d62:	e000      	b.n	d5d66 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5d64:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d66:	6820      	ldr	r0, [r4, #0]
   d5d68:	f7fe ffae 	bl	d4cc8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5d6c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5d6e:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5d70:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5d72:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5d74:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5d78:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5d7c:	4629      	mov	r1, r5
   d5d7e:	f105 0008 	add.w	r0, r5, #8
   d5d82:	f7ff ff74 	bl	d5c6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5d86:	b135      	cbz	r5, d5d96 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5d88:	9b00      	ldr	r3, [sp, #0]
   d5d8a:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5d8e:	a901      	add	r1, sp, #4
   d5d90:	1d28      	adds	r0, r5, #4
   d5d92:	f7ff fe53 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5d96:	6863      	ldr	r3, [r4, #4]
   d5d98:	3301      	adds	r3, #1
   d5d9a:	6063      	str	r3, [r4, #4]
   d5d9c:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d9e:	a801      	add	r0, sp, #4
   d5da0:	f7ff fe6b 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5da4:	4628      	mov	r0, r5
   d5da6:	b003      	add	sp, #12
   d5da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5dac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5db0:	4604      	mov	r4, r0
   d5db2:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5db4:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5db6:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5db8:	f7ff f958 	bl	d506c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5dbc:	6823      	ldr	r3, [r4, #0]
   d5dbe:	2b03      	cmp	r3, #3
   d5dc0:	d002      	beq.n	d5dc8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5dc2:	2b04      	cmp	r3, #4
   d5dc4:	d042      	beq.n	d5e4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5dc6:	e087      	b.n	d5ed8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5dc8:	a804      	add	r0, sp, #16
   d5dca:	f7ff fec3 	bl	d5b54 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5dce:	9b04      	ldr	r3, [sp, #16]
   d5dd0:	8922      	ldrh	r2, [r4, #8]
   d5dd2:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5dd4:	6862      	ldr	r2, [r4, #4]
   d5dd6:	9904      	ldr	r1, [sp, #16]
   d5dd8:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5ddc:	f8c1 3002 	str.w	r3, [r1, #2]
   d5de0:	6853      	ldr	r3, [r2, #4]
   d5de2:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5de6:	a807      	add	r0, sp, #28
   d5de8:	9b04      	ldr	r3, [sp, #16]
   d5dea:	9306      	str	r3, [sp, #24]
   d5dec:	a905      	add	r1, sp, #20
   d5dee:	f7ff fe25 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5df2:	a906      	add	r1, sp, #24
   d5df4:	f105 0018 	add.w	r0, r5, #24
   d5df8:	f7ff ff98 	bl	d5d2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5dfc:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5dfe:	a807      	add	r0, sp, #28
   d5e00:	f7ff fe3b 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e04:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5e06:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5e08:	b974      	cbnz	r4, d5e28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5e0a:	4b36      	ldr	r3, [pc, #216]	; (d5ee4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5e0c:	9300      	str	r3, [sp, #0]
   d5e0e:	aa06      	add	r2, sp, #24
   d5e10:	4623      	mov	r3, r4
   d5e12:	4935      	ldr	r1, [pc, #212]	; (d5ee8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5e14:	9407      	str	r4, [sp, #28]
   d5e16:	2032      	movs	r0, #50	; 0x32
   d5e18:	f7fe feba 	bl	d4b90 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5e1c:	9b04      	ldr	r3, [sp, #16]
   d5e1e:	4621      	mov	r1, r4
   d5e20:	8818      	ldrh	r0, [r3, #0]
   d5e22:	f7fe fd9f 	bl	d4964 <hal_ble_gap_disconnect>
   d5e26:	e00d      	b.n	d5e44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5e28:	4a30      	ldr	r2, [pc, #192]	; (d5eec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5e2a:	9200      	str	r2, [sp, #0]
   d5e2c:	2300      	movs	r3, #0
   d5e2e:	aa06      	add	r2, sp, #24
   d5e30:	492d      	ldr	r1, [pc, #180]	; (d5ee8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5e32:	9307      	str	r3, [sp, #28]
   d5e34:	2001      	movs	r0, #1
   d5e36:	f7fe feab 	bl	d4b90 <log_message>
                if (impl->connectedCb_) {
   d5e3a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5e3c:	b113      	cbz	r3, d5e44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5e3e:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5e40:	a804      	add	r0, sp, #16
   d5e42:	4798      	blx	r3
   d5e44:	a805      	add	r0, sp, #20
   d5e46:	f7ff fe18 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e4a:	e045      	b.n	d5ed8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5e4c:	8921      	ldrh	r1, [r4, #8]
   d5e4e:	4628      	mov	r0, r5
   d5e50:	f7ff fc54 	bl	d56fc <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5e54:	4607      	mov	r7, r0
   d5e56:	2800      	cmp	r0, #0
   d5e58:	d03e      	beq.n	d5ed8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5e5a:	6804      	ldr	r4, [r0, #0]
   d5e5c:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5e5e:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5e64:	8022      	strh	r2, [r4, #0]
   d5e66:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5e6a:	4299      	cmp	r1, r3
   d5e6c:	d003      	beq.n	d5e76 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5e6e:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5e72:	8042      	strh	r2, [r0, #2]
   d5e74:	e7f9      	b.n	d5e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5e76:	68e6      	ldr	r6, [r4, #12]
   d5e78:	6923      	ldr	r3, [r4, #16]
   d5e7a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5e7e:	45b0      	cmp	r8, r6
   d5e80:	d004      	beq.n	d5e8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5e82:	1d30      	adds	r0, r6, #4
   d5e84:	f7ff fdf9 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e88:	3608      	adds	r6, #8
   d5e8a:	e7f8      	b.n	d5e7e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5e8c:	2300      	movs	r3, #0
   d5e8e:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5e90:	69a6      	ldr	r6, [r4, #24]
   d5e92:	69e3      	ldr	r3, [r4, #28]
   d5e94:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5e98:	45b0      	cmp	r8, r6
   d5e9a:	d004      	beq.n	d5ea6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5e9c:	1d30      	adds	r0, r6, #4
   d5e9e:	f7ff fdec 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ea2:	3608      	adds	r6, #8
   d5ea4:	e7f8      	b.n	d5e98 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5ea6:	2300      	movs	r3, #0
   d5ea8:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5eaa:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5eac:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5eae:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5eb0:	b113      	cbz	r3, d5eb8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5eb2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5eb4:	4638      	mov	r0, r7
   d5eb6:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5eb8:	2320      	movs	r3, #32
   d5eba:	4a0d      	ldr	r2, [pc, #52]	; (d5ef0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5ebc:	9306      	str	r3, [sp, #24]
   d5ebe:	9200      	str	r2, [sp, #0]
   d5ec0:	2300      	movs	r3, #0
   d5ec2:	4909      	ldr	r1, [pc, #36]	; (d5ee8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5ec4:	9307      	str	r3, [sp, #28]
   d5ec6:	2001      	movs	r0, #1
   d5ec8:	aa06      	add	r2, sp, #24
   d5eca:	f7fe fe61 	bl	d4b90 <log_message>
                    impl->peers_.removeOne(*peer);
   d5ece:	4639      	mov	r1, r7
   d5ed0:	f105 0018 	add.w	r0, r5, #24
   d5ed4:	f7ff ff01 	bl	d5cda <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5ed8:	a803      	add	r0, sp, #12
   d5eda:	f7ff f8d5 	bl	d5088 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5ede:	b00e      	add	sp, #56	; 0x38
   d5ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ee4:	000d8d6e 	.word	0x000d8d6e
   d5ee8:	000d8d0c 	.word	0x000d8d0c
   d5eec:	000d8d94 	.word	0x000d8d94
   d5ef0:	000d8db1 	.word	0x000d8db1

000d5ef4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5ef4:	b538      	push	{r3, r4, r5, lr}
        T* d = nullptr;
        if (n > 0) {
   d5ef6:	1e0d      	subs	r5, r1, #0
private:
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5ef8:	4604      	mov	r4, r0
        T* d = nullptr;
        if (n > 0) {
   d5efa:	dd06      	ble.n	d5f0a <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d5efc:	2154      	movs	r1, #84	; 0x54
   d5efe:	4369      	muls	r1, r5
   d5f00:	6800      	ldr	r0, [r0, #0]
   d5f02:	f7fe fee9 	bl	d4cd8 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d5f06:	b920      	cbnz	r0, d5f12 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>
   d5f08:	bd38      	pop	{r3, r4, r5, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5f0a:	6800      	ldr	r0, [r0, #0]
   d5f0c:	f7fe fedc 	bl	d4cc8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5f10:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d5f12:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d5f14:	60a5      	str	r5, [r4, #8]
        return true;
   d5f16:	2001      	movs	r0, #1
    }
   d5f18:	bd38      	pop	{r3, r4, r5, pc}

000d5f1a <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5f1a:	b570      	push	{r4, r5, r6, lr}
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5f1c:	2654      	movs	r6, #84	; 0x54
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5f1e:	b0c0      	sub	sp, #256	; 0x100
   d5f20:	4605      	mov	r5, r0
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5f22:	4632      	mov	r2, r6
     * WARN: This is executed from HAL ble thread. The current thread which starts the scanning procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d5f24:	460c      	mov	r4, r1
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
   d5f26:	a801      	add	r0, sp, #4
   d5f28:	2100      	movs	r1, #0
   d5f2a:	f002 fb6e 	bl	d860a <memset>
   d5f2e:	a803      	add	r0, sp, #12
   d5f30:	f7ff fb45 	bl	d55be <_ZN8particle18BleAdvertisingDataC1Ev>
   d5f34:	a80c      	add	r0, sp, #48	; 0x30
   d5f36:	f7ff fb42 	bl	d55be <_ZN8particle18BleAdvertisingDataC1Ev>
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5f3a:	462a      	mov	r2, r5
   d5f3c:	ab01      	add	r3, sp, #4
   d5f3e:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d5f42:	6851      	ldr	r1, [r2, #4]
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5f44:	89ea      	ldrh	r2, [r5, #14]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5f46:	c303      	stmia	r3!, {r0, r1}
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5f48:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5f4a:	68a9      	ldr	r1, [r5, #8]
     */
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
        BleScanDelegator* delegator = static_cast<BleScanDelegator*>(context);
        BleScanResult result = {};
        result.address = event->peer_addr;
        result.rssi = event->rssi;
   d5f4c:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d5f50:	a80c      	add	r0, sp, #48	; 0x30
   d5f52:	f7ff fac5 	bl	d54e0 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d5f56:	89aa      	ldrh	r2, [r5, #12]
   d5f58:	6869      	ldr	r1, [r5, #4]
   d5f5a:	a803      	add	r0, sp, #12
   d5f5c:	f7ff fac0 	bl	d54e0 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d5f60:	69a5      	ldr	r5, [r4, #24]
   d5f62:	b11d      	cbz	r5, d5f6c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x52>
            delegator->callback_(&result, delegator->context_);
   d5f64:	69e1      	ldr	r1, [r4, #28]
   d5f66:	a801      	add	r0, sp, #4
   d5f68:	47a8      	blx	r5
   d5f6a:	e03c      	b.n	d5fe6 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xcc>
            delegator->foundCount_++;
            return;
        }
        if (delegator->resultsPtr_) {
   d5f6c:	68e0      	ldr	r0, [r4, #12]
   d5f6e:	b198      	cbz	r0, d5f98 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x7e>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d5f70:	6963      	ldr	r3, [r4, #20]
   d5f72:	6922      	ldr	r2, [r4, #16]
   d5f74:	4293      	cmp	r3, r2
   d5f76:	d239      	bcs.n	d5fec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d5f78:	1c5a      	adds	r2, r3, #1
   d5f7a:	6162      	str	r2, [r4, #20]
   d5f7c:	fb06 0003 	mla	r0, r6, r3, r0
   d5f80:	2251      	movs	r2, #81	; 0x51
   d5f82:	a901      	add	r1, sp, #4
   d5f84:	f002 fb1b 	bl	d85be <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d5f88:	6962      	ldr	r2, [r4, #20]
   d5f8a:	6923      	ldr	r3, [r4, #16]
   d5f8c:	429a      	cmp	r2, r3
   d5f8e:	d32d      	bcc.n	d5fec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
                    LOG_DEBUG(TRACE, "Target number of devices found. Stop scanning...");
                    hal_ble_gap_stop_scan(nullptr);
   d5f90:	4628      	mov	r0, r5
   d5f92:	f7fe fcdd 	bl	d4950 <hal_ble_gap_stop_scan>
   d5f96:	e029      	b.n	d5fec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
   d5f98:	4632      	mov	r2, r6
   d5f9a:	a901      	add	r1, sp, #4
   d5f9c:	a816      	add	r0, sp, #88	; 0x58
   d5f9e:	f002 fb0e 	bl	d85be <memcpy>
   d5fa2:	4632      	mov	r2, r6
   d5fa4:	a916      	add	r1, sp, #88	; 0x58
   d5fa6:	a82b      	add	r0, sp, #172	; 0xac
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d5fa8:	6865      	ldr	r5, [r4, #4]
   d5faa:	f002 fb08 	bl	d85be <memcpy>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5fae:	68a3      	ldr	r3, [r4, #8]
   d5fb0:	429d      	cmp	r5, r3
   d5fb2:	db04      	blt.n	d5fbe <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xa4>
   d5fb4:	1c69      	adds	r1, r5, #1
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	f7ff ff9c 	bl	d5ef4 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5fbc:	b1b0      	cbz	r0, d5fec <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xd2>
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5fbe:	6863      	ldr	r3, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5fc0:	6822      	ldr	r2, [r4, #0]
   d5fc2:	2654      	movs	r6, #84	; 0x54
   d5fc4:	fb06 2505 	mla	r5, r6, r5, r2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d5fc8:	fb06 2203 	mla	r2, r6, r3, r2
   d5fcc:	1b52      	subs	r2, r2, r5
   d5fce:	4629      	mov	r1, r5
   d5fd0:	19a8      	adds	r0, r5, r6
   d5fd2:	f002 faff 	bl	d85d4 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d5fd6:	4632      	mov	r2, r6
   d5fd8:	a92b      	add	r1, sp, #172	; 0xac
   d5fda:	4628      	mov	r0, r5
   d5fdc:	f002 faef 	bl	d85be <memcpy>
    ++size_;
   d5fe0:	6863      	ldr	r3, [r4, #4]
   d5fe2:	3301      	adds	r3, #1
   d5fe4:	6063      	str	r3, [r4, #4]
                }
            }
            return;
        }
        if (delegator->resultsVector_.append(result)) {
            delegator->foundCount_++;
   d5fe6:	6963      	ldr	r3, [r4, #20]
   d5fe8:	3301      	adds	r3, #1
   d5fea:	6163      	str	r3, [r4, #20]
        }
    }
   d5fec:	b040      	add	sp, #256	; 0x100
   d5fee:	bd70      	pop	{r4, r5, r6, pc}

000d5ff0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5ff0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5ff4:	4606      	mov	r6, r0
   d5ff6:	460c      	mov	r4, r1
   d5ff8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5ffa:	d914      	bls.n	d6026 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5ffc:	4290      	cmp	r0, r2
   d5ffe:	d213      	bcs.n	d6028 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6000:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d6004:	1a6c      	subs	r4, r5, r1
   d6006:	f1a1 0708 	sub.w	r7, r1, #8
   d600a:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d600c:	42af      	cmp	r7, r5
   d600e:	d018      	beq.n	d6042 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6010:	b11c      	cbz	r4, d601a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6012:	4629      	mov	r1, r5
   d6014:	4620      	mov	r0, r4
   d6016:	f7ff fd26 	bl	d5a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d601a:	1d28      	adds	r0, r5, #4
   d601c:	f7ff fd2d 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6020:	3d08      	subs	r5, #8
   d6022:	3c08      	subs	r4, #8
   d6024:	e7f2      	b.n	d600c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6026:	d00c      	beq.n	d6042 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6028:	42ac      	cmp	r4, r5
   d602a:	d00a      	beq.n	d6042 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d602c:	b11e      	cbz	r6, d6036 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d602e:	4621      	mov	r1, r4
   d6030:	4630      	mov	r0, r6
   d6032:	f7ff fd18 	bl	d5a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6036:	1d20      	adds	r0, r4, #4
   d6038:	f7ff fd1f 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d603c:	3408      	adds	r4, #8
   d603e:	3608      	adds	r6, #8
   d6040:	e7f2      	b.n	d6028 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6044:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6046:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6048:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d604a:	dd0b      	ble.n	d6064 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d604c:	00f0      	lsls	r0, r6, #3
   d604e:	f7fe fe33 	bl	d4cb8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6052:	4604      	mov	r4, r0
   d6054:	b170      	cbz	r0, d6074 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6056:	e895 0006 	ldmia.w	r5, {r1, r2}
   d605a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d605e:	f7ff ffc7 	bl	d5ff0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d6062:	e000      	b.n	d6066 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6064:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6066:	6828      	ldr	r0, [r5, #0]
   d6068:	f7fe fe2e 	bl	d4cc8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d606c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d606e:	60ae      	str	r6, [r5, #8]
        return true;
   d6070:	2001      	movs	r0, #1
   d6072:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6074:	bd70      	pop	{r4, r5, r6, pc}

000d6076 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d607a:	2300      	movs	r3, #0
   d607c:	6003      	str	r3, [r0, #0]
   d607e:	6043      	str	r3, [r0, #4]
   d6080:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6082:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6084:	6849      	ldr	r1, [r1, #4]
   d6086:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6088:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d608a:	dd13      	ble.n	d60b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d608c:	f7ff ffda 	bl	d6044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6090:	b180      	cbz	r0, d60b4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6092:	6835      	ldr	r5, [r6, #0]
   d6094:	6873      	ldr	r3, [r6, #4]
   d6096:	6827      	ldr	r7, [r4, #0]
   d6098:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d609c:	4545      	cmp	r5, r8
   d609e:	d007      	beq.n	d60b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d60a0:	b11f      	cbz	r7, d60aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d60a2:	4629      	mov	r1, r5
   d60a4:	4638      	mov	r0, r7
   d60a6:	f7ff fcde 	bl	d5a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d60aa:	3508      	adds	r5, #8
   d60ac:	3708      	adds	r7, #8
   d60ae:	e7f5      	b.n	d609c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d60b0:	6873      	ldr	r3, [r6, #4]
   d60b2:	6063      	str	r3, [r4, #4]
    }
}
   d60b4:	4620      	mov	r0, r4
   d60b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d60ba <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d60ba:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d60bc:	680b      	ldr	r3, [r1, #0]
   d60be:	7a9b      	ldrb	r3, [r3, #10]
BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
    impl_ = peer.impl_;
    return *this;
}

Vector<BleService> BlePeerDevice::discoverAllServices() {
   d60c0:	4605      	mov	r5, r0
   d60c2:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d60c4:	b933      	cbnz	r3, d60d4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d60c6:	4608      	mov	r0, r1
   d60c8:	f7fe ff62 	bl	d4f90 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.20>
   d60cc:	b910      	cbnz	r0, d60d4 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
   d60ce:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d60d0:	2201      	movs	r2, #1
   d60d2:	729a      	strb	r2, [r3, #10]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d60d4:	6821      	ldr	r1, [r4, #0]
    }
    return characteristics(chars, count);
}

Vector<BleService> BlePeerDevice::services() {
    return impl()->services();
   d60d6:	4628      	mov	r0, r5
   d60d8:	310c      	adds	r1, #12
   d60da:	f7ff ffcc 	bl	d6076 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
            impl()->servicesDiscovered() = true;
        }
    }
    return services();
}
   d60de:	4628      	mov	r0, r5
   d60e0:	bd38      	pop	{r3, r4, r5, pc}

000d60e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d60e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d60e4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d60e6:	6845      	ldr	r5, [r0, #4]
   d60e8:	4668      	mov	r0, sp
   d60ea:	f7ff fcbc 	bl	d5a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d60ee:	6861      	ldr	r1, [r4, #4]
   d60f0:	68a3      	ldr	r3, [r4, #8]
   d60f2:	4299      	cmp	r1, r3
   d60f4:	db05      	blt.n	d6102 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d60f6:	3101      	adds	r1, #1
   d60f8:	4620      	mov	r0, r4
   d60fa:	f7ff ffa3 	bl	d6044 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d60fe:	4606      	mov	r6, r0
   d6100:	b198      	cbz	r0, d612a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d6102:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6104:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6106:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d610a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d610e:	4629      	mov	r1, r5
   d6110:	f105 0008 	add.w	r0, r5, #8
   d6114:	f7ff ff6c 	bl	d5ff0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6118:	b11d      	cbz	r5, d6122 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d611a:	4669      	mov	r1, sp
   d611c:	4628      	mov	r0, r5
   d611e:	f7ff fca2 	bl	d5a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6122:	6863      	ldr	r3, [r4, #4]
   d6124:	3301      	adds	r3, #1
   d6126:	6063      	str	r3, [r4, #4]
   d6128:	2601      	movs	r6, #1
   d612a:	a801      	add	r0, sp, #4
   d612c:	f7ff fca5 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d6130:	4630      	mov	r0, r6
   d6132:	b002      	add	sp, #8
   d6134:	bd70      	pop	{r4, r5, r6, pc}

000d6136 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6136:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d613a:	4606      	mov	r6, r0
   d613c:	460c      	mov	r4, r1
   d613e:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6140:	d914      	bls.n	d616c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6142:	4290      	cmp	r0, r2
   d6144:	d213      	bcs.n	d616e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6146:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d614a:	1a6c      	subs	r4, r5, r1
   d614c:	f1a1 0708 	sub.w	r7, r1, #8
   d6150:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6152:	42af      	cmp	r7, r5
   d6154:	d018      	beq.n	d6188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6156:	b11c      	cbz	r4, d6160 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6158:	4629      	mov	r1, r5
   d615a:	4620      	mov	r0, r4
   d615c:	f7ff fc75 	bl	d5a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6160:	1d28      	adds	r0, r5, #4
   d6162:	f7ff fc8a 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6166:	3d08      	subs	r5, #8
   d6168:	3c08      	subs	r4, #8
   d616a:	e7f2      	b.n	d6152 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d616c:	d00c      	beq.n	d6188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d616e:	42ac      	cmp	r4, r5
   d6170:	d00a      	beq.n	d6188 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6172:	b11e      	cbz	r6, d617c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6174:	4621      	mov	r1, r4
   d6176:	4630      	mov	r0, r6
   d6178:	f7ff fc67 	bl	d5a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d617c:	1d20      	adds	r0, r4, #4
   d617e:	f7ff fc7c 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6182:	3408      	adds	r4, #8
   d6184:	3608      	adds	r6, #8
   d6186:	e7f2      	b.n	d616e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d6188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d618a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d618a:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d618c:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d618e:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6190:	dd0b      	ble.n	d61aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6192:	00f0      	lsls	r0, r6, #3
   d6194:	f7fe fd90 	bl	d4cb8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6198:	4604      	mov	r4, r0
   d619a:	b170      	cbz	r0, d61ba <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d619c:	e895 0006 	ldmia.w	r5, {r1, r2}
   d61a0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d61a4:	f7ff ffc7 	bl	d6136 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d61a8:	e000      	b.n	d61ac <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d61aa:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d61ac:	6828      	ldr	r0, [r5, #0]
   d61ae:	f7fe fd8b 	bl	d4cc8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d61b2:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d61b4:	60ae      	str	r6, [r5, #8]
        return true;
   d61b6:	2001      	movs	r0, #1
   d61b8:	bd70      	pop	{r4, r5, r6, pc}
    }
   d61ba:	bd70      	pop	{r4, r5, r6, pc}

000d61bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d61bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61c0:	2300      	movs	r3, #0
   d61c2:	6003      	str	r3, [r0, #0]
   d61c4:	6043      	str	r3, [r0, #4]
   d61c6:	6083      	str	r3, [r0, #8]
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d61c8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d61ca:	6849      	ldr	r1, [r1, #4]
   d61cc:	4299      	cmp	r1, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d61ce:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d61d0:	dd13      	ble.n	d61fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d61d2:	f7ff ffda 	bl	d618a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d61d6:	b180      	cbz	r0, d61fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d61d8:	6835      	ldr	r5, [r6, #0]
   d61da:	6873      	ldr	r3, [r6, #4]
   d61dc:	6827      	ldr	r7, [r4, #0]
   d61de:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d61e2:	4545      	cmp	r5, r8
   d61e4:	d007      	beq.n	d61f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d61e6:	b11f      	cbz	r7, d61f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d61e8:	4629      	mov	r1, r5
   d61ea:	4638      	mov	r0, r7
   d61ec:	f7ff fc2d 	bl	d5a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d61f0:	3508      	adds	r5, #8
   d61f2:	3708      	adds	r7, #8
   d61f4:	e7f5      	b.n	d61e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d61f6:	6873      	ldr	r3, [r6, #4]
   d61f8:	6063      	str	r3, [r4, #4]
    }
}
   d61fa:	4620      	mov	r0, r4
   d61fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6200 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6200:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6202:	680b      	ldr	r3, [r1, #0]
   d6204:	7a9b      	ldrb	r3, [r3, #10]
        impl()->servicesDiscovered() = true;
    }
    return services(svcs, count);
}

Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6206:	b085      	sub	sp, #20
   d6208:	4605      	mov	r5, r0
   d620a:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d620c:	b92b      	cbnz	r3, d621a <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d620e:	a801      	add	r0, sp, #4
   d6210:	f7ff ff53 	bl	d60ba <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d6214:	a801      	add	r0, sp, #4
   d6216:	f7ff fc4a 	bl	d5aae <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    }
    if (!impl()->characteristicsDiscovered()) {
   d621a:	6823      	ldr	r3, [r4, #0]
   d621c:	7adb      	ldrb	r3, [r3, #11]
   d621e:	b93b      	cbnz	r3, d6230 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        BleDiscoveryDelegator discovery;
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d6220:	4621      	mov	r1, r4
   d6222:	a801      	add	r0, sp, #4
   d6224:	f7ff fac0 	bl	d57a8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d6228:	b910      	cbnz	r0, d6230 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
   d622a:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d622c:	2201      	movs	r2, #1
   d622e:	72da      	strb	r2, [r3, #11]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6230:	6821      	ldr	r1, [r4, #0]
    }
    return false;
}

Vector<BleCharacteristic> BlePeerDevice::characteristics() {
    return impl()->characteristics();
   d6232:	4628      	mov	r0, r5
   d6234:	3118      	adds	r1, #24
   d6236:	f7ff ffc1 	bl	d61bc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
            impl()->characteristicsDiscovered() = true;
        }
    }
    return characteristics();
}
   d623a:	4628      	mov	r0, r5
   d623c:	b005      	add	sp, #20
   d623e:	bd30      	pop	{r4, r5, pc}

000d6240 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6240:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6244:	460d      	mov	r5, r1
   d6246:	b093      	sub	sp, #76	; 0x4c
    hal_ble_conn_cfg_t connCfg = {};
   d6248:	f04f 0818 	mov.w	r8, #24
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d624c:	4617      	mov	r7, r2
   d624e:	4606      	mov	r6, r0
    hal_ble_conn_cfg_t connCfg = {};
   d6250:	4642      	mov	r2, r8
   d6252:	2100      	movs	r1, #0
   d6254:	a804      	add	r0, sp, #16
        }
    }
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6256:	461c      	mov	r4, r3
    hal_ble_conn_cfg_t connCfg = {};
   d6258:	f002 f9d7 	bl	d860a <memset>
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d625c:	6869      	ldr	r1, [r5, #4]
   d625e:	6828      	ldr	r0, [r5, #0]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
   d6260:	9707      	str	r7, [sp, #28]
void BleAddress::octets(uint8_t addr[BLE_SIG_ADDR_LEN]) const {
    memcpy(addr, address_.addr, BLE_SIG_ADDR_LEN);
}

hal_ble_addr_t BleAddress::halAddress() const {
    return address_;
   d6262:	ab02      	add	r3, sp, #8
   d6264:	c303      	stmia	r3!, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6266:	f04f 0901 	mov.w	r9, #1
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
   d626a:	ab05      	add	r3, sp, #20
   d626c:	e883 0003 	stmia.w	r3, {r0, r1}
    return false;
}

int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
    hal_ble_conn_cfg_t connCfg = {};
    connCfg.version = BLE_API_VERSION;
   d6270:	f8ad 9010 	strh.w	r9, [sp, #16]
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
   d6274:	f8ad 8012 	strh.w	r8, [sp, #18]
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d6278:	f7ff fb60 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
   d627c:	4b34      	ldr	r3, [pc, #208]	; (d6350 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x110>)
   d627e:	9308      	str	r3, [sp, #32]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6280:	f7ff fb5c 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6284:	2200      	movs	r2, #0
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6286:	6803      	ldr	r3, [r0, #0]
   d6288:	6831      	ldr	r1, [r6, #0]
    connCfg.version = BLE_API_VERSION;
    connCfg.size = sizeof(hal_ble_conn_cfg_t);
    connCfg.address = addr.halAddress();
    connCfg.conn_params = params;
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
    connCfg.context = BleLocalDevice::getInstance().impl();
   d628a:	9309      	str	r3, [sp, #36]	; 0x24
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d628c:	a804      	add	r0, sp, #16
   d628e:	f7fe fb91 	bl	d49b4 <hal_ble_gap_connect>
    if (ret != SYSTEM_ERROR_NONE) {
   d6292:	4607      	mov	r7, r0
   d6294:	b120      	cbz	r0, d62a0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x60>
   d6296:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6298:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d629c:	801a      	strh	r2, [r3, #0]
        return ret;
   d629e:	e053      	b.n	d6348 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
    }
    bind(addr);
   d62a0:	4629      	mov	r1, r5
   d62a2:	4630      	mov	r0, r6
   d62a4:	f7ff faf2 	bl	d588c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d62a8:	f7ff fb48 	bl	d593c <_ZN8particle14BleLocalDevice11getInstanceEv>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d62ac:	4631      	mov	r1, r6
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    Vector<BlePeerDevice>& peers() {
        return peers_;
   d62ae:	6803      	ldr	r3, [r0, #0]
   d62b0:	ad12      	add	r5, sp, #72	; 0x48
   d62b2:	f103 0818 	add.w	r8, r3, #24
   d62b6:	f851 3b04 	ldr.w	r3, [r1], #4
   d62ba:	f845 3d20 	str.w	r3, [r5, #-32]!
   d62be:	a80b      	add	r0, sp, #44	; 0x2c
   d62c0:	f7ff fbbc 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d62c4:	4629      	mov	r1, r5
   d62c6:	4640      	mov	r0, r8
   d62c8:	f7ff fd30 	bl	d5d2c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d62cc:	4680      	mov	r8, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d62ce:	a80b      	add	r0, sp, #44	; 0x2c
   d62d0:	f7ff fbd3 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62d4:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d62d6:	930a      	str	r3, [sp, #40]	; 0x28
    if (ret != SYSTEM_ERROR_NONE) {
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return ret;
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d62d8:	f1b8 0f00 	cmp.w	r8, #0
   d62dc:	d114      	bne.n	d6308 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xc8>
        LOG(ERROR, "Cannot add new peer device.");
   d62de:	4b1d      	ldr	r3, [pc, #116]	; (d6354 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x114>)
   d62e0:	9300      	str	r3, [sp, #0]
   d62e2:	462a      	mov	r2, r5
   d62e4:	4643      	mov	r3, r8
   d62e6:	491c      	ldr	r1, [pc, #112]	; (d6358 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d62e8:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
   d62ec:	2032      	movs	r0, #50	; 0x32
   d62ee:	f7fe fc4f 	bl	d4b90 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d62f2:	6833      	ldr	r3, [r6, #0]
   d62f4:	4641      	mov	r1, r8
   d62f6:	8818      	ldrh	r0, [r3, #0]
   d62f8:	f7fe fb34 	bl	d4964 <hal_ble_gap_disconnect>
   d62fc:	6833      	ldr	r3, [r6, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
   d62fe:	4817      	ldr	r0, [pc, #92]	; (d635c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x11c>)
    }
    bind(addr);
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
        LOG(ERROR, "Cannot add new peer device.");
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6300:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6304:	801a      	strh	r2, [r3, #0]
   d6306:	e01f      	b.n	d6348 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
   d6308:	4b15      	ldr	r3, [pc, #84]	; (d6360 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x120>)
   d630a:	9300      	str	r3, [sp, #0]
   d630c:	462a      	mov	r2, r5
   d630e:	463b      	mov	r3, r7
   d6310:	4911      	ldr	r1, [pc, #68]	; (d6358 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x118>)
   d6312:	970b      	str	r7, [sp, #44]	; 0x2c
   d6314:	4648      	mov	r0, r9
   d6316:	f7fe fc3b 	bl	d4b90 <log_message>
    if (automatic) {
   d631a:	b1a4      	cbz	r4, d6346 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x106>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d631c:	4631      	mov	r1, r6
   d631e:	4628      	mov	r0, r5
   d6320:	f7ff ff6e 	bl	d6200 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
   d6324:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6326:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6328:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d632c:	42a6      	cmp	r6, r4
   d632e:	d005      	beq.n	d633c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>
            characteristic.subscribe(true);
   d6330:	4620      	mov	r0, r4
   d6332:	2101      	movs	r1, #1
   d6334:	f7ff f9f4 	bl	d5720 <_ZNK8particle17BleCharacteristic9subscribeEb>
   d6338:	3408      	adds	r4, #8
   d633a:	e7f7      	b.n	d632c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xec>
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
        return SYSTEM_ERROR_NO_MEMORY;
    }
    LOG(TRACE, "New peripheral is connected.");
    if (automatic) {
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d633c:	4628      	mov	r0, r5
   d633e:	f7ff fbc8 	bl	d5ad2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
        for (auto& characteristic : characteristics) {
            characteristic.subscribe(true);
        }
    }
    return SYSTEM_ERROR_NONE;
   d6342:	2000      	movs	r0, #0
   d6344:	e000      	b.n	d6348 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>
   d6346:	4620      	mov	r0, r4
}
   d6348:	b013      	add	sp, #76	; 0x4c
   d634a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d634e:	bf00      	nop
   d6350:	000d5dad 	.word	0x000d5dad
   d6354:	000d8dd0 	.word	0x000d8dd0
   d6358:	000d8d0c 	.word	0x000d8d0c
   d635c:	fffffefc 	.word	0xfffffefc
   d6360:	000d8dec 	.word	0x000d8dec

000d6364 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d6364:	b570      	push	{r4, r5, r6, lr}
   d6366:	4604      	mov	r4, r0
   d6368:	4615      	mov	r5, r2
   d636a:	461e      	mov	r6, r3
    return (impl()->peers().size() > 0);
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    BlePeerDevice peer;
   d636c:	f7ff fbf2 	bl	d5b54 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d6370:	4633      	mov	r3, r6
   d6372:	2200      	movs	r2, #0
   d6374:	4629      	mov	r1, r5
   d6376:	4620      	mov	r0, r4
   d6378:	f7ff ff62 	bl	d6240 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d637c:	4620      	mov	r0, r4
   d637e:	bd70      	pop	{r4, r5, r6, pc}

000d6380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6380:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6382:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6384:	6845      	ldr	r5, [r0, #4]
   d6386:	4668      	mov	r0, sp
   d6388:	f7ff fb5f 	bl	d5a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d638c:	6861      	ldr	r1, [r4, #4]
   d638e:	68a3      	ldr	r3, [r4, #8]
   d6390:	4299      	cmp	r1, r3
   d6392:	db05      	blt.n	d63a0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d6394:	3101      	adds	r1, #1
   d6396:	4620      	mov	r0, r4
   d6398:	f7ff fef7 	bl	d618a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d639c:	4606      	mov	r6, r0
   d639e:	b198      	cbz	r0, d63c8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d63a0:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d63a2:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d63a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d63a8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d63ac:	4629      	mov	r1, r5
   d63ae:	f105 0008 	add.w	r0, r5, #8
   d63b2:	f7ff fec0 	bl	d6136 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d63b6:	b11d      	cbz	r5, d63c0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d63b8:	4669      	mov	r1, sp
   d63ba:	4628      	mov	r0, r5
   d63bc:	f7ff fb45 	bl	d5a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d63c0:	6863      	ldr	r3, [r4, #4]
   d63c2:	3301      	adds	r3, #1
   d63c4:	6063      	str	r3, [r4, #4]
   d63c6:	2601      	movs	r6, #1
   d63c8:	a801      	add	r0, sp, #4
   d63ca:	f7ff fb56 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d63ce:	4630      	mov	r0, r6
   d63d0:	b002      	add	sp, #8
   d63d2:	bd70      	pop	{r4, r5, r6, pc}

000d63d4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d63d4:	b510      	push	{r4, lr}
   d63d6:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d63d8:	6840      	ldr	r0, [r0, #4]
   d63da:	b108      	cbz	r0, d63e0 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d63dc:	f7fd fe5d 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d63e0:	4620      	mov	r0, r4
   d63e2:	bd10      	pop	{r4, pc}

000d63e4 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d63e4:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d63e6:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d63e8:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d63ea:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d63ee:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d63f2:	f7fe fcf9 	bl	d4de8 <_ZN6StringD1Ev>
   d63f6:	4668      	mov	r0, sp
   d63f8:	f7ff ffec 	bl	d63d4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d63fc:	b003      	add	sp, #12
   d63fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d6404:	b538      	push	{r3, r4, r5, lr}
   d6406:	2300      	movs	r3, #0
   d6408:	4604      	mov	r4, r0
   d640a:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d640c:	2014      	movs	r0, #20
   d640e:	460d      	mov	r5, r1
   d6410:	f7fd fe41 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d6414:	b128      	cbz	r0, d6422 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d6416:	2301      	movs	r3, #1
   d6418:	6043      	str	r3, [r0, #4]
   d641a:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d641c:	4b02      	ldr	r3, [pc, #8]	; (d6428 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d641e:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d6420:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d6422:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d6424:	4620      	mov	r0, r4
   d6426:	bd38      	pop	{r3, r4, r5, pc}
   d6428:	000d8cc0 	.word	0x000d8cc0

000d642c <_ZN8particle17BleCharacteristicC1Ev>:


/*******************************************************
 * BleCharacteristic class
 */
BleCharacteristic::BleCharacteristic()
   d642c:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d642e:	2500      	movs	r5, #0
   d6430:	b086      	sub	sp, #24
   d6432:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d6434:	6045      	str	r5, [r0, #4]
   d6436:	4604      	mov	r4, r0
   d6438:	2054      	movs	r0, #84	; 0x54
   d643a:	f7fd fe2c 	bl	d4096 <_Znwj>
   d643e:	f8cd d010 	str.w	sp, [sp, #16]
   d6442:	4606      	mov	r6, r0
   d6444:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d6446:	b108      	cbz	r0, d644c <_ZN8particle17BleCharacteristicC1Ev+0x20>
   d6448:	f7ff f938 	bl	d56bc <_ZN8particle21BleCharacteristicImplC1Ev>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d644c:	4631      	mov	r1, r6
   d644e:	ab01      	add	r3, sp, #4
   d6450:	aa02      	add	r2, sp, #8
   d6452:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d6454:	9505      	str	r5, [sp, #20]
   d6456:	f7ff ffd5 	bl	d6404 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d645a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d645c:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d645e:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6460:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6462:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d6464:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6466:	f7ff fb08 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d646a:	a804      	add	r0, sp, #16
   d646c:	f7ff ffb2 	bl	d63d4 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
        : impl_(std::make_shared<BleCharacteristicImpl>()) {
    if (!impl()) {
   d6470:	6823      	ldr	r3, [r4, #0]
   d6472:	b90b      	cbnz	r3, d6478 <_ZN8particle17BleCharacteristicC1Ev+0x4c>
   d6474:	f7fe fdaa 	bl	d4fcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d6478:	4620      	mov	r0, r4
   d647a:	b006      	add	sp, #24
   d647c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6480 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6484:	f8df 8104 	ldr.w	r8, [pc, #260]	; d658c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
     * WARN: This is executed from HAL ble thread. The current thread which starts the characteristic discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6488:	b08c      	sub	sp, #48	; 0x30
   d648a:	4605      	mov	r5, r0
   d648c:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d648e:	2600      	movs	r6, #0
   d6490:	682b      	ldr	r3, [r5, #0]
   d6492:	429e      	cmp	r6, r3
   d6494:	d275      	bcs.n	d6582 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x102>
            BleCharacteristic characteristic;
   d6496:	a802      	add	r0, sp, #8
   d6498:	f7ff ffc8 	bl	d642c <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d649c:	9b02      	ldr	r3, [sp, #8]
   d649e:	892a      	ldrh	r2, [r5, #8]
   d64a0:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d64a2:	686b      	ldr	r3, [r5, #4]
   d64a4:	9802      	ldr	r0, [sp, #8]
   d64a6:	242a      	movs	r4, #42	; 0x2a
   d64a8:	4374      	muls	r4, r6
   d64aa:	4423      	add	r3, r4
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d64ac:	3014      	adds	r0, #20
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
            BleCharacteristic characteristic;
            characteristic.impl()->connHandle() = event->conn_handle;
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d64ae:	7e5b      	ldrb	r3, [r3, #25]
   d64b0:	f013 0f02 	tst.w	r3, #2
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
    value_ |= flags.value_;
   d64b4:	bf1e      	ittt	ne
   d64b6:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d64ba:	f043 0302 	orrne.w	r3, r3, #2
   d64be:	f800 3c10 	strbne.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::READ;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d64c2:	686b      	ldr	r3, [r5, #4]
   d64c4:	4423      	add	r3, r4
   d64c6:	7e5b      	ldrb	r3, [r3, #25]
   d64c8:	075b      	lsls	r3, r3, #29
   d64ca:	bf42      	ittt	mi
   d64cc:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d64d0:	f043 0304 	orrmi.w	r3, r3, #4
   d64d4:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE_WO_RSP;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d64d8:	686b      	ldr	r3, [r5, #4]
   d64da:	4423      	add	r3, r4
   d64dc:	7e5b      	ldrb	r3, [r3, #25]
   d64de:	0719      	lsls	r1, r3, #28
   d64e0:	bf42      	ittt	mi
   d64e2:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d64e6:	f043 0308 	orrmi.w	r3, r3, #8
   d64ea:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::WRITE;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d64ee:	686b      	ldr	r3, [r5, #4]
   d64f0:	4423      	add	r3, r4
   d64f2:	7e5b      	ldrb	r3, [r3, #25]
   d64f4:	06da      	lsls	r2, r3, #27
   d64f6:	bf42      	ittt	mi
   d64f8:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d64fc:	f043 0310 	orrmi.w	r3, r3, #16
   d6500:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::NOTIFY;
            }
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6504:	686b      	ldr	r3, [r5, #4]
   d6506:	4423      	add	r3, r4
   d6508:	7e5b      	ldrb	r3, [r3, #25]
   d650a:	069b      	lsls	r3, r3, #26
   d650c:	bf42      	ittt	mi
   d650e:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6512:	f043 0320 	orrmi.w	r3, r3, #32
   d6516:	f800 3c10 	strbmi.w	r3, [r0, #-16]
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d651a:	6869      	ldr	r1, [r5, #4]
   d651c:	4421      	add	r1, r4
   d651e:	3104      	adds	r1, #4
   d6520:	f7fe fed2 	bl	d52c8 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6524:	686a      	ldr	r2, [r5, #4]
   d6526:	9b02      	ldr	r3, [sp, #8]
   d6528:	4414      	add	r4, r2
            if (!peer->impl()->characteristics().append(characteristic)) {
   d652a:	a902      	add	r1, sp, #8
static_assert(std::is_pod<BleScanParams>::value, "BleScanParams is not a POD struct");

class BleCharacteristicHandles : public hal_ble_char_handles_t {
public:
    BleCharacteristicHandles& operator=(const hal_ble_char_handles_t& halHandles) {
        this->size = halHandles.size;
   d652c:	8be2      	ldrh	r2, [r4, #30]
   d652e:	811a      	strh	r2, [r3, #8]
        this->decl_handle = halHandles.decl_handle;
   d6530:	8c22      	ldrh	r2, [r4, #32]
   d6532:	815a      	strh	r2, [r3, #10]
        this->value_handle = halHandles.value_handle;
   d6534:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   d6536:	819a      	strh	r2, [r3, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d6538:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   d653a:	81da      	strh	r2, [r3, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d653c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   d653e:	821a      	strh	r2, [r3, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d6540:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   d6542:	825a      	strh	r2, [r3, #18]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d6544:	6838      	ldr	r0, [r7, #0]
   d6546:	f100 0418 	add.w	r4, r0, #24
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
                characteristic.impl()->properties() |= BleCharacteristicProperty::INDICATE;
            }
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
   d654a:	a804      	add	r0, sp, #16
   d654c:	f7ff fa7d 	bl	d5a4a <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6550:	4620      	mov	r0, r4
   d6552:	a904      	add	r1, sp, #16
   d6554:	f7ff ff14 	bl	d6380 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6558:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d655a:	a805      	add	r0, sp, #20
   d655c:	f7ff fa8d 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6560:	b954      	cbnz	r4, d6578 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xf8>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6562:	2320      	movs	r3, #32
   d6564:	9304      	str	r3, [sp, #16]
   d6566:	f8cd 8000 	str.w	r8, [sp]
   d656a:	4623      	mov	r3, r4
   d656c:	aa04      	add	r2, sp, #16
   d656e:	4906      	ldr	r1, [pc, #24]	; (d6588 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x108>)
   d6570:	9405      	str	r4, [sp, #20]
   d6572:	2032      	movs	r0, #50	; 0x32
   d6574:	f7fe fb0c 	bl	d4b90 <log_message>
   d6578:	a803      	add	r0, sp, #12
   d657a:	f7ff fa7e 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d657e:	3601      	adds	r6, #1
   d6580:	e786      	b.n	d6490 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
            if (!peer->impl()->characteristics().append(characteristic)) {
                LOG(ERROR, "Failed to append discovered characteristic.");
            }
        }
    }
   d6582:	b00c      	add	sp, #48	; 0x30
   d6584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6588:	000d8d0c 	.word	0x000d8d0c
   d658c:	000d8e09 	.word	0x000d8e09

000d6590 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d6590:	b510      	push	{r4, lr}
   d6592:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d6594:	6840      	ldr	r0, [r0, #4]
   d6596:	b108      	cbz	r0, d659c <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d6598:	f7fd fd7f 	bl	d409a <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d659c:	4620      	mov	r0, r4
   d659e:	bd10      	pop	{r4, pc}

000d65a0 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d65a0:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d65a2:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d65a4:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d65a6:	e88d 0009 	stmia.w	sp, {r0, r3}
   d65aa:	4668      	mov	r0, sp
   d65ac:	f7ff fff0 	bl	d6590 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d65b0:	b003      	add	sp, #12
   d65b2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d65b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d65b8:	b538      	push	{r3, r4, r5, lr}
   d65ba:	2300      	movs	r3, #0
   d65bc:	4604      	mov	r4, r0
   d65be:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d65c0:	2014      	movs	r0, #20
   d65c2:	460d      	mov	r5, r1
   d65c4:	f7fd fd67 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d65c8:	b128      	cbz	r0, d65d6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d65ca:	2301      	movs	r3, #1
   d65cc:	6043      	str	r3, [r0, #4]
   d65ce:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d65d0:	4b02      	ldr	r3, [pc, #8]	; (d65dc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d65d2:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d65d4:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d65d6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d65d8:	4620      	mov	r0, r4
   d65da:	bd38      	pop	{r3, r4, r5, pc}
   d65dc:	000d8cdc 	.word	0x000d8cdc

000d65e0 <_ZN8particle10BleServiceC1Ev>:


/*******************************************************
 * BleService class
 */
BleService::BleService()
   d65e0:	b570      	push	{r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d65e2:	2500      	movs	r5, #0
   d65e4:	b086      	sub	sp, #24
   d65e6:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d65e8:	6045      	str	r5, [r0, #4]
   d65ea:	4604      	mov	r4, r0
   d65ec:	2018      	movs	r0, #24
   d65ee:	f7fd fd52 	bl	d4096 <_Znwj>
   d65f2:	f8cd d010 	str.w	sp, [sp, #16]
   d65f6:	4606      	mov	r6, r0
   d65f8:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d65fa:	b118      	cbz	r0, d6604 <_ZN8particle10BleServiceC1Ev+0x24>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d65fc:	f7fe fdd0 	bl	d51a0 <_ZN8particle7BleUuidC1Ev>
   d6600:	82b5      	strh	r5, [r6, #20]
   d6602:	82f5      	strh	r5, [r6, #22]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d6604:	4631      	mov	r1, r6
   d6606:	ab01      	add	r3, sp, #4
   d6608:	aa02      	add	r2, sp, #8
   d660a:	a803      	add	r0, sp, #12

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d660c:	9505      	str	r5, [sp, #20]
   d660e:	f7ff ffd3 	bl	d65b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6612:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d6614:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d6616:	6026      	str	r6, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d6618:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d661a:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d661c:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d661e:	f7ff fa2c 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d6622:	a804      	add	r0, sp, #16
   d6624:	f7ff ffb4 	bl	d6590 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
/*******************************************************
 * BleService class
 */
BleService::BleService()
        : impl_(std::make_shared<BleServiceImpl>()) {
    if (!impl()) {
   d6628:	6823      	ldr	r3, [r4, #0]
   d662a:	b90b      	cbnz	r3, d6630 <_ZN8particle10BleServiceC1Ev+0x50>
   d662c:	f7fe fcce 	bl	d4fcc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d6630:	4620      	mov	r0, r4
   d6632:	b006      	add	sp, #24
   d6634:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6638 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
   d663c:	f8df 8080 	ldr.w	r8, [pc, #128]	; d66c0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
     * WARN: This is executed from HAL ble thread. The current thread which starts the service discovery procedure
     * has acquired the BLE HAL lock. Calling BLE HAL APIs those acquiring the BLE HAL lock in this function
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6640:	b08c      	sub	sp, #48	; 0x30
   d6642:	4606      	mov	r6, r0
   d6644:	460f      	mov	r7, r1
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d6646:	2500      	movs	r5, #0
   d6648:	6833      	ldr	r3, [r6, #0]
   d664a:	429d      	cmp	r5, r3
   d664c:	d233      	bcs.n	d66b6 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x7e>
            BleService service;
   d664e:	a802      	add	r0, sp, #8
   d6650:	f7ff ffc6 	bl	d65e0 <_ZN8particle10BleServiceC1Ev>
   d6654:	241c      	movs	r4, #28
            service.impl()->UUID() = event->services[i].uuid;
   d6656:	6871      	ldr	r1, [r6, #4]
   d6658:	9802      	ldr	r0, [sp, #8]
   d665a:	436c      	muls	r4, r5
   d665c:	4421      	add	r1, r4
   d665e:	3104      	adds	r1, #4
   d6660:	f7fe fe32 	bl	d52c8 <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d6664:	6873      	ldr	r3, [r6, #4]
   d6666:	9a02      	ldr	r2, [sp, #8]
   d6668:	4423      	add	r3, r4
   d666a:	a902      	add	r1, sp, #8
   d666c:	8b1b      	ldrh	r3, [r3, #24]
   d666e:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d6670:	6873      	ldr	r3, [r6, #4]
   d6672:	441c      	add	r4, r3
   d6674:	8b63      	ldrh	r3, [r4, #26]
   d6676:	82d3      	strh	r3, [r2, #22]
    bool& characteristicsDiscovered() {
        return characteristicsDiscovered_;
    }

    Vector<BleService>& services() {
        return services_;
   d6678:	6838      	ldr	r0, [r7, #0]
   d667a:	f100 040c 	add.w	r4, r0, #12
   d667e:	a804      	add	r0, sp, #16
   d6680:	f7ff f9f1 	bl	d5a66 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (size_t i = 0; i < event->count; i++) {
            BleService service;
            service.impl()->UUID() = event->services[i].uuid;
            service.impl()->startHandle() = event->services[i].start_handle;
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
   d6684:	4620      	mov	r0, r4
   d6686:	a904      	add	r1, sp, #16
   d6688:	f7ff fd2b 	bl	d60e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d668c:	4604      	mov	r4, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d668e:	a805      	add	r0, sp, #20
   d6690:	f7ff f9f3 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6694:	b954      	cbnz	r4, d66ac <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x74>
                LOG(ERROR, "Failed to append discovered service.");
   d6696:	2320      	movs	r3, #32
   d6698:	9304      	str	r3, [sp, #16]
   d669a:	f8cd 8000 	str.w	r8, [sp]
   d669e:	4623      	mov	r3, r4
   d66a0:	aa04      	add	r2, sp, #16
   d66a2:	4906      	ldr	r1, [pc, #24]	; (d66bc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x84>)
   d66a4:	9405      	str	r4, [sp, #20]
   d66a6:	2032      	movs	r0, #50	; 0x32
   d66a8:	f7fe fa72 	bl	d4b90 <log_message>
   d66ac:	a803      	add	r0, sp, #12
   d66ae:	f7ff f9e4 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     * will suspend the execution of the callback until the current thread release the BLE HAL lock. Or the BLE HAL
     * APIs those are invoked here must not acquire the BLE HAL lock.
     */
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
        BlePeerDevice* peer = static_cast<BlePeerDevice*>(context);
        for (size_t i = 0; i < event->count; i++) {
   d66b2:	3501      	adds	r5, #1
   d66b4:	e7c8      	b.n	d6648 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x10>
            service.impl()->endHandle() = event->services[i].end_handle;
            if (!peer->impl()->services().append(service)) {
                LOG(ERROR, "Failed to append discovered service.");
            }
        }
    }
   d66b6:	b00c      	add	sp, #48	; 0x30
   d66b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d66bc:	000d8d0c 	.word	0x000d8d0c
   d66c0:	000d8e35 	.word	0x000d8e35

000d66c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d66c4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d66c6:	4c06      	ldr	r4, [pc, #24]	; (d66e0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d66c8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d66ca:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d66cc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d66ce:	f7fe f9a7 	bl	d4a20 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d66d2:	4620      	mov	r0, r4
   d66d4:	4a03      	ldr	r2, [pc, #12]	; (d66e4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d66d6:	4904      	ldr	r1, [pc, #16]	; (d66e8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d66d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d66dc:	f001 bdeb 	b.w	d82b6 <__aeabi_atexit>
   d66e0:	2003e3d4 	.word	0x2003e3d4
   d66e4:	2003d940 	.word	0x2003d940
   d66e8:	000d4f81 	.word	0x000d4f81

000d66ec <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d66ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d66ee:	4606      	mov	r6, r0
   d66f0:	460d      	mov	r5, r1
   d66f2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d66f4:	2400      	movs	r4, #0
  while (size--) {
   d66f6:	42bd      	cmp	r5, r7
   d66f8:	d00c      	beq.n	d6714 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d66fa:	6833      	ldr	r3, [r6, #0]
   d66fc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6700:	689b      	ldr	r3, [r3, #8]
   d6702:	4630      	mov	r0, r6
   d6704:	4798      	blx	r3
     if (chunk>=0)
   d6706:	2800      	cmp	r0, #0
   d6708:	db01      	blt.n	d670e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d670a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d670c:	e7f3      	b.n	d66f6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d670e:	2c00      	cmp	r4, #0
   d6710:	bf08      	it	eq
   d6712:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6714:	4620      	mov	r0, r4
   d6716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6718 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6718:	b570      	push	{r4, r5, r6, lr}
   d671a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d671c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d671e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6720:	b149      	cbz	r1, d6736 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6722:	f001 ffcd 	bl	d86c0 <strlen>
   d6726:	682b      	ldr	r3, [r5, #0]
   d6728:	4602      	mov	r2, r0
   d672a:	4621      	mov	r1, r4
   d672c:	4628      	mov	r0, r5
   d672e:	68db      	ldr	r3, [r3, #12]
    }
   d6730:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6734:	4718      	bx	r3
    }
   d6736:	bd70      	pop	{r4, r5, r6, pc}

000d6738 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6738:	6803      	ldr	r3, [r0, #0]
   d673a:	689b      	ldr	r3, [r3, #8]
   d673c:	4718      	bx	r3

000d673e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d673e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6740:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6742:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6744:	f7ff fff8 	bl	d6738 <_ZN5Print5printEc>
  n += print('\n');
   d6748:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d674a:	4604      	mov	r4, r0
  n += print('\n');
   d674c:	4628      	mov	r0, r5
   d674e:	f7ff fff3 	bl	d6738 <_ZN5Print5printEc>
  return n;
}
   d6752:	4420      	add	r0, r4
   d6754:	bd38      	pop	{r3, r4, r5, pc}

000d6756 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6756:	b530      	push	{r4, r5, lr}
   d6758:	b08b      	sub	sp, #44	; 0x2c
   d675a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d675c:	2100      	movs	r1, #0
   d675e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6762:	2a01      	cmp	r2, #1
   d6764:	bf98      	it	ls
   d6766:	220a      	movls	r2, #10
   d6768:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d676c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6770:	fb05 3312 	mls	r3, r5, r2, r3
   d6774:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6778:	2b09      	cmp	r3, #9
   d677a:	bf94      	ite	ls
   d677c:	3330      	addls	r3, #48	; 0x30
   d677e:	3337      	addhi	r3, #55	; 0x37
   d6780:	b2db      	uxtb	r3, r3
   d6782:	4621      	mov	r1, r4
   d6784:	f804 3901 	strb.w	r3, [r4], #-1
   d6788:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d678a:	2d00      	cmp	r5, #0
   d678c:	d1ee      	bne.n	d676c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d678e:	f7ff ffc3 	bl	d6718 <_ZN5Print5writeEPKc>
}
   d6792:	b00b      	add	sp, #44	; 0x2c
   d6794:	bd30      	pop	{r4, r5, pc}

000d6796 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6796:	b40c      	push	{r2, r3}
   d6798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d679c:	b087      	sub	sp, #28
   d679e:	af00      	add	r7, sp, #0
   d67a0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d67a4:	4605      	mov	r5, r0
   d67a6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d67aa:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d67ac:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d67ae:	4623      	mov	r3, r4
   d67b0:	464a      	mov	r2, r9
   d67b2:	2114      	movs	r1, #20
   d67b4:	1d38      	adds	r0, r7, #4
   d67b6:	f7fe fa97 	bl	d4ce8 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d67ba:	2813      	cmp	r0, #19
   d67bc:	d805      	bhi.n	d67ca <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d67be:	1d39      	adds	r1, r7, #4
   d67c0:	4628      	mov	r0, r5
   d67c2:	f7ff ffa9 	bl	d6718 <_ZN5Print5writeEPKc>
   d67c6:	4604      	mov	r4, r0
   d67c8:	e013      	b.n	d67f2 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d67ca:	f100 0308 	add.w	r3, r0, #8
   d67ce:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d67d2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d67d4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d67d8:	1c41      	adds	r1, r0, #1
   d67da:	4623      	mov	r3, r4
   d67dc:	464a      	mov	r2, r9
   d67de:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d67e0:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d67e2:	f7fe fa81 	bl	d4ce8 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d67e6:	4669      	mov	r1, sp
   d67e8:	4628      	mov	r0, r5
   d67ea:	f7ff ff95 	bl	d6718 <_ZN5Print5writeEPKc>
   d67ee:	4604      	mov	r4, r0
   d67f0:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d67f2:	b11e      	cbz	r6, d67fc <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d67f4:	4628      	mov	r0, r5
   d67f6:	f7ff ffa2 	bl	d673e <_ZN5Print7printlnEv>
   d67fa:	4404      	add	r4, r0
    return n;
}
   d67fc:	4620      	mov	r0, r4
   d67fe:	371c      	adds	r7, #28
   d6800:	46bd      	mov	sp, r7
   d6802:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6806:	b002      	add	sp, #8
   d6808:	4770      	bx	lr

000d680a <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d680a:	6880      	ldr	r0, [r0, #8]
   d680c:	6803      	ldr	r3, [r0, #0]
   d680e:	68db      	ldr	r3, [r3, #12]
   d6810:	4718      	bx	r3

000d6812 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6812:	4770      	bx	lr

000d6814 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6814:	b119      	cbz	r1, d681e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6816:	680b      	ldr	r3, [r1, #0]
   d6818:	4608      	mov	r0, r1
   d681a:	685b      	ldr	r3, [r3, #4]
   d681c:	4718      	bx	r3
   d681e:	4770      	bx	lr

000d6820 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6820:	b119      	cbz	r1, d682a <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6822:	680b      	ldr	r3, [r1, #0]
   d6824:	4608      	mov	r0, r1
   d6826:	685b      	ldr	r3, [r3, #4]
   d6828:	4718      	bx	r3
   d682a:	4770      	bx	lr

000d682c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d682c:	4770      	bx	lr

000d682e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d682e:	4770      	bx	lr

000d6830 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d6830:	4770      	bx	lr

000d6832 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6832:	b538      	push	{r3, r4, r5, lr}
   d6834:	4604      	mov	r4, r0
   d6836:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6838:	6800      	ldr	r0, [r0, #0]
   d683a:	212e      	movs	r1, #46	; 0x2e
   d683c:	f001 ff24 	bl	d8688 <strchrnul>
    size = s - category;
   d6840:	6823      	ldr	r3, [r4, #0]
   d6842:	1ac3      	subs	r3, r0, r3
   d6844:	602b      	str	r3, [r5, #0]
    if (size) {
   d6846:	b123      	cbz	r3, d6852 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6848:	7803      	ldrb	r3, [r0, #0]
   d684a:	b103      	cbz	r3, d684e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d684c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d684e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6850:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d6852:	4618      	mov	r0, r3
}
   d6854:	bd38      	pop	{r3, r4, r5, pc}

000d6856 <_ZN5spark16JSONStreamWriterD0Ev>:
   d6856:	b510      	push	{r4, lr}
   d6858:	210c      	movs	r1, #12
   d685a:	4604      	mov	r4, r0
   d685c:	f001 fd38 	bl	d82d0 <_ZdlPvj>
   d6860:	4620      	mov	r0, r4
   d6862:	bd10      	pop	{r4, pc}

000d6864 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6864:	b510      	push	{r4, lr}
   d6866:	2104      	movs	r1, #4
   d6868:	4604      	mov	r4, r0
   d686a:	f001 fd31 	bl	d82d0 <_ZdlPvj>
   d686e:	4620      	mov	r0, r4
   d6870:	bd10      	pop	{r4, pc}

000d6872 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6872:	b510      	push	{r4, lr}
   d6874:	2104      	movs	r1, #4
   d6876:	4604      	mov	r4, r0
   d6878:	f001 fd2a 	bl	d82d0 <_ZdlPvj>
   d687c:	4620      	mov	r0, r4
   d687e:	bd10      	pop	{r4, pc}

000d6880 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6880:	b538      	push	{r3, r4, r5, lr}
   d6882:	460c      	mov	r4, r1
   d6884:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6886:	f001 f903 	bl	d7a90 <_Z16_fetch_usbserialv>
   d688a:	4284      	cmp	r4, r0
   d688c:	d00d      	beq.n	d68aa <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d688e:	f001 f987 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d6892:	4284      	cmp	r4, r0
   d6894:	d105      	bne.n	d68a2 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d6896:	f001 f983 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d689a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d689e:	f001 b97c 	b.w	d7b9a <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d68a2:	4621      	mov	r1, r4
   d68a4:	4628      	mov	r0, r5
   d68a6:	f7ff ffbb 	bl	d6820 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d68aa:	bd38      	pop	{r3, r4, r5, pc}

000d68ac <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d68ac:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d68ae:	f001 fef5 	bl	d869c <strcmp>
}
   d68b2:	fab0 f080 	clz	r0, r0
   d68b6:	0940      	lsrs	r0, r0, #5
   d68b8:	bd08      	pop	{r3, pc}

000d68ba <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d68ba:	b538      	push	{r3, r4, r5, lr}
   d68bc:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d68be:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d68c0:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d68c2:	f001 fefd 	bl	d86c0 <strlen>
   d68c6:	4621      	mov	r1, r4
   d68c8:	4602      	mov	r2, r0
   d68ca:	4628      	mov	r0, r5
}
   d68cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d68d0:	f001 bc8f 	b.w	d81f2 <_ZN5spark10JSONWriter5valueEPKcj>

000d68d4 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d68d4:	6800      	ldr	r0, [r0, #0]
   d68d6:	f7fe b8b3 	b.w	d4a40 <os_mutex_recursive_lock>

000d68da <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d68da:	b570      	push	{r4, r5, r6, lr}
   d68dc:	4604      	mov	r4, r0
    write(str, strlen(str));
   d68de:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d68e0:	460d      	mov	r5, r1
    write(str, strlen(str));
   d68e2:	f001 feed 	bl	d86c0 <strlen>
   d68e6:	6823      	ldr	r3, [r4, #0]
   d68e8:	4602      	mov	r2, r0
   d68ea:	4629      	mov	r1, r5
   d68ec:	4620      	mov	r0, r4
   d68ee:	68db      	ldr	r3, [r3, #12]
}
   d68f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d68f4:	4718      	bx	r3

000d68f6 <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d68f6:	b513      	push	{r0, r1, r4, lr}
   d68f8:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d68fa:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d68fc:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6900:	68d4      	ldr	r4, [r2, #12]
   d6902:	4619      	mov	r1, r3
   d6904:	2201      	movs	r2, #1
   d6906:	47a0      	blx	r4
}
   d6908:	b002      	add	sp, #8
   d690a:	bd10      	pop	{r4, pc}

000d690c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d690c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6910:	6845      	ldr	r5, [r0, #4]
   d6912:	6807      	ldr	r7, [r0, #0]
   d6914:	b085      	sub	sp, #20
   d6916:	4691      	mov	r9, r2
   d6918:	2214      	movs	r2, #20
   d691a:	4355      	muls	r5, r2
   d691c:	9301      	str	r3, [sp, #4]
   d691e:	10ab      	asrs	r3, r5, #2
   d6920:	4d19      	ldr	r5, [pc, #100]	; (d6988 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6922:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6924:	435d      	muls	r5, r3
   d6926:	468b      	mov	fp, r1
   d6928:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d692a:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d692c:	2d00      	cmp	r5, #0
   d692e:	9303      	str	r3, [sp, #12]
   d6930:	dd23      	ble.n	d697a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6932:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d6934:	106e      	asrs	r6, r5, #1
   d6936:	fb03 f006 	mul.w	r0, r3, r6
   d693a:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d693e:	464a      	mov	r2, r9
   d6940:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d6944:	5820      	ldr	r0, [r4, r0]
   d6946:	45d1      	cmp	r9, sl
   d6948:	bf28      	it	cs
   d694a:	4652      	movcs	r2, sl
   d694c:	4659      	mov	r1, fp
   d694e:	f001 febf 	bl	d86d0 <strncmp>
                if (cmp == 0) {
   d6952:	9b03      	ldr	r3, [sp, #12]
   d6954:	b948      	cbnz	r0, d696a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d6956:	45d1      	cmp	r9, sl
   d6958:	d103      	bne.n	d6962 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d695a:	9a01      	ldr	r2, [sp, #4]
   d695c:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d695e:	4635      	mov	r5, r6
   d6960:	e7e4      	b.n	d692c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d6962:	bf8c      	ite	hi
   d6964:	2001      	movhi	r0, #1
   d6966:	2000      	movls	r0, #0
   d6968:	e000      	b.n	d696c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d696a:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d696c:	2800      	cmp	r0, #0
   d696e:	d0f6      	beq.n	d695e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d6970:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d6972:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d6976:	3e01      	subs	r6, #1
   d6978:	e7f1      	b.n	d695e <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d697a:	1be4      	subs	r4, r4, r7
}
   d697c:	4802      	ldr	r0, [pc, #8]	; (d6988 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d697e:	10a4      	asrs	r4, r4, #2
}
   d6980:	4360      	muls	r0, r4
   d6982:	b005      	add	sp, #20
   d6984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6988:	cccccccd 	.word	0xcccccccd

000d698c <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d698c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d698e:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d6990:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6992:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d6994:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d6996:	b313      	cbz	r3, d69de <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d6998:	b309      	cbz	r1, d69de <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d699a:	af04      	add	r7, sp, #16
   d699c:	2300      	movs	r3, #0
   d699e:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d69a2:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d69a6:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d69a8:	4639      	mov	r1, r7
   d69aa:	a801      	add	r0, sp, #4
   d69ac:	f7ff ff41 	bl	d6832 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d69b0:	4601      	mov	r1, r0
   d69b2:	b1a0      	cbz	r0, d69de <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d69b4:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d69b6:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d69b8:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d69bc:	4620      	mov	r0, r4
   d69be:	f7ff ffa5 	bl	d690c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d69c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d69c6:	b153      	cbz	r3, d69de <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d69c8:	6823      	ldr	r3, [r4, #0]
   d69ca:	2414      	movs	r4, #20
   d69cc:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d69d0:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d69d2:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d69d6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d69d8:	bfa8      	it	ge
   d69da:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d69dc:	e7e4      	b.n	d69a8 <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d69de:	4630      	mov	r0, r6
   d69e0:	b005      	add	sp, #20
   d69e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d69e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d69e4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d69e6:	4c09      	ldr	r4, [pc, #36]	; (d6a0c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d69e8:	6823      	ldr	r3, [r4, #0]
   d69ea:	07db      	lsls	r3, r3, #31
   d69ec:	d40b      	bmi.n	d6a06 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d69ee:	4620      	mov	r0, r4
   d69f0:	f7fd fb62 	bl	d40b8 <__cxa_guard_acquire>
   d69f4:	b138      	cbz	r0, d6a06 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d69f6:	4620      	mov	r0, r4
   d69f8:	f7fd fb63 	bl	d40c2 <__cxa_guard_release>
   d69fc:	4a04      	ldr	r2, [pc, #16]	; (d6a10 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d69fe:	4905      	ldr	r1, [pc, #20]	; (d6a14 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6a00:	4805      	ldr	r0, [pc, #20]	; (d6a18 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6a02:	f001 fc58 	bl	d82b6 <__aeabi_atexit>
    return &factory;
}
   d6a06:	4804      	ldr	r0, [pc, #16]	; (d6a18 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6a08:	bd10      	pop	{r4, pc}
   d6a0a:	bf00      	nop
   d6a0c:	2003e3d8 	.word	0x2003e3d8
   d6a10:	2003d940 	.word	0x2003d940
   d6a14:	000d682f 	.word	0x000d682f
   d6a18:	2003d8d0 	.word	0x2003d8d0

000d6a1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6a1c:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6a1e:	4c09      	ldr	r4, [pc, #36]	; (d6a44 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6a20:	6823      	ldr	r3, [r4, #0]
   d6a22:	07db      	lsls	r3, r3, #31
   d6a24:	d40b      	bmi.n	d6a3e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6a26:	4620      	mov	r0, r4
   d6a28:	f7fd fb46 	bl	d40b8 <__cxa_guard_acquire>
   d6a2c:	b138      	cbz	r0, d6a3e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6a2e:	4620      	mov	r0, r4
   d6a30:	f7fd fb47 	bl	d40c2 <__cxa_guard_release>
   d6a34:	4a04      	ldr	r2, [pc, #16]	; (d6a48 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6a36:	4905      	ldr	r1, [pc, #20]	; (d6a4c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6a38:	4805      	ldr	r0, [pc, #20]	; (d6a50 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6a3a:	f001 fc3c 	bl	d82b6 <__aeabi_atexit>
    return &factory;
}
   d6a3e:	4804      	ldr	r0, [pc, #16]	; (d6a50 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d6a40:	bd10      	pop	{r4, pc}
   d6a42:	bf00      	nop
   d6a44:	2003e408 	.word	0x2003e408
   d6a48:	2003d940 	.word	0x2003d940
   d6a4c:	000d682d 	.word	0x000d682d
   d6a50:	2003d8cc 	.word	0x2003d8cc

000d6a54 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6a54:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a56:	2500      	movs	r5, #0
   d6a58:	4604      	mov	r4, r0
   d6a5a:	6005      	str	r5, [r0, #0]
   d6a5c:	6045      	str	r5, [r0, #4]
   d6a5e:	6085      	str	r5, [r0, #8]
   d6a60:	6105      	str	r5, [r0, #16]
   d6a62:	6145      	str	r5, [r0, #20]
   d6a64:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6a66:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d6a6a:	f7fd ffd9 	bl	d4a20 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d6a6e:	f7ff ffb9 	bl	d69e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d6a72:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6a74:	f7ff ffd2 	bl	d6a1c <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d6a78:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6a7a:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	bd38      	pop	{r3, r4, r5, pc}

000d6a80 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d6a80:	b510      	push	{r4, lr}
    static LogManager mgr;
   d6a82:	4c0a      	ldr	r4, [pc, #40]	; (d6aac <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6a84:	6823      	ldr	r3, [r4, #0]
   d6a86:	07db      	lsls	r3, r3, #31
   d6a88:	d40e      	bmi.n	d6aa8 <_ZN5spark10LogManager8instanceEv+0x28>
   d6a8a:	4620      	mov	r0, r4
   d6a8c:	f7fd fb14 	bl	d40b8 <__cxa_guard_acquire>
   d6a90:	b150      	cbz	r0, d6aa8 <_ZN5spark10LogManager8instanceEv+0x28>
   d6a92:	4807      	ldr	r0, [pc, #28]	; (d6ab0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6a94:	f7ff ffde 	bl	d6a54 <_ZN5spark10LogManagerC1Ev>
   d6a98:	4620      	mov	r0, r4
   d6a9a:	f7fd fb12 	bl	d40c2 <__cxa_guard_release>
   d6a9e:	4a05      	ldr	r2, [pc, #20]	; (d6ab4 <_ZN5spark10LogManager8instanceEv+0x34>)
   d6aa0:	4905      	ldr	r1, [pc, #20]	; (d6ab8 <_ZN5spark10LogManager8instanceEv+0x38>)
   d6aa2:	4803      	ldr	r0, [pc, #12]	; (d6ab0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6aa4:	f001 fc07 	bl	d82b6 <__aeabi_atexit>
    return &mgr;
}
   d6aa8:	4801      	ldr	r0, [pc, #4]	; (d6ab0 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6aaa:	bd10      	pop	{r4, pc}
   d6aac:	2003e3dc 	.word	0x2003e3dc
   d6ab0:	2003e3e0 	.word	0x2003e3e0
   d6ab4:	2003d940 	.word	0x2003d940
   d6ab8:	000d6eeb 	.word	0x000d6eeb

000d6abc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6abc:	2300      	movs	r3, #0
   d6abe:	4a02      	ldr	r2, [pc, #8]	; (d6ac8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6ac0:	4902      	ldr	r1, [pc, #8]	; (d6acc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6ac2:	4803      	ldr	r0, [pc, #12]	; (d6ad0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6ac4:	f7fe b87c 	b.w	d4bc0 <log_set_callbacks>
   d6ac8:	000d6dcd 	.word	0x000d6dcd
   d6acc:	000d6d5d 	.word	0x000d6d5d
   d6ad0:	000d6ce5 	.word	0x000d6ce5

000d6ad4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6ad4:	2300      	movs	r3, #0
   d6ad6:	461a      	mov	r2, r3
   d6ad8:	4619      	mov	r1, r3
   d6ada:	4618      	mov	r0, r3
   d6adc:	f7fe b870 	b.w	d4bc0 <log_set_callbacks>

000d6ae0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6ae0:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6ae2:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6ae4:	688e      	ldr	r6, [r1, #8]
   d6ae6:	f851 3b04 	ldr.w	r3, [r1], #4
   d6aea:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6aee:	4605      	mov	r5, r0
   d6af0:	a801      	add	r0, sp, #4
   d6af2:	f7fe ffa3 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6af6:	4622      	mov	r2, r4
   d6af8:	4631      	mov	r1, r6
   d6afa:	4628      	mov	r0, r5
   d6afc:	f001 fbb0 	bl	d8260 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b00:	a801      	add	r0, sp, #4
   d6b02:	f7fe ffba 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b06:	4628      	mov	r0, r5
   d6b08:	b002      	add	sp, #8
   d6b0a:	bd70      	pop	{r4, r5, r6, pc}

000d6b0c <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6b0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b0e:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6b10:	690e      	ldr	r6, [r1, #16]
   d6b12:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b16:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6b1a:	4605      	mov	r5, r0
   d6b1c:	a801      	add	r0, sp, #4
   d6b1e:	f7fe ff8d 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6b22:	4622      	mov	r2, r4
   d6b24:	4631      	mov	r1, r6
   d6b26:	4628      	mov	r0, r5
   d6b28:	f001 fbb5 	bl	d8296 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b2c:	a801      	add	r0, sp, #4
   d6b2e:	f7fe ffa4 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b32:	4628      	mov	r0, r5
   d6b34:	b002      	add	sp, #8
   d6b36:	bd70      	pop	{r4, r5, r6, pc}

000d6b38 <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6b38:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b3a:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d6b3c:	68ce      	ldr	r6, [r1, #12]
   d6b3e:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b42:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6b46:	4605      	mov	r5, r0
   d6b48:	a801      	add	r0, sp, #4
   d6b4a:	f7fe ff77 	bl	d5a3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d6b4e:	4622      	mov	r2, r4
   d6b50:	4631      	mov	r1, r6
   d6b52:	4628      	mov	r0, r5
   d6b54:	f001 fb5c 	bl	d8210 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6b58:	a801      	add	r0, sp, #4
   d6b5a:	f7fe ff8e 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b5e:	4628      	mov	r0, r5
   d6b60:	b002      	add	sp, #8
   d6b62:	bd70      	pop	{r4, r5, r6, pc}

000d6b64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d6b64:	b530      	push	{r4, r5, lr}
   d6b66:	b08b      	sub	sp, #44	; 0x2c
   d6b68:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d6b6a:	4601      	mov	r1, r0
   d6b6c:	a804      	add	r0, sp, #16
   d6b6e:	f7ff ffb7 	bl	d6ae0 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d6b72:	a804      	add	r0, sp, #16
   d6b74:	f001 fa7f 	bl	d8076 <_ZN5spark18JSONObjectIterator4nextEv>
   d6b78:	b1e8      	cbz	r0, d6bb6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d6b7a:	a904      	add	r1, sp, #16
   d6b7c:	4668      	mov	r0, sp
   d6b7e:	f7ff ffdb 	bl	d6b38 <_ZNK5spark18JSONObjectIterator4nameEv>
   d6b82:	490f      	ldr	r1, [pc, #60]	; (d6bc0 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d6b84:	9802      	ldr	r0, [sp, #8]
   d6b86:	f7ff fe91 	bl	d68ac <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d6b8a:	4604      	mov	r4, r0
   d6b8c:	b110      	cbz	r0, d6b94 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d6b8e:	1c2c      	adds	r4, r5, #0
   d6b90:	bf18      	it	ne
   d6b92:	2401      	movne	r4, #1
   d6b94:	a801      	add	r0, sp, #4
   d6b96:	f7fe ff70 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b9a:	2c00      	cmp	r4, #0
   d6b9c:	d0e9      	beq.n	d6b72 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d6b9e:	a904      	add	r1, sp, #16
   d6ba0:	4668      	mov	r0, sp
   d6ba2:	f7ff ffb3 	bl	d6b0c <_ZNK5spark18JSONObjectIterator5valueEv>
   d6ba6:	4668      	mov	r0, sp
   d6ba8:	f001 fa45 	bl	d8036 <_ZNK5spark9JSONValue5toIntEv>
   d6bac:	6028      	str	r0, [r5, #0]
   d6bae:	a801      	add	r0, sp, #4
   d6bb0:	f7fe ff63 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bb4:	e7dd      	b.n	d6b72 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d6bb6:	a805      	add	r0, sp, #20
   d6bb8:	f7fe ff5f 	bl	d5a7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6bbc:	b00b      	add	sp, #44	; 0x2c
   d6bbe:	bd30      	pop	{r4, r5, pc}
   d6bc0:	000d8eec 	.word	0x000d8eec

000d6bc4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6bc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6bc6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6bc8:	4620      	mov	r0, r4
   d6bca:	4913      	ldr	r1, [pc, #76]	; (d6c18 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6bcc:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6bce:	f001 fd65 	bl	d869c <strcmp>
   d6bd2:	b940      	cbnz	r0, d6be6 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6bd4:	f000 ff5c 	bl	d7a90 <_Z16_fetch_usbserialv>
   d6bd8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6bdc:	f000 ff48 	bl	d7a70 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6be0:	f000 ff56 	bl	d7a90 <_Z16_fetch_usbserialv>
   d6be4:	e015      	b.n	d6c12 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d6be6:	490d      	ldr	r1, [pc, #52]	; (d6c1c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d6be8:	4620      	mov	r0, r4
   d6bea:	f001 fd57 	bl	d869c <strcmp>
   d6bee:	b978      	cbnz	r0, d6c10 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6bf0:	a902      	add	r1, sp, #8
   d6bf2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d6bf6:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d6bfa:	4628      	mov	r0, r5
   d6bfc:	f7ff ffb2 	bl	d6b64 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6c00:	f000 ffce 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d6c04:	9901      	ldr	r1, [sp, #4]
   d6c06:	f000 ffc5 	bl	d7b94 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6c0a:	f000 ffc9 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d6c0e:	e000      	b.n	d6c12 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6c10:	2000      	movs	r0, #0
}
   d6c12:	b003      	add	sp, #12
   d6c14:	bd30      	pop	{r4, r5, pc}
   d6c16:	bf00      	nop
   d6c18:	000d8ef1 	.word	0x000d8ef1
   d6c1c:	000d8ef8 	.word	0x000d8ef8

000d6c20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c20:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c22:	6804      	ldr	r4, [r0, #0]
   d6c24:	6843      	ldr	r3, [r0, #4]
   d6c26:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c28:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6c2a:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c2e:	42a6      	cmp	r6, r4
   d6c30:	d005      	beq.n	d6c3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6c32:	f104 0008 	add.w	r0, r4, #8
   d6c36:	f7ff fff3 	bl	d6c20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6c3a:	3414      	adds	r4, #20
   d6c3c:	e7f7      	b.n	d6c2e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6c3e:	6828      	ldr	r0, [r5, #0]
   d6c40:	f7fe f842 	bl	d4cc8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6c44:	4628      	mov	r0, r5
   d6c46:	bd70      	pop	{r4, r5, r6, pc}

000d6c48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c48:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c4a:	6804      	ldr	r4, [r0, #0]
   d6c4c:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6c4e:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d6c50:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c54:	42a6      	cmp	r6, r4
   d6c56:	d004      	beq.n	d6c62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d6c58:	4620      	mov	r0, r4
   d6c5a:	f7fe f8c5 	bl	d4de8 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6c5e:	3410      	adds	r4, #16
   d6c60:	e7f8      	b.n	d6c54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6c62:	6828      	ldr	r0, [r5, #0]
   d6c64:	f7fe f830 	bl	d4cc8 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d6c68:	4628      	mov	r0, r5
   d6c6a:	bd70      	pop	{r4, r5, r6, pc}

000d6c6c <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d6c6c:	b510      	push	{r4, lr}
   d6c6e:	4604      	mov	r4, r0
   d6c70:	300c      	adds	r0, #12
   d6c72:	f7ff ffd5 	bl	d6c20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6c76:	4620      	mov	r0, r4
   d6c78:	f7ff ffe6 	bl	d6c48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6c7c:	4620      	mov	r0, r4
   d6c7e:	bd10      	pop	{r4, pc}

000d6c80 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6c80:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6c82:	4b04      	ldr	r3, [pc, #16]	; (d6c94 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6c84:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d6c86:	f840 3b04 	str.w	r3, [r0], #4
   d6c8a:	f7ff ffef 	bl	d6c6c <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6c8e:	4620      	mov	r0, r4
   d6c90:	bd10      	pop	{r4, pc}
   d6c92:	bf00      	nop
   d6c94:	000d8874 	.word	0x000d8874

000d6c98 <_ZN5spark16StreamLogHandlerD0Ev>:
   d6c98:	b510      	push	{r4, lr}
   d6c9a:	4604      	mov	r4, r0
   d6c9c:	f7ff fff0 	bl	d6c80 <_ZN5spark16StreamLogHandlerD1Ev>
   d6ca0:	4620      	mov	r0, r4
   d6ca2:	2124      	movs	r1, #36	; 0x24
   d6ca4:	f001 fb14 	bl	d82d0 <_ZdlPvj>
   d6ca8:	4620      	mov	r0, r4
   d6caa:	bd10      	pop	{r4, pc}

000d6cac <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d6cac:	b510      	push	{r4, lr}
   d6cae:	4b03      	ldr	r3, [pc, #12]	; (d6cbc <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6cb0:	6003      	str	r3, [r0, #0]
   d6cb2:	4604      	mov	r4, r0
   d6cb4:	f7ff ffe4 	bl	d6c80 <_ZN5spark16StreamLogHandlerD1Ev>
   d6cb8:	4620      	mov	r0, r4
   d6cba:	bd10      	pop	{r4, pc}
   d6cbc:	000d8edc 	.word	0x000d8edc

000d6cc0 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6cc0:	b510      	push	{r4, lr}
   d6cc2:	4604      	mov	r4, r0
   d6cc4:	f7ff fff2 	bl	d6cac <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6cc8:	4620      	mov	r0, r4
   d6cca:	2124      	movs	r1, #36	; 0x24
   d6ccc:	f001 fb00 	bl	d82d0 <_ZdlPvj>
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	bd10      	pop	{r4, pc}

000d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6cd4:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6cd6:	6803      	ldr	r3, [r0, #0]
   d6cd8:	4604      	mov	r4, r0
   d6cda:	6818      	ldr	r0, [r3, #0]
   d6cdc:	f7fd feb8 	bl	d4a50 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	bd10      	pop	{r4, pc}

000d6ce4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6ce8:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6cea:	4b1b      	ldr	r3, [pc, #108]	; (d6d58 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6cec:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6cee:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6cf2:	b085      	sub	sp, #20
   d6cf4:	4682      	mov	sl, r0
   d6cf6:	460e      	mov	r6, r1
   d6cf8:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6cfa:	bb53      	cbnz	r3, d6d52 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6cfc:	f7ff fec0 	bl	d6a80 <_ZN5spark10LogManager8instanceEv>
   d6d00:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6d02:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d04:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6d06:	f7ff fde5 	bl	d68d4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6d0a:	7b23      	ldrb	r3, [r4, #12]
   d6d0c:	b9f3      	cbnz	r3, d6d4c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6d0e:	2301      	movs	r3, #1
   d6d10:	7323      	strb	r3, [r4, #12]
   d6d12:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6d14:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d6d16:	b2f6      	uxtb	r6, r6
   d6d18:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6d1c:	454d      	cmp	r5, r9
   d6d1e:	d013      	beq.n	d6d48 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6d20:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6d24:	4641      	mov	r1, r8
   d6d26:	1d38      	adds	r0, r7, #4
   d6d28:	f7ff fe30 	bl	d698c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6d2c:	4286      	cmp	r6, r0
   d6d2e:	d3f5      	bcc.n	d6d1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d6d30:	683b      	ldr	r3, [r7, #0]
   d6d32:	f8cd b000 	str.w	fp, [sp]
   d6d36:	689b      	ldr	r3, [r3, #8]
   d6d38:	469e      	mov	lr, r3
   d6d3a:	4638      	mov	r0, r7
   d6d3c:	4643      	mov	r3, r8
   d6d3e:	4632      	mov	r2, r6
   d6d40:	4651      	mov	r1, sl
   d6d42:	4677      	mov	r7, lr
   d6d44:	47b8      	blx	r7
   d6d46:	e7e9      	b.n	d6d1c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6d48:	2300      	movs	r3, #0
   d6d4a:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6d4c:	a803      	add	r0, sp, #12
   d6d4e:	f7ff ffc1 	bl	d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d6d52:	b005      	add	sp, #20
   d6d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d58:	e000ed00 	.word	0xe000ed00

000d6d5c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d60:	4699      	mov	r9, r3
   d6d62:	4b19      	ldr	r3, [pc, #100]	; (d6dc8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d6d64:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6d6a:	4607      	mov	r7, r0
   d6d6c:	4688      	mov	r8, r1
   d6d6e:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6d70:	bb33      	cbnz	r3, d6dc0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d6d72:	f7ff fe85 	bl	d6a80 <_ZN5spark10LogManager8instanceEv>
   d6d76:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6d78:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d7a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6d7c:	f7ff fdaa 	bl	d68d4 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6d80:	7b23      	ldrb	r3, [r4, #12]
   d6d82:	b9d3      	cbnz	r3, d6dba <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6d84:	2301      	movs	r3, #1
   d6d86:	7323      	strb	r3, [r4, #12]
   d6d88:	6825      	ldr	r5, [r4, #0]
   d6d8a:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6d8c:	fa5f fb86 	uxtb.w	fp, r6
   d6d90:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6d94:	4555      	cmp	r5, sl
   d6d96:	d00e      	beq.n	d6db6 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d6d98:	f855 6b04 	ldr.w	r6, [r5], #4
   d6d9c:	4649      	mov	r1, r9
   d6d9e:	1d30      	adds	r0, r6, #4
   d6da0:	f7ff fdf4 	bl	d698c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6da4:	4583      	cmp	fp, r0
   d6da6:	d3f5      	bcc.n	d6d94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d6da8:	6833      	ldr	r3, [r6, #0]
   d6daa:	4642      	mov	r2, r8
   d6dac:	68db      	ldr	r3, [r3, #12]
   d6dae:	4639      	mov	r1, r7
   d6db0:	4630      	mov	r0, r6
   d6db2:	4798      	blx	r3
   d6db4:	e7ee      	b.n	d6d94 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6db6:	2300      	movs	r3, #0
   d6db8:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d6dba:	a801      	add	r0, sp, #4
   d6dbc:	f7ff ff8a 	bl	d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6dc0:	b003      	add	sp, #12
   d6dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6dc6:	bf00      	nop
   d6dc8:	e000ed00 	.word	0xe000ed00

000d6dcc <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6dcc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6dd0:	4b15      	ldr	r3, [pc, #84]	; (d6e28 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6dd2:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6dd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6dd8:	4604      	mov	r4, r0
   d6dda:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6ddc:	b9fb      	cbnz	r3, d6e1e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6dde:	f7ff fe4f 	bl	d6a80 <_ZN5spark10LogManager8instanceEv>
   d6de2:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6de4:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6de6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6de8:	f7ff fd74 	bl	d68d4 <_ZN14RecursiveMutex4lockEv>
   d6dec:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6df0:	2646      	movs	r6, #70	; 0x46
   d6df2:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6df6:	42af      	cmp	r7, r5
   d6df8:	d107      	bne.n	d6e0a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6dfa:	a801      	add	r0, sp, #4
   d6dfc:	f7ff ff6a 	bl	d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6e00:	42b4      	cmp	r4, r6
   d6e02:	bfb4      	ite	lt
   d6e04:	2000      	movlt	r0, #0
   d6e06:	2001      	movge	r0, #1
   d6e08:	e00a      	b.n	d6e20 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d6e0a:	f855 0b04 	ldr.w	r0, [r5], #4
   d6e0e:	4641      	mov	r1, r8
   d6e10:	3004      	adds	r0, #4
   d6e12:	f7ff fdbb 	bl	d698c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6e16:	4286      	cmp	r6, r0
   d6e18:	bfa8      	it	ge
   d6e1a:	4606      	movge	r6, r0
   d6e1c:	e7eb      	b.n	d6df6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6e1e:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6e20:	b002      	add	sp, #8
   d6e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6e26:	bf00      	nop
   d6e28:	e000ed00 	.word	0xe000ed00

000d6e2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6e2c:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d6e2e:	6803      	ldr	r3, [r0, #0]
   d6e30:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6e32:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6e34:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6e38:	429a      	cmp	r2, r3
   d6e3a:	4618      	mov	r0, r3
   d6e3c:	d00e      	beq.n	d6e5c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d6e3e:	6806      	ldr	r6, [r0, #0]
   d6e40:	680d      	ldr	r5, [r1, #0]
   d6e42:	42ae      	cmp	r6, r5
   d6e44:	f103 0304 	add.w	r3, r3, #4
   d6e48:	d1f6      	bne.n	d6e38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d6e4a:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6e4c:	1a52      	subs	r2, r2, r1
   d6e4e:	f001 fbc1 	bl	d85d4 <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d6e52:	6863      	ldr	r3, [r4, #4]
   d6e54:	3b01      	subs	r3, #1
   d6e56:	6063      	str	r3, [r4, #4]
    return true;
   d6e58:	2001      	movs	r0, #1
}
   d6e5a:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d6e5c:	2000      	movs	r0, #0
   d6e5e:	bd70      	pop	{r4, r5, r6, pc}

000d6e60 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6e62:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6e64:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d6e66:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6e68:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d6e6a:	f7ff fd33 	bl	d68d4 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6e6e:	a901      	add	r1, sp, #4
   d6e70:	4620      	mov	r0, r4
   d6e72:	f7ff ffdb 	bl	d6e2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6e76:	b920      	cbnz	r0, d6e82 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6e78:	a803      	add	r0, sp, #12
   d6e7a:	f7ff ff2b 	bl	d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6e7e:	b004      	add	sp, #16
   d6e80:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6e82:	6863      	ldr	r3, [r4, #4]
   d6e84:	2b00      	cmp	r3, #0
   d6e86:	d1f7      	bne.n	d6e78 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d6e88:	f7ff fe24 	bl	d6ad4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6e8c:	e7f4      	b.n	d6e78 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6e8e <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6e8e:	b570      	push	{r4, r5, r6, lr}
   d6e90:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6e92:	6943      	ldr	r3, [r0, #20]
   d6e94:	2618      	movs	r6, #24
   d6e96:	4604      	mov	r4, r0
   d6e98:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6e9c:	42ae      	cmp	r6, r5
   d6e9e:	d015      	beq.n	d6ecc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6ea0:	f105 0110 	add.w	r1, r5, #16
   d6ea4:	4620      	mov	r0, r4
   d6ea6:	f7ff ffc1 	bl	d6e2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6eaa:	6863      	ldr	r3, [r4, #4]
   d6eac:	b90b      	cbnz	r3, d6eb2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6eae:	f7ff fe11 	bl	d6ad4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6eb2:	69e0      	ldr	r0, [r4, #28]
   d6eb4:	6929      	ldr	r1, [r5, #16]
   d6eb6:	6803      	ldr	r3, [r0, #0]
   d6eb8:	68db      	ldr	r3, [r3, #12]
   d6eba:	4798      	blx	r3
        if (h.stream) {
   d6ebc:	6969      	ldr	r1, [r5, #20]
   d6ebe:	b119      	cbz	r1, d6ec8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6ec0:	6a20      	ldr	r0, [r4, #32]
   d6ec2:	6803      	ldr	r3, [r0, #0]
   d6ec4:	68db      	ldr	r3, [r3, #12]
   d6ec6:	4798      	blx	r3
   d6ec8:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d6eca:	e7e7      	b.n	d6e9c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6ecc:	6925      	ldr	r5, [r4, #16]
   d6ece:	6963      	ldr	r3, [r4, #20]
   d6ed0:	2618      	movs	r6, #24
   d6ed2:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6ed6:	42b5      	cmp	r5, r6
   d6ed8:	d004      	beq.n	d6ee4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6eda:	4628      	mov	r0, r5
   d6edc:	f7fd ff84 	bl	d4de8 <_ZN6StringD1Ev>
   d6ee0:	3518      	adds	r5, #24
   d6ee2:	e7f8      	b.n	d6ed6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6ee4:	2300      	movs	r3, #0
   d6ee6:	6163      	str	r3, [r4, #20]
   d6ee8:	bd70      	pop	{r4, r5, r6, pc}

000d6eea <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d6eea:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6eec:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6eee:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6ef0:	f7ff fdf0 	bl	d6ad4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6ef4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6ef8:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6efc:	f7ff fcea 	bl	d68d4 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6f00:	4620      	mov	r0, r4
   d6f02:	f7ff ffc4 	bl	d6e8e <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6f06:	4628      	mov	r0, r5
   d6f08:	f7ff fee4 	bl	d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6f0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6f0e:	b108      	cbz	r0, d6f14 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6f10:	f7fd fd8e 	bl	d4a30 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6f14:	6925      	ldr	r5, [r4, #16]
   d6f16:	6963      	ldr	r3, [r4, #20]
   d6f18:	2618      	movs	r6, #24
   d6f1a:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6f1e:	42b5      	cmp	r5, r6
   d6f20:	d004      	beq.n	d6f2c <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6f22:	4628      	mov	r0, r5
   d6f24:	f7fd ff60 	bl	d4de8 <_ZN6StringD1Ev>
   d6f28:	3518      	adds	r5, #24
   d6f2a:	e7f8      	b.n	d6f1e <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6f2c:	6920      	ldr	r0, [r4, #16]
   d6f2e:	f7fd fecb 	bl	d4cc8 <free>
   d6f32:	6820      	ldr	r0, [r4, #0]
   d6f34:	f7fd fec8 	bl	d4cc8 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d6f38:	4620      	mov	r0, r4
   d6f3a:	b002      	add	sp, #8
   d6f3c:	bd70      	pop	{r4, r5, r6, pc}

000d6f3e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f3e:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6f40:	680a      	ldr	r2, [r1, #0]
   d6f42:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f44:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f46:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6f48:	684a      	ldr	r2, [r1, #4]
   d6f4a:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f4c:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f4e:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d6f50:	688a      	ldr	r2, [r1, #8]
   d6f52:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f54:	608b      	str	r3, [r1, #8]
   d6f56:	4770      	bx	lr

000d6f58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6f58:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f5a:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d6f5c:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f5e:	6003      	str	r3, [r0, #0]
   d6f60:	6043      	str	r3, [r0, #4]
   d6f62:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6f64:	f7ff ffeb 	bl	d6f3e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d6f68:	4620      	mov	r0, r4
   d6f6a:	bd10      	pop	{r4, pc}

000d6f6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6f6c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6f6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6f70:	4604      	mov	r4, r0
   d6f72:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6f74:	d925      	bls.n	d6fc2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d6f76:	4290      	cmp	r0, r2
   d6f78:	d224      	bcs.n	d6fc4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d6f7a:	1a55      	subs	r5, r2, r1
   d6f7c:	3d14      	subs	r5, #20
   d6f7e:	442c      	add	r4, r5
   d6f80:	f1a1 0714 	sub.w	r7, r1, #20
   d6f84:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6f88:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6f8a:	f1a5 0308 	sub.w	r3, r5, #8
   d6f8e:	429f      	cmp	r7, r3
   d6f90:	d037      	beq.n	d7002 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6f92:	b184      	cbz	r4, d6fb6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6f94:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6f98:	6023      	str	r3, [r4, #0]
   d6f9a:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6f9e:	80a3      	strh	r3, [r4, #4]
   d6fa0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6fa4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fa6:	60a6      	str	r6, [r4, #8]
   d6fa8:	60e6      	str	r6, [r4, #12]
   d6faa:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6fac:	4629      	mov	r1, r5
   d6fae:	f104 0008 	add.w	r0, r4, #8
   d6fb2:	f7ff ffc4 	bl	d6f3e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6fb6:	4628      	mov	r0, r5
   d6fb8:	f7ff fe32 	bl	d6c20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6fbc:	3c14      	subs	r4, #20
   d6fbe:	3d14      	subs	r5, #20
   d6fc0:	e7e3      	b.n	d6f8a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6fc2:	d01e      	beq.n	d7002 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6fc4:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fc8:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6fca:	f1a5 0308 	sub.w	r3, r5, #8
   d6fce:	429e      	cmp	r6, r3
   d6fd0:	d017      	beq.n	d7002 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6fd2:	b184      	cbz	r4, d6ff6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6fd4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6fd8:	6023      	str	r3, [r4, #0]
   d6fda:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6fde:	80a3      	strh	r3, [r4, #4]
   d6fe0:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6fe4:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6fe6:	60a7      	str	r7, [r4, #8]
   d6fe8:	60e7      	str	r7, [r4, #12]
   d6fea:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6fec:	4629      	mov	r1, r5
   d6fee:	f104 0008 	add.w	r0, r4, #8
   d6ff2:	f7ff ffa4 	bl	d6f3e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6ff6:	4628      	mov	r0, r5
   d6ff8:	f7ff fe12 	bl	d6c20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6ffc:	3414      	adds	r4, #20
   d6ffe:	3514      	adds	r5, #20
   d7000:	e7e3      	b.n	d6fca <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d7002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7004 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7006:	6845      	ldr	r5, [r0, #4]
   d7008:	6883      	ldr	r3, [r0, #8]
   d700a:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d700c:	4604      	mov	r4, r0
   d700e:	460e      	mov	r6, r1
   d7010:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7012:	db0e      	blt.n	d7032 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d7014:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d7016:	2d00      	cmp	r5, #0
   d7018:	dd05      	ble.n	d7026 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d701a:	00a9      	lsls	r1, r5, #2
   d701c:	6800      	ldr	r0, [r0, #0]
   d701e:	f7fd fe5b 	bl	d4cd8 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d7022:	b920      	cbnz	r0, d702e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d7024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d7026:	6800      	ldr	r0, [r0, #0]
   d7028:	f7fd fe4e 	bl	d4cc8 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d702c:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d702e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7030:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7032:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7034:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7036:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d703a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d703e:	1a52      	subs	r2, r2, r1
   d7040:	1d08      	adds	r0, r1, #4
   d7042:	f001 fac7 	bl	d85d4 <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d7046:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d704a:	6863      	ldr	r3, [r4, #4]
   d704c:	3301      	adds	r3, #1
   d704e:	6063      	str	r3, [r4, #4]
   d7050:	2001      	movs	r0, #1
    return true;
}
   d7052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7054 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d7054:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7056:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d7058:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d705a:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d705c:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d705e:	f7ff fc39 	bl	d68d4 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d7062:	6823      	ldr	r3, [r4, #0]
   d7064:	6861      	ldr	r1, [r4, #4]
   d7066:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d706a:	4283      	cmp	r3, r0
   d706c:	461a      	mov	r2, r3
   d706e:	d009      	beq.n	d7084 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d7070:	6812      	ldr	r2, [r2, #0]
   d7072:	42aa      	cmp	r2, r5
   d7074:	f103 0304 	add.w	r3, r3, #4
   d7078:	d1f7      	bne.n	d706a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d707a:	a801      	add	r0, sp, #4
   d707c:	f7ff fe2a 	bl	d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7080:	2500      	movs	r5, #0
   d7082:	e00e      	b.n	d70a2 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7084:	462a      	mov	r2, r5
   d7086:	4620      	mov	r0, r4
   d7088:	f7ff ffbc 	bl	d7004 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d708c:	4605      	mov	r5, r0
   d708e:	2800      	cmp	r0, #0
   d7090:	d0f3      	beq.n	d707a <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d7092:	6863      	ldr	r3, [r4, #4]
   d7094:	2b01      	cmp	r3, #1
   d7096:	d101      	bne.n	d709c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d7098:	f7ff fd10 	bl	d6abc <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d709c:	a801      	add	r0, sp, #4
   d709e:	f7ff fe19 	bl	d6cd4 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d70a2:	4628      	mov	r0, r5
   d70a4:	b003      	add	sp, #12
   d70a6:	bd30      	pop	{r4, r5, pc}

000d70a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d70a8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d70aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d70ac:	4606      	mov	r6, r0
   d70ae:	460c      	mov	r4, r1
   d70b0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d70b2:	d914      	bls.n	d70de <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d70b4:	4290      	cmp	r0, r2
   d70b6:	d213      	bcs.n	d70e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d70b8:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d70bc:	1a6c      	subs	r4, r5, r1
   d70be:	f1a1 0710 	sub.w	r7, r1, #16
   d70c2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d70c4:	42af      	cmp	r7, r5
   d70c6:	d018      	beq.n	d70fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d70c8:	b11c      	cbz	r4, d70d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d70ca:	4629      	mov	r1, r5
   d70cc:	4620      	mov	r0, r4
   d70ce:	f7fd fe7b 	bl	d4dc8 <_ZN6StringC1EOS_>
                end->~T();
   d70d2:	4628      	mov	r0, r5
   d70d4:	f7fd fe88 	bl	d4de8 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d70d8:	3d10      	subs	r5, #16
   d70da:	3c10      	subs	r4, #16
   d70dc:	e7f2      	b.n	d70c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d70de:	d00c      	beq.n	d70fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d70e0:	42ac      	cmp	r4, r5
   d70e2:	d00a      	beq.n	d70fa <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d70e4:	b11e      	cbz	r6, d70ee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d70e6:	4621      	mov	r1, r4
   d70e8:	4630      	mov	r0, r6
   d70ea:	f7fd fe6d 	bl	d4dc8 <_ZN6StringC1EOS_>
                p->~T();
   d70ee:	4620      	mov	r0, r4
   d70f0:	f7fd fe7a 	bl	d4de8 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d70f4:	3410      	adds	r4, #16
   d70f6:	3610      	adds	r6, #16
   d70f8:	e7f2      	b.n	d70e0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d70fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d70fc:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d70fe:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d7100:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d7102:	dd0b      	ble.n	d711c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d7104:	0130      	lsls	r0, r6, #4
   d7106:	f7fd fdd7 	bl	d4cb8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d710a:	4604      	mov	r4, r0
   d710c:	b170      	cbz	r0, d712c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d710e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d7112:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7116:	f7ff ffc7 	bl	d70a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d711a:	e000      	b.n	d711e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d711c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d711e:	6828      	ldr	r0, [r5, #0]
   d7120:	f7fd fdd2 	bl	d4cc8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d7124:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7126:	60ae      	str	r6, [r5, #8]
        return true;
   d7128:	2001      	movs	r0, #1
   d712a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d712c:	bd70      	pop	{r4, r5, r6, pc}

000d712e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d712e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7132:	2300      	movs	r3, #0
   d7134:	b095      	sub	sp, #84	; 0x54
   d7136:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7138:	2246      	movs	r2, #70	; 0x46
   d713a:	6003      	str	r3, [r0, #0]
   d713c:	6043      	str	r3, [r0, #4]
   d713e:	6083      	str	r3, [r0, #8]
   d7140:	60c3      	str	r3, [r0, #12]
   d7142:	6103      	str	r3, [r0, #16]
   d7144:	6143      	str	r3, [r0, #20]
   d7146:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7148:	9102      	str	r1, [sp, #8]
   d714a:	f8da 1004 	ldr.w	r1, [sl, #4]
   d714e:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7150:	4299      	cmp	r1, r3
   d7152:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d7154:	9309      	str	r3, [sp, #36]	; 0x24
   d7156:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d7158:	f340 809d 	ble.w	d7296 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d715c:	a808      	add	r0, sp, #32
   d715e:	f7ff ffcd 	bl	d70fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7162:	2800      	cmp	r0, #0
   d7164:	f040 8097 	bne.w	d7296 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d7168:	e08e      	b.n	d7288 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d716a:	4621      	mov	r1, r4
   d716c:	a80b      	add	r0, sp, #44	; 0x2c
   d716e:	f7fd fe2b 	bl	d4dc8 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7172:	a90b      	add	r1, sp, #44	; 0x2c
   d7174:	a80f      	add	r0, sp, #60	; 0x3c
   d7176:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d7178:	f7fd fe26 	bl	d4dc8 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d717c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d717e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7180:	4299      	cmp	r1, r3
   d7182:	f2c0 80ce 	blt.w	d7322 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d7186:	3101      	adds	r1, #1
   d7188:	a808      	add	r0, sp, #32
   d718a:	f7ff ffb7 	bl	d70fc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d718e:	2800      	cmp	r0, #0
   d7190:	f040 80c7 	bne.w	d7322 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d7194:	a80f      	add	r0, sp, #60	; 0x3c
   d7196:	f7fd fe27 	bl	d4de8 <_ZN6StringD1Ev>
   d719a:	a80b      	add	r0, sp, #44	; 0x2c
   d719c:	f7fd fe24 	bl	d4de8 <_ZN6StringD1Ev>
   d71a0:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d71a2:	42a7      	cmp	r7, r4
   d71a4:	d1e1      	bne.n	d716a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d71a6:	2600      	movs	r6, #0
   d71a8:	960b      	str	r6, [sp, #44]	; 0x2c
   d71aa:	960c      	str	r6, [sp, #48]	; 0x30
   d71ac:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d71ae:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d71b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d71b2:	429e      	cmp	r6, r3
   d71b4:	f280 80a8 	bge.w	d7308 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d71b8:	0133      	lsls	r3, r6, #4
   d71ba:	9a08      	ldr	r2, [sp, #32]
   d71bc:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d71be:	9306      	str	r3, [sp, #24]
        if (!category) {
   d71c0:	2b00      	cmp	r3, #0
   d71c2:	f000 809f 	beq.w	d7304 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d71c6:	2314      	movs	r3, #20
   d71c8:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d71ca:	f8cd 901c 	str.w	r9, [sp, #28]
   d71ce:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d71d0:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d71d2:	a907      	add	r1, sp, #28
   d71d4:	a806      	add	r0, sp, #24
   d71d6:	f7ff fb2c 	bl	d6832 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d71da:	4607      	mov	r7, r0
   d71dc:	2800      	cmp	r0, #0
   d71de:	f000 8091 	beq.w	d7304 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d71e2:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d71e4:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d71e6:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d71ea:	9a07      	ldr	r2, [sp, #28]
   d71ec:	4620      	mov	r0, r4
   d71ee:	f7ff fb8d 	bl	d690c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d71f2:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d71f6:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d71f8:	f1b8 0f00 	cmp.w	r8, #0
   d71fc:	d153      	bne.n	d72a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d71fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d7202:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d7206:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d720a:	970f      	str	r7, [sp, #60]	; 0x3c
   d720c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d7210:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d7214:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d7218:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d721c:	6867      	ldr	r7, [r4, #4]
   d721e:	68a3      	ldr	r3, [r4, #8]
   d7220:	429f      	cmp	r7, r3
   d7222:	da4f      	bge.n	d72c4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d7224:	9b00      	ldr	r3, [sp, #0]
   d7226:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d722a:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d722c:	2214      	movs	r2, #20
   d722e:	4353      	muls	r3, r2
   d7230:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d7234:	fb02 b201 	mla	r2, r2, r1, fp
   d7238:	f107 0014 	add.w	r0, r7, #20
   d723c:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d723e:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d7240:	f7ff fe94 	bl	d6f6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7244:	b1a7      	cbz	r7, d7270 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d7246:	9b03      	ldr	r3, [sp, #12]
   d7248:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d724a:	f84b 2003 	str.w	r2, [fp, r3]
   d724e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d7252:	80bb      	strh	r3, [r7, #4]
   d7254:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d7258:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d725a:	f8c7 9008 	str.w	r9, [r7, #8]
   d725e:	f8c7 900c 	str.w	r9, [r7, #12]
   d7262:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d7266:	a911      	add	r1, sp, #68	; 0x44
   d7268:	f107 0008 	add.w	r0, r7, #8
   d726c:	f7ff fe67 	bl	d6f3e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d7270:	6863      	ldr	r3, [r4, #4]
   d7272:	3301      	adds	r3, #1
   d7274:	6063      	str	r3, [r4, #4]
   d7276:	a811      	add	r0, sp, #68	; 0x44
   d7278:	f7ff fcd2 	bl	d6c20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d727c:	f1b8 0f00 	cmp.w	r8, #0
   d7280:	d011      	beq.n	d72a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d7282:	a80b      	add	r0, sp, #44	; 0x2c
   d7284:	f7ff fccc 	bl	d6c20 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7288:	a808      	add	r0, sp, #32
   d728a:	f7ff fcdd 	bl	d6c48 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d728e:	4628      	mov	r0, r5
   d7290:	b015      	add	sp, #84	; 0x54
   d7292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7296:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d729a:	f8da 3004 	ldr.w	r3, [sl, #4]
   d729e:	2714      	movs	r7, #20
   d72a0:	fb07 4703 	mla	r7, r7, r3, r4
   d72a4:	e77d      	b.n	d71a2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d72a6:	6823      	ldr	r3, [r4, #0]
   d72a8:	9a00      	ldr	r2, [sp, #0]
   d72aa:	2414      	movs	r4, #20
   d72ac:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d72b0:	9b06      	ldr	r3, [sp, #24]
   d72b2:	781b      	ldrb	r3, [r3, #0]
   d72b4:	bb23      	cbnz	r3, d7300 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d72b6:	f8da 3000 	ldr.w	r3, [sl]
   d72ba:	9a01      	ldr	r2, [sp, #4]
   d72bc:	4413      	add	r3, r2
   d72be:	7c1b      	ldrb	r3, [r3, #16]
   d72c0:	80e3      	strh	r3, [r4, #6]
   d72c2:	e01d      	b.n	d7300 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d72c4:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d72c6:	2f00      	cmp	r7, #0
   d72c8:	dd0f      	ble.n	d72ea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d72ca:	2314      	movs	r3, #20
   d72cc:	fb03 f007 	mul.w	r0, r3, r7
   d72d0:	9303      	str	r3, [sp, #12]
   d72d2:	f7fd fcf1 	bl	d4cb8 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d72d6:	4683      	mov	fp, r0
   d72d8:	b178      	cbz	r0, d72fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d72da:	e894 0006 	ldmia.w	r4, {r1, r2}
   d72de:	9b03      	ldr	r3, [sp, #12]
   d72e0:	fb03 1202 	mla	r2, r3, r2, r1
   d72e4:	f7ff fe42 	bl	d6f6c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d72e8:	e000      	b.n	d72ec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d72ea:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d72ec:	6820      	ldr	r0, [r4, #0]
   d72ee:	f7fd fceb 	bl	d4cc8 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d72f2:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d72f6:	60a7      	str	r7, [r4, #8]
   d72f8:	e794      	b.n	d7224 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d72fa:	f04f 0801 	mov.w	r8, #1
   d72fe:	e7ba      	b.n	d7276 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d7300:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d7302:	e766      	b.n	d71d2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d7304:	3601      	adds	r6, #1
   d7306:	e753      	b.n	d71b0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d7308:	a908      	add	r1, sp, #32
   d730a:	4628      	mov	r0, r5
   d730c:	f7ff fe17 	bl	d6f3e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d7310:	a90b      	add	r1, sp, #44	; 0x2c
   d7312:	f105 000c 	add.w	r0, r5, #12
   d7316:	f7ff fe12 	bl	d6f3e <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d731a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d731e:	762b      	strb	r3, [r5, #24]
   d7320:	e7af      	b.n	d7282 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7322:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d7324:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d7326:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d732a:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d732e:	4631      	mov	r1, r6
   d7330:	f106 0010 	add.w	r0, r6, #16
   d7334:	f7ff feb8 	bl	d70a8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7338:	b11e      	cbz	r6, d7342 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d733a:	a90f      	add	r1, sp, #60	; 0x3c
   d733c:	4630      	mov	r0, r6
   d733e:	f7fd fd43 	bl	d4dc8 <_ZN6StringC1EOS_>
    ++size_;
   d7342:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d7344:	3301      	adds	r3, #1
   d7346:	9309      	str	r3, [sp, #36]	; 0x24
   d7348:	e724      	b.n	d7194 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d734c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d734c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d734e:	4604      	mov	r4, r0
   d7350:	4b09      	ldr	r3, [pc, #36]	; (d7378 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7352:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7356:	4605      	mov	r5, r0
   d7358:	460e      	mov	r6, r1
        filter_(level, filters) {
   d735a:	a801      	add	r0, sp, #4
   d735c:	4611      	mov	r1, r2
   d735e:	f7fd f9a8 	bl	d46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7362:	aa01      	add	r2, sp, #4
   d7364:	4631      	mov	r1, r6
   d7366:	4620      	mov	r0, r4
   d7368:	f7ff fee1 	bl	d712e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d736c:	a801      	add	r0, sp, #4
   d736e:	f7fd f95f 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7372:	4628      	mov	r0, r5
   d7374:	b004      	add	sp, #16
   d7376:	bd70      	pop	{r4, r5, r6, pc}
   d7378:	000d8874 	.word	0x000d8874

000d737c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d737c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d737e:	460f      	mov	r7, r1
   d7380:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7382:	492b      	ldr	r1, [pc, #172]	; (d7430 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7384:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7386:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d7388:	4616      	mov	r6, r2
   d738a:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d738c:	f001 f986 	bl	d869c <strcmp>
   d7390:	bb28      	cbnz	r0, d73de <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d7392:	2c00      	cmp	r4, #0
   d7394:	d049      	beq.n	d742a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7396:	4629      	mov	r1, r5
   d7398:	a801      	add	r0, sp, #4
   d739a:	f7ff fddd 	bl	d6f58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d739e:	4925      	ldr	r1, [pc, #148]	; (d7434 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d73a0:	2024      	movs	r0, #36	; 0x24
   d73a2:	f000 ff97 	bl	d82d4 <_ZnwjRKSt9nothrow_t>
   d73a6:	4605      	mov	r5, r0
   d73a8:	b1b8      	cbz	r0, d73da <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d73aa:	a901      	add	r1, sp, #4
   d73ac:	a804      	add	r0, sp, #16
   d73ae:	f7ff fdd3 	bl	d6f58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d73b2:	a904      	add	r1, sp, #16
   d73b4:	a807      	add	r0, sp, #28
   d73b6:	f7fd f97c 	bl	d46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d73ba:	aa07      	add	r2, sp, #28
   d73bc:	4631      	mov	r1, r6
   d73be:	4628      	mov	r0, r5
   d73c0:	f7ff ffc4 	bl	d734c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d73c4:	a807      	add	r0, sp, #28
   d73c6:	f7fd f933 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d73ca:	4b1b      	ldr	r3, [pc, #108]	; (d7438 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d73cc:	602b      	str	r3, [r5, #0]
   d73ce:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d73d0:	a804      	add	r0, sp, #16
   d73d2:	f7fd f92d 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d73d6:	4b19      	ldr	r3, [pc, #100]	; (d743c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d73d8:	602b      	str	r3, [r5, #0]
   d73da:	a801      	add	r0, sp, #4
   d73dc:	e01f      	b.n	d741e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d73de:	4918      	ldr	r1, [pc, #96]	; (d7440 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d73e0:	4638      	mov	r0, r7
   d73e2:	f001 f95b 	bl	d869c <strcmp>
   d73e6:	b9f0      	cbnz	r0, d7426 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d73e8:	b1fc      	cbz	r4, d742a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d73ea:	4629      	mov	r1, r5
   d73ec:	a804      	add	r0, sp, #16
   d73ee:	f7ff fdb3 	bl	d6f58 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d73f2:	4910      	ldr	r1, [pc, #64]	; (d7434 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d73f4:	2024      	movs	r0, #36	; 0x24
   d73f6:	f000 ff6d 	bl	d82d4 <_ZnwjRKSt9nothrow_t>
   d73fa:	4605      	mov	r5, r0
   d73fc:	b170      	cbz	r0, d741c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d73fe:	a904      	add	r1, sp, #16
   d7400:	a807      	add	r0, sp, #28
   d7402:	f7fd f956 	bl	d46b2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7406:	aa07      	add	r2, sp, #28
   d7408:	4631      	mov	r1, r6
   d740a:	4628      	mov	r0, r5
   d740c:	f7ff ff9e 	bl	d734c <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7410:	a807      	add	r0, sp, #28
   d7412:	f7fd f90d 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7416:	4b08      	ldr	r3, [pc, #32]	; (d7438 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d7418:	602b      	str	r3, [r5, #0]
   d741a:	622c      	str	r4, [r5, #32]
   d741c:	a804      	add	r0, sp, #16
   d741e:	f7fd f907 	bl	d4630 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7422:	4628      	mov	r0, r5
   d7424:	e002      	b.n	d742c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d7426:	2000      	movs	r0, #0
   d7428:	e000      	b.n	d742c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d742a:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d742c:	b00b      	add	sp, #44	; 0x2c
   d742e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7430:	000d8f4a 	.word	0x000d8f4a
   d7434:	000d9173 	.word	0x000d9173
   d7438:	000d8fd4 	.word	0x000d8fd4
   d743c:	000d8edc 	.word	0x000d8edc
   d7440:	000d8f4e 	.word	0x000d8f4e

000d7444 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7444:	4b01      	ldr	r3, [pc, #4]	; (d744c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7446:	4a02      	ldr	r2, [pc, #8]	; (d7450 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7448:	601a      	str	r2, [r3, #0]
   d744a:	4770      	bx	lr
   d744c:	2003e40c 	.word	0x2003e40c
   d7450:	000d8f5f 	.word	0x000d8f5f

000d7454 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7458:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d745a:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d745e:	4604      	mov	r4, r0
   d7460:	460e      	mov	r6, r1
   d7462:	4617      	mov	r7, r2
   d7464:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d7466:	f000 fb13 	bl	d7a90 <_Z16_fetch_usbserialv>
   d746a:	4581      	cmp	r9, r0
   d746c:	d105      	bne.n	d747a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d746e:	485a      	ldr	r0, [pc, #360]	; (d75d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7470:	f000 fce7 	bl	d7e42 <_ZN5spark12NetworkClass9listeningEv>
   d7474:	2800      	cmp	r0, #0
   d7476:	f040 80ac 	bne.w	d75d2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d747a:	792b      	ldrb	r3, [r5, #4]
   d747c:	071b      	lsls	r3, r3, #28
   d747e:	d505      	bpl.n	d748c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d7480:	696b      	ldr	r3, [r5, #20]
   d7482:	4a56      	ldr	r2, [pc, #344]	; (d75dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d7484:	6a20      	ldr	r0, [r4, #32]
   d7486:	2100      	movs	r1, #0
   d7488:	f7ff f985 	bl	d6796 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d748c:	f1b8 0f00 	cmp.w	r8, #0
   d7490:	d00d      	beq.n	d74ae <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d7492:	215b      	movs	r1, #91	; 0x5b
   d7494:	4620      	mov	r0, r4
   d7496:	f7ff fa2e 	bl	d68f6 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d749a:	4641      	mov	r1, r8
   d749c:	4620      	mov	r0, r4
   d749e:	f7ff fa1c 	bl	d68da <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d74a2:	6823      	ldr	r3, [r4, #0]
   d74a4:	494e      	ldr	r1, [pc, #312]	; (d75e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d74a6:	68db      	ldr	r3, [r3, #12]
   d74a8:	2202      	movs	r2, #2
   d74aa:	4620      	mov	r0, r4
   d74ac:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d74ae:	792b      	ldrb	r3, [r5, #4]
   d74b0:	07d9      	lsls	r1, r3, #31
   d74b2:	d525      	bpl.n	d7500 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d74b4:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d74b8:	212f      	movs	r1, #47	; 0x2f
   d74ba:	4640      	mov	r0, r8
   d74bc:	f001 f929 	bl	d8712 <strrchr>
    if (s1) {
   d74c0:	b108      	cbz	r0, d74c6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d74c2:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d74c6:	4641      	mov	r1, r8
   d74c8:	4620      	mov	r0, r4
   d74ca:	f7ff fa06 	bl	d68da <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d74ce:	792b      	ldrb	r3, [r5, #4]
   d74d0:	079a      	lsls	r2, r3, #30
   d74d2:	d509      	bpl.n	d74e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d74d4:	213a      	movs	r1, #58	; 0x3a
   d74d6:	4620      	mov	r0, r4
   d74d8:	f7ff fa0d 	bl	d68f6 <_ZN5spark16StreamLogHandler5writeEc>
   d74dc:	68eb      	ldr	r3, [r5, #12]
   d74de:	4a41      	ldr	r2, [pc, #260]	; (d75e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d74e0:	6a20      	ldr	r0, [r4, #32]
   d74e2:	2100      	movs	r1, #0
   d74e4:	f7ff f957 	bl	d6796 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d74e8:	792b      	ldrb	r3, [r5, #4]
   d74ea:	f013 0f04 	tst.w	r3, #4
   d74ee:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d74f0:	bf18      	it	ne
   d74f2:	493d      	ldrne	r1, [pc, #244]	; (d75e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d74f4:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d74f6:	bf08      	it	eq
   d74f8:	493c      	ldreq	r1, [pc, #240]	; (d75ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d74fa:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d74fc:	4620      	mov	r0, r4
   d74fe:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d7500:	792b      	ldrb	r3, [r5, #4]
   d7502:	075b      	lsls	r3, r3, #29
   d7504:	d518      	bpl.n	d7538 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7506:	6929      	ldr	r1, [r5, #16]
   d7508:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d750a:	4613      	mov	r3, r2
   d750c:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7510:	b138      	cbz	r0, d7522 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d7512:	2820      	cmp	r0, #32
   d7514:	d101      	bne.n	d751a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d7516:	4619      	mov	r1, r3
   d7518:	e001      	b.n	d751e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d751a:	2828      	cmp	r0, #40	; 0x28
   d751c:	d001      	beq.n	d7522 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d751e:	461a      	mov	r2, r3
   d7520:	e7f3      	b.n	d750a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d7522:	6823      	ldr	r3, [r4, #0]
   d7524:	1a52      	subs	r2, r2, r1
   d7526:	68db      	ldr	r3, [r3, #12]
   d7528:	4620      	mov	r0, r4
   d752a:	4798      	blx	r3
        write("(): ", 4);
   d752c:	6823      	ldr	r3, [r4, #0]
   d752e:	4930      	ldr	r1, [pc, #192]	; (d75f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d7530:	68db      	ldr	r3, [r3, #12]
   d7532:	2204      	movs	r2, #4
   d7534:	4620      	mov	r0, r4
   d7536:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d7538:	2100      	movs	r1, #0
   d753a:	4638      	mov	r0, r7
   d753c:	f7fd fb38 	bl	d4bb0 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d7540:	4601      	mov	r1, r0
   d7542:	4620      	mov	r0, r4
   d7544:	f7ff f9c9 	bl	d68da <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7548:	6823      	ldr	r3, [r4, #0]
   d754a:	4928      	ldr	r1, [pc, #160]	; (d75ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d754c:	68db      	ldr	r3, [r3, #12]
   d754e:	2202      	movs	r2, #2
   d7550:	4620      	mov	r0, r4
   d7552:	4798      	blx	r3
    // Message
    if (msg) {
   d7554:	b11e      	cbz	r6, d755e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d7556:	4631      	mov	r1, r6
   d7558:	4620      	mov	r0, r4
   d755a:	f7ff f9be 	bl	d68da <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d755e:	792b      	ldrb	r3, [r5, #4]
   d7560:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7564:	d02d      	beq.n	d75c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d7566:	6823      	ldr	r3, [r4, #0]
   d7568:	4922      	ldr	r1, [pc, #136]	; (d75f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d756a:	68db      	ldr	r3, [r3, #12]
   d756c:	4620      	mov	r0, r4
   d756e:	2202      	movs	r2, #2
   d7570:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d7572:	792b      	ldrb	r3, [r5, #4]
   d7574:	06d8      	lsls	r0, r3, #27
   d7576:	d50b      	bpl.n	d7590 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d7578:	6823      	ldr	r3, [r4, #0]
   d757a:	491f      	ldr	r1, [pc, #124]	; (d75f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d757c:	68db      	ldr	r3, [r3, #12]
   d757e:	2207      	movs	r2, #7
   d7580:	4620      	mov	r0, r4
   d7582:	4798      	blx	r3
   d7584:	69ab      	ldr	r3, [r5, #24]
   d7586:	4a1d      	ldr	r2, [pc, #116]	; (d75fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d7588:	6a20      	ldr	r0, [r4, #32]
   d758a:	2100      	movs	r1, #0
   d758c:	f7ff f903 	bl	d6796 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d7590:	792b      	ldrb	r3, [r5, #4]
   d7592:	0699      	lsls	r1, r3, #26
   d7594:	d511      	bpl.n	d75ba <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d7596:	06da      	lsls	r2, r3, #27
   d7598:	d505      	bpl.n	d75a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d759a:	6823      	ldr	r3, [r4, #0]
   d759c:	4912      	ldr	r1, [pc, #72]	; (d75e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d759e:	68db      	ldr	r3, [r3, #12]
   d75a0:	2202      	movs	r2, #2
   d75a2:	4620      	mov	r0, r4
   d75a4:	4798      	blx	r3
            }
            write("details = ", 10);
   d75a6:	6823      	ldr	r3, [r4, #0]
   d75a8:	4915      	ldr	r1, [pc, #84]	; (d7600 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d75aa:	68db      	ldr	r3, [r3, #12]
   d75ac:	4620      	mov	r0, r4
   d75ae:	220a      	movs	r2, #10
   d75b0:	4798      	blx	r3
            write(attr.details);
   d75b2:	69e9      	ldr	r1, [r5, #28]
   d75b4:	4620      	mov	r0, r4
   d75b6:	f7ff f990 	bl	d68da <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d75ba:	215d      	movs	r1, #93	; 0x5d
   d75bc:	4620      	mov	r0, r4
   d75be:	f7ff f99a 	bl	d68f6 <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d75c2:	6823      	ldr	r3, [r4, #0]
   d75c4:	490f      	ldr	r1, [pc, #60]	; (d7604 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d75c6:	68db      	ldr	r3, [r3, #12]
   d75c8:	4620      	mov	r0, r4
   d75ca:	2202      	movs	r2, #2
}
   d75cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d75d0:	4718      	bx	r3
   d75d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75d6:	bf00      	nop
   d75d8:	2003e740 	.word	0x2003e740
   d75dc:	000d8f63 	.word	0x000d8f63
   d75e0:	000d8f6a 	.word	0x000d8f6a
   d75e4:	000d8f6d 	.word	0x000d8f6d
   d75e8:	000d8f70 	.word	0x000d8f70
   d75ec:	000d8f75 	.word	0x000d8f75
   d75f0:	000d8f73 	.word	0x000d8f73
   d75f4:	000d8f78 	.word	0x000d8f78
   d75f8:	000d8f7b 	.word	0x000d8f7b
   d75fc:	000d8f83 	.word	0x000d8f83
   d7600:	000d8f86 	.word	0x000d8f86
   d7604:	000d8f91 	.word	0x000d8f91

000d7608 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7608:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d760c:	b085      	sub	sp, #20
   d760e:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7612:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7614:	4606      	mov	r6, r0
   d7616:	460f      	mov	r7, r1
   d7618:	4691      	mov	r9, r2
   d761a:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d761c:	f000 fa38 	bl	d7a90 <_Z16_fetch_usbserialv>
   d7620:	4580      	cmp	r8, r0
   d7622:	d105      	bne.n	d7630 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7624:	484a      	ldr	r0, [pc, #296]	; (d7750 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7626:	f000 fc0c 	bl	d7e42 <_ZN5spark12NetworkClass9listeningEv>
   d762a:	2800      	cmp	r0, #0
   d762c:	f040 808c 	bne.w	d7748 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d7630:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d7632:	4a48      	ldr	r2, [pc, #288]	; (d7754 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7634:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d7636:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d763a:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d763c:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d763e:	f88d 8008 	strb.w	r8, [sp, #8]
   d7642:	f000 fd42 	bl	d80ca <_ZN5spark10JSONWriter11beginObjectEv>
   d7646:	4641      	mov	r1, r8
   d7648:	4648      	mov	r0, r9
   d764a:	f7fd fab1 	bl	d4bb0 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d764e:	4942      	ldr	r1, [pc, #264]	; (d7758 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7650:	4680      	mov	r8, r0
   d7652:	2201      	movs	r2, #1
   d7654:	a801      	add	r0, sp, #4
   d7656:	f000 fdbd 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d765a:	4641      	mov	r1, r8
   d765c:	f7ff f92d 	bl	d68ba <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d7660:	b13f      	cbz	r7, d7672 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7662:	493e      	ldr	r1, [pc, #248]	; (d775c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d7664:	2201      	movs	r2, #1
   d7666:	a801      	add	r0, sp, #4
   d7668:	f000 fdb4 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d766c:	4639      	mov	r1, r7
   d766e:	f7ff f924 	bl	d68ba <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d7672:	b13d      	cbz	r5, d7684 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7674:	493a      	ldr	r1, [pc, #232]	; (d7760 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d7676:	2201      	movs	r2, #1
   d7678:	a801      	add	r0, sp, #4
   d767a:	f000 fdab 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d767e:	4629      	mov	r1, r5
   d7680:	f7ff f91b 	bl	d68ba <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d7684:	7923      	ldrb	r3, [r4, #4]
   d7686:	07df      	lsls	r7, r3, #31
   d7688:	d50e      	bpl.n	d76a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d768a:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d768c:	212f      	movs	r1, #47	; 0x2f
   d768e:	4628      	mov	r0, r5
   d7690:	f001 f83f 	bl	d8712 <strrchr>
    if (s1) {
   d7694:	b100      	cbz	r0, d7698 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d7696:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d7698:	4932      	ldr	r1, [pc, #200]	; (d7764 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d769a:	2201      	movs	r2, #1
   d769c:	a801      	add	r0, sp, #4
   d769e:	f000 fd99 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d76a2:	4629      	mov	r1, r5
   d76a4:	f7ff f909 	bl	d68ba <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d76a8:	7923      	ldrb	r3, [r4, #4]
   d76aa:	079d      	lsls	r5, r3, #30
   d76ac:	d507      	bpl.n	d76be <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d76ae:	492e      	ldr	r1, [pc, #184]	; (d7768 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d76b0:	2202      	movs	r2, #2
   d76b2:	a801      	add	r0, sp, #4
   d76b4:	f000 fd8e 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d76b8:	68e1      	ldr	r1, [r4, #12]
   d76ba:	f000 fd13 	bl	d80e4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d76be:	7923      	ldrb	r3, [r4, #4]
   d76c0:	0758      	lsls	r0, r3, #29
   d76c2:	d516      	bpl.n	d76f2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d76c4:	6925      	ldr	r5, [r4, #16]
   d76c6:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d76c8:	463b      	mov	r3, r7
   d76ca:	f813 2b01 	ldrb.w	r2, [r3], #1
   d76ce:	b13a      	cbz	r2, d76e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d76d0:	2a20      	cmp	r2, #32
   d76d2:	d101      	bne.n	d76d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d76d4:	461d      	mov	r5, r3
   d76d6:	e001      	b.n	d76dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d76d8:	2a28      	cmp	r2, #40	; 0x28
   d76da:	d001      	beq.n	d76e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d76dc:	461f      	mov	r7, r3
   d76de:	e7f3      	b.n	d76c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d76e0:	2202      	movs	r2, #2
   d76e2:	4922      	ldr	r1, [pc, #136]	; (d776c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d76e4:	a801      	add	r0, sp, #4
   d76e6:	f000 fd75 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d76ea:	1b7a      	subs	r2, r7, r5
   d76ec:	4629      	mov	r1, r5
   d76ee:	f000 fd80 	bl	d81f2 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d76f2:	7923      	ldrb	r3, [r4, #4]
   d76f4:	0719      	lsls	r1, r3, #28
   d76f6:	d507      	bpl.n	d7708 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d76f8:	491d      	ldr	r1, [pc, #116]	; (d7770 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d76fa:	2201      	movs	r2, #1
   d76fc:	a801      	add	r0, sp, #4
   d76fe:	f000 fd69 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7702:	6961      	ldr	r1, [r4, #20]
   d7704:	f000 fd00 	bl	d8108 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d7708:	7923      	ldrb	r3, [r4, #4]
   d770a:	06da      	lsls	r2, r3, #27
   d770c:	d508      	bpl.n	d7720 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d770e:	2204      	movs	r2, #4
   d7710:	4918      	ldr	r1, [pc, #96]	; (d7774 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7712:	eb0d 0002 	add.w	r0, sp, r2
   d7716:	f000 fd5d 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d771a:	69a1      	ldr	r1, [r4, #24]
   d771c:	f000 fce2 	bl	d80e4 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7720:	7923      	ldrb	r3, [r4, #4]
   d7722:	069b      	lsls	r3, r3, #26
   d7724:	d507      	bpl.n	d7736 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d7726:	4914      	ldr	r1, [pc, #80]	; (d7778 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7728:	2206      	movs	r2, #6
   d772a:	a801      	add	r0, sp, #4
   d772c:	f000 fd52 	bl	d81d4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7730:	69e1      	ldr	r1, [r4, #28]
   d7732:	f7ff f8c2 	bl	d68ba <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d7736:	a801      	add	r0, sp, #4
   d7738:	f000 fcb1 	bl	d809e <_ZN5spark10JSONWriter9endObjectEv>
   d773c:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d773e:	490f      	ldr	r1, [pc, #60]	; (d777c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d7740:	6803      	ldr	r3, [r0, #0]
   d7742:	2202      	movs	r2, #2
   d7744:	68db      	ldr	r3, [r3, #12]
   d7746:	4798      	blx	r3
}
   d7748:	b005      	add	sp, #20
   d774a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d774e:	bf00      	nop
   d7750:	2003e740 	.word	0x2003e740
   d7754:	000d8ec4 	.word	0x000d8ec4
   d7758:	000d8ef6 	.word	0x000d8ef6
   d775c:	000d8f09 	.word	0x000d8f09
   d7760:	000d8afe 	.word	0x000d8afe
   d7764:	000d8ad9 	.word	0x000d8ad9
   d7768:	000d8f94 	.word	0x000d8f94
   d776c:	000d8f97 	.word	0x000d8f97
   d7770:	000d8f1e 	.word	0x000d8f1e
   d7774:	000d8f9a 	.word	0x000d8f9a
   d7778:	000d8f9f 	.word	0x000d8f9f
   d777c:	000d8f91 	.word	0x000d8f91

000d7780 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7780:	4b02      	ldr	r3, [pc, #8]	; (d778c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7782:	681a      	ldr	r2, [r3, #0]
   d7784:	4b02      	ldr	r3, [pc, #8]	; (d7790 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7786:	601a      	str	r2, [r3, #0]
   d7788:	4770      	bx	lr
   d778a:	bf00      	nop
   d778c:	2003d8d4 	.word	0x2003d8d4
   d7790:	2003e410 	.word	0x2003e410

000d7794 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7794:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d7796:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d7798:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d779a:	b113      	cbz	r3, d77a2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d779c:	2203      	movs	r2, #3
   d779e:	4601      	mov	r1, r0
   d77a0:	4798      	blx	r3
    }
   d77a2:	4620      	mov	r0, r4
   d77a4:	bd10      	pop	{r4, pc}

000d77a6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d77a6:	b510      	push	{r4, lr}
   d77a8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d77aa:	f7ff fff3 	bl	d7794 <_ZNSt14_Function_baseD1Ev>
   d77ae:	4620      	mov	r0, r4
   d77b0:	bd10      	pop	{r4, pc}
	...

000d77b4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d77b4:	4803      	ldr	r0, [pc, #12]	; (d77c4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d77b6:	4a04      	ldr	r2, [pc, #16]	; (d77c8 <_GLOBAL__sub_I_RGB+0x14>)
   d77b8:	4904      	ldr	r1, [pc, #16]	; (d77cc <_GLOBAL__sub_I_RGB+0x18>)
   d77ba:	2300      	movs	r3, #0
   d77bc:	6083      	str	r3, [r0, #8]
   d77be:	f000 bd7a 	b.w	d82b6 <__aeabi_atexit>
   d77c2:	bf00      	nop
   d77c4:	2003e414 	.word	0x2003e414
   d77c8:	2003d940 	.word	0x2003d940
   d77cc:	000d77a7 	.word	0x000d77a7

000d77d0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d77d0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d77d2:	4b0c      	ldr	r3, [pc, #48]	; (d7804 <serialEventRun+0x34>)
   d77d4:	b133      	cbz	r3, d77e4 <serialEventRun+0x14>
   d77d6:	f000 f95b 	bl	d7a90 <_Z16_fetch_usbserialv>
   d77da:	6803      	ldr	r3, [r0, #0]
   d77dc:	691b      	ldr	r3, [r3, #16]
   d77de:	4798      	blx	r3
   d77e0:	2800      	cmp	r0, #0
   d77e2:	dc09      	bgt.n	d77f8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d77e4:	4b08      	ldr	r3, [pc, #32]	; (d7808 <serialEventRun+0x38>)
   d77e6:	b163      	cbz	r3, d7802 <serialEventRun+0x32>
   d77e8:	f000 f9da 	bl	d7ba0 <_Z22__fetch_global_Serial1v>
   d77ec:	6803      	ldr	r3, [r0, #0]
   d77ee:	691b      	ldr	r3, [r3, #16]
   d77f0:	4798      	blx	r3
   d77f2:	2800      	cmp	r0, #0
   d77f4:	dc03      	bgt.n	d77fe <serialEventRun+0x2e>
   d77f6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d77f8:	f3af 8000 	nop.w
   d77fc:	e7f2      	b.n	d77e4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d77fe:	f3af 8000 	nop.w
   d7802:	bd08      	pop	{r3, pc}
	...

000d780c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d780c:	b508      	push	{r3, lr}
	serialEventRun();
   d780e:	f7ff ffdf 	bl	d77d0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7812:	f7fd f885 	bl	d4920 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7816:	4b01      	ldr	r3, [pc, #4]	; (d781c <_post_loop+0x10>)
   d7818:	6018      	str	r0, [r3, #0]
   d781a:	bd08      	pop	{r3, pc}
   d781c:	2003e748 	.word	0x2003e748

000d7820 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7820:	4802      	ldr	r0, [pc, #8]	; (d782c <_Z33system_initialize_user_backup_ramv+0xc>)
   d7822:	4a03      	ldr	r2, [pc, #12]	; (d7830 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7824:	4903      	ldr	r1, [pc, #12]	; (d7834 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7826:	1a12      	subs	r2, r2, r0
   d7828:	f000 bec9 	b.w	d85be <memcpy>
   d782c:	2003f400 	.word	0x2003f400
   d7830:	2003f404 	.word	0x2003f404
   d7834:	000d9320 	.word	0x000d9320

000d7838 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7838:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d783a:	2300      	movs	r3, #0
   d783c:	9300      	str	r3, [sp, #0]
   d783e:	461a      	mov	r2, r3
   d7840:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7844:	f7fd f9d6 	bl	d4bf4 <system_ctrl_set_result>
}
   d7848:	b003      	add	sp, #12
   d784a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7850 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7850:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7852:	8843      	ldrh	r3, [r0, #2]
   d7854:	2b0a      	cmp	r3, #10
   d7856:	d008      	beq.n	d786a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7858:	2b50      	cmp	r3, #80	; 0x50
   d785a:	d109      	bne.n	d7870 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d785c:	4b09      	ldr	r3, [pc, #36]	; (d7884 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d785e:	681b      	ldr	r3, [r3, #0]
   d7860:	b13b      	cbz	r3, d7872 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7862:	b003      	add	sp, #12
   d7864:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7868:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d786a:	f7ff ffe5 	bl	d7838 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d786e:	e006      	b.n	d787e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7870:	2300      	movs	r3, #0
   d7872:	9300      	str	r3, [sp, #0]
   d7874:	461a      	mov	r2, r3
   d7876:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d787a:	f7fd f9bb 	bl	d4bf4 <system_ctrl_set_result>
        break;
    }
}
   d787e:	b003      	add	sp, #12
   d7880:	f85d fb04 	ldr.w	pc, [sp], #4
   d7884:	2003e424 	.word	0x2003e424

000d7888 <module_user_init_hook>:

void module_user_init_hook()
{
   d7888:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d788a:	4c10      	ldr	r4, [pc, #64]	; (d78cc <module_user_init_hook+0x44>)
   d788c:	4d10      	ldr	r5, [pc, #64]	; (d78d0 <module_user_init_hook+0x48>)
   d788e:	6823      	ldr	r3, [r4, #0]
   d7890:	42ab      	cmp	r3, r5
   d7892:	4b10      	ldr	r3, [pc, #64]	; (d78d4 <module_user_init_hook+0x4c>)
   d7894:	bf0c      	ite	eq
   d7896:	2201      	moveq	r2, #1
   d7898:	2200      	movne	r2, #0
   d789a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d789c:	d002      	beq.n	d78a4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d789e:	f7ff ffbf 	bl	d7820 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d78a2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d78a4:	f7fd f82c 	bl	d4900 <HAL_RNG_GetRandomNumber>
   d78a8:	4604      	mov	r4, r0
    srand(seed);
   d78aa:	f000 feb7 	bl	d861c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d78ae:	4b0a      	ldr	r3, [pc, #40]	; (d78d8 <module_user_init_hook+0x50>)
   d78b0:	b113      	cbz	r3, d78b8 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d78b2:	4620      	mov	r0, r4
   d78b4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d78b8:	2100      	movs	r1, #0
   d78ba:	4807      	ldr	r0, [pc, #28]	; (d78d8 <module_user_init_hook+0x50>)
   d78bc:	f7fd f9f4 	bl	d4ca8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d78c0:	2100      	movs	r1, #0
   d78c2:	4806      	ldr	r0, [pc, #24]	; (d78dc <module_user_init_hook+0x54>)
}
   d78c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d78c8:	f7fd b98a 	b.w	d4be0 <system_ctrl_set_app_request_handler>
   d78cc:	2003f400 	.word	0x2003f400
   d78d0:	9a271c1e 	.word	0x9a271c1e
   d78d4:	2003e428 	.word	0x2003e428
   d78d8:	00000000 	.word	0x00000000
   d78dc:	000d7851 	.word	0x000d7851

000d78e0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d78e0:	4770      	bx	lr

000d78e2 <_ZN9IPAddressD0Ev>:
   d78e2:	b510      	push	{r4, lr}
   d78e4:	2118      	movs	r1, #24
   d78e6:	4604      	mov	r4, r0
   d78e8:	f000 fcf2 	bl	d82d0 <_ZdlPvj>
   d78ec:	4620      	mov	r0, r4
   d78ee:	bd10      	pop	{r4, pc}

000d78f0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d78f0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d78f2:	7d03      	ldrb	r3, [r0, #20]
   d78f4:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d78f6:	b08d      	sub	sp, #52	; 0x34
   d78f8:	460e      	mov	r6, r1
   d78fa:	f100 0704 	add.w	r7, r0, #4
   d78fe:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7902:	d002      	beq.n	d790a <_ZNK9IPAddress7printToER5Print+0x1a>
   d7904:	f100 0508 	add.w	r5, r0, #8
   d7908:	e018      	b.n	d793c <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d790a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d790c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d790e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7912:	232f      	movs	r3, #47	; 0x2f
   d7914:	462a      	mov	r2, r5
   d7916:	200a      	movs	r0, #10
   d7918:	f7fd f8a2 	bl	d4a60 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d791c:	4628      	mov	r0, r5
   d791e:	f000 fecf 	bl	d86c0 <strlen>
   d7922:	6833      	ldr	r3, [r6, #0]
   d7924:	4602      	mov	r2, r0
   d7926:	68db      	ldr	r3, [r3, #12]
   d7928:	4629      	mov	r1, r5
   d792a:	4630      	mov	r0, r6
   d792c:	4798      	blx	r3
   d792e:	e00f      	b.n	d7950 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d7930:	b124      	cbz	r4, d793c <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d7932:	212e      	movs	r1, #46	; 0x2e
   d7934:	4630      	mov	r0, r6
   d7936:	f7fe feff 	bl	d6738 <_ZN5Print5printEc>
   d793a:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d793c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7940:	220a      	movs	r2, #10
   d7942:	4630      	mov	r0, r6
   d7944:	f7fe ff07 	bl	d6756 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7948:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d794a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d794c:	d1f0      	bne.n	d7930 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d794e:	4620      	mov	r0, r4
    }
    return n;
}
   d7950:	b00d      	add	sp, #52	; 0x34
   d7952:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7954 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d7954:	b510      	push	{r4, lr}
   d7956:	4b05      	ldr	r3, [pc, #20]	; (d796c <_ZN9IPAddressC1Ev+0x18>)
   d7958:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d795a:	2211      	movs	r2, #17
   d795c:	f840 3b04 	str.w	r3, [r0], #4
   d7960:	2100      	movs	r1, #0
   d7962:	f000 fe52 	bl	d860a <memset>
{
    clear();
}
   d7966:	4620      	mov	r0, r4
   d7968:	bd10      	pop	{r4, pc}
   d796a:	bf00      	nop
   d796c:	000d9048 	.word	0x000d9048

000d7970 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d7970:	4603      	mov	r3, r0
   d7972:	4a07      	ldr	r2, [pc, #28]	; (d7990 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7974:	b510      	push	{r4, lr}
   d7976:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d797a:	f101 0210 	add.w	r2, r1, #16
   d797e:	f851 4b04 	ldr.w	r4, [r1], #4
   d7982:	f843 4b04 	str.w	r4, [r3], #4
   d7986:	4291      	cmp	r1, r2
   d7988:	d1f9      	bne.n	d797e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d798a:	780a      	ldrb	r2, [r1, #0]
   d798c:	701a      	strb	r2, [r3, #0]
}
   d798e:	bd10      	pop	{r4, pc}
   d7990:	000d9048 	.word	0x000d9048

000d7994 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7994:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7996:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d799a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d799e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d79a2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d79a6:	2304      	movs	r3, #4
   d79a8:	6041      	str	r1, [r0, #4]
   d79aa:	7503      	strb	r3, [r0, #20]
   d79ac:	bd10      	pop	{r4, pc}

000d79ae <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d79ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d79b0:	780d      	ldrb	r5, [r1, #0]
   d79b2:	788b      	ldrb	r3, [r1, #2]
   d79b4:	784a      	ldrb	r2, [r1, #1]
   d79b6:	78c9      	ldrb	r1, [r1, #3]
   d79b8:	9100      	str	r1, [sp, #0]
   d79ba:	4629      	mov	r1, r5
   d79bc:	f7ff ffea 	bl	d7994 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d79c0:	b003      	add	sp, #12
   d79c2:	bd30      	pop	{r4, r5, pc}

000d79c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d79c4:	7441      	strb	r1, [r0, #17]
   d79c6:	4770      	bx	lr

000d79c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d79c8:	4770      	bx	lr

000d79ca <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d79ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d79cc:	2100      	movs	r1, #0
   d79ce:	7c00      	ldrb	r0, [r0, #16]
   d79d0:	f7fd f8be 	bl	d4b50 <HAL_USB_USART_Receive_Data>
}
   d79d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d79d8:	bf28      	it	cs
   d79da:	f04f 30ff 	movcs.w	r0, #4294967295
   d79de:	bd08      	pop	{r3, pc}

000d79e0 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d79e0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d79e2:	2101      	movs	r1, #1
   d79e4:	7c00      	ldrb	r0, [r0, #16]
   d79e6:	f7fd f8b3 	bl	d4b50 <HAL_USB_USART_Receive_Data>
}
   d79ea:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d79ee:	bf28      	it	cs
   d79f0:	f04f 30ff 	movcs.w	r0, #4294967295
   d79f4:	bd08      	pop	{r3, pc}

000d79f6 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d79f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d79f8:	7c00      	ldrb	r0, [r0, #16]
   d79fa:	f7fd f8a1 	bl	d4b40 <HAL_USB_USART_Available_Data_For_Write>
}
   d79fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a02:	bd08      	pop	{r3, pc}

000d7a04 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7a04:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7a06:	7c00      	ldrb	r0, [r0, #16]
   d7a08:	f7fd f892 	bl	d4b30 <HAL_USB_USART_Available_Data>
}
   d7a0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a10:	bd08      	pop	{r3, pc}

000d7a12 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7a12:	7c00      	ldrb	r0, [r0, #16]
   d7a14:	f7fd b8ac 	b.w	d4b70 <HAL_USB_USART_Flush_Data>

000d7a18 <_ZN9USBSerialD0Ev>:
   d7a18:	b510      	push	{r4, lr}
   d7a1a:	2114      	movs	r1, #20
   d7a1c:	4604      	mov	r4, r0
   d7a1e:	f000 fc57 	bl	d82d0 <_ZdlPvj>
   d7a22:	4620      	mov	r0, r4
   d7a24:	bd10      	pop	{r4, pc}

000d7a26 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a26:	b538      	push	{r3, r4, r5, lr}
   d7a28:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a2a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7a2c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7a2e:	f7fd f887 	bl	d4b40 <HAL_USB_USART_Available_Data_For_Write>
   d7a32:	2800      	cmp	r0, #0
   d7a34:	dc01      	bgt.n	d7a3a <_ZN9USBSerial5writeEh+0x14>
   d7a36:	7c60      	ldrb	r0, [r4, #17]
   d7a38:	b128      	cbz	r0, d7a46 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7a3a:	4629      	mov	r1, r5
   d7a3c:	7c20      	ldrb	r0, [r4, #16]
   d7a3e:	f7fd f88f 	bl	d4b60 <HAL_USB_USART_Send_Data>
   d7a42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7a46:	bd38      	pop	{r3, r4, r5, pc}

000d7a48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a48:	b510      	push	{r4, lr}
   d7a4a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7a4c:	2300      	movs	r3, #0
   d7a4e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7a50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a54:	60a3      	str	r3, [r4, #8]
   d7a56:	4b05      	ldr	r3, [pc, #20]	; (d7a6c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7a58:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7a5a:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a5c:	4608      	mov	r0, r1
{
  _serial = serial;
   d7a5e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7a60:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7a62:	4611      	mov	r1, r2
   d7a64:	f7fd f84c 	bl	d4b00 <HAL_USB_USART_Init>
}
   d7a68:	4620      	mov	r0, r4
   d7a6a:	bd10      	pop	{r4, pc}
   d7a6c:	000d905c 	.word	0x000d905c

000d7a70 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7a70:	2200      	movs	r2, #0
   d7a72:	7c00      	ldrb	r0, [r0, #16]
   d7a74:	f7fd b84c 	b.w	d4b10 <HAL_USB_USART_Begin>

000d7a78 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7a78:	7c00      	ldrb	r0, [r0, #16]
   d7a7a:	f7fd b851 	b.w	d4b20 <HAL_USB_USART_End>

000d7a7e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a7e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7a80:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a82:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7a84:	2100      	movs	r1, #0
   d7a86:	f000 fdc0 	bl	d860a <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7a8a:	4620      	mov	r0, r4
   d7a8c:	bd10      	pop	{r4, pc}
	...

000d7a90 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7a90:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a92:	4d0e      	ldr	r5, [pc, #56]	; (d7acc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7a94:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7a96:	a801      	add	r0, sp, #4
   d7a98:	f7ff fff1 	bl	d7a7e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a9c:	6829      	ldr	r1, [r5, #0]
   d7a9e:	f011 0401 	ands.w	r4, r1, #1
   d7aa2:	d110      	bne.n	d7ac6 <_Z16_fetch_usbserialv+0x36>
   d7aa4:	4628      	mov	r0, r5
   d7aa6:	f7fc fb07 	bl	d40b8 <__cxa_guard_acquire>
   d7aaa:	b160      	cbz	r0, d7ac6 <_Z16_fetch_usbserialv+0x36>
   d7aac:	aa01      	add	r2, sp, #4
   d7aae:	4621      	mov	r1, r4
   d7ab0:	4807      	ldr	r0, [pc, #28]	; (d7ad0 <_Z16_fetch_usbserialv+0x40>)
   d7ab2:	f7ff ffc9 	bl	d7a48 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7ab6:	4628      	mov	r0, r5
   d7ab8:	f7fc fb03 	bl	d40c2 <__cxa_guard_release>
   d7abc:	4a05      	ldr	r2, [pc, #20]	; (d7ad4 <_Z16_fetch_usbserialv+0x44>)
   d7abe:	4906      	ldr	r1, [pc, #24]	; (d7ad8 <_Z16_fetch_usbserialv+0x48>)
   d7ac0:	4803      	ldr	r0, [pc, #12]	; (d7ad0 <_Z16_fetch_usbserialv+0x40>)
   d7ac2:	f000 fbf8 	bl	d82b6 <__aeabi_atexit>
	return _usbserial;
}
   d7ac6:	4802      	ldr	r0, [pc, #8]	; (d7ad0 <_Z16_fetch_usbserialv+0x40>)
   d7ac8:	b007      	add	sp, #28
   d7aca:	bd30      	pop	{r4, r5, pc}
   d7acc:	2003e42c 	.word	0x2003e42c
   d7ad0:	2003e430 	.word	0x2003e430
   d7ad4:	2003d940 	.word	0x2003d940
   d7ad8:	000d79c9 	.word	0x000d79c9

000d7adc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7adc:	4770      	bx	lr

000d7ade <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7ade:	7441      	strb	r1, [r0, #17]
   d7ae0:	4770      	bx	lr

000d7ae2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7ae2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7ae4:	7c00      	ldrb	r0, [r0, #16]
   d7ae6:	f7fc fffb 	bl	d4ae0 <HAL_USART_Available_Data_For_Write>
}
   d7aea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7aee:	bd08      	pop	{r3, pc}

000d7af0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7af0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7af2:	7c00      	ldrb	r0, [r0, #16]
   d7af4:	f7fc ffd4 	bl	d4aa0 <HAL_USART_Available_Data>
}
   d7af8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7afc:	bd08      	pop	{r3, pc}

000d7afe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7afe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7b00:	7c00      	ldrb	r0, [r0, #16]
   d7b02:	f7fc ffdd 	bl	d4ac0 <HAL_USART_Peek_Data>
}
   d7b06:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b0a:	bf28      	it	cs
   d7b0c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b10:	bd08      	pop	{r3, pc}

000d7b12 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7b12:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7b14:	7c00      	ldrb	r0, [r0, #16]
   d7b16:	f7fc ffcb 	bl	d4ab0 <HAL_USART_Read_Data>
}
   d7b1a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b1e:	bf28      	it	cs
   d7b20:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b24:	bd08      	pop	{r3, pc}

000d7b26 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7b26:	7c00      	ldrb	r0, [r0, #16]
   d7b28:	f7fc bfd2 	b.w	d4ad0 <HAL_USART_Flush_Data>

000d7b2c <_ZN11USARTSerialD0Ev>:
   d7b2c:	b510      	push	{r4, lr}
   d7b2e:	2114      	movs	r1, #20
   d7b30:	4604      	mov	r4, r0
   d7b32:	f000 fbcd 	bl	d82d0 <_ZdlPvj>
   d7b36:	4620      	mov	r0, r4
   d7b38:	bd10      	pop	{r4, pc}

000d7b3a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7b3a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b3c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7b3e:	4604      	mov	r4, r0
   d7b40:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7b42:	b925      	cbnz	r5, d7b4e <_ZN11USARTSerial5writeEh+0x14>
   d7b44:	7c00      	ldrb	r0, [r0, #16]
   d7b46:	f7fc ffcb 	bl	d4ae0 <HAL_USART_Available_Data_For_Write>
   d7b4a:	2800      	cmp	r0, #0
   d7b4c:	dd05      	ble.n	d7b5a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b4e:	4631      	mov	r1, r6
   d7b50:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7b52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7b56:	f7fc bf9b 	b.w	d4a90 <HAL_USART_Write_Data>
  }
  return 0;
}
   d7b5a:	4628      	mov	r0, r5
   d7b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7b60:	b510      	push	{r4, lr}
   d7b62:	4604      	mov	r4, r0
   d7b64:	4608      	mov	r0, r1
   d7b66:	4611      	mov	r1, r2
   d7b68:	2200      	movs	r2, #0
   d7b6a:	6062      	str	r2, [r4, #4]
   d7b6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7b70:	60a2      	str	r2, [r4, #8]
   d7b72:	4a05      	ldr	r2, [pc, #20]	; (d7b88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7b74:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7b76:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7b78:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7b7a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7b7c:	461a      	mov	r2, r3
   d7b7e:	f7fc ff77 	bl	d4a70 <HAL_USART_Init>
}
   d7b82:	4620      	mov	r0, r4
   d7b84:	bd10      	pop	{r4, pc}
   d7b86:	bf00      	nop
   d7b88:	000d908c 	.word	0x000d908c

000d7b8c <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7b8c:	2300      	movs	r3, #0
   d7b8e:	7c00      	ldrb	r0, [r0, #16]
   d7b90:	f7fc bfae 	b.w	d4af0 <HAL_USART_BeginConfig>

000d7b94 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7b94:	2200      	movs	r2, #0
   d7b96:	f7ff bff9 	b.w	d7b8c <_ZN11USARTSerial5beginEmm>

000d7b9a <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7b9a:	7c00      	ldrb	r0, [r0, #16]
   d7b9c:	f7fc bf70 	b.w	d4a80 <HAL_USART_End>

000d7ba0 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7ba0:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7ba2:	4d0c      	ldr	r5, [pc, #48]	; (d7bd4 <_Z22__fetch_global_Serial1v+0x34>)
   d7ba4:	6829      	ldr	r1, [r5, #0]
   d7ba6:	f011 0401 	ands.w	r4, r1, #1
   d7baa:	d111      	bne.n	d7bd0 <_Z22__fetch_global_Serial1v+0x30>
   d7bac:	4628      	mov	r0, r5
   d7bae:	f7fc fa83 	bl	d40b8 <__cxa_guard_acquire>
   d7bb2:	b168      	cbz	r0, d7bd0 <_Z22__fetch_global_Serial1v+0x30>
   d7bb4:	4a08      	ldr	r2, [pc, #32]	; (d7bd8 <_Z22__fetch_global_Serial1v+0x38>)
   d7bb6:	4b09      	ldr	r3, [pc, #36]	; (d7bdc <_Z22__fetch_global_Serial1v+0x3c>)
   d7bb8:	4809      	ldr	r0, [pc, #36]	; (d7be0 <_Z22__fetch_global_Serial1v+0x40>)
   d7bba:	4621      	mov	r1, r4
   d7bbc:	f7ff ffd0 	bl	d7b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7bc0:	4628      	mov	r0, r5
   d7bc2:	f7fc fa7e 	bl	d40c2 <__cxa_guard_release>
   d7bc6:	4a07      	ldr	r2, [pc, #28]	; (d7be4 <_Z22__fetch_global_Serial1v+0x44>)
   d7bc8:	4907      	ldr	r1, [pc, #28]	; (d7be8 <_Z22__fetch_global_Serial1v+0x48>)
   d7bca:	4805      	ldr	r0, [pc, #20]	; (d7be0 <_Z22__fetch_global_Serial1v+0x40>)
   d7bcc:	f000 fb73 	bl	d82b6 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7bd0:	4803      	ldr	r0, [pc, #12]	; (d7be0 <_Z22__fetch_global_Serial1v+0x40>)
   d7bd2:	bd38      	pop	{r3, r4, r5, pc}
   d7bd4:	2003e4dc 	.word	0x2003e4dc
   d7bd8:	2003e4e0 	.word	0x2003e4e0
   d7bdc:	2003e458 	.word	0x2003e458
   d7be0:	2003e444 	.word	0x2003e444
   d7be4:	2003d940 	.word	0x2003d940
   d7be8:	000d7add 	.word	0x000d7add

000d7bec <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7bec:	2200      	movs	r2, #0
   d7bee:	4611      	mov	r1, r2
   d7bf0:	6840      	ldr	r0, [r0, #4]
   d7bf2:	f7fd b841 	b.w	d4c78 <network_listening>

000d7bf6 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7bf6:	2200      	movs	r2, #0
   d7bf8:	4611      	mov	r1, r2
   d7bfa:	6840      	ldr	r0, [r0, #4]
   d7bfc:	f7fd b84c 	b.w	d4c98 <network_get_listen_timeout>

000d7c00 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7c00:	2200      	movs	r2, #0
   d7c02:	6840      	ldr	r0, [r0, #4]
   d7c04:	f7fd b840 	b.w	d4c88 <network_set_listen_timeout>

000d7c08 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c08:	2200      	movs	r2, #0
   d7c0a:	f081 0101 	eor.w	r1, r1, #1
   d7c0e:	6840      	ldr	r0, [r0, #4]
   d7c10:	f7fd b82a 	b.w	d4c68 <network_listen>

000d7c14 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7c14:	2300      	movs	r3, #0
   d7c16:	461a      	mov	r2, r3
   d7c18:	2101      	movs	r1, #1
   d7c1a:	6840      	ldr	r0, [r0, #4]
   d7c1c:	f7fd b81c 	b.w	d4c58 <network_off>

000d7c20 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7c20:	2300      	movs	r3, #0
   d7c22:	461a      	mov	r2, r3
   d7c24:	4619      	mov	r1, r3
   d7c26:	6840      	ldr	r0, [r0, #4]
   d7c28:	f7fd b80e 	b.w	d4c48 <network_on>

000d7c2c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7c2c:	2200      	movs	r2, #0
   d7c2e:	4611      	mov	r1, r2
   d7c30:	6840      	ldr	r0, [r0, #4]
   d7c32:	f7fd b801 	b.w	d4c38 <network_ready>

000d7c36 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7c36:	2200      	movs	r2, #0
   d7c38:	4611      	mov	r1, r2
   d7c3a:	6840      	ldr	r0, [r0, #4]
   d7c3c:	f7fc bfec 	b.w	d4c18 <network_connecting>

000d7c40 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7c40:	2200      	movs	r2, #0
   d7c42:	2102      	movs	r1, #2
   d7c44:	6840      	ldr	r0, [r0, #4]
   d7c46:	f7fc bfef 	b.w	d4c28 <network_disconnect>

000d7c4a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7c4a:	2300      	movs	r3, #0
   d7c4c:	461a      	mov	r2, r3
   d7c4e:	6840      	ldr	r0, [r0, #4]
   d7c50:	f7fc bfda 	b.w	d4c08 <network_connect>

000d7c54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7c54:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7c56:	4605      	mov	r5, r0
   d7c58:	b188      	cbz	r0, d7c7e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7c5a:	6804      	ldr	r4, [r0, #0]
   d7c5c:	b14c      	cbz	r4, d7c72 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d7c5e:	68a3      	ldr	r3, [r4, #8]
   d7c60:	b11b      	cbz	r3, d7c6a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7c62:	2203      	movs	r2, #3
   d7c64:	4621      	mov	r1, r4
   d7c66:	4620      	mov	r0, r4
   d7c68:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7c6a:	2110      	movs	r1, #16
   d7c6c:	4620      	mov	r0, r4
   d7c6e:	f000 fb2f 	bl	d82d0 <_ZdlPvj>
   d7c72:	4628      	mov	r0, r5
   d7c74:	2114      	movs	r1, #20
      }
   d7c76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7c7a:	f000 bb29 	b.w	d82d0 <_ZdlPvj>
   d7c7e:	bd38      	pop	{r3, r4, r5, pc}

000d7c80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7c80:	b110      	cbz	r0, d7c88 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7c82:	6803      	ldr	r3, [r0, #0]
   d7c84:	685b      	ldr	r3, [r3, #4]
   d7c86:	4718      	bx	r3
   d7c88:	4770      	bx	lr

000d7c8a <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7c8a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7c8c:	6803      	ldr	r3, [r0, #0]
   d7c8e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7c90:	b1bb      	cbz	r3, d7cc2 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7c92:	6858      	ldr	r0, [r3, #4]
   d7c94:	f7fc feac 	bl	d49f0 <os_thread_is_current>
   d7c98:	b978      	cbnz	r0, d7cba <_ZN6ThreadD1Ev+0x30>
   d7c9a:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7c9c:	7c5a      	ldrb	r2, [r3, #17]
   d7c9e:	b912      	cbnz	r2, d7ca6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7ca0:	6858      	ldr	r0, [r3, #4]
   d7ca2:	f7fc fead 	bl	d4a00 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7ca6:	6823      	ldr	r3, [r4, #0]
   d7ca8:	6858      	ldr	r0, [r3, #4]
   d7caa:	f7fc feb1 	bl	d4a10 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7cae:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7cb0:	2300      	movs	r3, #0
   d7cb2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7cb4:	b128      	cbz	r0, d7cc2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7cb6:	f7ff ffcd 	bl	d7c54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cba:	6820      	ldr	r0, [r4, #0]
   d7cbc:	b108      	cbz	r0, d7cc2 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7cbe:	f7ff ffc9 	bl	d7c54 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7cc2:	4620      	mov	r0, r4
   d7cc4:	bd10      	pop	{r4, pc}

000d7cc6 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7cc6:	b538      	push	{r3, r4, r5, lr}
   d7cc8:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cca:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7cce:	b108      	cbz	r0, d7cd4 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7cd0:	f7fc f9e5 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7cd4:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7cd8:	b108      	cbz	r0, d7cde <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7cda:	f7fc fea9 	bl	d4a30 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cde:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7ce2:	b135      	cbz	r5, d7cf2 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7ce4:	4628      	mov	r0, r5
   d7ce6:	f7ff ffd0 	bl	d7c8a <_ZN6ThreadD1Ev>
   d7cea:	2104      	movs	r1, #4
   d7cec:	4628      	mov	r0, r5
   d7cee:	f000 faef 	bl	d82d0 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7cf2:	6820      	ldr	r0, [r4, #0]
   d7cf4:	b108      	cbz	r0, d7cfa <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7cf6:	f7ff ffc3 	bl	d7c80 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7cfa:	4620      	mov	r0, r4
   d7cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7d00 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7d00:	b510      	push	{r4, lr}
   d7d02:	4b04      	ldr	r3, [pc, #16]	; (d7d14 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7d04:	4604      	mov	r4, r0
   d7d06:	f840 3b08 	str.w	r3, [r0], #8
   d7d0a:	f7ff ffdc 	bl	d7cc6 <_ZN5spark11MeshPublishD1Ev>
   d7d0e:	4620      	mov	r0, r4
   d7d10:	bd10      	pop	{r4, pc}
   d7d12:	bf00      	nop
   d7d14:	000d90bc 	.word	0x000d90bc

000d7d18 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7d18:	b538      	push	{r3, r4, r5, lr}
   d7d1a:	4c0e      	ldr	r4, [pc, #56]	; (d7d54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7d1c:	4b0e      	ldr	r3, [pc, #56]	; (d7d58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7d1e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7d20:	2500      	movs	r5, #0
   d7d22:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7d24:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7d28:	6063      	str	r3, [r4, #4]
   d7d2a:	60a5      	str	r5, [r4, #8]
   d7d2c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7d30:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7d34:	f7fc fe74 	bl	d4a20 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7d38:	4b08      	ldr	r3, [pc, #32]	; (d7d5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7d3a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7d3e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7d42:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7d44:	4620      	mov	r0, r4
   d7d46:	4a06      	ldr	r2, [pc, #24]	; (d7d60 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7d48:	4906      	ldr	r1, [pc, #24]	; (d7d64 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7d4e:	f000 bab2 	b.w	d82b6 <__aeabi_atexit>
   d7d52:	bf00      	nop
   d7d54:	2003e564 	.word	0x2003e564
   d7d58:	000d9124 	.word	0x000d9124
   d7d5c:	000d90bc 	.word	0x000d90bc
   d7d60:	2003d940 	.word	0x2003d940
   d7d64:	000d7d01 	.word	0x000d7d01

000d7d68 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7d68:	2200      	movs	r2, #0
   d7d6a:	4611      	mov	r1, r2
   d7d6c:	6840      	ldr	r0, [r0, #4]
   d7d6e:	f7fc bf63 	b.w	d4c38 <network_ready>

000d7d72 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d72:	2200      	movs	r2, #0
   d7d74:	4611      	mov	r1, r2
   d7d76:	6840      	ldr	r0, [r0, #4]
   d7d78:	f7fc bf7e 	b.w	d4c78 <network_listening>

000d7d7c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7d7c:	2200      	movs	r2, #0
   d7d7e:	4611      	mov	r1, r2
   d7d80:	6840      	ldr	r0, [r0, #4]
   d7d82:	f7fc bf89 	b.w	d4c98 <network_get_listen_timeout>

000d7d86 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7d86:	2200      	movs	r2, #0
   d7d88:	6840      	ldr	r0, [r0, #4]
   d7d8a:	f7fc bf7d 	b.w	d4c88 <network_set_listen_timeout>

000d7d8e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d8e:	2200      	movs	r2, #0
   d7d90:	f081 0101 	eor.w	r1, r1, #1
   d7d94:	6840      	ldr	r0, [r0, #4]
   d7d96:	f7fc bf67 	b.w	d4c68 <network_listen>

000d7d9a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7d9a:	2300      	movs	r3, #0
   d7d9c:	461a      	mov	r2, r3
   d7d9e:	4619      	mov	r1, r3
   d7da0:	6840      	ldr	r0, [r0, #4]
   d7da2:	f7fc bf59 	b.w	d4c58 <network_off>

000d7da6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7da6:	2300      	movs	r3, #0
   d7da8:	461a      	mov	r2, r3
   d7daa:	4619      	mov	r1, r3
   d7dac:	6840      	ldr	r0, [r0, #4]
   d7dae:	f7fc bf4b 	b.w	d4c48 <network_on>

000d7db2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7db2:	2200      	movs	r2, #0
   d7db4:	4611      	mov	r1, r2
   d7db6:	6840      	ldr	r0, [r0, #4]
   d7db8:	f7fc bf2e 	b.w	d4c18 <network_connecting>

000d7dbc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7dbc:	2200      	movs	r2, #0
   d7dbe:	2102      	movs	r1, #2
   d7dc0:	6840      	ldr	r0, [r0, #4]
   d7dc2:	f7fc bf31 	b.w	d4c28 <network_disconnect>

000d7dc6 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7dc6:	2300      	movs	r3, #0
   d7dc8:	461a      	mov	r2, r3
   d7dca:	6840      	ldr	r0, [r0, #4]
   d7dcc:	f7fc bf1c 	b.w	d4c08 <network_connect>

000d7dd0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7dd0:	4b02      	ldr	r3, [pc, #8]	; (d7ddc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7dd2:	2204      	movs	r2, #4
   d7dd4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7dd6:	4a02      	ldr	r2, [pc, #8]	; (d7de0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7dd8:	601a      	str	r2, [r3, #0]
   d7dda:	4770      	bx	lr
   d7ddc:	2003e738 	.word	0x2003e738
   d7de0:	000d90f0 	.word	0x000d90f0

000d7de4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7de4:	2300      	movs	r3, #0
   d7de6:	461a      	mov	r2, r3
   d7de8:	6840      	ldr	r0, [r0, #4]
   d7dea:	f7fc bf0d 	b.w	d4c08 <network_connect>

000d7dee <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7dee:	2200      	movs	r2, #0
   d7df0:	2102      	movs	r1, #2
   d7df2:	6840      	ldr	r0, [r0, #4]
   d7df4:	f7fc bf18 	b.w	d4c28 <network_disconnect>

000d7df8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7df8:	2200      	movs	r2, #0
   d7dfa:	4611      	mov	r1, r2
   d7dfc:	6840      	ldr	r0, [r0, #4]
   d7dfe:	f7fc bf0b 	b.w	d4c18 <network_connecting>

000d7e02 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7e02:	2200      	movs	r2, #0
   d7e04:	4611      	mov	r1, r2
   d7e06:	6840      	ldr	r0, [r0, #4]
   d7e08:	f7fc bf16 	b.w	d4c38 <network_ready>

000d7e0c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7e0c:	2300      	movs	r3, #0
   d7e0e:	461a      	mov	r2, r3
   d7e10:	4619      	mov	r1, r3
   d7e12:	6840      	ldr	r0, [r0, #4]
   d7e14:	f7fc bf18 	b.w	d4c48 <network_on>

000d7e18 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7e18:	2300      	movs	r3, #0
   d7e1a:	461a      	mov	r2, r3
   d7e1c:	4619      	mov	r1, r3
   d7e1e:	6840      	ldr	r0, [r0, #4]
   d7e20:	f7fc bf1a 	b.w	d4c58 <network_off>

000d7e24 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7e24:	2200      	movs	r2, #0
   d7e26:	f081 0101 	eor.w	r1, r1, #1
   d7e2a:	6840      	ldr	r0, [r0, #4]
   d7e2c:	f7fc bf1c 	b.w	d4c68 <network_listen>

000d7e30 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7e30:	2200      	movs	r2, #0
   d7e32:	6840      	ldr	r0, [r0, #4]
   d7e34:	f7fc bf28 	b.w	d4c88 <network_set_listen_timeout>

000d7e38 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7e38:	2200      	movs	r2, #0
   d7e3a:	4611      	mov	r1, r2
   d7e3c:	6840      	ldr	r0, [r0, #4]
   d7e3e:	f7fc bf2b 	b.w	d4c98 <network_get_listen_timeout>

000d7e42 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7e42:	2200      	movs	r2, #0
   d7e44:	4611      	mov	r1, r2
   d7e46:	6840      	ldr	r0, [r0, #4]
   d7e48:	f7fc bf16 	b.w	d4c78 <network_listening>

000d7e4c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7e50:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7e52:	b095      	sub	sp, #84	; 0x54
   d7e54:	4616      	mov	r6, r2
   d7e56:	460d      	mov	r5, r1
   d7e58:	4607      	mov	r7, r0
    IPAddress addr;
   d7e5a:	f7ff fd7b 	bl	d7954 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7e5e:	4621      	mov	r1, r4
   d7e60:	2220      	movs	r2, #32
   d7e62:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7e64:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7e66:	f000 fbd0 	bl	d860a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7e6a:	2340      	movs	r3, #64	; 0x40
   d7e6c:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7e6e:	4621      	mov	r1, r4
   d7e70:	466b      	mov	r3, sp
   d7e72:	aa0c      	add	r2, sp, #48	; 0x30
   d7e74:	4630      	mov	r0, r6
   d7e76:	f7fc fd33 	bl	d48e0 <netdb_getaddrinfo>
    if (!r) {
   d7e7a:	4604      	mov	r4, r0
   d7e7c:	2800      	cmp	r0, #0
   d7e7e:	d144      	bne.n	d7f0a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e80:	4602      	mov	r2, r0
   d7e82:	2101      	movs	r1, #1
   d7e84:	6868      	ldr	r0, [r5, #4]
   d7e86:	f7fc fed7 	bl	d4c38 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e8a:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7e8c:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e8e:	4622      	mov	r2, r4
   d7e90:	6868      	ldr	r0, [r5, #4]
   d7e92:	f7fc fed1 	bl	d4c38 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e96:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7e98:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7e9a:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7e9c:	2e00      	cmp	r6, #0
   d7e9e:	d034      	beq.n	d7f0a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7ea0:	2900      	cmp	r1, #0
   d7ea2:	d132      	bne.n	d7f0a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7ea4:	6873      	ldr	r3, [r6, #4]
   d7ea6:	2b02      	cmp	r3, #2
   d7ea8:	d002      	beq.n	d7eb0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7eaa:	2b0a      	cmp	r3, #10
   d7eac:	d009      	beq.n	d7ec2 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7eae:	e02a      	b.n	d7f06 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7eb0:	f1b8 0f00 	cmp.w	r8, #0
   d7eb4:	d027      	beq.n	d7f06 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7eb6:	6971      	ldr	r1, [r6, #20]
   d7eb8:	4638      	mov	r0, r7
   d7eba:	3104      	adds	r1, #4
   d7ebc:	f7ff fd77 	bl	d79ae <_ZN9IPAddressaSEPKh>
   d7ec0:	e020      	b.n	d7f04 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7ec2:	f1b9 0f00 	cmp.w	r9, #0
   d7ec6:	d01e      	beq.n	d7f06 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7ec8:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7eca:	2211      	movs	r2, #17
   d7ecc:	a801      	add	r0, sp, #4
   d7ece:	f000 fb9c 	bl	d860a <memset>
                    a.v = 6;
   d7ed2:	2306      	movs	r3, #6
   d7ed4:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7ed8:	ad01      	add	r5, sp, #4
   d7eda:	f104 0308 	add.w	r3, r4, #8
   d7ede:	3418      	adds	r4, #24
   d7ee0:	6818      	ldr	r0, [r3, #0]
   d7ee2:	6859      	ldr	r1, [r3, #4]
   d7ee4:	462a      	mov	r2, r5
   d7ee6:	c203      	stmia	r2!, {r0, r1}
   d7ee8:	3308      	adds	r3, #8
   d7eea:	42a3      	cmp	r3, r4
   d7eec:	4615      	mov	r5, r2
   d7eee:	d1f7      	bne.n	d7ee0 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d7ef0:	a901      	add	r1, sp, #4
   d7ef2:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7ef4:	ad07      	add	r5, sp, #28
   d7ef6:	f7ff fd3b 	bl	d7970 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7efa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7efc:	1d3c      	adds	r4, r7, #4
   d7efe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f00:	682b      	ldr	r3, [r5, #0]
   d7f02:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7f04:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7f06:	69f6      	ldr	r6, [r6, #28]
   d7f08:	e7c8      	b.n	d7e9c <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7f0a:	9800      	ldr	r0, [sp, #0]
   d7f0c:	f7fc fce0 	bl	d48d0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7f10:	4638      	mov	r0, r7
   d7f12:	b015      	add	sp, #84	; 0x54
   d7f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d7f18 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7f18:	4b02      	ldr	r3, [pc, #8]	; (d7f24 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7f1a:	4a03      	ldr	r2, [pc, #12]	; (d7f28 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7f1c:	601a      	str	r2, [r3, #0]
   d7f1e:	2200      	movs	r2, #0
   d7f20:	605a      	str	r2, [r3, #4]
   d7f22:	4770      	bx	lr
   d7f24:	2003e740 	.word	0x2003e740
   d7f28:	000d9124 	.word	0x000d9124

000d7f2c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d7f2c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d7f30:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7f32:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d7f36:	2901      	cmp	r1, #1
   d7f38:	4610      	mov	r0, r2
   d7f3a:	d104      	bne.n	d7f46 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d7f3c:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d7f40:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d7f44:	e004      	b.n	d7f50 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d7f46:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7f48:	bf04      	itt	eq
   d7f4a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d7f4e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d7f50:	3b01      	subs	r3, #1
   d7f52:	f102 0210 	add.w	r2, r2, #16
   d7f56:	d1ec      	bne.n	d7f32 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d7f58:	4770      	bx	lr

000d7f5a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d7f5a:	b40e      	push	{r1, r2, r3}
   d7f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7f60:	b087      	sub	sp, #28
   d7f62:	af00      	add	r7, sp, #0
   d7f64:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d7f68:	4605      	mov	r5, r0
   d7f6a:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d7f6e:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7f70:	4623      	mov	r3, r4
   d7f72:	4632      	mov	r2, r6
   d7f74:	2110      	movs	r1, #16
   d7f76:	f107 0008 	add.w	r0, r7, #8
   d7f7a:	f7fc feb5 	bl	d4ce8 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d7f7e:	280f      	cmp	r0, #15
   d7f80:	d916      	bls.n	d7fb0 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d7f82:	f100 0308 	add.w	r3, r0, #8
   d7f86:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d7f8a:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d7f8c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7f90:	4632      	mov	r2, r6
   d7f92:	1c41      	adds	r1, r0, #1
   d7f94:	4623      	mov	r3, r4
   d7f96:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d7f98:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7f9a:	f7fc fea5 	bl	d4ce8 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d7f9e:	1e02      	subs	r2, r0, #0
   d7fa0:	dd04      	ble.n	d7fac <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d7fa2:	682b      	ldr	r3, [r5, #0]
   d7fa4:	4669      	mov	r1, sp
   d7fa6:	689b      	ldr	r3, [r3, #8]
   d7fa8:	4628      	mov	r0, r5
   d7faa:	4798      	blx	r3
   d7fac:	46c5      	mov	sp, r8
   d7fae:	e007      	b.n	d7fc0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d7fb0:	b130      	cbz	r0, d7fc0 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d7fb2:	682b      	ldr	r3, [r5, #0]
   d7fb4:	4602      	mov	r2, r0
   d7fb6:	689b      	ldr	r3, [r3, #8]
   d7fb8:	f107 0108 	add.w	r1, r7, #8
   d7fbc:	4628      	mov	r0, r5
   d7fbe:	4798      	blx	r3
    }
}
   d7fc0:	371c      	adds	r7, #28
   d7fc2:	46bd      	mov	sp, r7
   d7fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7fc8:	b003      	add	sp, #12
   d7fca:	4770      	bx	lr

000d7fcc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d7fcc:	b513      	push	{r0, r1, r4, lr}
   d7fce:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d7fd0:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d7fd2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d7fd6:	6894      	ldr	r4, [r2, #8]
   d7fd8:	4619      	mov	r1, r3
   d7fda:	2201      	movs	r2, #1
   d7fdc:	47a0      	blx	r4
}
   d7fde:	b002      	add	sp, #8
   d7fe0:	bd10      	pop	{r4, pc}

000d7fe2 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d7fe2:	6883      	ldr	r3, [r0, #8]
   d7fe4:	b1fb      	cbz	r3, d8026 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d7fe6:	781a      	ldrb	r2, [r3, #0]
   d7fe8:	2a03      	cmp	r2, #3
   d7fea:	d81a      	bhi.n	d8022 <_ZNK5spark9JSONValue4typeEv+0x40>
   d7fec:	e8df f002 	tbb	[pc, r2]
   d7ff0:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d7ff4:	2005      	movs	r0, #5
   d7ff6:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d7ff8:	6802      	ldr	r2, [r0, #0]
   d7ffa:	685b      	ldr	r3, [r3, #4]
   d7ffc:	6852      	ldr	r2, [r2, #4]
   d7ffe:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8000:	282d      	cmp	r0, #45	; 0x2d
   d8002:	d014      	beq.n	d802e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8004:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8008:	2b09      	cmp	r3, #9
   d800a:	d910      	bls.n	d802e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d800c:	2874      	cmp	r0, #116	; 0x74
   d800e:	d010      	beq.n	d8032 <_ZNK5spark9JSONValue4typeEv+0x50>
   d8010:	2866      	cmp	r0, #102	; 0x66
   d8012:	d00e      	beq.n	d8032 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8014:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8018:	4258      	negs	r0, r3
   d801a:	4158      	adcs	r0, r3
   d801c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d801e:	2006      	movs	r0, #6
   d8020:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8022:	2000      	movs	r0, #0
   d8024:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8026:	4618      	mov	r0, r3
   d8028:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d802a:	2004      	movs	r0, #4
   d802c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d802e:	2003      	movs	r0, #3
   d8030:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d8032:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d8034:	4770      	bx	lr

000d8036 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d8036:	b510      	push	{r4, lr}
   d8038:	4604      	mov	r4, r0
    switch (type()) {
   d803a:	f7ff ffd2 	bl	d7fe2 <_ZNK5spark9JSONValue4typeEv>
   d803e:	2802      	cmp	r0, #2
   d8040:	d00d      	beq.n	d805e <_ZNK5spark9JSONValue5toIntEv+0x28>
   d8042:	d316      	bcc.n	d8072 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d8044:	2804      	cmp	r0, #4
   d8046:	d814      	bhi.n	d8072 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d8048:	6822      	ldr	r2, [r4, #0]
   d804a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d804c:	6850      	ldr	r0, [r2, #4]
   d804e:	685b      	ldr	r3, [r3, #4]
   d8050:	220a      	movs	r2, #10
   d8052:	2100      	movs	r1, #0
   d8054:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d8056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d805a:	f000 bbf3 	b.w	d8844 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d805e:	6822      	ldr	r2, [r4, #0]
   d8060:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d8062:	6852      	ldr	r2, [r2, #4]
   d8064:	685b      	ldr	r3, [r3, #4]
   d8066:	5cd0      	ldrb	r0, [r2, r3]
   d8068:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d806c:	4258      	negs	r0, r3
   d806e:	4158      	adcs	r0, r3
   d8070:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d8072:	2000      	movs	r0, #0
    }
}
   d8074:	bd10      	pop	{r4, pc}

000d8076 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d8076:	b510      	push	{r4, lr}
    if (!n_) {
   d8078:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d807a:	4604      	mov	r4, r0
    if (!n_) {
   d807c:	b15b      	cbz	r3, d8096 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d807e:	6880      	ldr	r0, [r0, #8]
   d8080:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d8082:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d8084:	3010      	adds	r0, #16
   d8086:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d8088:	6120      	str	r0, [r4, #16]
    --n_;
   d808a:	6163      	str	r3, [r4, #20]
    if (n_) {
   d808c:	b12b      	cbz	r3, d809a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d808e:	f7ff ff4d 	bl	d7f2c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d8092:	60a0      	str	r0, [r4, #8]
   d8094:	e001      	b.n	d809a <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d8096:	4618      	mov	r0, r3
   d8098:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d809a:	2001      	movs	r0, #1
}
   d809c:	bd10      	pop	{r4, pc}

000d809e <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d809e:	b510      	push	{r4, lr}
    write('}');
   d80a0:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d80a2:	4604      	mov	r4, r0
    write('}');
   d80a4:	f7ff ff92 	bl	d7fcc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d80a8:	2301      	movs	r3, #1
   d80aa:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d80ac:	4620      	mov	r0, r4
   d80ae:	bd10      	pop	{r4, pc}

000d80b0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d80b0:	b508      	push	{r3, lr}
    switch (state_) {
   d80b2:	7903      	ldrb	r3, [r0, #4]
   d80b4:	2b01      	cmp	r3, #1
   d80b6:	d002      	beq.n	d80be <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d80b8:	2b02      	cmp	r3, #2
   d80ba:	d002      	beq.n	d80c2 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d80bc:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d80be:	212c      	movs	r1, #44	; 0x2c
   d80c0:	e000      	b.n	d80c4 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d80c2:	213a      	movs	r1, #58	; 0x3a
   d80c4:	f7ff ff82 	bl	d7fcc <_ZN5spark10JSONWriter5writeEc>
   d80c8:	bd08      	pop	{r3, pc}

000d80ca <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d80ca:	b510      	push	{r4, lr}
   d80cc:	4604      	mov	r4, r0
    writeSeparator();
   d80ce:	f7ff ffef 	bl	d80b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d80d2:	4620      	mov	r0, r4
   d80d4:	217b      	movs	r1, #123	; 0x7b
   d80d6:	f7ff ff79 	bl	d7fcc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d80da:	2300      	movs	r3, #0
   d80dc:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d80de:	4620      	mov	r0, r4
   d80e0:	bd10      	pop	{r4, pc}
	...

000d80e4 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d80e4:	b538      	push	{r3, r4, r5, lr}
   d80e6:	4604      	mov	r4, r0
   d80e8:	460d      	mov	r5, r1
    writeSeparator();
   d80ea:	f7ff ffe1 	bl	d80b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d80ee:	6823      	ldr	r3, [r4, #0]
   d80f0:	4904      	ldr	r1, [pc, #16]	; (d8104 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d80f2:	68db      	ldr	r3, [r3, #12]
   d80f4:	4620      	mov	r0, r4
   d80f6:	462a      	mov	r2, r5
   d80f8:	4798      	blx	r3
    state_ = NEXT;
   d80fa:	2301      	movs	r3, #1
   d80fc:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d80fe:	4620      	mov	r0, r4
   d8100:	bd38      	pop	{r3, r4, r5, pc}
   d8102:	bf00      	nop
   d8104:	000d8f6d 	.word	0x000d8f6d

000d8108 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8108:	b538      	push	{r3, r4, r5, lr}
   d810a:	4604      	mov	r4, r0
   d810c:	460d      	mov	r5, r1
    writeSeparator();
   d810e:	f7ff ffcf 	bl	d80b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8112:	6823      	ldr	r3, [r4, #0]
   d8114:	4904      	ldr	r1, [pc, #16]	; (d8128 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8116:	68db      	ldr	r3, [r3, #12]
   d8118:	4620      	mov	r0, r4
   d811a:	462a      	mov	r2, r5
   d811c:	4798      	blx	r3
    state_ = NEXT;
   d811e:	2301      	movs	r3, #1
   d8120:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8122:	4620      	mov	r0, r4
   d8124:	bd38      	pop	{r3, r4, r5, pc}
   d8126:	bf00      	nop
   d8128:	000d893e 	.word	0x000d893e

000d812c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d812e:	460d      	mov	r5, r1
   d8130:	4617      	mov	r7, r2
    write('"');
   d8132:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8134:	4604      	mov	r4, r0
   d8136:	442f      	add	r7, r5
    write('"');
   d8138:	f7ff ff48 	bl	d7fcc <_ZN5spark10JSONWriter5writeEc>
   d813c:	462a      	mov	r2, r5
    const char* const end = str + size;
   d813e:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d8140:	42ba      	cmp	r2, r7
   d8142:	d038      	beq.n	d81b6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d8144:	4616      	mov	r6, r2
   d8146:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d814a:	2d22      	cmp	r5, #34	; 0x22
   d814c:	d003      	beq.n	d8156 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d814e:	2d5c      	cmp	r5, #92	; 0x5c
   d8150:	d001      	beq.n	d8156 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8152:	2d1f      	cmp	r5, #31
   d8154:	d82d      	bhi.n	d81b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d8156:	6823      	ldr	r3, [r4, #0]
   d8158:	1a52      	subs	r2, r2, r1
   d815a:	689b      	ldr	r3, [r3, #8]
   d815c:	4620      	mov	r0, r4
   d815e:	4798      	blx	r3
            write('\\');
   d8160:	215c      	movs	r1, #92	; 0x5c
   d8162:	4620      	mov	r0, r4
   d8164:	f7ff ff32 	bl	d7fcc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d8168:	2d0c      	cmp	r5, #12
   d816a:	d019      	beq.n	d81a0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d816c:	d807      	bhi.n	d817e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d816e:	2d09      	cmp	r5, #9
   d8170:	d00f      	beq.n	d8192 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d8172:	2d0a      	cmp	r5, #10
   d8174:	d012      	beq.n	d819c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d8176:	2d08      	cmp	r5, #8
   d8178:	d114      	bne.n	d81a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d817a:	2162      	movs	r1, #98	; 0x62
   d817c:	e00a      	b.n	d8194 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d817e:	2d22      	cmp	r5, #34	; 0x22
   d8180:	d005      	beq.n	d818e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8182:	2d5c      	cmp	r5, #92	; 0x5c
   d8184:	d003      	beq.n	d818e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d8186:	2d0d      	cmp	r5, #13
   d8188:	d10c      	bne.n	d81a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d818a:	2172      	movs	r1, #114	; 0x72
   d818c:	e002      	b.n	d8194 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d818e:	4629      	mov	r1, r5
   d8190:	e000      	b.n	d8194 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d8192:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d8194:	4620      	mov	r0, r4
   d8196:	f7ff ff19 	bl	d7fcc <_ZN5spark10JSONWriter5writeEc>
                break;
   d819a:	e009      	b.n	d81b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d819c:	216e      	movs	r1, #110	; 0x6e
   d819e:	e7f9      	b.n	d8194 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d81a0:	2166      	movs	r1, #102	; 0x66
   d81a2:	e7f7      	b.n	d8194 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d81a4:	6823      	ldr	r3, [r4, #0]
   d81a6:	490a      	ldr	r1, [pc, #40]	; (d81d0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d81a8:	68db      	ldr	r3, [r3, #12]
   d81aa:	462a      	mov	r2, r5
   d81ac:	4620      	mov	r0, r4
   d81ae:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d81b0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d81b2:	4632      	mov	r2, r6
   d81b4:	e7c4      	b.n	d8140 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d81b6:	4291      	cmp	r1, r2
   d81b8:	d004      	beq.n	d81c4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d81ba:	6823      	ldr	r3, [r4, #0]
   d81bc:	1a52      	subs	r2, r2, r1
   d81be:	689d      	ldr	r5, [r3, #8]
   d81c0:	4620      	mov	r0, r4
   d81c2:	47a8      	blx	r5
    }
    write('"');
   d81c4:	2122      	movs	r1, #34	; 0x22
   d81c6:	4620      	mov	r0, r4
   d81c8:	f7ff ff00 	bl	d7fcc <_ZN5spark10JSONWriter5writeEc>
   d81cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d81ce:	bf00      	nop
   d81d0:	000d916d 	.word	0x000d916d

000d81d4 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d81d4:	b570      	push	{r4, r5, r6, lr}
   d81d6:	4604      	mov	r4, r0
   d81d8:	460d      	mov	r5, r1
   d81da:	4616      	mov	r6, r2
    writeSeparator();
   d81dc:	f7ff ff68 	bl	d80b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d81e0:	4620      	mov	r0, r4
   d81e2:	4632      	mov	r2, r6
   d81e4:	4629      	mov	r1, r5
   d81e6:	f7ff ffa1 	bl	d812c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d81ea:	2302      	movs	r3, #2
   d81ec:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d81ee:	4620      	mov	r0, r4
   d81f0:	bd70      	pop	{r4, r5, r6, pc}

000d81f2 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d81f2:	b570      	push	{r4, r5, r6, lr}
   d81f4:	4604      	mov	r4, r0
   d81f6:	460d      	mov	r5, r1
   d81f8:	4616      	mov	r6, r2
    writeSeparator();
   d81fa:	f7ff ff59 	bl	d80b0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d81fe:	4620      	mov	r0, r4
   d8200:	4632      	mov	r2, r6
   d8202:	4629      	mov	r1, r5
   d8204:	f7ff ff92 	bl	d812c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8208:	2301      	movs	r3, #1
   d820a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d820c:	4620      	mov	r0, r4
   d820e:	bd70      	pop	{r4, r5, r6, pc}

000d8210 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8210:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8212:	2300      	movs	r3, #0
   d8214:	4604      	mov	r4, r0
   d8216:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8218:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d821a:	4810      	ldr	r0, [pc, #64]	; (d825c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d821c:	60a0      	str	r0, [r4, #8]
   d821e:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8220:	b1d1      	cbz	r1, d8258 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d8222:	780b      	ldrb	r3, [r1, #0]
   d8224:	2b03      	cmp	r3, #3
   d8226:	d006      	beq.n	d8236 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8228:	b9b3      	cbnz	r3, d8258 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d822a:	6813      	ldr	r3, [r2, #0]
   d822c:	6858      	ldr	r0, [r3, #4]
   d822e:	684b      	ldr	r3, [r1, #4]
   d8230:	5cc3      	ldrb	r3, [r0, r3]
   d8232:	2b6e      	cmp	r3, #110	; 0x6e
   d8234:	d008      	beq.n	d8248 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d8236:	6813      	ldr	r3, [r2, #0]
   d8238:	6858      	ldr	r0, [r3, #4]
   d823a:	684b      	ldr	r3, [r1, #4]
   d823c:	4403      	add	r3, r0
   d823e:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d8240:	688b      	ldr	r3, [r1, #8]
   d8242:	6849      	ldr	r1, [r1, #4]
   d8244:	1a5b      	subs	r3, r3, r1
   d8246:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8248:	4611      	mov	r1, r2
   d824a:	4620      	mov	r0, r4
   d824c:	f851 3b04 	ldr.w	r3, [r1], #4
   d8250:	f840 3b04 	str.w	r3, [r0], #4
   d8254:	f7fd fcb6 	bl	d5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d8258:	4620      	mov	r0, r4
   d825a:	bd10      	pop	{r4, pc}
   d825c:	000d8f93 	.word	0x000d8f93

000d8260 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8260:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8262:	b510      	push	{r4, lr}
   d8264:	4604      	mov	r4, r0
   d8266:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8268:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d826a:	6083      	str	r3, [r0, #8]
   d826c:	60c3      	str	r3, [r0, #12]
   d826e:	6103      	str	r3, [r0, #16]
   d8270:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d8272:	b171      	cbz	r1, d8292 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d8274:	780b      	ldrb	r3, [r1, #0]
   d8276:	2b01      	cmp	r3, #1
   d8278:	d10b      	bne.n	d8292 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d827a:	f101 0310 	add.w	r3, r1, #16
   d827e:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d8280:	68cb      	ldr	r3, [r1, #12]
   d8282:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8284:	4611      	mov	r1, r2
   d8286:	f851 3b04 	ldr.w	r3, [r1], #4
   d828a:	f840 3b04 	str.w	r3, [r0], #4
   d828e:	f7fd fc99 	bl	d5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d8292:	4620      	mov	r0, r4
   d8294:	bd10      	pop	{r4, pc}

000d8296 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8296:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8298:	b510      	push	{r4, lr}
   d829a:	4604      	mov	r4, r0
   d829c:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d829e:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d82a0:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d82a2:	b131      	cbz	r1, d82b2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d82a4:	4611      	mov	r1, r2
   d82a6:	f851 3b04 	ldr.w	r3, [r1], #4
   d82aa:	f840 3b04 	str.w	r3, [r0], #4
   d82ae:	f7fd fc89 	bl	d5bc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d82b2:	4620      	mov	r0, r4
   d82b4:	bd10      	pop	{r4, pc}

000d82b6 <__aeabi_atexit>:
   d82b6:	460b      	mov	r3, r1
   d82b8:	4601      	mov	r1, r0
   d82ba:	4618      	mov	r0, r3
   d82bc:	f000 b962 	b.w	d8584 <__cxa_atexit>

000d82c0 <_ZSt15get_new_handlerv>:
   d82c0:	4b02      	ldr	r3, [pc, #8]	; (d82cc <_ZSt15get_new_handlerv+0xc>)
   d82c2:	6818      	ldr	r0, [r3, #0]
   d82c4:	f3bf 8f5f 	dmb	sy
   d82c8:	4770      	bx	lr
   d82ca:	bf00      	nop
   d82cc:	2003e74c 	.word	0x2003e74c

000d82d0 <_ZdlPvj>:
   d82d0:	f7fb bee3 	b.w	d409a <_ZdlPv>

000d82d4 <_ZnwjRKSt9nothrow_t>:
   d82d4:	b510      	push	{r4, lr}
   d82d6:	2800      	cmp	r0, #0
   d82d8:	bf14      	ite	ne
   d82da:	4604      	movne	r4, r0
   d82dc:	2401      	moveq	r4, #1
   d82de:	4620      	mov	r0, r4
   d82e0:	f7fc fcea 	bl	d4cb8 <malloc>
   d82e4:	b920      	cbnz	r0, d82f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d82e6:	f7ff ffeb 	bl	d82c0 <_ZSt15get_new_handlerv>
   d82ea:	b108      	cbz	r0, d82f0 <_ZnwjRKSt9nothrow_t+0x1c>
   d82ec:	4780      	blx	r0
   d82ee:	e7f6      	b.n	d82de <_ZnwjRKSt9nothrow_t+0xa>
   d82f0:	bd10      	pop	{r4, pc}
	...

000d82f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d82f4:	4b18      	ldr	r3, [pc, #96]	; (d8358 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d82f6:	681a      	ldr	r2, [r3, #0]
   d82f8:	07d1      	lsls	r1, r2, #31
   d82fa:	bf5c      	itt	pl
   d82fc:	2201      	movpl	r2, #1
   d82fe:	601a      	strpl	r2, [r3, #0]
   d8300:	4b16      	ldr	r3, [pc, #88]	; (d835c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8302:	681a      	ldr	r2, [r3, #0]
   d8304:	07d2      	lsls	r2, r2, #31
   d8306:	bf5c      	itt	pl
   d8308:	2201      	movpl	r2, #1
   d830a:	601a      	strpl	r2, [r3, #0]
   d830c:	4b14      	ldr	r3, [pc, #80]	; (d8360 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d830e:	681a      	ldr	r2, [r3, #0]
   d8310:	07d0      	lsls	r0, r2, #31
   d8312:	bf5c      	itt	pl
   d8314:	2201      	movpl	r2, #1
   d8316:	601a      	strpl	r2, [r3, #0]
   d8318:	4b12      	ldr	r3, [pc, #72]	; (d8364 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d831a:	681a      	ldr	r2, [r3, #0]
   d831c:	07d1      	lsls	r1, r2, #31
   d831e:	bf5c      	itt	pl
   d8320:	2201      	movpl	r2, #1
   d8322:	601a      	strpl	r2, [r3, #0]
   d8324:	4b10      	ldr	r3, [pc, #64]	; (d8368 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8326:	681a      	ldr	r2, [r3, #0]
   d8328:	07d2      	lsls	r2, r2, #31
   d832a:	bf5c      	itt	pl
   d832c:	2201      	movpl	r2, #1
   d832e:	601a      	strpl	r2, [r3, #0]
   d8330:	4b0e      	ldr	r3, [pc, #56]	; (d836c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8332:	681a      	ldr	r2, [r3, #0]
   d8334:	07d0      	lsls	r0, r2, #31
   d8336:	bf5c      	itt	pl
   d8338:	2201      	movpl	r2, #1
   d833a:	601a      	strpl	r2, [r3, #0]
   d833c:	4b0c      	ldr	r3, [pc, #48]	; (d8370 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d833e:	681a      	ldr	r2, [r3, #0]
   d8340:	07d1      	lsls	r1, r2, #31
   d8342:	bf5c      	itt	pl
   d8344:	2201      	movpl	r2, #1
   d8346:	601a      	strpl	r2, [r3, #0]
   d8348:	4b0a      	ldr	r3, [pc, #40]	; (d8374 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d834a:	681a      	ldr	r2, [r3, #0]
   d834c:	07d2      	lsls	r2, r2, #31
   d834e:	bf5c      	itt	pl
   d8350:	2201      	movpl	r2, #1
   d8352:	601a      	strpl	r2, [r3, #0]
   d8354:	4770      	bx	lr
   d8356:	bf00      	nop
   d8358:	2003e76c 	.word	0x2003e76c
   d835c:	2003e768 	.word	0x2003e768
   d8360:	2003e764 	.word	0x2003e764
   d8364:	2003e760 	.word	0x2003e760
   d8368:	2003e75c 	.word	0x2003e75c
   d836c:	2003e758 	.word	0x2003e758
   d8370:	2003e754 	.word	0x2003e754
   d8374:	2003e750 	.word	0x2003e750

000d8378 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d8378:	4b24      	ldr	r3, [pc, #144]	; (d840c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d837a:	681a      	ldr	r2, [r3, #0]
   d837c:	07d0      	lsls	r0, r2, #31
   d837e:	bf5c      	itt	pl
   d8380:	2201      	movpl	r2, #1
   d8382:	601a      	strpl	r2, [r3, #0]
   d8384:	4b22      	ldr	r3, [pc, #136]	; (d8410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d8386:	681a      	ldr	r2, [r3, #0]
   d8388:	07d1      	lsls	r1, r2, #31
   d838a:	bf5c      	itt	pl
   d838c:	2201      	movpl	r2, #1
   d838e:	601a      	strpl	r2, [r3, #0]
   d8390:	4b20      	ldr	r3, [pc, #128]	; (d8414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8392:	681a      	ldr	r2, [r3, #0]
   d8394:	07d2      	lsls	r2, r2, #31
   d8396:	bf5c      	itt	pl
   d8398:	2201      	movpl	r2, #1
   d839a:	601a      	strpl	r2, [r3, #0]
   d839c:	4b1e      	ldr	r3, [pc, #120]	; (d8418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d839e:	681a      	ldr	r2, [r3, #0]
   d83a0:	07d0      	lsls	r0, r2, #31
   d83a2:	bf5c      	itt	pl
   d83a4:	2201      	movpl	r2, #1
   d83a6:	601a      	strpl	r2, [r3, #0]
   d83a8:	4b1c      	ldr	r3, [pc, #112]	; (d841c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d83aa:	681a      	ldr	r2, [r3, #0]
   d83ac:	07d1      	lsls	r1, r2, #31
   d83ae:	bf5c      	itt	pl
   d83b0:	2201      	movpl	r2, #1
   d83b2:	601a      	strpl	r2, [r3, #0]
   d83b4:	4b1a      	ldr	r3, [pc, #104]	; (d8420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d83b6:	681a      	ldr	r2, [r3, #0]
   d83b8:	07d2      	lsls	r2, r2, #31
   d83ba:	bf5c      	itt	pl
   d83bc:	2201      	movpl	r2, #1
   d83be:	601a      	strpl	r2, [r3, #0]
   d83c0:	4b18      	ldr	r3, [pc, #96]	; (d8424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d83c2:	681a      	ldr	r2, [r3, #0]
   d83c4:	07d0      	lsls	r0, r2, #31
   d83c6:	bf5c      	itt	pl
   d83c8:	2201      	movpl	r2, #1
   d83ca:	601a      	strpl	r2, [r3, #0]
   d83cc:	4b16      	ldr	r3, [pc, #88]	; (d8428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d83ce:	681a      	ldr	r2, [r3, #0]
   d83d0:	07d1      	lsls	r1, r2, #31
   d83d2:	bf5c      	itt	pl
   d83d4:	2201      	movpl	r2, #1
   d83d6:	601a      	strpl	r2, [r3, #0]
   d83d8:	4b14      	ldr	r3, [pc, #80]	; (d842c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d83da:	681a      	ldr	r2, [r3, #0]
   d83dc:	07d2      	lsls	r2, r2, #31
   d83de:	bf5c      	itt	pl
   d83e0:	2201      	movpl	r2, #1
   d83e2:	601a      	strpl	r2, [r3, #0]
   d83e4:	4b12      	ldr	r3, [pc, #72]	; (d8430 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d83e6:	681a      	ldr	r2, [r3, #0]
   d83e8:	07d0      	lsls	r0, r2, #31
   d83ea:	bf5c      	itt	pl
   d83ec:	2201      	movpl	r2, #1
   d83ee:	601a      	strpl	r2, [r3, #0]
   d83f0:	4b10      	ldr	r3, [pc, #64]	; (d8434 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d83f2:	681a      	ldr	r2, [r3, #0]
   d83f4:	07d1      	lsls	r1, r2, #31
   d83f6:	bf5c      	itt	pl
   d83f8:	2201      	movpl	r2, #1
   d83fa:	601a      	strpl	r2, [r3, #0]
   d83fc:	4b0e      	ldr	r3, [pc, #56]	; (d8438 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d83fe:	681a      	ldr	r2, [r3, #0]
   d8400:	07d2      	lsls	r2, r2, #31
   d8402:	bf5c      	itt	pl
   d8404:	2201      	movpl	r2, #1
   d8406:	601a      	strpl	r2, [r3, #0]
   d8408:	4770      	bx	lr
   d840a:	bf00      	nop
   d840c:	2003e79c 	.word	0x2003e79c
   d8410:	2003e798 	.word	0x2003e798
   d8414:	2003e794 	.word	0x2003e794
   d8418:	2003e790 	.word	0x2003e790
   d841c:	2003e78c 	.word	0x2003e78c
   d8420:	2003e788 	.word	0x2003e788
   d8424:	2003e784 	.word	0x2003e784
   d8428:	2003e780 	.word	0x2003e780
   d842c:	2003e77c 	.word	0x2003e77c
   d8430:	2003e778 	.word	0x2003e778
   d8434:	2003e774 	.word	0x2003e774
   d8438:	2003e770 	.word	0x2003e770

000d843c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d843c:	4b24      	ldr	r3, [pc, #144]	; (d84d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d843e:	681a      	ldr	r2, [r3, #0]
   d8440:	07d0      	lsls	r0, r2, #31
   d8442:	bf5c      	itt	pl
   d8444:	2201      	movpl	r2, #1
   d8446:	601a      	strpl	r2, [r3, #0]
   d8448:	4b22      	ldr	r3, [pc, #136]	; (d84d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d844a:	681a      	ldr	r2, [r3, #0]
   d844c:	07d1      	lsls	r1, r2, #31
   d844e:	bf5c      	itt	pl
   d8450:	2201      	movpl	r2, #1
   d8452:	601a      	strpl	r2, [r3, #0]
   d8454:	4b20      	ldr	r3, [pc, #128]	; (d84d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8456:	681a      	ldr	r2, [r3, #0]
   d8458:	07d2      	lsls	r2, r2, #31
   d845a:	bf5c      	itt	pl
   d845c:	2201      	movpl	r2, #1
   d845e:	601a      	strpl	r2, [r3, #0]
   d8460:	4b1e      	ldr	r3, [pc, #120]	; (d84dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8462:	681a      	ldr	r2, [r3, #0]
   d8464:	07d0      	lsls	r0, r2, #31
   d8466:	bf5c      	itt	pl
   d8468:	2201      	movpl	r2, #1
   d846a:	601a      	strpl	r2, [r3, #0]
   d846c:	4b1c      	ldr	r3, [pc, #112]	; (d84e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d846e:	681a      	ldr	r2, [r3, #0]
   d8470:	07d1      	lsls	r1, r2, #31
   d8472:	bf5c      	itt	pl
   d8474:	2201      	movpl	r2, #1
   d8476:	601a      	strpl	r2, [r3, #0]
   d8478:	4b1a      	ldr	r3, [pc, #104]	; (d84e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d847a:	681a      	ldr	r2, [r3, #0]
   d847c:	07d2      	lsls	r2, r2, #31
   d847e:	bf5c      	itt	pl
   d8480:	2201      	movpl	r2, #1
   d8482:	601a      	strpl	r2, [r3, #0]
   d8484:	4b18      	ldr	r3, [pc, #96]	; (d84e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8486:	681a      	ldr	r2, [r3, #0]
   d8488:	07d0      	lsls	r0, r2, #31
   d848a:	bf5c      	itt	pl
   d848c:	2201      	movpl	r2, #1
   d848e:	601a      	strpl	r2, [r3, #0]
   d8490:	4b16      	ldr	r3, [pc, #88]	; (d84ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8492:	681a      	ldr	r2, [r3, #0]
   d8494:	07d1      	lsls	r1, r2, #31
   d8496:	bf5c      	itt	pl
   d8498:	2201      	movpl	r2, #1
   d849a:	601a      	strpl	r2, [r3, #0]
   d849c:	4b14      	ldr	r3, [pc, #80]	; (d84f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d849e:	681a      	ldr	r2, [r3, #0]
   d84a0:	07d2      	lsls	r2, r2, #31
   d84a2:	bf5c      	itt	pl
   d84a4:	2201      	movpl	r2, #1
   d84a6:	601a      	strpl	r2, [r3, #0]
   d84a8:	4b12      	ldr	r3, [pc, #72]	; (d84f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d84aa:	681a      	ldr	r2, [r3, #0]
   d84ac:	07d0      	lsls	r0, r2, #31
   d84ae:	bf5c      	itt	pl
   d84b0:	2201      	movpl	r2, #1
   d84b2:	601a      	strpl	r2, [r3, #0]
   d84b4:	4b10      	ldr	r3, [pc, #64]	; (d84f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d84b6:	681a      	ldr	r2, [r3, #0]
   d84b8:	07d1      	lsls	r1, r2, #31
   d84ba:	bf5c      	itt	pl
   d84bc:	2201      	movpl	r2, #1
   d84be:	601a      	strpl	r2, [r3, #0]
   d84c0:	4b0e      	ldr	r3, [pc, #56]	; (d84fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d84c2:	681a      	ldr	r2, [r3, #0]
   d84c4:	07d2      	lsls	r2, r2, #31
   d84c6:	bf5c      	itt	pl
   d84c8:	2201      	movpl	r2, #1
   d84ca:	601a      	strpl	r2, [r3, #0]
   d84cc:	4770      	bx	lr
   d84ce:	bf00      	nop
   d84d0:	2003e7cc 	.word	0x2003e7cc
   d84d4:	2003e7c8 	.word	0x2003e7c8
   d84d8:	2003e7c4 	.word	0x2003e7c4
   d84dc:	2003e7c0 	.word	0x2003e7c0
   d84e0:	2003e7bc 	.word	0x2003e7bc
   d84e4:	2003e7b8 	.word	0x2003e7b8
   d84e8:	2003e7b4 	.word	0x2003e7b4
   d84ec:	2003e7b0 	.word	0x2003e7b0
   d84f0:	2003e7ac 	.word	0x2003e7ac
   d84f4:	2003e7a8 	.word	0x2003e7a8
   d84f8:	2003e7a4 	.word	0x2003e7a4
   d84fc:	2003e7a0 	.word	0x2003e7a0

000d8500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8500:	4b18      	ldr	r3, [pc, #96]	; (d8564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8502:	681a      	ldr	r2, [r3, #0]
   d8504:	07d1      	lsls	r1, r2, #31
   d8506:	bf5c      	itt	pl
   d8508:	2201      	movpl	r2, #1
   d850a:	601a      	strpl	r2, [r3, #0]
   d850c:	4b16      	ldr	r3, [pc, #88]	; (d8568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d850e:	681a      	ldr	r2, [r3, #0]
   d8510:	07d2      	lsls	r2, r2, #31
   d8512:	bf5c      	itt	pl
   d8514:	2201      	movpl	r2, #1
   d8516:	601a      	strpl	r2, [r3, #0]
   d8518:	4b14      	ldr	r3, [pc, #80]	; (d856c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d851a:	681a      	ldr	r2, [r3, #0]
   d851c:	07d0      	lsls	r0, r2, #31
   d851e:	bf5c      	itt	pl
   d8520:	2201      	movpl	r2, #1
   d8522:	601a      	strpl	r2, [r3, #0]
   d8524:	4b12      	ldr	r3, [pc, #72]	; (d8570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8526:	681a      	ldr	r2, [r3, #0]
   d8528:	07d1      	lsls	r1, r2, #31
   d852a:	bf5c      	itt	pl
   d852c:	2201      	movpl	r2, #1
   d852e:	601a      	strpl	r2, [r3, #0]
   d8530:	4b10      	ldr	r3, [pc, #64]	; (d8574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8532:	681a      	ldr	r2, [r3, #0]
   d8534:	07d2      	lsls	r2, r2, #31
   d8536:	bf5c      	itt	pl
   d8538:	2201      	movpl	r2, #1
   d853a:	601a      	strpl	r2, [r3, #0]
   d853c:	4b0e      	ldr	r3, [pc, #56]	; (d8578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d853e:	681a      	ldr	r2, [r3, #0]
   d8540:	07d0      	lsls	r0, r2, #31
   d8542:	bf5c      	itt	pl
   d8544:	2201      	movpl	r2, #1
   d8546:	601a      	strpl	r2, [r3, #0]
   d8548:	4b0c      	ldr	r3, [pc, #48]	; (d857c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d854a:	681a      	ldr	r2, [r3, #0]
   d854c:	07d1      	lsls	r1, r2, #31
   d854e:	bf5c      	itt	pl
   d8550:	2201      	movpl	r2, #1
   d8552:	601a      	strpl	r2, [r3, #0]
   d8554:	4b0a      	ldr	r3, [pc, #40]	; (d8580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8556:	681a      	ldr	r2, [r3, #0]
   d8558:	07d2      	lsls	r2, r2, #31
   d855a:	bf5c      	itt	pl
   d855c:	2201      	movpl	r2, #1
   d855e:	601a      	strpl	r2, [r3, #0]
   d8560:	4770      	bx	lr
   d8562:	bf00      	nop
   d8564:	2003e7ec 	.word	0x2003e7ec
   d8568:	2003e7e8 	.word	0x2003e7e8
   d856c:	2003e7e4 	.word	0x2003e7e4
   d8570:	2003e7e0 	.word	0x2003e7e0
   d8574:	2003e7dc 	.word	0x2003e7dc
   d8578:	2003e7d8 	.word	0x2003e7d8
   d857c:	2003e7d4 	.word	0x2003e7d4
   d8580:	2003e7d0 	.word	0x2003e7d0

000d8584 <__cxa_atexit>:
   d8584:	b510      	push	{r4, lr}
   d8586:	4c05      	ldr	r4, [pc, #20]	; (d859c <__cxa_atexit+0x18>)
   d8588:	4613      	mov	r3, r2
   d858a:	b12c      	cbz	r4, d8598 <__cxa_atexit+0x14>
   d858c:	460a      	mov	r2, r1
   d858e:	4601      	mov	r1, r0
   d8590:	2002      	movs	r0, #2
   d8592:	f3af 8000 	nop.w
   d8596:	bd10      	pop	{r4, pc}
   d8598:	4620      	mov	r0, r4
   d859a:	bd10      	pop	{r4, pc}
   d859c:	00000000 	.word	0x00000000

000d85a0 <memcmp>:
   d85a0:	b510      	push	{r4, lr}
   d85a2:	3901      	subs	r1, #1
   d85a4:	4402      	add	r2, r0
   d85a6:	4290      	cmp	r0, r2
   d85a8:	d007      	beq.n	d85ba <memcmp+0x1a>
   d85aa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d85ae:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d85b2:	42a3      	cmp	r3, r4
   d85b4:	d0f7      	beq.n	d85a6 <memcmp+0x6>
   d85b6:	1b18      	subs	r0, r3, r4
   d85b8:	bd10      	pop	{r4, pc}
   d85ba:	2000      	movs	r0, #0
   d85bc:	bd10      	pop	{r4, pc}

000d85be <memcpy>:
   d85be:	b510      	push	{r4, lr}
   d85c0:	1e43      	subs	r3, r0, #1
   d85c2:	440a      	add	r2, r1
   d85c4:	4291      	cmp	r1, r2
   d85c6:	d004      	beq.n	d85d2 <memcpy+0x14>
   d85c8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d85cc:	f803 4f01 	strb.w	r4, [r3, #1]!
   d85d0:	e7f8      	b.n	d85c4 <memcpy+0x6>
   d85d2:	bd10      	pop	{r4, pc}

000d85d4 <memmove>:
   d85d4:	4288      	cmp	r0, r1
   d85d6:	b510      	push	{r4, lr}
   d85d8:	eb01 0302 	add.w	r3, r1, r2
   d85dc:	d801      	bhi.n	d85e2 <memmove+0xe>
   d85de:	1e42      	subs	r2, r0, #1
   d85e0:	e00b      	b.n	d85fa <memmove+0x26>
   d85e2:	4298      	cmp	r0, r3
   d85e4:	d2fb      	bcs.n	d85de <memmove+0xa>
   d85e6:	1881      	adds	r1, r0, r2
   d85e8:	1ad2      	subs	r2, r2, r3
   d85ea:	42d3      	cmn	r3, r2
   d85ec:	d004      	beq.n	d85f8 <memmove+0x24>
   d85ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d85f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d85f6:	e7f8      	b.n	d85ea <memmove+0x16>
   d85f8:	bd10      	pop	{r4, pc}
   d85fa:	4299      	cmp	r1, r3
   d85fc:	d004      	beq.n	d8608 <memmove+0x34>
   d85fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8602:	f802 4f01 	strb.w	r4, [r2, #1]!
   d8606:	e7f8      	b.n	d85fa <memmove+0x26>
   d8608:	bd10      	pop	{r4, pc}

000d860a <memset>:
   d860a:	4402      	add	r2, r0
   d860c:	4603      	mov	r3, r0
   d860e:	4293      	cmp	r3, r2
   d8610:	d002      	beq.n	d8618 <memset+0xe>
   d8612:	f803 1b01 	strb.w	r1, [r3], #1
   d8616:	e7fa      	b.n	d860e <memset+0x4>
   d8618:	4770      	bx	lr
	...

000d861c <srand>:
   d861c:	b538      	push	{r3, r4, r5, lr}
   d861e:	4b12      	ldr	r3, [pc, #72]	; (d8668 <srand+0x4c>)
   d8620:	681c      	ldr	r4, [r3, #0]
   d8622:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8624:	4605      	mov	r5, r0
   d8626:	b9d3      	cbnz	r3, d865e <srand+0x42>
   d8628:	2018      	movs	r0, #24
   d862a:	f7fc fb45 	bl	d4cb8 <malloc>
   d862e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8632:	63a0      	str	r0, [r4, #56]	; 0x38
   d8634:	8003      	strh	r3, [r0, #0]
   d8636:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d863a:	8043      	strh	r3, [r0, #2]
   d863c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8640:	8083      	strh	r3, [r0, #4]
   d8642:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8646:	80c3      	strh	r3, [r0, #6]
   d8648:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d864c:	8103      	strh	r3, [r0, #8]
   d864e:	2305      	movs	r3, #5
   d8650:	8143      	strh	r3, [r0, #10]
   d8652:	230b      	movs	r3, #11
   d8654:	8183      	strh	r3, [r0, #12]
   d8656:	2201      	movs	r2, #1
   d8658:	2300      	movs	r3, #0
   d865a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d865e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8660:	2200      	movs	r2, #0
   d8662:	611d      	str	r5, [r3, #16]
   d8664:	615a      	str	r2, [r3, #20]
   d8666:	bd38      	pop	{r3, r4, r5, pc}
   d8668:	2003d93c 	.word	0x2003d93c

000d866c <strchr>:
   d866c:	b2c9      	uxtb	r1, r1
   d866e:	4603      	mov	r3, r0
   d8670:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8674:	b11a      	cbz	r2, d867e <strchr+0x12>
   d8676:	4291      	cmp	r1, r2
   d8678:	d1f9      	bne.n	d866e <strchr+0x2>
   d867a:	4618      	mov	r0, r3
   d867c:	4770      	bx	lr
   d867e:	2900      	cmp	r1, #0
   d8680:	bf0c      	ite	eq
   d8682:	4618      	moveq	r0, r3
   d8684:	2000      	movne	r0, #0
   d8686:	4770      	bx	lr

000d8688 <strchrnul>:
   d8688:	b510      	push	{r4, lr}
   d868a:	4604      	mov	r4, r0
   d868c:	f7ff ffee 	bl	d866c <strchr>
   d8690:	b918      	cbnz	r0, d869a <strchrnul+0x12>
   d8692:	4620      	mov	r0, r4
   d8694:	f000 f814 	bl	d86c0 <strlen>
   d8698:	4420      	add	r0, r4
   d869a:	bd10      	pop	{r4, pc}

000d869c <strcmp>:
   d869c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d86a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d86a4:	2a01      	cmp	r2, #1
   d86a6:	bf28      	it	cs
   d86a8:	429a      	cmpcs	r2, r3
   d86aa:	d0f7      	beq.n	d869c <strcmp>
   d86ac:	1ad0      	subs	r0, r2, r3
   d86ae:	4770      	bx	lr

000d86b0 <strcpy>:
   d86b0:	4603      	mov	r3, r0
   d86b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d86b6:	f803 2b01 	strb.w	r2, [r3], #1
   d86ba:	2a00      	cmp	r2, #0
   d86bc:	d1f9      	bne.n	d86b2 <strcpy+0x2>
   d86be:	4770      	bx	lr

000d86c0 <strlen>:
   d86c0:	4603      	mov	r3, r0
   d86c2:	f813 2b01 	ldrb.w	r2, [r3], #1
   d86c6:	2a00      	cmp	r2, #0
   d86c8:	d1fb      	bne.n	d86c2 <strlen+0x2>
   d86ca:	1a18      	subs	r0, r3, r0
   d86cc:	3801      	subs	r0, #1
   d86ce:	4770      	bx	lr

000d86d0 <strncmp>:
   d86d0:	b530      	push	{r4, r5, lr}
   d86d2:	b182      	cbz	r2, d86f6 <strncmp+0x26>
   d86d4:	1e45      	subs	r5, r0, #1
   d86d6:	3901      	subs	r1, #1
   d86d8:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d86dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d86e0:	42a3      	cmp	r3, r4
   d86e2:	d106      	bne.n	d86f2 <strncmp+0x22>
   d86e4:	43ec      	mvns	r4, r5
   d86e6:	4414      	add	r4, r2
   d86e8:	42e0      	cmn	r0, r4
   d86ea:	d001      	beq.n	d86f0 <strncmp+0x20>
   d86ec:	2b00      	cmp	r3, #0
   d86ee:	d1f3      	bne.n	d86d8 <strncmp+0x8>
   d86f0:	461c      	mov	r4, r3
   d86f2:	1b18      	subs	r0, r3, r4
   d86f4:	bd30      	pop	{r4, r5, pc}
   d86f6:	4610      	mov	r0, r2
   d86f8:	bd30      	pop	{r4, r5, pc}

000d86fa <strnlen>:
   d86fa:	b510      	push	{r4, lr}
   d86fc:	4603      	mov	r3, r0
   d86fe:	4401      	add	r1, r0
   d8700:	428b      	cmp	r3, r1
   d8702:	d004      	beq.n	d870e <strnlen+0x14>
   d8704:	781a      	ldrb	r2, [r3, #0]
   d8706:	1c5c      	adds	r4, r3, #1
   d8708:	b10a      	cbz	r2, d870e <strnlen+0x14>
   d870a:	4623      	mov	r3, r4
   d870c:	e7f8      	b.n	d8700 <strnlen+0x6>
   d870e:	1a18      	subs	r0, r3, r0
   d8710:	bd10      	pop	{r4, pc}

000d8712 <strrchr>:
   d8712:	b538      	push	{r3, r4, r5, lr}
   d8714:	4603      	mov	r3, r0
   d8716:	460d      	mov	r5, r1
   d8718:	b141      	cbz	r1, d872c <strrchr+0x1a>
   d871a:	2400      	movs	r4, #0
   d871c:	4629      	mov	r1, r5
   d871e:	4618      	mov	r0, r3
   d8720:	f7ff ffa4 	bl	d866c <strchr>
   d8724:	b130      	cbz	r0, d8734 <strrchr+0x22>
   d8726:	1c43      	adds	r3, r0, #1
   d8728:	4604      	mov	r4, r0
   d872a:	e7f7      	b.n	d871c <strrchr+0xa>
   d872c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8730:	f7ff bf9c 	b.w	d866c <strchr>
   d8734:	4620      	mov	r0, r4
   d8736:	bd38      	pop	{r3, r4, r5, pc}

000d8738 <_strtol_r>:
   d8738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d873c:	4680      	mov	r8, r0
   d873e:	4840      	ldr	r0, [pc, #256]	; (d8840 <_strtol_r+0x108>)
   d8740:	f8d0 9000 	ldr.w	r9, [r0]
   d8744:	460f      	mov	r7, r1
   d8746:	463d      	mov	r5, r7
   d8748:	f815 4b01 	ldrb.w	r4, [r5], #1
   d874c:	eb09 0004 	add.w	r0, r9, r4
   d8750:	7840      	ldrb	r0, [r0, #1]
   d8752:	f000 0008 	and.w	r0, r0, #8
   d8756:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d875a:	b108      	cbz	r0, d8760 <_strtol_r+0x28>
   d875c:	462f      	mov	r7, r5
   d875e:	e7f2      	b.n	d8746 <_strtol_r+0xe>
   d8760:	2c2d      	cmp	r4, #45	; 0x2d
   d8762:	d103      	bne.n	d876c <_strtol_r+0x34>
   d8764:	1cbd      	adds	r5, r7, #2
   d8766:	787c      	ldrb	r4, [r7, #1]
   d8768:	2601      	movs	r6, #1
   d876a:	e003      	b.n	d8774 <_strtol_r+0x3c>
   d876c:	2c2b      	cmp	r4, #43	; 0x2b
   d876e:	bf04      	itt	eq
   d8770:	787c      	ldrbeq	r4, [r7, #1]
   d8772:	1cbd      	addeq	r5, r7, #2
   d8774:	b113      	cbz	r3, d877c <_strtol_r+0x44>
   d8776:	2b10      	cmp	r3, #16
   d8778:	d10a      	bne.n	d8790 <_strtol_r+0x58>
   d877a:	e05b      	b.n	d8834 <_strtol_r+0xfc>
   d877c:	2c30      	cmp	r4, #48	; 0x30
   d877e:	d157      	bne.n	d8830 <_strtol_r+0xf8>
   d8780:	7828      	ldrb	r0, [r5, #0]
   d8782:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8786:	2858      	cmp	r0, #88	; 0x58
   d8788:	d14d      	bne.n	d8826 <_strtol_r+0xee>
   d878a:	786c      	ldrb	r4, [r5, #1]
   d878c:	2310      	movs	r3, #16
   d878e:	3502      	adds	r5, #2
   d8790:	2e00      	cmp	r6, #0
   d8792:	bf14      	ite	ne
   d8794:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d8798:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d879c:	2700      	movs	r7, #0
   d879e:	fbbc faf3 	udiv	sl, ip, r3
   d87a2:	4638      	mov	r0, r7
   d87a4:	fb03 cc1a 	mls	ip, r3, sl, ip
   d87a8:	eb09 0e04 	add.w	lr, r9, r4
   d87ac:	f89e e001 	ldrb.w	lr, [lr, #1]
   d87b0:	f01e 0f04 	tst.w	lr, #4
   d87b4:	d001      	beq.n	d87ba <_strtol_r+0x82>
   d87b6:	3c30      	subs	r4, #48	; 0x30
   d87b8:	e00b      	b.n	d87d2 <_strtol_r+0x9a>
   d87ba:	f01e 0e03 	ands.w	lr, lr, #3
   d87be:	d01b      	beq.n	d87f8 <_strtol_r+0xc0>
   d87c0:	f1be 0f01 	cmp.w	lr, #1
   d87c4:	bf0c      	ite	eq
   d87c6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d87ca:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d87ce:	ebce 0404 	rsb	r4, lr, r4
   d87d2:	42a3      	cmp	r3, r4
   d87d4:	dd10      	ble.n	d87f8 <_strtol_r+0xc0>
   d87d6:	f1b7 3fff 	cmp.w	r7, #4294967295
   d87da:	d00a      	beq.n	d87f2 <_strtol_r+0xba>
   d87dc:	4550      	cmp	r0, sl
   d87de:	d806      	bhi.n	d87ee <_strtol_r+0xb6>
   d87e0:	d101      	bne.n	d87e6 <_strtol_r+0xae>
   d87e2:	4564      	cmp	r4, ip
   d87e4:	dc03      	bgt.n	d87ee <_strtol_r+0xb6>
   d87e6:	fb03 4000 	mla	r0, r3, r0, r4
   d87ea:	2701      	movs	r7, #1
   d87ec:	e001      	b.n	d87f2 <_strtol_r+0xba>
   d87ee:	f04f 37ff 	mov.w	r7, #4294967295
   d87f2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d87f6:	e7d7      	b.n	d87a8 <_strtol_r+0x70>
   d87f8:	1c7b      	adds	r3, r7, #1
   d87fa:	d10c      	bne.n	d8816 <_strtol_r+0xde>
   d87fc:	2e00      	cmp	r6, #0
   d87fe:	f04f 0322 	mov.w	r3, #34	; 0x22
   d8802:	bf14      	ite	ne
   d8804:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d8808:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d880c:	f8c8 3000 	str.w	r3, [r8]
   d8810:	b92a      	cbnz	r2, d881e <_strtol_r+0xe6>
   d8812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8816:	b106      	cbz	r6, d881a <_strtol_r+0xe2>
   d8818:	4240      	negs	r0, r0
   d881a:	b172      	cbz	r2, d883a <_strtol_r+0x102>
   d881c:	b107      	cbz	r7, d8820 <_strtol_r+0xe8>
   d881e:	1e69      	subs	r1, r5, #1
   d8820:	6011      	str	r1, [r2, #0]
   d8822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8826:	2430      	movs	r4, #48	; 0x30
   d8828:	2b00      	cmp	r3, #0
   d882a:	d1b1      	bne.n	d8790 <_strtol_r+0x58>
   d882c:	2308      	movs	r3, #8
   d882e:	e7af      	b.n	d8790 <_strtol_r+0x58>
   d8830:	230a      	movs	r3, #10
   d8832:	e7ad      	b.n	d8790 <_strtol_r+0x58>
   d8834:	2c30      	cmp	r4, #48	; 0x30
   d8836:	d0a3      	beq.n	d8780 <_strtol_r+0x48>
   d8838:	e7aa      	b.n	d8790 <_strtol_r+0x58>
   d883a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d883e:	bf00      	nop
   d8840:	2003d8d8 	.word	0x2003d8d8

000d8844 <strtol>:
   d8844:	4613      	mov	r3, r2
   d8846:	460a      	mov	r2, r1
   d8848:	4601      	mov	r1, r0
   d884a:	4802      	ldr	r0, [pc, #8]	; (d8854 <strtol+0x10>)
   d884c:	6800      	ldr	r0, [r0, #0]
   d884e:	f7ff bf73 	b.w	d8738 <_strtol_r>
   d8852:	bf00      	nop
   d8854:	2003d93c 	.word	0x2003d93c

000d8858 <dynalib_user>:
   d8858:	000d401d 000d4059 000d4085 000d4089     .@..Y@...@...@..
   d8868:	00000000                                ....

000d886c <_ZTVN5spark10LogHandlerE>:
	...
   d887c:	000d40a5 000d40c9                       .@...@..

000d8884 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d888c:	000d40d5 000d4109 000d7455 000d40cb     .@...A..Ut...@..
   d889c:	736e6553 3120726f 54202d20 65706d65     Sensor 1 - Tempe
   d88ac:	75746172 203a6572 53007525 6f736e65     rature: %u.Senso
   d88bc:	20312072 694c202d 3a746867 00752520     r 1 - Light: %u.
   d88cc:	736e6553 3120726f 48202d20 64696d75     Sensor 1 - Humid
   d88dc:	3a797469 00752520 736e6553 3120726f     ity: %u.Sensor 1
   d88ec:	44202d20 61747369 3a65636e 00752520      - Distance: %u.
   d88fc:	736e6553 3220726f 54202d20 65706d65     Sensor 2 - Tempe
   d890c:	75746172 203a6572 53007525 6f736e65     rature: %u.Senso
   d891c:	20322072 694c202d 3a746867 00752520     r 2 - Light: %u.
   d892c:	736e6553 3220726f 53202d20 646e756f     Sensor 2 - Sound
   d893c:	7525203a 6e655300 20726f73 202d2032     : %u.Sensor 2 - 
   d894c:	616d7548 6564206e 74636574 203a726f     Human detector: 
   d895c:	53007525 6f736e65 20322072 7548202d     %u.Sensor 2 - Hu
   d896c:	206e616d 74736f6c 002e2e2e 736e6553     man lost....Sens
   d897c:	3220726f 48202d20 6e616d75 74656420     or 2 - Human det
   d898c:	65746365 53002164 6f736e65 20322072     ected!.Sensor 2 
   d899c:	6e49202d 696c6176 75682064 206e616d     - Invalid human 
   d89ac:	65746564 726f7463 73656d20 65676173     detector message
   d89bc:	7845202e 74636570 30206465 20726f20     . Expected 0 or 
   d89cc:	72202c31 69656365 20646576 41007525     1, received %u.A
   d89dc:	74756f62 206f7420 6e616373 002e2e2e     bout to scan....
   d89ec:	6e756f46 20612064 65756c62 746f6f74     Found a bluetoot
   d89fc:	65642068 65636976 6441002e 73657264     h device..Addres
   d8a0c:	00203a73 6e756f46 55552064 203a4449     s: .Found UUID: 
   d8a1c:	6e655300 4e726f73 3165646f 49555520     .SensorNode1 UUI
   d8a2c:	00203a44 736e6553 6f4e726f 20326564     D: .SensorNode2 
   d8a3c:	44495555 5300203a 65636375 75667373     UUID: .Successfu
   d8a4c:	20796c6c 6e6e6f63 65746365 6f742064     lly connected to
   d8a5c:	6e657320 20726f73 65646f6e 00213120      sensor node 1!.
   d8a6c:	66376362 39643831 3463322d 30342d33     bc7f18d9-2c43-40
   d8a7c:	622d6538 2d353265 34663236 35343630     8e-be25-62f40645
   d8a8c:	63373839 35616500 61383432 33342d34     987c.ea5248a4-43
   d8a9c:	342d6363 2d383931 61613461 3239372d     cc-4198-a4aa-792
   d8aac:	37613030 33383035 39390035 32643061     00a750835.99a0d2
   d8abc:	312d3966 2d616663 33623234 6235622d     f9-1cfa-42b3-b5b
   d8acc:	62312d61 33346434 39333134 34006632     a-1b4d4341392f.4
   d8adc:	34656235 2d363561 35663834 3338342d     5be4a56-48f5-483
   d8aec:	62382d63 642d3162 65656633 63333334     c-8bb1-d3fee433c
   d8afc:	00633332 6c696146 74206465 6f63206f     23c.Failed to co
   d8b0c:	63656e6e 6f742074 6e657320 20726f73     nnect to sensor 
   d8b1c:	65646f6e 002e3120 736e6553 6e20726f     node 1..Sensor n
   d8b2c:	2065646f 6c612031 64616572 6f632079     ode 1 already co
   d8b3c:	63656e6e 2e646574 63755300 73736563     nnected..Success
   d8b4c:	6c6c7566 6f632079 63656e6e 20646574     fully connected 
   d8b5c:	73206f74 6f736e65 6f6e2072 32206564     to sensor node 2
   d8b6c:	38380021 66326162 312d6435 2d383965     !.88ba2f5d-1e98-
   d8b7c:	66613934 3936382d 30642d37 64363135     49af-8697-d0516d
   d8b8c:	62333066 62003965 64323834 2d313535     f03be9.b482d551-
   d8b9c:	65613363 6464342d 31622d65 632d3532     c3ae-4dde-b125-c
   d8bac:	34343265 39383764 00306236 6c696146     e244d7896b0.Fail
   d8bbc:	74206465 6f63206f 63656e6e 6f742074     ed to connect to
   d8bcc:	6e657320 20726f73 65646f6e 002e3220      sensor node 2..
   d8bdc:	736e6553 6e20726f 2065646f 6c612032     Sensor node 2 al
   d8bec:	64616572 6f632079 63656e6e 2e646574     ready connected.
   d8bfc:	20642500 69766564 20736563 6e756f66     .%d devices foun
   d8c0c:	6f460064 20646e75 736e6573 6e20726f     d.Found sensor n
   d8c1c:	2065646f 46002e31 646e756f 6e657320     ode 1..Found sen
   d8c2c:	20726f73 65646f6e 002e3220 65343537     sor node 2..754e
   d8c3c:	65356662 3365632d 33342d31 392d3030     bf5e-ce31-4300-9
   d8c4c:	2d356466 62663861 34656534 31313861     fd5-a8fb4ee4a811
   d8c5c:	37373900 64613832 39612d39 342d3839     .97728ad9-a998-4
   d8c6c:	2d393236 35353862 3265652d 63383536     629-b855-ee2658c
   d8c7c:	66313061 00000037                       a01f7...

000d8c84 <_ZTVN5spark13EthernetClassE>:
	...
   d8c8c:	000d4d57 000d4d4d 000d4d43 000d4d39     WM..MM..CM..9M..
   d8c9c:	000d4d2d 000d4d21 000d4d15 000d4d0d     -M..!M...M...M..
   d8cac:	000d4d03 000d4cf9 000d7e4d              .M...L..M~..

000d8cb8 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8cc0:	000d4f45 000d4f4b 000d63e5 000d4f75     EO..KO...c..uO..
   d8cd0:	000d4f47                                GO..

000d8cd4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8cdc:	000d4f3f 000d4f59 000d65a1 000d4f79     ?O..YO...e..yO..
   d8cec:	000d4f41                                AO..

000d8cf0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d8cf8:	000d4f39 000d4f67 000d5af7 000d4f7d     9O..gO...Z..}O..
   d8d08:	000d4f3b 69726977 622e676e 5300656c     ;O..wiring.ble.S
   d8d18:	74726174 73696420 65766f63 676e6972     tart discovering
   d8d28:	72657320 65636976 53002e73 74726174      services..Start
   d8d38:	73696420 65766f63 676e6972 61686320      discovering cha
   d8d48:	74636172 73697265 73636974 6550002e     racteristics..Pe
   d8d58:	64207265 63697665 73692065 73696d20     er device is mis
   d8d68:	676e6973 61460021 64656c69 206f7420     sing!.Failed to 
   d8d78:	65707061 7020646e 20726565 746e6543     append peer Cent
   d8d88:	206c6172 69766564 002e6563 6e6e6f43     ral device..Conn
   d8d98:	65746365 79622064 6e654320 6c617274     ected by Central
   d8da8:	76656420 2e656369 73694400 6e6e6f63      device..Disconn
   d8db8:	65746365 79622064 6d657220 2065746f     ected by remote 
   d8dc8:	69766564 002e6563 6e6e6143 6120746f     device..Cannot a
   d8dd8:	6e206464 70207765 20726565 69766564     dd new peer devi
   d8de8:	002e6563 2077654e 69726570 72656870     ce..New peripher
   d8df8:	69206c61 6f632073 63656e6e 2e646574     al is connected.
   d8e08:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d8e18:	69642064 766f6373 64657265 61686320     d discovered cha
   d8e28:	74636172 73697265 2e636974 69614600     racteristic..Fai
   d8e38:	2064656c 61206f74 6e657070 69642064     led to append di
   d8e48:	766f6373 64657265 72657320 65636976     scovered service
   d8e58:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d8e68:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d8e78:	73697265 2e636974 70754400 6163696c     eristic..Duplica
   d8e88:	20646574 72616863 65746361 74736972     ted characterist
   d8e98:	63206369 6f6e6e61 65622074 64646120     ic cannot be add
   d8ea8:	002e6465                                ed..

000d8eac <_ZN8particle7BleUuid9BASE_UUIDE>:
   d8eac:	5f9b34fb 80000080 00001000 00000000     .4._............

000d8ebc <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8ec4:	000d6831 000d6857 000d680b 000d7f5b     1h..Wh...h..[...

000d8ed4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d8edc:	000d6cad 000d6cc1 000d7609 000d6813     .l...l...v...h..
   d8eec:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d8efc:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d8f0c:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
   d8f1c:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
   d8f2c:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
   d8f3c:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
   d8f4c:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
   d8f5c:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
   d8f6c:	00642500 2800202c 00203a29 63005b20     .%d., .(): . [.c
   d8f7c:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
   d8f8c:	203d2073 000a0d00 66006e6c 6f63006e     s = ....ln.fn.co
   d8f9c:	64006564 69617465 6f6e006c 7400656e     de.detail.none.t
   d8fac:	65636172 666e6900 6177006f 65006e72     race.info.warn.e
   d8fbc:	726f7272 6e617000 61006369 00006c6c     rror.panic.all..

000d8fcc <_ZTVN5spark16StreamLogHandlerE>:
	...
   d8fd4:	000d6c81 000d6c99 000d7455 000d40cb     .l...l..Ut...@..

000d8fe4 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d8fec:	000d682f 000d6865 000d737d 000d6815     /h..eh..}s...h..

000d8ffc <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9004:	000d682d 000d6873 000d6bc5 000d6881     -h..sh...k...h..
   d9014:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d9024:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d9034:	63736100 656d6974 00000000              .asctime....

000d9040 <_ZTV9IPAddress>:
	...
   d9048:	000d78f1 000d78e1 000d78e3              .x...x...x..

000d9054 <_ZTV9USBSerial>:
	...
   d905c:	000d79c9 000d7a19 000d7a27 000d66ed     .y...z..'z...f..
   d906c:	000d7a05 000d79cb 000d79e1 000d7a13     .z...y...y...z..
   d907c:	000d79f7 000d79c5                       .y...y..

000d9084 <_ZTV11USARTSerial>:
	...
   d908c:	000d7add 000d7b2d 000d7b3b 000d66ed     .z..-{..;{...f..
   d909c:	000d7af1 000d7b13 000d7aff 000d7b27     .z...{...z..'{..
   d90ac:	000d7adf 000d7ae3                       .z...z..

000d90b4 <_ZTVN5spark9MeshClassE>:
	...
   d90bc:	000d7c4b 000d7c41 000d7c37 000d7c2d     K|..A|..7|..-|..
   d90cc:	000d7c21 000d7c15 000d7c09 000d7c01     !|...|...|...|..
   d90dc:	000d7bf7 000d7bed 000d7e4d              .{...{..M~..

000d90e8 <_ZTVN5spark9WiFiClassE>:
	...
   d90f0:	000d7dc7 000d7dbd 000d7db3 000d7d69     .}...}...}..i}..
   d9100:	000d7da7 000d7d9b 000d7d8f 000d7d87     .}...}...}...}..
   d9110:	000d7d7d 000d7d73 000d7e4d              }}..s}..M~..

000d911c <_ZTVN5spark12NetworkClassE>:
	...
   d9124:	000d7de5 000d7def 000d7df9 000d7e03     .}...}...}...~..
   d9134:	000d7e0d 000d7e19 000d7e25 000d7e31     .~...~..%~..1~..
   d9144:	000d7e39 000d7e43 000d7e4d 00302e30     9~..C~..M~..0.0.
   d9154:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   d9164:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000d9173 <_ZSt7nothrow>:
	...

000d9174 <_ctype_>:
   d9174:	20202000 20202020 28282020 20282828     .         ((((( 
   d9184:	20202020 20202020 20202020 20202020                     
   d9194:	10108820 10101010 10101010 10101010      ...............
   d91a4:	04040410 04040404 10040404 10101010     ................
   d91b4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d91c4:	01010101 01010101 01010101 10101010     ................
   d91d4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d91e4:	02020202 02020202 02020202 10101010     ................
   d91f4:	00000020 00000000 00000000 00000000      ...............
	...

000d9278 <__sf_fake_stdin>:
	...

000d9298 <__sf_fake_stdout>:
	...

000d92b8 <__sf_fake_stderr>:
	...
   d92d8:	00000043                                         C.

000d92da <link_const_variable_data_end>:
	...

000d92dc <link_constructors_location>:
   d92dc:	000d4719 	.word	0x000d4719
   d92e0:	000d4d61 	.word	0x000d4d61
   d92e4:	000d4d95 	.word	0x000d4d95
   d92e8:	000d66c5 	.word	0x000d66c5
   d92ec:	000d7445 	.word	0x000d7445
   d92f0:	000d7781 	.word	0x000d7781
   d92f4:	000d77b5 	.word	0x000d77b5
   d92f8:	000d7d19 	.word	0x000d7d19
   d92fc:	000d7dd1 	.word	0x000d7dd1
   d9300:	000d7f19 	.word	0x000d7f19
   d9304:	000d82f5 	.word	0x000d82f5
   d9308:	000d8379 	.word	0x000d8379
   d930c:	000d843d 	.word	0x000d843d
   d9310:	000d8501 	.word	0x000d8501

000d9314 <link_constructors_end>:
	...
