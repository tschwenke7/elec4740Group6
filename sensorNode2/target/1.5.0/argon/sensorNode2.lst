
d:/UoN/ELEC4470/Repo/elec4740Group6/sensorNode2/target/1.5.0/argon/sensorNode2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005c30  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9c50  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000084  2003e280  000d9c54  0001e280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000004ec  2003e308  2003e308  0002e308  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9cd8  000d9cd8  00029cd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9d00  000d9d00  00029d00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00104174  00000000  00000000  00029d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013a2c  00000000  00000000  0012de78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00022075  00000000  00000000  001418a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002be8  00000000  00000000  00163919  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000050b8  00000000  00000000  00166501  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00039026  00000000  00000000  0016b5b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002e06e  00000000  00000000  001a45df  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010d2e7  00000000  00000000  001d264d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000e1f8  00000000  00000000  002df934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f818 	bl	d9066 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f838 	bl	d90b2 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e280 	.word	0x2003e280
   d404c:	000d9c54 	.word	0x000d9c54
   d4050:	2003e304 	.word	0x2003e304
   d4054:	2003e308 	.word	0x2003e308
   d4058:	2003e7f4 	.word	0x2003e7f4

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f003 f995 	bl	d738c <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000d9c48 	.word	0x000d9c48
   d4084:	000d9c0c 	.word	0x000d9c0c

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f000 ba08 	b.w	d449c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f000 f915 	bl	d42bc <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f003 b93b 	b.w	d7310 <_post_loop>

000d409a <_Znwj>:
   d409a:	f000 bea3 	b.w	d4de4 <malloc>

000d409e <_ZdlPv>:
   d409e:	f000 bea9 	b.w	d4df4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bea7 	b.w	d4df4 <free>
	...

000d40a8 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a8:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40aa:	4a03      	ldr	r2, [pc, #12]	; (d40b8 <__cxa_pure_virtual+0x10>)
   d40ac:	2100      	movs	r1, #0
   d40ae:	200c      	movs	r0, #12
   d40b0:	f000 fdac 	bl	d4c0c <panic_>
   d40b4:	e7fe      	b.n	d40b4 <__cxa_pure_virtual+0xc>
   d40b6:	bf00      	nop
   d40b8:	000d48b9 	.word	0x000d48b9

000d40bc <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40bc:	7800      	ldrb	r0, [r0, #0]
   d40be:	fab0 f080 	clz	r0, r0
   d40c2:	0940      	lsrs	r0, r0, #5
   d40c4:	4770      	bx	lr

000d40c6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c6:	2301      	movs	r3, #1
   d40c8:	7003      	strb	r3, [r0, #0]
   d40ca:	4770      	bx	lr

000d40cc <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40cc:	4770      	bx	lr

000d40ce <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ce:	6a00      	ldr	r0, [r0, #32]
   d40d0:	6803      	ldr	r3, [r0, #0]
   d40d2:	68db      	ldr	r3, [r3, #12]
   d40d4:	4718      	bx	r3

000d40d6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d6:	b510      	push	{r4, lr}
   d40d8:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40da:	6800      	ldr	r0, [r0, #0]
   d40dc:	b108      	cbz	r0, d40e2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40de:	f000 fe89 	bl	d4df4 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40e2:	4620      	mov	r0, r4
   d40e4:	bd10      	pop	{r4, pc}
	...

000d40e8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ea:	b510      	push	{r4, lr}
   d40ec:	4604      	mov	r4, r0
   d40ee:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40f0:	f002 fa00 	bl	d64f4 <_ZN5spark10LogManager8instanceEv>
   d40f4:	4621      	mov	r1, r4
   d40f6:	f002 fbed 	bl	d68d4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40fa:	f003 fd0f 	bl	d7b1c <_Z16_fetch_usbserialv>
   d40fe:	f003 fd01 	bl	d7b04 <_ZN9USBSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d4102:	4620      	mov	r0, r4
   d4104:	4b04      	ldr	r3, [pc, #16]	; (d4118 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4106:	f840 3b04 	str.w	r3, [r0], #4
   d410a:	f002 fae9 	bl	d66e0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d410e:	4620      	mov	r0, r4
   d4110:	bd10      	pop	{r4, pc}
   d4112:	bf00      	nop
   d4114:	000d935c 	.word	0x000d935c
   d4118:	000d9344 	.word	0x000d9344

000d411c <_ZN5spark16SerialLogHandlerD0Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial.end();
    }
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	2124      	movs	r1, #36	; 0x24
   d4128:	f004 fa30 	bl	d858c <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4130:	b40e      	push	{r1, r2, r3}
   d4132:	b500      	push	{lr}
   d4134:	b08c      	sub	sp, #48	; 0x30
   d4136:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4138:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d413a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d413e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4140:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4144:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4146:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4148:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d414a:	aa04      	add	r2, sp, #16
   d414c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d414e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4150:	f000 fd6c 	bl	d4c2c <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4154:	b00c      	add	sp, #48	; 0x30
   d4156:	f85d eb04 	ldr.w	lr, [sp], #4
   d415a:	b003      	add	sp, #12
   d415c:	4770      	bx	lr

000d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d415e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4160:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4162:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d4164:	b17c      	cbz	r4, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4166:	6863      	ldr	r3, [r4, #4]
   d4168:	3b01      	subs	r3, #1
   d416a:	6063      	str	r3, [r4, #4]
   d416c:	b95b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d416e:	6823      	ldr	r3, [r4, #0]
   d4170:	4620      	mov	r0, r4
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4176:	68a3      	ldr	r3, [r4, #8]
   d4178:	3b01      	subs	r3, #1
   d417a:	60a3      	str	r3, [r4, #8]
   d417c:	b91b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	4620      	mov	r0, r4
   d4182:	68db      	ldr	r3, [r3, #12]
   d4184:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d4186:	4628      	mov	r0, r5
   d4188:	bd38      	pop	{r3, r4, r5, pc}
   d418a:	0000      	movs	r0, r0
   d418c:	0000      	movs	r0, r0
	...

000d4190 <_Z16readRainsteamAnav>:
}

/* Read the value on the rainsteam sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
int8_t readRainsteamAna(){
   d4190:	b510      	push	{r4, lr}
    // Read rainsteam pin
	uint16_t t = analogRead(rainsteamPin);
   d4192:	200f      	movs	r0, #15
}

/* Read the value on the rainsteam sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
int8_t readRainsteamAna(){
   d4194:	b086      	sub	sp, #24
    // Read rainsteam pin
	uint16_t t = analogRead(rainsteamPin);
   d4196:	f004 f974 	bl	d8482 <analogRead>

    //cloud debug stuff - can delete after testing
	char str[2];
	sprintf(str, "%u", t);
   d419a:	4919      	ldr	r1, [pc, #100]	; (d4200 <_Z16readRainsteamAnav+0x70>)
/* Read the value on the rainsteam sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
int8_t readRainsteamAna(){
    // Read rainsteam pin
	uint16_t t = analogRead(rainsteamPin);
   d419c:	4604      	mov	r4, r0

    //cloud debug stuff - can delete after testing
	char str[2];
	sprintf(str, "%u", t);
   d419e:	b282      	uxth	r2, r0
   d41a0:	a803      	add	r0, sp, #12
   d41a2:	f000 fe37 	bl	d4e14 <sprintf>
   d41a6:	4b17      	ldr	r3, [pc, #92]	; (d4204 <_Z16readRainsteamAnav+0x74>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41a8:	4917      	ldr	r1, [pc, #92]	; (d4208 <_Z16readRainsteamAnav+0x78>)
   d41aa:	781b      	ldrb	r3, [r3, #0]
   d41ac:	f88d 3000 	strb.w	r3, [sp]
   d41b0:	aa03      	add	r2, sp, #12
   d41b2:	233c      	movs	r3, #60	; 0x3c
   d41b4:	a804      	add	r0, sp, #16
   d41b6:	f003 fa57 	bl	d7668 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41ba:	a805      	add	r0, sp, #20
   d41bc:	f7ff ffcf 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Particle.publish("Rainsteam Analog", str, PUBLIC);
	
    //convert pin value to celsius
	int8_t degC = (int8_t) t*0.08 - 273;
   d41c0:	b260      	sxtb	r0, r4
   d41c2:	f004 fc93 	bl	d8aec <__aeabi_i2d>
   d41c6:	a30a      	add	r3, pc, #40	; (adr r3, d41f0 <_Z16readRainsteamAnav+0x60>)
   d41c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41cc:	f004 fcf4 	bl	d8bb8 <__aeabi_dmul>
   d41d0:	a309      	add	r3, pc, #36	; (adr r3, d41f8 <_Z16readRainsteamAnav+0x68>)
   d41d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d41d6:	f004 fb3b 	bl	d8850 <__aeabi_dsub>
   d41da:	f004 feff 	bl	d8fdc <__aeabi_d2iz>
   d41de:	b244      	sxtb	r4, r0
    Log.info("Read Rainsteam Analog: %d degrees celsius", degC);
   d41e0:	4622      	mov	r2, r4
   d41e2:	490a      	ldr	r1, [pc, #40]	; (d420c <_Z16readRainsteamAnav+0x7c>)
   d41e4:	480a      	ldr	r0, [pc, #40]	; (d4210 <_Z16readRainsteamAnav+0x80>)
   d41e6:	f7ff ffa3 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>

	return degC;
}
   d41ea:	4620      	mov	r0, r4
   d41ec:	b006      	add	sp, #24
   d41ee:	bd10      	pop	{r4, pc}
   d41f0:	47ae147b 	.word	0x47ae147b
   d41f4:	3fb47ae1 	.word	0x3fb47ae1
   d41f8:	00000000 	.word	0x00000000
   d41fc:	40711000 	.word	0x40711000
   d4200:	000d9495 	.word	0x000d9495
   d4204:	2003e30c 	.word	0x2003e30c
   d4208:	000d9396 	.word	0x000d9396
   d420c:	000d93a7 	.word	0x000d93a7
   d4210:	2003e3e8 	.word	0x2003e3e8

000d4214 <_Z10readLiquidv>:

/* Read the value on the liquid sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
uint16_t readLiquid(){
   d4214:	b510      	push	{r4, lr}
    uint16_t getS = analogRead(liquidPin);
   d4216:	200e      	movs	r0, #14
}

/* Read the value on the liquid sensor pin 
Analogue pin generates 12 bits of data, so store as a 2-byte uint
*/
uint16_t readLiquid(){
   d4218:	b086      	sub	sp, #24
    uint16_t getS = analogRead(liquidPin);
   d421a:	f004 f932 	bl	d8482 <analogRead>
   d421e:	b284      	uxth	r4, r0

    Log.info("Read liquid: %u", getS);
   d4220:	4622      	mov	r2, r4
   d4222:	490c      	ldr	r1, [pc, #48]	; (d4254 <_Z10readLiquidv+0x40>)
   d4224:	480c      	ldr	r0, [pc, #48]	; (d4258 <_Z10readLiquidv+0x44>)
   d4226:	f7ff ff83 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>

    //cloud debug stuff - can delete after testing
	char str[2];
	sprintf(str, "%u", getS);
   d422a:	4622      	mov	r2, r4
   d422c:	490b      	ldr	r1, [pc, #44]	; (d425c <_Z10readLiquidv+0x48>)
   d422e:	a803      	add	r0, sp, #12
   d4230:	f000 fdf0 	bl	d4e14 <sprintf>
   d4234:	4b0a      	ldr	r3, [pc, #40]	; (d4260 <_Z10readLiquidv+0x4c>)
   d4236:	490b      	ldr	r1, [pc, #44]	; (d4264 <_Z10readLiquidv+0x50>)
   d4238:	781b      	ldrb	r3, [r3, #0]
   d423a:	f88d 3000 	strb.w	r3, [sp]
   d423e:	aa03      	add	r2, sp, #12
   d4240:	233c      	movs	r3, #60	; 0x3c
   d4242:	a804      	add	r0, sp, #16
   d4244:	f003 fa10 	bl	d7668 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d4248:	a805      	add	r0, sp, #20
   d424a:	f7ff ff88 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Particle.publish("liquid", str, PUBLIC);
	
    return getS;
}
   d424e:	4620      	mov	r0, r4
   d4250:	b006      	add	sp, #24
   d4252:	bd10      	pop	{r4, pc}
   d4254:	000d93d1 	.word	0x000d93d1
   d4258:	2003e3e8 	.word	0x2003e3e8
   d425c:	000d9495 	.word	0x000d9495
   d4260:	2003e30c 	.word	0x2003e30c
   d4264:	000d93e1 	.word	0x000d93e1

000d4268 <_Z17readHumanDetectorv>:

/* Reads the PIR sensor. Returns 1 if signal is HIGH, 0 if LOW */
uint8_t readHumanDetector(){
   d4268:	b510      	push	{r4, lr}
    byte state = digitalRead(humanDetectorPin);
   d426a:	2003      	movs	r0, #3
	
    return getS;
}

/* Reads the PIR sensor. Returns 1 if signal is HIGH, 0 if LOW */
uint8_t readHumanDetector(){
   d426c:	b086      	sub	sp, #24
    byte state = digitalRead(humanDetectorPin);
   d426e:	f004 f8f5 	bl	d845c <digitalRead>
   d4272:	b2c4      	uxtb	r4, r0

    Log.info("Read PIR: %u", state);
   d4274:	4622      	mov	r2, r4
   d4276:	490c      	ldr	r1, [pc, #48]	; (d42a8 <_Z17readHumanDetectorv+0x40>)
   d4278:	480c      	ldr	r0, [pc, #48]	; (d42ac <_Z17readHumanDetectorv+0x44>)
   d427a:	f7ff ff59 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>

    //cloud debug stuff - can delete after testing
	char str[1];
	sprintf(str, "%u", state);
   d427e:	4622      	mov	r2, r4
   d4280:	490b      	ldr	r1, [pc, #44]	; (d42b0 <_Z17readHumanDetectorv+0x48>)
   d4282:	a803      	add	r0, sp, #12
   d4284:	f000 fdc6 	bl	d4e14 <sprintf>
   d4288:	4b0a      	ldr	r3, [pc, #40]	; (d42b4 <_Z17readHumanDetectorv+0x4c>)
   d428a:	490b      	ldr	r1, [pc, #44]	; (d42b8 <_Z17readHumanDetectorv+0x50>)
   d428c:	781b      	ldrb	r3, [r3, #0]
   d428e:	f88d 3000 	strb.w	r3, [sp]
   d4292:	aa03      	add	r2, sp, #12
   d4294:	233c      	movs	r3, #60	; 0x3c
   d4296:	a804      	add	r0, sp, #16
   d4298:	f003 f9e6 	bl	d7668 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   d429c:	a805      	add	r0, sp, #20
   d429e:	f7ff ff5e 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	Particle.publish("humanDetector", str, PUBLIC);

    return (uint8_t) state;
}
   d42a2:	4620      	mov	r0, r4
   d42a4:	b006      	add	sp, #24
   d42a6:	bd10      	pop	{r4, pc}
   d42a8:	000d93e8 	.word	0x000d93e8
   d42ac:	2003e3e8 	.word	0x2003e3e8
   d42b0:	000d9495 	.word	0x000d9495
   d42b4:	2003e30c 	.word	0x2003e30c
   d42b8:	000d93f5 	.word	0x000d93f5

000d42bc <loop>:
    //configure pins for input/output
    pinMode(humanDetectorPin, INPUT);
    //pinMode(ledPin, OUTPUT);
}

void loop() {
   d42bc:	b530      	push	{r4, r5, lr}
   d42be:	b08f      	sub	sp, #60	; 0x3c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d42c0:	f000 fb02 	bl	d48c8 <HAL_Timer_Get_Milli_Seconds>
        /* Check if it's time to take another reading for each sensor 
           If it is, update "lastUpdate" time, then read and update the appropriate characteristic
           A change in the characteristic will notify the connected cluster head
        */
        //rainsteam
        if(currentTime - lastRainsteamUpdate >= RAINSTEAM_READ_DELAY){
   d42c4:	4a49      	ldr	r2, [pc, #292]	; (d43ec <loop+0x130>)
   d42c6:	6813      	ldr	r3, [r2, #0]
   d42c8:	1ac3      	subs	r3, r0, r3
   d42ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d42ce:	4604      	mov	r4, r0
   d42d0:	d32c      	bcc.n	d432c <loop+0x70>
            lastRainsteamUpdate = currentTime;
   d42d2:	6010      	str	r0, [r2, #0]
            int8_t getValue = readRainsteamAna();
   d42d4:	f7ff ff5c 	bl	d4190 <_Z16readRainsteamAnav>
   d42d8:	a90e      	add	r1, sp, #56	; 0x38
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   d42da:	2201      	movs	r2, #1
   d42dc:	f801 0d31 	strb.w	r0, [r1, #-49]!
   d42e0:	2300      	movs	r3, #0
   d42e2:	4843      	ldr	r0, [pc, #268]	; (d43f0 <loop+0x134>)
   d42e4:	f001 f914 	bl	d5510 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            rainsteamSensorCharacteristic.setValue(getValue);

            //store data in buffer
            uint8_t* transmission[9];
            memcpy(transmission, &getValue, sizeof(getValue));
   d42e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d42ec:	f88d 3010 	strb.w	r3, [sp, #16]

}

/** Returns the current rainsteam in microseconds */
uint64_t getCurrentTime(){
    return Time.now();
   d42f0:	f002 ffae 	bl	d7250 <_ZN9TimeClass3nowEv>

            //store data in buffer
            uint8_t* transmission[9];
            memcpy(transmission, &getValue, sizeof(getValue));
            //record and append the sending time
            uint64_t sendTime = getCurrentTime();
   d42f4:	17c1      	asrs	r1, r0, #31
   d42f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
            memcpy(transmission + sizeof(getValue), &sendTime, sizeof(sendTime));
   d42fa:	aa02      	add	r2, sp, #8
   d42fc:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4300:	ab05      	add	r3, sp, #20
   d4302:	e883 0003 	stmia.w	r3, {r0, r1}
   d4306:	2224      	movs	r2, #36	; 0x24
   d4308:	2300      	movs	r3, #0
   d430a:	a904      	add	r1, sp, #16
   d430c:	4839      	ldr	r0, [pc, #228]	; (d43f4 <loop+0x138>)
   d430e:	f001 f8ff 	bl	d5510 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

            //send bluetooth transmission
            liquidSensorCharacteristic.setValue(transmission);

            //log reading
            rainsteamCloud = getValue;
   d4312:	f99d 5007 	ldrsb.w	r5, [sp, #7]
   d4316:	4628      	mov	r0, r5
   d4318:	f004 fbe8 	bl	d8aec <__aeabi_i2d>
   d431c:	4b36      	ldr	r3, [pc, #216]	; (d43f8 <loop+0x13c>)
            Log.info("Rain steam: %u", getValue);
   d431e:	462a      	mov	r2, r5

            //send bluetooth transmission
            liquidSensorCharacteristic.setValue(transmission);

            //log reading
            rainsteamCloud = getValue;
   d4320:	e9c3 0100 	strd	r0, r1, [r3]
            Log.info("Rain steam: %u", getValue);
   d4324:	4935      	ldr	r1, [pc, #212]	; (d43fc <loop+0x140>)
   d4326:	4836      	ldr	r0, [pc, #216]	; (d4400 <loop+0x144>)
   d4328:	f7ff ff02 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
        }
        //liquid
        if(currentTime - lastLiquidUpdate >= LIQUID_READ_DELAY){
   d432c:	4a35      	ldr	r2, [pc, #212]	; (d4404 <loop+0x148>)
   d432e:	6813      	ldr	r3, [r2, #0]
   d4330:	1ae3      	subs	r3, r4, r3
   d4332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   d4336:	d321      	bcc.n	d437c <loop+0xc0>
            lastLiquidUpdate = currentTime;
   d4338:	6014      	str	r4, [r2, #0]
            uint16_t getValue = readLiquid();
   d433a:	f7ff ff6b 	bl	d4214 <_Z10readLiquidv>
   d433e:	4605      	mov	r5, r0

            //store data in buffer
            uint8_t* transmission[10];
            memcpy(transmission, &getValue, sizeof(getValue));
   d4340:	f8ad 0010 	strh.w	r0, [sp, #16]

}

/** Returns the current rainsteam in microseconds */
uint64_t getCurrentTime(){
    return Time.now();
   d4344:	f002 ff84 	bl	d7250 <_ZN9TimeClass3nowEv>

            //store data in buffer
            uint8_t* transmission[10];
            memcpy(transmission, &getValue, sizeof(getValue));
            //record and append the sending time
            uint64_t sendTime = getCurrentTime();
   d4348:	17c1      	asrs	r1, r0, #31
   d434a:	e9cd 0102 	strd	r0, r1, [sp, #8]
            memcpy(transmission + sizeof(getValue), &sendTime, sizeof(sendTime));
   d434e:	aa02      	add	r2, sp, #8
   d4350:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4354:	ab06      	add	r3, sp, #24
   d4356:	e883 0003 	stmia.w	r3, {r0, r1}
   d435a:	2228      	movs	r2, #40	; 0x28
   d435c:	2300      	movs	r3, #0
   d435e:	a904      	add	r1, sp, #16
   d4360:	4824      	ldr	r0, [pc, #144]	; (d43f4 <loop+0x138>)
   d4362:	f001 f8d5 	bl	d5510 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

            //send bluetooth transmission
            liquidSensorCharacteristic.setValue(transmission);

            //log reading
            liquidCloud = getValue;
   d4366:	4628      	mov	r0, r5
   d4368:	f004 fbb0 	bl	d8acc <__aeabi_ui2d>
   d436c:	4b26      	ldr	r3, [pc, #152]	; (d4408 <loop+0x14c>)
            Log.info("liquid: %u", getValue);
   d436e:	462a      	mov	r2, r5

            //send bluetooth transmission
            liquidSensorCharacteristic.setValue(transmission);

            //log reading
            liquidCloud = getValue;
   d4370:	e9c3 0100 	strd	r0, r1, [r3]
            Log.info("liquid: %u", getValue);
   d4374:	4925      	ldr	r1, [pc, #148]	; (d440c <loop+0x150>)
   d4376:	4822      	ldr	r0, [pc, #136]	; (d4400 <loop+0x144>)
   d4378:	f7ff feda 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
        }
        //human detector
        if(currentTime - lastHumanDetectorUpdate >= HUMAN_DETECTOR_READ_DELAY){
   d437c:	4a24      	ldr	r2, [pc, #144]	; (d4410 <loop+0x154>)
   d437e:	6813      	ldr	r3, [r2, #0]
   d4380:	1ae3      	subs	r3, r4, r3
   d4382:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   d4386:	d32b      	bcc.n	d43e0 <loop+0x124>
            lastHumanDetectorUpdate = currentTime;
   d4388:	6014      	str	r4, [r2, #0]
            uint8_t getValue = readHumanDetector();
   d438a:	f7ff ff6d 	bl	d4268 <_Z17readHumanDetectorv>
            Log.info("Previous Human detector state: %u", lastHumandDetectorValue);
   d438e:	4d21      	ldr	r5, [pc, #132]	; (d4414 <loop+0x158>)
   d4390:	4921      	ldr	r1, [pc, #132]	; (d4418 <loop+0x15c>)
   d4392:	782a      	ldrb	r2, [r5, #0]
            Log.info("liquid: %u", getValue);
        }
        //human detector
        if(currentTime - lastHumanDetectorUpdate >= HUMAN_DETECTOR_READ_DELAY){
            lastHumanDetectorUpdate = currentTime;
            uint8_t getValue = readHumanDetector();
   d4394:	4604      	mov	r4, r0
            Log.info("Previous Human detector state: %u", lastHumandDetectorValue);
   d4396:	481a      	ldr	r0, [pc, #104]	; (d4400 <loop+0x144>)
   d4398:	f7ff feca 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
            //only send an update if the value has changed since last read,
            //i.e. a human has been detected or lost
            if(getValue != lastHumandDetectorValue){
   d439c:	782b      	ldrb	r3, [r5, #0]
   d439e:	42a3      	cmp	r3, r4
   d43a0:	d019      	beq.n	d43d6 <loop+0x11a>
                //store data in buffer
                uint8_t* transmission[9];
                memcpy(transmission, &getValue, sizeof(getValue));
   d43a2:	f88d 4010 	strb.w	r4, [sp, #16]

}

/** Returns the current rainsteam in microseconds */
uint64_t getCurrentTime(){
    return Time.now();
   d43a6:	f002 ff53 	bl	d7250 <_ZN9TimeClass3nowEv>
            if(getValue != lastHumandDetectorValue){
                //store data in buffer
                uint8_t* transmission[9];
                memcpy(transmission, &getValue, sizeof(getValue));
                //record and append the sending time
                uint64_t sendTime = getCurrentTime();
   d43aa:	17c1      	asrs	r1, r0, #31
   d43ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
                memcpy(transmission + sizeof(getValue), &sendTime, sizeof(sendTime));
   d43b0:	aa02      	add	r2, sp, #8
   d43b2:	e892 0003 	ldmia.w	r2, {r0, r1}
   d43b6:	ab05      	add	r3, sp, #20
   d43b8:	e883 0003 	stmia.w	r3, {r0, r1}
   d43bc:	2224      	movs	r2, #36	; 0x24
   d43be:	2300      	movs	r3, #0
   d43c0:	a904      	add	r1, sp, #16
   d43c2:	4816      	ldr	r0, [pc, #88]	; (d441c <loop+0x160>)
   d43c4:	f001 f8a4 	bl	d5510 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>

                //send bluetooth transmission
                humanDetectorCharacteristic.setValue(transmission);//send the value which was read
                lastHumandDetectorValue = getValue;//update seen/unseen state
   d43c8:	702c      	strb	r4, [r5, #0]

                //log reading
                humanDetectorCloud = getValue;//update cloud variable
   d43ca:	4620      	mov	r0, r4
   d43cc:	f004 fb7e 	bl	d8acc <__aeabi_ui2d>
   d43d0:	4b13      	ldr	r3, [pc, #76]	; (d4420 <loop+0x164>)
   d43d2:	e9c3 0100 	strd	r0, r1, [r3]
            }
            Log.info("Human detector: %u", getValue);
   d43d6:	4622      	mov	r2, r4
   d43d8:	4912      	ldr	r1, [pc, #72]	; (d4424 <loop+0x168>)
   d43da:	4809      	ldr	r0, [pc, #36]	; (d4400 <loop+0x144>)
   d43dc:	f7ff fea8 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
        }

        delay(100);
   d43e0:	2064      	movs	r0, #100	; 0x64
   d43e2:	f002 ff47 	bl	d7274 <delay>
    }
    else{
        Log.info("not connected yet... ");
        delay(500);
    }
}
   d43e6:	b00f      	add	sp, #60	; 0x3c
   d43e8:	bd30      	pop	{r4, r5, pc}
   d43ea:	bf00      	nop
   d43ec:	2003e388 	.word	0x2003e388
   d43f0:	2003e338 	.word	0x2003e338
   d43f4:	2003e378 	.word	0x2003e378
   d43f8:	2003e370 	.word	0x2003e370
   d43fc:	000d9403 	.word	0x000d9403
   d4400:	2003e3e8 	.word	0x2003e3e8
   d4404:	2003e32c 	.word	0x2003e32c
   d4408:	2003e320 	.word	0x2003e320
   d440c:	000d93d6 	.word	0x000d93d6
   d4410:	2003e328 	.word	0x2003e328
   d4414:	2003e348 	.word	0x2003e348
   d4418:	000d9412 	.word	0x000d9412
   d441c:	2003e330 	.word	0x2003e330
   d4420:	2003e340 	.word	0x2003e340
   d4424:	000d9434 	.word	0x000d9434

000d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4428:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d442a:	6804      	ldr	r4, [r0, #0]
   d442c:	6843      	ldr	r3, [r0, #4]
   d442e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4430:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d4432:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d4436:	42a6      	cmp	r6, r4
   d4438:	d004      	beq.n	d4444 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d443a:	4620      	mov	r0, r4
   d443c:	f000 fd8c 	bl	d4f58 <_ZN6StringD1Ev>
   d4440:	3414      	adds	r4, #20
   d4442:	e7f8      	b.n	d4436 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4444:	6828      	ldr	r0, [r5, #0]
   d4446:	f000 fcd5 	bl	d4df4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d444a:	4628      	mov	r0, r5
   d444c:	bd70      	pop	{r4, r5, r6, pc}

000d444e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d444e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4450:	460e      	mov	r6, r1
   d4452:	b091      	sub	sp, #68	; 0x44

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d4454:	2100      	movs	r1, #0
   d4456:	4604      	mov	r4, r0
   d4458:	6001      	str	r1, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d445a:	6041      	str	r1, [r0, #4]
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d445c:	ad0b      	add	r5, sp, #44	; 0x2c
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
        BleUuid cUuid(charUuid);
   d445e:	4619      	mov	r1, r3
   d4460:	a806      	add	r0, sp, #24
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4462:	4617      	mov	r7, r2
        BleUuid cUuid(charUuid);
   d4464:	f000 ff82 	bl	d536c <_ZN8particle7BleUuidC1EPKc>
        BleUuid sUuid(svcUuid);
   d4468:	9916      	ldr	r1, [sp, #88]	; 0x58
   d446a:	4628      	mov	r0, r5
   d446c:	f000 ff7e 	bl	d536c <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4470:	aa10      	add	r2, sp, #64	; 0x40
   d4472:	783b      	ldrb	r3, [r7, #0]
   d4474:	f802 3d2c 	strb.w	r3, [r2, #-44]!
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4478:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d447a:	9302      	str	r3, [sp, #8]
   d447c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d447e:	9301      	str	r3, [sp, #4]
   d4480:	4620      	mov	r0, r4
   d4482:	9500      	str	r5, [sp, #0]
   d4484:	ab06      	add	r3, sp, #24
   d4486:	4631      	mov	r1, r6
   d4488:	f001 fc9c 	bl	d5dc4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d448c:	4620      	mov	r0, r4
   d448e:	b011      	add	sp, #68	; 0x44
   d4490:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4492 <_ZN10CloudClass8variableIA14_cIRdEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4492:	2300      	movs	r3, #0
   d4494:	2209      	movs	r2, #9
   d4496:	f000 bc75 	b.w	d4d84 <spark_variable>
	...

000d449c <setup>:
double lightCloud = 0;
double liquidCloud = 0;
double humanDetectorCloud = 0;

/* Initial setup */
void setup() {
   d449c:	b510      	push	{r4, lr}
   d449e:	b092      	sub	sp, #72	; 0x48
    const uint8_t val = 0x01;
   d44a0:	a812      	add	r0, sp, #72	; 0x48
   d44a2:	2201      	movs	r2, #1
   d44a4:	f800 2d3b 	strb.w	r2, [r0, #-59]!
    dct_write_app_data(&val, DCT_SETUP_DONE_OFFSET, 1);
   d44a8:	f641 71c6 	movw	r1, #8134	; 0x1fc6
   d44ac:	f000 fb66 	bl	d4b7c <dct_write_app_data>
    (void)logHandler; // Does nothing, just to eliminate the unused variable warning
    
    /* setup debug variables */
    Particle.variable("rainsteam", rainsteamCloud);
   d44b0:	4931      	ldr	r1, [pc, #196]	; (d4578 <setup+0xdc>)
   d44b2:	4832      	ldr	r0, [pc, #200]	; (d457c <setup+0xe0>)
   d44b4:	f7ff ffed 	bl	d4492 <_ZN10CloudClass8variableIA14_cIRdEEEbRKT_DpOT0_>
    Particle.variable("light", lightCloud);
   d44b8:	4931      	ldr	r1, [pc, #196]	; (d4580 <setup+0xe4>)
   d44ba:	4832      	ldr	r0, [pc, #200]	; (d4584 <setup+0xe8>)
   d44bc:	f7ff ffe9 	bl	d4492 <_ZN10CloudClass8variableIA14_cIRdEEEbRKT_DpOT0_>
    Particle.variable("liquid", liquidCloud);
   d44c0:	4931      	ldr	r1, [pc, #196]	; (d4588 <setup+0xec>)
   d44c2:	4832      	ldr	r0, [pc, #200]	; (d458c <setup+0xf0>)
   d44c4:	f7ff ffe5 	bl	d4492 <_ZN10CloudClass8variableIA14_cIRdEEEbRKT_DpOT0_>
    Particle.variable("humanDetector", humanDetectorCloud);
   d44c8:	4931      	ldr	r1, [pc, #196]	; (d4590 <setup+0xf4>)
   d44ca:	4832      	ldr	r0, [pc, #200]	; (d4594 <setup+0xf8>)
   d44cc:	f7ff ffe1 	bl	d4492 <_ZN10CloudClass8variableIA14_cIRdEEEbRKT_DpOT0_>
    
    /* Setup bluetooth characteristics and advertise sensorNode1Service to be connected to by the clusterhead */
    BLE.on();//activate BT
   d44d0:	f001 f8d0 	bl	d5674 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44d4:	f001 f914 	bl	d5700 <_ZNK8particle14BleLocalDevice2onEv>

    //add characteristics
    BLE.addCharacteristic(rainsteamSensorCharacteristic);
   d44d8:	f001 f8cc 	bl	d5674 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44dc:	4a2e      	ldr	r2, [pc, #184]	; (d4598 <setup+0xfc>)
   d44de:	4601      	mov	r1, r0
   d44e0:	a809      	add	r0, sp, #36	; 0x24
   d44e2:	f001 fd23 	bl	d5f2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44e6:	a809      	add	r0, sp, #36	; 0x24
   d44e8:	f001 f97c 	bl	d57e4 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(liquidSensorCharacteristic);
   d44ec:	f001 f8c2 	bl	d5674 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d44f0:	4a2a      	ldr	r2, [pc, #168]	; (d459c <setup+0x100>)
   d44f2:	4601      	mov	r1, r0
   d44f4:	a809      	add	r0, sp, #36	; 0x24
   d44f6:	f001 fd19 	bl	d5f2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d44fa:	a809      	add	r0, sp, #36	; 0x24
   d44fc:	f001 f972 	bl	d57e4 <_ZN8particle17BleCharacteristicD1Ev>
    BLE.addCharacteristic(humanDetectorCharacteristic);
   d4500:	f001 f8b8 	bl	d5674 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4504:	4a26      	ldr	r2, [pc, #152]	; (d45a0 <setup+0x104>)
   d4506:	4601      	mov	r1, r0
   d4508:	a809      	add	r0, sp, #36	; 0x24
   d450a:	f001 fd0f 	bl	d5f2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d450e:	a809      	add	r0, sp, #36	; 0x24
   d4510:	f001 f968 	bl	d57e4 <_ZN8particle17BleCharacteristicD1Ev>

    //data to be advertised
    BleAdvertisingData advData;
   d4514:	a809      	add	r0, sp, #36	; 0x24
   d4516:	f000 ff93 	bl	d5440 <_ZN8particle18BleAdvertisingDataC1Ev>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d451a:	4b22      	ldr	r3, [pc, #136]	; (d45a4 <setup+0x108>)
   d451c:	a804      	add	r0, sp, #16
   d451e:	6819      	ldr	r1, [r3, #0]
   d4520:	f000 ff24 	bl	d536c <_ZN8particle7BleUuidC1EPKc>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4524:	a804      	add	r0, sp, #16
   d4526:	f000 fe6d 	bl	d5204 <_ZNK8particle7BleUuid4typeEv>
   d452a:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d452c:	a804      	add	r0, sp, #16
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
   d452e:	b944      	cbnz	r4, d4542 <setup+0xa6>
            uint16_t uuid16 = tempUUID.shorted();
   d4530:	f000 fe86 	bl	d5240 <_ZNK8particle7BleUuid7shortedEv>
   d4534:	aa12      	add	r2, sp, #72	; 0x48
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4536:	2302      	movs	r3, #2

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
        if (tempUUID.type() == BleUuidType::SHORT) {
            uint16_t uuid16 = tempUUID.shorted();
   d4538:	f822 0d3a 	strh.w	r0, [r2, #-58]!
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d453c:	2103      	movs	r1, #3
   d453e:	9400      	str	r4, [sp, #0]
   d4540:	e006      	b.n	d4550 <setup+0xb4>
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d4542:	f000 fe82 	bl	d524a <_ZNK8particle7BleUuid8rawBytesEv>
   d4546:	2300      	movs	r3, #0
   d4548:	9300      	str	r3, [sp, #0]
   d454a:	4602      	mov	r2, r0
   d454c:	2310      	movs	r3, #16
   d454e:	2107      	movs	r1, #7
   d4550:	a809      	add	r0, sp, #36	; 0x24
   d4552:	f000 ff2e 	bl	d53b2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
    advData.appendServiceUUID(sensorNode2ServiceUuid);

    // Continuously advertise when not connected to clusterhead
    Log.info("Start advertising");
   d4556:	4914      	ldr	r1, [pc, #80]	; (d45a8 <setup+0x10c>)
   d4558:	4814      	ldr	r0, [pc, #80]	; (d45ac <setup+0x110>)
   d455a:	f7ff fde9 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
    BLE.advertise(&advData);
   d455e:	f001 f889 	bl	d5674 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4562:	2200      	movs	r2, #0
   d4564:	a909      	add	r1, sp, #36	; 0x24
   d4566:	f001 f901 	bl	d576c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>

    //configure pins for input/output
    pinMode(humanDetectorPin, INPUT);
   d456a:	2100      	movs	r1, #0
   d456c:	2003      	movs	r0, #3
   d456e:	f003 ff64 	bl	d843a <pinMode>
    //pinMode(ledPin, OUTPUT);
}
   d4572:	b012      	add	sp, #72	; 0x48
   d4574:	bd10      	pop	{r4, pc}
   d4576:	bf00      	nop
   d4578:	2003e370 	.word	0x2003e370
   d457c:	000d9498 	.word	0x000d9498
   d4580:	2003e380 	.word	0x2003e380
   d4584:	000d94a2 	.word	0x000d94a2
   d4588:	2003e320 	.word	0x2003e320
   d458c:	000d93e1 	.word	0x000d93e1
   d4590:	2003e340 	.word	0x2003e340
   d4594:	000d93f5 	.word	0x000d93f5
   d4598:	2003e338 	.word	0x2003e338
   d459c:	2003e378 	.word	0x2003e378
   d45a0:	2003e330 	.word	0x2003e330
   d45a4:	2003e288 	.word	0x2003e288
   d45a8:	000d94a8 	.word	0x000d94a8
   d45ac:	2003e3e8 	.word	0x2003e3e8

000d45b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d45b0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d45b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d45b4:	4606      	mov	r6, r0
   d45b6:	460c      	mov	r4, r1
   d45b8:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d45ba:	d916      	bls.n	d45ea <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d45bc:	4290      	cmp	r0, r2
   d45be:	d215      	bcs.n	d45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d45c0:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d45c4:	1a6c      	subs	r4, r5, r1
   d45c6:	f1a1 0714 	sub.w	r7, r1, #20
   d45ca:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d45cc:	42af      	cmp	r7, r5
   d45ce:	d01c      	beq.n	d460a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d45d0:	b12c      	cbz	r4, d45de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d45d2:	4629      	mov	r1, r5
   d45d4:	4620      	mov	r0, r4
   d45d6:	f000 fcaf 	bl	d4f38 <_ZN6StringC1EOS_>
   d45da:	7c2b      	ldrb	r3, [r5, #16]
   d45dc:	7423      	strb	r3, [r4, #16]
   d45de:	4628      	mov	r0, r5
   d45e0:	f000 fcba 	bl	d4f58 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d45e4:	3d14      	subs	r5, #20
   d45e6:	3c14      	subs	r4, #20
   d45e8:	e7f0      	b.n	d45cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d45ea:	d00e      	beq.n	d460a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d45ec:	42ac      	cmp	r4, r5
   d45ee:	d00c      	beq.n	d460a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d45f0:	b12e      	cbz	r6, d45fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d45f2:	4621      	mov	r1, r4
   d45f4:	4630      	mov	r0, r6
   d45f6:	f000 fc9f 	bl	d4f38 <_ZN6StringC1EOS_>
   d45fa:	7c23      	ldrb	r3, [r4, #16]
   d45fc:	7433      	strb	r3, [r6, #16]
   d45fe:	4620      	mov	r0, r4
   d4600:	f000 fcaa 	bl	d4f58 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4604:	3414      	adds	r4, #20
   d4606:	3614      	adds	r6, #20
   d4608:	e7f0      	b.n	d45ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d460a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d460c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4610:	2300      	movs	r3, #0
   d4612:	6003      	str	r3, [r0, #0]
   d4614:	6043      	str	r3, [r0, #4]
   d4616:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4618:	684e      	ldr	r6, [r1, #4]
   d461a:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d461c:	4604      	mov	r4, r0
   d461e:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4620:	dd24      	ble.n	d466c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4622:	f04f 0814 	mov.w	r8, #20
   d4626:	fb08 f006 	mul.w	r0, r8, r6
   d462a:	f000 fbdb 	bl	d4de4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d462e:	4605      	mov	r5, r0
   d4630:	b1e0      	cbz	r0, d466c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4632:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4636:	fb08 1202 	mla	r2, r8, r2, r1
   d463a:	f7ff ffb9 	bl	d45b0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d463e:	6820      	ldr	r0, [r4, #0]
   d4640:	f000 fbd8 	bl	d4df4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4644:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4646:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4648:	683e      	ldr	r6, [r7, #0]
   d464a:	687b      	ldr	r3, [r7, #4]
   d464c:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4650:	4546      	cmp	r6, r8
   d4652:	d009      	beq.n	d4668 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4654:	b12d      	cbz	r5, d4662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4656:	4631      	mov	r1, r6
   d4658:	4628      	mov	r0, r5
   d465a:	f000 fce6 	bl	d502a <_ZN6StringC1ERKS_>
   d465e:	7c33      	ldrb	r3, [r6, #16]
   d4660:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4662:	3614      	adds	r6, #20
   d4664:	3514      	adds	r5, #20
   d4666:	e7f3      	b.n	d4650 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d4668:	687b      	ldr	r3, [r7, #4]
   d466a:	6063      	str	r3, [r4, #4]
    }
}
   d466c:	4620      	mov	r0, r4
   d466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4674 <_GLOBAL__sub_I_SystemMode>:
    sprintf(str, "%u", current);
	Particle.publish("Current (not currently implemented)", str, PUBLIC);

    Log.info("Read current (not currently implemented): %u", current);
    return current;
   d4674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4678:	4b4b      	ldr	r3, [pc, #300]	; (d47a8 <_GLOBAL__sub_I_SystemMode+0x134>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d467a:	4d4c      	ldr	r5, [pc, #304]	; (d47ac <_GLOBAL__sub_I_SystemMode+0x138>)
 * Description: code to flash to the "sensor node 2" argon for assignment 2
 * Author: Tom Schwenke, Edward Ingle
 * Date: 20/05/2020
 */

SYSTEM_MODE(AUTOMATIC);     //In automatic mode so it can connect to cloud
   d467c:	4e4c      	ldr	r6, [pc, #304]	; (d47b0 <_GLOBAL__sub_I_SystemMode+0x13c>)
//duration in millis to wait between reads
const uint16_t RAINSTEAM_READ_DELAY = 1000;
unsigned long lastRainsteamUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* rainsteamSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic rainsteamSensorCharacteristic("rainsteam",
   d467e:	f8df 916c 	ldr.w	r9, [pc, #364]	; d47ec <_GLOBAL__sub_I_SystemMode+0x178>
    sprintf(str, "%u", current);
	Particle.publish("Current (not currently implemented)", str, PUBLIC);

    Log.info("Read current (not currently implemented): %u", current);
    return current;
   d4682:	b091      	sub	sp, #68	; 0x44
   d4684:	2400      	movs	r4, #0
   d4686:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4688:	f000 f8ce 	bl	d4828 <HAL_Pin_Map>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d468c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d4690:	816b      	strh	r3, [r5, #10]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4692:	602c      	str	r4, [r5, #0]
   d4694:	80ac      	strh	r4, [r5, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4696:	71ac      	strb	r4, [r5, #6]
   d4698:	812c      	strh	r4, [r5, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d469a:	2001      	movs	r0, #1
   d469c:	f000 fae6 	bl	d4c6c <set_system_mode>
 * Description: code to flash to the "sensor node 2" argon for assignment 2
 * Author: Tom Schwenke, Edward Ingle
 * Date: 20/05/2020
 */

SYSTEM_MODE(AUTOMATIC);     //In automatic mode so it can connect to cloud
   d46a0:	4632      	mov	r2, r6
   d46a2:	4944      	ldr	r1, [pc, #272]	; (d47b4 <_GLOBAL__sub_I_SystemMode+0x140>)
   d46a4:	4628      	mov	r0, r5
   d46a6:	f003 ff63 	bl	d8570 <__aeabi_atexit>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d46aa:	9404      	str	r4, [sp, #16]
   d46ac:	9405      	str	r4, [sp, #20]
   d46ae:	9406      	str	r4, [sp, #24]
namespace spark {

class SerialLogHandler: public StreamLogHandler {
public:
    explicit SerialLogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial, level, filters) {
   d46b0:	f003 fa34 	bl	d7b1c <_Z16_fetch_usbserialv>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d46b4:	4d40      	ldr	r5, [pc, #256]	; (d47b8 <_GLOBAL__sub_I_SystemMode+0x144>)
   d46b6:	4680      	mov	r8, r0
   d46b8:	a904      	add	r1, sp, #16
   d46ba:	a807      	add	r0, sp, #28
   d46bc:	f7ff ffa6 	bl	d460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d46c0:	462f      	mov	r7, r5
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d46c2:	a907      	add	r1, sp, #28
   d46c4:	a80a      	add	r0, sp, #40	; 0x28
   d46c6:	f7ff ffa1 	bl	d460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d46ca:	4b3c      	ldr	r3, [pc, #240]	; (d47bc <_GLOBAL__sub_I_SystemMode+0x148>)
   d46cc:	f847 3b04 	str.w	r3, [r7], #4
   d46d0:	a90a      	add	r1, sp, #40	; 0x28
   d46d2:	a80d      	add	r0, sp, #52	; 0x34
   d46d4:	f7ff ff9a 	bl	d460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d46d8:	aa0d      	add	r2, sp, #52	; 0x34
   d46da:	2101      	movs	r1, #1
   d46dc:	4638      	mov	r0, r7
   d46de:	f002 fa60 	bl	d6ba2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d46e2:	a80d      	add	r0, sp, #52	; 0x34
   d46e4:	f7ff fea0 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d46e8:	a80a      	add	r0, sp, #40	; 0x28
   d46ea:	f7ff fe9d 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d46ee:	4b34      	ldr	r3, [pc, #208]	; (d47c0 <_GLOBAL__sub_I_SystemMode+0x14c>)
   d46f0:	602b      	str	r3, [r5, #0]
   d46f2:	f8c5 8020 	str.w	r8, [r5, #32]
   d46f6:	a807      	add	r0, sp, #28
   d46f8:	f7ff fe96 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d46fc:	4b31      	ldr	r3, [pc, #196]	; (d47c4 <_GLOBAL__sub_I_SystemMode+0x150>)
   d46fe:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4700:	f003 fa0c 	bl	d7b1c <_Z16_fetch_usbserialv>
   d4704:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4708:	f003 f9f8 	bl	d7afc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d470c:	f001 fef2 	bl	d64f4 <_ZN5spark10LogManager8instanceEv>
   d4710:	4629      	mov	r1, r5
   d4712:	f002 f9d9 	bl	d6ac8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d4716:	a804      	add	r0, sp, #16
   d4718:	f7ff fe86 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
//duration in millis to wait between reads
const uint16_t RAINSTEAM_READ_DELAY = 1000;
unsigned long lastRainsteamUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* rainsteamSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic rainsteamSensorCharacteristic("rainsteam",
   d471c:	4f2a      	ldr	r7, [pc, #168]	; (d47c8 <_GLOBAL__sub_I_SystemMode+0x154>)
 * Date: 20/05/2020
 */

SYSTEM_MODE(AUTOMATIC);     //In automatic mode so it can connect to cloud

SerialLogHandler logHandler(LOG_LEVEL_TRACE);
   d471e:	492b      	ldr	r1, [pc, #172]	; (d47cc <_GLOBAL__sub_I_SystemMode+0x158>)
   d4720:	4632      	mov	r2, r6
   d4722:	4628      	mov	r0, r5
   d4724:	f003 ff24 	bl	d8570 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t RAINSTEAM_READ_DELAY = 1000;
unsigned long lastRainsteamUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* rainsteamSensorUuid("bc7f18d9-2c43-408e-be25-62f40645987c");
BleCharacteristic rainsteamSensorCharacteristic("rainsteam",
   d4728:	9402      	str	r4, [sp, #8]
   d472a:	9401      	str	r4, [sp, #4]
   d472c:	683b      	ldr	r3, [r7, #0]
   d472e:	9300      	str	r3, [sp, #0]
   d4730:	4b27      	ldr	r3, [pc, #156]	; (d47d0 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d4732:	4d28      	ldr	r5, [pc, #160]	; (d47d4 <_GLOBAL__sub_I_SystemMode+0x160>)
   d4734:	681b      	ldr	r3, [r3, #0]
   d4736:	4928      	ldr	r1, [pc, #160]	; (d47d8 <_GLOBAL__sub_I_SystemMode+0x164>)
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4738:	f04f 0810 	mov.w	r8, #16
   d473c:	aa0d      	add	r2, sp, #52	; 0x34
   d473e:	4648      	mov	r0, r9
   d4740:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
   d4744:	f7ff fe83 	bl	d444e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d4748:	4632      	mov	r2, r6
   d474a:	4629      	mov	r1, r5
   d474c:	4648      	mov	r0, r9
   d474e:	f003 ff0f 	bl	d8570 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t LIQUID_READ_DELAY = 1000;
unsigned long lastLiquidUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* liquidSensorUuid("88ba2f5d-1e98-49af-8697-d0516df03be9");
BleCharacteristic liquidSensorCharacteristic("liquid",
   d4752:	9402      	str	r4, [sp, #8]
   d4754:	9401      	str	r4, [sp, #4]
   d4756:	683b      	ldr	r3, [r7, #0]
   d4758:	9300      	str	r3, [sp, #0]
   d475a:	f8df 9094 	ldr.w	r9, [pc, #148]	; d47f0 <_GLOBAL__sub_I_SystemMode+0x17c>
   d475e:	4b1f      	ldr	r3, [pc, #124]	; (d47dc <_GLOBAL__sub_I_SystemMode+0x168>)
   d4760:	491f      	ldr	r1, [pc, #124]	; (d47e0 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d4762:	681b      	ldr	r3, [r3, #0]
   d4764:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
   d4768:	aa0d      	add	r2, sp, #52	; 0x34
   d476a:	4648      	mov	r0, r9
   d476c:	f7ff fe6f 	bl	d444e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d4770:	4632      	mov	r2, r6
   d4772:	4629      	mov	r1, r5
   d4774:	4648      	mov	r0, r9
   d4776:	f003 fefb 	bl	d8570 <__aeabi_atexit>
//duration in millis to wait between reads
const uint16_t HUMAN_DETECTOR_READ_DELAY = 2000;
unsigned long lastHumanDetectorUpdate = 0;//last absolute time a recording was taken
//advertised bluetooth characteristic
const char* humanDetectorUuid("b482d551-c3ae-4dde-b125-ce244d7896b0");
BleCharacteristic humanDetectorCharacteristic("pir",
   d477a:	9402      	str	r4, [sp, #8]
   d477c:	9401      	str	r4, [sp, #4]
   d477e:	683b      	ldr	r3, [r7, #0]
   d4780:	9300      	str	r3, [sp, #0]
   d4782:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
   d4786:	4b17      	ldr	r3, [pc, #92]	; (d47e4 <_GLOBAL__sub_I_SystemMode+0x170>)
   d4788:	f8df 8068 	ldr.w	r8, [pc, #104]	; d47f4 <_GLOBAL__sub_I_SystemMode+0x180>
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	4916      	ldr	r1, [pc, #88]	; (d47e8 <_GLOBAL__sub_I_SystemMode+0x174>)
   d4790:	aa0d      	add	r2, sp, #52	; 0x34
   d4792:	4640      	mov	r0, r8
   d4794:	f7ff fe5b 	bl	d444e <_ZN8particle17BleCharacteristicC1IPKcS3_EES3_NS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESE_>
   d4798:	4632      	mov	r2, r6
   d479a:	4629      	mov	r1, r5
   d479c:	4640      	mov	r0, r8
   d479e:	f003 fee7 	bl	d8570 <__aeabi_atexit>
    sprintf(str, "%u", current);
	Particle.publish("Current (not currently implemented)", str, PUBLIC);

    Log.info("Read current (not currently implemented): %u", current);
    return current;
   d47a2:	b011      	add	sp, #68	; 0x44
   d47a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d47a8:	2003e30c 	.word	0x2003e30c
   d47ac:	2003e310 	.word	0x2003e310
   d47b0:	2003e308 	.word	0x2003e308
   d47b4:	000d40d7 	.word	0x000d40d7
   d47b8:	2003e34c 	.word	0x2003e34c
   d47bc:	000d9344 	.word	0x000d9344
   d47c0:	000d98c0 	.word	0x000d98c0
   d47c4:	000d935c 	.word	0x000d935c
   d47c8:	2003e288 	.word	0x2003e288
   d47cc:	000d40e9 	.word	0x000d40e9
   d47d0:	2003e28c 	.word	0x2003e28c
   d47d4:	000d57e5 	.word	0x000d57e5
   d47d8:	000d9498 	.word	0x000d9498
   d47dc:	2003e280 	.word	0x2003e280
   d47e0:	000d93e1 	.word	0x000d93e1
   d47e4:	2003e284 	.word	0x2003e284
   d47e8:	000d94ba 	.word	0x000d94ba
   d47ec:	2003e338 	.word	0x2003e338
   d47f0:	2003e378 	.word	0x2003e378
   d47f4:	2003e330 	.word	0x2003e330

000d47f8 <_GLOBAL__sub_I__ZN3DHTC2Ehh>:
		return true;
	}

	return false;

}
   d47f8:	b508      	push	{r3, lr}
   d47fa:	f000 f815 	bl	d4828 <HAL_Pin_Map>
   d47fe:	4b01      	ldr	r3, [pc, #4]	; (d4804 <_GLOBAL__sub_I__ZN3DHTC2Ehh+0xc>)
   d4800:	6018      	str	r0, [r3, #0]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	2003e38c 	.word	0x2003e38c

000d4808 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <netdb_freeaddrinfo+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	689b      	ldr	r3, [r3, #8]
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030268 	.word	0x00030268

000d4818 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <netdb_getaddrinfo+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	68db      	ldr	r3, [r3, #12]
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030268 	.word	0x00030268

000d4828 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <HAL_Pin_Map+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	681b      	ldr	r3, [r3, #0]
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	0003022c 	.word	0x0003022c

000d4838 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <HAL_Validate_Pin_Function+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	685b      	ldr	r3, [r3, #4]
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	0003022c 	.word	0x0003022c

000d4848 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <HAL_Pin_Mode+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	689b      	ldr	r3, [r3, #8]
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	0003022c 	.word	0x0003022c

000d4858 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <HAL_Get_Pin_Mode+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	68db      	ldr	r3, [r3, #12]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	0003022c 	.word	0x0003022c

000d4868 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <HAL_GPIO_Read+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	695b      	ldr	r3, [r3, #20]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	0003022c 	.word	0x0003022c

000d4878 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <HAL_ADC_Read+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	0003022c 	.word	0x0003022c

000d4888 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <HAL_SPI_Init+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	69db      	ldr	r3, [r3, #28]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030230 	.word	0x00030230

000d4898 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <HAL_SPI_Is_Enabled+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	6a1b      	ldr	r3, [r3, #32]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030230 	.word	0x00030230

000d48a8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <HAL_RNG_GetRandomNumber+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	685b      	ldr	r3, [r3, #4]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030218 	.word	0x00030218

000d48b8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <HAL_Delay_Microseconds+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	68db      	ldr	r3, [r3, #12]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030218 	.word	0x00030218

000d48c8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	695b      	ldr	r3, [r3, #20]
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030218 	.word	0x00030218

000d48d8 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <HAL_RTC_Get_UnixTime+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	69db      	ldr	r3, [r3, #28]
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030218 	.word	0x00030218

000d48e8 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <HAL_RTC_Time_Is_Valid+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030218 	.word	0x00030218

000d48f8 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <hal_ble_stack_init+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	689b      	ldr	r3, [r3, #8]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	00030278 	.word	0x00030278

000d4908 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <hal_ble_gap_set_advertising_data+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	00030278 	.word	0x00030278

000d4918 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <hal_ble_gap_set_scan_response_data+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	00030278 	.word	0x00030278

000d4928 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <hal_ble_gap_start_advertising+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	00030278 	.word	0x00030278

000d4938 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b03      	ldr	r3, [pc, #12]	; (d4948 <hal_ble_gap_disconnect+0x10>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4942:	9301      	str	r3, [sp, #4]
   d4944:	bd08      	pop	{r3, pc}
   d4946:	0000      	.short	0x0000
   d4948:	00030278 	.word	0x00030278

000d494c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d494c:	b508      	push	{r3, lr}
   d494e:	4b03      	ldr	r3, [pc, #12]	; (d495c <hal_ble_gatt_server_add_service+0x10>)
   d4950:	681b      	ldr	r3, [r3, #0]
   d4952:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4956:	9301      	str	r3, [sp, #4]
   d4958:	bd08      	pop	{r3, pc}
   d495a:	0000      	.short	0x0000
   d495c:	00030278 	.word	0x00030278

000d4960 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b03      	ldr	r3, [pc, #12]	; (d4970 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d496a:	9301      	str	r3, [sp, #4]
   d496c:	bd08      	pop	{r3, pc}
   d496e:	0000      	.short	0x0000
   d4970:	00030278 	.word	0x00030278

000d4974 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b03      	ldr	r3, [pc, #12]	; (d4984 <hal_ble_gatt_client_write_with_response+0x10>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d497e:	9301      	str	r3, [sp, #4]
   d4980:	bd08      	pop	{r3, pc}
   d4982:	0000      	.short	0x0000
   d4984:	00030278 	.word	0x00030278

000d4988 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b03      	ldr	r3, [pc, #12]	; (d4998 <hal_ble_gatt_client_write_without_response+0x10>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4992:	9301      	str	r3, [sp, #4]
   d4994:	bd08      	pop	{r3, pc}
   d4996:	0000      	.short	0x0000
   d4998:	00030278 	.word	0x00030278

000d499c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b03      	ldr	r3, [pc, #12]	; (d49ac <hal_ble_gatt_server_add_characteristic+0x10>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d49a6:	9301      	str	r3, [sp, #4]
   d49a8:	bd08      	pop	{r3, pc}
   d49aa:	0000      	.short	0x0000
   d49ac:	00030278 	.word	0x00030278

000d49b0 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b03      	ldr	r3, [pc, #12]	; (d49c0 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d49ba:	9301      	str	r3, [sp, #4]
   d49bc:	bd08      	pop	{r3, pc}
   d49be:	0000      	.short	0x0000
   d49c0:	00030278 	.word	0x00030278

000d49c4 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b03      	ldr	r3, [pc, #12]	; (d49d4 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d49ce:	9301      	str	r3, [sp, #4]
   d49d0:	bd08      	pop	{r3, pc}
   d49d2:	0000      	.short	0x0000
   d49d4:	00030278 	.word	0x00030278

000d49d8 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b03      	ldr	r3, [pc, #12]	; (d49e8 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d49e2:	9301      	str	r3, [sp, #4]
   d49e4:	bd08      	pop	{r3, pc}
   d49e6:	0000      	.short	0x0000
   d49e8:	00030278 	.word	0x00030278

000d49ec <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b02      	ldr	r3, [pc, #8]	; (d49f8 <os_thread_is_current+0xc>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	689b      	ldr	r3, [r3, #8]
   d49f4:	9301      	str	r3, [sp, #4]
   d49f6:	bd08      	pop	{r3, pc}
   d49f8:	00030248 	.word	0x00030248

000d49fc <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d49fc:	b508      	push	{r3, lr}
   d49fe:	4b02      	ldr	r3, [pc, #8]	; (d4a08 <os_thread_join+0xc>)
   d4a00:	681b      	ldr	r3, [r3, #0]
   d4a02:	691b      	ldr	r3, [r3, #16]
   d4a04:	9301      	str	r3, [sp, #4]
   d4a06:	bd08      	pop	{r3, pc}
   d4a08:	00030248 	.word	0x00030248

000d4a0c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a0c:	b508      	push	{r3, lr}
   d4a0e:	4b02      	ldr	r3, [pc, #8]	; (d4a18 <os_thread_cleanup+0xc>)
   d4a10:	681b      	ldr	r3, [r3, #0]
   d4a12:	695b      	ldr	r3, [r3, #20]
   d4a14:	9301      	str	r3, [sp, #4]
   d4a16:	bd08      	pop	{r3, pc}
   d4a18:	00030248 	.word	0x00030248

000d4a1c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a1c:	b508      	push	{r3, lr}
   d4a1e:	4b02      	ldr	r3, [pc, #8]	; (d4a28 <os_mutex_recursive_create+0xc>)
   d4a20:	681b      	ldr	r3, [r3, #0]
   d4a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a24:	9301      	str	r3, [sp, #4]
   d4a26:	bd08      	pop	{r3, pc}
   d4a28:	00030248 	.word	0x00030248

000d4a2c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a2c:	b508      	push	{r3, lr}
   d4a2e:	4b02      	ldr	r3, [pc, #8]	; (d4a38 <os_mutex_recursive_destroy+0xc>)
   d4a30:	681b      	ldr	r3, [r3, #0]
   d4a32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4a34:	9301      	str	r3, [sp, #4]
   d4a36:	bd08      	pop	{r3, pc}
   d4a38:	00030248 	.word	0x00030248

000d4a3c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b02      	ldr	r3, [pc, #8]	; (d4a48 <os_mutex_recursive_lock+0xc>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4a44:	9301      	str	r3, [sp, #4]
   d4a46:	bd08      	pop	{r3, pc}
   d4a48:	00030248 	.word	0x00030248

000d4a4c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4a4c:	b508      	push	{r3, lr}
   d4a4e:	4b02      	ldr	r3, [pc, #8]	; (d4a58 <os_mutex_recursive_unlock+0xc>)
   d4a50:	681b      	ldr	r3, [r3, #0]
   d4a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4a54:	9301      	str	r3, [sp, #4]
   d4a56:	bd08      	pop	{r3, pc}
   d4a58:	00030248 	.word	0x00030248

000d4a5c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a5c:	b508      	push	{r3, lr}
   d4a5e:	4b02      	ldr	r3, [pc, #8]	; (d4a68 <inet_inet_ntop+0xc>)
   d4a60:	681b      	ldr	r3, [r3, #0]
   d4a62:	695b      	ldr	r3, [r3, #20]
   d4a64:	9301      	str	r3, [sp, #4]
   d4a66:	bd08      	pop	{r3, pc}
   d4a68:	00030264 	.word	0x00030264

000d4a6c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a6c:	b508      	push	{r3, lr}
   d4a6e:	4b02      	ldr	r3, [pc, #8]	; (d4a78 <HAL_USART_Init+0xc>)
   d4a70:	681b      	ldr	r3, [r3, #0]
   d4a72:	681b      	ldr	r3, [r3, #0]
   d4a74:	9301      	str	r3, [sp, #4]
   d4a76:	bd08      	pop	{r3, pc}
   d4a78:	0003023c 	.word	0x0003023c

000d4a7c <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4a7c:	b508      	push	{r3, lr}
   d4a7e:	4b02      	ldr	r3, [pc, #8]	; (d4a88 <HAL_USART_End+0xc>)
   d4a80:	681b      	ldr	r3, [r3, #0]
   d4a82:	689b      	ldr	r3, [r3, #8]
   d4a84:	9301      	str	r3, [sp, #4]
   d4a86:	bd08      	pop	{r3, pc}
   d4a88:	0003023c 	.word	0x0003023c

000d4a8c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <HAL_USART_Write_Data+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	68db      	ldr	r3, [r3, #12]
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	0003023c 	.word	0x0003023c

000d4a9c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <HAL_USART_Available_Data+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	691b      	ldr	r3, [r3, #16]
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	0003023c 	.word	0x0003023c

000d4aac <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <HAL_USART_Read_Data+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	695b      	ldr	r3, [r3, #20]
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	0003023c 	.word	0x0003023c

000d4abc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <HAL_USART_Peek_Data+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	699b      	ldr	r3, [r3, #24]
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	0003023c 	.word	0x0003023c

000d4acc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <HAL_USART_Flush_Data+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	69db      	ldr	r3, [r3, #28]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	0003023c 	.word	0x0003023c

000d4adc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <HAL_USART_Is_Enabled+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	6a1b      	ldr	r3, [r3, #32]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	0003023c 	.word	0x0003023c

000d4aec <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <HAL_USART_Available_Data_For_Write+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	0003023c 	.word	0x0003023c

000d4afc <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <HAL_USART_BeginConfig+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003023c 	.word	0x0003023c

000d4b0c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <HAL_I2C_Write_Data+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	6a1b      	ldr	r3, [r3, #32]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030228 	.word	0x00030228

000d4b1c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <HAL_I2C_Available_Data+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030228 	.word	0x00030228

000d4b2c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <HAL_I2C_Read_Data+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030228 	.word	0x00030228

000d4b3c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <HAL_I2C_Peek_Data+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	00030228 	.word	0x00030228

000d4b4c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <HAL_I2C_Flush_Data+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	00030228 	.word	0x00030228

000d4b5c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <HAL_I2C_Is_Enabled+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	00030228 	.word	0x00030228

000d4b6c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <HAL_I2C_Init+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	00030228 	.word	0x00030228

000d4b7c <dct_write_app_data>:

DYNALIB_BEGIN(hal_dct)

#if HAL_PLATFORM_DCT_NO_DEPRECATED
DYNALIB_FN(0, hal_dct, dct_read_app_data_copy, int(uint32_t, void*, size_t))
DYNALIB_FN(1, hal_dct, dct_write_app_data, int(const void*, uint32_t, uint32_t))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <dct_write_app_data+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	685b      	ldr	r3, [r3, #4]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	00030258 	.word	0x00030258

000d4b8c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <HAL_USB_USART_Init+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	681b      	ldr	r3, [r3, #0]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003024c 	.word	0x0003024c

000d4b9c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <HAL_USB_USART_Begin+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	685b      	ldr	r3, [r3, #4]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	0003024c 	.word	0x0003024c

000d4bac <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <HAL_USB_USART_End+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	689b      	ldr	r3, [r3, #8]
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	0003024c 	.word	0x0003024c

000d4bbc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <HAL_USB_USART_Available_Data+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	691b      	ldr	r3, [r3, #16]
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	0003024c 	.word	0x0003024c

000d4bcc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	695b      	ldr	r3, [r3, #20]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	0003024c 	.word	0x0003024c

000d4bdc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <HAL_USB_USART_Receive_Data+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	699b      	ldr	r3, [r3, #24]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	0003024c 	.word	0x0003024c

000d4bec <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <HAL_USB_USART_Send_Data+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	69db      	ldr	r3, [r3, #28]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	0003024c 	.word	0x0003024c

000d4bfc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <HAL_USB_USART_Flush_Data+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	6a1b      	ldr	r3, [r3, #32]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	0003024c 	.word	0x0003024c

000d4c0c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <panic_+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	00030260 	.word	0x00030260

000d4c1c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <log_message+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030260 	.word	0x00030260

000d4c2c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <log_message_v+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030260 	.word	0x00030260

000d4c3c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <log_level_name+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030260 	.word	0x00030260

000d4c4c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <log_set_callbacks+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030260 	.word	0x00030260

000d4c5c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <system_mode+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	681b      	ldr	r3, [r3, #0]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030220 	.word	0x00030220

000d4c6c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <set_system_mode+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	685b      	ldr	r3, [r3, #4]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030220 	.word	0x00030220

000d4c7c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <system_delay_ms+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	695b      	ldr	r3, [r3, #20]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030220 	.word	0x00030220

000d4c8c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <application_thread_current+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030220 	.word	0x00030220

000d4c9c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <application_thread_invoke+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030220 	.word	0x00030220

000d4cac <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <system_thread_get_state+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030220 	.word	0x00030220

000d4cbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b03      	ldr	r3, [pc, #12]	; (d4ccc <system_ctrl_set_app_request_handler+0x10>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cc6:	9301      	str	r3, [sp, #4]
   d4cc8:	bd08      	pop	{r3, pc}
   d4cca:	0000      	.short	0x0000
   d4ccc:	00030220 	.word	0x00030220

000d4cd0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b03      	ldr	r3, [pc, #12]	; (d4ce0 <system_ctrl_set_result+0x10>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cda:	9301      	str	r3, [sp, #4]
   d4cdc:	bd08      	pop	{r3, pc}
   d4cde:	0000      	.short	0x0000
   d4ce0:	00030220 	.word	0x00030220

000d4ce4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ce4:	b508      	push	{r3, lr}
   d4ce6:	4b02      	ldr	r3, [pc, #8]	; (d4cf0 <network_connect+0xc>)
   d4ce8:	681b      	ldr	r3, [r3, #0]
   d4cea:	685b      	ldr	r3, [r3, #4]
   d4cec:	9301      	str	r3, [sp, #4]
   d4cee:	bd08      	pop	{r3, pc}
   d4cf0:	00030240 	.word	0x00030240

000d4cf4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b02      	ldr	r3, [pc, #8]	; (d4d00 <network_connecting+0xc>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	689b      	ldr	r3, [r3, #8]
   d4cfc:	9301      	str	r3, [sp, #4]
   d4cfe:	bd08      	pop	{r3, pc}
   d4d00:	00030240 	.word	0x00030240

000d4d04 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <network_disconnect+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	68db      	ldr	r3, [r3, #12]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030240 	.word	0x00030240

000d4d14 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <network_ready+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	691b      	ldr	r3, [r3, #16]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030240 	.word	0x00030240

000d4d24 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <network_on+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	695b      	ldr	r3, [r3, #20]
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030240 	.word	0x00030240

000d4d34 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <network_off+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	699b      	ldr	r3, [r3, #24]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030240 	.word	0x00030240

000d4d44 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <network_listen+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	69db      	ldr	r3, [r3, #28]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030240 	.word	0x00030240

000d4d54 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <network_listening+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	6a1b      	ldr	r3, [r3, #32]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030240 	.word	0x00030240

000d4d64 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <network_set_listen_timeout+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030240 	.word	0x00030240

000d4d74 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <network_get_listen_timeout+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030240 	.word	0x00030240

000d4d84 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <spark_variable+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	681b      	ldr	r3, [r3, #0]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030244 	.word	0x00030244

000d4d94 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <spark_process+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	689b      	ldr	r3, [r3, #8]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030244 	.word	0x00030244

000d4da4 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <spark_cloud_flag_connected+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	695b      	ldr	r3, [r3, #20]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030244 	.word	0x00030244

000d4db4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <spark_send_event+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6a1b      	ldr	r3, [r3, #32]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030244 	.word	0x00030244

000d4dc4 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <spark_sync_time_pending+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030244 	.word	0x00030244

000d4dd4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030244 	.word	0x00030244

000d4de4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <malloc+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	681b      	ldr	r3, [r3, #0]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003021c 	.word	0x0003021c

000d4df4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <free+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	685b      	ldr	r3, [r3, #4]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	0003021c 	.word	0x0003021c

000d4e04 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <realloc+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	689b      	ldr	r3, [r3, #8]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	0003021c 	.word	0x0003021c

000d4e14 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <sprintf+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	68db      	ldr	r3, [r3, #12]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	0003021c 	.word	0x0003021c

000d4e24 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <vsnprintf+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003021c 	.word	0x0003021c

000d4e34 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <abort+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003021c 	.word	0x0003021c

000d4e44 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <_malloc_r+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	0003021c 	.word	0x0003021c

000d4e54 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e54:	2200      	movs	r2, #0
   d4e56:	4611      	mov	r1, r2
   d4e58:	6840      	ldr	r0, [r0, #4]
   d4e5a:	f7ff bf7b 	b.w	d4d54 <network_listening>

000d4e5e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e5e:	2200      	movs	r2, #0
   d4e60:	4611      	mov	r1, r2
   d4e62:	6840      	ldr	r0, [r0, #4]
   d4e64:	f7ff bf86 	b.w	d4d74 <network_get_listen_timeout>

000d4e68 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e68:	2200      	movs	r2, #0
   d4e6a:	6840      	ldr	r0, [r0, #4]
   d4e6c:	f7ff bf7a 	b.w	d4d64 <network_set_listen_timeout>

000d4e70 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e70:	2200      	movs	r2, #0
   d4e72:	f081 0101 	eor.w	r1, r1, #1
   d4e76:	6840      	ldr	r0, [r0, #4]
   d4e78:	f7ff bf64 	b.w	d4d44 <network_listen>

000d4e7c <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4e7c:	2300      	movs	r3, #0
   d4e7e:	461a      	mov	r2, r3
   d4e80:	4619      	mov	r1, r3
   d4e82:	6840      	ldr	r0, [r0, #4]
   d4e84:	f7ff bf56 	b.w	d4d34 <network_off>

000d4e88 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e88:	2300      	movs	r3, #0
   d4e8a:	461a      	mov	r2, r3
   d4e8c:	4619      	mov	r1, r3
   d4e8e:	6840      	ldr	r0, [r0, #4]
   d4e90:	f7ff bf48 	b.w	d4d24 <network_on>

000d4e94 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e94:	2200      	movs	r2, #0
   d4e96:	4611      	mov	r1, r2
   d4e98:	6840      	ldr	r0, [r0, #4]
   d4e9a:	f7ff bf3b 	b.w	d4d14 <network_ready>

000d4e9e <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e9e:	2200      	movs	r2, #0
   d4ea0:	4611      	mov	r1, r2
   d4ea2:	6840      	ldr	r0, [r0, #4]
   d4ea4:	f7ff bf26 	b.w	d4cf4 <network_connecting>

000d4ea8 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4ea8:	2200      	movs	r2, #0
   d4eaa:	2102      	movs	r1, #2
   d4eac:	6840      	ldr	r0, [r0, #4]
   d4eae:	f7ff bf29 	b.w	d4d04 <network_disconnect>

000d4eb2 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4eb2:	2300      	movs	r3, #0
   d4eb4:	461a      	mov	r2, r3
   d4eb6:	6840      	ldr	r0, [r0, #4]
   d4eb8:	f7ff bf14 	b.w	d4ce4 <network_connect>

000d4ebc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4ebc:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4ebe:	2203      	movs	r2, #3
   d4ec0:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4ec2:	4a02      	ldr	r2, [pc, #8]	; (d4ecc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4ec4:	601a      	str	r2, [r3, #0]
   d4ec6:	4770      	bx	lr
   d4ec8:	2003e390 	.word	0x2003e390
   d4ecc:	000d955c 	.word	0x000d955c

000d4ed0 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d4ed0:	4770      	bx	lr

000d4ed2 <_ZN8SPIClassD0Ev>:
   d4ed2:	b510      	push	{r4, lr}
   d4ed4:	210c      	movs	r1, #12
   d4ed6:	4604      	mov	r4, r0
   d4ed8:	f003 fb58 	bl	d858c <_ZdlPvj>
   d4edc:	4620      	mov	r0, r4
   d4ede:	bd10      	pop	{r4, pc}

000d4ee0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4ee0:	b510      	push	{r4, lr}
   d4ee2:	4b05      	ldr	r3, [pc, #20]	; (d4ef8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x18>)
   d4ee4:	6003      	str	r3, [r0, #0]
   d4ee6:	4604      	mov	r4, r0
{
    _spi = spi;
   d4ee8:	7101      	strb	r1, [r0, #4]
    HAL_SPI_Init(_spi);
   d4eea:	4608      	mov	r0, r1
   d4eec:	f7ff fccc 	bl	d4888 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4ef0:	2300      	movs	r3, #0
   d4ef2:	60a3      	str	r3, [r4, #8]
}
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	bd10      	pop	{r4, pc}
   d4ef8:	000d9590 	.word	0x000d9590

000d4efc <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4efc:	7900      	ldrb	r0, [r0, #4]
   d4efe:	f7ff bccb 	b.w	d4898 <HAL_SPI_Is_Enabled>
	...

000d4f04 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4f04:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f06:	4c09      	ldr	r4, [pc, #36]	; (d4f2c <_GLOBAL__sub_I_System+0x28>)
   d4f08:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f0e:	6020      	str	r0, [r4, #0]
   d4f10:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4f12:	71a0      	strb	r0, [r4, #6]
   d4f14:	8120      	strh	r0, [r4, #8]
   d4f16:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f18:	f7ff fea8 	bl	d4c6c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	4a04      	ldr	r2, [pc, #16]	; (d4f30 <_GLOBAL__sub_I_System+0x2c>)
   d4f20:	4904      	ldr	r1, [pc, #16]	; (d4f34 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4f22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4f26:	f003 bb23 	b.w	d8570 <__aeabi_atexit>
   d4f2a:	bf00      	nop
   d4f2c:	2003e398 	.word	0x2003e398
   d4f30:	2003e308 	.word	0x2003e308
   d4f34:	000d40d7 	.word	0x000d40d7

000d4f38 <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4f38:	2300      	movs	r3, #0
   d4f3a:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4f3c:	6043      	str	r3, [r0, #4]
	len = 0;
   d4f3e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4f40:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d4f42:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d4f44:	680c      	ldr	r4, [r1, #0]
   d4f46:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d4f48:	684c      	ldr	r4, [r1, #4]
   d4f4a:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d4f4c:	688c      	ldr	r4, [r1, #8]
   d4f4e:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d4f50:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d4f52:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d4f54:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d4f56:	bd10      	pop	{r4, pc}

000d4f58 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d4f58:	b510      	push	{r4, lr}
   d4f5a:	4604      	mov	r4, r0
{
	free(buffer);
   d4f5c:	6800      	ldr	r0, [r0, #0]
   d4f5e:	f7ff ff49 	bl	d4df4 <free>
}
   d4f62:	4620      	mov	r0, r4
   d4f64:	bd10      	pop	{r4, pc}

000d4f66 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d4f66:	b510      	push	{r4, lr}
   d4f68:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d4f6a:	6800      	ldr	r0, [r0, #0]
   d4f6c:	b108      	cbz	r0, d4f72 <_ZN6String10invalidateEv+0xc>
   d4f6e:	f7ff ff41 	bl	d4df4 <free>
	buffer = NULL;
   d4f72:	2300      	movs	r3, #0
   d4f74:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d4f76:	60a3      	str	r3, [r4, #8]
   d4f78:	6063      	str	r3, [r4, #4]
   d4f7a:	bd10      	pop	{r4, pc}

000d4f7c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d4f7c:	b538      	push	{r3, r4, r5, lr}
   d4f7e:	4604      	mov	r4, r0
   d4f80:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d4f82:	6800      	ldr	r0, [r0, #0]
   d4f84:	3101      	adds	r1, #1
   d4f86:	f7ff ff3d 	bl	d4e04 <realloc>
	if (newbuffer) {
   d4f8a:	b110      	cbz	r0, d4f92 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d4f8c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d4f90:	2001      	movs	r0, #1
	}
	return 0;
}
   d4f92:	bd38      	pop	{r3, r4, r5, pc}

000d4f94 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f94:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d4f96:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d4f98:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d4f9a:	b113      	cbz	r3, d4fa2 <_ZN6String7reserveEj+0xe>
   d4f9c:	6843      	ldr	r3, [r0, #4]
   d4f9e:	428b      	cmp	r3, r1
   d4fa0:	d207      	bcs.n	d4fb2 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	f7ff ffea 	bl	d4f7c <_ZN6String12changeBufferEj>
   d4fa8:	b120      	cbz	r0, d4fb4 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d4faa:	68a3      	ldr	r3, [r4, #8]
   d4fac:	b90b      	cbnz	r3, d4fb2 <_ZN6String7reserveEj+0x1e>
   d4fae:	6822      	ldr	r2, [r4, #0]
   d4fb0:	7013      	strb	r3, [r2, #0]
   d4fb2:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d4fb4:	bd10      	pop	{r4, pc}

000d4fb6 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4fb6:	b570      	push	{r4, r5, r6, lr}
   d4fb8:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d4fba:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d4fbc:	4604      	mov	r4, r0
   d4fbe:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d4fc0:	f7ff ffe8 	bl	d4f94 <_ZN6String7reserveEj>
   d4fc4:	b918      	cbnz	r0, d4fce <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d4fc6:	4620      	mov	r0, r4
   d4fc8:	f7ff ffcd 	bl	d4f66 <_ZN6String10invalidateEv>
		return *this;
   d4fcc:	e009      	b.n	d4fe2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d4fce:	462a      	mov	r2, r5
   d4fd0:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d4fd2:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d4fd4:	6820      	ldr	r0, [r4, #0]
   d4fd6:	f004 f846 	bl	d9066 <memcpy>
	buffer[len] = 0;
   d4fda:	6822      	ldr	r2, [r4, #0]
   d4fdc:	68a3      	ldr	r3, [r4, #8]
   d4fde:	2100      	movs	r1, #0
   d4fe0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	bd70      	pop	{r4, r5, r6, pc}

000d4fe6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fe6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fe8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d4fea:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d4fec:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d4fee:	6043      	str	r3, [r0, #4]
	len = 0;
   d4ff0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d4ff2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d4ff4:	460d      	mov	r5, r1
   d4ff6:	b139      	cbz	r1, d5008 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d4ff8:	4608      	mov	r0, r1
   d4ffa:	f004 f8c8 	bl	d918e <strlen>
   d4ffe:	4629      	mov	r1, r5
   d5000:	4602      	mov	r2, r0
   d5002:	4620      	mov	r0, r4
   d5004:	f7ff ffd7 	bl	d4fb6 <_ZN6String4copyEPKcj>
}
   d5008:	4620      	mov	r0, r4
   d500a:	bd38      	pop	{r3, r4, r5, pc}

000d500c <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d500c:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d500e:	b510      	push	{r4, lr}
   d5010:	460b      	mov	r3, r1
   d5012:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5014:	d007      	beq.n	d5026 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d5016:	6809      	ldr	r1, [r1, #0]
   d5018:	b119      	cbz	r1, d5022 <_ZN6StringaSERKS_+0x16>
   d501a:	689a      	ldr	r2, [r3, #8]
   d501c:	f7ff ffcb 	bl	d4fb6 <_ZN6String4copyEPKcj>
   d5020:	e001      	b.n	d5026 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d5022:	f7ff ffa0 	bl	d4f66 <_ZN6String10invalidateEv>

	return *this;
}
   d5026:	4620      	mov	r0, r4
   d5028:	bd10      	pop	{r4, pc}

000d502a <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d502a:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d502c:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d502e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5030:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5032:	6043      	str	r3, [r0, #4]
	len = 0;
   d5034:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5036:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d5038:	f7ff ffe8 	bl	d500c <_ZN6StringaSERKS_>
}
   d503c:	4620      	mov	r0, r4
   d503e:	bd10      	pop	{r4, pc}

000d5040 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5040:	b538      	push	{r3, r4, r5, lr}
   d5042:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d5044:	460c      	mov	r4, r1
   d5046:	b141      	cbz	r1, d505a <_ZN6StringaSEPKc+0x1a>
   d5048:	4608      	mov	r0, r1
   d504a:	f004 f8a0 	bl	d918e <strlen>
   d504e:	4621      	mov	r1, r4
   d5050:	4602      	mov	r2, r0
   d5052:	4628      	mov	r0, r5
   d5054:	f7ff ffaf 	bl	d4fb6 <_ZN6String4copyEPKcj>
   d5058:	e001      	b.n	d505e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d505a:	f7ff ff84 	bl	d4f66 <_ZN6String10invalidateEv>

	return *this;
}
   d505e:	4628      	mov	r0, r5
   d5060:	bd38      	pop	{r3, r4, r5, pc}

000d5062 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5062:	4770      	bx	lr

000d5064 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5064:	2000      	movs	r0, #0
   d5066:	4770      	bx	lr

000d5068 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5068:	4770      	bx	lr

000d506a <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d506a:	2000      	movs	r0, #0
   d506c:	4770      	bx	lr

000d506e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d506e:	4770      	bx	lr

000d5070 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d5070:	2000      	movs	r0, #0
   d5072:	4770      	bx	lr

000d5074 <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d5074:	b510      	push	{r4, lr}
   d5076:	2114      	movs	r1, #20
   d5078:	4604      	mov	r4, r0
   d507a:	f003 fa87 	bl	d858c <_ZdlPvj>
   d507e:	4620      	mov	r0, r4
   d5080:	bd10      	pop	{r4, pc}

000d5082 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5082:	b510      	push	{r4, lr}
   d5084:	2114      	movs	r1, #20
   d5086:	4604      	mov	r4, r0
   d5088:	f003 fa80 	bl	d858c <_ZdlPvj>
   d508c:	4620      	mov	r0, r4
   d508e:	bd10      	pop	{r4, pc}

000d5090 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:
   d5090:	b510      	push	{r4, lr}
   d5092:	2114      	movs	r1, #20
   d5094:	4604      	mov	r4, r0
   d5096:	f003 fa79 	bl	d858c <_ZdlPvj>
   d509a:	4620      	mov	r0, r4
   d509c:	bd10      	pop	{r4, pc}

000d509e <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d509e:	f7fe bffe 	b.w	d409e <_ZdlPv>

000d50a2 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d50a2:	f7fe bffc 	b.w	d409e <_ZdlPv>

000d50a6 <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
   d50a6:	f7fe bffa 	b.w	d409e <_ZdlPv>

000d50aa <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d50aa:	b510      	push	{r4, lr}
   d50ac:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d50ae:	6800      	ldr	r0, [r0, #0]
   d50b0:	b108      	cbz	r0, d50b6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d50b2:	f7ff fcbb 	bl	d4a2c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d50b6:	4620      	mov	r0, r4
   d50b8:	bd10      	pop	{r4, pc}
	...

000d50bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d50bc:	b508      	push	{r3, lr}
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d50be:	200a      	movs	r0, #10
   d50c0:	4a02      	ldr	r2, [pc, #8]	; (d50cc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102+0x10>)
   d50c2:	2100      	movs	r1, #0
   d50c4:	f7ff fda2 	bl	d4c0c <panic_>
    }
}
   d50c8:	bd08      	pop	{r3, pc}
   d50ca:	bf00      	nop
   d50cc:	000d48b9 	.word	0x000d48b9

000d50d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d50d0:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d50d2:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d50d4:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d50d6:	689b      	ldr	r3, [r3, #8]
   d50d8:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d50da:	68a3      	ldr	r3, [r4, #8]
   d50dc:	3b01      	subs	r3, #1
   d50de:	60a3      	str	r3, [r4, #8]
   d50e0:	b92b      	cbnz	r3, d50ee <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d50e2:	6823      	ldr	r3, [r4, #0]
   d50e4:	4620      	mov	r0, r4
   d50e6:	68db      	ldr	r3, [r3, #12]
        }
    }
   d50e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d50ec:	4718      	bx	r3
   d50ee:	bd10      	pop	{r4, pc}

000d50f0 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d50f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d50f4:	b2da      	uxtb	r2, r3
   d50f6:	2a09      	cmp	r2, #9
   d50f8:	d801      	bhi.n	d50fe <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d50fa:	4618      	mov	r0, r3
   d50fc:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d50fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5102:	2b05      	cmp	r3, #5
   d5104:	d801      	bhi.n	d510a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5106:	3857      	subs	r0, #87	; 0x57
   d5108:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d510a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d510e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d5110:	bf94      	ite	ls
   d5112:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5114:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d5118:	4770      	bx	lr
	...

000d511c <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d511c:	b510      	push	{r4, lr}
            locked_(false) {
   d511e:	2300      	movs	r3, #0
   d5120:	7003      	strb	r3, [r0, #0]
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5122:	4b04      	ldr	r3, [pc, #16]	; (d5134 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5124:	4604      	mov	r4, r0
   d5126:	6818      	ldr	r0, [r3, #0]
   d5128:	f7ff fc88 	bl	d4a3c <os_mutex_recursive_lock>
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
        locked_ = true;
   d512c:	2301      	movs	r3, #1
   d512e:	7023      	strb	r3, [r4, #0]
class WiringBleLock {
public:
    WiringBleLock() :
            locked_(false) {
        lock();
    }
   d5130:	4620      	mov	r0, r4
   d5132:	bd10      	pop	{r4, pc}
   d5134:	2003e3b0 	.word	0x2003e3b0

000d5138 <_ZN8particle3ble13WiringBleLockD1Ev>:

    ~WiringBleLock() {
   d5138:	b510      	push	{r4, lr}
        if (locked_) {
   d513a:	7803      	ldrb	r3, [r0, #0]
    WiringBleLock() :
            locked_(false) {
        lock();
    }

    ~WiringBleLock() {
   d513c:	4604      	mov	r4, r0
        if (locked_) {
   d513e:	b11b      	cbz	r3, d5148 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5140:	4b02      	ldr	r3, [pc, #8]	; (d514c <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   d5142:	6818      	ldr	r0, [r3, #0]
   d5144:	f7ff fc82 	bl	d4a4c <os_mutex_recursive_unlock>
            unlock();
        }
    }
   d5148:	4620      	mov	r0, r4
   d514a:	bd10      	pop	{r4, pc}
   d514c:	2003e3b0 	.word	0x2003e3b0

000d5150 <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d5150:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5152:	7982      	ldrb	r2, [r0, #6]
   d5154:	798b      	ldrb	r3, [r1, #6]
   d5156:	429a      	cmp	r2, r3
   d5158:	d106      	bne.n	d5168 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d515a:	2206      	movs	r2, #6
   d515c:	f003 ff74 	bl	d9048 <memcmp>
   d5160:	fab0 f080 	clz	r0, r0
   d5164:	0940      	lsrs	r0, r0, #5
   d5166:	bd08      	pop	{r3, pc}
        return true;
    }
    return false;
   d5168:	2000      	movs	r0, #0
}
   d516a:	bd08      	pop	{r3, pc}

000d516c <_ZN8particle7BleUuidC1Ev>:


/*******************************************************
 * BleUuid class
 */
BleUuid::BleUuid()
   d516c:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   d516e:	2301      	movs	r3, #1
   d5170:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5172:	4b05      	ldr	r3, [pc, #20]	; (d5188 <_ZN8particle7BleUuidC1Ev+0x1c>)
   d5174:	4602      	mov	r2, r0
   d5176:	f103 0110 	add.w	r1, r3, #16
   d517a:	f853 4b04 	ldr.w	r4, [r3], #4
   d517e:	f842 4b04 	str.w	r4, [r2], #4
   d5182:	428b      	cmp	r3, r1
   d5184:	d1f9      	bne.n	d517a <_ZN8particle7BleUuidC1Ev+0xe>
}
   d5186:	bd10      	pop	{r4, pc}
   d5188:	000d979c 	.word	0x000d979c

000d518c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d518c:	b510      	push	{r4, lr}
    if (uuid128) {
   d518e:	460b      	mov	r3, r1
BleUuid::BleUuid(const BleUuid& uuid)
        : type_(uuid.type_) {
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5190:	4604      	mov	r4, r0
    if (uuid128) {
   d5192:	b1b9      	cbz	r1, d51c4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x38>
        if (order == BleUuidOrder::LSB) {
   d5194:	2a01      	cmp	r2, #1
   d5196:	d109      	bne.n	d51ac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x20>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5198:	4603      	mov	r3, r0
   d519a:	f101 0210 	add.w	r2, r1, #16
   d519e:	f851 0b04 	ldr.w	r0, [r1], #4
   d51a2:	f843 0b04 	str.w	r0, [r3], #4
   d51a6:	4291      	cmp	r1, r2
   d51a8:	d1f9      	bne.n	d519e <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
   d51aa:	e008      	b.n	d51be <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x32>
   d51ac:	1e41      	subs	r1, r0, #1
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
}

BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
   d51ae:	220f      	movs	r2, #15
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
                uuid128_[i] = uuid128[j];
   d51b0:	5c98      	ldrb	r0, [r3, r2]
   d51b2:	f801 0f01 	strb.w	r0, [r1, #1]!
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
    if (uuid128) {
        if (order == BleUuidOrder::LSB) {
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
        } else {
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d51b6:	3a01      	subs	r2, #1
   d51b8:	b2d2      	uxtb	r2, r2
   d51ba:	2aff      	cmp	r2, #255	; 0xff
   d51bc:	d1f8      	bne.n	d51b0 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x24>
                uuid128_[i] = uuid128[j];
            }
        }
        type_ = BleUuidType::LONG;
   d51be:	2301      	movs	r3, #1
   d51c0:	6123      	str	r3, [r4, #16]
   d51c2:	e002      	b.n	d51ca <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x3e>
    } else {
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d51c4:	2210      	movs	r2, #16
   d51c6:	f003 ff74 	bl	d90b2 <memset>
    }
}
   d51ca:	4620      	mov	r0, r4
   d51cc:	bd10      	pop	{r4, pc}

000d51ce <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
    type_ = BleUuidType::SHORT;
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d51ce:	b538      	push	{r3, r4, r5, lr}
   d51d0:	4605      	mov	r5, r0
   d51d2:	4614      	mov	r4, r2
        : BleUuid(uuid128, order) {
   d51d4:	461a      	mov	r2, r3
   d51d6:	f7ff ffd9 	bl	d518c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d51da:	732c      	strb	r4, [r5, #12]
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
   d51dc:	0a24      	lsrs	r4, r4, #8
   d51de:	736c      	strb	r4, [r5, #13]
}
   d51e0:	4628      	mov	r0, r5
   d51e2:	bd38      	pop	{r3, r4, r5, pc}

000d51e4 <_ZNK8particle7BleUuid7isValidEv>:

BleUuid::BleUuid(const String& uuid)
        : BleUuid(uuid.c_str()) {
}

bool BleUuid::isValid() const {
   d51e4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d51e6:	6902      	ldr	r2, [r0, #16]
   d51e8:	b90a      	cbnz	r2, d51ee <_ZNK8particle7BleUuid7isValidEv+0xa>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d51ea:	8980      	ldrh	r0, [r0, #12]
   d51ec:	e003      	b.n	d51f6 <_ZNK8particle7BleUuid7isValidEv+0x12>
    } else {
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d51ee:	2210      	movs	r2, #16
   d51f0:	4903      	ldr	r1, [pc, #12]	; (d5200 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d51f2:	f003 ff29 	bl	d9048 <memcmp>
   d51f6:	3000      	adds	r0, #0
   d51f8:	bf18      	it	ne
   d51fa:	2001      	movne	r0, #1
    }
}
   d51fc:	bd08      	pop	{r3, pc}
   d51fe:	bf00      	nop
   d5200:	000d979c 	.word	0x000d979c

000d5204 <_ZNK8particle7BleUuid4typeEv>:

BleUuidType BleUuid::type() const {
    return type_;
}
   d5204:	6900      	ldr	r0, [r0, #16]
   d5206:	4770      	bx	lr

000d5208 <_ZN8particle7BleUuid7halUUIDEv>:

hal_ble_uuid_t BleUuid::halUUID() {
   d5208:	b538      	push	{r3, r4, r5, lr}
   d520a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d520c:	2214      	movs	r2, #20
   d520e:	2100      	movs	r1, #0

BleUuidType BleUuid::type() const {
    return type_;
}

hal_ble_uuid_t BleUuid::halUUID() {
   d5210:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d5212:	f003 ff4e 	bl	d90b2 <memset>
    if (type_ == BleUuidType::SHORT) {
   d5216:	6923      	ldr	r3, [r4, #16]
   d5218:	b92b      	cbnz	r3, d5226 <_ZN8particle7BleUuid7halUUIDEv+0x1e>
        uuid.type = BLE_UUID_TYPE_16BIT;
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d521a:	7b62      	ldrb	r2, [r4, #13]
   d521c:	7b23      	ldrb	r3, [r4, #12]
   d521e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d5222:	802b      	strh	r3, [r5, #0]
   d5224:	e00a      	b.n	d523c <_ZN8particle7BleUuid7halUUIDEv+0x34>
    } else {
        uuid.type = BLE_UUID_TYPE_128BIT;
   d5226:	2301      	movs	r3, #1
   d5228:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d522a:	f104 0210 	add.w	r2, r4, #16
   d522e:	462b      	mov	r3, r5
   d5230:	f854 1b04 	ldr.w	r1, [r4], #4
   d5234:	f843 1b04 	str.w	r1, [r3], #4
   d5238:	4294      	cmp	r4, r2
   d523a:	d1f9      	bne.n	d5230 <_ZN8particle7BleUuid7halUUIDEv+0x28>
    }
    return uuid;
}
   d523c:	4628      	mov	r0, r5
   d523e:	bd38      	pop	{r3, r4, r5, pc}

000d5240 <_ZNK8particle7BleUuid7shortedEv>:

uint16_t BleUuid::shorted() const {
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d5240:	7b42      	ldrb	r2, [r0, #13]
   d5242:	7b00      	ldrb	r0, [r0, #12]
}
   d5244:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d5248:	4770      	bx	lr

000d524a <_ZNK8particle7BleUuid8rawBytesEv>:
    return BLE_SIG_UUID_128BIT_LEN;
}

const uint8_t* BleUuid::rawBytes() const {
    return uuid128_;
}
   d524a:	4770      	bx	lr

000d524c <_ZN8particle7BleUuidaSERKS0_>:
    memcpy(buf, cStr, len);
    buf[len++] = '\0';
    return len;
}

BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d524c:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d524e:	690b      	ldr	r3, [r1, #16]
   d5250:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d5252:	f101 0210 	add.w	r2, r1, #16
   d5256:	4603      	mov	r3, r0
   d5258:	f851 4b04 	ldr.w	r4, [r1], #4
   d525c:	f843 4b04 	str.w	r4, [r3], #4
   d5260:	4291      	cmp	r1, r2
   d5262:	d1f9      	bne.n	d5258 <_ZN8particle7BleUuidaSERKS0_+0xc>
    return *this;
}
   d5264:	bd10      	pop	{r4, pc}

000d5266 <_ZN8particle7BleUuidaSEPKh>:

BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d5266:	b510      	push	{r4, lr}
   d5268:	b086      	sub	sp, #24
   d526a:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d526c:	2201      	movs	r2, #1
   d526e:	a801      	add	r0, sp, #4
   d5270:	f7ff ff8c 	bl	d518c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d5274:	a901      	add	r1, sp, #4
   d5276:	4620      	mov	r0, r4
   d5278:	f7ff ffe8 	bl	d524c <_ZN8particle7BleUuidaSERKS0_>
}
   d527c:	b006      	add	sp, #24
   d527e:	bd10      	pop	{r4, pc}

000d5280 <_ZNK8particle7BleUuideqERKS0_>:

BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
    return *this = BleUuid(uuid);
}

bool BleUuid::operator==(const BleUuid& uuid) const {
   d5280:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5282:	6902      	ldr	r2, [r0, #16]
   d5284:	690b      	ldr	r3, [r1, #16]
   d5286:	429a      	cmp	r2, r3
   d5288:	d106      	bne.n	d5298 <_ZNK8particle7BleUuideqERKS0_+0x18>
   d528a:	2210      	movs	r2, #16
   d528c:	f003 fedc 	bl	d9048 <memcmp>
   d5290:	fab0 f080 	clz	r0, r0
   d5294:	0940      	lsrs	r0, r0, #5
   d5296:	bd08      	pop	{r3, pc}
   d5298:	2000      	movs	r0, #0
}
   d529a:	bd08      	pop	{r3, pc}

000d529c <_ZN8particle7BleUuid9constructEPKc>:
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
    type_ = BleUuidType::LONG;
   d529c:	2301      	movs	r3, #1
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d529e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    type_ = BleUuidType::LONG;
   d52a0:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d52a2:	4b31      	ldr	r3, [pc, #196]	; (d5368 <_ZN8particle7BleUuid9constructEPKc+0xcc>)
bool BleUuid::operator==(const uint8_t* uuid128) const {
    BleUuid temp(uuid128);
    return *this == temp;
}

void BleUuid::construct(const char* uuid) {
   d52a4:	460e      	mov	r6, r1
   d52a6:	4605      	mov	r5, r0
    type_ = BleUuidType::LONG;
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d52a8:	4602      	mov	r2, r0
   d52aa:	f103 0110 	add.w	r1, r3, #16
   d52ae:	f853 0b04 	ldr.w	r0, [r3], #4
   d52b2:	f842 0b04 	str.w	r0, [r2], #4
   d52b6:	428b      	cmp	r3, r1
   d52b8:	d1f9      	bne.n	d52ae <_ZN8particle7BleUuid9constructEPKc+0x12>
    if (uuid == nullptr) {
   d52ba:	2e00      	cmp	r6, #0
   d52bc:	d051      	beq.n	d5362 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d52be:	2124      	movs	r1, #36	; 0x24
   d52c0:	4630      	mov	r0, r6
   d52c2:	f003 ff81 	bl	d91c8 <strnlen>
   d52c6:	2804      	cmp	r0, #4
   d52c8:	d010      	beq.n	d52ec <_ZN8particle7BleUuid9constructEPKc+0x50>
   d52ca:	2700      	movs	r7, #0
   d52cc:	2410      	movs	r4, #16
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52ce:	2124      	movs	r1, #36	; 0x24
   d52d0:	4630      	mov	r0, r6
   d52d2:	f003 ff79 	bl	d91c8 <strnlen>
   d52d6:	42b8      	cmp	r0, r7
   d52d8:	d901      	bls.n	d52de <_ZN8particle7BleUuid9constructEPKc+0x42>
   d52da:	bb44      	cbnz	r4, d532e <_ZN8particle7BleUuid9constructEPKc+0x92>
   d52dc:	e041      	b.n	d5362 <_ZN8particle7BleUuid9constructEPKc+0xc6>
   d52de:	442c      	add	r4, r5
            }
            len--;
        }
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
   d52e0:	2300      	movs	r3, #0
                }
            }
            len--;
        }
    }
    while (len > 0) {
   d52e2:	42a5      	cmp	r5, r4
   d52e4:	d03d      	beq.n	d5362 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        uuid128_[len - 1] = 0x00;
   d52e6:	f804 3d01 	strb.w	r3, [r4, #-1]!
   d52ea:	e7fa      	b.n	d52e2 <_ZN8particle7BleUuid9constructEPKc+0x46>

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d52ec:	7830      	ldrb	r0, [r6, #0]
   d52ee:	f7ff feff 	bl	d50f0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d52f2:	1e04      	subs	r4, r0, #0
   d52f4:	db18      	blt.n	d5328 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d52f6:	7870      	ldrb	r0, [r6, #1]
   d52f8:	f7ff fefa 	bl	d50f0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d52fc:	2800      	cmp	r0, #0
   d52fe:	db13      	blt.n	d5328 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d5300:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
   d5304:	f88d 0004 	strb.w	r0, [sp, #4]
}

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5308:	78b0      	ldrb	r0, [r6, #2]
   d530a:	f7ff fef1 	bl	d50f0 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d530e:	1e04      	subs	r4, r0, #0
   d5310:	db0a      	blt.n	d5328 <_ZN8particle7BleUuid9constructEPKc+0x8c>
            break;
        }
        const int l = hexToNibble(*src++);
   d5312:	78f0      	ldrb	r0, [r6, #3]
   d5314:	f7ff feec 	bl	d50f0 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d5318:	2800      	cmp	r0, #0
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d531a:	bfa1      	itttt	ge
   d531c:	ea40 1004 	orrge.w	r0, r0, r4, lsl #4
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
            uuid128_[UUID16_HI] = buf[0];
   d5320:	f89d 3004 	ldrbge.w	r3, [sp, #4]
        return;
    }
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
        char buf[2] = {};
        if (hexToBytes(uuid, buf, BLE_SIG_UUID_16BIT_LEN) == BLE_SIG_UUID_16BIT_LEN) {
            uuid128_[UUID16_LO] = buf[1];
   d5324:	7328      	strbge	r0, [r5, #12]
            uuid128_[UUID16_HI] = buf[0];
   d5326:	736b      	strbge	r3, [r5, #13]
        }
        type_ = BleUuidType::SHORT;
   d5328:	2300      	movs	r3, #0
   d532a:	612b      	str	r3, [r5, #16]
   d532c:	e019      	b.n	d5362 <_ZN8particle7BleUuid9constructEPKc+0xc6>
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
        int8_t hi = hexToNibble(uuid[i]);
   d532e:	5df0      	ldrb	r0, [r6, r7]
   d5330:	f7ff fede 	bl	d50f0 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d5334:	0603      	lsls	r3, r0, #24
   d5336:	d412      	bmi.n	d535e <_ZN8particle7BleUuid9constructEPKc+0xc2>
            uuid128_[len - 1] = hi << 4;
   d5338:	3c01      	subs	r4, #1
   d533a:	0100      	lsls	r0, r0, #4
   d533c:	5528      	strb	r0, [r5, r4]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d533e:	2124      	movs	r1, #36	; 0x24
   d5340:	4630      	mov	r0, r6
   d5342:	f003 ff41 	bl	d91c8 <strnlen>
   d5346:	3701      	adds	r7, #1
   d5348:	4287      	cmp	r7, r0
   d534a:	d208      	bcs.n	d535e <_ZN8particle7BleUuid9constructEPKc+0xc2>
                int8_t lo = hexToNibble(uuid[i]);
   d534c:	5df0      	ldrb	r0, [r6, r7]
   d534e:	f7ff fecf 	bl	d50f0 <_ZN8particle11hexToNibbleEc>
   d5352:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5354:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5356:	bfa2      	ittt	ge
   d5358:	5d2b      	ldrbge	r3, [r5, r4]
   d535a:	4318      	orrge	r0, r3
   d535c:	5528      	strbge	r0, [r5, r4]
        }
        type_ = BleUuidType::SHORT;
        return;
    }
    size_t len = BLE_SIG_UUID_128BIT_LEN;
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d535e:	3701      	adds	r7, #1
   d5360:	e7b5      	b.n	d52ce <_ZN8particle7BleUuid9constructEPKc+0x32>
    }
    while (len > 0) {
        uuid128_[len - 1] = 0x00;
        len--;
    }
}
   d5362:	b003      	add	sp, #12
   d5364:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5366:	bf00      	nop
   d5368:	000d979c 	.word	0x000d979c

000d536c <_ZN8particle7BleUuidC1EPKc>:
        : BleUuid(uuid128, order) {
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
    uuid128_[UUID16_HI] = (uint8_t)((uuid16 >> 8) & 0x00FF);
}

BleUuid::BleUuid(const char* uuid)
   d536c:	b538      	push	{r3, r4, r5, lr}
   d536e:	4604      	mov	r4, r0
   d5370:	460d      	mov	r5, r1
        : BleUuid() {
   d5372:	f7ff fefb 	bl	d516c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5376:	4620      	mov	r0, r4
   d5378:	4629      	mov	r1, r5
   d537a:	f7ff ff8f 	bl	d529c <_ZN8particle7BleUuid9constructEPKc>
}
   d537e:	4620      	mov	r0, r4
   d5380:	bd38      	pop	{r3, r4, r5, pc}

000d5382 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>:
        break;
    }
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d5382:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
   d5384:	b18b      	cbz	r3, d53aa <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x28>
   d5386:	2400      	movs	r4, #0
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d5388:	1ce5      	adds	r5, r4, #3
   d538a:	428d      	cmp	r5, r1
   d538c:	d80f      	bhi.n	d53ae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d538e:	1c66      	adds	r6, r4, #1
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
        adsLen = buf[i];
   d5390:	5d05      	ldrb	r5, [r0, r4]
        if (buf[i + 1] == adsType) {
   d5392:	5d87      	ldrb	r7, [r0, r6]
   d5394:	4297      	cmp	r7, r2
   d5396:	d105      	bne.n	d53a4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x22>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d5398:	442e      	add	r6, r5
   d539a:	42b1      	cmp	r1, r6
   d539c:	d307      	bcc.n	d53ae <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x2c>
                *offset = i;
   d539e:	601c      	str	r4, [r3, #0]
                adsLen += 1;
   d53a0:	1c68      	adds	r0, r5, #1
                return adsLen;
   d53a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            } else {
                return 0;
            }
        } else {
            // Navigate to the next AD structure.
            i += (adsLen + 1);
   d53a4:	3501      	adds	r5, #1
   d53a6:	442c      	add	r4, r5
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d53a8:	e7ee      	b.n	d5388 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj+0x6>
    return found;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
    if (offset == nullptr) {
        return 0;
   d53aa:	4618      	mov	r0, r3
   d53ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d53ae:	2000      	movs	r0, #0
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d53b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d53b2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
    selfData_[selfLen_++] = beacon.measurePower;

    return selfLen_;
}

size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d53b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d53b6:	4604      	mov	r4, r0
   d53b8:	460e      	mov	r6, r1
   d53ba:	461d      	mov	r5, r3
    if (buf == nullptr) {
   d53bc:	4617      	mov	r7, r2
   d53be:	2a00      	cmp	r2, #0
   d53c0:	d03a      	beq.n	d5438 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        return selfLen_;
    }
    size_t offset;
    size_t adsLen = locate(selfData_, selfLen_, type, &offset);
   d53c2:	460a      	mov	r2, r1
   d53c4:	ab01      	add	r3, sp, #4
   d53c6:	6a01      	ldr	r1, [r0, #32]
   d53c8:	f7ff ffdb 	bl	d5382 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (!force && adsLen > 0) {
   d53cc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   d53d0:	6a22      	ldr	r2, [r4, #32]
   d53d2:	bb03      	cbnz	r3, d5416 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
   d53d4:	b1f8      	cbz	r0, d5416 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x64>
        // Update the existing AD structure.
        size_t staLen = selfLen_ - adsLen;
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d53d6:	1c96      	adds	r6, r2, #2
   d53d8:	442e      	add	r6, r5
   d53da:	1a36      	subs	r6, r6, r0
   d53dc:	2e1f      	cmp	r6, #31
   d53de:	d82b      	bhi.n	d5438 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
            // Firstly, move the last consistent block.
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d53e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d53e4:	f108 0902 	add.w	r9, r8, #2
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d53e8:	ebc8 0202 	rsb	r2, r8, r2
   d53ec:	1a12      	subs	r2, r2, r0
   d53ee:	eb00 0108 	add.w	r1, r0, r8
   d53f2:	eb05 0009 	add.w	r0, r5, r9
   d53f6:	b292      	uxth	r2, r2
   d53f8:	4421      	add	r1, r4
   d53fa:	4420      	add	r0, r4
   d53fc:	f003 fe3e 	bl	d907c <memmove>
            // Secondly, Update the AD structure.
            // The Length field is the total length of Type field and Data field.
            selfData_[offset] = len + 1;
   d5400:	1c6b      	adds	r3, r5, #1
   d5402:	f804 3008 	strb.w	r3, [r4, r8]
            memcpy(&selfData_[offset + 2], buf, len);
   d5406:	462a      	mov	r2, r5
   d5408:	4639      	mov	r1, r7
   d540a:	eb04 0009 	add.w	r0, r4, r9
   d540e:	f003 fe2a 	bl	d9066 <memcpy>
            // An AD structure is composed of one byte length field, one byte Type field and Data field.
            selfLen_ = staLen + len + 2;
   d5412:	6226      	str	r6, [r4, #32]
   d5414:	e010      	b.n	d5438 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
   d5416:	1c90      	adds	r0, r2, #2
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5418:	182b      	adds	r3, r5, r0
   d541a:	2b1f      	cmp	r3, #31
   d541c:	d80c      	bhi.n	d5438 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x86>
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
   d541e:	1c6b      	adds	r3, r5, #1
   d5420:	54a3      	strb	r3, [r4, r2]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5422:	4422      	add	r2, r4
   d5424:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d5426:	4639      	mov	r1, r7
        }
    }
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
        // Append the AD structure at the and of advertising data.
        selfData_[selfLen_++] = len + 1;
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d5428:	7056      	strb	r6, [r2, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d542a:	4420      	add	r0, r4
   d542c:	462a      	mov	r2, r5
   d542e:	f003 fe1a 	bl	d9066 <memcpy>
        selfLen_ += len;
   d5432:	6a22      	ldr	r2, [r4, #32]
   d5434:	442a      	add	r2, r5
   d5436:	6222      	str	r2, [r4, #32]
    }
    return selfLen_;
   d5438:	6a20      	ldr	r0, [r4, #32]
}
   d543a:	b003      	add	sp, #12
   d543c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5440 <_ZN8particle18BleAdvertisingDataC1Ev>:


/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
   d5440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5442:	4604      	mov	r4, r0
        : selfData_(),
          selfLen_(0) {
   d5444:	4603      	mov	r3, r0
   d5446:	f100 021f 	add.w	r2, r0, #31
   d544a:	2000      	movs	r0, #0
   d544c:	f803 0b01 	strb.w	r0, [r3], #1
   d5450:	4293      	cmp	r3, r2
   d5452:	f04f 0100 	mov.w	r1, #0
   d5456:	d1f9      	bne.n	d544c <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5458:	aa04      	add	r2, sp, #16
   d545a:	2306      	movs	r3, #6
   d545c:	f802 3d01 	strb.w	r3, [r2, #-1]!
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5460:	2301      	movs	r3, #1
/*******************************************************
 * BleAdvertisingData class
 */
BleAdvertisingData::BleAdvertisingData()
        : selfData_(),
          selfLen_(0) {
   d5462:	6221      	str	r1, [r4, #32]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5464:	9100      	str	r1, [sp, #0]
   d5466:	4620      	mov	r0, r4
   d5468:	4619      	mov	r1, r3
   d546a:	f7ff ffa2 	bl	d53b2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d546e:	4620      	mov	r0, r4
   d5470:	b004      	add	sp, #16
   d5472:	bd10      	pop	{r4, pc}

000d5474 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5474:	b573      	push	{r0, r1, r4, r5, r6, lr}
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5476:	460a      	mov	r2, r1
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5478:	460e      	mov	r6, r1
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d547a:	ab01      	add	r3, sp, #4
   d547c:	6a01      	ldr	r1, [r0, #32]
void BleAdvertisingData::clear() {
    selfLen_ = 0;
    memset(selfData_, 0x00, sizeof(selfData_));
}

void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d547e:	4604      	mov	r4, r0
    size_t offset, len;
    len = locate(selfData_, selfLen_, type, &offset);
   d5480:	f7ff ff7f 	bl	d5382 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj>
    if (len > 0) {
   d5484:	4605      	mov	r5, r0
   d5486:	b178      	cbz	r0, d54a8 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5488:	9801      	ldr	r0, [sp, #4]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d548a:	6a22      	ldr	r2, [r4, #32]
   d548c:	1829      	adds	r1, r5, r0
   d548e:	1a12      	subs	r2, r2, r0
   d5490:	1b52      	subs	r2, r2, r5
   d5492:	4421      	add	r1, r4
   d5494:	4420      	add	r0, r4
   d5496:	f003 fde6 	bl	d9066 <memcpy>
        selfLen_ -= len;
   d549a:	6a23      	ldr	r3, [r4, #32]
   d549c:	1b5d      	subs	r5, r3, r5
   d549e:	6225      	str	r5, [r4, #32]
        // Recursively remove duplicated type.
        remove(type);
   d54a0:	4631      	mov	r1, r6
   d54a2:	4620      	mov	r0, r4
   d54a4:	f7ff ffe6 	bl	d5474 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
    }
}
   d54a8:	b002      	add	sp, #8
   d54aa:	bd70      	pop	{r4, r5, r6, pc}

000d54ac <_ZN8particle21BleCharacteristicImplC1Ev>:
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d54ac:	b538      	push	{r3, r4, r5, lr}
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d54ae:	2500      	movs	r5, #0
   d54b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
/*******************************************************
 * BleCharacteristicImpl definition
 */
class BleCharacteristicImpl {
public:
    BleCharacteristicImpl()
   d54b4:	4604      	mov	r4, r0
              attrHandles_(),
              charUuid_(),
              svcUuid_(),
              description_(),
              callback_(nullptr),
              context_(nullptr) {
   d54b6:	8043      	strh	r3, [r0, #2]
   d54b8:	220e      	movs	r2, #14
   d54ba:	4629      	mov	r1, r5
   d54bc:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d54be:	7105      	strb	r5, [r0, #4]
   d54c0:	3006      	adds	r0, #6
   d54c2:	f003 fdf6 	bl	d90b2 <memset>
   d54c6:	f104 0014 	add.w	r0, r4, #20
   d54ca:	f7ff fe4f 	bl	d516c <_ZN8particle7BleUuidC1Ev>
   d54ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d54d2:	f7ff fe4b 	bl	d516c <_ZN8particle7BleUuidC1Ev>
   d54d6:	4904      	ldr	r1, [pc, #16]	; (d54e8 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d54d8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d54dc:	f7ff fd83 	bl	d4fe6 <_ZN6StringC1EPK19__FlashStringHelper>
   d54e0:	64e5      	str	r5, [r4, #76]	; 0x4c
   d54e2:	6525      	str	r5, [r4, #80]	; 0x50
    }
   d54e4:	4620      	mov	r0, r4
   d54e6:	bd38      	pop	{r3, r4, r5, pc}
   d54e8:	000d9880 	.word	0x000d9880

000d54ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d54ec:	b510      	push	{r4, lr}
   d54ee:	6983      	ldr	r3, [r0, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d54f0:	69c2      	ldr	r2, [r0, #28]
   d54f2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d54f6:	4293      	cmp	r3, r2
   d54f8:	4618      	mov	r0, r3
   d54fa:	d006      	beq.n	d550a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d54fc:	6804      	ldr	r4, [r0, #0]
   d54fe:	8824      	ldrh	r4, [r4, #0]
   d5500:	428c      	cmp	r4, r1
   d5502:	f103 0308 	add.w	r3, r3, #8
   d5506:	d1f6      	bne.n	d54f6 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
   d5508:	bd10      	pop	{r4, pc}
                return &peer;
            }
        }
        return nullptr;
   d550a:	2000      	movs	r0, #0
    }
   d550c:	bd10      	pop	{r4, pc}
	...

000d5510 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d5510:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d5514:	4680      	mov	r8, r0
   d5516:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5518:	460e      	mov	r6, r1
   d551a:	b369      	cbz	r1, d5578 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d551c:	b362      	cbz	r2, d5578 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x68>
   d551e:	2af4      	cmp	r2, #244	; 0xf4
   d5520:	6805      	ldr	r5, [r0, #0]
   d5522:	bf28      	it	cs
   d5524:	22f4      	movcs	r2, #244	; 0xf4
   d5526:	4614      	mov	r4, r2
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
   d5528:	782a      	ldrb	r2, [r5, #0]
   d552a:	b1a2      	cbz	r2, d5556 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x46>
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d552c:	792b      	ldrb	r3, [r5, #4]
   d552e:	0798      	lsls	r0, r3, #30
   d5530:	d507      	bpl.n	d5542 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x32>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5532:	2300      	movs	r3, #0
   d5534:	4622      	mov	r2, r4
   d5536:	89a8      	ldrh	r0, [r5, #12]
   d5538:	f7ff fa12 	bl	d4960 <hal_ble_gatt_server_set_characteristic_value>
   d553c:	2800      	cmp	r0, #0
   d553e:	da02      	bge.n	d5546 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x36>
   d5540:	e043      	b.n	d55ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->local()) {
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5542:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5546:	f8d8 5000 	ldr.w	r5, [r8]
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d554a:	792b      	ldrb	r3, [r5, #4]
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d554c:	06da      	lsls	r2, r3, #27
   d554e:	d518      	bpl.n	d5582 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
   d5550:	2f01      	cmp	r7, #1
   d5552:	d123      	bne.n	d559c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8c>
   d5554:	e015      	b.n	d5582 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x72>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return ret;
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5556:	8868      	ldrh	r0, [r5, #2]
   d5558:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d555c:	4298      	cmp	r0, r3
   d555e:	d00d      	beq.n	d557c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x6c>
   d5560:	792b      	ldrb	r3, [r5, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5562:	0759      	lsls	r1, r3, #29
   d5564:	d523      	bpl.n	d55ae <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
   d5566:	2f01      	cmp	r7, #1
   d5568:	d021      	beq.n	d55ae <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9e>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d556a:	89a9      	ldrh	r1, [r5, #12]
   d556c:	9200      	str	r2, [sp, #0]
   d556e:	4623      	mov	r3, r4
   d5570:	4632      	mov	r2, r6
   d5572:	f7ff fa09 	bl	d4988 <hal_ble_gatt_client_write_without_response>
   d5576:	e028      	b.n	d55ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
    if (buf == nullptr || len == 0) {
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5578:	4815      	ldr	r0, [pc, #84]	; (d55d0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xc0>)
   d557a:	e026      	b.n	d55ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
   d557c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5580:	e023      	b.n	d55ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5582:	069a      	lsls	r2, r3, #26
   d5584:	d521      	bpl.n	d55ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
   d5586:	2f02      	cmp	r7, #2
   d5588:	d01f      	beq.n	d55ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d558a:	89a8      	ldrh	r0, [r5, #12]
   d558c:	2300      	movs	r3, #0
   d558e:	4622      	mov	r2, r4
   d5590:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d5592:	b002      	add	sp, #8
   d5594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5598:	f7ff ba1e 	b.w	d49d8 <hal_ble_gatt_server_indicate_characteristic_value>
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d559c:	89a8      	ldrh	r0, [r5, #12]
   d559e:	2300      	movs	r3, #0
   d55a0:	4622      	mov	r2, r4
   d55a2:	4631      	mov	r1, r6
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d55a4:	b002      	add	sp, #8
   d55a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d55aa:	f7ff ba0b 	b.w	d49c4 <hal_ble_gatt_server_notify_characteristic_value>
    }
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d55ae:	071b      	lsls	r3, r3, #28
   d55b0:	d501      	bpl.n	d55b6 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xa6>
   d55b2:	2f02      	cmp	r7, #2
   d55b4:	d102      	bne.n	d55bc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xac>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d55b6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d55ba:	e006      	b.n	d55ca <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xba>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d55bc:	2300      	movs	r3, #0
   d55be:	89a9      	ldrh	r1, [r5, #12]
   d55c0:	9300      	str	r3, [sp, #0]
   d55c2:	4632      	mov	r2, r6
   d55c4:	4623      	mov	r3, r4
   d55c6:	f7ff f9d5 	bl	d4974 <hal_ble_gatt_client_write_with_response>
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   d55ca:	b002      	add	sp, #8
   d55cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d55d0:	fffffef2 	.word	0xfffffef2

000d55d4 <_ZNK8particle13BlePeerDevice7addressEv>:

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d55d4:	b510      	push	{r4, lr}
    return impl()->address();
   d55d6:	680a      	ldr	r2, [r1, #0]
   d55d8:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d55dc:	6003      	str	r3, [r0, #0]
   d55de:	6853      	ldr	r3, [r2, #4]
   d55e0:	6043      	str	r3, [r0, #4]
}
   d55e2:	bd10      	pop	{r4, pc}

000d55e4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d55e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d55e6:	6802      	ldr	r2, [r0, #0]
   d55e8:	680b      	ldr	r3, [r1, #0]
   d55ea:	8812      	ldrh	r2, [r2, #0]
   d55ec:	881b      	ldrh	r3, [r3, #0]
   d55ee:	429a      	cmp	r2, r3

BleAddress BlePeerDevice::address() const {
    return impl()->address();
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d55f0:	460c      	mov	r4, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d55f2:	d10c      	bne.n	d560e <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d55f4:	4601      	mov	r1, r0
   d55f6:	4668      	mov	r0, sp
   d55f8:	f7ff ffec 	bl	d55d4 <_ZNK8particle13BlePeerDevice7addressEv>
   d55fc:	4621      	mov	r1, r4
   d55fe:	a802      	add	r0, sp, #8
   d5600:	f7ff ffe8 	bl	d55d4 <_ZNK8particle13BlePeerDevice7addressEv>
   d5604:	a902      	add	r1, sp, #8
   d5606:	4668      	mov	r0, sp
   d5608:	f7ff fda2 	bl	d5150 <_ZNK8particle10BleAddresseqERKS0_>
   d560c:	b900      	cbnz	r0, d5610 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d560e:	2000      	movs	r0, #0
}
   d5610:	b004      	add	sp, #16
   d5612:	bd10      	pop	{r4, pc}

000d5614 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5614:	b510      	push	{r4, lr}
   d5616:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5618:	2034      	movs	r0, #52	; 0x34
   d561a:	f7fe fd3e 	bl	d409a <_Znwj>
   d561e:	4601      	mov	r1, r0
   d5620:	b168      	cbz	r0, d563e <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5622:	2300      	movs	r3, #0
   d5624:	6003      	str	r3, [r0, #0]
   d5626:	6043      	str	r3, [r0, #4]
   d5628:	6083      	str	r3, [r0, #8]
   d562a:	60c3      	str	r3, [r0, #12]
   d562c:	6103      	str	r3, [r0, #16]
   d562e:	6143      	str	r3, [r0, #20]
   d5630:	6183      	str	r3, [r0, #24]
   d5632:	61c3      	str	r3, [r0, #28]
   d5634:	6203      	str	r3, [r0, #32]
public:
    BleLocalDeviceImpl()
            : connectedCb_(nullptr),
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
   d5636:	6243      	str	r3, [r0, #36]	; 0x24
   d5638:	6283      	str	r3, [r0, #40]	; 0x28
   d563a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d563c:	6303      	str	r3, [r0, #48]	; 0x30
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d563e:	6021      	str	r1, [r4, #0]
/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5640:	b919      	cbnz	r1, d564a <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5642:	4a0a      	ldr	r2, [pc, #40]	; (d566c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5644:	200a      	movs	r0, #10
   d5646:	f7ff fae1 	bl	d4c0c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d564a:	2000      	movs	r0, #0
   d564c:	f7ff f954 	bl	d48f8 <hal_ble_stack_init>
   d5650:	b120      	cbz	r0, d565c <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5652:	4a06      	ldr	r2, [pc, #24]	; (d566c <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5654:	2100      	movs	r1, #0
   d5656:	200a      	movs	r0, #10
   d5658:	f7ff fad8 	bl	d4c0c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d565c:	2200      	movs	r2, #0
   d565e:	6821      	ldr	r1, [r4, #0]
   d5660:	4803      	ldr	r0, [pc, #12]	; (d5670 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5662:	f7ff f9a5 	bl	d49b0 <hal_ble_set_callback_on_periph_link_events>
}
   d5666:	4620      	mov	r0, r4
   d5668:	bd10      	pop	{r4, pc}
   d566a:	bf00      	nop
   d566c:	000d48b9 	.word	0x000d48b9
   d5670:	000d5a71 	.word	0x000d5a71

000d5674 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5674:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5676:	4c0a      	ldr	r4, [pc, #40]	; (d56a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>)
   d5678:	6823      	ldr	r3, [r4, #0]
   d567a:	07db      	lsls	r3, r3, #31
   d567c:	d40e      	bmi.n	d569c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d567e:	4620      	mov	r0, r4
   d5680:	f7fe fd1c 	bl	d40bc <__cxa_guard_acquire>
   d5684:	b150      	cbz	r0, d569c <_ZN8particle14BleLocalDevice11getInstanceEv+0x28>
   d5686:	4807      	ldr	r0, [pc, #28]	; (d56a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5688:	f7ff ffc4 	bl	d5614 <_ZN8particle14BleLocalDeviceC1Ev>
   d568c:	4620      	mov	r0, r4
   d568e:	f7fe fd1a 	bl	d40c6 <__cxa_guard_release>
   d5692:	4a05      	ldr	r2, [pc, #20]	; (d56a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5694:	4905      	ldr	r1, [pc, #20]	; (d56ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5696:	4803      	ldr	r0, [pc, #12]	; (d56a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5698:	f002 ff6a 	bl	d8570 <__aeabi_atexit>
    return instance;
}
   d569c:	4801      	ldr	r0, [pc, #4]	; (d56a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d569e:	bd10      	pop	{r4, pc}
   d56a0:	2003e3a8 	.word	0x2003e3a8
   d56a4:	2003e3a4 	.word	0x2003e3a4
   d56a8:	2003e308 	.word	0x2003e308
   d56ac:	000d5859 	.word	0x000d5859

000d56b0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d56b0:	b570      	push	{r4, r5, r6, lr}
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d56b2:	6803      	ldr	r3, [r0, #0]
   d56b4:	3b09      	subs	r3, #9
   d56b6:	2b01      	cmp	r3, #1
/*
 * WARN: This is executed from HAL ble thread. If the BLE wiring lock is acquired by a thread,
 * calling wiring APIs those acquiring the BLE wiring lock from the callback will suspend the
 * the execution of the callback, until the BLE wiring lock is released.
 */
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d56b8:	b08a      	sub	sp, #40	; 0x28
   d56ba:	4604      	mov	r4, r0
   d56bc:	460e      	mov	r6, r1
    auto impl = static_cast<BleCharacteristicImpl*>(context);
    // This callback won't modified any data in wiring.
    //WiringBleLock lk;
    switch (event->type) {
   d56be:	d819      	bhi.n	d56f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
        case BLE_EVT_DATA_NOTIFIED:
        case BLE_EVT_DATA_WRITTEN: {
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d56c0:	f7ff ffd8 	bl	d5674 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d56c4:	88a1      	ldrh	r1, [r4, #4]
   d56c6:	6800      	ldr	r0, [r0, #0]
   d56c8:	f7ff ff10 	bl	d54ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d56cc:	4602      	mov	r2, r0
   d56ce:	b958      	cbnz	r0, d56e8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d56d0:	2320      	movs	r3, #32
   d56d2:	9302      	str	r3, [sp, #8]
   d56d4:	4b08      	ldr	r3, [pc, #32]	; (d56f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x48>)
   d56d6:	9003      	str	r0, [sp, #12]
   d56d8:	9300      	str	r3, [sp, #0]
   d56da:	aa02      	add	r2, sp, #8
   d56dc:	4603      	mov	r3, r0
   d56de:	4907      	ldr	r1, [pc, #28]	; (d56fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d56e0:	2032      	movs	r0, #50	; 0x32
   d56e2:	f7ff fa9b 	bl	d4c1c <log_message>
   d56e6:	e005      	b.n	d56f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                break;
            }
            if (impl->callback_) {
   d56e8:	6cf5      	ldr	r5, [r6, #76]	; 0x4c
   d56ea:	b11d      	cbz	r5, d56f4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x44>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d56ec:	6d33      	ldr	r3, [r6, #80]	; 0x50
   d56ee:	68e1      	ldr	r1, [r4, #12]
   d56f0:	6920      	ldr	r0, [r4, #16]
   d56f2:	47a8      	blx	r5
        }
        default: {
            break;
        }
    }
}
   d56f4:	b00a      	add	sp, #40	; 0x28
   d56f6:	bd70      	pop	{r4, r5, r6, pc}
   d56f8:	000d9646 	.word	0x000d9646
   d56fc:	000d95fc 	.word	0x000d95fc

000d5700 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5700:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5702:	a801      	add	r0, sp, #4
   d5704:	f7ff fd0a 	bl	d511c <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5708:	2000      	movs	r0, #0
   d570a:	f7ff f8f5 	bl	d48f8 <hal_ble_stack_init>
   d570e:	4604      	mov	r4, r0
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
    WiringBleLock lk;
   d5710:	a801      	add	r0, sp, #4
   d5712:	f7ff fd11 	bl	d5138 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}
   d5716:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d571a:	b002      	add	sp, #8
   d571c:	bd10      	pop	{r4, pc}

000d571e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d571e:	4608      	mov	r0, r1
   d5720:	b909      	cbnz	r1, d5726 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x8>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5722:	460a      	mov	r2, r1
   d5724:	e001      	b.n	d572a <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xc>
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5726:	6a09      	ldr	r1, [r1, #32]
   d5728:	2200      	movs	r2, #0
   d572a:	f7ff b8ed 	b.w	d4908 <hal_ble_gap_set_advertising_data>

000d572e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d572e:	b510      	push	{r4, lr}
    if (scanResponse == nullptr) {
   d5730:	460c      	mov	r4, r1
   d5732:	b911      	cbnz	r1, d573a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0xc>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5734:	460a      	mov	r2, r1
   d5736:	4608      	mov	r0, r1
   d5738:	e006      	b.n	d5748 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x1a>
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d573a:	2101      	movs	r1, #1
   d573c:	4620      	mov	r0, r4
   d573e:	f7ff fe99 	bl	d5474 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5742:	6a21      	ldr	r1, [r4, #32]
   d5744:	2200      	movs	r2, #0
   d5746:	4620      	mov	r0, r4
    }
}
   d5748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
    if (scanResponse == nullptr) {
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d574c:	f7ff b8e4 	b.w	d4918 <hal_ble_gap_set_scan_response_data>

000d5750 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5750:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5752:	a801      	add	r0, sp, #4
   d5754:	f7ff fce2 	bl	d511c <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5758:	2000      	movs	r0, #0
   d575a:	f7ff f8e5 	bl	d4928 <hal_ble_gap_start_advertising>
   d575e:	4604      	mov	r4, r0
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
    WiringBleLock lk;
   d5760:	a801      	add	r0, sp, #4
   d5762:	f7ff fce9 	bl	d5138 <_ZN8particle3ble13WiringBleLockD1Ev>
    return hal_ble_gap_start_advertising(nullptr);
}
   d5766:	4620      	mov	r0, r4
   d5768:	b002      	add	sp, #8
   d576a:	bd10      	pop	{r4, pc}

000d576c <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d576c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d576e:	4605      	mov	r5, r0
   d5770:	460c      	mov	r4, r1
    WiringBleLock lk;
   d5772:	a801      	add	r0, sp, #4
int BleLocalDevice::advertise() const {
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5774:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5776:	f7ff fcd1 	bl	d511c <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d577a:	4621      	mov	r1, r4
   d577c:	4628      	mov	r0, r5
   d577e:	f7ff ffce 	bl	d571e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5782:	2800      	cmp	r0, #0
   d5784:	db08      	blt.n	d5798 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    CHECK(setScanResponseData(scanResponse));
   d5786:	4631      	mov	r1, r6
   d5788:	4628      	mov	r0, r5
   d578a:	f7ff ffd0 	bl	d572e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d578e:	2800      	cmp	r0, #0
   d5790:	db02      	blt.n	d5798 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2c>
    return advertise();
   d5792:	4628      	mov	r0, r5
   d5794:	f7ff ffdc 	bl	d5750 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5798:	4604      	mov	r4, r0
    WiringBleLock lk;
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
    WiringBleLock lk;
   d579a:	a801      	add	r0, sp, #4
   d579c:	f7ff fccc 	bl	d5138 <_ZN8particle3ble13WiringBleLockD1Ev>
    CHECK(setAdvertisingData(advertisingData));
    CHECK(setScanResponseData(scanResponse));
    return advertise();
}
   d57a0:	4620      	mov	r0, r4
   d57a2:	b002      	add	sp, #8
   d57a4:	bd70      	pop	{r4, r5, r6, pc}

000d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d57a6:	680b      	ldr	r3, [r1, #0]
   d57a8:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d57aa:	b113      	cbz	r3, d57b2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d57ac:	685a      	ldr	r2, [r3, #4]
   d57ae:	3201      	adds	r2, #1
   d57b0:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d57b2:	4770      	bx	lr

000d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d57b4:	b510      	push	{r4, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d57b6:	f851 3b04 	ldr.w	r3, [r1], #4
   d57ba:	4604      	mov	r4, r0
   d57bc:	f840 3b04 	str.w	r3, [r0], #4
   d57c0:	f7ff fff1 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        : impl_(characteristic.impl_) {
    if (!impl()) {
   d57c4:	6823      	ldr	r3, [r4, #0]
   d57c6:	b90b      	cbnz	r3, d57cc <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d57c8:	f7ff fc78 	bl	d50bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(copy), 0x%08X => 0x%08X -> 0x%08X, count: %d", &characteristic, this, impl(), impl_.use_count());
}
   d57cc:	4620      	mov	r0, r4
   d57ce:	bd10      	pop	{r4, pc}

000d57d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d57d0:	b510      	push	{r4, lr}
   d57d2:	f851 3b04 	ldr.w	r3, [r1], #4
   d57d6:	4604      	mov	r4, r0
   d57d8:	f840 3b04 	str.w	r3, [r0], #4
   d57dc:	f7ff ffe3 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d57e0:	4620      	mov	r0, r4
   d57e2:	bd10      	pop	{r4, pc}

000d57e4 <_ZN8particle17BleCharacteristicD1Ev>:
    impl_ = characteristic.impl_;
    DEBUG("now:0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
    return *this;
}

BleCharacteristic::~BleCharacteristic() {
   d57e4:	b510      	push	{r4, lr}
   d57e6:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d57e8:	3004      	adds	r0, #4
   d57ea:	f7fe fcb8 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("~BleCharacteristic(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}
   d57ee:	4620      	mov	r0, r4
   d57f0:	bd10      	pop	{r4, pc}

000d57f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d57f2:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d57f4:	6804      	ldr	r4, [r0, #0]
   d57f6:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d57f8:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d57fa:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d57fe:	42a6      	cmp	r6, r4
   d5800:	d004      	beq.n	d580c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5802:	1d20      	adds	r0, r4, #4
   d5804:	f7fe fcab 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5808:	3408      	adds	r4, #8
   d580a:	e7f8      	b.n	d57fe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d580c:	6828      	ldr	r0, [r5, #0]
   d580e:	f7ff faf1 	bl	d4df4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5812:	4628      	mov	r0, r5
   d5814:	bd70      	pop	{r4, r5, r6, pc}

000d5816 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5816:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5818:	6804      	ldr	r4, [r0, #0]
   d581a:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d581c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d581e:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5822:	42a6      	cmp	r6, r4
   d5824:	d004      	beq.n	d5830 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5826:	1d20      	adds	r0, r4, #4
   d5828:	f7fe fc99 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d582c:	3408      	adds	r4, #8
   d582e:	e7f8      	b.n	d5822 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5830:	6828      	ldr	r0, [r5, #0]
   d5832:	f7ff fadf 	bl	d4df4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5836:	4628      	mov	r0, r5
   d5838:	bd70      	pop	{r4, r5, r6, pc}

000d583a <_ZNSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d583a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d583c:	6904      	ldr	r4, [r0, #16]
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
    }

    ~BlePeerDeviceImpl() = default;
   d583e:	f104 0018 	add.w	r0, r4, #24
   d5842:	f7ff ffe8 	bl	d5816 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5846:	f104 000c 	add.w	r0, r4, #12
   d584a:	f7ff ffd2 	bl	d57f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
   d584e:	4620      	mov	r0, r4
   d5850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5854:	f7fe bc23 	b.w	d409e <_ZdlPv>

000d5858 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d585a:	6804      	ldr	r4, [r0, #0]
   d585c:	4607      	mov	r7, r0
   d585e:	b1c4      	cbz	r4, d5892 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d5860:	69a5      	ldr	r5, [r4, #24]
   d5862:	69e3      	ldr	r3, [r4, #28]
   d5864:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5868:	42ae      	cmp	r6, r5
   d586a:	d004      	beq.n	d5876 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d586c:	1d28      	adds	r0, r5, #4
   d586e:	f7fe fc76 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5872:	3508      	adds	r5, #8
   d5874:	e7f8      	b.n	d5868 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5876:	69a0      	ldr	r0, [r4, #24]
   d5878:	f7ff fabc 	bl	d4df4 <free>
              disconnectedCb_(nullptr),
              connectedContext_(nullptr),
              disconnectedContext_(nullptr) {
    }

    ~BleLocalDeviceImpl() = default;
   d587c:	f104 000c 	add.w	r0, r4, #12
   d5880:	f7ff ffc9 	bl	d5816 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5884:	4620      	mov	r0, r4
   d5886:	f7ff ffb4 	bl	d57f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d588a:	2134      	movs	r1, #52	; 0x34
   d588c:	4620      	mov	r0, r4
   d588e:	f002 fe7d 	bl	d858c <_ZdlPvj>
   d5892:	4638      	mov	r0, r7
   d5894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5898 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5898:	b573      	push	{r0, r1, r4, r5, r6, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d589a:	2500      	movs	r5, #0
   d589c:	6005      	str	r5, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d589e:	6045      	str	r5, [r0, #4]
   d58a0:	4606      	mov	r6, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d58a2:	2024      	movs	r0, #36	; 0x24
   d58a4:	f7fe fbf9 	bl	d409a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d58a8:	4604      	mov	r4, r0
   d58aa:	b178      	cbz	r0, d58cc <_ZN8particle13BlePeerDeviceC1Ev+0x34>
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d58ac:	4603      	mov	r3, r0
   d58ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d58b2:	f823 2b02 	strh.w	r2, [r3], #2

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d58b6:	f8c0 5002 	str.w	r5, [r0, #2]
   d58ba:	605d      	str	r5, [r3, #4]
public:
    BlePeerDeviceImpl()
            : connHandle_(BLE_INVALID_CONN_HANDLE),
              address_(),
              servicesDiscovered_(false),
              characteristicsDiscovered_(false) {
   d58bc:	7285      	strb	r5, [r0, #10]
   d58be:	72c5      	strb	r5, [r0, #11]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d58c0:	60c5      	str	r5, [r0, #12]
   d58c2:	6105      	str	r5, [r0, #16]
   d58c4:	6145      	str	r5, [r0, #20]
   d58c6:	6185      	str	r5, [r0, #24]
   d58c8:	61c5      	str	r5, [r0, #28]
   d58ca:	6205      	str	r5, [r0, #32]
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d58cc:	2300      	movs	r3, #0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d58ce:	2014      	movs	r0, #20
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	f7fe fbe2 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d58d6:	4603      	mov	r3, r0
   d58d8:	b128      	cbz	r0, d58e6 <_ZN8particle13BlePeerDeviceC1Ev+0x4e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d58da:	2201      	movs	r2, #1
   d58dc:	6042      	str	r2, [r0, #4]
   d58de:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d58e0:	4a08      	ldr	r2, [pc, #32]	; (d5904 <_ZN8particle13BlePeerDeviceC1Ev+0x6c>)
   d58e2:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d58e4:	6104      	str	r4, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d58e6:	a802      	add	r0, sp, #8
   d58e8:	6872      	ldr	r2, [r6, #4]
   d58ea:	f840 2d04 	str.w	r2, [r0, #-4]!
	_M_pi = __tmp;
   d58ee:	6073      	str	r3, [r6, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d58f0:	6034      	str	r4, [r6, #0]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d58f2:	f7fe fc34 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
   d58f6:	6833      	ldr	r3, [r6, #0]
   d58f8:	b90b      	cbnz	r3, d58fe <_ZN8particle13BlePeerDeviceC1Ev+0x66>
   d58fa:	f7ff fbdf 	bl	d50bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d58fe:	4630      	mov	r0, r6
   d5900:	b002      	add	sp, #8
   d5902:	bd70      	pop	{r4, r5, r6, pc}
   d5904:	000d95d8 	.word	0x000d95d8

000d5908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5908:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d590a:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d590c:	6803      	ldr	r3, [r0, #0]
   d590e:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5910:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5912:	d00c      	beq.n	d592e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5914:	b114      	cbz	r4, d591c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d5916:	6863      	ldr	r3, [r4, #4]
   d5918:	3301      	adds	r3, #1
   d591a:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d591c:	6828      	ldr	r0, [r5, #0]
   d591e:	b128      	cbz	r0, d592c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5920:	6843      	ldr	r3, [r0, #4]
   d5922:	3b01      	subs	r3, #1
   d5924:	6043      	str	r3, [r0, #4]
   d5926:	b90b      	cbnz	r3, d592c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d5928:	f7ff fbd2 	bl	d50d0 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d592c:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d592e:	4628      	mov	r0, r5
   d5930:	bd38      	pop	{r3, r4, r5, pc}

000d5932 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5932:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5934:	b570      	push	{r4, r5, r6, lr}
   d5936:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5938:	d91a      	bls.n	d5970 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d593a:	4290      	cmp	r0, r2
   d593c:	d219      	bcs.n	d5972 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d593e:	f1a1 0608 	sub.w	r6, r1, #8
   d5942:	1a51      	subs	r1, r2, r1
   d5944:	3904      	subs	r1, #4
   d5946:	1f15      	subs	r5, r2, #4
   d5948:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d594a:	1f2b      	subs	r3, r5, #4
   d594c:	429e      	cmp	r6, r3
   d594e:	d025      	beq.n	d599c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*end));
   d5950:	2c04      	cmp	r4, #4
   d5952:	d007      	beq.n	d5964 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5954:	f855 3c04 	ldr.w	r3, [r5, #-4]
   d5958:	f844 3c04 	str.w	r3, [r4, #-4]
   d595c:	4629      	mov	r1, r5
   d595e:	4620      	mov	r0, r4
   d5960:	f7ff ff21 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5964:	4628      	mov	r0, r5
   d5966:	f7fe fbfa 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d596a:	3d08      	subs	r5, #8
   d596c:	3c08      	subs	r4, #8
   d596e:	e7ec      	b.n	d594a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x18>
                end->~T();
            }
        } else if (dest != p) {
   d5970:	d014      	beq.n	d599c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
   d5972:	1d0c      	adds	r4, r1, #4
   d5974:	1d06      	adds	r6, r0, #4
            for (; p != end; ++p, ++dest) {
   d5976:	1f23      	subs	r3, r4, #4
   d5978:	429d      	cmp	r5, r3
   d597a:	d00f      	beq.n	d599c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x6a>
                new(dest) T(std::move(*p));
   d597c:	2e04      	cmp	r6, #4
   d597e:	d007      	beq.n	d5990 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x5e>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5980:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d5984:	f846 3c04 	str.w	r3, [r6, #-4]
   d5988:	4621      	mov	r1, r4
   d598a:	4630      	mov	r0, r6
   d598c:	f7ff ff0b 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5990:	4620      	mov	r0, r4
   d5992:	f7fe fbe4 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5996:	3408      	adds	r4, #8
   d5998:	3608      	adds	r6, #8
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d599a:	e7ec      	b.n	d5976 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x44>
   d599c:	bd70      	pop	{r4, r5, r6, pc}

000d599e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d599e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d59a2:	6804      	ldr	r4, [r0, #0]
   d59a4:	6843      	ldr	r3, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d59a6:	4605      	mov	r5, r0
   d59a8:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d59aa:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d59ae:	42a7      	cmp	r7, r4
   d59b0:	d018      	beq.n	d59e4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x46>
            if (*p == value) {
   d59b2:	4641      	mov	r1, r8
   d59b4:	4620      	mov	r0, r4
   d59b6:	f7ff fe15 	bl	d55e4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d59ba:	4606      	mov	r6, r0
   d59bc:	b908      	cbnz	r0, d59c2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d59be:	3408      	adds	r4, #8
   d59c0:	e7f5      	b.n	d59ae <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
   d59c2:	b18c      	cbz	r4, d59e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
   d59c4:	1d20      	adds	r0, r4, #4
   d59c6:	f7fe fbca 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d59ca:	682b      	ldr	r3, [r5, #0]
   d59cc:	686a      	ldr	r2, [r5, #4]
   d59ce:	f104 0108 	add.w	r1, r4, #8
   d59d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d59d6:	4620      	mov	r0, r4
   d59d8:	f7ff ffab 	bl	d5932 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d59dc:	686b      	ldr	r3, [r5, #4]
   d59de:	3b01      	subs	r3, #1
   d59e0:	606b      	str	r3, [r5, #4]
    return true;
   d59e2:	e002      	b.n	d59ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d59e4:	2600      	movs	r6, #0
   d59e6:	e000      	b.n	d59ea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4c>
   d59e8:	4626      	mov	r6, r4
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
    return true;
}
   d59ea:	4630      	mov	r0, r6
   d59ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d59f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d59f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d59f2:	4604      	mov	r4, r0
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d59f4:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d59f8:	6847      	ldr	r7, [r0, #4]
   d59fa:	9300      	str	r3, [sp, #0]
   d59fc:	a801      	add	r0, sp, #4
   d59fe:	f7ff fed2 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5a02:	6866      	ldr	r6, [r4, #4]
   d5a04:	68a3      	ldr	r3, [r4, #8]
   d5a06:	429e      	cmp	r6, r3
   d5a08:	db14      	blt.n	d5a34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x44>
   d5a0a:	3601      	adds	r6, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d5a0c:	2e00      	cmp	r6, #0
   d5a0e:	dd0b      	ble.n	d5a28 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x38>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5a10:	00f0      	lsls	r0, r6, #3
   d5a12:	f7ff f9e7 	bl	d4de4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5a16:	4605      	mov	r5, r0
   d5a18:	b318      	cbz	r0, d5a62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x72>
                return false;
            }
            move(d, data_, data_ + size_);
   d5a1a:	e894 0006 	ldmia.w	r4, {r1, r2}
   d5a1e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5a22:	f7ff ff86 	bl	d5932 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5a26:	e000      	b.n	d5a2a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5a28:	2500      	movs	r5, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5a2a:	6820      	ldr	r0, [r4, #0]
   d5a2c:	f7ff f9e2 	bl	d4df4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5a30:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5a32:	60a6      	str	r6, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5a34:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5a36:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5a38:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5a3c:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5a40:	4629      	mov	r1, r5
   d5a42:	f105 0008 	add.w	r0, r5, #8
   d5a46:	f7ff ff74 	bl	d5932 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5a4a:	b135      	cbz	r5, d5a5a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6a>
   d5a4c:	9b00      	ldr	r3, [sp, #0]
   d5a4e:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5a52:	a901      	add	r1, sp, #4
   d5a54:	1d28      	adds	r0, r5, #4
   d5a56:	f7ff fea6 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5a5a:	6863      	ldr	r3, [r4, #4]
   d5a5c:	3301      	adds	r3, #1
   d5a5e:	6063      	str	r3, [r4, #4]
   d5a60:	2501      	movs	r5, #1
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5a62:	a801      	add	r0, sp, #4
   d5a64:	f7fe fb7b 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5a68:	4628      	mov	r0, r5
   d5a6a:	b003      	add	sp, #12
   d5a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5a70 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a74:	4604      	mov	r4, r0
   d5a76:	b08e      	sub	sp, #56	; 0x38
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5a78:	a803      	add	r0, sp, #12
            }
        }
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5a7a:	460d      	mov	r5, r1
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5a7c:	f7ff fb4e 	bl	d511c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5a80:	6823      	ldr	r3, [r4, #0]
   d5a82:	2b03      	cmp	r3, #3
   d5a84:	d002      	beq.n	d5a8c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
   d5a86:	2b04      	cmp	r3, #4
   d5a88:	d042      	beq.n	d5b10 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xa0>
   d5a8a:	e087      	b.n	d5b9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
   d5a8c:	a804      	add	r0, sp, #16
   d5a8e:	f7ff ff03 	bl	d5898 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5a92:	9b04      	ldr	r3, [sp, #16]
   d5a94:	8922      	ldrh	r2, [r4, #8]
   d5a96:	801a      	strh	r2, [r3, #0]
    }
    return address_.addr[i];
}

BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
    address_ = addr;
   d5a98:	6862      	ldr	r2, [r4, #4]
   d5a9a:	9904      	ldr	r1, [sp, #16]
   d5a9c:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5aa0:	f8c1 3002 	str.w	r3, [r1, #2]
   d5aa4:	6853      	ldr	r3, [r2, #4]
   d5aa6:	f8c1 3006 	str.w	r3, [r1, #6]
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5aaa:	a807      	add	r0, sp, #28
   d5aac:	9b04      	ldr	r3, [sp, #16]
   d5aae:	9306      	str	r3, [sp, #24]
   d5ab0:	a905      	add	r1, sp, #20
   d5ab2:	f7ff fe78 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5ab6:	a906      	add	r1, sp, #24
   d5ab8:	f105 0018 	add.w	r0, r5, #24
   d5abc:	f7ff ff98 	bl	d59f0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5ac0:	4604      	mov	r4, r0
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ac2:	a807      	add	r0, sp, #28
   d5ac4:	f7fe fb4b 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ac8:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5aca:	9306      	str	r3, [sp, #24]
        switch (event->type) {
            case BLE_EVT_CONNECTED: {
                BlePeerDevice peer;
                peer.impl()->connHandle() = event->conn_handle;
                peer.impl()->address() = event->params.connected.info->address;
                if (!impl->peers_.append(peer)) {
   d5acc:	b974      	cbnz	r4, d5aec <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x7c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5ace:	4b36      	ldr	r3, [pc, #216]	; (d5ba8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5ad0:	9300      	str	r3, [sp, #0]
   d5ad2:	aa06      	add	r2, sp, #24
   d5ad4:	4623      	mov	r3, r4
   d5ad6:	4935      	ldr	r1, [pc, #212]	; (d5bac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5ad8:	9407      	str	r4, [sp, #28]
   d5ada:	2032      	movs	r0, #50	; 0x32
   d5adc:	f7ff f89e 	bl	d4c1c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5ae0:	9b04      	ldr	r3, [sp, #16]
   d5ae2:	4621      	mov	r1, r4
   d5ae4:	8818      	ldrh	r0, [r3, #0]
   d5ae6:	f7fe ff27 	bl	d4938 <hal_ble_gap_disconnect>
   d5aea:	e00d      	b.n	d5b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    return;
                }
                LOG(TRACE, "Connected by Central device.");
   d5aec:	4a30      	ldr	r2, [pc, #192]	; (d5bb0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5aee:	9200      	str	r2, [sp, #0]
   d5af0:	2300      	movs	r3, #0
   d5af2:	aa06      	add	r2, sp, #24
   d5af4:	492d      	ldr	r1, [pc, #180]	; (d5bac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5af6:	9307      	str	r3, [sp, #28]
   d5af8:	2001      	movs	r0, #1
   d5afa:	f7ff f88f 	bl	d4c1c <log_message>
                if (impl->connectedCb_) {
   d5afe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5b00:	b113      	cbz	r3, d5b08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x98>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5b02:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5b04:	a804      	add	r0, sp, #16
   d5b06:	4798      	blx	r3
   d5b08:	a805      	add	r0, sp, #20
   d5b0a:	f7fe fb28 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b0e:	e045      	b.n	d5b9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
                }
                break;
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5b10:	8921      	ldrh	r1, [r4, #8]
   d5b12:	4628      	mov	r0, r5
   d5b14:	f7ff fcea 	bl	d54ec <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5b18:	4607      	mov	r7, r0
   d5b1a:	2800      	cmp	r0, #0
   d5b1c:	d03e      	beq.n	d5b9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12c>
   d5b1e:	6804      	ldr	r4, [r0, #0]
   d5b20:	69a3      	ldr	r3, [r4, #24]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5b22:	69e1      	ldr	r1, [r4, #28]
    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
    }

    void onDisconnected() {
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5b24:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5b28:	8022      	strh	r2, [r4, #0]
   d5b2a:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5b2e:	4299      	cmp	r1, r3
   d5b30:	d003      	beq.n	d5b3a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
   d5b32:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5b36:	8042      	strh	r2, [r0, #2]
   d5b38:	e7f9      	b.n	d5b2e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xbe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5b3a:	68e6      	ldr	r6, [r4, #12]
   d5b3c:	6923      	ldr	r3, [r4, #16]
   d5b3e:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b42:	45b0      	cmp	r8, r6
   d5b44:	d004      	beq.n	d5b50 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xe0>
   d5b46:	1d30      	adds	r0, r6, #4
   d5b48:	f7fe fb09 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b4c:	3608      	adds	r6, #8
   d5b4e:	e7f8      	b.n	d5b42 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd2>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5b50:	2300      	movs	r3, #0
   d5b52:	6123      	str	r3, [r4, #16]
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d5b54:	69a6      	ldr	r6, [r4, #24]
   d5b56:	69e3      	ldr	r3, [r4, #28]
   d5b58:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5b5c:	45b0      	cmp	r8, r6
   d5b5e:	d004      	beq.n	d5b6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xfa>
   d5b60:	1d30      	adds	r0, r6, #4
   d5b62:	f7fe fafc 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5b66:	3608      	adds	r6, #8
   d5b68:	e7f8      	b.n	d5b5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d5b6a:	2300      	movs	r3, #0
   d5b6c:	61e3      	str	r3, [r4, #28]
        }
        services_.clear();
        characteristics_.clear();
        servicesDiscovered_ = false;
   d5b6e:	72a3      	strb	r3, [r4, #10]
        characteristicsDiscovered_ = false;
   d5b70:	72e3      	strb	r3, [r4, #11]
            }
            case BLE_EVT_DISCONNECTED: {
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
                if (peer) {
                    peer->impl()->onDisconnected();
                    if (impl->disconnectedCb_) {
   d5b72:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5b74:	b113      	cbz	r3, d5b7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5b76:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5b78:	4638      	mov	r0, r7
   d5b7a:	4798      	blx	r3
                    }
                    LOG(TRACE, "Disconnected by remote device.");
   d5b7c:	2320      	movs	r3, #32
   d5b7e:	4a0d      	ldr	r2, [pc, #52]	; (d5bb4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5b80:	9306      	str	r3, [sp, #24]
   d5b82:	9200      	str	r2, [sp, #0]
   d5b84:	2300      	movs	r3, #0
   d5b86:	4909      	ldr	r1, [pc, #36]	; (d5bac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5b88:	9307      	str	r3, [sp, #28]
   d5b8a:	2001      	movs	r0, #1
   d5b8c:	aa06      	add	r2, sp, #24
   d5b8e:	f7ff f845 	bl	d4c1c <log_message>
                    impl->peers_.removeOne(*peer);
   d5b92:	4639      	mov	r1, r7
   d5b94:	f105 0018 	add.w	r0, r5, #24
   d5b98:	f7ff ff01 	bl	d599e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
        return nullptr;
    }

    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
        auto impl = static_cast<BleLocalDeviceImpl*>(context);
        WiringBleLock lk;
   d5b9c:	a803      	add	r0, sp, #12
   d5b9e:	f7ff facb 	bl	d5138 <_ZN8particle3ble13WiringBleLockD1Ev>
            }
            default: {
                break;
            }
        }
    }
   d5ba2:	b00e      	add	sp, #56	; 0x38
   d5ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5ba8:	000d965e 	.word	0x000d965e
   d5bac:	000d95fc 	.word	0x000d95fc
   d5bb0:	000d9684 	.word	0x000d9684
   d5bb4:	000d96a1 	.word	0x000d96a1

000d5bb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5bb8:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5bbc:	4606      	mov	r6, r0
   d5bbe:	460c      	mov	r4, r1
   d5bc0:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5bc2:	d914      	bls.n	d5bee <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5bc4:	4290      	cmp	r0, r2
   d5bc6:	d213      	bcs.n	d5bf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5bc8:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5bcc:	1a6c      	subs	r4, r5, r1
   d5bce:	f1a1 0708 	sub.w	r7, r1, #8
   d5bd2:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5bd4:	42af      	cmp	r7, r5
   d5bd6:	d018      	beq.n	d5c0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5bd8:	b11c      	cbz	r4, d5be2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept
      : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d5bda:	4629      	mov	r1, r5
   d5bdc:	4620      	mov	r0, r4
   d5bde:	f7ff fdf7 	bl	d57d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5be2:	1d28      	adds	r0, r5, #4
   d5be4:	f7fe fabb 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5be8:	3d08      	subs	r5, #8
   d5bea:	3c08      	subs	r4, #8
   d5bec:	e7f2      	b.n	d5bd4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5bee:	d00c      	beq.n	d5c0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5bf0:	42ac      	cmp	r4, r5
   d5bf2:	d00a      	beq.n	d5c0a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5bf4:	b11e      	cbz	r6, d5bfe <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5bf6:	4621      	mov	r1, r4
   d5bf8:	4630      	mov	r0, r6
   d5bfa:	f7ff fde9 	bl	d57d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d5bfe:	1d20      	adds	r0, r4, #4
   d5c00:	f7fe faad 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5c04:	3408      	adds	r4, #8
   d5c06:	3608      	adds	r6, #8
   d5c08:	e7f2      	b.n	d5bf0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5c0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5c0c:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5c0e:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5c10:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5c12:	dd0b      	ble.n	d5c2c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5c14:	00f0      	lsls	r0, r6, #3
   d5c16:	f7ff f8e5 	bl	d4de4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5c1a:	4604      	mov	r4, r0
   d5c1c:	b170      	cbz	r0, d5c3c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5c1e:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5c22:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5c26:	f7ff ffc7 	bl	d5bb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5c2a:	e000      	b.n	d5c2e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5c2c:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5c2e:	6828      	ldr	r0, [r5, #0]
   d5c30:	f7ff f8e0 	bl	d4df4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5c34:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5c36:	60ae      	str	r6, [r5, #8]
        return true;
   d5c38:	2001      	movs	r0, #1
   d5c3a:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5c3c:	bd70      	pop	{r4, r5, r6, pc}

000d5c3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5c40:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5c42:	6845      	ldr	r5, [r0, #4]
   d5c44:	4668      	mov	r0, sp
   d5c46:	f7ff fdc3 	bl	d57d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5c4a:	6861      	ldr	r1, [r4, #4]
   d5c4c:	68a3      	ldr	r3, [r4, #8]
   d5c4e:	4299      	cmp	r1, r3
   d5c50:	db05      	blt.n	d5c5e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5c52:	3101      	adds	r1, #1
   d5c54:	4620      	mov	r0, r4
   d5c56:	f7ff ffd9 	bl	d5c0c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5c5a:	4606      	mov	r6, r0
   d5c5c:	b198      	cbz	r0, d5c86 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5c5e:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5c60:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5c62:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5c66:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5c6a:	4629      	mov	r1, r5
   d5c6c:	f105 0008 	add.w	r0, r5, #8
   d5c70:	f7ff ffa2 	bl	d5bb8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5c74:	b11d      	cbz	r5, d5c7e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5c76:	4669      	mov	r1, sp
   d5c78:	4628      	mov	r0, r5
   d5c7a:	f7ff fda9 	bl	d57d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d5c7e:	6863      	ldr	r3, [r4, #4]
   d5c80:	3301      	adds	r3, #1
   d5c82:	6063      	str	r3, [r4, #4]
   d5c84:	2601      	movs	r6, #1
   d5c86:	a801      	add	r0, sp, #4
   d5c88:	f7fe fa69 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5c8c:	4630      	mov	r0, r6
   d5c8e:	b002      	add	sp, #8
   d5c90:	bd70      	pop	{r4, r5, r6, pc}

000d5c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d5c92:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d5c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5c96:	4606      	mov	r6, r0
   d5c98:	460c      	mov	r4, r1
   d5c9a:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5c9c:	d914      	bls.n	d5cc8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d5c9e:	4290      	cmp	r0, r2
   d5ca0:	d213      	bcs.n	d5cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d5ca2:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5ca6:	1a6c      	subs	r4, r5, r1
   d5ca8:	f1a1 0708 	sub.w	r7, r1, #8
   d5cac:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d5cae:	42af      	cmp	r7, r5
   d5cb0:	d018      	beq.n	d5ce4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d5cb2:	b11c      	cbz	r4, d5cbc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d5cb4:	4629      	mov	r1, r5
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	f7ff fd7c 	bl	d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5cbc:	1d28      	adds	r0, r5, #4
   d5cbe:	f7fe fa4e 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d5cc2:	3d08      	subs	r5, #8
   d5cc4:	3c08      	subs	r4, #8
   d5cc6:	e7f2      	b.n	d5cae <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d5cc8:	d00c      	beq.n	d5ce4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d5cca:	42ac      	cmp	r4, r5
   d5ccc:	d00a      	beq.n	d5ce4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d5cce:	b11e      	cbz	r6, d5cd8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d5cd0:	4621      	mov	r1, r4
   d5cd2:	4630      	mov	r0, r6
   d5cd4:	f7ff fd6e 	bl	d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d5cd8:	1d20      	adds	r0, r4, #4
   d5cda:	f7fe fa40 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d5cde:	3408      	adds	r4, #8
   d5ce0:	3608      	adds	r6, #8
   d5ce2:	e7f2      	b.n	d5cca <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
   d5ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5ce6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5ce6:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d5ce8:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d5cea:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d5cec:	dd0b      	ble.n	d5d06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d5cee:	00f0      	lsls	r0, r6, #3
   d5cf0:	f7ff f878 	bl	d4de4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d5cf4:	4604      	mov	r4, r0
   d5cf6:	b170      	cbz	r0, d5d16 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d5cf8:	e895 0006 	ldmia.w	r5, {r1, r2}
   d5cfc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5d00:	f7ff ffc7 	bl	d5c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
   d5d04:	e000      	b.n	d5d08 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d5d06:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5d08:	6828      	ldr	r0, [r5, #0]
   d5d0a:	f7ff f873 	bl	d4df4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d5d0e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d5d10:	60ae      	str	r6, [r5, #8]
        return true;
   d5d12:	2001      	movs	r0, #1
   d5d14:	bd70      	pop	{r4, r5, r6, pc}
    }
   d5d16:	bd70      	pop	{r4, r5, r6, pc}

000d5d18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5d18:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5d1a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d5d1c:	6845      	ldr	r5, [r0, #4]
   d5d1e:	4668      	mov	r0, sp
   d5d20:	f7ff fd48 	bl	d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5d24:	6861      	ldr	r1, [r4, #4]
   d5d26:	68a3      	ldr	r3, [r4, #8]
   d5d28:	4299      	cmp	r1, r3
   d5d2a:	db05      	blt.n	d5d38 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x20>
   d5d2c:	3101      	adds	r1, #1
   d5d2e:	4620      	mov	r0, r4
   d5d30:	f7ff ffd9 	bl	d5ce6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d5d34:	4606      	mov	r6, r0
   d5d36:	b198      	cbz	r0, d5d60 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x48>
        return false;
    }
    T* const p = data_ + i;
   d5d38:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5d3a:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d5d3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d5d40:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5d44:	4629      	mov	r1, r5
   d5d46:	f105 0008 	add.w	r0, r5, #8
   d5d4a:	f7ff ffa2 	bl	d5c92 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5d4e:	b11d      	cbz	r5, d5d58 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5d50:	4669      	mov	r1, sp
   d5d52:	4628      	mov	r0, r5
   d5d54:	f7ff fd2e 	bl	d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
    ++size_;
   d5d58:	6863      	ldr	r3, [r4, #4]
   d5d5a:	3301      	adds	r3, #1
   d5d5c:	6063      	str	r3, [r4, #4]
   d5d5e:	2601      	movs	r6, #1
   d5d60:	a801      	add	r0, sp, #4
   d5d62:	f7fe f9fc 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
}
   d5d66:	4630      	mov	r0, r6
   d5d68:	b002      	add	sp, #8
   d5d6a:	bd70      	pop	{r4, r5, r6, pc}

000d5d6c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5d6c:	b510      	push	{r4, lr}
   d5d6e:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5d70:	6840      	ldr	r0, [r0, #4]
   d5d72:	b108      	cbz	r0, d5d78 <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5d74:	f7fe f993 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5d78:	4620      	mov	r0, r4
   d5d7a:	bd10      	pop	{r4, pc}

000d5d7c <_ZNSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5d7c:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5d7e:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5d80:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5d82:	e88d 0009 	stmia.w	sp, {r0, r3}
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d5d86:	f103 003c 	add.w	r0, r3, #60	; 0x3c
   d5d8a:	f7ff f8e5 	bl	d4f58 <_ZN6StringD1Ev>
   d5d8e:	4668      	mov	r0, sp
   d5d90:	f7ff ffec 	bl	d5d6c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5d94:	b003      	add	sp, #12
   d5d96:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5d9c:	b538      	push	{r3, r4, r5, lr}
   d5d9e:	2300      	movs	r3, #0
   d5da0:	4604      	mov	r4, r0
   d5da2:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5da4:	2014      	movs	r0, #20
   d5da6:	460d      	mov	r5, r1
   d5da8:	f7fe f977 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5dac:	b128      	cbz	r0, d5dba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5dae:	2301      	movs	r3, #1
   d5db0:	6043      	str	r3, [r0, #4]
   d5db2:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5db4:	4b02      	ldr	r3, [pc, #8]	; (d5dc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5db6:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5db8:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5dba:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	bd38      	pop	{r3, r4, r5, pc}
   d5dc0:	000d95a0 	.word	0x000d95a0

000d5dc4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
        SPARK_ASSERT(false);
    }
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5dc8:	b088      	sub	sp, #32
   d5dca:	4605      	mov	r5, r0
   d5dcc:	461e      	mov	r6, r3
   d5dce:	2054      	movs	r0, #84	; 0x54
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5dd0:	2300      	movs	r3, #0
   d5dd2:	460f      	mov	r7, r1
   d5dd4:	4690      	mov	r8, r2
   d5dd6:	9304      	str	r3, [sp, #16]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5dd8:	9305      	str	r3, [sp, #20]
   d5dda:	f7fe f95e 	bl	d409a <_Znwj>
   d5dde:	f8cd d018 	str.w	sp, [sp, #24]
   d5de2:	4604      	mov	r4, r0
   d5de4:	9007      	str	r0, [sp, #28]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5de6:	b1c0      	cbz	r0, d5e1a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x56>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d5de8:	f898 8000 	ldrb.w	r8, [r8]
              callback_(nullptr),
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
   d5dec:	f7ff fb5e 	bl	d54ac <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
        description_ = desc;
   d5df0:	4639      	mov	r1, r7
   d5df2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
              context_(nullptr) {
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
   d5df6:	f884 8004 	strb.w	r8, [r4, #4]
        description_ = desc;
   d5dfa:	f7ff f921 	bl	d5040 <_ZN6StringaSEPKc>
        callback_ = callback;
   d5dfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d5e00:	64e3      	str	r3, [r4, #76]	; 0x4c
        context_ = context;
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5e02:	4631      	mov	r1, r6
    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl() {
        properties_ = properties;
        description_ = desc;
        callback_ = callback;
        context_ = context;
   d5e04:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d5e06:	6523      	str	r3, [r4, #80]	; 0x50
    }

    BleCharacteristicImpl(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context)
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
   d5e08:	f104 0014 	add.w	r0, r4, #20
   d5e0c:	f7ff fa1e 	bl	d524c <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5e10:	990e      	ldr	r1, [sp, #56]	; 0x38
   d5e12:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5e16:	f7ff fa19 	bl	d524c <_ZN8particle7BleUuidaSERKS0_>
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5e1a:	4621      	mov	r1, r4

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5e1c:	2600      	movs	r6, #0
   d5e1e:	ab01      	add	r3, sp, #4
   d5e20:	aa02      	add	r2, sp, #8
   d5e22:	a803      	add	r0, sp, #12
   d5e24:	9607      	str	r6, [sp, #28]
   d5e26:	f7ff ffb9 	bl	d5d9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle21BleCharacteristicImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e2a:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5e2c:	9a05      	ldr	r2, [sp, #20]
   d5e2e:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5e30:	a803      	add	r0, sp, #12
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5e32:	9305      	str	r3, [sp, #20]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5e34:	9404      	str	r4, [sp, #16]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5e36:	f7fe f992 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5e3a:	a806      	add	r0, sp, #24
   d5e3c:	f7ff ff96 	bl	d5d6c <_ZNSt15__allocated_ptrISaIN8particle21BleCharacteristicImplEEED1Ev>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5e40:	9b04      	ldr	r3, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5e42:	6829      	ldr	r1, [r5, #0]
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e44:	9a05      	ldr	r2, [sp, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d5e46:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5e48:	a808      	add	r0, sp, #32
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5e4a:	686b      	ldr	r3, [r5, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5e4c:	9106      	str	r1, [sp, #24]
	__r._M_pi = _M_pi;
   d5e4e:	606a      	str	r2, [r5, #4]
	_M_pi = __tmp;
   d5e50:	f840 3d04 	str.w	r3, [r0, #-4]!

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5e54:	9605      	str	r6, [sp, #20]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5e56:	9604      	str	r6, [sp, #16]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5e58:	f7fe f981 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e5c:	a805      	add	r0, sp, #20
   d5e5e:	f7fe f97e 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    DEBUG("BleCharacteristic(...), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}

void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
    impl_ = std::make_shared<BleCharacteristicImpl>(desc, properties, charUuid, svcUuid, callback, context);
    if (!impl()) {
   d5e62:	6829      	ldr	r1, [r5, #0]
   d5e64:	b919      	cbnz	r1, d5e6e <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xaa>
        SPARK_ASSERT(false);
   d5e66:	4a03      	ldr	r2, [pc, #12]	; (d5e74 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0xb0>)
   d5e68:	200a      	movs	r0, #10
   d5e6a:	f7fe fecf 	bl	d4c0c <panic_>
    }
    DEBUG("BleCharacteristic(), construct(...):0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count());
}
   d5e6e:	b008      	add	sp, #32
   d5e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5e74:	000d48b9 	.word	0x000d48b9

000d5e78 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>:
      __allocated_ptr(__allocated_ptr&& __gd) noexcept
      : _M_alloc(__gd._M_alloc), _M_ptr(__gd._M_ptr)
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
   d5e78:	b510      	push	{r4, lr}
   d5e7a:	4604      	mov	r4, r0
      {
	if (_M_ptr != nullptr)
   d5e7c:	6840      	ldr	r0, [r0, #4]
   d5e7e:	b108      	cbz	r0, d5e84 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev+0xc>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d5e80:	f7fe f90d 	bl	d409e <_ZdlPv>
	  std::allocator_traits<_Alloc>::deallocate(*_M_alloc, _M_ptr, 1);
      }
   d5e84:	4620      	mov	r0, r4
   d5e86:	bd10      	pop	{r4, pc}

000d5e88 <_ZNSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d5e88:	b507      	push	{r0, r1, r2, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5e8a:	6903      	ldr	r3, [r0, #16]
      template<typename _Alloc>
        struct _Deleter
        {
          void operator()(typename _Alloc::value_type* __ptr)
          {
	    __allocated_ptr<_Alloc> __guard{ _M_alloc, __ptr };
   d5e8c:	300c      	adds	r0, #12
      using pointer = typename allocator_traits<_Alloc>::pointer;
      using value_type = typename allocator_traits<_Alloc>::value_type;

      /// Take ownership of __ptr
      __allocated_ptr(_Alloc& __a, pointer __ptr) noexcept
      : _M_alloc(&__a), _M_ptr(__ptr)
   d5e8e:	e88d 0009 	stmia.w	sp, {r0, r3}
   d5e92:	4668      	mov	r0, sp
   d5e94:	f7ff fff0 	bl	d5e78 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d5e98:	b003      	add	sp, #12
   d5e9a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5ea0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>:
	__shared_count(_Ptr __p, _Deleter __d)
	: __shared_count(__p, std::move(__d), allocator<void>())
	{ }

      template<typename _Ptr, typename _Deleter, typename _Alloc>
	__shared_count(_Ptr __p, _Deleter __d, _Alloc __a) : _M_pi(0)
   d5ea0:	b538      	push	{r3, r4, r5, lr}
   d5ea2:	2300      	movs	r3, #0
   d5ea4:	4604      	mov	r4, r0
   d5ea6:	6003      	str	r3, [r0, #0]
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5ea8:	2014      	movs	r0, #20
   d5eaa:	460d      	mov	r5, r1
   d5eac:	f7fe f8f5 	bl	d409a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d5eb0:	b128      	cbz	r0, d5ebe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5eb2:	2301      	movs	r3, #1
   d5eb4:	6043      	str	r3, [r0, #4]
   d5eb6:	6083      	str	r3, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d5eb8:	4b02      	ldr	r3, [pc, #8]	; (d5ec4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_+0x24>)
   d5eba:	6003      	str	r3, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d5ebc:	6105      	str	r5, [r0, #16]
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
	      _M_pi = __mem;
   d5ebe:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      __d(__p); // Call _Deleter on __p.
	      __throw_exception_again;
	    }
	}
   d5ec0:	4620      	mov	r0, r4
   d5ec2:	bd38      	pop	{r3, r4, r5, pc}
   d5ec4:	000d95bc 	.word	0x000d95bc

000d5ec8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d5ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d5eca:	2600      	movs	r6, #0
   d5ecc:	b087      	sub	sp, #28
   d5ece:	6006      	str	r6, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5ed0:	6046      	str	r6, [r0, #4]
   d5ed2:	4604      	mov	r4, r0
   d5ed4:	2018      	movs	r0, #24
   d5ed6:	460f      	mov	r7, r1
   d5ed8:	f7fe f8df 	bl	d409a <_Znwj>
   d5edc:	f8cd d010 	str.w	sp, [sp, #16]
   d5ee0:	4605      	mov	r5, r0
   d5ee2:	9005      	str	r0, [sp, #20]

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5ee4:	b138      	cbz	r0, d5ef6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x2e>
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5ee6:	f7ff f941 	bl	d516c <_ZN8particle7BleUuidC1Ev>
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5eea:	4639      	mov	r1, r7
   d5eec:	4628      	mov	r0, r5
class BleServiceImpl {
public:
    BleServiceImpl()
            : uuid_(),
              startHandle_(BLE_INVALID_ATTR_HANDLE),
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5eee:	82ae      	strh	r6, [r5, #20]
   d5ef0:	82ee      	strh	r6, [r5, #22]
    }

    BleServiceImpl(const BleUuid& svcUuid)
            : BleServiceImpl() {
        uuid_ = svcUuid;
   d5ef2:	f7ff f9ab 	bl	d524c <_ZN8particle7BleUuidaSERKS0_>

      /// Release ownership of the owned pointer
      __allocated_ptr&
      operator=(std::nullptr_t) noexcept
      {
	_M_ptr = nullptr;
   d5ef6:	2300      	movs	r3, #0
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5ef8:	4629      	mov	r1, r5
   d5efa:	9305      	str	r3, [sp, #20]
   d5efc:	aa02      	add	r2, sp, #8
   d5efe:	ab01      	add	r3, sp, #4
   d5f00:	a803      	add	r0, sp, #12
   d5f02:	f7ff ffcd 	bl	d5ea0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle14BleServiceImplENSt12__shared_ptrIS5_LS1_0EE8_DeleterISaIS5_EEESA_EET_T0_T1_>
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5f06:	9b03      	ldr	r3, [sp, #12]
	__r._M_pi = _M_pi;
   d5f08:	6862      	ldr	r2, [r4, #4]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d5f0a:	6025      	str	r5, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d5f0c:	6063      	str	r3, [r4, #4]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5f0e:	a803      	add	r0, sp, #12

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d5f10:	9203      	str	r2, [sp, #12]
	  // _GLIBCXX_RESOLVE_LIB_DEFECTS
	  // 2070. allocate_shared should use allocator_traits<A>::construct
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
   d5f12:	f7fe f924 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	: _M_ptr(), _M_refcount()
	{
	  typedef typename allocator_traits<_Alloc>::template
	    rebind_traits<typename std::remove_cv<_Tp>::type> __traits;
	  _Deleter<typename __traits::allocator_type> __del = { __a };
	  auto __guard = std::__allocate_guarded(__del._M_alloc);
   d5f16:	a804      	add	r0, sp, #16
   d5f18:	f7ff ffae 	bl	d5e78 <_ZNSt15__allocated_ptrISaIN8particle14BleServiceImplEEED1Ev>
    }
}

BleService::BleService(const BleUuid& uuid)
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
   d5f1c:	6823      	ldr	r3, [r4, #0]
   d5f1e:	b90b      	cbnz	r3, d5f24 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x5c>
   d5f20:	f7ff f8cc 	bl	d50bc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.102>
        SPARK_ASSERT(false);
    }
}
   d5f24:	4620      	mov	r0, r4
   d5f26:	b007      	add	sp, #28
   d5f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5f2c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f30:	4617      	mov	r7, r2
   d5f32:	b0a1      	sub	sp, #132	; 0x84
   d5f34:	4680      	mov	r8, r0
    WiringBleLock lk;
   d5f36:	a80a      	add	r0, sp, #40	; 0x28
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d5f38:	460e      	mov	r6, r1
    WiringBleLock lk;
   d5f3a:	f7ff f8ef 	bl	d511c <_ZN8particle3ble13WiringBleLockC1Ev>
   d5f3e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d5f40:	7923      	ldrb	r3, [r4, #4]
   d5f42:	2b00      	cmp	r3, #0
   d5f44:	f000 80de 	beq.w	d6104 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5f48:	6833      	ldr	r3, [r6, #0]
   d5f4a:	68dd      	ldr	r5, [r3, #12]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5f4c:	691b      	ldr	r3, [r3, #16]
   d5f4e:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d5f52:	9303      	str	r3, [sp, #12]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5f54:	f104 0a14 	add.w	sl, r4, #20
                svcUuid_ == impl.svcUuid_ &&
   d5f58:	f104 0b28 	add.w	fp, r4, #40	; 0x28
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d5f5c:	9b03      	ldr	r3, [sp, #12]
   d5f5e:	42ab      	cmp	r3, r5
   d5f60:	d023      	beq.n	d5faa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
   d5f62:	f8d5 9000 	ldr.w	r9, [r5]
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5f66:	4650      	mov	r0, sl
   d5f68:	f109 0114 	add.w	r1, r9, #20
   d5f6c:	f7ff f988 	bl	d5280 <_ZNK8particle7BleUuideqERKS0_>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5f70:	2800      	cmp	r0, #0
   d5f72:	f000 80cc 	beq.w	d610e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
                svcUuid_ == impl.svcUuid_ &&
   d5f76:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d5f7a:	4658      	mov	r0, fp
   d5f7c:	f7ff f980 	bl	d5280 <_ZNK8particle7BleUuideqERKS0_>
    }

    BleCharacteristicImpl& operator=(const BleCharacteristicImpl& charImpl) = delete;

    bool operator==(const BleCharacteristicImpl& impl) {
        if (charUuid_ == impl.charUuid_ &&
   d5f80:	2800      	cmp	r0, #0
   d5f82:	f000 80c4 	beq.w	d610e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
                svcUuid_ == impl.svcUuid_ &&
                isLocal_ == impl.isLocal_ &&
   d5f86:	6823      	ldr	r3, [r4, #0]
   d5f88:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   d5f8c:	f8d9 3000 	ldr.w	r3, [r9]
   d5f90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
   d5f94:	4299      	cmp	r1, r3
   d5f96:	f040 80ba 	bne.w	d610e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e2>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d5f9a:	2320      	movs	r3, #32
   d5f9c:	4a60      	ldr	r2, [pc, #384]	; (d6120 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d5f9e:	9315      	str	r3, [sp, #84]	; 0x54
   d5fa0:	2300      	movs	r3, #0
   d5fa2:	9200      	str	r2, [sp, #0]
   d5fa4:	9316      	str	r3, [sp, #88]	; 0x58
   d5fa6:	aa15      	add	r2, sp, #84	; 0x54
   d5fa8:	e0a8      	b.n	d60fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    BleUuid& charUUID() {
        return charUuid_;
    }

    BleUuid& svcUUID() {
        return svcUuid_;
   d5faa:	f104 0928 	add.w	r9, r4, #40	; 0x28
            return characteristic;
        }
    }
    // If the service that the characteristic belongs to is not specified,
    // put the characteristic to the default service.
    if (!charImpl->svcUUID().isValid()) {
   d5fae:	4648      	mov	r0, r9
   d5fb0:	f7ff f918 	bl	d51e4 <_ZNK8particle7BleUuid7isValidEv>
   d5fb4:	b918      	cbnz	r0, d5fbe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x92>
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d5fb6:	495b      	ldr	r1, [pc, #364]	; (d6124 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d5fb8:	4648      	mov	r0, r9
   d5fba:	f7ff f954 	bl	d5266 <_ZN8particle7BleUuidaSEPKh>
   d5fbe:	6833      	ldr	r3, [r6, #0]
   d5fc0:	681d      	ldr	r5, [r3, #0]
   d5fc2:	685b      	ldr	r3, [r3, #4]
   d5fc4:	eb05 0ac3 	add.w	sl, r5, r3, lsl #3
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5fc8:	4555      	cmp	r5, sl
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5fca:	4649      	mov	r1, r9
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5fcc:	d005      	beq.n	d5fda <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d5fce:	6828      	ldr	r0, [r5, #0]
   d5fd0:	f7ff f956 	bl	d5280 <_ZNK8particle7BleUuideqERKS0_>
   d5fd4:	bb58      	cbnz	r0, d602e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x102>
    if (!charImpl->svcUUID().isValid()) {
        LOG_DEBUG(TRACE, "Assign default service UUID.");
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
    }
    BleService* service = nullptr;
    for (auto& svc : impl()->services()) {
   d5fd6:	3508      	adds	r5, #8
   d5fd8:	e7f6      	b.n	d5fc8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
            break;
        }
    }
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
   d5fda:	a80b      	add	r0, sp, #44	; 0x2c
   d5fdc:	f7ff ff74 	bl	d5ec8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d5fe0:	4649      	mov	r1, r9
   d5fe2:	a815      	add	r0, sp, #84	; 0x54
   d5fe4:	f7ff f910 	bl	d5208 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d5fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d5fea:	2300      	movs	r3, #0
   d5fec:	3214      	adds	r2, #20
   d5fee:	a915      	add	r1, sp, #84	; 0x54
   d5ff0:	2001      	movs	r0, #1
   d5ff2:	f7fe fcab 	bl	d494c <hal_ble_gatt_server_add_service>
   d5ff6:	2800      	cmp	r0, #0
   d5ff8:	d178      	bne.n	d60ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
    }

    ~BleLocalDeviceImpl() = default;

    Vector<BleService>& services() {
        return services_;
   d5ffa:	6835      	ldr	r5, [r6, #0]
   d5ffc:	a90b      	add	r1, sp, #44	; 0x2c
   d5ffe:	a80d      	add	r0, sp, #52	; 0x34
   d6000:	f7ff fbe6 	bl	d57d0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
        }
        if(!impl()->services().append(svc)) {
   d6004:	4628      	mov	r0, r5
   d6006:	a90d      	add	r1, sp, #52	; 0x34
   d6008:	f7ff fe19 	bl	d5c3e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d600c:	4605      	mov	r5, r0
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d600e:	a80e      	add	r0, sp, #56	; 0x38
   d6010:	f7fe f8a5 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6014:	2d00      	cmp	r5, #0
   d6016:	d069      	beq.n	d60ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1c0>
   d6018:	6832      	ldr	r2, [r6, #0]
    return data_[0];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::last() {
    return data_[size_ - 1];
   d601a:	6855      	ldr	r5, [r2, #4]
   d601c:	f105 5300 	add.w	r3, r5, #536870912	; 0x20000000
   d6020:	6815      	ldr	r5, [r2, #0]
   d6022:	3b01      	subs	r3, #1
   d6024:	a80c      	add	r0, sp, #48	; 0x30
   d6026:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d602a:	f7fe f898 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            context_ = charImpl.context_;
        }
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
   d602e:	f104 0914 	add.w	r9, r4, #20
   d6032:	4648      	mov	r0, r9
   d6034:	f7ff f8d6 	bl	d51e4 <_ZNK8particle7BleUuid7isValidEv>
   d6038:	b968      	cbnz	r0, d6056 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x12a>
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d603a:	4b3b      	ldr	r3, [pc, #236]	; (d6128 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d603c:	4939      	ldr	r1, [pc, #228]	; (d6124 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
    }

    void assignUuidIfNeeded() {
        if (!charUuid_.isValid()) {
            LOG_DEBUG(TRACE, "Assign default characteristic UUID.");
            defaultUuidCharCount_++;
   d603e:	881a      	ldrh	r2, [r3, #0]
   d6040:	3201      	adds	r2, #1
   d6042:	b292      	uxth	r2, r2
   d6044:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6046:	a815      	add	r0, sp, #84	; 0x54
   d6048:	2301      	movs	r3, #1
   d604a:	f7ff f8c0 	bl	d51ce <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d604e:	a915      	add	r1, sp, #84	; 0x54
   d6050:	4648      	mov	r0, r9
   d6052:	f7ff f8fb 	bl	d524c <_ZN8particle7BleUuidaSERKS0_>
            return characteristic;
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
   d6056:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
   d605a:	4652      	mov	r2, sl
   d605c:	2100      	movs	r1, #0
   d605e:	a815      	add	r0, sp, #84	; 0x54
   d6060:	f003 f827 	bl	d90b2 <memset>
    charInit.version = BLE_API_VERSION;
   d6064:	2301      	movs	r3, #1
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
   d6066:	4649      	mov	r1, r9
   d6068:	a804      	add	r0, sp, #16
        }
        service = &impl()->services().last();
    }
    charImpl->assignUuidIfNeeded();
    hal_ble_char_init_t charInit = {};
    charInit.version = BLE_API_VERSION;
   d606a:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
    charInit.size = sizeof(hal_ble_char_init_t);
   d606e:	f8ad a056 	strh.w	sl, [sp, #86]	; 0x56
    charInit.uuid = charImpl->charUUID().halUUID();
   d6072:	f7ff f8c9 	bl	d5208 <_ZN8particle7BleUuid7halUUIDEv>
   d6076:	ab04      	add	r3, sp, #16
   d6078:	aa18      	add	r2, sp, #96	; 0x60
   d607a:	f10d 0c20 	add.w	ip, sp, #32
   d607e:	6818      	ldr	r0, [r3, #0]
   d6080:	6859      	ldr	r1, [r3, #4]
   d6082:	4696      	mov	lr, r2
   d6084:	e8ae 0003 	stmia.w	lr!, {r0, r1}
   d6088:	3308      	adds	r3, #8
   d608a:	4563      	cmp	r3, ip
   d608c:	4672      	mov	r2, lr
   d608e:	d1f6      	bne.n	d607e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x152>
   d6090:	6818      	ldr	r0, [r3, #0]
   d6092:	f8ce 0000 	str.w	r0, [lr]
    return *this;
}

template<typename T>
inline typename std::underlying_type_t<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::value() const {
    return value_;
   d6096:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   d6098:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d609c:	682b      	ldr	r3, [r5, #0]
   d609e:	8a9b      	ldrh	r3, [r3, #20]
   d60a0:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d60a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d60a6:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d60a8:	2200      	movs	r2, #0
    charInit.size = sizeof(hal_ble_char_init_t);
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
   d60aa:	4b20      	ldr	r3, [pc, #128]	; (d612c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
   d60ac:	931e      	str	r3, [sp, #120]	; 0x78
    charInit.context = charImpl;
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d60ae:	1da1      	adds	r1, r4, #6
   d60b0:	a815      	add	r0, sp, #84	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
    charInit.properties = charImpl->properties().value();
    charInit.service_handle = service->impl()->startHandle();
    charInit.description = charImpl->description().c_str();
    charInit.callback = charImpl->onBleCharEvents;
    charInit.context = charImpl;
   d60b2:	941f      	str	r4, [sp, #124]	; 0x7c
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d60b4:	f7fe fc72 	bl	d499c <hal_ble_gatt_server_add_characteristic>
   d60b8:	bb20      	cbnz	r0, d6104 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        return characteristic;
    }
    charImpl->local() = true;
   d60ba:	2301      	movs	r3, #1
   d60bc:	7023      	strb	r3, [r4, #0]
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d60be:	6834      	ldr	r4, [r6, #0]
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d60c0:	4639      	mov	r1, r7
    Vector<BleService>& services() {
        return services_;
    }

    Vector<BleCharacteristic>& characteristics() {
        return characteristics_;
   d60c2:	340c      	adds	r4, #12
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
        return characteristic;
    }
    charImpl->local() = true;
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
   d60c4:	a80d      	add	r0, sp, #52	; 0x34
   d60c6:	f7ff fb75 	bl	d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d60ca:	4620      	mov	r0, r4
   d60cc:	a90d      	add	r1, sp, #52	; 0x34
   d60ce:	f7ff fe23 	bl	d5d18 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d60d2:	4604      	mov	r4, r0
   d60d4:	a80e      	add	r0, sp, #56	; 0x38
   d60d6:	f7fe f842 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60da:	b99c      	cbnz	r4, d6104 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d8>
        LOG(ERROR, "Failed to append local characteristic.");
   d60dc:	2320      	movs	r3, #32
   d60de:	930d      	str	r3, [sp, #52]	; 0x34
   d60e0:	4b13      	ldr	r3, [pc, #76]	; (d6130 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d60e2:	9300      	str	r3, [sp, #0]
   d60e4:	940e      	str	r4, [sp, #56]	; 0x38
   d60e6:	4623      	mov	r3, r4
   d60e8:	aa0d      	add	r2, sp, #52	; 0x34
   d60ea:	e007      	b.n	d60fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1d0>
    // Add service as needed.
    if (!service) {
        BleService svc(charImpl->svcUUID());
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
            return characteristic;
   d60ec:	4639      	mov	r1, r7
   d60ee:	4640      	mov	r0, r8
   d60f0:	f7ff fb60 	bl	d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d60f4:	a80c      	add	r0, sp, #48	; 0x30
   d60f6:	f7fe f832 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60fa:	e00a      	b.n	d6112 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d60fc:	490d      	ldr	r1, [pc, #52]	; (d6134 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
   d60fe:	2032      	movs	r0, #50	; 0x32
   d6100:	f7fe fd8c 	bl	d4c1c <log_message>
            return characteristic;
   d6104:	4639      	mov	r1, r7
   d6106:	4640      	mov	r0, r8
   d6108:	f7ff fb54 	bl	d57b4 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d610c:	e001      	b.n	d6112 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e6>
   d610e:	3508      	adds	r5, #8
    WiringBleLock lk;
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
   d6110:	e724      	b.n	d5f5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x30>
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
    WiringBleLock lk;
   d6112:	a80a      	add	r0, sp, #40	; 0x28
   d6114:	f7ff f810 	bl	d5138 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6118:	4640      	mov	r0, r8
   d611a:	b021      	add	sp, #132	; 0x84
   d611c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6120:	000d9771 	.word	0x000d9771
   d6124:	000d95ec 	.word	0x000d95ec
   d6128:	2003e3ac 	.word	0x2003e3ac
   d612c:	000d56b1 	.word	0x000d56b1
   d6130:	000d974a 	.word	0x000d974a
   d6134:	000d95fc 	.word	0x000d95fc

000d6138 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6138:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d613a:	4c06      	ldr	r4, [pc, #24]	; (d6154 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d613c:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d613e:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6140:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d6142:	f7fe fc6b 	bl	d4a1c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6146:	4620      	mov	r0, r4
   d6148:	4a03      	ldr	r2, [pc, #12]	; (d6158 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d614a:	4904      	ldr	r1, [pc, #16]	; (d615c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d614c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d6150:	f002 ba0e 	b.w	d8570 <__aeabi_atexit>
   d6154:	2003e3b0 	.word	0x2003e3b0
   d6158:	2003e308 	.word	0x2003e308
   d615c:	000d50ab 	.word	0x000d50ab

000d6160 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6162:	4606      	mov	r6, r0
   d6164:	460d      	mov	r5, r1
   d6166:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6168:	2400      	movs	r4, #0
  while (size--) {
   d616a:	42bd      	cmp	r5, r7
   d616c:	d00c      	beq.n	d6188 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d616e:	6833      	ldr	r3, [r6, #0]
   d6170:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6174:	689b      	ldr	r3, [r3, #8]
   d6176:	4630      	mov	r0, r6
   d6178:	4798      	blx	r3
     if (chunk>=0)
   d617a:	2800      	cmp	r0, #0
   d617c:	db01      	blt.n	d6182 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d617e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6180:	e7f3      	b.n	d616a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6182:	2c00      	cmp	r4, #0
   d6184:	bf08      	it	eq
   d6186:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6188:	4620      	mov	r0, r4
   d618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d618c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d618c:	b570      	push	{r4, r5, r6, lr}
   d618e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6190:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6192:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6194:	b149      	cbz	r1, d61aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6196:	f002 fffa 	bl	d918e <strlen>
   d619a:	682b      	ldr	r3, [r5, #0]
   d619c:	4602      	mov	r2, r0
   d619e:	4621      	mov	r1, r4
   d61a0:	4628      	mov	r0, r5
   d61a2:	68db      	ldr	r3, [r3, #12]
    }
   d61a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d61a8:	4718      	bx	r3
    }
   d61aa:	bd70      	pop	{r4, r5, r6, pc}

000d61ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d61ac:	6803      	ldr	r3, [r0, #0]
   d61ae:	689b      	ldr	r3, [r3, #8]
   d61b0:	4718      	bx	r3

000d61b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d61b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d61b6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d61b8:	f7ff fff8 	bl	d61ac <_ZN5Print5printEc>
  n += print('\n');
   d61bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d61be:	4604      	mov	r4, r0
  n += print('\n');
   d61c0:	4628      	mov	r0, r5
   d61c2:	f7ff fff3 	bl	d61ac <_ZN5Print5printEc>
  return n;
}
   d61c6:	4420      	add	r0, r4
   d61c8:	bd38      	pop	{r3, r4, r5, pc}

000d61ca <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d61ca:	b530      	push	{r4, r5, lr}
   d61cc:	b08b      	sub	sp, #44	; 0x2c
   d61ce:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d61d0:	2100      	movs	r1, #0
   d61d2:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d61d6:	2a01      	cmp	r2, #1
   d61d8:	bf98      	it	ls
   d61da:	220a      	movls	r2, #10
   d61dc:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d61e0:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d61e4:	fb05 3312 	mls	r3, r5, r2, r3
   d61e8:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d61ec:	2b09      	cmp	r3, #9
   d61ee:	bf94      	ite	ls
   d61f0:	3330      	addls	r3, #48	; 0x30
   d61f2:	3337      	addhi	r3, #55	; 0x37
   d61f4:	b2db      	uxtb	r3, r3
   d61f6:	4621      	mov	r1, r4
   d61f8:	f804 3901 	strb.w	r3, [r4], #-1
   d61fc:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d61fe:	2d00      	cmp	r5, #0
   d6200:	d1ee      	bne.n	d61e0 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6202:	f7ff ffc3 	bl	d618c <_ZN5Print5writeEPKc>
}
   d6206:	b00b      	add	sp, #44	; 0x2c
   d6208:	bd30      	pop	{r4, r5, pc}

000d620a <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d620a:	b40c      	push	{r2, r3}
   d620c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6210:	b087      	sub	sp, #28
   d6212:	af00      	add	r7, sp, #0
   d6214:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6218:	4605      	mov	r5, r0
   d621a:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d621e:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6220:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6222:	4623      	mov	r3, r4
   d6224:	464a      	mov	r2, r9
   d6226:	2114      	movs	r1, #20
   d6228:	1d38      	adds	r0, r7, #4
   d622a:	f7fe fdfb 	bl	d4e24 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d622e:	2813      	cmp	r0, #19
   d6230:	d805      	bhi.n	d623e <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6232:	1d39      	adds	r1, r7, #4
   d6234:	4628      	mov	r0, r5
   d6236:	f7ff ffa9 	bl	d618c <_ZN5Print5writeEPKc>
   d623a:	4604      	mov	r4, r0
   d623c:	e013      	b.n	d6266 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d623e:	f100 0308 	add.w	r3, r0, #8
   d6242:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6246:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6248:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d624c:	1c41      	adds	r1, r0, #1
   d624e:	4623      	mov	r3, r4
   d6250:	464a      	mov	r2, r9
   d6252:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6254:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6256:	f7fe fde5 	bl	d4e24 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d625a:	4669      	mov	r1, sp
   d625c:	4628      	mov	r0, r5
   d625e:	f7ff ff95 	bl	d618c <_ZN5Print5writeEPKc>
   d6262:	4604      	mov	r4, r0
   d6264:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6266:	b11e      	cbz	r6, d6270 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6268:	4628      	mov	r0, r5
   d626a:	f7ff ffa2 	bl	d61b2 <_ZN5Print7printlnEv>
   d626e:	4404      	add	r4, r0
    return n;
}
   d6270:	4620      	mov	r0, r4
   d6272:	371c      	adds	r7, #28
   d6274:	46bd      	mov	sp, r7
   d6276:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d627a:	b002      	add	sp, #8
   d627c:	4770      	bx	lr

000d627e <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d627e:	6880      	ldr	r0, [r0, #8]
   d6280:	6803      	ldr	r3, [r0, #0]
   d6282:	68db      	ldr	r3, [r3, #12]
   d6284:	4718      	bx	r3

000d6286 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d6286:	4770      	bx	lr

000d6288 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d6288:	b119      	cbz	r1, d6292 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d628a:	680b      	ldr	r3, [r1, #0]
   d628c:	4608      	mov	r0, r1
   d628e:	685b      	ldr	r3, [r3, #4]
   d6290:	4718      	bx	r3
   d6292:	4770      	bx	lr

000d6294 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d6294:	b119      	cbz	r1, d629e <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d6296:	680b      	ldr	r3, [r1, #0]
   d6298:	4608      	mov	r0, r1
   d629a:	685b      	ldr	r3, [r3, #4]
   d629c:	4718      	bx	r3
   d629e:	4770      	bx	lr

000d62a0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d62a0:	4770      	bx	lr

000d62a2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d62a2:	4770      	bx	lr

000d62a4 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d62a4:	4770      	bx	lr

000d62a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d62a6:	b538      	push	{r3, r4, r5, lr}
   d62a8:	4604      	mov	r4, r0
   d62aa:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d62ac:	6800      	ldr	r0, [r0, #0]
   d62ae:	212e      	movs	r1, #46	; 0x2e
   d62b0:	f002 ff3e 	bl	d9130 <strchrnul>
    size = s - category;
   d62b4:	6823      	ldr	r3, [r4, #0]
   d62b6:	1ac3      	subs	r3, r0, r3
   d62b8:	602b      	str	r3, [r5, #0]
    if (size) {
   d62ba:	b123      	cbz	r3, d62c6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d62bc:	7803      	ldrb	r3, [r0, #0]
   d62be:	b103      	cbz	r3, d62c2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d62c0:	3001      	adds	r0, #1
   d62c2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d62c4:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d62c6:	4618      	mov	r0, r3
}
   d62c8:	bd38      	pop	{r3, r4, r5, pc}

000d62ca <_ZN5spark16JSONStreamWriterD0Ev>:
   d62ca:	b510      	push	{r4, lr}
   d62cc:	210c      	movs	r1, #12
   d62ce:	4604      	mov	r4, r0
   d62d0:	f002 f95c 	bl	d858c <_ZdlPvj>
   d62d4:	4620      	mov	r0, r4
   d62d6:	bd10      	pop	{r4, pc}

000d62d8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d62d8:	b510      	push	{r4, lr}
   d62da:	2104      	movs	r1, #4
   d62dc:	4604      	mov	r4, r0
   d62de:	f002 f955 	bl	d858c <_ZdlPvj>
   d62e2:	4620      	mov	r0, r4
   d62e4:	bd10      	pop	{r4, pc}

000d62e6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d62e6:	b510      	push	{r4, lr}
   d62e8:	2104      	movs	r1, #4
   d62ea:	4604      	mov	r4, r0
   d62ec:	f002 f94e 	bl	d858c <_ZdlPvj>
   d62f0:	4620      	mov	r0, r4
   d62f2:	bd10      	pop	{r4, pc}

000d62f4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d62f4:	b538      	push	{r3, r4, r5, lr}
   d62f6:	460c      	mov	r4, r1
   d62f8:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d62fa:	f001 fc0f 	bl	d7b1c <_Z16_fetch_usbserialv>
   d62fe:	4284      	cmp	r4, r0
   d6300:	d00d      	beq.n	d631e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d6302:	f001 fc97 	bl	d7c34 <_Z22__fetch_global_Serial1v>
   d6306:	4284      	cmp	r4, r0
   d6308:	d105      	bne.n	d6316 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d630a:	f001 fc93 	bl	d7c34 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d630e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d6312:	f001 bc88 	b.w	d7c26 <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d6316:	4621      	mov	r1, r4
   d6318:	4628      	mov	r0, r5
   d631a:	f7ff ffbb 	bl	d6294 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d631e:	bd38      	pop	{r3, r4, r5, pc}

000d6320 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d6320:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6322:	f002 ff0f 	bl	d9144 <strcmp>
}
   d6326:	fab0 f080 	clz	r0, r0
   d632a:	0940      	lsrs	r0, r0, #5
   d632c:	bd08      	pop	{r3, pc}

000d632e <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d632e:	b538      	push	{r3, r4, r5, lr}
   d6330:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d6332:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d6334:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d6336:	f002 ff2a 	bl	d918e <strlen>
   d633a:	4621      	mov	r1, r4
   d633c:	4602      	mov	r2, r0
   d633e:	4628      	mov	r0, r5
}
   d6340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d6344:	f001 bff5 	b.w	d8332 <_ZN5spark10JSONWriter5valueEPKcj>

000d6348 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6348:	6800      	ldr	r0, [r0, #0]
   d634a:	f7fe bb77 	b.w	d4a3c <os_mutex_recursive_lock>

000d634e <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d634e:	b570      	push	{r4, r5, r6, lr}
   d6350:	4604      	mov	r4, r0
    write(str, strlen(str));
   d6352:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d6354:	460d      	mov	r5, r1
    write(str, strlen(str));
   d6356:	f002 ff1a 	bl	d918e <strlen>
   d635a:	6823      	ldr	r3, [r4, #0]
   d635c:	4602      	mov	r2, r0
   d635e:	4629      	mov	r1, r5
   d6360:	4620      	mov	r0, r4
   d6362:	68db      	ldr	r3, [r3, #12]
}
   d6364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d6368:	4718      	bx	r3

000d636a <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d636a:	b513      	push	{r0, r1, r4, lr}
   d636c:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d636e:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d6370:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d6374:	68d4      	ldr	r4, [r2, #12]
   d6376:	4619      	mov	r1, r3
   d6378:	2201      	movs	r2, #1
   d637a:	47a0      	blx	r4
}
   d637c:	b002      	add	sp, #8
   d637e:	bd10      	pop	{r4, pc}

000d6380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6384:	6845      	ldr	r5, [r0, #4]
   d6386:	6807      	ldr	r7, [r0, #0]
   d6388:	b085      	sub	sp, #20
   d638a:	4691      	mov	r9, r2
   d638c:	2214      	movs	r2, #20
   d638e:	4355      	muls	r5, r2
   d6390:	9301      	str	r3, [sp, #4]
   d6392:	10ab      	asrs	r3, r5, #2
   d6394:	4d19      	ldr	r5, [pc, #100]	; (d63fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d6396:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6398:	435d      	muls	r5, r3
   d639a:	468b      	mov	fp, r1
   d639c:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d639e:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d63a0:	2d00      	cmp	r5, #0
   d63a2:	9303      	str	r3, [sp, #12]
   d63a4:	dd23      	ble.n	d63ee <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d63a6:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d63a8:	106e      	asrs	r6, r5, #1
   d63aa:	fb03 f006 	mul.w	r0, r3, r6
   d63ae:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d63b2:	464a      	mov	r2, r9
   d63b4:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d63b8:	5820      	ldr	r0, [r4, r0]
   d63ba:	45d1      	cmp	r9, sl
   d63bc:	bf28      	it	cs
   d63be:	4652      	movcs	r2, sl
   d63c0:	4659      	mov	r1, fp
   d63c2:	f002 feec 	bl	d919e <strncmp>
                if (cmp == 0) {
   d63c6:	9b03      	ldr	r3, [sp, #12]
   d63c8:	b948      	cbnz	r0, d63de <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d63ca:	45d1      	cmp	r9, sl
   d63cc:	d103      	bne.n	d63d6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d63ce:	9a01      	ldr	r2, [sp, #4]
   d63d0:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d63d2:	4635      	mov	r5, r6
   d63d4:	e7e4      	b.n	d63a0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d63d6:	bf8c      	ite	hi
   d63d8:	2001      	movhi	r0, #1
   d63da:	2000      	movls	r0, #0
   d63dc:	e000      	b.n	d63e0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d63de:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d63e0:	2800      	cmp	r0, #0
   d63e2:	d0f6      	beq.n	d63d2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d63e4:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d63e6:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d63ea:	3e01      	subs	r6, #1
   d63ec:	e7f1      	b.n	d63d2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d63ee:	1be4      	subs	r4, r4, r7
}
   d63f0:	4802      	ldr	r0, [pc, #8]	; (d63fc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d63f2:	10a4      	asrs	r4, r4, #2
}
   d63f4:	4360      	muls	r0, r4
   d63f6:	b005      	add	sp, #20
   d63f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d63fc:	cccccccd 	.word	0xcccccccd

000d6400 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6400:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6402:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d6404:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6406:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d6408:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d640a:	b313      	cbz	r3, d6452 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d640c:	b309      	cbz	r1, d6452 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d640e:	af04      	add	r7, sp, #16
   d6410:	2300      	movs	r3, #0
   d6412:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d6416:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d641a:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d641c:	4639      	mov	r1, r7
   d641e:	a801      	add	r0, sp, #4
   d6420:	f7ff ff41 	bl	d62a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6424:	4601      	mov	r1, r0
   d6426:	b1a0      	cbz	r0, d6452 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d6428:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d642a:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d642c:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6430:	4620      	mov	r0, r4
   d6432:	f7ff ffa5 	bl	d6380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6436:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d643a:	b153      	cbz	r3, d6452 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d643c:	6823      	ldr	r3, [r4, #0]
   d643e:	2414      	movs	r4, #20
   d6440:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d6444:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d6446:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d644a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d644c:	bfa8      	it	ge
   d644e:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6450:	e7e4      	b.n	d641c <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d6452:	4630      	mov	r0, r6
   d6454:	b005      	add	sp, #20
   d6456:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6458 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6458:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d645a:	4c09      	ldr	r4, [pc, #36]	; (d6480 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d645c:	6823      	ldr	r3, [r4, #0]
   d645e:	07db      	lsls	r3, r3, #31
   d6460:	d40b      	bmi.n	d647a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6462:	4620      	mov	r0, r4
   d6464:	f7fd fe2a 	bl	d40bc <__cxa_guard_acquire>
   d6468:	b138      	cbz	r0, d647a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d646a:	4620      	mov	r0, r4
   d646c:	f7fd fe2b 	bl	d40c6 <__cxa_guard_release>
   d6470:	4a04      	ldr	r2, [pc, #16]	; (d6484 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6472:	4905      	ldr	r1, [pc, #20]	; (d6488 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6474:	4805      	ldr	r0, [pc, #20]	; (d648c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6476:	f002 f87b 	bl	d8570 <__aeabi_atexit>
    return &factory;
}
   d647a:	4804      	ldr	r0, [pc, #16]	; (d648c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d647c:	bd10      	pop	{r4, pc}
   d647e:	bf00      	nop
   d6480:	2003e3b4 	.word	0x2003e3b4
   d6484:	2003e308 	.word	0x2003e308
   d6488:	000d62a3 	.word	0x000d62a3
   d648c:	2003e294 	.word	0x2003e294

000d6490 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6490:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6492:	4c09      	ldr	r4, [pc, #36]	; (d64b8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6494:	6823      	ldr	r3, [r4, #0]
   d6496:	07db      	lsls	r3, r3, #31
   d6498:	d40b      	bmi.n	d64b2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d649a:	4620      	mov	r0, r4
   d649c:	f7fd fe0e 	bl	d40bc <__cxa_guard_acquire>
   d64a0:	b138      	cbz	r0, d64b2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d64a2:	4620      	mov	r0, r4
   d64a4:	f7fd fe0f 	bl	d40c6 <__cxa_guard_release>
   d64a8:	4a04      	ldr	r2, [pc, #16]	; (d64bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d64aa:	4905      	ldr	r1, [pc, #20]	; (d64c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d64ac:	4805      	ldr	r0, [pc, #20]	; (d64c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d64ae:	f002 f85f 	bl	d8570 <__aeabi_atexit>
    return &factory;
}
   d64b2:	4804      	ldr	r0, [pc, #16]	; (d64c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d64b4:	bd10      	pop	{r4, pc}
   d64b6:	bf00      	nop
   d64b8:	2003e3e4 	.word	0x2003e3e4
   d64bc:	2003e308 	.word	0x2003e308
   d64c0:	000d62a1 	.word	0x000d62a1
   d64c4:	2003e290 	.word	0x2003e290

000d64c8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d64c8:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d64ca:	2500      	movs	r5, #0
   d64cc:	4604      	mov	r4, r0
   d64ce:	6005      	str	r5, [r0, #0]
   d64d0:	6045      	str	r5, [r0, #4]
   d64d2:	6085      	str	r5, [r0, #8]
   d64d4:	6105      	str	r5, [r0, #16]
   d64d6:	6145      	str	r5, [r0, #20]
   d64d8:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d64da:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d64de:	f7fe fa9d 	bl	d4a1c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d64e2:	f7ff ffb9 	bl	d6458 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d64e6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d64e8:	f7ff ffd2 	bl	d6490 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d64ec:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d64ee:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d64f0:	4620      	mov	r0, r4
   d64f2:	bd38      	pop	{r3, r4, r5, pc}

000d64f4 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d64f4:	b510      	push	{r4, lr}
    static LogManager mgr;
   d64f6:	4c0a      	ldr	r4, [pc, #40]	; (d6520 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d64f8:	6823      	ldr	r3, [r4, #0]
   d64fa:	07db      	lsls	r3, r3, #31
   d64fc:	d40e      	bmi.n	d651c <_ZN5spark10LogManager8instanceEv+0x28>
   d64fe:	4620      	mov	r0, r4
   d6500:	f7fd fddc 	bl	d40bc <__cxa_guard_acquire>
   d6504:	b150      	cbz	r0, d651c <_ZN5spark10LogManager8instanceEv+0x28>
   d6506:	4807      	ldr	r0, [pc, #28]	; (d6524 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6508:	f7ff ffde 	bl	d64c8 <_ZN5spark10LogManagerC1Ev>
   d650c:	4620      	mov	r0, r4
   d650e:	f7fd fdda 	bl	d40c6 <__cxa_guard_release>
   d6512:	4a05      	ldr	r2, [pc, #20]	; (d6528 <_ZN5spark10LogManager8instanceEv+0x34>)
   d6514:	4905      	ldr	r1, [pc, #20]	; (d652c <_ZN5spark10LogManager8instanceEv+0x38>)
   d6516:	4803      	ldr	r0, [pc, #12]	; (d6524 <_ZN5spark10LogManager8instanceEv+0x30>)
   d6518:	f002 f82a 	bl	d8570 <__aeabi_atexit>
    return &mgr;
}
   d651c:	4801      	ldr	r0, [pc, #4]	; (d6524 <_ZN5spark10LogManager8instanceEv+0x30>)
   d651e:	bd10      	pop	{r4, pc}
   d6520:	2003e3b8 	.word	0x2003e3b8
   d6524:	2003e3bc 	.word	0x2003e3bc
   d6528:	2003e308 	.word	0x2003e308
   d652c:	000d695f 	.word	0x000d695f

000d6530 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6530:	2300      	movs	r3, #0
   d6532:	4a02      	ldr	r2, [pc, #8]	; (d653c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d6534:	4902      	ldr	r1, [pc, #8]	; (d6540 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d6536:	4803      	ldr	r0, [pc, #12]	; (d6544 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d6538:	f7fe bb88 	b.w	d4c4c <log_set_callbacks>
   d653c:	000d6841 	.word	0x000d6841
   d6540:	000d67d1 	.word	0x000d67d1
   d6544:	000d6759 	.word	0x000d6759

000d6548 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6548:	2300      	movs	r3, #0
   d654a:	461a      	mov	r2, r3
   d654c:	4619      	mov	r1, r3
   d654e:	4618      	mov	r0, r3
   d6550:	f7fe bb7c 	b.w	d4c4c <log_set_callbacks>

000d6554 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6554:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6556:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d6558:	688e      	ldr	r6, [r1, #8]
   d655a:	f851 3b04 	ldr.w	r3, [r1], #4
   d655e:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6562:	4605      	mov	r5, r0
   d6564:	a801      	add	r0, sp, #4
   d6566:	f7ff f91e 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d656a:	4622      	mov	r2, r4
   d656c:	4631      	mov	r1, r6
   d656e:	4628      	mov	r0, r5
   d6570:	f001 ff16 	bl	d83a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6574:	a801      	add	r0, sp, #4
   d6576:	f7fd fdf2 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d657a:	4628      	mov	r0, r5
   d657c:	b002      	add	sp, #8
   d657e:	bd70      	pop	{r4, r5, r6, pc}

000d6580 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6580:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6582:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d6584:	690e      	ldr	r6, [r1, #16]
   d6586:	f851 3b04 	ldr.w	r3, [r1], #4
   d658a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d658e:	4605      	mov	r5, r0
   d6590:	a801      	add	r0, sp, #4
   d6592:	f7ff f908 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d6596:	4622      	mov	r2, r4
   d6598:	4631      	mov	r1, r6
   d659a:	4628      	mov	r0, r5
   d659c:	f001 ff1b 	bl	d83d6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d65a0:	a801      	add	r0, sp, #4
   d65a2:	f7fd fddc 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65a6:	4628      	mov	r0, r5
   d65a8:	b002      	add	sp, #8
   d65aa:	bd70      	pop	{r4, r5, r6, pc}

000d65ac <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d65ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d65ae:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d65b0:	68ce      	ldr	r6, [r1, #12]
   d65b2:	f851 3b04 	ldr.w	r3, [r1], #4
   d65b6:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d65ba:	4605      	mov	r5, r0
   d65bc:	a801      	add	r0, sp, #4
   d65be:	f7ff f8f2 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d65c2:	4622      	mov	r2, r4
   d65c4:	4631      	mov	r1, r6
   d65c6:	4628      	mov	r0, r5
   d65c8:	f001 fec2 	bl	d8350 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d65cc:	a801      	add	r0, sp, #4
   d65ce:	f7fd fdc6 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65d2:	4628      	mov	r0, r5
   d65d4:	b002      	add	sp, #8
   d65d6:	bd70      	pop	{r4, r5, r6, pc}

000d65d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d65d8:	b530      	push	{r4, r5, lr}
   d65da:	b08b      	sub	sp, #44	; 0x2c
   d65dc:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d65de:	4601      	mov	r1, r0
   d65e0:	a804      	add	r0, sp, #16
   d65e2:	f7ff ffb7 	bl	d6554 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d65e6:	a804      	add	r0, sp, #16
   d65e8:	f001 fde5 	bl	d81b6 <_ZN5spark18JSONObjectIterator4nextEv>
   d65ec:	b1e8      	cbz	r0, d662a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d65ee:	a904      	add	r1, sp, #16
   d65f0:	4668      	mov	r0, sp
   d65f2:	f7ff ffdb 	bl	d65ac <_ZNK5spark18JSONObjectIterator4nameEv>
   d65f6:	490f      	ldr	r1, [pc, #60]	; (d6634 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d65f8:	9802      	ldr	r0, [sp, #8]
   d65fa:	f7ff fe91 	bl	d6320 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d65fe:	4604      	mov	r4, r0
   d6600:	b110      	cbz	r0, d6608 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d6602:	1c2c      	adds	r4, r5, #0
   d6604:	bf18      	it	ne
   d6606:	2401      	movne	r4, #1
   d6608:	a801      	add	r0, sp, #4
   d660a:	f7fd fda8 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d660e:	2c00      	cmp	r4, #0
   d6610:	d0e9      	beq.n	d65e6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d6612:	a904      	add	r1, sp, #16
   d6614:	4668      	mov	r0, sp
   d6616:	f7ff ffb3 	bl	d6580 <_ZNK5spark18JSONObjectIterator5valueEv>
   d661a:	4668      	mov	r0, sp
   d661c:	f001 fdab 	bl	d8176 <_ZNK5spark9JSONValue5toIntEv>
   d6620:	6028      	str	r0, [r5, #0]
   d6622:	a801      	add	r0, sp, #4
   d6624:	f7fd fd9b 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6628:	e7dd      	b.n	d65e6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d662a:	a805      	add	r0, sp, #20
   d662c:	f7fd fd97 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d6630:	b00b      	add	sp, #44	; 0x2c
   d6632:	bd30      	pop	{r4, r5, pc}
   d6634:	000d97dc 	.word	0x000d97dc

000d6638 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6638:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d663a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d663c:	4620      	mov	r0, r4
   d663e:	4913      	ldr	r1, [pc, #76]	; (d668c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6640:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d6642:	f002 fd7f 	bl	d9144 <strcmp>
   d6646:	b940      	cbnz	r0, d665a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d6648:	f001 fa68 	bl	d7b1c <_Z16_fetch_usbserialv>
   d664c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6650:	f001 fa54 	bl	d7afc <_ZN9USBSerial5beginEl>
        return &Serial;
   d6654:	f001 fa62 	bl	d7b1c <_Z16_fetch_usbserialv>
   d6658:	e015      	b.n	d6686 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d665a:	490d      	ldr	r1, [pc, #52]	; (d6690 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d665c:	4620      	mov	r0, r4
   d665e:	f002 fd71 	bl	d9144 <strcmp>
   d6662:	b978      	cbnz	r0, d6684 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6664:	a902      	add	r1, sp, #8
   d6666:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d666a:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d666e:	4628      	mov	r0, r5
   d6670:	f7ff ffb2 	bl	d65d8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6674:	f001 fade 	bl	d7c34 <_Z22__fetch_global_Serial1v>
   d6678:	9901      	ldr	r1, [sp, #4]
   d667a:	f001 fad1 	bl	d7c20 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d667e:	f001 fad9 	bl	d7c34 <_Z22__fetch_global_Serial1v>
   d6682:	e000      	b.n	d6686 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d6684:	2000      	movs	r0, #0
}
   d6686:	b003      	add	sp, #12
   d6688:	bd30      	pop	{r4, r5, pc}
   d668a:	bf00      	nop
   d668c:	000d97e1 	.word	0x000d97e1
   d6690:	000d97e8 	.word	0x000d97e8

000d6694 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6694:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6696:	6804      	ldr	r4, [r0, #0]
   d6698:	6843      	ldr	r3, [r0, #4]
   d669a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d669c:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d669e:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d66a2:	42a6      	cmp	r6, r4
   d66a4:	d005      	beq.n	d66b2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d66a6:	f104 0008 	add.w	r0, r4, #8
   d66aa:	f7ff fff3 	bl	d6694 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d66ae:	3414      	adds	r4, #20
   d66b0:	e7f7      	b.n	d66a2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d66b2:	6828      	ldr	r0, [r5, #0]
   d66b4:	f7fe fb9e 	bl	d4df4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d66b8:	4628      	mov	r0, r5
   d66ba:	bd70      	pop	{r4, r5, r6, pc}

000d66bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d66be:	6804      	ldr	r4, [r0, #0]
   d66c0:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d66c2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d66c4:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d66c8:	42a6      	cmp	r6, r4
   d66ca:	d004      	beq.n	d66d6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d66cc:	4620      	mov	r0, r4
   d66ce:	f7fe fc43 	bl	d4f58 <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d66d2:	3410      	adds	r4, #16
   d66d4:	e7f8      	b.n	d66c8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d66d6:	6828      	ldr	r0, [r5, #0]
   d66d8:	f7fe fb8c 	bl	d4df4 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d66dc:	4628      	mov	r0, r5
   d66de:	bd70      	pop	{r4, r5, r6, pc}

000d66e0 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d66e0:	b510      	push	{r4, lr}
   d66e2:	4604      	mov	r4, r0
   d66e4:	300c      	adds	r0, #12
   d66e6:	f7ff ffd5 	bl	d6694 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d66ea:	4620      	mov	r0, r4
   d66ec:	f7ff ffe6 	bl	d66bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d66f0:	4620      	mov	r0, r4
   d66f2:	bd10      	pop	{r4, pc}

000d66f4 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d66f4:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d66f6:	4b04      	ldr	r3, [pc, #16]	; (d6708 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d66f8:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d66fa:	f840 3b04 	str.w	r3, [r0], #4
   d66fe:	f7ff ffef 	bl	d66e0 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d6702:	4620      	mov	r0, r4
   d6704:	bd10      	pop	{r4, pc}
   d6706:	bf00      	nop
   d6708:	000d9344 	.word	0x000d9344

000d670c <_ZN5spark16StreamLogHandlerD0Ev>:
   d670c:	b510      	push	{r4, lr}
   d670e:	4604      	mov	r4, r0
   d6710:	f7ff fff0 	bl	d66f4 <_ZN5spark16StreamLogHandlerD1Ev>
   d6714:	4620      	mov	r0, r4
   d6716:	2124      	movs	r1, #36	; 0x24
   d6718:	f001 ff38 	bl	d858c <_ZdlPvj>
   d671c:	4620      	mov	r0, r4
   d671e:	bd10      	pop	{r4, pc}

000d6720 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d6720:	b510      	push	{r4, lr}
   d6722:	4b03      	ldr	r3, [pc, #12]	; (d6730 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6724:	6003      	str	r3, [r0, #0]
   d6726:	4604      	mov	r4, r0
   d6728:	f7ff ffe4 	bl	d66f4 <_ZN5spark16StreamLogHandlerD1Ev>
   d672c:	4620      	mov	r0, r4
   d672e:	bd10      	pop	{r4, pc}
   d6730:	000d97cc 	.word	0x000d97cc

000d6734 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6734:	b510      	push	{r4, lr}
   d6736:	4604      	mov	r4, r0
   d6738:	f7ff fff2 	bl	d6720 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d673c:	4620      	mov	r0, r4
   d673e:	2124      	movs	r1, #36	; 0x24
   d6740:	f001 ff24 	bl	d858c <_ZdlPvj>
   d6744:	4620      	mov	r0, r4
   d6746:	bd10      	pop	{r4, pc}

000d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6748:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d674a:	6803      	ldr	r3, [r0, #0]
   d674c:	4604      	mov	r4, r0
   d674e:	6818      	ldr	r0, [r3, #0]
   d6750:	f7fe f97c 	bl	d4a4c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d6754:	4620      	mov	r0, r4
   d6756:	bd10      	pop	{r4, pc}

000d6758 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d675c:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d675e:	4b1b      	ldr	r3, [pc, #108]	; (d67cc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d6760:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6762:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6766:	b085      	sub	sp, #20
   d6768:	4682      	mov	sl, r0
   d676a:	460e      	mov	r6, r1
   d676c:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d676e:	bb53      	cbnz	r3, d67c6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d6770:	f7ff fec0 	bl	d64f4 <_ZN5spark10LogManager8instanceEv>
   d6774:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6776:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6778:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d677a:	f7ff fde5 	bl	d6348 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d677e:	7b23      	ldrb	r3, [r4, #12]
   d6780:	b9f3      	cbnz	r3, d67c0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6782:	2301      	movs	r3, #1
   d6784:	7323      	strb	r3, [r4, #12]
   d6786:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6788:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d678a:	b2f6      	uxtb	r6, r6
   d678c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6790:	454d      	cmp	r5, r9
   d6792:	d013      	beq.n	d67bc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d6794:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d6798:	4641      	mov	r1, r8
   d679a:	1d38      	adds	r0, r7, #4
   d679c:	f7ff fe30 	bl	d6400 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d67a0:	4286      	cmp	r6, r0
   d67a2:	d3f5      	bcc.n	d6790 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d67a4:	683b      	ldr	r3, [r7, #0]
   d67a6:	f8cd b000 	str.w	fp, [sp]
   d67aa:	689b      	ldr	r3, [r3, #8]
   d67ac:	469e      	mov	lr, r3
   d67ae:	4638      	mov	r0, r7
   d67b0:	4643      	mov	r3, r8
   d67b2:	4632      	mov	r2, r6
   d67b4:	4651      	mov	r1, sl
   d67b6:	4677      	mov	r7, lr
   d67b8:	47b8      	blx	r7
   d67ba:	e7e9      	b.n	d6790 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d67bc:	2300      	movs	r3, #0
   d67be:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d67c0:	a803      	add	r0, sp, #12
   d67c2:	f7ff ffc1 	bl	d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d67c6:	b005      	add	sp, #20
   d67c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d67cc:	e000ed00 	.word	0xe000ed00

000d67d0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d67d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67d4:	4699      	mov	r9, r3
   d67d6:	4b19      	ldr	r3, [pc, #100]	; (d683c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d67d8:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d67da:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d67de:	4607      	mov	r7, r0
   d67e0:	4688      	mov	r8, r1
   d67e2:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d67e4:	bb33      	cbnz	r3, d6834 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d67e6:	f7ff fe85 	bl	d64f4 <_ZN5spark10LogManager8instanceEv>
   d67ea:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d67ec:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d67ee:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d67f0:	f7ff fdaa 	bl	d6348 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d67f4:	7b23      	ldrb	r3, [r4, #12]
   d67f6:	b9d3      	cbnz	r3, d682e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d67f8:	2301      	movs	r3, #1
   d67fa:	7323      	strb	r3, [r4, #12]
   d67fc:	6825      	ldr	r5, [r4, #0]
   d67fe:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6800:	fa5f fb86 	uxtb.w	fp, r6
   d6804:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6808:	4555      	cmp	r5, sl
   d680a:	d00e      	beq.n	d682a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d680c:	f855 6b04 	ldr.w	r6, [r5], #4
   d6810:	4649      	mov	r1, r9
   d6812:	1d30      	adds	r0, r6, #4
   d6814:	f7ff fdf4 	bl	d6400 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6818:	4583      	cmp	fp, r0
   d681a:	d3f5      	bcc.n	d6808 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d681c:	6833      	ldr	r3, [r6, #0]
   d681e:	4642      	mov	r2, r8
   d6820:	68db      	ldr	r3, [r3, #12]
   d6822:	4639      	mov	r1, r7
   d6824:	4630      	mov	r0, r6
   d6826:	4798      	blx	r3
   d6828:	e7ee      	b.n	d6808 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d682a:	2300      	movs	r3, #0
   d682c:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d682e:	a801      	add	r0, sp, #4
   d6830:	f7ff ff8a 	bl	d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6834:	b003      	add	sp, #12
   d6836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d683a:	bf00      	nop
   d683c:	e000ed00 	.word	0xe000ed00

000d6840 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6840:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6844:	4b15      	ldr	r3, [pc, #84]	; (d689c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6846:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6848:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d684c:	4604      	mov	r4, r0
   d684e:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6850:	b9fb      	cbnz	r3, d6892 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6852:	f7ff fe4f 	bl	d64f4 <_ZN5spark10LogManager8instanceEv>
   d6856:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6858:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d685a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d685c:	f7ff fd74 	bl	d6348 <_ZN14RecursiveMutex4lockEv>
   d6860:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6864:	2646      	movs	r6, #70	; 0x46
   d6866:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d686a:	42af      	cmp	r7, r5
   d686c:	d107      	bne.n	d687e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d686e:	a801      	add	r0, sp, #4
   d6870:	f7ff ff6a 	bl	d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6874:	42b4      	cmp	r4, r6
   d6876:	bfb4      	ite	lt
   d6878:	2000      	movlt	r0, #0
   d687a:	2001      	movge	r0, #1
   d687c:	e00a      	b.n	d6894 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d687e:	f855 0b04 	ldr.w	r0, [r5], #4
   d6882:	4641      	mov	r1, r8
   d6884:	3004      	adds	r0, #4
   d6886:	f7ff fdbb 	bl	d6400 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d688a:	4286      	cmp	r6, r0
   d688c:	bfa8      	it	ge
   d688e:	4606      	movge	r6, r0
   d6890:	e7eb      	b.n	d686a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d6892:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d6894:	b002      	add	sp, #8
   d6896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d689a:	bf00      	nop
   d689c:	e000ed00 	.word	0xe000ed00

000d68a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d68a0:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d68a2:	6803      	ldr	r3, [r0, #0]
   d68a4:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d68a6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d68a8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d68ac:	429a      	cmp	r2, r3
   d68ae:	4618      	mov	r0, r3
   d68b0:	d00e      	beq.n	d68d0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d68b2:	6806      	ldr	r6, [r0, #0]
   d68b4:	680d      	ldr	r5, [r1, #0]
   d68b6:	42ae      	cmp	r6, r5
   d68b8:	f103 0304 	add.w	r3, r3, #4
   d68bc:	d1f6      	bne.n	d68ac <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d68be:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d68c0:	1a52      	subs	r2, r2, r1
   d68c2:	f002 fbdb 	bl	d907c <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d68c6:	6863      	ldr	r3, [r4, #4]
   d68c8:	3b01      	subs	r3, #1
   d68ca:	6063      	str	r3, [r4, #4]
    return true;
   d68cc:	2001      	movs	r0, #1
}
   d68ce:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d68d0:	2000      	movs	r0, #0
   d68d2:	bd70      	pop	{r4, r5, r6, pc}

000d68d4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d68d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d68d6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d68d8:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d68da:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d68dc:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d68de:	f7ff fd33 	bl	d6348 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d68e2:	a901      	add	r1, sp, #4
   d68e4:	4620      	mov	r0, r4
   d68e6:	f7ff ffdb 	bl	d68a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d68ea:	b920      	cbnz	r0, d68f6 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d68ec:	a803      	add	r0, sp, #12
   d68ee:	f7ff ff2b 	bl	d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d68f2:	b004      	add	sp, #16
   d68f4:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d68f6:	6863      	ldr	r3, [r4, #4]
   d68f8:	2b00      	cmp	r3, #0
   d68fa:	d1f7      	bne.n	d68ec <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d68fc:	f7ff fe24 	bl	d6548 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6900:	e7f4      	b.n	d68ec <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6902 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6902:	b570      	push	{r4, r5, r6, lr}
   d6904:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6906:	6943      	ldr	r3, [r0, #20]
   d6908:	2618      	movs	r6, #24
   d690a:	4604      	mov	r4, r0
   d690c:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6910:	42ae      	cmp	r6, r5
   d6912:	d015      	beq.n	d6940 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6914:	f105 0110 	add.w	r1, r5, #16
   d6918:	4620      	mov	r0, r4
   d691a:	f7ff ffc1 	bl	d68a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d691e:	6863      	ldr	r3, [r4, #4]
   d6920:	b90b      	cbnz	r3, d6926 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6922:	f7ff fe11 	bl	d6548 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6926:	69e0      	ldr	r0, [r4, #28]
   d6928:	6929      	ldr	r1, [r5, #16]
   d692a:	6803      	ldr	r3, [r0, #0]
   d692c:	68db      	ldr	r3, [r3, #12]
   d692e:	4798      	blx	r3
        if (h.stream) {
   d6930:	6969      	ldr	r1, [r5, #20]
   d6932:	b119      	cbz	r1, d693c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6934:	6a20      	ldr	r0, [r4, #32]
   d6936:	6803      	ldr	r3, [r0, #0]
   d6938:	68db      	ldr	r3, [r3, #12]
   d693a:	4798      	blx	r3
   d693c:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d693e:	e7e7      	b.n	d6910 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6940:	6925      	ldr	r5, [r4, #16]
   d6942:	6963      	ldr	r3, [r4, #20]
   d6944:	2618      	movs	r6, #24
   d6946:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d694a:	42b5      	cmp	r5, r6
   d694c:	d004      	beq.n	d6958 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d694e:	4628      	mov	r0, r5
   d6950:	f7fe fb02 	bl	d4f58 <_ZN6StringD1Ev>
   d6954:	3518      	adds	r5, #24
   d6956:	e7f8      	b.n	d694a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6958:	2300      	movs	r3, #0
   d695a:	6163      	str	r3, [r4, #20]
   d695c:	bd70      	pop	{r4, r5, r6, pc}

000d695e <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d695e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6960:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6962:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6964:	f7ff fdf0 	bl	d6548 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6968:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d696c:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6970:	f7ff fcea 	bl	d6348 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6974:	4620      	mov	r0, r4
   d6976:	f7ff ffc4 	bl	d6902 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d697a:	4628      	mov	r0, r5
   d697c:	f7ff fee4 	bl	d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6980:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6982:	b108      	cbz	r0, d6988 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6984:	f7fe f852 	bl	d4a2c <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6988:	6925      	ldr	r5, [r4, #16]
   d698a:	6963      	ldr	r3, [r4, #20]
   d698c:	2618      	movs	r6, #24
   d698e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d6992:	42b5      	cmp	r5, r6
   d6994:	d004      	beq.n	d69a0 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d6996:	4628      	mov	r0, r5
   d6998:	f7fe fade 	bl	d4f58 <_ZN6StringD1Ev>
   d699c:	3518      	adds	r5, #24
   d699e:	e7f8      	b.n	d6992 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d69a0:	6920      	ldr	r0, [r4, #16]
   d69a2:	f7fe fa27 	bl	d4df4 <free>
   d69a6:	6820      	ldr	r0, [r4, #0]
   d69a8:	f7fe fa24 	bl	d4df4 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d69ac:	4620      	mov	r0, r4
   d69ae:	b002      	add	sp, #8
   d69b0:	bd70      	pop	{r4, r5, r6, pc}

000d69b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69b2:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d69b4:	680a      	ldr	r2, [r1, #0]
   d69b6:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d69b8:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69ba:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d69bc:	684a      	ldr	r2, [r1, #4]
   d69be:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d69c0:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69c2:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d69c4:	688a      	ldr	r2, [r1, #8]
   d69c6:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d69c8:	608b      	str	r3, [r1, #8]
   d69ca:	4770      	bx	lr

000d69cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d69cc:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69ce:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d69d0:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69d2:	6003      	str	r3, [r0, #0]
   d69d4:	6043      	str	r3, [r0, #4]
   d69d6:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d69d8:	f7ff ffeb 	bl	d69b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d69dc:	4620      	mov	r0, r4
   d69de:	bd10      	pop	{r4, pc}

000d69e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d69e0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d69e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d69e4:	4604      	mov	r4, r0
   d69e6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d69e8:	d925      	bls.n	d6a36 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d69ea:	4290      	cmp	r0, r2
   d69ec:	d224      	bcs.n	d6a38 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d69ee:	1a55      	subs	r5, r2, r1
   d69f0:	3d14      	subs	r5, #20
   d69f2:	442c      	add	r4, r5
   d69f4:	f1a1 0714 	sub.w	r7, r1, #20
   d69f8:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d69fc:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d69fe:	f1a5 0308 	sub.w	r3, r5, #8
   d6a02:	429f      	cmp	r7, r3
   d6a04:	d037      	beq.n	d6a76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6a06:	b184      	cbz	r4, d6a2a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6a08:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6a0c:	6023      	str	r3, [r4, #0]
   d6a0e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6a12:	80a3      	strh	r3, [r4, #4]
   d6a14:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6a18:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a1a:	60a6      	str	r6, [r4, #8]
   d6a1c:	60e6      	str	r6, [r4, #12]
   d6a1e:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6a20:	4629      	mov	r1, r5
   d6a22:	f104 0008 	add.w	r0, r4, #8
   d6a26:	f7ff ffc4 	bl	d69b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6a2a:	4628      	mov	r0, r5
   d6a2c:	f7ff fe32 	bl	d6694 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6a30:	3c14      	subs	r4, #20
   d6a32:	3d14      	subs	r5, #20
   d6a34:	e7e3      	b.n	d69fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6a36:	d01e      	beq.n	d6a76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6a38:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a3c:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6a3e:	f1a5 0308 	sub.w	r3, r5, #8
   d6a42:	429e      	cmp	r6, r3
   d6a44:	d017      	beq.n	d6a76 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6a46:	b184      	cbz	r4, d6a6a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6a48:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d6a4c:	6023      	str	r3, [r4, #0]
   d6a4e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6a52:	80a3      	strh	r3, [r4, #4]
   d6a54:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6a58:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6a5a:	60a7      	str	r7, [r4, #8]
   d6a5c:	60e7      	str	r7, [r4, #12]
   d6a5e:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6a60:	4629      	mov	r1, r5
   d6a62:	f104 0008 	add.w	r0, r4, #8
   d6a66:	f7ff ffa4 	bl	d69b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d6a6a:	4628      	mov	r0, r5
   d6a6c:	f7ff fe12 	bl	d6694 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6a70:	3414      	adds	r4, #20
   d6a72:	3514      	adds	r5, #20
   d6a74:	e7e3      	b.n	d6a3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6a7a:	6845      	ldr	r5, [r0, #4]
   d6a7c:	6883      	ldr	r3, [r0, #8]
   d6a7e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6a80:	4604      	mov	r4, r0
   d6a82:	460e      	mov	r6, r1
   d6a84:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6a86:	db0e      	blt.n	d6aa6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6a88:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6a8a:	2d00      	cmp	r5, #0
   d6a8c:	dd05      	ble.n	d6a9a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d6a8e:	00a9      	lsls	r1, r5, #2
   d6a90:	6800      	ldr	r0, [r0, #0]
   d6a92:	f7fe f9b7 	bl	d4e04 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d6a96:	b920      	cbnz	r0, d6aa2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d6a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6a9a:	6800      	ldr	r0, [r0, #0]
   d6a9c:	f7fe f9aa 	bl	d4df4 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6aa0:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d6aa2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6aa4:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6aa6:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6aa8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6aaa:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6aae:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d6ab2:	1a52      	subs	r2, r2, r1
   d6ab4:	1d08      	adds	r0, r1, #4
   d6ab6:	f002 fae1 	bl	d907c <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d6aba:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6abe:	6863      	ldr	r3, [r4, #4]
   d6ac0:	3301      	adds	r3, #1
   d6ac2:	6063      	str	r3, [r4, #4]
   d6ac4:	2001      	movs	r0, #1
    return true;
}
   d6ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ac8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6ac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6aca:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d6acc:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d6ace:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6ad0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6ad2:	f7ff fc39 	bl	d6348 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d6ad6:	6823      	ldr	r3, [r4, #0]
   d6ad8:	6861      	ldr	r1, [r4, #4]
   d6ada:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d6ade:	4283      	cmp	r3, r0
   d6ae0:	461a      	mov	r2, r3
   d6ae2:	d009      	beq.n	d6af8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d6ae4:	6812      	ldr	r2, [r2, #0]
   d6ae6:	42aa      	cmp	r2, r5
   d6ae8:	f103 0304 	add.w	r3, r3, #4
   d6aec:	d1f7      	bne.n	d6ade <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d6aee:	a801      	add	r0, sp, #4
   d6af0:	f7ff fe2a 	bl	d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6af4:	2500      	movs	r5, #0
   d6af6:	e00e      	b.n	d6b16 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6af8:	462a      	mov	r2, r5
   d6afa:	4620      	mov	r0, r4
   d6afc:	f7ff ffbc 	bl	d6a78 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6b00:	4605      	mov	r5, r0
   d6b02:	2800      	cmp	r0, #0
   d6b04:	d0f3      	beq.n	d6aee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6b06:	6863      	ldr	r3, [r4, #4]
   d6b08:	2b01      	cmp	r3, #1
   d6b0a:	d101      	bne.n	d6b10 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d6b0c:	f7ff fd10 	bl	d6530 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6b10:	a801      	add	r0, sp, #4
   d6b12:	f7ff fe19 	bl	d6748 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6b16:	4628      	mov	r0, r5
   d6b18:	b003      	add	sp, #12
   d6b1a:	bd30      	pop	{r4, r5, pc}

000d6b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d6b1c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d6b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b20:	4606      	mov	r6, r0
   d6b22:	460c      	mov	r4, r1
   d6b24:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6b26:	d914      	bls.n	d6b52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6b28:	4290      	cmp	r0, r2
   d6b2a:	d213      	bcs.n	d6b54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d6b2c:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6b30:	1a6c      	subs	r4, r5, r1
   d6b32:	f1a1 0710 	sub.w	r7, r1, #16
   d6b36:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6b38:	42af      	cmp	r7, r5
   d6b3a:	d018      	beq.n	d6b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6b3c:	b11c      	cbz	r4, d6b46 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6b3e:	4629      	mov	r1, r5
   d6b40:	4620      	mov	r0, r4
   d6b42:	f7fe f9f9 	bl	d4f38 <_ZN6StringC1EOS_>
                end->~T();
   d6b46:	4628      	mov	r0, r5
   d6b48:	f7fe fa06 	bl	d4f58 <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6b4c:	3d10      	subs	r5, #16
   d6b4e:	3c10      	subs	r4, #16
   d6b50:	e7f2      	b.n	d6b38 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6b52:	d00c      	beq.n	d6b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6b54:	42ac      	cmp	r4, r5
   d6b56:	d00a      	beq.n	d6b6e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6b58:	b11e      	cbz	r6, d6b62 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6b5a:	4621      	mov	r1, r4
   d6b5c:	4630      	mov	r0, r6
   d6b5e:	f7fe f9eb 	bl	d4f38 <_ZN6StringC1EOS_>
                p->~T();
   d6b62:	4620      	mov	r0, r4
   d6b64:	f7fe f9f8 	bl	d4f58 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6b68:	3410      	adds	r4, #16
   d6b6a:	3610      	adds	r6, #16
   d6b6c:	e7f2      	b.n	d6b54 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d6b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6b70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6b70:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6b72:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6b74:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6b76:	dd0b      	ble.n	d6b90 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6b78:	0130      	lsls	r0, r6, #4
   d6b7a:	f7fe f933 	bl	d4de4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6b7e:	4604      	mov	r4, r0
   d6b80:	b170      	cbz	r0, d6ba0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6b82:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6b86:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6b8a:	f7ff ffc7 	bl	d6b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d6b8e:	e000      	b.n	d6b92 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6b90:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6b92:	6828      	ldr	r0, [r5, #0]
   d6b94:	f7fe f92e 	bl	d4df4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6b98:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6b9a:	60ae      	str	r6, [r5, #8]
        return true;
   d6b9c:	2001      	movs	r0, #1
   d6b9e:	bd70      	pop	{r4, r5, r6, pc}
    }
   d6ba0:	bd70      	pop	{r4, r5, r6, pc}

000d6ba2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6ba2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6ba6:	2300      	movs	r3, #0
   d6ba8:	b095      	sub	sp, #84	; 0x54
   d6baa:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6bac:	2246      	movs	r2, #70	; 0x46
   d6bae:	6003      	str	r3, [r0, #0]
   d6bb0:	6043      	str	r3, [r0, #4]
   d6bb2:	6083      	str	r3, [r0, #8]
   d6bb4:	60c3      	str	r3, [r0, #12]
   d6bb6:	6103      	str	r3, [r0, #16]
   d6bb8:	6143      	str	r3, [r0, #20]
   d6bba:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6bbc:	9102      	str	r1, [sp, #8]
   d6bbe:	f8da 1004 	ldr.w	r1, [sl, #4]
   d6bc2:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6bc4:	4299      	cmp	r1, r3
   d6bc6:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6bc8:	9309      	str	r3, [sp, #36]	; 0x24
   d6bca:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d6bcc:	f340 809d 	ble.w	d6d0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6bd0:	a808      	add	r0, sp, #32
   d6bd2:	f7ff ffcd 	bl	d6b70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6bd6:	2800      	cmp	r0, #0
   d6bd8:	f040 8097 	bne.w	d6d0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d6bdc:	e08e      	b.n	d6cfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d6bde:	4621      	mov	r1, r4
   d6be0:	a80b      	add	r0, sp, #44	; 0x2c
   d6be2:	f7fe f9a9 	bl	d4f38 <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6be6:	a90b      	add	r1, sp, #44	; 0x2c
   d6be8:	a80f      	add	r0, sp, #60	; 0x3c
   d6bea:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d6bec:	f7fe f9a4 	bl	d4f38 <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6bf0:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6bf4:	4299      	cmp	r1, r3
   d6bf6:	f2c0 80ce 	blt.w	d6d96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d6bfa:	3101      	adds	r1, #1
   d6bfc:	a808      	add	r0, sp, #32
   d6bfe:	f7ff ffb7 	bl	d6b70 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6c02:	2800      	cmp	r0, #0
   d6c04:	f040 80c7 	bne.w	d6d96 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6c08:	a80f      	add	r0, sp, #60	; 0x3c
   d6c0a:	f7fe f9a5 	bl	d4f58 <_ZN6StringD1Ev>
   d6c0e:	a80b      	add	r0, sp, #44	; 0x2c
   d6c10:	f7fe f9a2 	bl	d4f58 <_ZN6StringD1Ev>
   d6c14:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6c16:	42a7      	cmp	r7, r4
   d6c18:	d1e1      	bne.n	d6bde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6c1a:	2600      	movs	r6, #0
   d6c1c:	960b      	str	r6, [sp, #44]	; 0x2c
   d6c1e:	960c      	str	r6, [sp, #48]	; 0x30
   d6c20:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6c22:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6c24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6c26:	429e      	cmp	r6, r3
   d6c28:	f280 80a8 	bge.w	d6d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6c2c:	0133      	lsls	r3, r6, #4
   d6c2e:	9a08      	ldr	r2, [sp, #32]
   d6c30:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6c32:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6c34:	2b00      	cmp	r3, #0
   d6c36:	f000 809f 	beq.w	d6d78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d6c3a:	2314      	movs	r3, #20
   d6c3c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6c3e:	f8cd 901c 	str.w	r9, [sp, #28]
   d6c42:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6c44:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6c46:	a907      	add	r1, sp, #28
   d6c48:	a806      	add	r0, sp, #24
   d6c4a:	f7ff fb2c 	bl	d62a6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6c4e:	4607      	mov	r7, r0
   d6c50:	2800      	cmp	r0, #0
   d6c52:	f000 8091 	beq.w	d6d78 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6c56:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6c58:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d6c5a:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d6c5e:	9a07      	ldr	r2, [sp, #28]
   d6c60:	4620      	mov	r0, r4
   d6c62:	f7ff fb8d 	bl	d6380 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6c66:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d6c6a:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6c6c:	f1b8 0f00 	cmp.w	r8, #0
   d6c70:	d153      	bne.n	d6d1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6c72:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6c76:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d6c7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6c7e:	970f      	str	r7, [sp, #60]	; 0x3c
   d6c80:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6c84:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6c88:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d6c8c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c90:	6867      	ldr	r7, [r4, #4]
   d6c92:	68a3      	ldr	r3, [r4, #8]
   d6c94:	429f      	cmp	r7, r3
   d6c96:	da4f      	bge.n	d6d38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d6c98:	9b00      	ldr	r3, [sp, #0]
   d6c9a:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d6c9e:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6ca0:	2214      	movs	r2, #20
   d6ca2:	4353      	muls	r3, r2
   d6ca4:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d6ca8:	fb02 b201 	mla	r2, r2, r1, fp
   d6cac:	f107 0014 	add.w	r0, r7, #20
   d6cb0:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6cb2:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d6cb4:	f7ff fe94 	bl	d69e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6cb8:	b1a7      	cbz	r7, d6ce4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6cba:	9b03      	ldr	r3, [sp, #12]
   d6cbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d6cbe:	f84b 2003 	str.w	r2, [fp, r3]
   d6cc2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d6cc6:	80bb      	strh	r3, [r7, #4]
   d6cc8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d6ccc:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d6cce:	f8c7 9008 	str.w	r9, [r7, #8]
   d6cd2:	f8c7 900c 	str.w	r9, [r7, #12]
   d6cd6:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6cda:	a911      	add	r1, sp, #68	; 0x44
   d6cdc:	f107 0008 	add.w	r0, r7, #8
   d6ce0:	f7ff fe67 	bl	d69b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d6ce4:	6863      	ldr	r3, [r4, #4]
   d6ce6:	3301      	adds	r3, #1
   d6ce8:	6063      	str	r3, [r4, #4]
   d6cea:	a811      	add	r0, sp, #68	; 0x44
   d6cec:	f7ff fcd2 	bl	d6694 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6cf0:	f1b8 0f00 	cmp.w	r8, #0
   d6cf4:	d011      	beq.n	d6d1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6cf6:	a80b      	add	r0, sp, #44	; 0x2c
   d6cf8:	f7ff fccc 	bl	d6694 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6cfc:	a808      	add	r0, sp, #32
   d6cfe:	f7ff fcdd 	bl	d66bc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d6d02:	4628      	mov	r0, r5
   d6d04:	b015      	add	sp, #84	; 0x54
   d6d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6d0a:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6d0e:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6d12:	2714      	movs	r7, #20
   d6d14:	fb07 4703 	mla	r7, r7, r3, r4
   d6d18:	e77d      	b.n	d6c16 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d6d1a:	6823      	ldr	r3, [r4, #0]
   d6d1c:	9a00      	ldr	r2, [sp, #0]
   d6d1e:	2414      	movs	r4, #20
   d6d20:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6d24:	9b06      	ldr	r3, [sp, #24]
   d6d26:	781b      	ldrb	r3, [r3, #0]
   d6d28:	bb23      	cbnz	r3, d6d74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d6d2a:	f8da 3000 	ldr.w	r3, [sl]
   d6d2e:	9a01      	ldr	r2, [sp, #4]
   d6d30:	4413      	add	r3, r2
   d6d32:	7c1b      	ldrb	r3, [r3, #16]
   d6d34:	80e3      	strh	r3, [r4, #6]
   d6d36:	e01d      	b.n	d6d74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d38:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d6d3a:	2f00      	cmp	r7, #0
   d6d3c:	dd0f      	ble.n	d6d5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6d3e:	2314      	movs	r3, #20
   d6d40:	fb03 f007 	mul.w	r0, r3, r7
   d6d44:	9303      	str	r3, [sp, #12]
   d6d46:	f7fe f84d 	bl	d4de4 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d6d4a:	4683      	mov	fp, r0
   d6d4c:	b178      	cbz	r0, d6d6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d6d4e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6d52:	9b03      	ldr	r3, [sp, #12]
   d6d54:	fb03 1202 	mla	r2, r3, r2, r1
   d6d58:	f7ff fe42 	bl	d69e0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6d5c:	e000      	b.n	d6d60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d6d5e:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6d60:	6820      	ldr	r0, [r4, #0]
   d6d62:	f7fe f847 	bl	d4df4 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6d66:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d6d6a:	60a7      	str	r7, [r4, #8]
   d6d6c:	e794      	b.n	d6c98 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6d6e:	f04f 0801 	mov.w	r8, #1
   d6d72:	e7ba      	b.n	d6cea <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6d74:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6d76:	e766      	b.n	d6c46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6d78:	3601      	adds	r6, #1
   d6d7a:	e753      	b.n	d6c24 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d6d7c:	a908      	add	r1, sp, #32
   d6d7e:	4628      	mov	r0, r5
   d6d80:	f7ff fe17 	bl	d69b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6d84:	a90b      	add	r1, sp, #44	; 0x2c
   d6d86:	f105 000c 	add.w	r0, r5, #12
   d6d8a:	f7ff fe12 	bl	d69b2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d6d8e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6d92:	762b      	strb	r3, [r5, #24]
   d6d94:	e7af      	b.n	d6cf6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d96:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d6d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d6d9a:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6d9e:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6da2:	4631      	mov	r1, r6
   d6da4:	f106 0010 	add.w	r0, r6, #16
   d6da8:	f7ff feb8 	bl	d6b1c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6dac:	b11e      	cbz	r6, d6db6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d6dae:	a90f      	add	r1, sp, #60	; 0x3c
   d6db0:	4630      	mov	r0, r6
   d6db2:	f7fe f8c1 	bl	d4f38 <_ZN6StringC1EOS_>
    ++size_;
   d6db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6db8:	3301      	adds	r3, #1
   d6dba:	9309      	str	r3, [sp, #36]	; 0x24
   d6dbc:	e724      	b.n	d6c08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d6dc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6dc0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6dc2:	4604      	mov	r4, r0
   d6dc4:	4b09      	ldr	r3, [pc, #36]	; (d6dec <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6dc6:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6dca:	4605      	mov	r5, r0
   d6dcc:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6dce:	a801      	add	r0, sp, #4
   d6dd0:	4611      	mov	r1, r2
   d6dd2:	f7fd fc1b 	bl	d460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6dd6:	aa01      	add	r2, sp, #4
   d6dd8:	4631      	mov	r1, r6
   d6dda:	4620      	mov	r0, r4
   d6ddc:	f7ff fee1 	bl	d6ba2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6de0:	a801      	add	r0, sp, #4
   d6de2:	f7fd fb21 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6de6:	4628      	mov	r0, r5
   d6de8:	b004      	add	sp, #16
   d6dea:	bd70      	pop	{r4, r5, r6, pc}
   d6dec:	000d9344 	.word	0x000d9344

000d6df0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6df0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6df2:	460f      	mov	r7, r1
   d6df4:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6df6:	492b      	ldr	r1, [pc, #172]	; (d6ea4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6df8:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6dfa:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6dfc:	4616      	mov	r6, r2
   d6dfe:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6e00:	f002 f9a0 	bl	d9144 <strcmp>
   d6e04:	bb28      	cbnz	r0, d6e52 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6e06:	2c00      	cmp	r4, #0
   d6e08:	d049      	beq.n	d6e9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6e0a:	4629      	mov	r1, r5
   d6e0c:	a801      	add	r0, sp, #4
   d6e0e:	f7ff fddd 	bl	d69cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6e12:	4925      	ldr	r1, [pc, #148]	; (d6ea8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6e14:	2024      	movs	r0, #36	; 0x24
   d6e16:	f001 fbbd 	bl	d8594 <_ZnwjRKSt9nothrow_t>
   d6e1a:	4605      	mov	r5, r0
   d6e1c:	b1b8      	cbz	r0, d6e4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6e1e:	a901      	add	r1, sp, #4
   d6e20:	a804      	add	r0, sp, #16
   d6e22:	f7ff fdd3 	bl	d69cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6e26:	a904      	add	r1, sp, #16
   d6e28:	a807      	add	r0, sp, #28
   d6e2a:	f7fd fbef 	bl	d460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6e2e:	aa07      	add	r2, sp, #28
   d6e30:	4631      	mov	r1, r6
   d6e32:	4628      	mov	r0, r5
   d6e34:	f7ff ffc4 	bl	d6dc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6e38:	a807      	add	r0, sp, #28
   d6e3a:	f7fd faf5 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e3e:	4b1b      	ldr	r3, [pc, #108]	; (d6eac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6e40:	602b      	str	r3, [r5, #0]
   d6e42:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6e44:	a804      	add	r0, sp, #16
   d6e46:	f7fd faef 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e4a:	4b19      	ldr	r3, [pc, #100]	; (d6eb0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d6e4c:	602b      	str	r3, [r5, #0]
   d6e4e:	a801      	add	r0, sp, #4
   d6e50:	e01f      	b.n	d6e92 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6e52:	4918      	ldr	r1, [pc, #96]	; (d6eb4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6e54:	4638      	mov	r0, r7
   d6e56:	f002 f975 	bl	d9144 <strcmp>
   d6e5a:	b9f0      	cbnz	r0, d6e9a <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d6e5c:	b1fc      	cbz	r4, d6e9e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6e5e:	4629      	mov	r1, r5
   d6e60:	a804      	add	r0, sp, #16
   d6e62:	f7ff fdb3 	bl	d69cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6e66:	4910      	ldr	r1, [pc, #64]	; (d6ea8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6e68:	2024      	movs	r0, #36	; 0x24
   d6e6a:	f001 fb93 	bl	d8594 <_ZnwjRKSt9nothrow_t>
   d6e6e:	4605      	mov	r5, r0
   d6e70:	b170      	cbz	r0, d6e90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6e72:	a904      	add	r1, sp, #16
   d6e74:	a807      	add	r0, sp, #28
   d6e76:	f7fd fbc9 	bl	d460c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6e7a:	aa07      	add	r2, sp, #28
   d6e7c:	4631      	mov	r1, r6
   d6e7e:	4628      	mov	r0, r5
   d6e80:	f7ff ff9e 	bl	d6dc0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6e84:	a807      	add	r0, sp, #28
   d6e86:	f7fd facf 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e8a:	4b08      	ldr	r3, [pc, #32]	; (d6eac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6e8c:	602b      	str	r3, [r5, #0]
   d6e8e:	622c      	str	r4, [r5, #32]
   d6e90:	a804      	add	r0, sp, #16
   d6e92:	f7fd fac9 	bl	d4428 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6e96:	4628      	mov	r0, r5
   d6e98:	e002      	b.n	d6ea0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d6e9a:	2000      	movs	r0, #0
   d6e9c:	e000      	b.n	d6ea0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d6e9e:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d6ea0:	b00b      	add	sp, #44	; 0x2c
   d6ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6ea4:	000d9837 	.word	0x000d9837
   d6ea8:	000d9aa3 	.word	0x000d9aa3
   d6eac:	000d98c0 	.word	0x000d98c0
   d6eb0:	000d97cc 	.word	0x000d97cc
   d6eb4:	000d983b 	.word	0x000d983b

000d6eb8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6eb8:	4b01      	ldr	r3, [pc, #4]	; (d6ec0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6eba:	4a02      	ldr	r2, [pc, #8]	; (d6ec4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6ebc:	601a      	str	r2, [r3, #0]
   d6ebe:	4770      	bx	lr
   d6ec0:	2003e3e8 	.word	0x2003e3e8
   d6ec4:	000d984c 	.word	0x000d984c

000d6ec8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ecc:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6ece:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6ed2:	4604      	mov	r4, r0
   d6ed4:	460e      	mov	r6, r1
   d6ed6:	4617      	mov	r7, r2
   d6ed8:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d6eda:	f000 fe1f 	bl	d7b1c <_Z16_fetch_usbserialv>
   d6ede:	4581      	cmp	r9, r0
   d6ee0:	d105      	bne.n	d6eee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d6ee2:	485a      	ldr	r0, [pc, #360]	; (d704c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6ee4:	f001 f84d 	bl	d7f82 <_ZN5spark12NetworkClass9listeningEv>
   d6ee8:	2800      	cmp	r0, #0
   d6eea:	f040 80ac 	bne.w	d7046 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d6eee:	792b      	ldrb	r3, [r5, #4]
   d6ef0:	071b      	lsls	r3, r3, #28
   d6ef2:	d505      	bpl.n	d6f00 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6ef4:	696b      	ldr	r3, [r5, #20]
   d6ef6:	4a56      	ldr	r2, [pc, #344]	; (d7050 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6ef8:	6a20      	ldr	r0, [r4, #32]
   d6efa:	2100      	movs	r1, #0
   d6efc:	f7ff f985 	bl	d620a <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d6f00:	f1b8 0f00 	cmp.w	r8, #0
   d6f04:	d00d      	beq.n	d6f22 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d6f06:	215b      	movs	r1, #91	; 0x5b
   d6f08:	4620      	mov	r0, r4
   d6f0a:	f7ff fa2e 	bl	d636a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6f0e:	4641      	mov	r1, r8
   d6f10:	4620      	mov	r0, r4
   d6f12:	f7ff fa1c 	bl	d634e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6f16:	6823      	ldr	r3, [r4, #0]
   d6f18:	494e      	ldr	r1, [pc, #312]	; (d7054 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6f1a:	68db      	ldr	r3, [r3, #12]
   d6f1c:	2202      	movs	r2, #2
   d6f1e:	4620      	mov	r0, r4
   d6f20:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6f22:	792b      	ldrb	r3, [r5, #4]
   d6f24:	07d9      	lsls	r1, r3, #31
   d6f26:	d525      	bpl.n	d6f74 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6f28:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6f2c:	212f      	movs	r1, #47	; 0x2f
   d6f2e:	4640      	mov	r0, r8
   d6f30:	f002 f956 	bl	d91e0 <strrchr>
    if (s1) {
   d6f34:	b108      	cbz	r0, d6f3a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6f36:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d6f3a:	4641      	mov	r1, r8
   d6f3c:	4620      	mov	r0, r4
   d6f3e:	f7ff fa06 	bl	d634e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6f42:	792b      	ldrb	r3, [r5, #4]
   d6f44:	079a      	lsls	r2, r3, #30
   d6f46:	d509      	bpl.n	d6f5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6f48:	213a      	movs	r1, #58	; 0x3a
   d6f4a:	4620      	mov	r0, r4
   d6f4c:	f7ff fa0d 	bl	d636a <_ZN5spark16StreamLogHandler5writeEc>
   d6f50:	68eb      	ldr	r3, [r5, #12]
   d6f52:	4a41      	ldr	r2, [pc, #260]	; (d7058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6f54:	6a20      	ldr	r0, [r4, #32]
   d6f56:	2100      	movs	r1, #0
   d6f58:	f7ff f957 	bl	d620a <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d6f5c:	792b      	ldrb	r3, [r5, #4]
   d6f5e:	f013 0f04 	tst.w	r3, #4
   d6f62:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6f64:	bf18      	it	ne
   d6f66:	493d      	ldrne	r1, [pc, #244]	; (d705c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6f68:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d6f6a:	bf08      	it	eq
   d6f6c:	493c      	ldreq	r1, [pc, #240]	; (d7060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d6f6e:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6f70:	4620      	mov	r0, r4
   d6f72:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6f74:	792b      	ldrb	r3, [r5, #4]
   d6f76:	075b      	lsls	r3, r3, #29
   d6f78:	d518      	bpl.n	d6fac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6f7a:	6929      	ldr	r1, [r5, #16]
   d6f7c:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d6f7e:	4613      	mov	r3, r2
   d6f80:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6f84:	b138      	cbz	r0, d6f96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6f86:	2820      	cmp	r0, #32
   d6f88:	d101      	bne.n	d6f8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d6f8a:	4619      	mov	r1, r3
   d6f8c:	e001      	b.n	d6f92 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d6f8e:	2828      	cmp	r0, #40	; 0x28
   d6f90:	d001      	beq.n	d6f96 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6f92:	461a      	mov	r2, r3
   d6f94:	e7f3      	b.n	d6f7e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d6f96:	6823      	ldr	r3, [r4, #0]
   d6f98:	1a52      	subs	r2, r2, r1
   d6f9a:	68db      	ldr	r3, [r3, #12]
   d6f9c:	4620      	mov	r0, r4
   d6f9e:	4798      	blx	r3
        write("(): ", 4);
   d6fa0:	6823      	ldr	r3, [r4, #0]
   d6fa2:	4930      	ldr	r1, [pc, #192]	; (d7064 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6fa4:	68db      	ldr	r3, [r3, #12]
   d6fa6:	2204      	movs	r2, #4
   d6fa8:	4620      	mov	r0, r4
   d6faa:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d6fac:	2100      	movs	r1, #0
   d6fae:	4638      	mov	r0, r7
   d6fb0:	f7fd fe44 	bl	d4c3c <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d6fb4:	4601      	mov	r1, r0
   d6fb6:	4620      	mov	r0, r4
   d6fb8:	f7ff f9c9 	bl	d634e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6fbc:	6823      	ldr	r3, [r4, #0]
   d6fbe:	4928      	ldr	r1, [pc, #160]	; (d7060 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6fc0:	68db      	ldr	r3, [r3, #12]
   d6fc2:	2202      	movs	r2, #2
   d6fc4:	4620      	mov	r0, r4
   d6fc6:	4798      	blx	r3
    // Message
    if (msg) {
   d6fc8:	b11e      	cbz	r6, d6fd2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d6fca:	4631      	mov	r1, r6
   d6fcc:	4620      	mov	r0, r4
   d6fce:	f7ff f9be 	bl	d634e <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d6fd2:	792b      	ldrb	r3, [r5, #4]
   d6fd4:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6fd8:	d02d      	beq.n	d7036 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d6fda:	6823      	ldr	r3, [r4, #0]
   d6fdc:	4922      	ldr	r1, [pc, #136]	; (d7068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d6fde:	68db      	ldr	r3, [r3, #12]
   d6fe0:	4620      	mov	r0, r4
   d6fe2:	2202      	movs	r2, #2
   d6fe4:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d6fe6:	792b      	ldrb	r3, [r5, #4]
   d6fe8:	06d8      	lsls	r0, r3, #27
   d6fea:	d50b      	bpl.n	d7004 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d6fec:	6823      	ldr	r3, [r4, #0]
   d6fee:	491f      	ldr	r1, [pc, #124]	; (d706c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d6ff0:	68db      	ldr	r3, [r3, #12]
   d6ff2:	2207      	movs	r2, #7
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	4798      	blx	r3
   d6ff8:	69ab      	ldr	r3, [r5, #24]
   d6ffa:	4a1d      	ldr	r2, [pc, #116]	; (d7070 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d6ffc:	6a20      	ldr	r0, [r4, #32]
   d6ffe:	2100      	movs	r1, #0
   d7000:	f7ff f903 	bl	d620a <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d7004:	792b      	ldrb	r3, [r5, #4]
   d7006:	0699      	lsls	r1, r3, #26
   d7008:	d511      	bpl.n	d702e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d700a:	06da      	lsls	r2, r3, #27
   d700c:	d505      	bpl.n	d701a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d700e:	6823      	ldr	r3, [r4, #0]
   d7010:	4912      	ldr	r1, [pc, #72]	; (d705c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7012:	68db      	ldr	r3, [r3, #12]
   d7014:	2202      	movs	r2, #2
   d7016:	4620      	mov	r0, r4
   d7018:	4798      	blx	r3
            }
            write("details = ", 10);
   d701a:	6823      	ldr	r3, [r4, #0]
   d701c:	4915      	ldr	r1, [pc, #84]	; (d7074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d701e:	68db      	ldr	r3, [r3, #12]
   d7020:	4620      	mov	r0, r4
   d7022:	220a      	movs	r2, #10
   d7024:	4798      	blx	r3
            write(attr.details);
   d7026:	69e9      	ldr	r1, [r5, #28]
   d7028:	4620      	mov	r0, r4
   d702a:	f7ff f990 	bl	d634e <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d702e:	215d      	movs	r1, #93	; 0x5d
   d7030:	4620      	mov	r0, r4
   d7032:	f7ff f99a 	bl	d636a <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d7036:	6823      	ldr	r3, [r4, #0]
   d7038:	490f      	ldr	r1, [pc, #60]	; (d7078 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d703a:	68db      	ldr	r3, [r3, #12]
   d703c:	4620      	mov	r0, r4
   d703e:	2202      	movs	r2, #2
}
   d7040:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d7044:	4718      	bx	r3
   d7046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d704a:	bf00      	nop
   d704c:	2003e71c 	.word	0x2003e71c
   d7050:	000d9850 	.word	0x000d9850
   d7054:	000d9857 	.word	0x000d9857
   d7058:	000d985a 	.word	0x000d985a
   d705c:	000d985d 	.word	0x000d985d
   d7060:	000d9862 	.word	0x000d9862
   d7064:	000d9860 	.word	0x000d9860
   d7068:	000d9865 	.word	0x000d9865
   d706c:	000d9868 	.word	0x000d9868
   d7070:	000d9870 	.word	0x000d9870
   d7074:	000d9873 	.word	0x000d9873
   d7078:	000d987e 	.word	0x000d987e

000d707c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d707c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7080:	b085      	sub	sp, #20
   d7082:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d7086:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7088:	4606      	mov	r6, r0
   d708a:	460f      	mov	r7, r1
   d708c:	4691      	mov	r9, r2
   d708e:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d7090:	f000 fd44 	bl	d7b1c <_Z16_fetch_usbserialv>
   d7094:	4580      	cmp	r8, r0
   d7096:	d105      	bne.n	d70a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7098:	484a      	ldr	r0, [pc, #296]	; (d71c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d709a:	f000 ff72 	bl	d7f82 <_ZN5spark12NetworkClass9listeningEv>
   d709e:	2800      	cmp	r0, #0
   d70a0:	f040 808c 	bne.w	d71bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d70a4:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d70a6:	4a48      	ldr	r2, [pc, #288]	; (d71c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d70a8:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d70aa:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d70ae:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d70b0:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d70b2:	f88d 8008 	strb.w	r8, [sp, #8]
   d70b6:	f001 f8a8 	bl	d820a <_ZN5spark10JSONWriter11beginObjectEv>
   d70ba:	4641      	mov	r1, r8
   d70bc:	4648      	mov	r0, r9
   d70be:	f7fd fdbd 	bl	d4c3c <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d70c2:	4942      	ldr	r1, [pc, #264]	; (d71cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d70c4:	4680      	mov	r8, r0
   d70c6:	2201      	movs	r2, #1
   d70c8:	a801      	add	r0, sp, #4
   d70ca:	f001 f923 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d70ce:	4641      	mov	r1, r8
   d70d0:	f7ff f92d 	bl	d632e <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d70d4:	b13f      	cbz	r7, d70e6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d70d6:	493e      	ldr	r1, [pc, #248]	; (d71d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d70d8:	2201      	movs	r2, #1
   d70da:	a801      	add	r0, sp, #4
   d70dc:	f001 f91a 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d70e0:	4639      	mov	r1, r7
   d70e2:	f7ff f924 	bl	d632e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d70e6:	b13d      	cbz	r5, d70f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d70e8:	493a      	ldr	r1, [pc, #232]	; (d71d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d70ea:	2201      	movs	r2, #1
   d70ec:	a801      	add	r0, sp, #4
   d70ee:	f001 f911 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d70f2:	4629      	mov	r1, r5
   d70f4:	f7ff f91b 	bl	d632e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d70f8:	7923      	ldrb	r3, [r4, #4]
   d70fa:	07df      	lsls	r7, r3, #31
   d70fc:	d50e      	bpl.n	d711c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d70fe:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d7100:	212f      	movs	r1, #47	; 0x2f
   d7102:	4628      	mov	r0, r5
   d7104:	f002 f86c 	bl	d91e0 <strrchr>
    if (s1) {
   d7108:	b100      	cbz	r0, d710c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d710a:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d710c:	4932      	ldr	r1, [pc, #200]	; (d71d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d710e:	2201      	movs	r2, #1
   d7110:	a801      	add	r0, sp, #4
   d7112:	f001 f8ff 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d7116:	4629      	mov	r1, r5
   d7118:	f7ff f909 	bl	d632e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d711c:	7923      	ldrb	r3, [r4, #4]
   d711e:	079d      	lsls	r5, r3, #30
   d7120:	d507      	bpl.n	d7132 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d7122:	492e      	ldr	r1, [pc, #184]	; (d71dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d7124:	2202      	movs	r2, #2
   d7126:	a801      	add	r0, sp, #4
   d7128:	f001 f8f4 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d712c:	68e1      	ldr	r1, [r4, #12]
   d712e:	f001 f879 	bl	d8224 <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d7132:	7923      	ldrb	r3, [r4, #4]
   d7134:	0758      	lsls	r0, r3, #29
   d7136:	d516      	bpl.n	d7166 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d7138:	6925      	ldr	r5, [r4, #16]
   d713a:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d713c:	463b      	mov	r3, r7
   d713e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7142:	b13a      	cbz	r2, d7154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d7144:	2a20      	cmp	r2, #32
   d7146:	d101      	bne.n	d714c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d7148:	461d      	mov	r5, r3
   d714a:	e001      	b.n	d7150 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d714c:	2a28      	cmp	r2, #40	; 0x28
   d714e:	d001      	beq.n	d7154 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7150:	461f      	mov	r7, r3
   d7152:	e7f3      	b.n	d713c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d7154:	2202      	movs	r2, #2
   d7156:	4922      	ldr	r1, [pc, #136]	; (d71e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d7158:	a801      	add	r0, sp, #4
   d715a:	f001 f8db 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d715e:	1b7a      	subs	r2, r7, r5
   d7160:	4629      	mov	r1, r5
   d7162:	f001 f8e6 	bl	d8332 <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d7166:	7923      	ldrb	r3, [r4, #4]
   d7168:	0719      	lsls	r1, r3, #28
   d716a:	d507      	bpl.n	d717c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d716c:	491d      	ldr	r1, [pc, #116]	; (d71e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d716e:	2201      	movs	r2, #1
   d7170:	a801      	add	r0, sp, #4
   d7172:	f001 f8cf 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d7176:	6961      	ldr	r1, [r4, #20]
   d7178:	f001 f866 	bl	d8248 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d717c:	7923      	ldrb	r3, [r4, #4]
   d717e:	06da      	lsls	r2, r3, #27
   d7180:	d508      	bpl.n	d7194 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d7182:	2204      	movs	r2, #4
   d7184:	4918      	ldr	r1, [pc, #96]	; (d71e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7186:	eb0d 0002 	add.w	r0, sp, r2
   d718a:	f001 f8c3 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d718e:	69a1      	ldr	r1, [r4, #24]
   d7190:	f001 f848 	bl	d8224 <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d7194:	7923      	ldrb	r3, [r4, #4]
   d7196:	069b      	lsls	r3, r3, #26
   d7198:	d507      	bpl.n	d71aa <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d719a:	4914      	ldr	r1, [pc, #80]	; (d71ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d719c:	2206      	movs	r2, #6
   d719e:	a801      	add	r0, sp, #4
   d71a0:	f001 f8b8 	bl	d8314 <_ZN5spark10JSONWriter4nameEPKcj>
   d71a4:	69e1      	ldr	r1, [r4, #28]
   d71a6:	f7ff f8c2 	bl	d632e <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d71aa:	a801      	add	r0, sp, #4
   d71ac:	f001 f817 	bl	d81de <_ZN5spark10JSONWriter9endObjectEv>
   d71b0:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d71b2:	490f      	ldr	r1, [pc, #60]	; (d71f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d71b4:	6803      	ldr	r3, [r0, #0]
   d71b6:	2202      	movs	r2, #2
   d71b8:	68db      	ldr	r3, [r3, #12]
   d71ba:	4798      	blx	r3
}
   d71bc:	b005      	add	sp, #20
   d71be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d71c2:	bf00      	nop
   d71c4:	2003e71c 	.word	0x2003e71c
   d71c8:	000d97b4 	.word	0x000d97b4
   d71cc:	000d97e6 	.word	0x000d97e6
   d71d0:	000d94a0 	.word	0x000d94a0
   d71d4:	000d952b 	.word	0x000d952b
   d71d8:	000d9a93 	.word	0x000d9a93
   d71dc:	000d9881 	.word	0x000d9881
   d71e0:	000d9884 	.word	0x000d9884
   d71e4:	000d94a6 	.word	0x000d94a6
   d71e8:	000d9887 	.word	0x000d9887
   d71ec:	000d988c 	.word	0x000d988c
   d71f0:	000d987e 	.word	0x000d987e

000d71f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d71f4:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d71f6:	2000      	movs	r0, #0
   d71f8:	f7fd fde4 	bl	d4dc4 <spark_sync_time_pending>
   d71fc:	b128      	cbz	r0, d720a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d71fe:	f7fd fdd1 	bl	d4da4 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7202:	f080 0001 	eor.w	r0, r0, #1
   d7206:	b2c0      	uxtb	r0, r0
   d7208:	bd08      	pop	{r3, pc}
   d720a:	2001      	movs	r0, #1
    }
   d720c:	bd08      	pop	{r3, pc}

000d720e <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d720e:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d7210:	2000      	movs	r0, #0
   d7212:	f7fd fb69 	bl	d48e8 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d7216:	4604      	mov	r4, r0
   d7218:	b968      	cbnz	r0, d7236 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d721a:	f7fd fd1f 	bl	d4c5c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d721e:	2801      	cmp	r0, #1
   d7220:	d10b      	bne.n	d723a <_ZN9TimeClass7isValidEv+0x2c>
   d7222:	4620      	mov	r0, r4
   d7224:	f7fd fd42 	bl	d4cac <system_thread_get_state>
   d7228:	b938      	cbnz	r0, d723a <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d722a:	f7ff ffe3 	bl	d71f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d722e:	b930      	cbnz	r0, d723e <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d7230:	f7fd fdb0 	bl	d4d94 <spark_process>
   d7234:	e7f9      	b.n	d722a <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d7236:	2001      	movs	r0, #1
   d7238:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d723a:	2000      	movs	r0, #0
   d723c:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d723e:	f7ff ffd9 	bl	d71f4 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d7242:	2000      	movs	r0, #0
   d7244:	f7fd fb50 	bl	d48e8 <HAL_RTC_Time_Is_Valid>
   d7248:	3000      	adds	r0, #0
   d724a:	bf18      	it	ne
   d724c:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d724e:	bd10      	pop	{r4, pc}

000d7250 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d7250:	b508      	push	{r3, lr}
    (void)isValid();
   d7252:	f7ff ffdc 	bl	d720e <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7256:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d725a:	f7fd bb3d 	b.w	d48d8 <HAL_RTC_Get_UnixTime>
	...

000d7260 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7260:	4b02      	ldr	r3, [pc, #8]	; (d726c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7262:	681a      	ldr	r2, [r3, #0]
   d7264:	4b02      	ldr	r3, [pc, #8]	; (d7270 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7266:	601a      	str	r2, [r3, #0]
   d7268:	4770      	bx	lr
   d726a:	bf00      	nop
   d726c:	2003e298 	.word	0x2003e298
   d7270:	2003e3ec 	.word	0x2003e3ec

000d7274 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d7274:	2100      	movs	r1, #0
   d7276:	f7fd bd01 	b.w	d4c7c <system_delay_ms>

000d727a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d727a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d727c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d727e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d7280:	b113      	cbz	r3, d7288 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7282:	2203      	movs	r2, #3
   d7284:	4601      	mov	r1, r0
   d7286:	4798      	blx	r3
    }
   d7288:	4620      	mov	r0, r4
   d728a:	bd10      	pop	{r4, pc}

000d728c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d728c:	b510      	push	{r4, lr}
   d728e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7290:	f7ff fff3 	bl	d727a <_ZNSt14_Function_baseD1Ev>
   d7294:	4620      	mov	r0, r4
   d7296:	bd10      	pop	{r4, pc}

000d7298 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d7298:	b513      	push	{r0, r1, r4, lr}
   d729a:	460b      	mov	r3, r1
   d729c:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d729e:	c803      	ldmia	r0, {r0, r1}
   d72a0:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d72a4:	e893 0003 	ldmia.w	r3, {r0, r1}
   d72a8:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d72ac:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d72b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d72b4:	b002      	add	sp, #8
   d72b6:	bd10      	pop	{r4, pc}

000d72b8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d72b8:	4803      	ldr	r0, [pc, #12]	; (d72c8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d72ba:	4a04      	ldr	r2, [pc, #16]	; (d72cc <_GLOBAL__sub_I_RGB+0x14>)
   d72bc:	4904      	ldr	r1, [pc, #16]	; (d72d0 <_GLOBAL__sub_I_RGB+0x18>)
   d72be:	2300      	movs	r3, #0
   d72c0:	6083      	str	r3, [r0, #8]
   d72c2:	f001 b955 	b.w	d8570 <__aeabi_atexit>
   d72c6:	bf00      	nop
   d72c8:	2003e3f0 	.word	0x2003e3f0
   d72cc:	2003e308 	.word	0x2003e308
   d72d0:	000d728d 	.word	0x000d728d

000d72d4 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d72d4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d72d6:	4b0c      	ldr	r3, [pc, #48]	; (d7308 <serialEventRun+0x34>)
   d72d8:	b133      	cbz	r3, d72e8 <serialEventRun+0x14>
   d72da:	f000 fc1f 	bl	d7b1c <_Z16_fetch_usbserialv>
   d72de:	6803      	ldr	r3, [r0, #0]
   d72e0:	691b      	ldr	r3, [r3, #16]
   d72e2:	4798      	blx	r3
   d72e4:	2800      	cmp	r0, #0
   d72e6:	dc09      	bgt.n	d72fc <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d72e8:	4b08      	ldr	r3, [pc, #32]	; (d730c <serialEventRun+0x38>)
   d72ea:	b163      	cbz	r3, d7306 <serialEventRun+0x32>
   d72ec:	f000 fca2 	bl	d7c34 <_Z22__fetch_global_Serial1v>
   d72f0:	6803      	ldr	r3, [r0, #0]
   d72f2:	691b      	ldr	r3, [r3, #16]
   d72f4:	4798      	blx	r3
   d72f6:	2800      	cmp	r0, #0
   d72f8:	dc03      	bgt.n	d7302 <serialEventRun+0x2e>
   d72fa:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d72fc:	f3af 8000 	nop.w
   d7300:	e7f2      	b.n	d72e8 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7302:	f3af 8000 	nop.w
   d7306:	bd08      	pop	{r3, pc}
	...

000d7310 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d7310:	b508      	push	{r3, lr}
	serialEventRun();
   d7312:	f7ff ffdf 	bl	d72d4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7316:	f7fd fad7 	bl	d48c8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d731a:	4b01      	ldr	r3, [pc, #4]	; (d7320 <_post_loop+0x10>)
   d731c:	6018      	str	r0, [r3, #0]
   d731e:	bd08      	pop	{r3, pc}
   d7320:	2003e734 	.word	0x2003e734

000d7324 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7324:	4802      	ldr	r0, [pc, #8]	; (d7330 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7326:	4a03      	ldr	r2, [pc, #12]	; (d7334 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7328:	4903      	ldr	r1, [pc, #12]	; (d7338 <_Z33system_initialize_user_backup_ramv+0x14>)
   d732a:	1a12      	subs	r2, r2, r0
   d732c:	f001 be9b 	b.w	d9066 <memcpy>
   d7330:	2003f400 	.word	0x2003f400
   d7334:	2003f404 	.word	0x2003f404
   d7338:	000d9c50 	.word	0x000d9c50

000d733c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d733c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d733e:	2300      	movs	r3, #0
   d7340:	9300      	str	r3, [sp, #0]
   d7342:	461a      	mov	r2, r3
   d7344:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7348:	f7fd fcc2 	bl	d4cd0 <system_ctrl_set_result>
}
   d734c:	b003      	add	sp, #12
   d734e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7354 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d7354:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7356:	8843      	ldrh	r3, [r0, #2]
   d7358:	2b0a      	cmp	r3, #10
   d735a:	d008      	beq.n	d736e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d735c:	2b50      	cmp	r3, #80	; 0x50
   d735e:	d109      	bne.n	d7374 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d7360:	4b09      	ldr	r3, [pc, #36]	; (d7388 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7362:	681b      	ldr	r3, [r3, #0]
   d7364:	b13b      	cbz	r3, d7376 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d7366:	b003      	add	sp, #12
   d7368:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d736c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d736e:	f7ff ffe5 	bl	d733c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7372:	e006      	b.n	d7382 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7374:	2300      	movs	r3, #0
   d7376:	9300      	str	r3, [sp, #0]
   d7378:	461a      	mov	r2, r3
   d737a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d737e:	f7fd fca7 	bl	d4cd0 <system_ctrl_set_result>
        break;
    }
}
   d7382:	b003      	add	sp, #12
   d7384:	f85d fb04 	ldr.w	pc, [sp], #4
   d7388:	2003e400 	.word	0x2003e400

000d738c <module_user_init_hook>:

void module_user_init_hook()
{
   d738c:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d738e:	4c10      	ldr	r4, [pc, #64]	; (d73d0 <module_user_init_hook+0x44>)
   d7390:	4d10      	ldr	r5, [pc, #64]	; (d73d4 <module_user_init_hook+0x48>)
   d7392:	6823      	ldr	r3, [r4, #0]
   d7394:	42ab      	cmp	r3, r5
   d7396:	4b10      	ldr	r3, [pc, #64]	; (d73d8 <module_user_init_hook+0x4c>)
   d7398:	bf0c      	ite	eq
   d739a:	2201      	moveq	r2, #1
   d739c:	2200      	movne	r2, #0
   d739e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d73a0:	d002      	beq.n	d73a8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d73a2:	f7ff ffbf 	bl	d7324 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d73a6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d73a8:	f7fd fa7e 	bl	d48a8 <HAL_RNG_GetRandomNumber>
   d73ac:	4604      	mov	r4, r0
    srand(seed);
   d73ae:	f001 fe89 	bl	d90c4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d73b2:	4b0a      	ldr	r3, [pc, #40]	; (d73dc <module_user_init_hook+0x50>)
   d73b4:	b113      	cbz	r3, d73bc <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d73b6:	4620      	mov	r0, r4
   d73b8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d73bc:	2100      	movs	r1, #0
   d73be:	4807      	ldr	r0, [pc, #28]	; (d73dc <module_user_init_hook+0x50>)
   d73c0:	f7fd fd08 	bl	d4dd4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d73c4:	2100      	movs	r1, #0
   d73c6:	4806      	ldr	r0, [pc, #24]	; (d73e0 <module_user_init_hook+0x54>)
}
   d73c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d73cc:	f7fd bc76 	b.w	d4cbc <system_ctrl_set_app_request_handler>
   d73d0:	2003f400 	.word	0x2003f400
   d73d4:	9a271c1e 	.word	0x9a271c1e
   d73d8:	2003e404 	.word	0x2003e404
   d73dc:	00000000 	.word	0x00000000
   d73e0:	000d7355 	.word	0x000d7355

000d73e4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d73e4:	4770      	bx	lr

000d73e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d73e6:	2000      	movs	r0, #0
   d73e8:	4770      	bx	lr

000d73ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d73ea:	b510      	push	{r4, lr}
   d73ec:	2110      	movs	r1, #16
   d73ee:	4604      	mov	r4, r0
   d73f0:	f001 f8cc 	bl	d858c <_ZdlPvj>
   d73f4:	4620      	mov	r0, r4
   d73f6:	bd10      	pop	{r4, pc}

000d73f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d73f8:	b508      	push	{r3, lr}
      { delete this; }
   d73fa:	b108      	cbz	r0, d7400 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d73fc:	f7ff fff5 	bl	d73ea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7400:	bd08      	pop	{r3, pc}

000d7402 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7402:	2200      	movs	r2, #0
   d7404:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7406:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7408:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d740c:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d740e:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d7412:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7414:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7416:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7418:	680c      	ldr	r4, [r1, #0]
   d741a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d741c:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d741e:	bd10      	pop	{r4, pc}

000d7420 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7420:	b510      	push	{r4, lr}
   d7422:	4604      	mov	r4, r0
    free((void*)msg_);
   d7424:	6800      	ldr	r0, [r0, #0]
   d7426:	f7fd fce5 	bl	d4df4 <free>
}
   d742a:	4620      	mov	r0, r4
   d742c:	bd10      	pop	{r4, pc}

000d742e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d742e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7430:	68c4      	ldr	r4, [r0, #12]
   d7432:	b1f4      	cbz	r4, d7472 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d7434:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7436:	2b02      	cmp	r3, #2
   d7438:	d103      	bne.n	d7442 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d743a:	f104 000c 	add.w	r0, r4, #12
   d743e:	f7ff ffef 	bl	d7420 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d7442:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d7444:	b135      	cbz	r5, d7454 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7446:	4628      	mov	r0, r5
   d7448:	f7ff ff17 	bl	d727a <_ZNSt14_Function_baseD1Ev>
   d744c:	2110      	movs	r1, #16
   d744e:	4628      	mov	r0, r5
   d7450:	f001 f89c 	bl	d858c <_ZdlPvj>
   d7454:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7456:	b135      	cbz	r5, d7466 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7458:	4628      	mov	r0, r5
   d745a:	f7ff ff0e 	bl	d727a <_ZNSt14_Function_baseD1Ev>
   d745e:	2110      	movs	r1, #16
   d7460:	4628      	mov	r0, r5
   d7462:	f001 f893 	bl	d858c <_ZdlPvj>
   d7466:	4620      	mov	r0, r4
   d7468:	2114      	movs	r1, #20
   d746a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d746e:	f001 b88d 	b.w	d858c <_ZdlPvj>
   d7472:	bd38      	pop	{r3, r4, r5, pc}

000d7474 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d7474:	b513      	push	{r0, r1, r4, lr}
   d7476:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7478:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d747c:	2300      	movs	r3, #0
   d747e:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7480:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7482:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7484:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7486:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7488:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d748a:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d748c:	f7fc fe67 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7490:	4620      	mov	r0, r4
   d7492:	b002      	add	sp, #8
   d7494:	bd10      	pop	{r4, pc}

000d7496 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7496:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7498:	460c      	mov	r4, r1
   d749a:	ad02      	add	r5, sp, #8
   d749c:	f854 3b04 	ldr.w	r3, [r4], #4
   d74a0:	f845 3d08 	str.w	r3, [r5, #-8]!
   d74a4:	4606      	mov	r6, r0
   d74a6:	460f      	mov	r7, r1
   d74a8:	a801      	add	r0, sp, #4
   d74aa:	4621      	mov	r1, r4
   d74ac:	f7fe f97b 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d74b0:	4629      	mov	r1, r5
   d74b2:	4630      	mov	r0, r6
   d74b4:	f7ff ffde 	bl	d7474 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d74b8:	a801      	add	r0, sp, #4
   d74ba:	f7fc fe50 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74be:	4620      	mov	r0, r4
   d74c0:	f7fc fe4d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d74c4:	4638      	mov	r0, r7
   d74c6:	2108      	movs	r1, #8
   d74c8:	f001 f860 	bl	d858c <_ZdlPvj>
        return p;
    }
   d74cc:	4630      	mov	r0, r6
   d74ce:	b003      	add	sp, #12
   d74d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d74d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d74d4:	b538      	push	{r3, r4, r5, lr}
   d74d6:	2300      	movs	r3, #0
   d74d8:	4604      	mov	r4, r0
   d74da:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d74dc:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d74de:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d74e0:	f7fc fddb 	bl	d409a <_Znwj>
   d74e4:	b128      	cbz	r0, d74f2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d74e6:	2301      	movs	r3, #1
   d74e8:	6043      	str	r3, [r0, #4]
   d74ea:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d74ec:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d74ee:	6003      	str	r3, [r0, #0]
   d74f0:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d74f2:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d74f4:	4620      	mov	r0, r4
   d74f6:	bd38      	pop	{r3, r4, r5, pc}
   d74f8:	000d9934 	.word	0x000d9934

000d74fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d74fc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d74fe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7500:	b90a      	cbnz	r2, d7506 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7502:	f001 f856 	bl	d85b2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7506:	68c3      	ldr	r3, [r0, #12]
    }
   d7508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d750c:	4718      	bx	r3

000d750e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d750e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7510:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7512:	f100 0110 	add.w	r1, r0, #16
   d7516:	f7ff fff1 	bl	d74fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d751a:	bd08      	pop	{r3, pc}

000d751c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d751c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d751e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7520:	b90a      	cbnz	r2, d7526 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7522:	f001 f846 	bl	d85b2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7526:	68c3      	ldr	r3, [r0, #12]
    }
   d7528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d752c:	4718      	bx	r3

000d752e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d752e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7530:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d7532:	f100 0110 	add.w	r1, r0, #16
   d7536:	f7ff fff1 	bl	d751c <_ZNKSt8functionIFvRKbEEclES1_>
   d753a:	bd08      	pop	{r3, pc}

000d753c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d753c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d753e:	2300      	movs	r3, #0
   d7540:	6083      	str	r3, [r0, #8]
   d7542:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d7544:	4604      	mov	r4, r0
   d7546:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d7548:	b12b      	cbz	r3, d7556 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d754a:	2202      	movs	r2, #2
   d754c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d754e:	68eb      	ldr	r3, [r5, #12]
   d7550:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7552:	68ab      	ldr	r3, [r5, #8]
   d7554:	60a3      	str	r3, [r4, #8]
	}
    }
   d7556:	4620      	mov	r0, r4
   d7558:	bd38      	pop	{r3, r4, r5, pc}
	...

000d755c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d755c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d755e:	b089      	sub	sp, #36	; 0x24
   d7560:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d7562:	4668      	mov	r0, sp
   d7564:	f7ff ff4d 	bl	d7402 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7568:	2300      	movs	r3, #0
   d756a:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d756e:	f04f 0202 	mov.w	r2, #2
   d7572:	e8d4 3f4f 	ldrexb	r3, [r4]
   d7576:	2b00      	cmp	r3, #0
   d7578:	d103      	bne.n	d7582 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d757a:	e8c4 2f41 	strexb	r1, r2, [r4]
   d757e:	2900      	cmp	r1, #0
   d7580:	d1f7      	bne.n	d7572 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d7582:	d002      	beq.n	d758a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d7584:	f88d 3008 	strb.w	r3, [sp, #8]
   d7588:	e063      	b.n	d7652 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d758a:	f114 050c 	adds.w	r5, r4, #12
   d758e:	d003      	beq.n	d7598 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d7590:	4669      	mov	r1, sp
   d7592:	4628      	mov	r0, r5
   d7594:	f7ff ff35 	bl	d7402 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7598:	f3bf 8f5f 	dmb	sy
   d759c:	2301      	movs	r3, #1
   d759e:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d75a0:	2000      	movs	r0, #0
   d75a2:	f104 0308 	add.w	r3, r4, #8
   d75a6:	f3bf 8f5f 	dmb	sy
   d75aa:	e853 6f00 	ldrex	r6, [r3]
   d75ae:	e843 0200 	strex	r2, r0, [r3]
   d75b2:	2a00      	cmp	r2, #0
   d75b4:	d1f9      	bne.n	d75aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d75b6:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d75ba:	2e00      	cmp	r6, #0
   d75bc:	d049      	beq.n	d7652 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d75be:	f7fd fb65 	bl	d4c8c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d75c2:	b120      	cbz	r0, d75ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d75c4:	4629      	mov	r1, r5
   d75c6:	4630      	mov	r0, r6
   d75c8:	f7ff ff98 	bl	d74fc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d75cc:	e03a      	b.n	d7644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d75ce:	4631      	mov	r1, r6
   d75d0:	a802      	add	r0, sp, #8
   d75d2:	f7ff ffb3 	bl	d753c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d75d6:	68e0      	ldr	r0, [r4, #12]
   d75d8:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d75dc:	b108      	cbz	r0, d75e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d75de:	f001 fdbb 	bl	d9158 <strdup>
   d75e2:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d75e4:	2010      	movs	r0, #16
   d75e6:	f8ad 501c 	strh.w	r5, [sp, #28]
   d75ea:	f7fc fd56 	bl	d409a <_Znwj>
   d75ee:	4605      	mov	r5, r0
   d75f0:	b1e8      	cbz	r0, d762e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d75f2:	2700      	movs	r7, #0
   d75f4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d75f6:	2018      	movs	r0, #24
   d75f8:	f7fc fd4f 	bl	d409a <_Znwj>
   d75fc:	4604      	mov	r4, r0
   d75fe:	b188      	cbz	r0, d7624 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7600:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7602:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d7604:	a802      	add	r0, sp, #8
   d7606:	f7ff fe47 	bl	d7298 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d760a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d760c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d760e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7610:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7612:	9204      	str	r2, [sp, #16]
   d7614:	a906      	add	r1, sp, #24
   d7616:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7618:	60e3      	str	r3, [r4, #12]
   d761a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d761e:	9205      	str	r2, [sp, #20]
   d7620:	f7ff feef 	bl	d7402 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d7624:	4b0d      	ldr	r3, [pc, #52]	; (d765c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d7626:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7628:	4b0d      	ldr	r3, [pc, #52]	; (d7660 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d762a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d762c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d762e:	a806      	add	r0, sp, #24
   d7630:	f7ff fef6 	bl	d7420 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7634:	a802      	add	r0, sp, #8
   d7636:	f7ff fe20 	bl	d727a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d763a:	2200      	movs	r2, #0
   d763c:	4629      	mov	r1, r5
   d763e:	4809      	ldr	r0, [pc, #36]	; (d7664 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d7640:	f7fd fb2c 	bl	d4c9c <application_thread_invoke>
   d7644:	4630      	mov	r0, r6
   d7646:	f7ff fe18 	bl	d727a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d764a:	2110      	movs	r1, #16
   d764c:	4630      	mov	r0, r6
   d764e:	f000 ff9d 	bl	d858c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d7652:	4668      	mov	r0, sp
   d7654:	f7ff fee4 	bl	d7420 <_ZN8particle5ErrorD1Ev>
    }
   d7658:	b009      	add	sp, #36	; 0x24
   d765a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d765c:	000d750f 	.word	0x000d750f
   d7660:	000d7785 	.word	0x000d7785
   d7664:	000d7c81 	.word	0x000d7c81

000d7668 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d766c:	b08b      	sub	sp, #44	; 0x2c
   d766e:	4606      	mov	r6, r0
   d7670:	460f      	mov	r7, r1
   d7672:	4690      	mov	r8, r2
   d7674:	4699      	mov	r9, r3
   d7676:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d767a:	f7fd fb93 	bl	d4da4 <spark_cloud_flag_connected>
   d767e:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d7680:	4683      	mov	fp, r0
   d7682:	bb30      	cbnz	r0, d76d2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d7684:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7688:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d768a:	a905      	add	r1, sp, #20
   d768c:	4628      	mov	r0, r5
   d768e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7692:	f7ff feb6 	bl	d7402 <_ZN8particle5ErrorC1EOS0_>
   d7696:	2014      	movs	r0, #20
   d7698:	f7fc fcff 	bl	d409a <_Znwj>
   d769c:	4604      	mov	r4, r0
   d769e:	b158      	cbz	r0, d76b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d76a0:	2302      	movs	r3, #2
   d76a2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76a4:	2301      	movs	r3, #1
   d76a6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d76a8:	f8c0 b004 	str.w	fp, [r0, #4]
   d76ac:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d76b0:	4629      	mov	r1, r5
   d76b2:	300c      	adds	r0, #12
   d76b4:	f7ff fea5 	bl	d7402 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d76b8:	4630      	mov	r0, r6
   d76ba:	4621      	mov	r1, r4
   d76bc:	f840 4b04 	str.w	r4, [r0], #4
   d76c0:	f7ff ff08 	bl	d74d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d76c4:	4628      	mov	r0, r5
   d76c6:	f7ff feab 	bl	d7420 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d76ca:	a805      	add	r0, sp, #20
   d76cc:	f7ff fea8 	bl	d7420 <_ZN8particle5ErrorD1Ev>
   d76d0:	e052      	b.n	d7778 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d76d2:	2400      	movs	r4, #0
   d76d4:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d76d6:	2014      	movs	r0, #20
   d76d8:	606c      	str	r4, [r5, #4]
   d76da:	60ac      	str	r4, [r5, #8]
   d76dc:	9307      	str	r3, [sp, #28]
   d76de:	f7fc fcdc 	bl	d409a <_Znwj>
   d76e2:	4601      	mov	r1, r0
   d76e4:	b118      	cbz	r0, d76ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d76e6:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d76e8:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d76ea:	6044      	str	r4, [r0, #4]
   d76ec:	6084      	str	r4, [r0, #8]
   d76ee:	a804      	add	r0, sp, #16
   d76f0:	9103      	str	r1, [sp, #12]
   d76f2:	f7ff feef 	bl	d74d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d76f6:	4b22      	ldr	r3, [pc, #136]	; (d7780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d76f8:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d76fa:	2008      	movs	r0, #8
   d76fc:	f7fc fccd 	bl	d409a <_Znwj>
   d7700:	4604      	mov	r4, r0
   d7702:	b128      	cbz	r0, d7710 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7704:	9b03      	ldr	r3, [sp, #12]
   d7706:	f840 3b04 	str.w	r3, [r0], #4
   d770a:	a904      	add	r1, sp, #16
   d770c:	f7fe f84b 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7710:	9500      	str	r5, [sp, #0]
   d7712:	fa5f f38a 	uxtb.w	r3, sl
   d7716:	464a      	mov	r2, r9
   d7718:	4641      	mov	r1, r8
   d771a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d771c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d771e:	f7fd fb49 	bl	d4db4 <spark_send_event>
   d7722:	b920      	cbnz	r0, d772e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d7724:	9b03      	ldr	r3, [sp, #12]
   d7726:	785b      	ldrb	r3, [r3, #1]
   d7728:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d772c:	b183      	cbz	r3, d7750 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d772e:	9b03      	ldr	r3, [sp, #12]
   d7730:	9305      	str	r3, [sp, #20]
   d7732:	a904      	add	r1, sp, #16
   d7734:	a806      	add	r0, sp, #24
   d7736:	f7fe f836 	bl	d57a6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d773a:	a905      	add	r1, sp, #20
   d773c:	4630      	mov	r0, r6
   d773e:	f7ff fe99 	bl	d7474 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d7742:	a806      	add	r0, sp, #24
   d7744:	f7fc fd0b 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7748:	a804      	add	r0, sp, #16
   d774a:	f7fc fd08 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d774e:	e013      	b.n	d7778 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d7750:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d7754:	a905      	add	r1, sp, #20
   d7756:	a803      	add	r0, sp, #12
   d7758:	9205      	str	r2, [sp, #20]
   d775a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d775e:	f7ff fefd 	bl	d755c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7762:	a805      	add	r0, sp, #20
   d7764:	f7ff fe5c 	bl	d7420 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7768:	a805      	add	r0, sp, #20
   d776a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d776c:	f7ff fe93 	bl	d7496 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d7770:	a806      	add	r0, sp, #24
   d7772:	f7fc fcf4 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7776:	e7da      	b.n	d772e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d7778:	4630      	mov	r0, r6
   d777a:	b00b      	add	sp, #44	; 0x2c
   d777c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7780:	000d78f5 	.word	0x000d78f5

000d7784 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d7784:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7788:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d778a:	d006      	beq.n	d779a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d778c:	2a03      	cmp	r2, #3
   d778e:	d017      	beq.n	d77c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d7790:	2a01      	cmp	r2, #1
   d7792:	d122      	bne.n	d77da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d7794:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7796:	6003      	str	r3, [r0, #0]
	      break;
   d7798:	e01f      	b.n	d77da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d779a:	2018      	movs	r0, #24
   d779c:	680e      	ldr	r6, [r1, #0]
   d779e:	f7fc fc7c 	bl	d409a <_Znwj>
   d77a2:	4605      	mov	r5, r0
   d77a4:	b150      	cbz	r0, d77bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d77a6:	4631      	mov	r1, r6
   d77a8:	f7ff fec8 	bl	d753c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d77ac:	6930      	ldr	r0, [r6, #16]
   d77ae:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d77b2:	b108      	cbz	r0, d77b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d77b4:	f001 fcd0 	bl	d9158 <strdup>
   d77b8:	6128      	str	r0, [r5, #16]
   d77ba:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d77bc:	6025      	str	r5, [r4, #0]
   d77be:	e00c      	b.n	d77da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d77c0:	6804      	ldr	r4, [r0, #0]
   d77c2:	b154      	cbz	r4, d77da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d77c4:	f104 0010 	add.w	r0, r4, #16
   d77c8:	f7ff fe2a 	bl	d7420 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d77cc:	4620      	mov	r0, r4
   d77ce:	f7ff fd54 	bl	d727a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d77d2:	2118      	movs	r1, #24
   d77d4:	4620      	mov	r0, r4
   d77d6:	f000 fed9 	bl	d858c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d77da:	2000      	movs	r0, #0
   d77dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d77de <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d77de:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d77e0:	2300      	movs	r3, #0
   d77e2:	6083      	str	r3, [r0, #8]
   d77e4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d77e6:	4604      	mov	r4, r0
   d77e8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d77ea:	b12b      	cbz	r3, d77f8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d77ec:	2202      	movs	r2, #2
   d77ee:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d77f0:	68eb      	ldr	r3, [r5, #12]
   d77f2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d77f4:	68ab      	ldr	r3, [r5, #8]
   d77f6:	60a3      	str	r3, [r4, #8]
	}
    }
   d77f8:	4620      	mov	r0, r4
   d77fa:	bd38      	pop	{r3, r4, r5, pc}

000d77fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d77fc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d77fe:	b570      	push	{r4, r5, r6, lr}
   d7800:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d7802:	d006      	beq.n	d7812 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d7804:	2a03      	cmp	r2, #3
   d7806:	d011      	beq.n	d782c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d7808:	2a01      	cmp	r2, #1
   d780a:	d118      	bne.n	d783e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d780c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d780e:	6003      	str	r3, [r0, #0]
	      break;
   d7810:	e015      	b.n	d783e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7812:	2014      	movs	r0, #20
   d7814:	680e      	ldr	r6, [r1, #0]
   d7816:	f7fc fc40 	bl	d409a <_Znwj>
   d781a:	4605      	mov	r5, r0
   d781c:	b120      	cbz	r0, d7828 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d781e:	4631      	mov	r1, r6
   d7820:	f7ff ffdd 	bl	d77de <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7824:	7c33      	ldrb	r3, [r6, #16]
   d7826:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d7828:	6025      	str	r5, [r4, #0]
   d782a:	e008      	b.n	d783e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d782c:	6804      	ldr	r4, [r0, #0]
   d782e:	b134      	cbz	r4, d783e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d7830:	4620      	mov	r0, r4
   d7832:	f7ff fd22 	bl	d727a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d7836:	2114      	movs	r1, #20
   d7838:	4620      	mov	r0, r4
   d783a:	f000 fea7 	bl	d858c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d783e:	2000      	movs	r0, #0
   d7840:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7844 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d7844:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d7846:	2300      	movs	r3, #0
   d7848:	b087      	sub	sp, #28
   d784a:	460c      	mov	r4, r1
   d784c:	f3bf 8f5f 	dmb	sy
   d7850:	e850 6f00 	ldrex	r6, [r0]
   d7854:	e840 3200 	strex	r2, r3, [r0]
   d7858:	2a00      	cmp	r2, #0
   d785a:	d1f9      	bne.n	d7850 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d785c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d7860:	2e00      	cmp	r6, #0
   d7862:	d03f      	beq.n	d78e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d7864:	4618      	mov	r0, r3
   d7866:	f7fd fa11 	bl	d4c8c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d786a:	4607      	mov	r7, r0
   d786c:	b120      	cbz	r0, d7878 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d786e:	4621      	mov	r1, r4
   d7870:	4630      	mov	r0, r6
   d7872:	f7ff fe53 	bl	d751c <_ZNKSt8functionIFvRKbEEclES1_>
   d7876:	e02e      	b.n	d78d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7878:	4631      	mov	r1, r6
   d787a:	a801      	add	r0, sp, #4
   d787c:	f7ff ffaf 	bl	d77de <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7880:	7823      	ldrb	r3, [r4, #0]
   d7882:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7886:	2010      	movs	r0, #16
   d7888:	f7fc fc07 	bl	d409a <_Znwj>
   d788c:	4605      	mov	r5, r0
   d788e:	b1d0      	cbz	r0, d78c6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7890:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7892:	2014      	movs	r0, #20
   d7894:	f7fc fc01 	bl	d409a <_Znwj>
   d7898:	4604      	mov	r4, r0
   d789a:	b178      	cbz	r0, d78bc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d789c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d789e:	4601      	mov	r1, r0
   d78a0:	a801      	add	r0, sp, #4
   d78a2:	f7ff fcf9 	bl	d7298 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78a6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d78a8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78aa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d78ac:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d78ae:	9203      	str	r2, [sp, #12]
   d78b0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d78b2:	60e3      	str	r3, [r4, #12]
   d78b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d78b8:	9204      	str	r2, [sp, #16]
   d78ba:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d78bc:	4b0a      	ldr	r3, [pc, #40]	; (d78e8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d78be:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d78c0:	4b0a      	ldr	r3, [pc, #40]	; (d78ec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d78c2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d78c4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d78c6:	a801      	add	r0, sp, #4
   d78c8:	f7ff fcd7 	bl	d727a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d78cc:	2200      	movs	r2, #0
   d78ce:	4629      	mov	r1, r5
   d78d0:	4807      	ldr	r0, [pc, #28]	; (d78f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d78d2:	f7fd f9e3 	bl	d4c9c <application_thread_invoke>
   d78d6:	4630      	mov	r0, r6
   d78d8:	f7ff fccf 	bl	d727a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d78dc:	2110      	movs	r1, #16
   d78de:	4630      	mov	r0, r6
   d78e0:	f000 fe54 	bl	d858c <_ZdlPvj>
        }
    }
   d78e4:	b007      	add	sp, #28
   d78e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d78e8:	000d752f 	.word	0x000d752f
   d78ec:	000d77fd 	.word	0x000d77fd
   d78f0:	000d7c81 	.word	0x000d7c81

000d78f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d78f4:	b530      	push	{r4, r5, lr}
   d78f6:	b085      	sub	sp, #20
   d78f8:	4604      	mov	r4, r0
   d78fa:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d78fc:	4668      	mov	r0, sp
   d78fe:	4611      	mov	r1, r2
   d7900:	f7ff fdc9 	bl	d7496 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7904:	b17c      	cbz	r4, d7926 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d7906:	b224      	sxth	r4, r4
   d7908:	4628      	mov	r0, r5
   d790a:	b10d      	cbz	r5, d7910 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d790c:	f001 fc24 	bl	d9158 <strdup>
   d7910:	9002      	str	r0, [sp, #8]
   d7912:	a902      	add	r1, sp, #8
   d7914:	4668      	mov	r0, sp
   d7916:	f8ad 400c 	strh.w	r4, [sp, #12]
   d791a:	f7ff fe1f 	bl	d755c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d791e:	a802      	add	r0, sp, #8
   d7920:	f7ff fd7e 	bl	d7420 <_ZN8particle5ErrorD1Ev>
   d7924:	e01d      	b.n	d7962 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d7926:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d7928:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d792c:	f04f 0201 	mov.w	r2, #1
   d7930:	e8d0 3f4f 	ldrexb	r3, [r0]
   d7934:	42a3      	cmp	r3, r4
   d7936:	d103      	bne.n	d7940 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d7938:	e8c0 2f41 	strexb	r1, r2, [r0]
   d793c:	2900      	cmp	r1, #0
   d793e:	d1f7      	bne.n	d7930 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d7940:	d002      	beq.n	d7948 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d7942:	f88d 3008 	strb.w	r3, [sp, #8]
   d7946:	e00c      	b.n	d7962 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d7948:	f110 010c 	adds.w	r1, r0, #12
   d794c:	f04f 0301 	mov.w	r3, #1
   d7950:	bf18      	it	ne
   d7952:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d7954:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d7958:	3004      	adds	r0, #4
   d795a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d795e:	f7ff ff71 	bl	d7844 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d7962:	a801      	add	r0, sp, #4
   d7964:	f7fc fbfb 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d7968:	b005      	add	sp, #20
   d796a:	bd30      	pop	{r4, r5, pc}

000d796c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d796c:	4770      	bx	lr

000d796e <_ZN9IPAddressD0Ev>:
   d796e:	b510      	push	{r4, lr}
   d7970:	2118      	movs	r1, #24
   d7972:	4604      	mov	r4, r0
   d7974:	f000 fe0a 	bl	d858c <_ZdlPvj>
   d7978:	4620      	mov	r0, r4
   d797a:	bd10      	pop	{r4, pc}

000d797c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d797c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d797e:	7d03      	ldrb	r3, [r0, #20]
   d7980:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7982:	b08d      	sub	sp, #52	; 0x34
   d7984:	460e      	mov	r6, r1
   d7986:	f100 0704 	add.w	r7, r0, #4
   d798a:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d798e:	d002      	beq.n	d7996 <_ZNK9IPAddress7printToER5Print+0x1a>
   d7990:	f100 0508 	add.w	r5, r0, #8
   d7994:	e018      	b.n	d79c8 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d7996:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7998:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d799a:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d799e:	232f      	movs	r3, #47	; 0x2f
   d79a0:	462a      	mov	r2, r5
   d79a2:	200a      	movs	r0, #10
   d79a4:	f7fd f85a 	bl	d4a5c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d79a8:	4628      	mov	r0, r5
   d79aa:	f001 fbf0 	bl	d918e <strlen>
   d79ae:	6833      	ldr	r3, [r6, #0]
   d79b0:	4602      	mov	r2, r0
   d79b2:	68db      	ldr	r3, [r3, #12]
   d79b4:	4629      	mov	r1, r5
   d79b6:	4630      	mov	r0, r6
   d79b8:	4798      	blx	r3
   d79ba:	e00f      	b.n	d79dc <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d79bc:	b124      	cbz	r4, d79c8 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d79be:	212e      	movs	r1, #46	; 0x2e
   d79c0:	4630      	mov	r0, r6
   d79c2:	f7fe fbf3 	bl	d61ac <_ZN5Print5printEc>
   d79c6:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d79c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d79cc:	220a      	movs	r2, #10
   d79ce:	4630      	mov	r0, r6
   d79d0:	f7fe fbfb 	bl	d61ca <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79d4:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79d6:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79d8:	d1f0      	bne.n	d79bc <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79da:	4620      	mov	r0, r4
    }
    return n;
}
   d79dc:	b00d      	add	sp, #52	; 0x34
   d79de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d79e0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d79e0:	b510      	push	{r4, lr}
   d79e2:	4b05      	ldr	r3, [pc, #20]	; (d79f8 <_ZN9IPAddressC1Ev+0x18>)
   d79e4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d79e6:	2211      	movs	r2, #17
   d79e8:	f840 3b04 	str.w	r3, [r0], #4
   d79ec:	2100      	movs	r1, #0
   d79ee:	f001 fb60 	bl	d90b2 <memset>
{
    clear();
}
   d79f2:	4620      	mov	r0, r4
   d79f4:	bd10      	pop	{r4, pc}
   d79f6:	bf00      	nop
   d79f8:	000d9950 	.word	0x000d9950

000d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d79fc:	4603      	mov	r3, r0
   d79fe:	4a07      	ldr	r2, [pc, #28]	; (d7a1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a00:	b510      	push	{r4, lr}
   d7a02:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d7a06:	f101 0210 	add.w	r2, r1, #16
   d7a0a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a0e:	f843 4b04 	str.w	r4, [r3], #4
   d7a12:	4291      	cmp	r1, r2
   d7a14:	d1f9      	bne.n	d7a0a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a16:	780a      	ldrb	r2, [r1, #0]
   d7a18:	701a      	strb	r2, [r3, #0]
}
   d7a1a:	bd10      	pop	{r4, pc}
   d7a1c:	000d9950 	.word	0x000d9950

000d7a20 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d7a20:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a22:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a26:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a2a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a2e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d7a32:	2304      	movs	r3, #4
   d7a34:	6041      	str	r1, [r0, #4]
   d7a36:	7503      	strb	r3, [r0, #20]
   d7a38:	bd10      	pop	{r4, pc}

000d7a3a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d7a3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7a3c:	780d      	ldrb	r5, [r1, #0]
   d7a3e:	788b      	ldrb	r3, [r1, #2]
   d7a40:	784a      	ldrb	r2, [r1, #1]
   d7a42:	78c9      	ldrb	r1, [r1, #3]
   d7a44:	9100      	str	r1, [sp, #0]
   d7a46:	4629      	mov	r1, r5
   d7a48:	f7ff ffea 	bl	d7a20 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d7a4c:	b003      	add	sp, #12
   d7a4e:	bd30      	pop	{r4, r5, pc}

000d7a50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a50:	7441      	strb	r1, [r0, #17]
   d7a52:	4770      	bx	lr

000d7a54 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7a54:	4770      	bx	lr

000d7a56 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d7a56:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7a58:	2100      	movs	r1, #0
   d7a5a:	7c00      	ldrb	r0, [r0, #16]
   d7a5c:	f7fd f8be 	bl	d4bdc <HAL_USB_USART_Receive_Data>
}
   d7a60:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a64:	bf28      	it	cs
   d7a66:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a6a:	bd08      	pop	{r3, pc}

000d7a6c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7a6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7a6e:	2101      	movs	r1, #1
   d7a70:	7c00      	ldrb	r0, [r0, #16]
   d7a72:	f7fd f8b3 	bl	d4bdc <HAL_USB_USART_Receive_Data>
}
   d7a76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7a7a:	bf28      	it	cs
   d7a7c:	f04f 30ff 	movcs.w	r0, #4294967295
   d7a80:	bd08      	pop	{r3, pc}

000d7a82 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d7a82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7a84:	7c00      	ldrb	r0, [r0, #16]
   d7a86:	f7fd f8a1 	bl	d4bcc <HAL_USB_USART_Available_Data_For_Write>
}
   d7a8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a8e:	bd08      	pop	{r3, pc}

000d7a90 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7a90:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7a92:	7c00      	ldrb	r0, [r0, #16]
   d7a94:	f7fd f892 	bl	d4bbc <HAL_USB_USART_Available_Data>
}
   d7a98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a9c:	bd08      	pop	{r3, pc}

000d7a9e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d7a9e:	7c00      	ldrb	r0, [r0, #16]
   d7aa0:	f7fd b8ac 	b.w	d4bfc <HAL_USB_USART_Flush_Data>

000d7aa4 <_ZN9USBSerialD0Ev>:
   d7aa4:	b510      	push	{r4, lr}
   d7aa6:	2114      	movs	r1, #20
   d7aa8:	4604      	mov	r4, r0
   d7aaa:	f000 fd6f 	bl	d858c <_ZdlPvj>
   d7aae:	4620      	mov	r0, r4
   d7ab0:	bd10      	pop	{r4, pc}

000d7ab2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ab2:	b538      	push	{r3, r4, r5, lr}
   d7ab4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ab6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d7ab8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7aba:	f7fd f887 	bl	d4bcc <HAL_USB_USART_Available_Data_For_Write>
   d7abe:	2800      	cmp	r0, #0
   d7ac0:	dc01      	bgt.n	d7ac6 <_ZN9USBSerial5writeEh+0x14>
   d7ac2:	7c60      	ldrb	r0, [r4, #17]
   d7ac4:	b128      	cbz	r0, d7ad2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7ac6:	4629      	mov	r1, r5
   d7ac8:	7c20      	ldrb	r0, [r4, #16]
   d7aca:	f7fd f88f 	bl	d4bec <HAL_USB_USART_Send_Data>
   d7ace:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d7ad2:	bd38      	pop	{r3, r4, r5, pc}

000d7ad4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7ad4:	b510      	push	{r4, lr}
   d7ad6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7ad8:	2300      	movs	r3, #0
   d7ada:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7ae0:	60a3      	str	r3, [r4, #8]
   d7ae2:	4b05      	ldr	r3, [pc, #20]	; (d7af8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7ae4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d7ae6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7ae8:	4608      	mov	r0, r1
{
  _serial = serial;
   d7aea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d7aec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d7aee:	4611      	mov	r1, r2
   d7af0:	f7fd f84c 	bl	d4b8c <HAL_USB_USART_Init>
}
   d7af4:	4620      	mov	r0, r4
   d7af6:	bd10      	pop	{r4, pc}
   d7af8:	000d9964 	.word	0x000d9964

000d7afc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7afc:	2200      	movs	r2, #0
   d7afe:	7c00      	ldrb	r0, [r0, #16]
   d7b00:	f7fd b84c 	b.w	d4b9c <HAL_USB_USART_Begin>

000d7b04 <_ZN9USBSerial3endEv>:
}

void USBSerial::end()
{
    HAL_USB_USART_End(_serial);
   d7b04:	7c00      	ldrb	r0, [r0, #16]
   d7b06:	f7fd b851 	b.w	d4bac <HAL_USB_USART_End>

000d7b0a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b0a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7b0c:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7b0e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7b10:	2100      	movs	r1, #0
   d7b12:	f001 face 	bl	d90b2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7b16:	4620      	mov	r0, r4
   d7b18:	bd10      	pop	{r4, pc}
	...

000d7b1c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7b1c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b1e:	4d0e      	ldr	r5, [pc, #56]	; (d7b58 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7b20:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7b22:	a801      	add	r0, sp, #4
   d7b24:	f7ff fff1 	bl	d7b0a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b28:	6829      	ldr	r1, [r5, #0]
   d7b2a:	f011 0401 	ands.w	r4, r1, #1
   d7b2e:	d110      	bne.n	d7b52 <_Z16_fetch_usbserialv+0x36>
   d7b30:	4628      	mov	r0, r5
   d7b32:	f7fc fac3 	bl	d40bc <__cxa_guard_acquire>
   d7b36:	b160      	cbz	r0, d7b52 <_Z16_fetch_usbserialv+0x36>
   d7b38:	aa01      	add	r2, sp, #4
   d7b3a:	4621      	mov	r1, r4
   d7b3c:	4807      	ldr	r0, [pc, #28]	; (d7b5c <_Z16_fetch_usbserialv+0x40>)
   d7b3e:	f7ff ffc9 	bl	d7ad4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7b42:	4628      	mov	r0, r5
   d7b44:	f7fc fabf 	bl	d40c6 <__cxa_guard_release>
   d7b48:	4a05      	ldr	r2, [pc, #20]	; (d7b60 <_Z16_fetch_usbserialv+0x44>)
   d7b4a:	4906      	ldr	r1, [pc, #24]	; (d7b64 <_Z16_fetch_usbserialv+0x48>)
   d7b4c:	4803      	ldr	r0, [pc, #12]	; (d7b5c <_Z16_fetch_usbserialv+0x40>)
   d7b4e:	f000 fd0f 	bl	d8570 <__aeabi_atexit>
	return _usbserial;
}
   d7b52:	4802      	ldr	r0, [pc, #8]	; (d7b5c <_Z16_fetch_usbserialv+0x40>)
   d7b54:	b007      	add	sp, #28
   d7b56:	bd30      	pop	{r4, r5, pc}
   d7b58:	2003e408 	.word	0x2003e408
   d7b5c:	2003e40c 	.word	0x2003e40c
   d7b60:	2003e308 	.word	0x2003e308
   d7b64:	000d7a55 	.word	0x000d7a55

000d7b68 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7b68:	4770      	bx	lr

000d7b6a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b6a:	7441      	strb	r1, [r0, #17]
   d7b6c:	4770      	bx	lr

000d7b6e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7b6e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7b70:	7c00      	ldrb	r0, [r0, #16]
   d7b72:	f7fc ffbb 	bl	d4aec <HAL_USART_Available_Data_For_Write>
}
   d7b76:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b7a:	bd08      	pop	{r3, pc}

000d7b7c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7b7c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7b7e:	7c00      	ldrb	r0, [r0, #16]
   d7b80:	f7fc ff8c 	bl	d4a9c <HAL_USART_Available_Data>
}
   d7b84:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b88:	bd08      	pop	{r3, pc}

000d7b8a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7b8a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7b8c:	7c00      	ldrb	r0, [r0, #16]
   d7b8e:	f7fc ff95 	bl	d4abc <HAL_USART_Peek_Data>
}
   d7b92:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7b96:	bf28      	it	cs
   d7b98:	f04f 30ff 	movcs.w	r0, #4294967295
   d7b9c:	bd08      	pop	{r3, pc}

000d7b9e <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7b9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7ba0:	7c00      	ldrb	r0, [r0, #16]
   d7ba2:	f7fc ff83 	bl	d4aac <HAL_USART_Read_Data>
}
   d7ba6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7baa:	bf28      	it	cs
   d7bac:	f04f 30ff 	movcs.w	r0, #4294967295
   d7bb0:	bd08      	pop	{r3, pc}

000d7bb2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d7bb2:	7c00      	ldrb	r0, [r0, #16]
   d7bb4:	f7fc bf8a 	b.w	d4acc <HAL_USART_Flush_Data>

000d7bb8 <_ZN11USARTSerialD0Ev>:
   d7bb8:	b510      	push	{r4, lr}
   d7bba:	2114      	movs	r1, #20
   d7bbc:	4604      	mov	r4, r0
   d7bbe:	f000 fce5 	bl	d858c <_ZdlPvj>
   d7bc2:	4620      	mov	r0, r4
   d7bc4:	bd10      	pop	{r4, pc}

000d7bc6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7bc6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7bc8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d7bca:	4604      	mov	r4, r0
   d7bcc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d7bce:	b925      	cbnz	r5, d7bda <_ZN11USARTSerial5writeEh+0x14>
   d7bd0:	7c00      	ldrb	r0, [r0, #16]
   d7bd2:	f7fc ff8b 	bl	d4aec <HAL_USART_Available_Data_For_Write>
   d7bd6:	2800      	cmp	r0, #0
   d7bd8:	dd05      	ble.n	d7be6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7bda:	4631      	mov	r1, r6
   d7bdc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7bde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d7be2:	f7fc bf53 	b.w	d4a8c <HAL_USART_Write_Data>
  }
  return 0;
}
   d7be6:	4628      	mov	r0, r5
   d7be8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d7bec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d7bec:	b510      	push	{r4, lr}
   d7bee:	4604      	mov	r4, r0
   d7bf0:	4608      	mov	r0, r1
   d7bf2:	4611      	mov	r1, r2
   d7bf4:	2200      	movs	r2, #0
   d7bf6:	6062      	str	r2, [r4, #4]
   d7bf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7bfc:	60a2      	str	r2, [r4, #8]
   d7bfe:	4a05      	ldr	r2, [pc, #20]	; (d7c14 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d7c00:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d7c02:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d7c04:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d7c06:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d7c08:	461a      	mov	r2, r3
   d7c0a:	f7fc ff2f 	bl	d4a6c <HAL_USART_Init>
}
   d7c0e:	4620      	mov	r0, r4
   d7c10:	bd10      	pop	{r4, pc}
   d7c12:	bf00      	nop
   d7c14:	000d9994 	.word	0x000d9994

000d7c18 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d7c18:	2300      	movs	r3, #0
   d7c1a:	7c00      	ldrb	r0, [r0, #16]
   d7c1c:	f7fc bf6e 	b.w	d4afc <HAL_USART_BeginConfig>

000d7c20 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d7c20:	2200      	movs	r2, #0
   d7c22:	f7ff bff9 	b.w	d7c18 <_ZN11USARTSerial5beginEmm>

000d7c26 <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d7c26:	7c00      	ldrb	r0, [r0, #16]
   d7c28:	f7fc bf28 	b.w	d4a7c <HAL_USART_End>

000d7c2c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7c2c:	7c00      	ldrb	r0, [r0, #16]
   d7c2e:	f7fc bf55 	b.w	d4adc <HAL_USART_Is_Enabled>
	...

000d7c34 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7c34:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7c36:	4d0c      	ldr	r5, [pc, #48]	; (d7c68 <_Z22__fetch_global_Serial1v+0x34>)
   d7c38:	6829      	ldr	r1, [r5, #0]
   d7c3a:	f011 0401 	ands.w	r4, r1, #1
   d7c3e:	d111      	bne.n	d7c64 <_Z22__fetch_global_Serial1v+0x30>
   d7c40:	4628      	mov	r0, r5
   d7c42:	f7fc fa3b 	bl	d40bc <__cxa_guard_acquire>
   d7c46:	b168      	cbz	r0, d7c64 <_Z22__fetch_global_Serial1v+0x30>
   d7c48:	4a08      	ldr	r2, [pc, #32]	; (d7c6c <_Z22__fetch_global_Serial1v+0x38>)
   d7c4a:	4b09      	ldr	r3, [pc, #36]	; (d7c70 <_Z22__fetch_global_Serial1v+0x3c>)
   d7c4c:	4809      	ldr	r0, [pc, #36]	; (d7c74 <_Z22__fetch_global_Serial1v+0x40>)
   d7c4e:	4621      	mov	r1, r4
   d7c50:	f7ff ffcc 	bl	d7bec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d7c54:	4628      	mov	r0, r5
   d7c56:	f7fc fa36 	bl	d40c6 <__cxa_guard_release>
   d7c5a:	4a07      	ldr	r2, [pc, #28]	; (d7c78 <_Z22__fetch_global_Serial1v+0x44>)
   d7c5c:	4907      	ldr	r1, [pc, #28]	; (d7c7c <_Z22__fetch_global_Serial1v+0x48>)
   d7c5e:	4805      	ldr	r0, [pc, #20]	; (d7c74 <_Z22__fetch_global_Serial1v+0x40>)
   d7c60:	f000 fc86 	bl	d8570 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7c64:	4803      	ldr	r0, [pc, #12]	; (d7c74 <_Z22__fetch_global_Serial1v+0x40>)
   d7c66:	bd38      	pop	{r3, r4, r5, pc}
   d7c68:	2003e4b8 	.word	0x2003e4b8
   d7c6c:	2003e4bc 	.word	0x2003e4bc
   d7c70:	2003e434 	.word	0x2003e434
   d7c74:	2003e420 	.word	0x2003e420
   d7c78:	2003e308 	.word	0x2003e308
   d7c7c:	000d7b69 	.word	0x000d7b69

000d7c80 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7c80:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d7c82:	6883      	ldr	r3, [r0, #8]
   d7c84:	4604      	mov	r4, r0
   d7c86:	b90b      	cbnz	r3, d7c8c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d7c88:	f000 fc93 	bl	d85b2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7c8c:	68c3      	ldr	r3, [r0, #12]
   d7c8e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7c90:	68a3      	ldr	r3, [r4, #8]
   d7c92:	b11b      	cbz	r3, d7c9c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7c94:	2203      	movs	r2, #3
   d7c96:	4621      	mov	r1, r4
   d7c98:	4620      	mov	r0, r4
   d7c9a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7c9c:	4620      	mov	r0, r4
   d7c9e:	2110      	movs	r1, #16
}
   d7ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d7ca4:	f000 bc72 	b.w	d858c <_ZdlPvj>

000d7ca8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d7ca8:	4770      	bx	lr

000d7caa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7cac:	4606      	mov	r6, r0
   d7cae:	4615      	mov	r5, r2
   d7cb0:	460c      	mov	r4, r1
   d7cb2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7cb4:	42bc      	cmp	r4, r7
   d7cb6:	d006      	beq.n	d7cc6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7cb8:	6833      	ldr	r3, [r6, #0]
   d7cba:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7cbe:	689b      	ldr	r3, [r3, #8]
   d7cc0:	4630      	mov	r0, r6
   d7cc2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7cc4:	e7f6      	b.n	d7cb4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d7cc6:	4628      	mov	r0, r5
   d7cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cca <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d7cca:	2200      	movs	r2, #0
   d7ccc:	7c00      	ldrb	r0, [r0, #16]
   d7cce:	f7fc bf1d 	b.w	d4b0c <HAL_I2C_Write_Data>

000d7cd2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d7cd2:	2100      	movs	r1, #0
   d7cd4:	7c00      	ldrb	r0, [r0, #16]
   d7cd6:	f7fc bf21 	b.w	d4b1c <HAL_I2C_Available_Data>

000d7cda <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d7cda:	2100      	movs	r1, #0
   d7cdc:	7c00      	ldrb	r0, [r0, #16]
   d7cde:	f7fc bf25 	b.w	d4b2c <HAL_I2C_Read_Data>

000d7ce2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d7ce2:	2100      	movs	r1, #0
   d7ce4:	7c00      	ldrb	r0, [r0, #16]
   d7ce6:	f7fc bf29 	b.w	d4b3c <HAL_I2C_Peek_Data>

000d7cea <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d7cea:	2100      	movs	r1, #0
   d7cec:	7c00      	ldrb	r0, [r0, #16]
   d7cee:	f7fc bf2d 	b.w	d4b4c <HAL_I2C_Flush_Data>

000d7cf2 <_ZN7TwoWireD0Ev>:
   d7cf2:	b510      	push	{r4, lr}
   d7cf4:	2114      	movs	r1, #20
   d7cf6:	4604      	mov	r4, r0
   d7cf8:	f000 fc48 	bl	d858c <_ZdlPvj>
   d7cfc:	4620      	mov	r0, r4
   d7cfe:	bd10      	pop	{r4, pc}

000d7d00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7d00:	b510      	push	{r4, lr}
   d7d02:	4604      	mov	r4, r0
   d7d04:	2300      	movs	r3, #0
   d7d06:	6063      	str	r3, [r4, #4]
   d7d08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d0c:	60a3      	str	r3, [r4, #8]
   d7d0e:	4b04      	ldr	r3, [pc, #16]	; (d7d20 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d7d10:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d7d12:	4608      	mov	r0, r1
   d7d14:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d7d16:	4611      	mov	r1, r2
   d7d18:	f7fc ff28 	bl	d4b6c <HAL_I2C_Init>
}
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	bd10      	pop	{r4, pc}
   d7d20:	000d99c4 	.word	0x000d99c4

000d7d24 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d7d24:	2100      	movs	r1, #0
   d7d26:	7c00      	ldrb	r0, [r0, #16]
   d7d28:	f7fc bf18 	b.w	d4b5c <HAL_I2C_Is_Enabled>

000d7d2c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7d2c:	2200      	movs	r2, #0
   d7d2e:	4611      	mov	r1, r2
   d7d30:	6840      	ldr	r0, [r0, #4]
   d7d32:	f7fd b80f 	b.w	d4d54 <network_listening>

000d7d36 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7d36:	2200      	movs	r2, #0
   d7d38:	4611      	mov	r1, r2
   d7d3a:	6840      	ldr	r0, [r0, #4]
   d7d3c:	f7fd b81a 	b.w	d4d74 <network_get_listen_timeout>

000d7d40 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7d40:	2200      	movs	r2, #0
   d7d42:	6840      	ldr	r0, [r0, #4]
   d7d44:	f7fd b80e 	b.w	d4d64 <network_set_listen_timeout>

000d7d48 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7d48:	2200      	movs	r2, #0
   d7d4a:	f081 0101 	eor.w	r1, r1, #1
   d7d4e:	6840      	ldr	r0, [r0, #4]
   d7d50:	f7fc bff8 	b.w	d4d44 <network_listen>

000d7d54 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d7d54:	2300      	movs	r3, #0
   d7d56:	461a      	mov	r2, r3
   d7d58:	2101      	movs	r1, #1
   d7d5a:	6840      	ldr	r0, [r0, #4]
   d7d5c:	f7fc bfea 	b.w	d4d34 <network_off>

000d7d60 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d7d60:	2300      	movs	r3, #0
   d7d62:	461a      	mov	r2, r3
   d7d64:	4619      	mov	r1, r3
   d7d66:	6840      	ldr	r0, [r0, #4]
   d7d68:	f7fc bfdc 	b.w	d4d24 <network_on>

000d7d6c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7d6c:	2200      	movs	r2, #0
   d7d6e:	4611      	mov	r1, r2
   d7d70:	6840      	ldr	r0, [r0, #4]
   d7d72:	f7fc bfcf 	b.w	d4d14 <network_ready>

000d7d76 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7d76:	2200      	movs	r2, #0
   d7d78:	4611      	mov	r1, r2
   d7d7a:	6840      	ldr	r0, [r0, #4]
   d7d7c:	f7fc bfba 	b.w	d4cf4 <network_connecting>

000d7d80 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7d80:	2200      	movs	r2, #0
   d7d82:	2102      	movs	r1, #2
   d7d84:	6840      	ldr	r0, [r0, #4]
   d7d86:	f7fc bfbd 	b.w	d4d04 <network_disconnect>

000d7d8a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7d8a:	2300      	movs	r3, #0
   d7d8c:	461a      	mov	r2, r3
   d7d8e:	6840      	ldr	r0, [r0, #4]
   d7d90:	f7fc bfa8 	b.w	d4ce4 <network_connect>

000d7d94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d7d94:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7d96:	4605      	mov	r5, r0
   d7d98:	b188      	cbz	r0, d7dbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7d9a:	6804      	ldr	r4, [r0, #0]
   d7d9c:	b14c      	cbz	r4, d7db2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d7d9e:	68a3      	ldr	r3, [r4, #8]
   d7da0:	b11b      	cbz	r3, d7daa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7da2:	2203      	movs	r2, #3
   d7da4:	4621      	mov	r1, r4
   d7da6:	4620      	mov	r0, r4
   d7da8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7daa:	2110      	movs	r1, #16
   d7dac:	4620      	mov	r0, r4
   d7dae:	f000 fbed 	bl	d858c <_ZdlPvj>
   d7db2:	4628      	mov	r0, r5
   d7db4:	2114      	movs	r1, #20
      }
   d7db6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7dba:	f000 bbe7 	b.w	d858c <_ZdlPvj>
   d7dbe:	bd38      	pop	{r3, r4, r5, pc}

000d7dc0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d7dc0:	b110      	cbz	r0, d7dc8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d7dc2:	6803      	ldr	r3, [r0, #0]
   d7dc4:	685b      	ldr	r3, [r3, #4]
   d7dc6:	4718      	bx	r3
   d7dc8:	4770      	bx	lr

000d7dca <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d7dca:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7dcc:	6803      	ldr	r3, [r0, #0]
   d7dce:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d7dd0:	b1bb      	cbz	r3, d7e02 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d7dd2:	6858      	ldr	r0, [r3, #4]
   d7dd4:	f7fc fe0a 	bl	d49ec <os_thread_is_current>
   d7dd8:	b978      	cbnz	r0, d7dfa <_ZN6ThreadD1Ev+0x30>
   d7dda:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d7ddc:	7c5a      	ldrb	r2, [r3, #17]
   d7dde:	b912      	cbnz	r2, d7de6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d7de0:	6858      	ldr	r0, [r3, #4]
   d7de2:	f7fc fe0b 	bl	d49fc <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d7de6:	6823      	ldr	r3, [r4, #0]
   d7de8:	6858      	ldr	r0, [r3, #4]
   d7dea:	f7fc fe0f 	bl	d4a0c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7dee:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7df0:	2300      	movs	r3, #0
   d7df2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d7df4:	b128      	cbz	r0, d7e02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d7df6:	f7ff ffcd 	bl	d7d94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7dfa:	6820      	ldr	r0, [r4, #0]
   d7dfc:	b108      	cbz	r0, d7e02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d7dfe:	f7ff ffc9 	bl	d7d94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d7e02:	4620      	mov	r0, r4
   d7e04:	bd10      	pop	{r4, pc}

000d7e06 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d7e06:	b538      	push	{r3, r4, r5, lr}
   d7e08:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e0a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d7e0e:	b108      	cbz	r0, d7e14 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d7e10:	f7fc f947 	bl	d40a2 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7e14:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d7e18:	b108      	cbz	r0, d7e1e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d7e1a:	f7fc fe07 	bl	d4a2c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e1e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d7e22:	b135      	cbz	r5, d7e32 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d7e24:	4628      	mov	r0, r5
   d7e26:	f7ff ffd0 	bl	d7dca <_ZN6ThreadD1Ev>
   d7e2a:	2104      	movs	r1, #4
   d7e2c:	4628      	mov	r0, r5
   d7e2e:	f000 fbad 	bl	d858c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d7e32:	6820      	ldr	r0, [r4, #0]
   d7e34:	b108      	cbz	r0, d7e3a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d7e36:	f7ff ffc3 	bl	d7dc0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7e40 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d7e40:	b510      	push	{r4, lr}
   d7e42:	4b04      	ldr	r3, [pc, #16]	; (d7e54 <_ZN5spark9MeshClassD1Ev+0x14>)
   d7e44:	4604      	mov	r4, r0
   d7e46:	f840 3b08 	str.w	r3, [r0], #8
   d7e4a:	f7ff ffdc 	bl	d7e06 <_ZN5spark11MeshPublishD1Ev>
   d7e4e:	4620      	mov	r0, r4
   d7e50:	bd10      	pop	{r4, pc}
   d7e52:	bf00      	nop
   d7e54:	000d99ec 	.word	0x000d99ec

000d7e58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7e58:	b538      	push	{r3, r4, r5, lr}
   d7e5a:	4c0e      	ldr	r4, [pc, #56]	; (d7e94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d7e5c:	4b0e      	ldr	r3, [pc, #56]	; (d7e98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d7e5e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d7e60:	2500      	movs	r5, #0
   d7e62:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7e64:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7e68:	6063      	str	r3, [r4, #4]
   d7e6a:	60a5      	str	r5, [r4, #8]
   d7e6c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7e70:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7e74:	f7fc fdd2 	bl	d4a1c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7e78:	4b08      	ldr	r3, [pc, #32]	; (d7e9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d7e7a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7e7e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d7e82:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d7e84:	4620      	mov	r0, r4
   d7e86:	4a06      	ldr	r2, [pc, #24]	; (d7ea0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d7e88:	4906      	ldr	r1, [pc, #24]	; (d7ea4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d7e8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7e8e:	f000 bb6f 	b.w	d8570 <__aeabi_atexit>
   d7e92:	bf00      	nop
   d7e94:	2003e540 	.word	0x2003e540
   d7e98:	000d9a54 	.word	0x000d9a54
   d7e9c:	000d99ec 	.word	0x000d99ec
   d7ea0:	2003e308 	.word	0x2003e308
   d7ea4:	000d7e41 	.word	0x000d7e41

000d7ea8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7ea8:	2200      	movs	r2, #0
   d7eaa:	4611      	mov	r1, r2
   d7eac:	6840      	ldr	r0, [r0, #4]
   d7eae:	f7fc bf31 	b.w	d4d14 <network_ready>

000d7eb2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7eb2:	2200      	movs	r2, #0
   d7eb4:	4611      	mov	r1, r2
   d7eb6:	6840      	ldr	r0, [r0, #4]
   d7eb8:	f7fc bf4c 	b.w	d4d54 <network_listening>

000d7ebc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d7ebc:	2200      	movs	r2, #0
   d7ebe:	4611      	mov	r1, r2
   d7ec0:	6840      	ldr	r0, [r0, #4]
   d7ec2:	f7fc bf57 	b.w	d4d74 <network_get_listen_timeout>

000d7ec6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d7ec6:	2200      	movs	r2, #0
   d7ec8:	6840      	ldr	r0, [r0, #4]
   d7eca:	f7fc bf4b 	b.w	d4d64 <network_set_listen_timeout>

000d7ece <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d7ece:	2200      	movs	r2, #0
   d7ed0:	f081 0101 	eor.w	r1, r1, #1
   d7ed4:	6840      	ldr	r0, [r0, #4]
   d7ed6:	f7fc bf35 	b.w	d4d44 <network_listen>

000d7eda <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d7eda:	2300      	movs	r3, #0
   d7edc:	461a      	mov	r2, r3
   d7ede:	4619      	mov	r1, r3
   d7ee0:	6840      	ldr	r0, [r0, #4]
   d7ee2:	f7fc bf27 	b.w	d4d34 <network_off>

000d7ee6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d7ee6:	2300      	movs	r3, #0
   d7ee8:	461a      	mov	r2, r3
   d7eea:	4619      	mov	r1, r3
   d7eec:	6840      	ldr	r0, [r0, #4]
   d7eee:	f7fc bf19 	b.w	d4d24 <network_on>

000d7ef2 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d7ef2:	2200      	movs	r2, #0
   d7ef4:	4611      	mov	r1, r2
   d7ef6:	6840      	ldr	r0, [r0, #4]
   d7ef8:	f7fc befc 	b.w	d4cf4 <network_connecting>

000d7efc <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7efc:	2200      	movs	r2, #0
   d7efe:	2102      	movs	r1, #2
   d7f00:	6840      	ldr	r0, [r0, #4]
   d7f02:	f7fc beff 	b.w	d4d04 <network_disconnect>

000d7f06 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d7f06:	2300      	movs	r3, #0
   d7f08:	461a      	mov	r2, r3
   d7f0a:	6840      	ldr	r0, [r0, #4]
   d7f0c:	f7fc beea 	b.w	d4ce4 <network_connect>

000d7f10 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7f10:	4b02      	ldr	r3, [pc, #8]	; (d7f1c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7f12:	2204      	movs	r2, #4
   d7f14:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7f16:	4a02      	ldr	r2, [pc, #8]	; (d7f20 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7f18:	601a      	str	r2, [r3, #0]
   d7f1a:	4770      	bx	lr
   d7f1c:	2003e714 	.word	0x2003e714
   d7f20:	000d9a20 	.word	0x000d9a20

000d7f24 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7f24:	2300      	movs	r3, #0
   d7f26:	461a      	mov	r2, r3
   d7f28:	6840      	ldr	r0, [r0, #4]
   d7f2a:	f7fc bedb 	b.w	d4ce4 <network_connect>

000d7f2e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7f2e:	2200      	movs	r2, #0
   d7f30:	2102      	movs	r1, #2
   d7f32:	6840      	ldr	r0, [r0, #4]
   d7f34:	f7fc bee6 	b.w	d4d04 <network_disconnect>

000d7f38 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7f38:	2200      	movs	r2, #0
   d7f3a:	4611      	mov	r1, r2
   d7f3c:	6840      	ldr	r0, [r0, #4]
   d7f3e:	f7fc bed9 	b.w	d4cf4 <network_connecting>

000d7f42 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7f42:	2200      	movs	r2, #0
   d7f44:	4611      	mov	r1, r2
   d7f46:	6840      	ldr	r0, [r0, #4]
   d7f48:	f7fc bee4 	b.w	d4d14 <network_ready>

000d7f4c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7f4c:	2300      	movs	r3, #0
   d7f4e:	461a      	mov	r2, r3
   d7f50:	4619      	mov	r1, r3
   d7f52:	6840      	ldr	r0, [r0, #4]
   d7f54:	f7fc bee6 	b.w	d4d24 <network_on>

000d7f58 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7f58:	2300      	movs	r3, #0
   d7f5a:	461a      	mov	r2, r3
   d7f5c:	4619      	mov	r1, r3
   d7f5e:	6840      	ldr	r0, [r0, #4]
   d7f60:	f7fc bee8 	b.w	d4d34 <network_off>

000d7f64 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7f64:	2200      	movs	r2, #0
   d7f66:	f081 0101 	eor.w	r1, r1, #1
   d7f6a:	6840      	ldr	r0, [r0, #4]
   d7f6c:	f7fc beea 	b.w	d4d44 <network_listen>

000d7f70 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7f70:	2200      	movs	r2, #0
   d7f72:	6840      	ldr	r0, [r0, #4]
   d7f74:	f7fc bef6 	b.w	d4d64 <network_set_listen_timeout>

000d7f78 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7f78:	2200      	movs	r2, #0
   d7f7a:	4611      	mov	r1, r2
   d7f7c:	6840      	ldr	r0, [r0, #4]
   d7f7e:	f7fc bef9 	b.w	d4d74 <network_get_listen_timeout>

000d7f82 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7f82:	2200      	movs	r2, #0
   d7f84:	4611      	mov	r1, r2
   d7f86:	6840      	ldr	r0, [r0, #4]
   d7f88:	f7fc bee4 	b.w	d4d54 <network_listening>

000d7f8c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7f90:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d7f92:	b095      	sub	sp, #84	; 0x54
   d7f94:	4616      	mov	r6, r2
   d7f96:	460d      	mov	r5, r1
   d7f98:	4607      	mov	r7, r0
    IPAddress addr;
   d7f9a:	f7ff fd21 	bl	d79e0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d7f9e:	4621      	mov	r1, r4
   d7fa0:	2220      	movs	r2, #32
   d7fa2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7fa4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7fa6:	f001 f884 	bl	d90b2 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7faa:	2340      	movs	r3, #64	; 0x40
   d7fac:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7fae:	4621      	mov	r1, r4
   d7fb0:	466b      	mov	r3, sp
   d7fb2:	aa0c      	add	r2, sp, #48	; 0x30
   d7fb4:	4630      	mov	r0, r6
   d7fb6:	f7fc fc2f 	bl	d4818 <netdb_getaddrinfo>
    if (!r) {
   d7fba:	4604      	mov	r4, r0
   d7fbc:	2800      	cmp	r0, #0
   d7fbe:	d144      	bne.n	d804a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fc0:	4602      	mov	r2, r0
   d7fc2:	2101      	movs	r1, #1
   d7fc4:	6868      	ldr	r0, [r5, #4]
   d7fc6:	f7fc fea5 	bl	d4d14 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fca:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7fcc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fce:	4622      	mov	r2, r4
   d7fd0:	6868      	ldr	r0, [r5, #4]
   d7fd2:	f7fc fe9f 	bl	d4d14 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fd6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7fd8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7fda:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7fdc:	2e00      	cmp	r6, #0
   d7fde:	d034      	beq.n	d804a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d7fe0:	2900      	cmp	r1, #0
   d7fe2:	d132      	bne.n	d804a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7fe4:	6873      	ldr	r3, [r6, #4]
   d7fe6:	2b02      	cmp	r3, #2
   d7fe8:	d002      	beq.n	d7ff0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7fea:	2b0a      	cmp	r3, #10
   d7fec:	d009      	beq.n	d8002 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d7fee:	e02a      	b.n	d8046 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d7ff0:	f1b8 0f00 	cmp.w	r8, #0
   d7ff4:	d027      	beq.n	d8046 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7ff6:	6971      	ldr	r1, [r6, #20]
   d7ff8:	4638      	mov	r0, r7
   d7ffa:	3104      	adds	r1, #4
   d7ffc:	f7ff fd1d 	bl	d7a3a <_ZN9IPAddressaSEPKh>
   d8000:	e020      	b.n	d8044 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8002:	f1b9 0f00 	cmp.w	r9, #0
   d8006:	d01e      	beq.n	d8046 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d8008:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d800a:	2211      	movs	r2, #17
   d800c:	a801      	add	r0, sp, #4
   d800e:	f001 f850 	bl	d90b2 <memset>
                    a.v = 6;
   d8012:	2306      	movs	r3, #6
   d8014:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8018:	ad01      	add	r5, sp, #4
   d801a:	f104 0308 	add.w	r3, r4, #8
   d801e:	3418      	adds	r4, #24
   d8020:	6818      	ldr	r0, [r3, #0]
   d8022:	6859      	ldr	r1, [r3, #4]
   d8024:	462a      	mov	r2, r5
   d8026:	c203      	stmia	r2!, {r0, r1}
   d8028:	3308      	adds	r3, #8
   d802a:	42a3      	cmp	r3, r4
   d802c:	4615      	mov	r5, r2
   d802e:	d1f7      	bne.n	d8020 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d8030:	a901      	add	r1, sp, #4
   d8032:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d8034:	ad07      	add	r5, sp, #28
   d8036:	f7ff fce1 	bl	d79fc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d803a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d803c:	1d3c      	adds	r4, r7, #4
   d803e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8040:	682b      	ldr	r3, [r5, #0]
   d8042:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d8044:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8046:	69f6      	ldr	r6, [r6, #28]
   d8048:	e7c8      	b.n	d7fdc <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d804a:	9800      	ldr	r0, [sp, #0]
   d804c:	f7fc fbdc 	bl	d4808 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8050:	4638      	mov	r0, r7
   d8052:	b015      	add	sp, #84	; 0x54
   d8054:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d8058 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d8058:	4b02      	ldr	r3, [pc, #8]	; (d8064 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d805a:	4a03      	ldr	r2, [pc, #12]	; (d8068 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d805c:	601a      	str	r2, [r3, #0]
   d805e:	2200      	movs	r2, #0
   d8060:	605a      	str	r2, [r3, #4]
   d8062:	4770      	bx	lr
   d8064:	2003e71c 	.word	0x2003e71c
   d8068:	000d9a54 	.word	0x000d9a54

000d806c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d806c:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d8070:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d8072:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d8076:	2901      	cmp	r1, #1
   d8078:	4610      	mov	r0, r2
   d807a:	d104      	bne.n	d8086 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d807c:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d8080:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d8084:	e004      	b.n	d8090 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d8086:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d8088:	bf04      	itt	eq
   d808a:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d808e:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d8090:	3b01      	subs	r3, #1
   d8092:	f102 0210 	add.w	r2, r2, #16
   d8096:	d1ec      	bne.n	d8072 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d8098:	4770      	bx	lr

000d809a <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d809a:	b40e      	push	{r1, r2, r3}
   d809c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d80a0:	b087      	sub	sp, #28
   d80a2:	af00      	add	r7, sp, #0
   d80a4:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d80a8:	4605      	mov	r5, r0
   d80aa:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d80ae:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d80b0:	4623      	mov	r3, r4
   d80b2:	4632      	mov	r2, r6
   d80b4:	2110      	movs	r1, #16
   d80b6:	f107 0008 	add.w	r0, r7, #8
   d80ba:	f7fc feb3 	bl	d4e24 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d80be:	280f      	cmp	r0, #15
   d80c0:	d916      	bls.n	d80f0 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d80c2:	f100 0308 	add.w	r3, r0, #8
   d80c6:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d80ca:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d80cc:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d80d0:	4632      	mov	r2, r6
   d80d2:	1c41      	adds	r1, r0, #1
   d80d4:	4623      	mov	r3, r4
   d80d6:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d80d8:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d80da:	f7fc fea3 	bl	d4e24 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d80de:	1e02      	subs	r2, r0, #0
   d80e0:	dd04      	ble.n	d80ec <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d80e2:	682b      	ldr	r3, [r5, #0]
   d80e4:	4669      	mov	r1, sp
   d80e6:	689b      	ldr	r3, [r3, #8]
   d80e8:	4628      	mov	r0, r5
   d80ea:	4798      	blx	r3
   d80ec:	46c5      	mov	sp, r8
   d80ee:	e007      	b.n	d8100 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d80f0:	b130      	cbz	r0, d8100 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d80f2:	682b      	ldr	r3, [r5, #0]
   d80f4:	4602      	mov	r2, r0
   d80f6:	689b      	ldr	r3, [r3, #8]
   d80f8:	f107 0108 	add.w	r1, r7, #8
   d80fc:	4628      	mov	r0, r5
   d80fe:	4798      	blx	r3
    }
}
   d8100:	371c      	adds	r7, #28
   d8102:	46bd      	mov	sp, r7
   d8104:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8108:	b003      	add	sp, #12
   d810a:	4770      	bx	lr

000d810c <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d810c:	b513      	push	{r0, r1, r4, lr}
   d810e:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d8110:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d8112:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d8116:	6894      	ldr	r4, [r2, #8]
   d8118:	4619      	mov	r1, r3
   d811a:	2201      	movs	r2, #1
   d811c:	47a0      	blx	r4
}
   d811e:	b002      	add	sp, #8
   d8120:	bd10      	pop	{r4, pc}

000d8122 <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d8122:	6883      	ldr	r3, [r0, #8]
   d8124:	b1fb      	cbz	r3, d8166 <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d8126:	781a      	ldrb	r2, [r3, #0]
   d8128:	2a03      	cmp	r2, #3
   d812a:	d81a      	bhi.n	d8162 <_ZNK5spark9JSONValue4typeEv+0x40>
   d812c:	e8df f002 	tbb	[pc, r2]
   d8130:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d8134:	2005      	movs	r0, #5
   d8136:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d8138:	6802      	ldr	r2, [r0, #0]
   d813a:	685b      	ldr	r3, [r3, #4]
   d813c:	6852      	ldr	r2, [r2, #4]
   d813e:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d8140:	282d      	cmp	r0, #45	; 0x2d
   d8142:	d014      	beq.n	d816e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d8144:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d8148:	2b09      	cmp	r3, #9
   d814a:	d910      	bls.n	d816e <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d814c:	2874      	cmp	r0, #116	; 0x74
   d814e:	d010      	beq.n	d8172 <_ZNK5spark9JSONValue4typeEv+0x50>
   d8150:	2866      	cmp	r0, #102	; 0x66
   d8152:	d00e      	beq.n	d8172 <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8154:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d8158:	4258      	negs	r0, r3
   d815a:	4158      	adcs	r0, r3
   d815c:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d815e:	2006      	movs	r0, #6
   d8160:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d8162:	2000      	movs	r0, #0
   d8164:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d8166:	4618      	mov	r0, r3
   d8168:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d816a:	2004      	movs	r0, #4
   d816c:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d816e:	2003      	movs	r0, #3
   d8170:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d8172:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d8174:	4770      	bx	lr

000d8176 <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d8176:	b510      	push	{r4, lr}
   d8178:	4604      	mov	r4, r0
    switch (type()) {
   d817a:	f7ff ffd2 	bl	d8122 <_ZNK5spark9JSONValue4typeEv>
   d817e:	2802      	cmp	r0, #2
   d8180:	d00d      	beq.n	d819e <_ZNK5spark9JSONValue5toIntEv+0x28>
   d8182:	d316      	bcc.n	d81b2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d8184:	2804      	cmp	r0, #4
   d8186:	d814      	bhi.n	d81b2 <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d8188:	6822      	ldr	r2, [r4, #0]
   d818a:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d818c:	6850      	ldr	r0, [r2, #4]
   d818e:	685b      	ldr	r3, [r3, #4]
   d8190:	220a      	movs	r2, #10
   d8192:	2100      	movs	r1, #0
   d8194:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d8196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d819a:	f001 b8bb 	b.w	d9314 <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d819e:	6822      	ldr	r2, [r4, #0]
   d81a0:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d81a2:	6852      	ldr	r2, [r2, #4]
   d81a4:	685b      	ldr	r3, [r3, #4]
   d81a6:	5cd0      	ldrb	r0, [r2, r3]
   d81a8:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d81ac:	4258      	negs	r0, r3
   d81ae:	4158      	adcs	r0, r3
   d81b0:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d81b2:	2000      	movs	r0, #0
    }
}
   d81b4:	bd10      	pop	{r4, pc}

000d81b6 <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d81b6:	b510      	push	{r4, lr}
    if (!n_) {
   d81b8:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d81ba:	4604      	mov	r4, r0
    if (!n_) {
   d81bc:	b15b      	cbz	r3, d81d6 <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d81be:	6880      	ldr	r0, [r0, #8]
   d81c0:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d81c2:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d81c4:	3010      	adds	r0, #16
   d81c6:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d81c8:	6120      	str	r0, [r4, #16]
    --n_;
   d81ca:	6163      	str	r3, [r4, #20]
    if (n_) {
   d81cc:	b12b      	cbz	r3, d81da <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d81ce:	f7ff ff4d 	bl	d806c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d81d2:	60a0      	str	r0, [r4, #8]
   d81d4:	e001      	b.n	d81da <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d81d6:	4618      	mov	r0, r3
   d81d8:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d81da:	2001      	movs	r0, #1
}
   d81dc:	bd10      	pop	{r4, pc}

000d81de <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d81de:	b510      	push	{r4, lr}
    write('}');
   d81e0:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d81e2:	4604      	mov	r4, r0
    write('}');
   d81e4:	f7ff ff92 	bl	d810c <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d81e8:	2301      	movs	r3, #1
   d81ea:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d81ec:	4620      	mov	r0, r4
   d81ee:	bd10      	pop	{r4, pc}

000d81f0 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d81f0:	b508      	push	{r3, lr}
    switch (state_) {
   d81f2:	7903      	ldrb	r3, [r0, #4]
   d81f4:	2b01      	cmp	r3, #1
   d81f6:	d002      	beq.n	d81fe <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d81f8:	2b02      	cmp	r3, #2
   d81fa:	d002      	beq.n	d8202 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d81fc:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d81fe:	212c      	movs	r1, #44	; 0x2c
   d8200:	e000      	b.n	d8204 <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d8202:	213a      	movs	r1, #58	; 0x3a
   d8204:	f7ff ff82 	bl	d810c <_ZN5spark10JSONWriter5writeEc>
   d8208:	bd08      	pop	{r3, pc}

000d820a <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d820a:	b510      	push	{r4, lr}
   d820c:	4604      	mov	r4, r0
    writeSeparator();
   d820e:	f7ff ffef 	bl	d81f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d8212:	4620      	mov	r0, r4
   d8214:	217b      	movs	r1, #123	; 0x7b
   d8216:	f7ff ff79 	bl	d810c <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d821a:	2300      	movs	r3, #0
   d821c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d821e:	4620      	mov	r0, r4
   d8220:	bd10      	pop	{r4, pc}
	...

000d8224 <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d8224:	b538      	push	{r3, r4, r5, lr}
   d8226:	4604      	mov	r4, r0
   d8228:	460d      	mov	r5, r1
    writeSeparator();
   d822a:	f7ff ffe1 	bl	d81f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d822e:	6823      	ldr	r3, [r4, #0]
   d8230:	4904      	ldr	r1, [pc, #16]	; (d8244 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d8232:	68db      	ldr	r3, [r3, #12]
   d8234:	4620      	mov	r0, r4
   d8236:	462a      	mov	r2, r5
   d8238:	4798      	blx	r3
    state_ = NEXT;
   d823a:	2301      	movs	r3, #1
   d823c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d823e:	4620      	mov	r0, r4
   d8240:	bd38      	pop	{r3, r4, r5, pc}
   d8242:	bf00      	nop
   d8244:	000d985a 	.word	0x000d985a

000d8248 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d8248:	b538      	push	{r3, r4, r5, lr}
   d824a:	4604      	mov	r4, r0
   d824c:	460d      	mov	r5, r1
    writeSeparator();
   d824e:	f7ff ffcf 	bl	d81f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d8252:	6823      	ldr	r3, [r4, #0]
   d8254:	4904      	ldr	r1, [pc, #16]	; (d8268 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d8256:	68db      	ldr	r3, [r3, #12]
   d8258:	4620      	mov	r0, r4
   d825a:	462a      	mov	r2, r5
   d825c:	4798      	blx	r3
    state_ = NEXT;
   d825e:	2301      	movs	r3, #1
   d8260:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d8262:	4620      	mov	r0, r4
   d8264:	bd38      	pop	{r3, r4, r5, pc}
   d8266:	bf00      	nop
   d8268:	000d9495 	.word	0x000d9495

000d826c <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d826e:	460d      	mov	r5, r1
   d8270:	4617      	mov	r7, r2
    write('"');
   d8272:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d8274:	4604      	mov	r4, r0
   d8276:	442f      	add	r7, r5
    write('"');
   d8278:	f7ff ff48 	bl	d810c <_ZN5spark10JSONWriter5writeEc>
   d827c:	462a      	mov	r2, r5
    const char* const end = str + size;
   d827e:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d8280:	42ba      	cmp	r2, r7
   d8282:	d038      	beq.n	d82f6 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d8284:	4616      	mov	r6, r2
   d8286:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d828a:	2d22      	cmp	r5, #34	; 0x22
   d828c:	d003      	beq.n	d8296 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d828e:	2d5c      	cmp	r5, #92	; 0x5c
   d8290:	d001      	beq.n	d8296 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d8292:	2d1f      	cmp	r5, #31
   d8294:	d82d      	bhi.n	d82f2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d8296:	6823      	ldr	r3, [r4, #0]
   d8298:	1a52      	subs	r2, r2, r1
   d829a:	689b      	ldr	r3, [r3, #8]
   d829c:	4620      	mov	r0, r4
   d829e:	4798      	blx	r3
            write('\\');
   d82a0:	215c      	movs	r1, #92	; 0x5c
   d82a2:	4620      	mov	r0, r4
   d82a4:	f7ff ff32 	bl	d810c <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d82a8:	2d0c      	cmp	r5, #12
   d82aa:	d019      	beq.n	d82e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d82ac:	d807      	bhi.n	d82be <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d82ae:	2d09      	cmp	r5, #9
   d82b0:	d00f      	beq.n	d82d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d82b2:	2d0a      	cmp	r5, #10
   d82b4:	d012      	beq.n	d82dc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d82b6:	2d08      	cmp	r5, #8
   d82b8:	d114      	bne.n	d82e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d82ba:	2162      	movs	r1, #98	; 0x62
   d82bc:	e00a      	b.n	d82d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d82be:	2d22      	cmp	r5, #34	; 0x22
   d82c0:	d005      	beq.n	d82ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d82c2:	2d5c      	cmp	r5, #92	; 0x5c
   d82c4:	d003      	beq.n	d82ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d82c6:	2d0d      	cmp	r5, #13
   d82c8:	d10c      	bne.n	d82e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d82ca:	2172      	movs	r1, #114	; 0x72
   d82cc:	e002      	b.n	d82d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d82ce:	4629      	mov	r1, r5
   d82d0:	e000      	b.n	d82d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d82d2:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d82d4:	4620      	mov	r0, r4
   d82d6:	f7ff ff19 	bl	d810c <_ZN5spark10JSONWriter5writeEc>
                break;
   d82da:	e009      	b.n	d82f0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d82dc:	216e      	movs	r1, #110	; 0x6e
   d82de:	e7f9      	b.n	d82d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d82e0:	2166      	movs	r1, #102	; 0x66
   d82e2:	e7f7      	b.n	d82d4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d82e4:	6823      	ldr	r3, [r4, #0]
   d82e6:	490a      	ldr	r1, [pc, #40]	; (d8310 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d82e8:	68db      	ldr	r3, [r3, #12]
   d82ea:	462a      	mov	r2, r5
   d82ec:	4620      	mov	r0, r4
   d82ee:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d82f0:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d82f2:	4632      	mov	r2, r6
   d82f4:	e7c4      	b.n	d8280 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d82f6:	4291      	cmp	r1, r2
   d82f8:	d004      	beq.n	d8304 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d82fa:	6823      	ldr	r3, [r4, #0]
   d82fc:	1a52      	subs	r2, r2, r1
   d82fe:	689d      	ldr	r5, [r3, #8]
   d8300:	4620      	mov	r0, r4
   d8302:	47a8      	blx	r5
    }
    write('"');
   d8304:	2122      	movs	r1, #34	; 0x22
   d8306:	4620      	mov	r0, r4
   d8308:	f7ff ff00 	bl	d810c <_ZN5spark10JSONWriter5writeEc>
   d830c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d830e:	bf00      	nop
   d8310:	000d9a9d 	.word	0x000d9a9d

000d8314 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d8314:	b570      	push	{r4, r5, r6, lr}
   d8316:	4604      	mov	r4, r0
   d8318:	460d      	mov	r5, r1
   d831a:	4616      	mov	r6, r2
    writeSeparator();
   d831c:	f7ff ff68 	bl	d81f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d8320:	4620      	mov	r0, r4
   d8322:	4632      	mov	r2, r6
   d8324:	4629      	mov	r1, r5
   d8326:	f7ff ffa1 	bl	d826c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d832a:	2302      	movs	r3, #2
   d832c:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d832e:	4620      	mov	r0, r4
   d8330:	bd70      	pop	{r4, r5, r6, pc}

000d8332 <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d8332:	b570      	push	{r4, r5, r6, lr}
   d8334:	4604      	mov	r4, r0
   d8336:	460d      	mov	r5, r1
   d8338:	4616      	mov	r6, r2
    writeSeparator();
   d833a:	f7ff ff59 	bl	d81f0 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d833e:	4620      	mov	r0, r4
   d8340:	4632      	mov	r2, r6
   d8342:	4629      	mov	r1, r5
   d8344:	f7ff ff92 	bl	d826c <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d8348:	2301      	movs	r3, #1
   d834a:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d834c:	4620      	mov	r0, r4
   d834e:	bd70      	pop	{r4, r5, r6, pc}

000d8350 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d8350:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d8352:	2300      	movs	r3, #0
   d8354:	4604      	mov	r4, r0
   d8356:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d8358:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d835a:	4810      	ldr	r0, [pc, #64]	; (d839c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d835c:	60a0      	str	r0, [r4, #8]
   d835e:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d8360:	b1d1      	cbz	r1, d8398 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d8362:	780b      	ldrb	r3, [r1, #0]
   d8364:	2b03      	cmp	r3, #3
   d8366:	d006      	beq.n	d8376 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d8368:	b9b3      	cbnz	r3, d8398 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d836a:	6813      	ldr	r3, [r2, #0]
   d836c:	6858      	ldr	r0, [r3, #4]
   d836e:	684b      	ldr	r3, [r1, #4]
   d8370:	5cc3      	ldrb	r3, [r0, r3]
   d8372:	2b6e      	cmp	r3, #110	; 0x6e
   d8374:	d008      	beq.n	d8388 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d8376:	6813      	ldr	r3, [r2, #0]
   d8378:	6858      	ldr	r0, [r3, #4]
   d837a:	684b      	ldr	r3, [r1, #4]
   d837c:	4403      	add	r3, r0
   d837e:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d8380:	688b      	ldr	r3, [r1, #8]
   d8382:	6849      	ldr	r1, [r1, #4]
   d8384:	1a5b      	subs	r3, r3, r1
   d8386:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d8388:	4611      	mov	r1, r2
   d838a:	4620      	mov	r0, r4
   d838c:	f851 3b04 	ldr.w	r3, [r1], #4
   d8390:	f840 3b04 	str.w	r3, [r0], #4
   d8394:	f7fd fab8 	bl	d5908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d8398:	4620      	mov	r0, r4
   d839a:	bd10      	pop	{r4, pc}
   d839c:	000d9880 	.word	0x000d9880

000d83a0 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d83a0:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d83a2:	b510      	push	{r4, lr}
   d83a4:	4604      	mov	r4, r0
   d83a6:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d83a8:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d83aa:	6083      	str	r3, [r0, #8]
   d83ac:	60c3      	str	r3, [r0, #12]
   d83ae:	6103      	str	r3, [r0, #16]
   d83b0:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d83b2:	b171      	cbz	r1, d83d2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d83b4:	780b      	ldrb	r3, [r1, #0]
   d83b6:	2b01      	cmp	r3, #1
   d83b8:	d10b      	bne.n	d83d2 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d83ba:	f101 0310 	add.w	r3, r1, #16
   d83be:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d83c0:	68cb      	ldr	r3, [r1, #12]
   d83c2:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d83c4:	4611      	mov	r1, r2
   d83c6:	f851 3b04 	ldr.w	r3, [r1], #4
   d83ca:	f840 3b04 	str.w	r3, [r0], #4
   d83ce:	f7fd fa9b 	bl	d5908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d83d2:	4620      	mov	r0, r4
   d83d4:	bd10      	pop	{r4, pc}

000d83d6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d83d6:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d83d8:	b510      	push	{r4, lr}
   d83da:	4604      	mov	r4, r0
   d83dc:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d83de:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d83e0:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d83e2:	b131      	cbz	r1, d83f2 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d83e4:	4611      	mov	r1, r2
   d83e6:	f851 3b04 	ldr.w	r3, [r1], #4
   d83ea:	f840 3b04 	str.w	r3, [r0], #4
   d83ee:	f7fd fa8b 	bl	d5908 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d83f2:	4620      	mov	r0, r4
   d83f4:	bd10      	pop	{r4, pc}

000d83f6 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d83f6:	b510      	push	{r4, lr}
   d83f8:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d83fa:	f000 f859 	bl	d84b0 <_ZN8particle7globals11instanceSpiEv>
   d83fe:	f7fc fd7d 	bl	d4efc <_ZN8SPIClass9isEnabledEv>
   d8402:	b128      	cbz	r0, d8410 <pinAvailable+0x1a>
   d8404:	f1a4 030b 	sub.w	r3, r4, #11
   d8408:	2b02      	cmp	r3, #2
   d840a:	d801      	bhi.n	d8410 <pinAvailable+0x1a>
  {
    return 0; // 'pin' is used
   d840c:	2000      	movs	r0, #0
   d840e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8410:	f000 f888 	bl	d8524 <_Z19__fetch_global_Wirev>
   d8414:	f7ff fc86 	bl	d7d24 <_ZN7TwoWire9isEnabledEv>
   d8418:	b108      	cbz	r0, d841e <pinAvailable+0x28>
   d841a:	2c01      	cmp	r4, #1
   d841c:	d9f6      	bls.n	d840c <pinAvailable+0x16>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d841e:	f7ff fc09 	bl	d7c34 <_Z22__fetch_global_Serial1v>
   d8422:	f7ff fc03 	bl	d7c2c <_ZN11USARTSerial9isEnabledEv>
   d8426:	b118      	cbz	r0, d8430 <pinAvailable+0x3a>
   d8428:	f1a4 0309 	sub.w	r3, r4, #9
   d842c:	2b01      	cmp	r3, #1
   d842e:	d9ed      	bls.n	d840c <pinAvailable+0x16>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8430:	2c23      	cmp	r4, #35	; 0x23
   d8432:	bf8c      	ite	hi
   d8434:	2000      	movhi	r0, #0
   d8436:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8438:	bd10      	pop	{r4, pc}

000d843a <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d843a:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d843c:	b538      	push	{r3, r4, r5, lr}
   d843e:	4604      	mov	r4, r0
   d8440:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8442:	d80a      	bhi.n	d845a <pinMode+0x20>
   d8444:	29ff      	cmp	r1, #255	; 0xff
   d8446:	d008      	beq.n	d845a <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8448:	f7ff ffd5 	bl	d83f6 <pinAvailable>
   d844c:	b128      	cbz	r0, d845a <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d844e:	4629      	mov	r1, r5
   d8450:	4620      	mov	r0, r4
}
   d8452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d8456:	f7fc b9f7 	b.w	d4848 <HAL_Pin_Mode>
   d845a:	bd38      	pop	{r3, r4, r5, pc}

000d845c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d845c:	b510      	push	{r4, lr}
   d845e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8460:	f7fc f9fa 	bl	d4858 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d8464:	3804      	subs	r0, #4
   d8466:	b2c0      	uxtb	r0, r0
   d8468:	2801      	cmp	r0, #1
   d846a:	d908      	bls.n	d847e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d846c:	4620      	mov	r0, r4
   d846e:	f7ff ffc2 	bl	d83f6 <pinAvailable>
   d8472:	b120      	cbz	r0, d847e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d8474:	4620      	mov	r0, r4
}
   d8476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d847a:	f7fc b9f5 	b.w	d4868 <HAL_GPIO_Read>
}
   d847e:	2000      	movs	r0, #0
   d8480:	bd10      	pop	{r4, pc}

000d8482 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8482:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d8484:	b510      	push	{r4, lr}
   d8486:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8488:	bf9c      	itt	ls
   d848a:	340e      	addls	r4, #14
   d848c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d848e:	4620      	mov	r0, r4
   d8490:	f7ff ffb1 	bl	d83f6 <pinAvailable>
   d8494:	b150      	cbz	r0, d84ac <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8496:	2103      	movs	r1, #3
   d8498:	4620      	mov	r0, r4
   d849a:	f7fc f9cd 	bl	d4838 <HAL_Validate_Pin_Function>
   d849e:	2803      	cmp	r0, #3
   d84a0:	d104      	bne.n	d84ac <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d84a2:	4620      	mov	r0, r4
}
   d84a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d84a8:	f7fc b9e6 	b.w	d4878 <HAL_ADC_Read>
}
   d84ac:	2000      	movs	r0, #0
   d84ae:	bd10      	pop	{r4, pc}

000d84b0 <_ZN8particle7globals11instanceSpiEv>:
#ifndef SPARK_WIRING_NO_SPI

namespace particle {
namespace globals {

SPIClass& instanceSpi() {
   d84b0:	b538      	push	{r3, r4, r5, lr}
    static SPIClass instance(HAL_SPI_INTERFACE1);
   d84b2:	4d0b      	ldr	r5, [pc, #44]	; (d84e0 <_ZN8particle7globals11instanceSpiEv+0x30>)
   d84b4:	6829      	ldr	r1, [r5, #0]
   d84b6:	f011 0401 	ands.w	r4, r1, #1
   d84ba:	d10f      	bne.n	d84dc <_ZN8particle7globals11instanceSpiEv+0x2c>
   d84bc:	4628      	mov	r0, r5
   d84be:	f7fb fdfd 	bl	d40bc <__cxa_guard_acquire>
   d84c2:	b158      	cbz	r0, d84dc <_ZN8particle7globals11instanceSpiEv+0x2c>
   d84c4:	4621      	mov	r1, r4
   d84c6:	4807      	ldr	r0, [pc, #28]	; (d84e4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d84c8:	f7fc fd0a 	bl	d4ee0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d84cc:	4628      	mov	r0, r5
   d84ce:	f7fb fdfa 	bl	d40c6 <__cxa_guard_release>
   d84d2:	4a05      	ldr	r2, [pc, #20]	; (d84e8 <_ZN8particle7globals11instanceSpiEv+0x38>)
   d84d4:	4905      	ldr	r1, [pc, #20]	; (d84ec <_ZN8particle7globals11instanceSpiEv+0x3c>)
   d84d6:	4803      	ldr	r0, [pc, #12]	; (d84e4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d84d8:	f000 f84a 	bl	d8570 <__aeabi_atexit>
    return instance;
}
   d84dc:	4801      	ldr	r0, [pc, #4]	; (d84e4 <_ZN8particle7globals11instanceSpiEv+0x34>)
   d84de:	bd38      	pop	{r3, r4, r5, pc}
   d84e0:	2003e730 	.word	0x2003e730
   d84e4:	2003e724 	.word	0x2003e724
   d84e8:	2003e308 	.word	0x2003e308
   d84ec:	000d4ed1 	.word	0x000d4ed1

000d84f0 <_Z17acquireWireBufferv>:
   d84f0:	b570      	push	{r4, r5, r6, lr}
   d84f2:	4604      	mov	r4, r0
   d84f4:	2514      	movs	r5, #20
   d84f6:	462a      	mov	r2, r5
   d84f8:	4e09      	ldr	r6, [pc, #36]	; (d8520 <_Z17acquireWireBufferv+0x30>)
   d84fa:	2100      	movs	r1, #0
   d84fc:	f000 fdd9 	bl	d90b2 <memset>
   d8500:	8025      	strh	r5, [r4, #0]
   d8502:	2520      	movs	r5, #32
   d8504:	4631      	mov	r1, r6
   d8506:	60a5      	str	r5, [r4, #8]
   d8508:	6125      	str	r5, [r4, #16]
   d850a:	4628      	mov	r0, r5
   d850c:	f000 f840 	bl	d8590 <_ZnajRKSt9nothrow_t>
   d8510:	4631      	mov	r1, r6
   d8512:	6060      	str	r0, [r4, #4]
   d8514:	4628      	mov	r0, r5
   d8516:	f000 f83b 	bl	d8590 <_ZnajRKSt9nothrow_t>
   d851a:	60e0      	str	r0, [r4, #12]
   d851c:	4620      	mov	r0, r4
   d851e:	bd70      	pop	{r4, r5, r6, pc}
   d8520:	000d9aa3 	.word	0x000d9aa3

000d8524 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8524:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8526:	4d0e      	ldr	r5, [pc, #56]	; (d8560 <_Z19__fetch_global_Wirev+0x3c>)
   d8528:	6829      	ldr	r1, [r5, #0]
   d852a:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d852e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8530:	d113      	bne.n	d855a <_Z19__fetch_global_Wirev+0x36>
   d8532:	4628      	mov	r0, r5
   d8534:	f7fb fdc2 	bl	d40bc <__cxa_guard_acquire>
   d8538:	b178      	cbz	r0, d855a <_Z19__fetch_global_Wirev+0x36>
   d853a:	a801      	add	r0, sp, #4
   d853c:	f7ff ffd8 	bl	d84f0 <_Z17acquireWireBufferv>
   d8540:	aa01      	add	r2, sp, #4
   d8542:	4621      	mov	r1, r4
   d8544:	4807      	ldr	r0, [pc, #28]	; (d8564 <_Z19__fetch_global_Wirev+0x40>)
   d8546:	f7ff fbdb 	bl	d7d00 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d854a:	4628      	mov	r0, r5
   d854c:	f7fb fdbb 	bl	d40c6 <__cxa_guard_release>
   d8550:	4a05      	ldr	r2, [pc, #20]	; (d8568 <_Z19__fetch_global_Wirev+0x44>)
   d8552:	4906      	ldr	r1, [pc, #24]	; (d856c <_Z19__fetch_global_Wirev+0x48>)
   d8554:	4803      	ldr	r0, [pc, #12]	; (d8564 <_Z19__fetch_global_Wirev+0x40>)
   d8556:	f000 f80b 	bl	d8570 <__aeabi_atexit>
	return wire;
}
   d855a:	4802      	ldr	r0, [pc, #8]	; (d8564 <_Z19__fetch_global_Wirev+0x40>)
   d855c:	b007      	add	sp, #28
   d855e:	bd30      	pop	{r4, r5, pc}
   d8560:	2003e738 	.word	0x2003e738
   d8564:	2003e73c 	.word	0x2003e73c
   d8568:	2003e308 	.word	0x2003e308
   d856c:	000d7ca9 	.word	0x000d7ca9

000d8570 <__aeabi_atexit>:
   d8570:	460b      	mov	r3, r1
   d8572:	4601      	mov	r1, r0
   d8574:	4618      	mov	r0, r3
   d8576:	f000 bd59 	b.w	d902c <__cxa_atexit>
	...

000d857c <_ZSt15get_new_handlerv>:
   d857c:	4b02      	ldr	r3, [pc, #8]	; (d8588 <_ZSt15get_new_handlerv+0xc>)
   d857e:	6818      	ldr	r0, [r3, #0]
   d8580:	f3bf 8f5f 	dmb	sy
   d8584:	4770      	bx	lr
   d8586:	bf00      	nop
   d8588:	2003e750 	.word	0x2003e750

000d858c <_ZdlPvj>:
   d858c:	f7fb bd87 	b.w	d409e <_ZdlPv>

000d8590 <_ZnajRKSt9nothrow_t>:
   d8590:	f000 b800 	b.w	d8594 <_ZnwjRKSt9nothrow_t>

000d8594 <_ZnwjRKSt9nothrow_t>:
   d8594:	b510      	push	{r4, lr}
   d8596:	2800      	cmp	r0, #0
   d8598:	bf14      	ite	ne
   d859a:	4604      	movne	r4, r0
   d859c:	2401      	moveq	r4, #1
   d859e:	4620      	mov	r0, r4
   d85a0:	f7fc fc20 	bl	d4de4 <malloc>
   d85a4:	b920      	cbnz	r0, d85b0 <_ZnwjRKSt9nothrow_t+0x1c>
   d85a6:	f7ff ffe9 	bl	d857c <_ZSt15get_new_handlerv>
   d85aa:	b108      	cbz	r0, d85b0 <_ZnwjRKSt9nothrow_t+0x1c>
   d85ac:	4780      	blx	r0
   d85ae:	e7f6      	b.n	d859e <_ZnwjRKSt9nothrow_t+0xa>
   d85b0:	bd10      	pop	{r4, pc}

000d85b2 <_ZSt25__throw_bad_function_callv>:
   d85b2:	b508      	push	{r3, lr}
   d85b4:	f7fc fc3e 	bl	d4e34 <abort>

000d85b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d85b8:	4b18      	ldr	r3, [pc, #96]	; (d861c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d85ba:	681a      	ldr	r2, [r3, #0]
   d85bc:	07d1      	lsls	r1, r2, #31
   d85be:	bf5c      	itt	pl
   d85c0:	2201      	movpl	r2, #1
   d85c2:	601a      	strpl	r2, [r3, #0]
   d85c4:	4b16      	ldr	r3, [pc, #88]	; (d8620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d85c6:	681a      	ldr	r2, [r3, #0]
   d85c8:	07d2      	lsls	r2, r2, #31
   d85ca:	bf5c      	itt	pl
   d85cc:	2201      	movpl	r2, #1
   d85ce:	601a      	strpl	r2, [r3, #0]
   d85d0:	4b14      	ldr	r3, [pc, #80]	; (d8624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d85d2:	681a      	ldr	r2, [r3, #0]
   d85d4:	07d0      	lsls	r0, r2, #31
   d85d6:	bf5c      	itt	pl
   d85d8:	2201      	movpl	r2, #1
   d85da:	601a      	strpl	r2, [r3, #0]
   d85dc:	4b12      	ldr	r3, [pc, #72]	; (d8628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d85de:	681a      	ldr	r2, [r3, #0]
   d85e0:	07d1      	lsls	r1, r2, #31
   d85e2:	bf5c      	itt	pl
   d85e4:	2201      	movpl	r2, #1
   d85e6:	601a      	strpl	r2, [r3, #0]
   d85e8:	4b10      	ldr	r3, [pc, #64]	; (d862c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d85ea:	681a      	ldr	r2, [r3, #0]
   d85ec:	07d2      	lsls	r2, r2, #31
   d85ee:	bf5c      	itt	pl
   d85f0:	2201      	movpl	r2, #1
   d85f2:	601a      	strpl	r2, [r3, #0]
   d85f4:	4b0e      	ldr	r3, [pc, #56]	; (d8630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d85f6:	681a      	ldr	r2, [r3, #0]
   d85f8:	07d0      	lsls	r0, r2, #31
   d85fa:	bf5c      	itt	pl
   d85fc:	2201      	movpl	r2, #1
   d85fe:	601a      	strpl	r2, [r3, #0]
   d8600:	4b0c      	ldr	r3, [pc, #48]	; (d8634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8602:	681a      	ldr	r2, [r3, #0]
   d8604:	07d1      	lsls	r1, r2, #31
   d8606:	bf5c      	itt	pl
   d8608:	2201      	movpl	r2, #1
   d860a:	601a      	strpl	r2, [r3, #0]
   d860c:	4b0a      	ldr	r3, [pc, #40]	; (d8638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d860e:	681a      	ldr	r2, [r3, #0]
   d8610:	07d2      	lsls	r2, r2, #31
   d8612:	bf5c      	itt	pl
   d8614:	2201      	movpl	r2, #1
   d8616:	601a      	strpl	r2, [r3, #0]
   d8618:	4770      	bx	lr
   d861a:	bf00      	nop
   d861c:	2003e770 	.word	0x2003e770
   d8620:	2003e76c 	.word	0x2003e76c
   d8624:	2003e768 	.word	0x2003e768
   d8628:	2003e764 	.word	0x2003e764
   d862c:	2003e760 	.word	0x2003e760
   d8630:	2003e75c 	.word	0x2003e75c
   d8634:	2003e758 	.word	0x2003e758
   d8638:	2003e754 	.word	0x2003e754

000d863c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d863c:	4b24      	ldr	r3, [pc, #144]	; (d86d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d863e:	681a      	ldr	r2, [r3, #0]
   d8640:	07d0      	lsls	r0, r2, #31
   d8642:	bf5c      	itt	pl
   d8644:	2201      	movpl	r2, #1
   d8646:	601a      	strpl	r2, [r3, #0]
   d8648:	4b22      	ldr	r3, [pc, #136]	; (d86d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d864a:	681a      	ldr	r2, [r3, #0]
   d864c:	07d1      	lsls	r1, r2, #31
   d864e:	bf5c      	itt	pl
   d8650:	2201      	movpl	r2, #1
   d8652:	601a      	strpl	r2, [r3, #0]
   d8654:	4b20      	ldr	r3, [pc, #128]	; (d86d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d8656:	681a      	ldr	r2, [r3, #0]
   d8658:	07d2      	lsls	r2, r2, #31
   d865a:	bf5c      	itt	pl
   d865c:	2201      	movpl	r2, #1
   d865e:	601a      	strpl	r2, [r3, #0]
   d8660:	4b1e      	ldr	r3, [pc, #120]	; (d86dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d8662:	681a      	ldr	r2, [r3, #0]
   d8664:	07d0      	lsls	r0, r2, #31
   d8666:	bf5c      	itt	pl
   d8668:	2201      	movpl	r2, #1
   d866a:	601a      	strpl	r2, [r3, #0]
   d866c:	4b1c      	ldr	r3, [pc, #112]	; (d86e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d866e:	681a      	ldr	r2, [r3, #0]
   d8670:	07d1      	lsls	r1, r2, #31
   d8672:	bf5c      	itt	pl
   d8674:	2201      	movpl	r2, #1
   d8676:	601a      	strpl	r2, [r3, #0]
   d8678:	4b1a      	ldr	r3, [pc, #104]	; (d86e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d867a:	681a      	ldr	r2, [r3, #0]
   d867c:	07d2      	lsls	r2, r2, #31
   d867e:	bf5c      	itt	pl
   d8680:	2201      	movpl	r2, #1
   d8682:	601a      	strpl	r2, [r3, #0]
   d8684:	4b18      	ldr	r3, [pc, #96]	; (d86e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d8686:	681a      	ldr	r2, [r3, #0]
   d8688:	07d0      	lsls	r0, r2, #31
   d868a:	bf5c      	itt	pl
   d868c:	2201      	movpl	r2, #1
   d868e:	601a      	strpl	r2, [r3, #0]
   d8690:	4b16      	ldr	r3, [pc, #88]	; (d86ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d8692:	681a      	ldr	r2, [r3, #0]
   d8694:	07d1      	lsls	r1, r2, #31
   d8696:	bf5c      	itt	pl
   d8698:	2201      	movpl	r2, #1
   d869a:	601a      	strpl	r2, [r3, #0]
   d869c:	4b14      	ldr	r3, [pc, #80]	; (d86f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d869e:	681a      	ldr	r2, [r3, #0]
   d86a0:	07d2      	lsls	r2, r2, #31
   d86a2:	bf5c      	itt	pl
   d86a4:	2201      	movpl	r2, #1
   d86a6:	601a      	strpl	r2, [r3, #0]
   d86a8:	4b12      	ldr	r3, [pc, #72]	; (d86f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d86aa:	681a      	ldr	r2, [r3, #0]
   d86ac:	07d0      	lsls	r0, r2, #31
   d86ae:	bf5c      	itt	pl
   d86b0:	2201      	movpl	r2, #1
   d86b2:	601a      	strpl	r2, [r3, #0]
   d86b4:	4b10      	ldr	r3, [pc, #64]	; (d86f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d86b6:	681a      	ldr	r2, [r3, #0]
   d86b8:	07d1      	lsls	r1, r2, #31
   d86ba:	bf5c      	itt	pl
   d86bc:	2201      	movpl	r2, #1
   d86be:	601a      	strpl	r2, [r3, #0]
   d86c0:	4b0e      	ldr	r3, [pc, #56]	; (d86fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d86c2:	681a      	ldr	r2, [r3, #0]
   d86c4:	07d2      	lsls	r2, r2, #31
   d86c6:	bf5c      	itt	pl
   d86c8:	2201      	movpl	r2, #1
   d86ca:	601a      	strpl	r2, [r3, #0]
   d86cc:	4770      	bx	lr
   d86ce:	bf00      	nop
   d86d0:	2003e7a0 	.word	0x2003e7a0
   d86d4:	2003e79c 	.word	0x2003e79c
   d86d8:	2003e798 	.word	0x2003e798
   d86dc:	2003e794 	.word	0x2003e794
   d86e0:	2003e790 	.word	0x2003e790
   d86e4:	2003e78c 	.word	0x2003e78c
   d86e8:	2003e788 	.word	0x2003e788
   d86ec:	2003e784 	.word	0x2003e784
   d86f0:	2003e780 	.word	0x2003e780
   d86f4:	2003e77c 	.word	0x2003e77c
   d86f8:	2003e778 	.word	0x2003e778
   d86fc:	2003e774 	.word	0x2003e774

000d8700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8700:	4b24      	ldr	r3, [pc, #144]	; (d8794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8702:	681a      	ldr	r2, [r3, #0]
   d8704:	07d0      	lsls	r0, r2, #31
   d8706:	bf5c      	itt	pl
   d8708:	2201      	movpl	r2, #1
   d870a:	601a      	strpl	r2, [r3, #0]
   d870c:	4b22      	ldr	r3, [pc, #136]	; (d8798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d870e:	681a      	ldr	r2, [r3, #0]
   d8710:	07d1      	lsls	r1, r2, #31
   d8712:	bf5c      	itt	pl
   d8714:	2201      	movpl	r2, #1
   d8716:	601a      	strpl	r2, [r3, #0]
   d8718:	4b20      	ldr	r3, [pc, #128]	; (d879c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d871a:	681a      	ldr	r2, [r3, #0]
   d871c:	07d2      	lsls	r2, r2, #31
   d871e:	bf5c      	itt	pl
   d8720:	2201      	movpl	r2, #1
   d8722:	601a      	strpl	r2, [r3, #0]
   d8724:	4b1e      	ldr	r3, [pc, #120]	; (d87a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8726:	681a      	ldr	r2, [r3, #0]
   d8728:	07d0      	lsls	r0, r2, #31
   d872a:	bf5c      	itt	pl
   d872c:	2201      	movpl	r2, #1
   d872e:	601a      	strpl	r2, [r3, #0]
   d8730:	4b1c      	ldr	r3, [pc, #112]	; (d87a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8732:	681a      	ldr	r2, [r3, #0]
   d8734:	07d1      	lsls	r1, r2, #31
   d8736:	bf5c      	itt	pl
   d8738:	2201      	movpl	r2, #1
   d873a:	601a      	strpl	r2, [r3, #0]
   d873c:	4b1a      	ldr	r3, [pc, #104]	; (d87a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d873e:	681a      	ldr	r2, [r3, #0]
   d8740:	07d2      	lsls	r2, r2, #31
   d8742:	bf5c      	itt	pl
   d8744:	2201      	movpl	r2, #1
   d8746:	601a      	strpl	r2, [r3, #0]
   d8748:	4b18      	ldr	r3, [pc, #96]	; (d87ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d874a:	681a      	ldr	r2, [r3, #0]
   d874c:	07d0      	lsls	r0, r2, #31
   d874e:	bf5c      	itt	pl
   d8750:	2201      	movpl	r2, #1
   d8752:	601a      	strpl	r2, [r3, #0]
   d8754:	4b16      	ldr	r3, [pc, #88]	; (d87b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8756:	681a      	ldr	r2, [r3, #0]
   d8758:	07d1      	lsls	r1, r2, #31
   d875a:	bf5c      	itt	pl
   d875c:	2201      	movpl	r2, #1
   d875e:	601a      	strpl	r2, [r3, #0]
   d8760:	4b14      	ldr	r3, [pc, #80]	; (d87b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8762:	681a      	ldr	r2, [r3, #0]
   d8764:	07d2      	lsls	r2, r2, #31
   d8766:	bf5c      	itt	pl
   d8768:	2201      	movpl	r2, #1
   d876a:	601a      	strpl	r2, [r3, #0]
   d876c:	4b12      	ldr	r3, [pc, #72]	; (d87b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d876e:	681a      	ldr	r2, [r3, #0]
   d8770:	07d0      	lsls	r0, r2, #31
   d8772:	bf5c      	itt	pl
   d8774:	2201      	movpl	r2, #1
   d8776:	601a      	strpl	r2, [r3, #0]
   d8778:	4b10      	ldr	r3, [pc, #64]	; (d87bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d877a:	681a      	ldr	r2, [r3, #0]
   d877c:	07d1      	lsls	r1, r2, #31
   d877e:	bf5c      	itt	pl
   d8780:	2201      	movpl	r2, #1
   d8782:	601a      	strpl	r2, [r3, #0]
   d8784:	4b0e      	ldr	r3, [pc, #56]	; (d87c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8786:	681a      	ldr	r2, [r3, #0]
   d8788:	07d2      	lsls	r2, r2, #31
   d878a:	bf5c      	itt	pl
   d878c:	2201      	movpl	r2, #1
   d878e:	601a      	strpl	r2, [r3, #0]
   d8790:	4770      	bx	lr
   d8792:	bf00      	nop
   d8794:	2003e7d0 	.word	0x2003e7d0
   d8798:	2003e7cc 	.word	0x2003e7cc
   d879c:	2003e7c8 	.word	0x2003e7c8
   d87a0:	2003e7c4 	.word	0x2003e7c4
   d87a4:	2003e7c0 	.word	0x2003e7c0
   d87a8:	2003e7bc 	.word	0x2003e7bc
   d87ac:	2003e7b8 	.word	0x2003e7b8
   d87b0:	2003e7b4 	.word	0x2003e7b4
   d87b4:	2003e7b0 	.word	0x2003e7b0
   d87b8:	2003e7ac 	.word	0x2003e7ac
   d87bc:	2003e7a8 	.word	0x2003e7a8
   d87c0:	2003e7a4 	.word	0x2003e7a4

000d87c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d87c4:	4b18      	ldr	r3, [pc, #96]	; (d8828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d87c6:	681a      	ldr	r2, [r3, #0]
   d87c8:	07d1      	lsls	r1, r2, #31
   d87ca:	bf5c      	itt	pl
   d87cc:	2201      	movpl	r2, #1
   d87ce:	601a      	strpl	r2, [r3, #0]
   d87d0:	4b16      	ldr	r3, [pc, #88]	; (d882c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d87d2:	681a      	ldr	r2, [r3, #0]
   d87d4:	07d2      	lsls	r2, r2, #31
   d87d6:	bf5c      	itt	pl
   d87d8:	2201      	movpl	r2, #1
   d87da:	601a      	strpl	r2, [r3, #0]
   d87dc:	4b14      	ldr	r3, [pc, #80]	; (d8830 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d87de:	681a      	ldr	r2, [r3, #0]
   d87e0:	07d0      	lsls	r0, r2, #31
   d87e2:	bf5c      	itt	pl
   d87e4:	2201      	movpl	r2, #1
   d87e6:	601a      	strpl	r2, [r3, #0]
   d87e8:	4b12      	ldr	r3, [pc, #72]	; (d8834 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d87ea:	681a      	ldr	r2, [r3, #0]
   d87ec:	07d1      	lsls	r1, r2, #31
   d87ee:	bf5c      	itt	pl
   d87f0:	2201      	movpl	r2, #1
   d87f2:	601a      	strpl	r2, [r3, #0]
   d87f4:	4b10      	ldr	r3, [pc, #64]	; (d8838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d87f6:	681a      	ldr	r2, [r3, #0]
   d87f8:	07d2      	lsls	r2, r2, #31
   d87fa:	bf5c      	itt	pl
   d87fc:	2201      	movpl	r2, #1
   d87fe:	601a      	strpl	r2, [r3, #0]
   d8800:	4b0e      	ldr	r3, [pc, #56]	; (d883c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8802:	681a      	ldr	r2, [r3, #0]
   d8804:	07d0      	lsls	r0, r2, #31
   d8806:	bf5c      	itt	pl
   d8808:	2201      	movpl	r2, #1
   d880a:	601a      	strpl	r2, [r3, #0]
   d880c:	4b0c      	ldr	r3, [pc, #48]	; (d8840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d880e:	681a      	ldr	r2, [r3, #0]
   d8810:	07d1      	lsls	r1, r2, #31
   d8812:	bf5c      	itt	pl
   d8814:	2201      	movpl	r2, #1
   d8816:	601a      	strpl	r2, [r3, #0]
   d8818:	4b0a      	ldr	r3, [pc, #40]	; (d8844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d881a:	681a      	ldr	r2, [r3, #0]
   d881c:	07d2      	lsls	r2, r2, #31
   d881e:	bf5c      	itt	pl
   d8820:	2201      	movpl	r2, #1
   d8822:	601a      	strpl	r2, [r3, #0]
   d8824:	4770      	bx	lr
   d8826:	bf00      	nop
   d8828:	2003e7f0 	.word	0x2003e7f0
   d882c:	2003e7ec 	.word	0x2003e7ec
   d8830:	2003e7e8 	.word	0x2003e7e8
   d8834:	2003e7e4 	.word	0x2003e7e4
   d8838:	2003e7e0 	.word	0x2003e7e0
   d883c:	2003e7dc 	.word	0x2003e7dc
   d8840:	2003e7d8 	.word	0x2003e7d8
   d8844:	2003e7d4 	.word	0x2003e7d4

000d8848 <__aeabi_drsub>:
   d8848:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d884c:	e002      	b.n	d8854 <__adddf3>
   d884e:	bf00      	nop

000d8850 <__aeabi_dsub>:
   d8850:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8854 <__adddf3>:
   d8854:	b530      	push	{r4, r5, lr}
   d8856:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d885a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d885e:	ea94 0f05 	teq	r4, r5
   d8862:	bf08      	it	eq
   d8864:	ea90 0f02 	teqeq	r0, r2
   d8868:	bf1f      	itttt	ne
   d886a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d886e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8872:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8876:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d887a:	f000 80e2 	beq.w	d8a42 <__adddf3+0x1ee>
   d887e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8882:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8886:	bfb8      	it	lt
   d8888:	426d      	neglt	r5, r5
   d888a:	dd0c      	ble.n	d88a6 <__adddf3+0x52>
   d888c:	442c      	add	r4, r5
   d888e:	ea80 0202 	eor.w	r2, r0, r2
   d8892:	ea81 0303 	eor.w	r3, r1, r3
   d8896:	ea82 0000 	eor.w	r0, r2, r0
   d889a:	ea83 0101 	eor.w	r1, r3, r1
   d889e:	ea80 0202 	eor.w	r2, r0, r2
   d88a2:	ea81 0303 	eor.w	r3, r1, r3
   d88a6:	2d36      	cmp	r5, #54	; 0x36
   d88a8:	bf88      	it	hi
   d88aa:	bd30      	pophi	{r4, r5, pc}
   d88ac:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d88b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d88b4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d88b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d88bc:	d002      	beq.n	d88c4 <__adddf3+0x70>
   d88be:	4240      	negs	r0, r0
   d88c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d88c4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d88c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d88cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d88d0:	d002      	beq.n	d88d8 <__adddf3+0x84>
   d88d2:	4252      	negs	r2, r2
   d88d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d88d8:	ea94 0f05 	teq	r4, r5
   d88dc:	f000 80a7 	beq.w	d8a2e <__adddf3+0x1da>
   d88e0:	f1a4 0401 	sub.w	r4, r4, #1
   d88e4:	f1d5 0e20 	rsbs	lr, r5, #32
   d88e8:	db0d      	blt.n	d8906 <__adddf3+0xb2>
   d88ea:	fa02 fc0e 	lsl.w	ip, r2, lr
   d88ee:	fa22 f205 	lsr.w	r2, r2, r5
   d88f2:	1880      	adds	r0, r0, r2
   d88f4:	f141 0100 	adc.w	r1, r1, #0
   d88f8:	fa03 f20e 	lsl.w	r2, r3, lr
   d88fc:	1880      	adds	r0, r0, r2
   d88fe:	fa43 f305 	asr.w	r3, r3, r5
   d8902:	4159      	adcs	r1, r3
   d8904:	e00e      	b.n	d8924 <__adddf3+0xd0>
   d8906:	f1a5 0520 	sub.w	r5, r5, #32
   d890a:	f10e 0e20 	add.w	lr, lr, #32
   d890e:	2a01      	cmp	r2, #1
   d8910:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8914:	bf28      	it	cs
   d8916:	f04c 0c02 	orrcs.w	ip, ip, #2
   d891a:	fa43 f305 	asr.w	r3, r3, r5
   d891e:	18c0      	adds	r0, r0, r3
   d8920:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8924:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8928:	d507      	bpl.n	d893a <__adddf3+0xe6>
   d892a:	f04f 0e00 	mov.w	lr, #0
   d892e:	f1dc 0c00 	rsbs	ip, ip, #0
   d8932:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8936:	eb6e 0101 	sbc.w	r1, lr, r1
   d893a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d893e:	d31b      	bcc.n	d8978 <__adddf3+0x124>
   d8940:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8944:	d30c      	bcc.n	d8960 <__adddf3+0x10c>
   d8946:	0849      	lsrs	r1, r1, #1
   d8948:	ea5f 0030 	movs.w	r0, r0, rrx
   d894c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8950:	f104 0401 	add.w	r4, r4, #1
   d8954:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8958:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d895c:	f080 809a 	bcs.w	d8a94 <__adddf3+0x240>
   d8960:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8964:	bf08      	it	eq
   d8966:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d896a:	f150 0000 	adcs.w	r0, r0, #0
   d896e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8972:	ea41 0105 	orr.w	r1, r1, r5
   d8976:	bd30      	pop	{r4, r5, pc}
   d8978:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d897c:	4140      	adcs	r0, r0
   d897e:	eb41 0101 	adc.w	r1, r1, r1
   d8982:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8986:	f1a4 0401 	sub.w	r4, r4, #1
   d898a:	d1e9      	bne.n	d8960 <__adddf3+0x10c>
   d898c:	f091 0f00 	teq	r1, #0
   d8990:	bf04      	itt	eq
   d8992:	4601      	moveq	r1, r0
   d8994:	2000      	moveq	r0, #0
   d8996:	fab1 f381 	clz	r3, r1
   d899a:	bf08      	it	eq
   d899c:	3320      	addeq	r3, #32
   d899e:	f1a3 030b 	sub.w	r3, r3, #11
   d89a2:	f1b3 0220 	subs.w	r2, r3, #32
   d89a6:	da0c      	bge.n	d89c2 <__adddf3+0x16e>
   d89a8:	320c      	adds	r2, #12
   d89aa:	dd08      	ble.n	d89be <__adddf3+0x16a>
   d89ac:	f102 0c14 	add.w	ip, r2, #20
   d89b0:	f1c2 020c 	rsb	r2, r2, #12
   d89b4:	fa01 f00c 	lsl.w	r0, r1, ip
   d89b8:	fa21 f102 	lsr.w	r1, r1, r2
   d89bc:	e00c      	b.n	d89d8 <__adddf3+0x184>
   d89be:	f102 0214 	add.w	r2, r2, #20
   d89c2:	bfd8      	it	le
   d89c4:	f1c2 0c20 	rsble	ip, r2, #32
   d89c8:	fa01 f102 	lsl.w	r1, r1, r2
   d89cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   d89d0:	bfdc      	itt	le
   d89d2:	ea41 010c 	orrle.w	r1, r1, ip
   d89d6:	4090      	lslle	r0, r2
   d89d8:	1ae4      	subs	r4, r4, r3
   d89da:	bfa2      	ittt	ge
   d89dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d89e0:	4329      	orrge	r1, r5
   d89e2:	bd30      	popge	{r4, r5, pc}
   d89e4:	ea6f 0404 	mvn.w	r4, r4
   d89e8:	3c1f      	subs	r4, #31
   d89ea:	da1c      	bge.n	d8a26 <__adddf3+0x1d2>
   d89ec:	340c      	adds	r4, #12
   d89ee:	dc0e      	bgt.n	d8a0e <__adddf3+0x1ba>
   d89f0:	f104 0414 	add.w	r4, r4, #20
   d89f4:	f1c4 0220 	rsb	r2, r4, #32
   d89f8:	fa20 f004 	lsr.w	r0, r0, r4
   d89fc:	fa01 f302 	lsl.w	r3, r1, r2
   d8a00:	ea40 0003 	orr.w	r0, r0, r3
   d8a04:	fa21 f304 	lsr.w	r3, r1, r4
   d8a08:	ea45 0103 	orr.w	r1, r5, r3
   d8a0c:	bd30      	pop	{r4, r5, pc}
   d8a0e:	f1c4 040c 	rsb	r4, r4, #12
   d8a12:	f1c4 0220 	rsb	r2, r4, #32
   d8a16:	fa20 f002 	lsr.w	r0, r0, r2
   d8a1a:	fa01 f304 	lsl.w	r3, r1, r4
   d8a1e:	ea40 0003 	orr.w	r0, r0, r3
   d8a22:	4629      	mov	r1, r5
   d8a24:	bd30      	pop	{r4, r5, pc}
   d8a26:	fa21 f004 	lsr.w	r0, r1, r4
   d8a2a:	4629      	mov	r1, r5
   d8a2c:	bd30      	pop	{r4, r5, pc}
   d8a2e:	f094 0f00 	teq	r4, #0
   d8a32:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8a36:	bf06      	itte	eq
   d8a38:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8a3c:	3401      	addeq	r4, #1
   d8a3e:	3d01      	subne	r5, #1
   d8a40:	e74e      	b.n	d88e0 <__adddf3+0x8c>
   d8a42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8a46:	bf18      	it	ne
   d8a48:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8a4c:	d029      	beq.n	d8aa2 <__adddf3+0x24e>
   d8a4e:	ea94 0f05 	teq	r4, r5
   d8a52:	bf08      	it	eq
   d8a54:	ea90 0f02 	teqeq	r0, r2
   d8a58:	d005      	beq.n	d8a66 <__adddf3+0x212>
   d8a5a:	ea54 0c00 	orrs.w	ip, r4, r0
   d8a5e:	bf04      	itt	eq
   d8a60:	4619      	moveq	r1, r3
   d8a62:	4610      	moveq	r0, r2
   d8a64:	bd30      	pop	{r4, r5, pc}
   d8a66:	ea91 0f03 	teq	r1, r3
   d8a6a:	bf1e      	ittt	ne
   d8a6c:	2100      	movne	r1, #0
   d8a6e:	2000      	movne	r0, #0
   d8a70:	bd30      	popne	{r4, r5, pc}
   d8a72:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8a76:	d105      	bne.n	d8a84 <__adddf3+0x230>
   d8a78:	0040      	lsls	r0, r0, #1
   d8a7a:	4149      	adcs	r1, r1
   d8a7c:	bf28      	it	cs
   d8a7e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8a82:	bd30      	pop	{r4, r5, pc}
   d8a84:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8a88:	bf3c      	itt	cc
   d8a8a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8a8e:	bd30      	popcc	{r4, r5, pc}
   d8a90:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a94:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8a98:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8a9c:	f04f 0000 	mov.w	r0, #0
   d8aa0:	bd30      	pop	{r4, r5, pc}
   d8aa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8aa6:	bf1a      	itte	ne
   d8aa8:	4619      	movne	r1, r3
   d8aaa:	4610      	movne	r0, r2
   d8aac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8ab0:	bf1c      	itt	ne
   d8ab2:	460b      	movne	r3, r1
   d8ab4:	4602      	movne	r2, r0
   d8ab6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8aba:	bf06      	itte	eq
   d8abc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8ac0:	ea91 0f03 	teqeq	r1, r3
   d8ac4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8ac8:	bd30      	pop	{r4, r5, pc}
   d8aca:	bf00      	nop

000d8acc <__aeabi_ui2d>:
   d8acc:	f090 0f00 	teq	r0, #0
   d8ad0:	bf04      	itt	eq
   d8ad2:	2100      	moveq	r1, #0
   d8ad4:	4770      	bxeq	lr
   d8ad6:	b530      	push	{r4, r5, lr}
   d8ad8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8adc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ae0:	f04f 0500 	mov.w	r5, #0
   d8ae4:	f04f 0100 	mov.w	r1, #0
   d8ae8:	e750      	b.n	d898c <__adddf3+0x138>
   d8aea:	bf00      	nop

000d8aec <__aeabi_i2d>:
   d8aec:	f090 0f00 	teq	r0, #0
   d8af0:	bf04      	itt	eq
   d8af2:	2100      	moveq	r1, #0
   d8af4:	4770      	bxeq	lr
   d8af6:	b530      	push	{r4, r5, lr}
   d8af8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8afc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b00:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8b04:	bf48      	it	mi
   d8b06:	4240      	negmi	r0, r0
   d8b08:	f04f 0100 	mov.w	r1, #0
   d8b0c:	e73e      	b.n	d898c <__adddf3+0x138>
   d8b0e:	bf00      	nop

000d8b10 <__aeabi_f2d>:
   d8b10:	0042      	lsls	r2, r0, #1
   d8b12:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8b16:	ea4f 0131 	mov.w	r1, r1, rrx
   d8b1a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8b1e:	bf1f      	itttt	ne
   d8b20:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8b24:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8b28:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8b2c:	4770      	bxne	lr
   d8b2e:	f092 0f00 	teq	r2, #0
   d8b32:	bf14      	ite	ne
   d8b34:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8b38:	4770      	bxeq	lr
   d8b3a:	b530      	push	{r4, r5, lr}
   d8b3c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8b40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b44:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8b48:	e720      	b.n	d898c <__adddf3+0x138>
   d8b4a:	bf00      	nop

000d8b4c <__aeabi_ul2d>:
   d8b4c:	ea50 0201 	orrs.w	r2, r0, r1
   d8b50:	bf08      	it	eq
   d8b52:	4770      	bxeq	lr
   d8b54:	b530      	push	{r4, r5, lr}
   d8b56:	f04f 0500 	mov.w	r5, #0
   d8b5a:	e00a      	b.n	d8b72 <__aeabi_l2d+0x16>

000d8b5c <__aeabi_l2d>:
   d8b5c:	ea50 0201 	orrs.w	r2, r0, r1
   d8b60:	bf08      	it	eq
   d8b62:	4770      	bxeq	lr
   d8b64:	b530      	push	{r4, r5, lr}
   d8b66:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8b6a:	d502      	bpl.n	d8b72 <__aeabi_l2d+0x16>
   d8b6c:	4240      	negs	r0, r0
   d8b6e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b72:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b76:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b7a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8b7e:	f43f aedc 	beq.w	d893a <__adddf3+0xe6>
   d8b82:	f04f 0203 	mov.w	r2, #3
   d8b86:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b8a:	bf18      	it	ne
   d8b8c:	3203      	addne	r2, #3
   d8b8e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8b92:	bf18      	it	ne
   d8b94:	3203      	addne	r2, #3
   d8b96:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8b9a:	f1c2 0320 	rsb	r3, r2, #32
   d8b9e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8ba2:	fa20 f002 	lsr.w	r0, r0, r2
   d8ba6:	fa01 fe03 	lsl.w	lr, r1, r3
   d8baa:	ea40 000e 	orr.w	r0, r0, lr
   d8bae:	fa21 f102 	lsr.w	r1, r1, r2
   d8bb2:	4414      	add	r4, r2
   d8bb4:	e6c1      	b.n	d893a <__adddf3+0xe6>
   d8bb6:	bf00      	nop

000d8bb8 <__aeabi_dmul>:
   d8bb8:	b570      	push	{r4, r5, r6, lr}
   d8bba:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8bbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8bc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8bc6:	bf1d      	ittte	ne
   d8bc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8bcc:	ea94 0f0c 	teqne	r4, ip
   d8bd0:	ea95 0f0c 	teqne	r5, ip
   d8bd4:	f000 f8de 	bleq	d8d94 <__aeabi_dmul+0x1dc>
   d8bd8:	442c      	add	r4, r5
   d8bda:	ea81 0603 	eor.w	r6, r1, r3
   d8bde:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8be2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8be6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8bea:	bf18      	it	ne
   d8bec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8bf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8bf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8bf8:	d038      	beq.n	d8c6c <__aeabi_dmul+0xb4>
   d8bfa:	fba0 ce02 	umull	ip, lr, r0, r2
   d8bfe:	f04f 0500 	mov.w	r5, #0
   d8c02:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8c06:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8c0a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8c0e:	f04f 0600 	mov.w	r6, #0
   d8c12:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8c16:	f09c 0f00 	teq	ip, #0
   d8c1a:	bf18      	it	ne
   d8c1c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8c20:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8c24:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8c28:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8c2c:	d204      	bcs.n	d8c38 <__aeabi_dmul+0x80>
   d8c2e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8c32:	416d      	adcs	r5, r5
   d8c34:	eb46 0606 	adc.w	r6, r6, r6
   d8c38:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8c3c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8c40:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8c44:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8c48:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8c4c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8c50:	bf88      	it	hi
   d8c52:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8c56:	d81e      	bhi.n	d8c96 <__aeabi_dmul+0xde>
   d8c58:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8c5c:	bf08      	it	eq
   d8c5e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8c62:	f150 0000 	adcs.w	r0, r0, #0
   d8c66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c6a:	bd70      	pop	{r4, r5, r6, pc}
   d8c6c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8c70:	ea46 0101 	orr.w	r1, r6, r1
   d8c74:	ea40 0002 	orr.w	r0, r0, r2
   d8c78:	ea81 0103 	eor.w	r1, r1, r3
   d8c7c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8c80:	bfc2      	ittt	gt
   d8c82:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8c86:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8c8a:	bd70      	popgt	{r4, r5, r6, pc}
   d8c8c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c90:	f04f 0e00 	mov.w	lr, #0
   d8c94:	3c01      	subs	r4, #1
   d8c96:	f300 80ab 	bgt.w	d8df0 <__aeabi_dmul+0x238>
   d8c9a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8c9e:	bfde      	ittt	le
   d8ca0:	2000      	movle	r0, #0
   d8ca2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8ca6:	bd70      	pople	{r4, r5, r6, pc}
   d8ca8:	f1c4 0400 	rsb	r4, r4, #0
   d8cac:	3c20      	subs	r4, #32
   d8cae:	da35      	bge.n	d8d1c <__aeabi_dmul+0x164>
   d8cb0:	340c      	adds	r4, #12
   d8cb2:	dc1b      	bgt.n	d8cec <__aeabi_dmul+0x134>
   d8cb4:	f104 0414 	add.w	r4, r4, #20
   d8cb8:	f1c4 0520 	rsb	r5, r4, #32
   d8cbc:	fa00 f305 	lsl.w	r3, r0, r5
   d8cc0:	fa20 f004 	lsr.w	r0, r0, r4
   d8cc4:	fa01 f205 	lsl.w	r2, r1, r5
   d8cc8:	ea40 0002 	orr.w	r0, r0, r2
   d8ccc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8cd0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8cd4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8cd8:	fa21 f604 	lsr.w	r6, r1, r4
   d8cdc:	eb42 0106 	adc.w	r1, r2, r6
   d8ce0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ce4:	bf08      	it	eq
   d8ce6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8cea:	bd70      	pop	{r4, r5, r6, pc}
   d8cec:	f1c4 040c 	rsb	r4, r4, #12
   d8cf0:	f1c4 0520 	rsb	r5, r4, #32
   d8cf4:	fa00 f304 	lsl.w	r3, r0, r4
   d8cf8:	fa20 f005 	lsr.w	r0, r0, r5
   d8cfc:	fa01 f204 	lsl.w	r2, r1, r4
   d8d00:	ea40 0002 	orr.w	r0, r0, r2
   d8d04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d08:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d0c:	f141 0100 	adc.w	r1, r1, #0
   d8d10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d14:	bf08      	it	eq
   d8d16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d1a:	bd70      	pop	{r4, r5, r6, pc}
   d8d1c:	f1c4 0520 	rsb	r5, r4, #32
   d8d20:	fa00 f205 	lsl.w	r2, r0, r5
   d8d24:	ea4e 0e02 	orr.w	lr, lr, r2
   d8d28:	fa20 f304 	lsr.w	r3, r0, r4
   d8d2c:	fa01 f205 	lsl.w	r2, r1, r5
   d8d30:	ea43 0302 	orr.w	r3, r3, r2
   d8d34:	fa21 f004 	lsr.w	r0, r1, r4
   d8d38:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8d3c:	fa21 f204 	lsr.w	r2, r1, r4
   d8d40:	ea20 0002 	bic.w	r0, r0, r2
   d8d44:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8d48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8d4c:	bf08      	it	eq
   d8d4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8d52:	bd70      	pop	{r4, r5, r6, pc}
   d8d54:	f094 0f00 	teq	r4, #0
   d8d58:	d10f      	bne.n	d8d7a <__aeabi_dmul+0x1c2>
   d8d5a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8d5e:	0040      	lsls	r0, r0, #1
   d8d60:	eb41 0101 	adc.w	r1, r1, r1
   d8d64:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8d68:	bf08      	it	eq
   d8d6a:	3c01      	subeq	r4, #1
   d8d6c:	d0f7      	beq.n	d8d5e <__aeabi_dmul+0x1a6>
   d8d6e:	ea41 0106 	orr.w	r1, r1, r6
   d8d72:	f095 0f00 	teq	r5, #0
   d8d76:	bf18      	it	ne
   d8d78:	4770      	bxne	lr
   d8d7a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8d7e:	0052      	lsls	r2, r2, #1
   d8d80:	eb43 0303 	adc.w	r3, r3, r3
   d8d84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8d88:	bf08      	it	eq
   d8d8a:	3d01      	subeq	r5, #1
   d8d8c:	d0f7      	beq.n	d8d7e <__aeabi_dmul+0x1c6>
   d8d8e:	ea43 0306 	orr.w	r3, r3, r6
   d8d92:	4770      	bx	lr
   d8d94:	ea94 0f0c 	teq	r4, ip
   d8d98:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8d9c:	bf18      	it	ne
   d8d9e:	ea95 0f0c 	teqne	r5, ip
   d8da2:	d00c      	beq.n	d8dbe <__aeabi_dmul+0x206>
   d8da4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8da8:	bf18      	it	ne
   d8daa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8dae:	d1d1      	bne.n	d8d54 <__aeabi_dmul+0x19c>
   d8db0:	ea81 0103 	eor.w	r1, r1, r3
   d8db4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8db8:	f04f 0000 	mov.w	r0, #0
   d8dbc:	bd70      	pop	{r4, r5, r6, pc}
   d8dbe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8dc2:	bf06      	itte	eq
   d8dc4:	4610      	moveq	r0, r2
   d8dc6:	4619      	moveq	r1, r3
   d8dc8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8dcc:	d019      	beq.n	d8e02 <__aeabi_dmul+0x24a>
   d8dce:	ea94 0f0c 	teq	r4, ip
   d8dd2:	d102      	bne.n	d8dda <__aeabi_dmul+0x222>
   d8dd4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8dd8:	d113      	bne.n	d8e02 <__aeabi_dmul+0x24a>
   d8dda:	ea95 0f0c 	teq	r5, ip
   d8dde:	d105      	bne.n	d8dec <__aeabi_dmul+0x234>
   d8de0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8de4:	bf1c      	itt	ne
   d8de6:	4610      	movne	r0, r2
   d8de8:	4619      	movne	r1, r3
   d8dea:	d10a      	bne.n	d8e02 <__aeabi_dmul+0x24a>
   d8dec:	ea81 0103 	eor.w	r1, r1, r3
   d8df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8df4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8df8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8dfc:	f04f 0000 	mov.w	r0, #0
   d8e00:	bd70      	pop	{r4, r5, r6, pc}
   d8e02:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8e06:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8e0a:	bd70      	pop	{r4, r5, r6, pc}

000d8e0c <__aeabi_ddiv>:
   d8e0c:	b570      	push	{r4, r5, r6, lr}
   d8e0e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e12:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8e16:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8e1a:	bf1d      	ittte	ne
   d8e1c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8e20:	ea94 0f0c 	teqne	r4, ip
   d8e24:	ea95 0f0c 	teqne	r5, ip
   d8e28:	f000 f8a7 	bleq	d8f7a <__aeabi_ddiv+0x16e>
   d8e2c:	eba4 0405 	sub.w	r4, r4, r5
   d8e30:	ea81 0e03 	eor.w	lr, r1, r3
   d8e34:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8e38:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8e3c:	f000 8088 	beq.w	d8f50 <__aeabi_ddiv+0x144>
   d8e40:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8e44:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8e48:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8e4c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8e50:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8e54:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8e58:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8e5c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8e60:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8e64:	429d      	cmp	r5, r3
   d8e66:	bf08      	it	eq
   d8e68:	4296      	cmpeq	r6, r2
   d8e6a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8e6e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8e72:	d202      	bcs.n	d8e7a <__aeabi_ddiv+0x6e>
   d8e74:	085b      	lsrs	r3, r3, #1
   d8e76:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e7a:	1ab6      	subs	r6, r6, r2
   d8e7c:	eb65 0503 	sbc.w	r5, r5, r3
   d8e80:	085b      	lsrs	r3, r3, #1
   d8e82:	ea4f 0232 	mov.w	r2, r2, rrx
   d8e86:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8e8a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8e8e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8e92:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8e96:	bf22      	ittt	cs
   d8e98:	1ab6      	subcs	r6, r6, r2
   d8e9a:	4675      	movcs	r5, lr
   d8e9c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8ea0:	085b      	lsrs	r3, r3, #1
   d8ea2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ea6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8eae:	bf22      	ittt	cs
   d8eb0:	1ab6      	subcs	r6, r6, r2
   d8eb2:	4675      	movcs	r5, lr
   d8eb4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8eb8:	085b      	lsrs	r3, r3, #1
   d8eba:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ebe:	ebb6 0e02 	subs.w	lr, r6, r2
   d8ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ec6:	bf22      	ittt	cs
   d8ec8:	1ab6      	subcs	r6, r6, r2
   d8eca:	4675      	movcs	r5, lr
   d8ecc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8ed0:	085b      	lsrs	r3, r3, #1
   d8ed2:	ea4f 0232 	mov.w	r2, r2, rrx
   d8ed6:	ebb6 0e02 	subs.w	lr, r6, r2
   d8eda:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ede:	bf22      	ittt	cs
   d8ee0:	1ab6      	subcs	r6, r6, r2
   d8ee2:	4675      	movcs	r5, lr
   d8ee4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8ee8:	ea55 0e06 	orrs.w	lr, r5, r6
   d8eec:	d018      	beq.n	d8f20 <__aeabi_ddiv+0x114>
   d8eee:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8ef2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8ef6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8efa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8efe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8f02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8f06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8f0a:	d1c0      	bne.n	d8e8e <__aeabi_ddiv+0x82>
   d8f0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f10:	d10b      	bne.n	d8f2a <__aeabi_ddiv+0x11e>
   d8f12:	ea41 0100 	orr.w	r1, r1, r0
   d8f16:	f04f 0000 	mov.w	r0, #0
   d8f1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8f1e:	e7b6      	b.n	d8e8e <__aeabi_ddiv+0x82>
   d8f20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f24:	bf04      	itt	eq
   d8f26:	4301      	orreq	r1, r0
   d8f28:	2000      	moveq	r0, #0
   d8f2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8f2e:	bf88      	it	hi
   d8f30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8f34:	f63f aeaf 	bhi.w	d8c96 <__aeabi_dmul+0xde>
   d8f38:	ebb5 0c03 	subs.w	ip, r5, r3
   d8f3c:	bf04      	itt	eq
   d8f3e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8f42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8f46:	f150 0000 	adcs.w	r0, r0, #0
   d8f4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f4e:	bd70      	pop	{r4, r5, r6, pc}
   d8f50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8f54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8f58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8f5c:	bfc2      	ittt	gt
   d8f5e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f66:	bd70      	popgt	{r4, r5, r6, pc}
   d8f68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f6c:	f04f 0e00 	mov.w	lr, #0
   d8f70:	3c01      	subs	r4, #1
   d8f72:	e690      	b.n	d8c96 <__aeabi_dmul+0xde>
   d8f74:	ea45 0e06 	orr.w	lr, r5, r6
   d8f78:	e68d      	b.n	d8c96 <__aeabi_dmul+0xde>
   d8f7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f7e:	ea94 0f0c 	teq	r4, ip
   d8f82:	bf08      	it	eq
   d8f84:	ea95 0f0c 	teqeq	r5, ip
   d8f88:	f43f af3b 	beq.w	d8e02 <__aeabi_dmul+0x24a>
   d8f8c:	ea94 0f0c 	teq	r4, ip
   d8f90:	d10a      	bne.n	d8fa8 <__aeabi_ddiv+0x19c>
   d8f92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8f96:	f47f af34 	bne.w	d8e02 <__aeabi_dmul+0x24a>
   d8f9a:	ea95 0f0c 	teq	r5, ip
   d8f9e:	f47f af25 	bne.w	d8dec <__aeabi_dmul+0x234>
   d8fa2:	4610      	mov	r0, r2
   d8fa4:	4619      	mov	r1, r3
   d8fa6:	e72c      	b.n	d8e02 <__aeabi_dmul+0x24a>
   d8fa8:	ea95 0f0c 	teq	r5, ip
   d8fac:	d106      	bne.n	d8fbc <__aeabi_ddiv+0x1b0>
   d8fae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8fb2:	f43f aefd 	beq.w	d8db0 <__aeabi_dmul+0x1f8>
   d8fb6:	4610      	mov	r0, r2
   d8fb8:	4619      	mov	r1, r3
   d8fba:	e722      	b.n	d8e02 <__aeabi_dmul+0x24a>
   d8fbc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8fc0:	bf18      	it	ne
   d8fc2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8fc6:	f47f aec5 	bne.w	d8d54 <__aeabi_dmul+0x19c>
   d8fca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8fce:	f47f af0d 	bne.w	d8dec <__aeabi_dmul+0x234>
   d8fd2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8fd6:	f47f aeeb 	bne.w	d8db0 <__aeabi_dmul+0x1f8>
   d8fda:	e712      	b.n	d8e02 <__aeabi_dmul+0x24a>

000d8fdc <__aeabi_d2iz>:
   d8fdc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8fe4:	d215      	bcs.n	d9012 <__aeabi_d2iz+0x36>
   d8fe6:	d511      	bpl.n	d900c <__aeabi_d2iz+0x30>
   d8fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8ff0:	d912      	bls.n	d9018 <__aeabi_d2iz+0x3c>
   d8ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8ffe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9002:	fa23 f002 	lsr.w	r0, r3, r2
   d9006:	bf18      	it	ne
   d9008:	4240      	negne	r0, r0
   d900a:	4770      	bx	lr
   d900c:	f04f 0000 	mov.w	r0, #0
   d9010:	4770      	bx	lr
   d9012:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9016:	d105      	bne.n	d9024 <__aeabi_d2iz+0x48>
   d9018:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d901c:	bf08      	it	eq
   d901e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9022:	4770      	bx	lr
   d9024:	f04f 0000 	mov.w	r0, #0
   d9028:	4770      	bx	lr
   d902a:	bf00      	nop

000d902c <__cxa_atexit>:
   d902c:	b510      	push	{r4, lr}
   d902e:	4c05      	ldr	r4, [pc, #20]	; (d9044 <__cxa_atexit+0x18>)
   d9030:	4613      	mov	r3, r2
   d9032:	b12c      	cbz	r4, d9040 <__cxa_atexit+0x14>
   d9034:	460a      	mov	r2, r1
   d9036:	4601      	mov	r1, r0
   d9038:	2002      	movs	r0, #2
   d903a:	f3af 8000 	nop.w
   d903e:	bd10      	pop	{r4, pc}
   d9040:	4620      	mov	r0, r4
   d9042:	bd10      	pop	{r4, pc}
   d9044:	00000000 	.word	0x00000000

000d9048 <memcmp>:
   d9048:	b510      	push	{r4, lr}
   d904a:	3901      	subs	r1, #1
   d904c:	4402      	add	r2, r0
   d904e:	4290      	cmp	r0, r2
   d9050:	d007      	beq.n	d9062 <memcmp+0x1a>
   d9052:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9056:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d905a:	42a3      	cmp	r3, r4
   d905c:	d0f7      	beq.n	d904e <memcmp+0x6>
   d905e:	1b18      	subs	r0, r3, r4
   d9060:	bd10      	pop	{r4, pc}
   d9062:	2000      	movs	r0, #0
   d9064:	bd10      	pop	{r4, pc}

000d9066 <memcpy>:
   d9066:	b510      	push	{r4, lr}
   d9068:	1e43      	subs	r3, r0, #1
   d906a:	440a      	add	r2, r1
   d906c:	4291      	cmp	r1, r2
   d906e:	d004      	beq.n	d907a <memcpy+0x14>
   d9070:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9074:	f803 4f01 	strb.w	r4, [r3, #1]!
   d9078:	e7f8      	b.n	d906c <memcpy+0x6>
   d907a:	bd10      	pop	{r4, pc}

000d907c <memmove>:
   d907c:	4288      	cmp	r0, r1
   d907e:	b510      	push	{r4, lr}
   d9080:	eb01 0302 	add.w	r3, r1, r2
   d9084:	d801      	bhi.n	d908a <memmove+0xe>
   d9086:	1e42      	subs	r2, r0, #1
   d9088:	e00b      	b.n	d90a2 <memmove+0x26>
   d908a:	4298      	cmp	r0, r3
   d908c:	d2fb      	bcs.n	d9086 <memmove+0xa>
   d908e:	1881      	adds	r1, r0, r2
   d9090:	1ad2      	subs	r2, r2, r3
   d9092:	42d3      	cmn	r3, r2
   d9094:	d004      	beq.n	d90a0 <memmove+0x24>
   d9096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d909a:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d909e:	e7f8      	b.n	d9092 <memmove+0x16>
   d90a0:	bd10      	pop	{r4, pc}
   d90a2:	4299      	cmp	r1, r3
   d90a4:	d004      	beq.n	d90b0 <memmove+0x34>
   d90a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d90aa:	f802 4f01 	strb.w	r4, [r2, #1]!
   d90ae:	e7f8      	b.n	d90a2 <memmove+0x26>
   d90b0:	bd10      	pop	{r4, pc}

000d90b2 <memset>:
   d90b2:	4402      	add	r2, r0
   d90b4:	4603      	mov	r3, r0
   d90b6:	4293      	cmp	r3, r2
   d90b8:	d002      	beq.n	d90c0 <memset+0xe>
   d90ba:	f803 1b01 	strb.w	r1, [r3], #1
   d90be:	e7fa      	b.n	d90b6 <memset+0x4>
   d90c0:	4770      	bx	lr
	...

000d90c4 <srand>:
   d90c4:	b538      	push	{r3, r4, r5, lr}
   d90c6:	4b12      	ldr	r3, [pc, #72]	; (d9110 <srand+0x4c>)
   d90c8:	681c      	ldr	r4, [r3, #0]
   d90ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d90cc:	4605      	mov	r5, r0
   d90ce:	b9d3      	cbnz	r3, d9106 <srand+0x42>
   d90d0:	2018      	movs	r0, #24
   d90d2:	f7fb fe87 	bl	d4de4 <malloc>
   d90d6:	f243 330e 	movw	r3, #13070	; 0x330e
   d90da:	63a0      	str	r0, [r4, #56]	; 0x38
   d90dc:	8003      	strh	r3, [r0, #0]
   d90de:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d90e2:	8043      	strh	r3, [r0, #2]
   d90e4:	f241 2334 	movw	r3, #4660	; 0x1234
   d90e8:	8083      	strh	r3, [r0, #4]
   d90ea:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d90ee:	80c3      	strh	r3, [r0, #6]
   d90f0:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d90f4:	8103      	strh	r3, [r0, #8]
   d90f6:	2305      	movs	r3, #5
   d90f8:	8143      	strh	r3, [r0, #10]
   d90fa:	230b      	movs	r3, #11
   d90fc:	8183      	strh	r3, [r0, #12]
   d90fe:	2201      	movs	r2, #1
   d9100:	2300      	movs	r3, #0
   d9102:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9106:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9108:	2200      	movs	r2, #0
   d910a:	611d      	str	r5, [r3, #16]
   d910c:	615a      	str	r2, [r3, #20]
   d910e:	bd38      	pop	{r3, r4, r5, pc}
   d9110:	2003e300 	.word	0x2003e300

000d9114 <strchr>:
   d9114:	b2c9      	uxtb	r1, r1
   d9116:	4603      	mov	r3, r0
   d9118:	f810 2b01 	ldrb.w	r2, [r0], #1
   d911c:	b11a      	cbz	r2, d9126 <strchr+0x12>
   d911e:	4291      	cmp	r1, r2
   d9120:	d1f9      	bne.n	d9116 <strchr+0x2>
   d9122:	4618      	mov	r0, r3
   d9124:	4770      	bx	lr
   d9126:	2900      	cmp	r1, #0
   d9128:	bf0c      	ite	eq
   d912a:	4618      	moveq	r0, r3
   d912c:	2000      	movne	r0, #0
   d912e:	4770      	bx	lr

000d9130 <strchrnul>:
   d9130:	b510      	push	{r4, lr}
   d9132:	4604      	mov	r4, r0
   d9134:	f7ff ffee 	bl	d9114 <strchr>
   d9138:	b918      	cbnz	r0, d9142 <strchrnul+0x12>
   d913a:	4620      	mov	r0, r4
   d913c:	f000 f827 	bl	d918e <strlen>
   d9140:	4420      	add	r0, r4
   d9142:	bd10      	pop	{r4, pc}

000d9144 <strcmp>:
   d9144:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9148:	f811 3b01 	ldrb.w	r3, [r1], #1
   d914c:	2a01      	cmp	r2, #1
   d914e:	bf28      	it	cs
   d9150:	429a      	cmpcs	r2, r3
   d9152:	d0f7      	beq.n	d9144 <strcmp>
   d9154:	1ad0      	subs	r0, r2, r3
   d9156:	4770      	bx	lr

000d9158 <strdup>:
   d9158:	4b02      	ldr	r3, [pc, #8]	; (d9164 <strdup+0xc>)
   d915a:	4601      	mov	r1, r0
   d915c:	6818      	ldr	r0, [r3, #0]
   d915e:	f000 b803 	b.w	d9168 <_strdup_r>
   d9162:	bf00      	nop
   d9164:	2003e300 	.word	0x2003e300

000d9168 <_strdup_r>:
   d9168:	b570      	push	{r4, r5, r6, lr}
   d916a:	4606      	mov	r6, r0
   d916c:	4608      	mov	r0, r1
   d916e:	460c      	mov	r4, r1
   d9170:	f000 f80d 	bl	d918e <strlen>
   d9174:	1c45      	adds	r5, r0, #1
   d9176:	4629      	mov	r1, r5
   d9178:	4630      	mov	r0, r6
   d917a:	f7fb fe63 	bl	d4e44 <_malloc_r>
   d917e:	4606      	mov	r6, r0
   d9180:	b118      	cbz	r0, d918a <_strdup_r+0x22>
   d9182:	462a      	mov	r2, r5
   d9184:	4621      	mov	r1, r4
   d9186:	f7ff ff6e 	bl	d9066 <memcpy>
   d918a:	4630      	mov	r0, r6
   d918c:	bd70      	pop	{r4, r5, r6, pc}

000d918e <strlen>:
   d918e:	4603      	mov	r3, r0
   d9190:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9194:	2a00      	cmp	r2, #0
   d9196:	d1fb      	bne.n	d9190 <strlen+0x2>
   d9198:	1a18      	subs	r0, r3, r0
   d919a:	3801      	subs	r0, #1
   d919c:	4770      	bx	lr

000d919e <strncmp>:
   d919e:	b530      	push	{r4, r5, lr}
   d91a0:	b182      	cbz	r2, d91c4 <strncmp+0x26>
   d91a2:	1e45      	subs	r5, r0, #1
   d91a4:	3901      	subs	r1, #1
   d91a6:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d91aa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d91ae:	42a3      	cmp	r3, r4
   d91b0:	d106      	bne.n	d91c0 <strncmp+0x22>
   d91b2:	43ec      	mvns	r4, r5
   d91b4:	4414      	add	r4, r2
   d91b6:	42e0      	cmn	r0, r4
   d91b8:	d001      	beq.n	d91be <strncmp+0x20>
   d91ba:	2b00      	cmp	r3, #0
   d91bc:	d1f3      	bne.n	d91a6 <strncmp+0x8>
   d91be:	461c      	mov	r4, r3
   d91c0:	1b18      	subs	r0, r3, r4
   d91c2:	bd30      	pop	{r4, r5, pc}
   d91c4:	4610      	mov	r0, r2
   d91c6:	bd30      	pop	{r4, r5, pc}

000d91c8 <strnlen>:
   d91c8:	b510      	push	{r4, lr}
   d91ca:	4603      	mov	r3, r0
   d91cc:	4401      	add	r1, r0
   d91ce:	428b      	cmp	r3, r1
   d91d0:	d004      	beq.n	d91dc <strnlen+0x14>
   d91d2:	781a      	ldrb	r2, [r3, #0]
   d91d4:	1c5c      	adds	r4, r3, #1
   d91d6:	b10a      	cbz	r2, d91dc <strnlen+0x14>
   d91d8:	4623      	mov	r3, r4
   d91da:	e7f8      	b.n	d91ce <strnlen+0x6>
   d91dc:	1a18      	subs	r0, r3, r0
   d91de:	bd10      	pop	{r4, pc}

000d91e0 <strrchr>:
   d91e0:	b538      	push	{r3, r4, r5, lr}
   d91e2:	4603      	mov	r3, r0
   d91e4:	460d      	mov	r5, r1
   d91e6:	b141      	cbz	r1, d91fa <strrchr+0x1a>
   d91e8:	2400      	movs	r4, #0
   d91ea:	4629      	mov	r1, r5
   d91ec:	4618      	mov	r0, r3
   d91ee:	f7ff ff91 	bl	d9114 <strchr>
   d91f2:	b130      	cbz	r0, d9202 <strrchr+0x22>
   d91f4:	1c43      	adds	r3, r0, #1
   d91f6:	4604      	mov	r4, r0
   d91f8:	e7f7      	b.n	d91ea <strrchr+0xa>
   d91fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d91fe:	f7ff bf89 	b.w	d9114 <strchr>
   d9202:	4620      	mov	r0, r4
   d9204:	bd38      	pop	{r3, r4, r5, pc}
	...

000d9208 <_strtol_r>:
   d9208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d920c:	4680      	mov	r8, r0
   d920e:	4840      	ldr	r0, [pc, #256]	; (d9310 <_strtol_r+0x108>)
   d9210:	f8d0 9000 	ldr.w	r9, [r0]
   d9214:	460f      	mov	r7, r1
   d9216:	463d      	mov	r5, r7
   d9218:	f815 4b01 	ldrb.w	r4, [r5], #1
   d921c:	eb09 0004 	add.w	r0, r9, r4
   d9220:	7840      	ldrb	r0, [r0, #1]
   d9222:	f000 0008 	and.w	r0, r0, #8
   d9226:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d922a:	b108      	cbz	r0, d9230 <_strtol_r+0x28>
   d922c:	462f      	mov	r7, r5
   d922e:	e7f2      	b.n	d9216 <_strtol_r+0xe>
   d9230:	2c2d      	cmp	r4, #45	; 0x2d
   d9232:	d103      	bne.n	d923c <_strtol_r+0x34>
   d9234:	1cbd      	adds	r5, r7, #2
   d9236:	787c      	ldrb	r4, [r7, #1]
   d9238:	2601      	movs	r6, #1
   d923a:	e003      	b.n	d9244 <_strtol_r+0x3c>
   d923c:	2c2b      	cmp	r4, #43	; 0x2b
   d923e:	bf04      	itt	eq
   d9240:	787c      	ldrbeq	r4, [r7, #1]
   d9242:	1cbd      	addeq	r5, r7, #2
   d9244:	b113      	cbz	r3, d924c <_strtol_r+0x44>
   d9246:	2b10      	cmp	r3, #16
   d9248:	d10a      	bne.n	d9260 <_strtol_r+0x58>
   d924a:	e05b      	b.n	d9304 <_strtol_r+0xfc>
   d924c:	2c30      	cmp	r4, #48	; 0x30
   d924e:	d157      	bne.n	d9300 <_strtol_r+0xf8>
   d9250:	7828      	ldrb	r0, [r5, #0]
   d9252:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9256:	2858      	cmp	r0, #88	; 0x58
   d9258:	d14d      	bne.n	d92f6 <_strtol_r+0xee>
   d925a:	786c      	ldrb	r4, [r5, #1]
   d925c:	2310      	movs	r3, #16
   d925e:	3502      	adds	r5, #2
   d9260:	2e00      	cmp	r6, #0
   d9262:	bf14      	ite	ne
   d9264:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9268:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d926c:	2700      	movs	r7, #0
   d926e:	fbbc faf3 	udiv	sl, ip, r3
   d9272:	4638      	mov	r0, r7
   d9274:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9278:	eb09 0e04 	add.w	lr, r9, r4
   d927c:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9280:	f01e 0f04 	tst.w	lr, #4
   d9284:	d001      	beq.n	d928a <_strtol_r+0x82>
   d9286:	3c30      	subs	r4, #48	; 0x30
   d9288:	e00b      	b.n	d92a2 <_strtol_r+0x9a>
   d928a:	f01e 0e03 	ands.w	lr, lr, #3
   d928e:	d01b      	beq.n	d92c8 <_strtol_r+0xc0>
   d9290:	f1be 0f01 	cmp.w	lr, #1
   d9294:	bf0c      	ite	eq
   d9296:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d929a:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d929e:	ebce 0404 	rsb	r4, lr, r4
   d92a2:	42a3      	cmp	r3, r4
   d92a4:	dd10      	ble.n	d92c8 <_strtol_r+0xc0>
   d92a6:	f1b7 3fff 	cmp.w	r7, #4294967295
   d92aa:	d00a      	beq.n	d92c2 <_strtol_r+0xba>
   d92ac:	4550      	cmp	r0, sl
   d92ae:	d806      	bhi.n	d92be <_strtol_r+0xb6>
   d92b0:	d101      	bne.n	d92b6 <_strtol_r+0xae>
   d92b2:	4564      	cmp	r4, ip
   d92b4:	dc03      	bgt.n	d92be <_strtol_r+0xb6>
   d92b6:	fb03 4000 	mla	r0, r3, r0, r4
   d92ba:	2701      	movs	r7, #1
   d92bc:	e001      	b.n	d92c2 <_strtol_r+0xba>
   d92be:	f04f 37ff 	mov.w	r7, #4294967295
   d92c2:	f815 4b01 	ldrb.w	r4, [r5], #1
   d92c6:	e7d7      	b.n	d9278 <_strtol_r+0x70>
   d92c8:	1c7b      	adds	r3, r7, #1
   d92ca:	d10c      	bne.n	d92e6 <_strtol_r+0xde>
   d92cc:	2e00      	cmp	r6, #0
   d92ce:	f04f 0322 	mov.w	r3, #34	; 0x22
   d92d2:	bf14      	ite	ne
   d92d4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d92d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d92dc:	f8c8 3000 	str.w	r3, [r8]
   d92e0:	b92a      	cbnz	r2, d92ee <_strtol_r+0xe6>
   d92e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d92e6:	b106      	cbz	r6, d92ea <_strtol_r+0xe2>
   d92e8:	4240      	negs	r0, r0
   d92ea:	b172      	cbz	r2, d930a <_strtol_r+0x102>
   d92ec:	b107      	cbz	r7, d92f0 <_strtol_r+0xe8>
   d92ee:	1e69      	subs	r1, r5, #1
   d92f0:	6011      	str	r1, [r2, #0]
   d92f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d92f6:	2430      	movs	r4, #48	; 0x30
   d92f8:	2b00      	cmp	r3, #0
   d92fa:	d1b1      	bne.n	d9260 <_strtol_r+0x58>
   d92fc:	2308      	movs	r3, #8
   d92fe:	e7af      	b.n	d9260 <_strtol_r+0x58>
   d9300:	230a      	movs	r3, #10
   d9302:	e7ad      	b.n	d9260 <_strtol_r+0x58>
   d9304:	2c30      	cmp	r4, #48	; 0x30
   d9306:	d0a3      	beq.n	d9250 <_strtol_r+0x48>
   d9308:	e7aa      	b.n	d9260 <_strtol_r+0x58>
   d930a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d930e:	bf00      	nop
   d9310:	2003e29c 	.word	0x2003e29c

000d9314 <strtol>:
   d9314:	4613      	mov	r3, r2
   d9316:	460a      	mov	r2, r1
   d9318:	4601      	mov	r1, r0
   d931a:	4802      	ldr	r0, [pc, #8]	; (d9324 <strtol+0x10>)
   d931c:	6800      	ldr	r0, [r0, #0]
   d931e:	f7ff bf73 	b.w	d9208 <_strtol_r>
   d9322:	bf00      	nop
   d9324:	2003e300 	.word	0x2003e300

000d9328 <dynalib_user>:
   d9328:	000d4021 000d405d 000d4089 000d408d     !@..]@...@...@..
   d9338:	00000000                                ....

000d933c <_ZTVN5spark10LogHandlerE>:
	...
   d934c:	000d40a9 000d40cd                       .@...@..

000d9354 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d935c:	000d40e9 000d411d 000d6ec9 000d40cf     .@...A...n...@..
   d936c:	20656854 2044454c 746c6f76 20656761     The LED voltage 
   d937c:	20736168 6e656562 74657320 61697620     has been set via
   d938c:	20544220 25206f74 61520075 74736e69      BT to %u.Rainst
   d939c:	206d6165 6c616e41 5200676f 20646165     eam Analog.Read 
   d93ac:	6e696152 61657473 6e41206d 676f6c61     Rainsteam Analog
   d93bc:	6425203a 67656420 73656572 6c656320     : %d degrees cel
   d93cc:	73756973 61655200 696c2064 64697571     sius.Read liquid
   d93dc:	7525203a 71696c00 00646975 64616552     : %u.liquid.Read
   d93ec:	52495020 7525203a 6d756800 65446e61      PIR: %u.humanDe
   d93fc:	74636574 5200726f 206e6961 61657473     tector.Rain stea
   d940c:	25203a6d 72500075 6f697665 48207375     m: %u.Previous H
   d941c:	6e616d75 74656420 6f746365 74732072     uman detector st
   d942c:	3a657461 00752520 616d7548 6564206e     ate: %u.Human de
   d943c:	74636574 203a726f 43007525 65727275     tector: %u.Curre
   d944c:	2820746e 20746f6e 72727563 6c746e65     nt (not currentl
   d945c:	6d692079 6d656c70 65746e65 52002964     y implemented).R
   d946c:	20646165 72727563 20746e65 746f6e28     ead current (not
   d947c:	72756320 746e6572 6920796c 656c706d      currently imple
   d948c:	746e656d 3a296465 00752520 6e696172     mented): %u.rain
   d949c:	61657473 696c006d 00746867 72617453     steam.light.Star
   d94ac:	64612074 74726576 6e697369 69700067     t advertising.pi
   d94bc:	34620072 35643238 632d3135 2d656133     r.b482d551-c3ae-
   d94cc:	65646434 3231622d 65632d35 64343432     4dde-b125-ce244d
   d94dc:	36393837 38003062 32616238 2d643566     7896b0.88ba2f5d-
   d94ec:	38396531 6139342d 36382d66 642d3739     1e98-49af-8697-d
   d94fc:	36313530 33306664 00396562 66376362     0516df03be9.bc7f
   d950c:	39643831 3463322d 30342d33 622d6538     18d9-2c43-408e-b
   d951c:	2d353265 34663236 35343630 63373839     e25-62f40645987c
   d952c:	37373900 64613832 39612d39 342d3839     .97728ad9-a998-4
   d953c:	2d393236 35353862 3265652d 63383536     629-b855-ee2658c
   d954c:	66313061 00000037                       a01f7...

000d9554 <_ZTVN5spark13EthernetClassE>:
	...
   d955c:	000d4eb3 000d4ea9 000d4e9f 000d4e95     .N...N...N...N..
   d956c:	000d4e89 000d4e7d 000d4e71 000d4e69     .N..}N..qN..iN..
   d957c:	000d4e5f 000d4e55 000d7f8d              _N..UN......

000d9588 <_ZTV8SPIClass>:
	...
   d9590:	000d4ed1 000d4ed3                       .N...N..

000d9598 <_ZTVSt19_Sp_counted_deleterIPN8particle21BleCharacteristicImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d95a0:	000d506f 000d5075 000d5d7d 000d509f     oP..uP..}]...P..
   d95b0:	000d5071                                qP..

000d95b4 <_ZTVSt19_Sp_counted_deleterIPN8particle14BleServiceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d95bc:	000d5069 000d5083 000d5e89 000d50a3     iP...P...^...P..
   d95cc:	000d506b                                kP..

000d95d0 <_ZTVSt19_Sp_counted_deleterIPN8particle17BlePeerDeviceImplENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d95d8:	000d5063 000d5091 000d583b 000d50a7     cP...P..;X...P..
   d95e8:	000d5065                                eP..

000d95ec <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d95ec:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.
   d95fc:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d960c:	73696420 65766f63 676e6972 72657320      discovering ser
   d961c:	65636976 53002e73 74726174 73696420     vices..Start dis
   d962c:	65766f63 676e6972 61686320 74636172     covering charact
   d963c:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d964c:	63697665 73692065 73696d20 676e6973     evice is missing
   d965c:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d966c:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d967c:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d968c:	79622064 6e654320 6c617274 76656420     d by Central dev
   d969c:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d96ac:	79622064 6d657220 2065746f 69766564     d by remote devi
   d96bc:	002e6563 6e6e6143 6120746f 6e206464     ce..Cannot add n
   d96cc:	70207765 20726565 69766564 002e6563     ew peer device..
   d96dc:	2077654e 69726570 72656870 69206c61     New peripheral i
   d96ec:	6f632073 63656e6e 2e646574 69614600     s connected..Fai
   d96fc:	2064656c 61206f74 6e657070 69642064     led to append di
   d970c:	766f6373 64657265 61686320 74636172     scovered charact
   d971c:	73697265 2e636974 69614600 2064656c     eristic..Failed 
   d972c:	61206f74 6e657070 69642064 766f6373     to append discov
   d973c:	64657265 72657320 65636976 6146002e     ered service..Fa
   d974c:	64656c69 206f7420 65707061 6c20646e     iled to append l
   d975c:	6c61636f 61686320 74636172 73697265     ocal characteris
   d976c:	2e636974 70754400 6163696c 20646574     tic..Duplicated 
   d977c:	72616863 65746361 74736972 63206369     characteristic c
   d978c:	6f6e6e61 65622074 64646120 002e6465     annot be added..

000d979c <_ZN8particle7BleUuid9BASE_UUIDE>:
   d979c:	5f9b34fb 80000080 00001000 00000000     .4._............

000d97ac <_ZTVN5spark16JSONStreamWriterE>:
	...
   d97b4:	000d62a5 000d62cb 000d627f 000d809b     .b...b...b......

000d97c4 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d97cc:	000d6721 000d6735 000d707d 000d6287     !g..5g..}p...b..
   d97dc:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d97ec:	00316c61 65707974 72617000 63006d61     al1.type.param.c
   d97fc:	6800646d 7300646e 006d7274 746c6966     md.hnd.strm.filt
   d980c:	6c766c00 64646100 646e6148 0072656c     .lvl.addHandler.
   d981c:	6f6d6572 61486576 656c646e 6e650072     removeHandler.en
   d982c:	61486d75 656c646e 4a007372 534e4f53     umHandlers.JSONS
   d983c:	61657274 676f4c6d 646e6148 0072656c     treamLogHandler.
   d984c:	00707061 30313025 5d002075 64250020     app.%010u .] .%d
   d985c:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
   d986c:	00203d20 64006925 69617465 3d20736c      = .%i.details =
   d987c:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
   d988c:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
   d989c:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
   d98ac:	61700072 0063696e 006c6c61              r.panic.all.

000d98b8 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d98c0:	000d66f5 000d670d 000d6ec9 000d40cf     .f...g...n...@..

000d98d0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d98d8:	000d62a3 000d62d9 000d6df1 000d6289     .b...b...m...b..

000d98e8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d98f0:	000d62a1 000d62e7 000d6639 000d62f5     .b...b..9f...b..
   d9900:	2b25005a 3a643330 75323025 2d592500     Z.%+03d:%02u.%Y-
   d9910:	252d6d25 48255464 3a4d253a 7a255325     %m-%dT%H:%M:%S%z
   d9920:	63736100 656d6974 00000000              .asctime....

000d992c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9934:	000d73e5 000d73eb 000d742f 000d73f9     .s...s../t...s..
   d9944:	000d73e7                                .s..

000d9948 <_ZTV9IPAddress>:
	...
   d9950:	000d797d 000d796d 000d796f              }y..my..oy..

000d995c <_ZTV9USBSerial>:
	...
   d9964:	000d7a55 000d7aa5 000d7ab3 000d6161     Uz...z...z..aa..
   d9974:	000d7a91 000d7a57 000d7a6d 000d7a9f     .z..Wz..mz...z..
   d9984:	000d7a83 000d7a51                       .z..Qz..

000d998c <_ZTV11USARTSerial>:
	...
   d9994:	000d7b69 000d7bb9 000d7bc7 000d6161     i{...{...{..aa..
   d99a4:	000d7b7d 000d7b9f 000d7b8b 000d7bb3     }{...{...{...{..
   d99b4:	000d7b6b 000d7b6f                       k{..o{..

000d99bc <_ZTV7TwoWire>:
	...
   d99c4:	000d7ca9 000d7cf3 000d7ccb 000d7cab     .|...|...|...|..
   d99d4:	000d7cd3 000d7cdb 000d7ce3 000d7ceb     .|...|...|...|..

000d99e4 <_ZTVN5spark9MeshClassE>:
	...
   d99ec:	000d7d8b 000d7d81 000d7d77 000d7d6d     .}...}..w}..m}..
   d99fc:	000d7d61 000d7d55 000d7d49 000d7d41     a}..U}..I}..A}..
   d9a0c:	000d7d37 000d7d2d 000d7f8d              7}..-}......

000d9a18 <_ZTVN5spark9WiFiClassE>:
	...
   d9a20:	000d7f07 000d7efd 000d7ef3 000d7ea9     .....~...~...~..
   d9a30:	000d7ee7 000d7edb 000d7ecf 000d7ec7     .~...~...~...~..
   d9a40:	000d7ebd 000d7eb3 000d7f8d              .~...~......

000d9a4c <_ZTVN5spark12NetworkClassE>:
	...
   d9a54:	000d7f25 000d7f2f 000d7f39 000d7f43     %.../...9...C...
   d9a64:	000d7f4d 000d7f59 000d7f65 000d7f71     M...Y...e...q...
   d9a74:	000d7f79 000d7f83 000d7f8d 00302e30     y...........0.0.
   d9a84:	736c6166 72740065 25006575 666c2a2e     false.true.%.*lf
   d9a94:	00672500 6c6c756e 30257500 00007834              .%g.null.u%04x.

000d9aa3 <_ZSt7nothrow>:
	...

000d9aa4 <_ctype_>:
   d9aa4:	20202000 20202020 28282020 20282828     .         ((((( 
   d9ab4:	20202020 20202020 20202020 20202020                     
   d9ac4:	10108820 10101010 10101010 10101010      ...............
   d9ad4:	04040410 04040404 10040404 10101010     ................
   d9ae4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9af4:	01010101 01010101 01010101 10101010     ................
   d9b04:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9b14:	02020202 02020202 02020202 10101010     ................
   d9b24:	00000020 00000000 00000000 00000000      ...............
	...

000d9ba8 <__sf_fake_stdin>:
	...

000d9bc8 <__sf_fake_stdout>:
	...

000d9be8 <__sf_fake_stderr>:
	...
   d9c08:	00000043                                         C.

000d9c0a <link_const_variable_data_end>:
	...

000d9c0c <link_constructors_location>:
   d9c0c:	000d4675 	.word	0x000d4675
   d9c10:	000d47f9 	.word	0x000d47f9
   d9c14:	000d4ebd 	.word	0x000d4ebd
   d9c18:	000d4f05 	.word	0x000d4f05
   d9c1c:	000d6139 	.word	0x000d6139
   d9c20:	000d6eb9 	.word	0x000d6eb9
   d9c24:	000d7261 	.word	0x000d7261
   d9c28:	000d72b9 	.word	0x000d72b9
   d9c2c:	000d7e59 	.word	0x000d7e59
   d9c30:	000d7f11 	.word	0x000d7f11
   d9c34:	000d8059 	.word	0x000d8059
   d9c38:	000d85b9 	.word	0x000d85b9
   d9c3c:	000d863d 	.word	0x000d863d
   d9c40:	000d8701 	.word	0x000d8701
   d9c44:	000d87c5 	.word	0x000d87c5

000d9c48 <link_constructors_end>:
	...
